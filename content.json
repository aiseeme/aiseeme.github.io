[{"title":"scikit-learn machine learning in Python","date":"2017-02-12T04:40:06.000Z","path":"2017/02/12/zh-scikit-learn/","text":"scikit-learn: machine learning in Python http://scikit-learn.org scikit-learn is a Python module for machine learning built on top ofSciPy and distributed under the 3-Clause BSD license. The project was started in 2007 by David Cournapeau as a Google Summerof Code project, and since then many volunteers have contributed. Seethe AUTHORS.rst file for a complete list of contributors.It is currently maintained by a team of volunteers.Website: http://scikit-learn.org Installation Dependencies scikit-learn requires:Python (&gt;= 2.7 or &gt;= 3.3)NumPy (&gt;= 1.6.1)SciPy (&gt;= 0.9)scikit-learn also uses CBLAS, the C interface to the Basic Linear AlgebraSubprograms library. scikit-learn comes with a reference implementation, butthe system CBLAS will be detected by the build system and used if present.CBLAS exists in many implementations; see Linear algebra librariesfor known issues.User installationIf you already have a working installation of numpy and scipy,the easiest way to install scikit-learn is using pippip install -U scikit-learnor conda:conda install scikit-learnThe documentation includes more detailed installation instructions.DevelopmentWe welcome new contributors of all experience levels. The scikit-learncommunity goals are to be helpful, welcoming, and effective. TheDevelopment Guidehas detailed information about contributing code, documentation, tests, andmore. We’ve included some basic information in this README.Important linksOfficial source code repo: https://github.com/scikit-learn/scikit-learnDownload releases: https://pypi.python.org/pypi/scikit-learnIssue tracker: https://github.com/scikit-learn/scikit-learn/issuesSource codeYou can check the latest sources with the command:git clone https://github.com/scikit-learn/scikit-learn.gitSetting up a development environmentQuick tutorial on how to go about setting up your environment tocontribute to scikit-learn: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.mdTestingAfter installation, you can launch the test suite from outside thesource directory (you will need to have the nose package installed):nosetests -v sklearnUnder Windows, it is recommended to use the following command (adjust the pathto the python.exe program) as using the nosetests.exe program can badlyinteract with tests that use multiprocessing:C:\\Python34\\python.exe -c “import nose; nose.main()” -v sklearnSee the web page http://scikit-learn.org/stable/developers/advanced_installation.html#testingfor more information.Random number generation can be controlled during testing by settingthe SKLEARN_SEED environment variable.Submitting a Pull RequestBefore opening a Pull Request, have a look at thefull Contributing page to make sure your code complieswith our guidelines: http://scikit-learn.org/stable/developers/index.htmlProject HistoryThe project was started in 2007 by David Cournapeau as a Google Summerof Code project, and since then many volunteers have contributed. Seethe AUTHORS.rst file for a complete list of contributors.The project is currently maintained by a team of volunteers.Note: scikit-learn was previously referred to as scikits.learn.Help and SupportDocumentationHTML documentation (stable release): http://scikit-learn.orgHTML documentation (development version): http://scikit-learn.org/dev/FAQ: http://scikit-learn.org/stable/faq.htmlCommunicationMailing list: https://mail.python.org/mailman/listinfo/scikit-learnIRC channel: #scikit-learn at irc.freenode.netStack Overflow: http://stackoverflow.com/questions/tagged/scikit-learnWebsite: http://scikit-learn.orgCitationIf you use scikit-learn in a scientific publication, we would appreciate citations: http://scikit-learn.org/stable/about.html#citing-scikit-learn","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://ipcreator.me/tags/Python/"},{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://ipcreator.me/tags/Machine-Learning/"}]},{"title":"一些Python相关好文","date":"2017-02-12T04:29:06.000Z","path":"2017/02/12/zh-good-python-articles/","text":"收集一些python好文章 Parallelism in one line https://medium.com/building-things-on-the-internet/40e9b2b36148A Guide to Python Frameworks for Hadoop http://blog.cloudera.com/blog/2013/01/a-guide-to-python-frameworks-for-hadoop/Python, C-Python, Cython代码与GIL的交互 http://www.oschina.net/question/54100_39044用 ElementTree 在 Python 中解析 XML http://pycoders-weekly-chinese.readthedocs.org/en/latest/issue6/processing-xml-in-python-with-element-tree.htmlDecorators I: Introduction to Python Decorators http://www.artima.com/weblogs/viewpost.jsp?thread=240808two-scoops-django-best-practices-1.5.pdf http://pan.baidu.com/s/1o6Jh2IIPython Decorators II: Decorator Arguments http://www.artima.com/weblogs/viewpost.jsp?thread=240845The Performance Impact of Using dict() Instead of {} in CPython 2.7 http://doughellmann.com/2012/11/12/the-performance-impact-of-using-dict-instead-of-in-cpython-2-7-2.htmlWhat does “mro()” do in Python? http://stackoverflow.com/questions/2010692/what-does-mro-do-in-pythonPython中的init和new http://www.zlovezl.cn/articles/init-andnew-in-python/Things to Know About Python Super [1 of 3] http://www.artima.com/weblogs/viewpost.jsp?thread=236275Improve Your Python: Metaclasses and Dynamic Classes With Type http://www.jeffknupp.com/blog/2013/12/28/improve-your-python-metaclasses-and-dynamic-classes-with-type/A Primer on Python Metaclasses http://jakevdp.github.io/blog/2012/12/01/a-primer-on-python-metaclasses/Improve Your Python: Understanding Unit Testing https://www.jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing/A Guide to Python’s Magic Methods http://www.rafekettler.com/magicmethods.htmlDrastically Improve Your Python: Understanding Python’s Execution Model http://www.jeffknupp.com/blog/2013/02/14/drastically-improve-your-python-understanding-pythons-execution-model/Improving your code with modern idioms http://python3porting.com/improving.htmlFn.py: enjoy FP in Python https://github.com/kachayev/fn.py#fnpy-enjoy-fp-in-pythonFunctional Programming HOWTO http://docs.python.org/2/howto/functional.html写给Python初学者的设计模式入门 http://www.pythoner.cn/home/blog/slug1design-patterns-beginners/Python修饰器的函数式编程 http://coolshell.cn/articles/11265.htmlPython程序员的进化 http://coolshell.cn/articles/2082.htmlPython Web Server Gateway Interface v1.0 http://legacy.python.org/dev/peps/pep-0333/Python: copying a list the right way http://henry.precheur.org/python/copy_listHow should I understand the output of dis.dis? http://stackoverflow.com/questions/12673074/how-should-i-understand-the-output-of-dis-dis#为什么要阅读Tornado的源码？ http://www.nowamagic.net/academy/detail/13321002Hidden features of Python http://stackoverflow.com/questions/101268/hidden-features-of-pythonCoroutines via Enhanced Generators http://legacy.python.org/dev/peps/pep-0342/A Few of My Favorite (Python) Things http://www.slideshare.net/mpirnat/a-few-of-my-favorite-python-thingsBe careful with exec and eval in Python https://lucumr.pocoo.org/2011/2/1/exec-in-python/Top 10 Mistakes that Python Programmers Make http://www.toptal.com/python/top-10-mistakes-that-python-programmers-makeWeb Scraping at Scale: Python vs Go http://blog.dataweave.in/post/81760696759/web-scraping-at-scale-python-vs-goPython Descriptors, Part 1 of 2 http://martyalchin.com/2007/nov/23/python-descriptors-part-1-of-2/Python descriptor http://hbprotoss.github.io/posts/python-descriptor.htmlPython Interview Question and Answers http://ilian.i-n-i.org/python-interview-question-and-answers/Things you didn’t know about Python https://speakerdeck.com/mitsuhiko/didntknow深刻理解Python中的元类(metaclass) http://blog.jobbole.com/21351/A Curious Course on Coroutines and Concurrency http://www.dabeaz.com/coroutines/Coroutines.pdfTALKS AND TUTORIALS http://www.dabeaz.com/talks.htmlDescriptor HowTo Guide https://docs.python.org/2/howto/descriptor.htmlPython之美[从菜鸟到高手]–玩转描述符和属性 http://blog.csdn.net/yueguanghaidao/article/details/10291147Python与开源GIS http://lab.osgeo.cn/tutorial/pygis10 awesome features of Python that you can’t use because you refuse to upgrade to Python 3 http://asmeurer.github.io/python3-presentation/slides.html#1python-internals-adding-a-new-statement-to-python http://eli.thegreenplace.net/2010/06/30/python-internals-adding-a-new-statement-to-python/Can’t set attributes of object class http://stackoverflow.com/questions/1529002/cant-set-attributes-of-object-class/1529099#1529099Python Socket Programming http://pengyi.info/post/35/python-socket-programming/python奇技淫巧 http://www.pengyi.info/post/92/python-skill/Python 2 Tutorial http://www.python-course.eu/course.phpPython免费书54本 http://python.memect.com/?tag=bookAn introduction to parallel programmingusing Python’s multiprocessing module http://sebastianraschka.com/Articles/2014_multiprocessing_intro.htmlAsynchronous API for Python http://stevedower.id.au/blog/async-api-for-python/Python算法设计篇 http://hujiaweibujidao.github.io/python/Python3-presentation http://asmeurer.github.io/python3-presentation/slides.htmlThe Python I Would Like To See http://lucumr.pocoo.org/2014/8/16/the-python-i-would-like-to-see/Python for Fun http://www.openbookproject.net/py4fun/简明Python魔法 - 1 http://wizmann.tk/python-magic-1.htmlWhat is a metaclass in Python? http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python Understanding Asynchronous IO With Python 3.4’s Asyncio And Node.js http://sahandsaba.com/understanding-asyncio-node-js-python-3-4.htmlCombinatorial Generation Using Coroutines With Examples in Python http://sahandsaba.com/combinatorial-generation-using-coroutines-in-python.html","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://ipcreator.me/tags/Python/"}]},{"title":"大数据/数据挖掘/推荐系统/机器学习相关资源","date":"2017-02-12T04:23:06.000Z","path":"2017/02/12/zh-big-data-resources/","text":"作者：Zhe Yu/Flowerowl 大数据/数据挖掘/推荐系统/机器学习相关资源 Share my personal resources 书籍 各种书~各种ppt~更新中~ https://pan.baidu.com/s/1c1Xp6Pa机器学习经典书籍小结 http://www.cnblogs.com/snake-hand/archive/2013/06/10/3131145.html机器学习&amp;深度学习经典资料汇总 http://www.thebigdata.cn/JiShuBoKe/13299.html 视频 浙大数据挖掘系列 http://v.youku.com/v_show/id_XNTgzNDYzMjg=.html?f=2740765用Python做科学计算 http://www.tudou.com/listplay/fLDkg5e1pYM.htmlR语言视频 http://pan.baidu.com/s/1koSpZHadoop视频 http://pan.baidu.com/s/1b1xYd42区 . 技术 . 创业 . 第二讲 http://v.youku.com/v_show/id_XMzAyMDYxODUy.html加州理工学院公开课：机器学习与数据挖掘 http://v.163.com/special/opencourse/learningfromdata.htmlWilliam Huang教授–BI和数据挖掘技术 https://www.youtube.com/watch?v=gPm8SOJ1NaoJingyuan Wang王静远-北航-机器学习工具在城市数据分析中的应用https://www.youtube.com/watch?v=H2_BATE8uokTensor Flow 介紹 (1/2)https://www.youtube.com/watch?v=jA4Bh-xj_mETensor Flow 介紹 (2/2)https://www.youtube.com/watch?v=YUCsOgkFqpk 课程 机器学习 Machine Learning Stanford University https://www.coursera.org/learn/machine-learning機器學習基石 (Machine Learning Foundations) National Taiwan University https://www.coursera.org/course/ntumlone 会议 数据挖掘 ACM SigKDD http://www.kdd.orgICDM http://icdm2015.stonybrook.edu/SIAM http://www.siam.org/ QQ群 机器学习&amp;模式识别 246159753数据挖掘机器学习 236347059推荐系统 274750470 Github 推荐系统 推荐系统开源软件列表汇总和评点 http://in.sdo.com/?p=1707Mrec(Python) https://github.com/mendeley/mrecCrab(Python) https://github.com/muricoca/crabPython-recsys(Python) https://github.com/ocelma/python-recsysCofiRank(C++) https://github.com/markusweimer/cofirankGraphLab(C++) https://github.com/graphlab-code/graphlabEasyRec(Java) https://github.com/hernad/easyrecLenskit(Java) https://github.com/grouplens/lenskitMahout(Java) https://github.com/apache/mahoutRecommendable(Ruby) https://github.com/davidcelis/recommendable 库 NLTK https://github.com/nltk/nltkPattern https://github.com/clips/patternPyrallel https://github.com/pydata/pyrallelTheano https://github.com/Theano/TheanoPylearn2 https://github.com/lisa-lab/pylearn2TextBlob https://github.com/sloria/TextBlobMBSP https://github.com/clips/MBSPGensim https://github.com/piskvorky/gensimLangid.py https://github.com/saffsd/langid.pyJieba https://github.com/fxsjy/jiebaxTAS https://github.com/NLeSC/xtasNumPy https://github.com/numpy/numpySciPy https://github.com/scipy/scipyMatplotlib https://github.com/matplotlib/matplotlibscikit-learn https://github.com/scikit-learn/scikit-learnPandas https://github.com/pydata/pandasMDP http://mdp-toolkit.sourceforge.net/PyBrain https://github.com/pybrain/pybrainPyML http://pyml.sourceforge.net/Milk https://github.com/luispedro/milkPyMVPA https://github.com/PyMVPA/PyMVPATensorFlow https://github.com/tensorflow/tensorflow 博客 周涛 http://blog.sciencenet.cn/home.php?mod=space&amp;uid=3075Greg Linden http://glinden.blogspot.com/ Marcel Caraciolo http://aimotion.blogspot.com/RsysChina http://weibo.com/p/1005051686952981推荐系统人人小站 http://zhan.renren.com/recommendersystem阿稳 http://www.wentrue.net梁斌 http://weibo.com/pennyliang刁瑞 http://diaorui.netguwendong http://www.guwendong.comxlvector http://xlvector.net懒惰啊我 http://www.cnblogs.com/flclain/free mind http://blog.pluskid.org/lovebingkuai http://lovebingkuai.diandian.com/LeftNotEasy http://www.cnblogs.com/LeftNotEasyLSRS 2013 http://graphlab.org/lsrs2013/program/ Google小组 https://groups.google.com/forum/#!forum/resysJournal of Machine Learning Research http://jmlr.org/在线的机器学习社区 http://www.52ml.net/16336.html清华大学信息检索组 http://www.thuir.cn我爱自然语言处理 http://www.52nlp.cn/数据挖掘与数据分析http://spss-market.r.blog.163.com/ 文章 心中永远的正能量 http://blog.csdn.net/yunlong34574机器学习最佳入门学习资料汇总 http://article.yeeyan.org/view/22139/410514Books for Machine Learning with R http://www.52ml.net/16312.html是什么阻碍了你的机器学习目标？ http://www.52ml.net/16436.htm推荐系统初探 http://yongfeng.me/attach/rs-survey-zhang-slices.pdf推荐系统中协同过滤算法若干问题的研究 http://pan.baidu.com/s/1bnjDBYZNetflix 推荐系统：第一部分 http://blog.csdn.net/bornhe/article/details/8222450Netflix 推荐系统：第二部分 http://blog.csdn.net/bornhe/article/details/8222497探索推荐引擎内部的秘密 http://www.ibm.com/developerworks/cn/web/1103_zhaoct_recommstudy1/index.html推荐系统resys小组线下活动见闻2009-08-22 http://www.tuicool.com/articles/vUvQVnRecommendation Engines Seminar Paper, Thomas Hess, 2009: 推荐引擎的总结性文章 http://www.slideshare.net/antiraum/recommender-engines-seminar-paperToward the Next Generation of Recommender Systems: A Survey of the State-of-the-Art and Possible Extensions, Adomavicius, G.; Tuzhilin, A., 2005 http://dl.acm.org/citation.cfm?id=1070751A Taxonomy of RecommenderAgents on the Internet, Montaner, M.; Lopez, B.; de la Rosa, J. L., 2003 http://www.springerlink.com/index/KK844421T5466K35.pdfA Course in Machine Learning http://ciml.info/基于mahout构建社会化推荐引擎 http://www.doc88.com/p-745821989892.html个性化推荐技术漫谈 http://blog.csdn.net/java060515/archive/2007/04/19/1570243.aspxDesign of Recommender System http://www.slideshare.net/rashmi/design-of-recommender-systemsHow to build a recommender system http://www.slideshare.net/blueace/how-to-build-a-recommender-system-presentation推荐系统架构小结 http://blog.csdn.net/idonot/article/details/7996733System Architectures for Personalization and Recommendation http://techblog.netflix.com/2013/03/system-architectures-for.htmlThe Netflix Tech Blog http://techblog.netflix.com/百分点推荐引擎——从需求到架构http://www.infoq.com/cn/articles/baifendian-recommendation-engine推荐系统 在InfoQ上的内容 http://www.infoq.com/cn/recommend推荐系统实时化的实践和思考 http://www.infoq.com/cn/presentations/recommended-system-real-time-practice-thinking质量保证的推荐实践 http://www.infoq.com/cn/news/2013/10/testing-practice/ 推荐系统的工程挑战 http://www.infoq.com/cn/presentations/Recommend-system-engineering社会化推荐在人人网的应用 http://www.infoq.com/cn/articles/zyy-social-recommendation-in-renren/利用20%时间开发推荐引擎 http://www.infoq.com/cn/presentations/twenty-percent-time-to-develop-recommendation-engine使用Hadoop和 Mahout实现推荐引擎 http://www.jdon.com/44747SVD 简介 http://www.cnblogs.com/FengYan/archive/2012/05/06/2480664.htmlNetflix推荐系统：从评分预测到消费者法则 http://blog.csdn.net/lzt1983/article/details/7696578关于数据挖掘学习的讨论https://www.zhihu.com/question/20751219 论文 《推荐系统实战》引用 P1A Guide to Recommender System P4Cross Selling P6课程：Data Mining and E-Business: The Social Data Revolution P7)An Introduction to Search Engines and Web Navigation p7 p8p9(The Youtube video recommendation system) p9 (PPT: Music Recommendation and Discovery) p12P13 (Digg Recommendation Engine Updates) P16(The Learning Behind Gmail Priority Inbox)p17 (Accurate is not always good: How Accuracy Metrics have hurt Recommender Systems) P20(Don’t Look Stupid: Avoiding Pitfalls when Recommending Research Papers)P23 (Major componets of the gravity recommender system) P25(What is a Good Recomendation Algorithm?) P26(Evaluation Recommendation Systems) P27 (Music Recommendation and Discovery in the Long Tail) P29 (Internation Workshop on Novelty and Diversity in Recommender Systems) p29(Auralist: Introducing Serendipity into Music Recommendation ) P30 (Metrics for evaluating the serendipity of recommendation lists) P30(The effects of transparency on trust in and acceptance of a content-based art recommender) P31 (Trust-aware recommender systems) P31(Tutorial on robutness of recommender system) P32(Five Stars Dominate Ratings) P37 (Book-Crossing Dataset) P38 (Lastfm Dataset) P39 浅谈网络世界的Power Law现象 P39 (MovieLens Dataset) P42(Empirical Analysis of Predictive Algorithms for Collaborative Filtering) P49(Digg Vedio) P50(Amazon.com Recommendations Item-to-Item Collaborative Filtering) P59 (Greg Linden Blog) P63(One-Class Collaborative Filtering) P67(Stochastic Gradient Descent) P68 (Latent Factor Models for Web Recommender Systems) P70 (Bipatite Graph) P73(Random-Walk Computation of Similarities between Nodes of a Graph with Application to Collaborative Recommendation) P74(Topic Sensitive Pagerank) P74 (FAST ALGORITHMS FOR SPARSE MATRIX INVERSE COMPUTATIONS) P77(LIFESTYLE FINDER: Intelligent User Profiling Using Large-Scale Demographic Data) P80( adaptive bootstrapping of recommender systems using decision trees) P87 (Vector Space Model) P90(冷启动问题的比赛) P92(Latent Dirichlet Allocation) P92(Kullback–Leibler divergence) P93(About The Music Genome Project) P94(Pandora Music Genome Project Attributes) P94(Jinni Movie Genome) P94 (Tagsplanations: Explaining Recommendations Using Tags) P96(Tag Wikipedia) P96(Nurturing Tagging Communities) P100(Why We Tag: Motivations for Annotation in Mobile and Online Media ) P100(Delicious Dataset) P101(Finding Advertising Keywords on Web Pages) P118(基于标签的推荐系统比赛) P119(Tag recommendations based on tensor dimensionality reduction）P119(latent dirichlet allocation for tag recommendation) P119(Folkrank: A ranking algorithm for folksonomies) P119 (Tagommenders: Connecting Users to Items through Tags) P119 (The Quest for Quality Tags) P120(Challenge on Context-aware Movie Recommendation) P123(The Lifespan of a link) P125(Temporal Diversity in Recommender Systems) P129(Evaluating Collaborative Filtering Over Time) P129(Hotpot) P139 (Google Launches Hotpot, A Recommendation Engine for Places) P139 (geolocated recommendations) P140(A Peek Into Netflix Queues) P141(Distance Browsing in Spatial Databases1) P142(Efﬁcient Evaluation of k-Range Nearest Neighbor Queries in Road Networks) P143(Global Advertising: Consumers Trust Real Friends and Virtual Strangers the Most) P144 (Suggesting Friends Using the Implicit Social Graph) P145(Friends &amp; Frenemies: Why We Add and Remove Facebook Friends) P147(Stanford Large Network Dataset Collection) P149 (Workshop on Context-awareness in Retrieval and Recommendation) P151(Factorization vs. Regularization: Fusing Heterogeneous Social Relationships in Top-N Recommendation) P153 (Twitter, an Evolving Architecture) P154(Recommendations in taste related domains) P155(Comparing Recommendations Made by Online Systems and Friends) P155 (EdgeRank: The Secret Sauce That Makes Facebook’s News Feed Tick) P157(Speak Little and Well: Recommending Conversations in Online Social Streams) P158(Learn more about “People You May Know”) P160(“Make New Friends, but Keep the Old” – Recommending People on Social Networking Sites) P164 (SoRec: Social Recommendation Using Probabilistic Matrix) P165 (A Dynamic Bayesian Network Click Model for Web Search Ranking) P177(Online Learning from Click Data for Sponsored Search) P177(Contextual Advertising by Combining Relevance with Click Feedback) P177 (Hulu 推荐系统架构) P178(MyMedia Project) P178(item-based collaborative filtering recommendation algorithms) P185(Learning Collaborative Information Filters) P186 (Simon Funk Blog:Funk SVD) P187 (Factor in the Neighbors: Scalable and Accurate Collaborative Filtering) P190 (Time-dependent Models in Collaborative Filtering based Recommender System) P193 (Collaborative filtering with temporal dynamics) P193(Least Squares Wikipedia) P195(Improving regularized singular value decomposition for collaborative filtering) P195(Factorization Meets the Neighborhood: a Multifaceted Collaborative Filtering Model) P195 【CIKM 2012 Best Stu Paper】Incorporating Occupancy into Frequent Pattern Mini.pdf 【CIKM 2012 poster】A Latent Pairwise Preference Learning Approach for Recomme.pdf 【CIKM 2012 poster】An Effective Category Classification Method Based on a Lan.pdf 【CIKM 2012 poster】Learning to Rank for Hybrid Recommendation.pdf 【CIKM 2012 poster】Learning to Recommend with Social Relation Ensemble.pdf 【CIKM 2012 poster】Maximizing Revenue from Strategic Recommendations under De.pdf 【CIKM 2012 poster】On Using Category Experts for Improving the Performance an.pdf 【CIKM 2012 poster】Relation Regularized Subspace Recommending for Related Sci.pdf 【CIKM 2012 poster】Top-N Recommendation through Belief Propagation.pdf 【CIKM 2012 poster】Twitter Hyperlink Recommendation with User-Tweet-Hyperlink.pdf 【CIKM 2012 short】Automatic Query Expansion Based on Tag Recommendation.pdf 【CIKM 2012 short】Graph-Based Workflow Recommendation- On Improving Business .pdf 【CIKM 2012 short】Location-Sensitive Resources Recommendation in Social Taggi.pdf 【CIKM 2012 short】More Than Relevance- High Utility Query Recommendation By M.pdf 【CIKM 2012 short】PathRank- A Novel Node Ranking Measure on a Heterogeneous G.pdf 【CIKM 2012 short】PRemiSE- Personalized News Recommendation via Implicit Soci.pdf 【CIKM 2012 short】Query Recommendation for Children.pdf 【CIKM 2012 short】The Early-Adopter Graph and its Application to Web-Page Rec.pdf 【CIKM 2012 short】Time-aware Topic Recommendation Based on Micro-blogs.pdf 【CIKM 2012 short】Using Program Synthesis for Social Recommendations.pdf 【CIKM 2012】A Decentralized Recommender System for Effective Web Credibility .pdf 【CIKM 2012】A Generalized Framework for Reciprocal Recommender Systems.pdf 【CIKM 2012】Dynamic Covering for Recommendation Systems.pdf 【CIKM 2012】Efficient Retrieval of Recommendations in a Matrix Factorization .pdf 【CIKM 2012】Exploring Personal Impact for Group Recommendation.pdf 【CIKM 2012】LogUCB- An Explore-Exploit Algorithm For Comments Recommendation.pdf 【CIKM 2012】Metaphor- A System for Related Search Recommendations.pdf 【CIKM 2012】Social Contextual Recommendation.pdf 【CIKM 2012】Social Recommendation Across Multiple Relational Domains.pdf 【COMMUNICATIONS OF THE ACM】Recommender Systems.pdf 【ICDM 2012 short___】Multiplicative Algorithms for Constrained Non-negative M.pdf 【ICDM 2012 short】Collaborative Filtering with Aspect-based Opinion Mining- A.pdf 【ICDM 2012 short】Learning Heterogeneous Similarity Measures for Hybrid-Recom.pdf 【ICDM 2012 short】Mining Personal Context-Aware Preferences for Mobile Users.pdf 【ICDM 2012】Link Prediction and Recommendation across Heterogenous Social Networks.pdf 【IEEE Computer Society 2009】Matrix factorization techniques for recommender .pdf 【IEEE Consumer Communications and Networking Conference 2006】FilmTrust movie.pdf 【IEEE Trans on Audio, Speech and Laguage Processing 2010】Personalized music .pdf 【IEEE Transactions on Knowledge and Data Engineering 2005】Toward the next ge.pdf 【INFOCOM 2011】Bayesian-inference Based Recommendation in Online Social Network.pdf 【KDD 2009】Learning optimal ranking with tensor factorization for tag recomme.pdf 【SIGIR 2009】Learning to Recommend with Social Trust Ensemble.pdf 【SIGIR 2012】Adaptive Diversification of Recommendation Results via Latent Fa.pdf 【SIGIR 2012】Collaborative Personalized Tweet Recommendation.pdf 【SIGIR 2012】Dual Role Model for Question Recommendation in Community Questio.pdf 【SIGIR 2012】Exploring Social Influence for Recommendation - A Generative Mod.pdf 【SIGIR 2012】Increasing Temporal Diversity with Purchase Intervals.pdf 【SIGIR 2012】Learning to Rank Social Update Streams.pdf 【SIGIR 2012】Personalized Click Shaping through Lagrangian Duality for Online.pdf 【SIGIR 2012】Predicting the Ratings of Multimedia Items for Making Personaliz.pdf 【SIGIR 2012】TFMAP-Optimizing MAP for Top-N Context-aware Recommendation.pdf 【SIGIR 2012】What Reviews are Satisfactory- Novel Features for Automatic Help.pdf 【SIGKDD 2012】 A Semi-Supervised Hybrid Shilling Attack Detector for Trustwor.pdf 【SIGKDD 2012】 RecMax- Exploiting Recommender Systems for Fun and Profit.pdf 【SIGKDD 2012】Circle-based Recommendation in Online Social Networks.pdf 【SIGKDD 2012】Cross-domain Collaboration Recommendation.pdf 【SIGKDD 2012】Finding Trending Local Topics in Search Queries for Personaliza.pdf 【SIGKDD 2012】GetJar Mobile Application Recommendations with Very Sparse Datasets.pdf 【SIGKDD 2012】Incorporating Heterogenous Information for Personalized Tag Rec.pdf 【SIGKDD 2012】Learning Personal+Social Latent Factor Model for Social Recomme.pdf 【VLDB 2012】Challenging the Long Tail Recommendation.pdf 【VLDB 2012】Supercharging Recommender Systems using Taxonomies for Learning U.pdf 【WWW 2012 Best paper】Build Your Own Music Recommender by Modeling Internet R.pdf 【WWW 2013】A Personalized Recommender System Based on User’s Informatio.pdf 【WWW 2013】Diversified Recommendation on Graphs-Pitfalls, Measures, and Algorithms.pdf 【WWW 2013】Do Social Explanations Work-Studying and Modeling the Effects of S.pdf 【WWW 2013】Generation of Coalition Structures to Provide Proper Groups’.pdf 【WWW 2013】Learning to Recommend with Multi-Faceted Trust in Social Networks.pdf 【WWW 2013】Multi-Label Learning with Millions of Labels-Recommending Advertis.pdf 【WWW 2013】Personalized Recommendation via Cross-Domain Triadic Factorization.pdf 【WWW 2013】Profile Deversity in Search and Recommendation.pdf 【WWW 2013】Real-Time Recommendation of Deverse Related Articles.pdf 【WWW 2013】Recommendation for Online Social Feeds by Exploiting User Response.pdf 【WWW 2013】Recommending Collaborators Using Keywords.pdf 【WWW 2013】Signal-Based User Recommendation on Twitter.pdf 【WWW 2013】SoCo- A Social Network Aided Context-Aware Recommender System.pdf 【WWW 2013】Tailored News in the Palm of Your HAND-A Multi-Perspective Transpa.pdf 【WWW 2013】TopRec-Domain-Specific Recommendation through Community Topic Mini.pdf 【WWW 2013】User’s Satisfaction in Recommendation Systems for Groups-an .pdf 【WWW 2013】Using Link Semantics to Recommend Collaborations in Academic Socia.pdf 【WWW 2013】Whom to Mention-Expand the Diffusion of Tweets by @ Recommendation.pdf Recommender+Systems+Handbook.pdf tutorial.pdf 各个领域的推荐系统 图书 Amazon豆瓣读书当当网 新闻 Google NewsGenieoGetprismatic http://getprismatic.com/ 电影 NetflixJinniMovieLensRotten TomatoesFlixsterMTime 音乐 豆瓣电台LastfmPandoraMufinLalaEMusicPing虾米电台Jing.FM 视频 YoutubeHuluClciker 文章 CiteULikeGoogle ReaderStumbleUpon 旅游 WanderflyTripAdvisor 社会网络 FacebookTwitter 综合 AmazonGetGlueStrandsHunch 欢迎贡献资源~~待续","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Big Data","slug":"Big-Data","permalink":"http://ipcreator.me/tags/Big-Data/"},{"name":"Data Digging","slug":"Data-Digging","permalink":"http://ipcreator.me/tags/Data-Digging/"},{"name":"Recommend System","slug":"Recommend-System","permalink":"http://ipcreator.me/tags/Recommend-System/"}]},{"title":"Google 开源项目风格指南 (中文版)","date":"2017-02-12T04:10:06.000Z","path":"2017/02/12/zh-google-styleguide/","text":"作者：Jinhai ZHOU/JinhaiZ Google 开源项目风格指南 (中文版) 在线文档托管在 ReadTheDocs : 在线阅读最新版本中文风格指南 GitHub 托管地址：zh-google-styleguideNote声明.本项目并非 Google 官方项目, 而是由国内程序员凭热情创建和维护.如果你关注的是 Google 官方英文版, 请移步 Google Style Guide每个较大的开源项目都有自己的风格指南: 关于如何为该项目编写代码的一系列约定 (有时候会比较武断).当所有代码均保持一致的风格, 在理解大型代码库时更为轻松.“风格” 的含义涵盖范围广, 从 “变量使用驼峰格式 (camelCase)” 到 “决不使用全局变量” 再到 “决不使用异常”.英文版项目维护的是在 Google 使用的编程风格指南. 如果你正在修改的项目源自 Google, 你可能会被引导至英文版项目页面, 以了解项目所使用的风格.我们已经发布了五份 中文版 的风格指南:Google C++ 风格指南Google Objective-C 风格指南Google Python 风格指南Google JSON 风格指南Google Shell 风格指南中文版项目采用 reStructuredText 纯文本标记语法, 并使用 Sphinx 生成 HTML / CHM / PDF 等文档格式.英文版项目还包含 cpplint - 一个用来帮助适应风格准则的工具, 以及 google-c-style.el, Google 风格的 Emacs 配置文件.另外, 招募志愿者翻译 JavaScript Style Guide 以及 XML Document Format Style Guide, 有意者请联系 Yang.Y.","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Google","slug":"Google","permalink":"http://ipcreator.me/tags/Google/"},{"name":"Open Source","slug":"Open-Source","permalink":"http://ipcreator.me/tags/Open-Source/"}]},{"title":"Android官方培训课程中文版","date":"2017-02-12T03:26:06.000Z","path":"2017/02/12/zh-android-training-course-in-chinese/","text":"作者：quan wen/wenquan0hf Android官方培训课程中文版(v0.9.4)Google Android团队在2012年的时候开设了Android Training板块 - http://developer.android.com/training/index.html，这些课程是学习Android应用开发的绝佳资料。我们通过Github发起开源协作翻译的项目，完成中文版的输出，欢迎大家传阅学习！文章中难免会有很多写的不对不好的地方，欢迎读者加入此协作项目，进行纠错，为完善这份教程贡献一点力量!Github托管主页https://github.com/kesenhoo/android-training-course-in-chinese请读者点击Star进行关注并支持！在线阅读http://hukai.me/android-training-course-in-chinese/index.html更新记录v0.9.4 - 2015/06/11v0.9.3 - 2015/05/18v0.9.2 - 2015/03/30v0.9.1 - 2015/03/14v0.9.0 - 2015/03/09v0.8.0 - 2015/02/12v0.7.0 - 2014/11/30v0.6.0 - 2014/11/02v0.5.0 - 2014/10/18v0.4.0 - 2014/09/11v0.3.0 - 2014/08/31v0.2.0 - 2014/08/14v0.1.0 - 2014/08/05参与方式你可以选择以下的方式帮忙修改纠正这份教程（推荐使用方法1）：通过在线阅读课程的页面，找到Github仓库对应的章节文件，直接在线编辑修改提交即可。在线阅读的文章底部留言，提出问题与修改意见，我们会及时处理。写邮件给发起人：胡凯，邮箱是kesenhoo at gmail.com，邮件内容注明需要纠正的章节段落位置，并给出纠正的建议。你也可以选择加入QQ群和学习Training课程的小伙伴一起讨论交流：Android Training基础群，适合刚接触Android Training课程的同学。基础群(1)：363415744，已满基础群(2)：399077455，已满基础群(3)：458929573Android Training进阶群：适合实际Android开发经验1-3年的同学。进阶群(1)：414115939，已满进阶群(2)：386059229Android Training高级群：399096506，理论上Android开发经验至少3年以上，部分能力突出的也可以申请，请在申请入群的时候填写能力举证(例如，XXX公司Android高级开发/个人博客/Github账号等等)，未填写的不予通过，谢谢配合！课程结构序言Android入门基础：从这里开始建立你的第一个App - @yuanfentiank789添加ActionBar - @vincent4j兼容不同的设备 - @Lin-H管理Activity的生命周期 - @kesenhoo使用Fragment建立动态的UI - @fastcome1985数据保存 - @kesenhoo与其他应用的交互 - @kesenhooAndroid分享操作分享简单的数据 - @kesenhoo分享文件 - @jdneo使用NFC分享文件 - @jdneoAndroid多媒体管理音频播放 - @kesenhoo拍照 - @kesenhoo打印 - @jdneoAndroid图像与动画高效显示Bitmap - @kesenhoo使用OpenGL ES显示图像 - @jdneo添加动画 - @XizhiXuAndroid网络连接与云服务无线连接设备 - @naizhengtan网络连接操作 - @kesenhoo传输数据时避免消耗大量电量 - @kesenhoo使用Sync Adapter传输数据 - @jdneo使用Volley执行网络数据传输 - @kesenhoo云同步 - @kesenhoo，@jdneo解决云同步的保存冲突 - @jdneoAndroid联系人与位置信息Android联系人信息 - @spencer198711Android位置信息 - @penkzhouAndroid可穿戴应用赋予Notification可穿戴的特性 - @wangyachen创建可穿戴的应用 - @kesenhoo创建自定义的UI - @Roya发送并同步数据 - @wly2014创建表盘 - @heray1990位置检测 - @heray1990Android企业级应用Ensuring Compatibility with Managed Profiles - @2015/03/14 - 待认领Implementing App Restrictions - @2015/03/14 - 待认领Building a Work Policy Controller - @2015/03/14 - 待认领Android TV应用创建TV应用 - @awong1900创建TV播放应用 - @huanglizhuo帮助用户在TV上探索内容 - @awong1900创建TV游戏应用 - @dupengwei创建TV直播应用 - @dupengweiTV应用清单 - @awong1900Android交互设计设计高效的导航 - @XizhiXu实现高效的导航 - @Lin-H通知提示用户 - @fastcome1985增加搜索功能 - @Lin-H使得你的App内容可被Google搜索 - @Lin-HAndroid界面设计为多屏幕设计 - @riverfeng创建自定义View - @kesenhoo创建向后兼容的UI - @spencer198711实现辅助功能 - @K0ST管理系统UI - @K0ST创建Material Design的应用 - @allenlsyAndroid用户输入使用触摸手势 - @Andrwyw处理键盘输入 - @zhaochunqi支持游戏控制器 - @heray1990Android后台任务在IntentService中执行后台任务 - @kesenhoo在后台加载数据 - @kesenhoo管理设备的唤醒状态 - @jdneo,@lltowqAndroid性能优化管理应用的内存 - @kesenhoo性能优化Tips - @kesenhoo提升Layout的性能 - @allenlsy优化电池寿命 - @kesenhoo多线程操作 - @AllenZheng1991避免程序无响应ANR - @kesenhooJNI Tips - @pedant优化多核处理器(SMP)下的Android程序 - @kesenhoo - 20%Android安全与隐私Security Tips - @craftsmanBai使用HTTPS与SSL - @craftsmanBaiAndroid测试程序测试你的Activity - @huanglizhuo致谢发起这个项目之后，得到很多人的支持，有经验丰富的Android开发者，也有刚接触Android的爱好者。他们有些已经上班，有些还是学生，有些在国内，还有的在国外！感谢所有参与或者关注这个项目的小伙伴!下面是参与翻译的小伙伴(Github ID按照课程结构排序)：012@yuanfentiank789@vincent4j@Lin-H@kesenhoo@fastcome1985@jdneo@XizhiXu@naizhengtan@spencer198711@penkzhou@wangyachen@wly2014@fastcome1985@riverfeng@xrayzh@K0ST@Andrwyw@zhaochunqi@lltowq@allenlsy@AllenZheng1991@pedant@craftsmanBai@huanglizhuo@Roya@awong1900@dupengwei0:101:102:10@发起人:胡凯，博客：http://hukai.me，Github：https://github.com/kesenhoo，微博：http://weibo.com/kesenhoo还有众多参与纠错校正的同学名字就不一一列举了，谢谢所有关注这个项目的小伙伴！特别感谢安卓巴士社区，爱开发社区，码农周刊对项目的宣传！License本站作品由https://github.com/kesenhoo/android-training-course-in-chinese创作，采用知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议进行许可。","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://ipcreator.me/tags/Android/"}]},{"title":"Awesome Machine Learning","date":"2017-02-12T03:26:06.000Z","path":"2017/02/12/zh-awesome-machine-learning/","text":"作者：Joseph Misiti/josephmisiti A curated list of awesome machine learning frameworks, libraries and software (by language). Inspired by awesome-php. If you want to contribute to this list (please do), send me a pull request or contact me @josephmisitiAlso, a listed repository should be deprecated if: Repository’s owner explicitly say that “this library is not maintained”.Not committed for long time (2~3 years). For a list of free machine learning books available for download, go here. For a list of free-to-attend meetups and local events, go here. Table of Contents APLGeneral-Purpose Machine LearningCGeneral-Purpose Machine LearningComputer VisionC++Computer VisionGeneral-Purpose Machine LearningNatural Language ProcessingSequence AnalysisGesture RecognitionCommon LispGeneral-Purpose Machine LearningClojureNatural Language ProcessingGeneral-Purpose Machine LearningData Analysis / Data VisualizationElixirGeneral-Purpose Machine LearningNatural Language ProcessingErlangGeneral-Purpose Machine LearningGoNatural Language ProcessingGeneral-Purpose Machine LearningData Analysis / Data VisualizationHaskellGeneral-Purpose Machine LearningJavaNatural Language ProcessingGeneral-Purpose Machine LearningData Analysis / Data VisualizationDeep LearningJavascriptNatural Language ProcessingData Analysis / Data VisualizationGeneral-Purpose Machine LearningMiscJuliaGeneral-Purpose Machine LearningNatural Language ProcessingData Analysis / Data VisualizationMisc Stuff / PresentationsLuaGeneral-Purpose Machine LearningDemos and ScriptsMatlabComputer VisionNatural Language ProcessingGeneral-Purpose Machine LearningData Analysis / Data Visualization.NETComputer VisionNatural Language ProcessingGeneral-Purpose Machine LearningData Analysis / Data VisualizationObjective CGeneral-Purpose Machine LearningOCamlGeneral-Purpose Machine LearningPHPNatural Language ProcessingGeneral-Purpose Machine LearningPythonComputer VisionNatural Language ProcessingGeneral-Purpose Machine LearningData Analysis / Data VisualizationMisc Scripts / iPython Notebooks / CodebasesKaggle Competition Source CodeNeural networksRubyNatural Language ProcessingGeneral-Purpose Machine LearningData Analysis / Data VisualizationMiscRustGeneral-Purpose Machine LearningRGeneral-Purpose Machine LearningData Analysis / Data VisualizationSASGeneral-Purpose Machine LearningData Analysis / Data VisualizationHigh Performance Machine Learning (MPP)Natural Language ProcessingDemos and ScriptsScalaNatural Language ProcessingData Analysis / Data VisualizationGeneral-Purpose Machine LearningSwiftGeneral-Purpose Machine LearningTensorFlowGeneral-Purpose Machine LearningCredits APL General-Purpose Machine Learning naive-apl - Naive Bayesian Classifier implementation in APL C General-Purpose Machine Learning Darknet - Darknet is an open source neural network framework written in C and CUDA. It is fast, easy to install, and supports CPU and GPU computation. Recommender - A C library for product recommendations/suggestions using collaborative filtering (CF). Hybrid Recommender System - A hybrid recomender system based upon scikit-learn algorithms. Computer Vision CCV - C-based/Cached/Core Computer Vision Library, A Modern Computer Vision Library VLFeat - VLFeat is an open and portable library of computer vision algorithms, which has Matlab toolbox Speech Recognition HTK -The Hidden Markov Model Toolkit (HTK) is a portable toolkit for building and manipulating hidden Markov models. C++ Computer Vision DLib - DLib has C++ and Python interfaces for face detection and training general object detectors. EBLearn - Eblearn is an object-oriented C++ library that implements various machine learning models OpenCV - OpenCV has C++, C, Python, Java and MATLAB interfaces and supports Windows, Linux, Android and Mac OS. VIGRA - VIGRA is a generic cross-platform C++ computer vision and machine learning library for volumes of arbitrary dimensionality with Python bindings. General-Purpose Machine Learning BanditLib - A simple Multi-armed Bandit library. Caffe - A deep learning framework developed with cleanliness, readability, and speed in mind. [DEEP LEARNING] CNTK - The Computational Network Toolkit (CNTK) by Microsoft Research, is a unified deep-learning toolkit that describes neural networks as a series of computational steps via a directed graph. CUDA - This is a fast C++/CUDA implementation of convolutional [DEEP LEARNING] CXXNET - Yet another deep learning framework with less than 1000 lines core code [DEEP LEARNING] DeepDetect - A machine learning API and server written in C++11. It makes state of the art machine learning easy to work with and integrate into existing applications. Disrtibuted Machine learning Tool Kit (DMTK) - A distributed machine learning (parameter server) framework by Microsoft. Enables training models on large data sets across multiple machines. Current tools bundled with it include: LightLDA and Distributed (Multisense) Word Embedding. DLib - A suite of ML tools designed to be easy to imbed in other applications DSSTNE - A software library created by Amazon for training and deploying deep neural networks using GPUs which emphasizes speed and scale over experimental flexibility. DyNet - A dynamic neural network library working well with networks that have dynamic structures that change for every training instance. Written in C++ with bindings in Python. encog-cpp Fido - A highly-modular C++ machine learning library for embedded electronics and robotics. igraph - General purpose graph library Intel(R) DAAL - A high performance software library developed by Intel and optimized for Intel’s architectures. Library provides algorithmic building blocks for all stages of data analytics and allows to process data in batch, online and distributed modes. LightGBM - Microsoft’s fast, distributed, high performance gradient boosting (GBDT, GBRT, GBM or MART) framework based on decision tree algorithms, used for ranking, classification and many other machine learning tasks. MLDB - The Machine Learning Database is a database designed for machine learning. Send it commands over a RESTful API to store data, explore it using SQL, then train machine learning models and expose them as APIs. mlpack - A scalable C++ machine learning library Regularized Greedy Forest - Regularized greedy forest (RGF) tree ensemble learning method. ROOT - A modular scientific software framework. It provides all the functionalities needed to deal with big data processing, statistical analysis, visualization and storage. shark - A fast, modular, feature-rich open-source C++ machine learning library. Shogun - The Shogun Machine Learning Toolbox sofia-ml - Suite of fast incremental algorithms. Stan - A probabilistic programming language implementing full Bayesian statistical inference with Hamiltonian Monte Carlo sampling Timbl - A software package/C++ library implementing several memory-based learning algorithms, among which IB1-IG, an implementation of k-nearest neighbor classification, and IGTree, a decision-tree approximation of IB1-IG. Commonly used for NLP. Vowpal Wabbit (VW) - A fast out-of-core learning system. Warp-CTC - A fast parallel implementation of Connectionist Temporal Classification (CTC), on both CPU and GPU. XGBoost - A parallelized optimized general purpose gradient boosting library. Natural Language Processing BLLIP Parser - BLLIP Natural Language Parser (also known as the Charniak-Johnson parser) colibri-core - C++ library, command line tools, and Python binding for extracting and working with basic linguistic constructions such as n-grams and skipgrams in a quick and memory-efficient way. CRF++ - Open source implementation of Conditional Random Fields (CRFs) for segmenting/labeling sequential data &amp; other Natural Language Processing tasks. CRFsuite - CRFsuite is an implementation of Conditional Random Fields (CRFs) for labeling sequential data. frog - Memory-based NLP suite developed for Dutch: PoS tagger, lemmatiser, dependency parser, NER, shallow parser, morphological analyzer. libfolia - C++ library for the FoLiA format MeTA - MeTA : ModErn Text Analysis is a C++ Data Sciences Toolkit that facilitates mining big text data. MIT Information Extraction Toolkit - C, C++, and Python tools for named entity recognition and relation extraction ucto - Unicode-aware regular-expression based tokenizer for various languages. Tool and C++ library. Supports FoLiA format. Speech Recognition Kaldi - Kaldi is a toolkit for speech recognition written in C++ and licensed under the Apache License v2.0. Kaldi is intended for use by speech recognition researchers. Sequence Analysis ToPS - This is an objected-oriented framework that facilitates the integration of probabilistic models for sequences over a user defined alphabet. Gesture Detection grt - The Gesture Recognition Toolkit (GRT) is a cross-platform, open-source, C++ machine learning library designed for real-time gesture recognition. Common Lisp General-Purpose Machine Learning mgl - Neural networks (boltzmann machines, feed-forward and recurrent nets), Gaussian Processes mgl-gpr - Evolutionary algorithms cl-libsvm - Wrapper for the libsvm support vector machine library Clojure Natural Language Processing Clojure-openNLP - Natural Language Processing in Clojure (opennlp) Infections-clj - Rails-like inflection library for Clojure and ClojureScript General-Purpose Machine Learning Touchstone - Clojure A/B testing library Clojush - The Push programming language and the PushGP genetic programming system implemented in Clojure Infer - Inference and machine learning in clojure Clj-ML - A machine learning library for Clojure built on top of Weka and friends Encog - Clojure wrapper for Encog (v3) (Machine-Learning framework that specializes in neural-nets) Fungp - A genetic programming library for Clojure Statistiker - Basic Machine Learning algorithms in Clojure. clortex - General Machine Learning library using Numenta’s Cortical Learning Algorithm comportex - Functionally composable Machine Learning library using Numenta’s Cortical Learning Algorithm cortex - Neural networks, regression and feature learning in Clojure. lambda-ml - Simple, concise implementations of machine learning techniques and utilities in Clojure. Data Analysis / Data Visualization Incanter - Incanter is a Clojure-based, R-like platform for statistical computing and graphics. PigPen - Map-Reduce for Clojure. Envision - Clojure Data Visualisation library, based on Statistiker and D3 Elixir General-Purpose Machine Learning Simple Bayes - A Simple Bayes / Naive Bayes implementation in Elixir. Natural Language Processing Stemmer - An English (Porter2) stemming implementation in Elixir. Erlang General-Purpose Machine Learning Disco - Map Reduce in Erlang Go Natural Language Processing go-porterstemmer - A native Go clean room implementation of the Porter Stemming algorithm. paicehusk - Golang implementation of the Paice/Husk Stemming Algorithm. snowball - Snowball Stemmer for Go. go-ngram - In-memory n-gram index with compression. General-Purpose Machine Learning gago - Multi-population, flexible, parallel genetic algorithm. Go Learn - Machine Learning for Go go-pr - Pattern recognition package in Go lang. go-ml - Linear / Logistic regression, Neural Networks, Collaborative Filtering and Gaussian Multivariate Distribution bayesian - Naive Bayesian Classification for Golang. go-galib - Genetic Algorithms library written in Go / golang Cloudforest - Ensembles of decision trees in go/golang. gobrain - Neural Networks written in go GoNN - GoNN is an implementation of Neural Network in Go Language, which includes BPNN, RBF, PCN MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, Javascript and more. go-mxnet-predictor - Go binding for MXNet c_predict_api to do inference with pre-trained model Data Analysis / Data Visualization go-graph - Graph library for Go/golang language. SVGo - The Go Language library for SVG generation RF - Random forests implementation in Go Haskell General-Purpose Machine Learning haskell-ml - Haskell implementations of various ML algorithms. HLearn - a suite of libraries for interpreting machine learning models according to their algebraic structure. hnn - Haskell Neural Network library. hopfield-networks - Hopfield Networks for unsupervised learning in Haskell. caffegraph - A DSL for deep neural networks LambdaNet - Configurable Neural Networks in Haskell Java Natural Language Processing Cortical.io - Retina: an API performing complex NLP operations (disambiguation, classification, streaming text filtering, etc…) as quickly and intuitively as the brain. CoreNLP - Stanford CoreNLP provides a set of natural language analysis tools which can take raw English language text input and give the base forms of words Stanford Parser - A natural language parser is a program that works out the grammatical structure of sentences Stanford POS Tagger - A Part-Of-Speech Tagger (POS Tagger Stanford Name Entity Recognizer - Stanford NER is a Java implementation of a Named Entity Recognizer. Stanford Word Segmenter - Tokenization of raw text is a standard pre-processing step for many NLP tasks. Tregex, Tsurgeon and Semgrex - Tregex is a utility for matching patterns in trees, based on tree relationships and regular expression matches on nodes (the name is short for “tree regular expressions”). Stanford Phrasal: A Phrase-Based Translation System Stanford English Tokenizer - Stanford Phrasal is a state-of-the-art statistical phrase-based machine translation system, written in Java. Stanford Tokens Regex - A tokenizer divides text into a sequence of tokens, which roughly correspond to “words” Stanford Temporal Tagger - SUTime is a library for recognizing and normalizing time expressions. Stanford SPIED - Learning entities from unlabeled text starting with seed sets using patterns in an iterative fashion Stanford Topic Modeling Toolbox - Topic modeling tools to social scientists and others who wish to perform analysis on datasets Twitter Text Java - A Java implementation of Twitter’s text processing library MALLET - A Java-based package for statistical natural language processing, document classification, clustering, topic modeling, information extraction, and other machine learning applications to text. OpenNLP - a machine learning based toolkit for the processing of natural language text. LingPipe - A tool kit for processing text using computational linguistics. ClearTK - ClearTK provides a framework for developing statistical natural language processing (NLP) components in Java and is built on top of Apache UIMA. Apache cTAKES - Apache clinical Text Analysis and Knowledge Extraction System (cTAKES) is an open-source natural language processing system for information extraction from electronic medical record clinical free-text. ClearNLP - The ClearNLP project provides software and resources for natural language processing. The project started at the Center for Computational Language and EducAtion Research, and is currently developed by the Center for Language and Information Research at Emory University. This project is under the Apache 2 license. CogcompNLP - This project collects a number of core libraries for Natural Language Processing (NLP) developed in the University of Illinois’ Cognitive Computation Group, for example illinois-core-utilities which provides a set of NLP-friendly data structures and a number of NLP-related utilities that support writing NLP applications, running experiments, etc, illinois-edison a library for feature extraction from illinois-core-utilities data structures and many other packages. General-Purpose Machine Learning aerosolve - A machine learning library by Airbnb designed from the ground up to be human friendly. Datumbox - Machine Learning framework for rapid development of Machine Learning and Statistical applications ELKI - Java toolkit for data mining. (unsupervised: clustering, outlier detection etc.) Encog - An advanced neural network and machine learning framework. Encog contains classes to create a wide variety of networks, as well as support classes to normalize and process data for these neural networks. Encog trains using multithreaded resilient propagation. Encog can also make use of a GPU to further speed processing time. A GUI based workbench is also provided to help model and train neural networks. FlinkML in Apache Flink - Distributed machine learning library in Flink H2O - ML engine that supports distributed learning on Hadoop, Spark or your laptop via APIs in R, Python, Scala, REST/JSON. htm.java - General Machine Learning library using Numenta’s Cortical Learning Algorithm java-deeplearning - Distributed Deep Learning Platform for Java, Clojure,Scala Mahout - Distributed machine learning Meka - An open source implementation of methods for multi-label classification and evaluation (extension to Weka). MLlib in Apache Spark - Distributed machine learning library in Spark Hydrosphere Mist - a service for deployment Apache Spark MLLib machine learning models as realtime, batch or reactive web services. Neuroph - Neuroph is lightweight Java neural network framework ORYX - Lambda Architecture Framework using Apache Spark and Apache Kafka with a specialization for real-time large-scale machine learning. Samoa SAMOA is a framework that includes distributed machine learning for data streams with an interface to plug-in different stream processing platforms. RankLib - RankLib is a library of learning to rank algorithms rapaio - statistics, data mining and machine learning toolbox in Java RapidMiner - RapidMiner integration into Java code Stanford Classifier - A classifier is a machine learning tool that will take data items and place them into one of k classes. SmileMiner - Statistical Machine Intelligence &amp; Learning Engine SystemML - flexible, scalable machine learning (ML) language. WalnutiQ - object oriented model of the human brain Weka - Weka is a collection of machine learning algorithms for data mining tasks LBJava - Learning Based Java is a modeling language for the rapid development of software systems, offers a convenient, declarative syntax for classifier and constraint definition directly in terms of the objects in the programmer’s application. Speech Recognition CMU Sphinx - Open Source Toolkit For Speech Recognition purely based on Java speech recognition library. Data Analysis / Data Visualization Flink - Open source platform for distributed stream and batch data processing. Hadoop - Hadoop/HDFS Spark - Spark is a fast and general engine for large-scale data processing. Storm - Storm is a distributed realtime computation system. Impala - Real-time Query for Hadoop DataMelt - Mathematics software for numeric computation, statistics, symbolic calculations, data analysis and data visualization. Dr. Michael Thomas Flanagan’s Java Scientific Library Deep Learning Deeplearning4j - Scalable deep learning for industry with parallel GPUs Javascript Natural Language Processing Twitter-text - A JavaScript implementation of Twitter’s text processing library NLP.js - NLP utilities in javascript and coffeescript natural - General natural language facilities for node Knwl.js - A Natural Language Processor in JS Retext - Extensible system for analyzing and manipulating natural language TextProcessing - Sentiment analysis, stemming and lemmatization, part-of-speech tagging and chunking, phrase extraction and named entity recognition. NLP Compromise - Natural Language processing in the browser Data Analysis / Data Visualization D3.js High Charts NVD3.js dc.js chartjs dimple amCharts D3xter - Straight forward plotting built on D3 statkit - Statistics kit for JavaScript datakit - A lightweight framework for data analysis in JavaScript science.js - Scientific and statistical computing in JavaScript. Z3d - Easily make interactive 3d plots built on Three.js Sigma.js - JavaScript library dedicated to graph drawing. C3.js- customizable library based on D3.js for easy chart drawing. Datamaps- Customizable SVG map/geo visualizations using D3.js. ZingChart- library written on Vanilla JS for big data visualization. cheminfo - Platform for data visualization and analysis, using the visualizer project. General-Purpose Machine Learning Convnet.js - ConvNetJS is a Javascript library for training Deep Learning models[DEEP LEARNING] Clusterfck - Agglomerative hierarchical clustering implemented in Javascript for Node.js and the browser Clustering.js - Clustering algorithms implemented in Javascript for Node.js and the browser Decision Trees - NodeJS Implementation of Decision Tree using ID3 Algorithm DN2A - Digital Neural Networks Architecture figue - K-means, fuzzy c-means and agglomerative clustering Node-fann - FANN (Fast Artificial Neural Network Library) bindings for Node.js Kmeans.js - Simple Javascript implementation of the k-means algorithm, for node.js and the browser LDA.js - LDA topic modeling for node.js Learning.js - Javascript implementation of logistic regression/c4.5 decision tree Machine Learning - Machine learning library for Node.js machineJS - Automated machine learning, data formatting, ensembling, and hyperparameter optimization for competitions and exploration- just give it a .csv file! mil-tokyo - List of several machine learning libraries Node-SVM - Support Vector Machine for nodejs Brain - Neural networks in JavaScript [Deprecated] Bayesian-Bandit - Bayesian bandit implementation for Node and the browser. Synaptic - Architecture-free neural network library for node.js and the browser kNear - JavaScript implementation of the k nearest neighbors algorithm for supervised learning NeuralN - C++ Neural Network library for Node.js. It has advantage on large dataset and multi-threaded training. kalman - Kalman filter for Javascript. shaman - node.js library with support for both simple and multiple linear regression. ml.js - Machine learning and numerical analysis tools for Node.js and the Browser! Pavlov.js - Reinforcement learning using Markov Decision Processes MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, Javascript and more. Misc sylvester - Vector and Matrix math for JavaScript. simple-statistics - A JavaScript implementation of descriptive, regression, and inference statistics. Implemented in literate JavaScript with no dependencies, designed to work in all modern browsers (including IE) as well as in node.js. regression-js - A javascript library containing a collection of least squares fitting methods for finding a trend in a set of data. Lyric - Linear Regression library. GreatCircle - Library for calculating great circle distance. Julia General-Purpose Machine Learning MachineLearning - Julia Machine Learning library MLBase - A set of functions to support the development of machine learning algorithms PGM - A Julia framework for probabilistic graphical models. DA - Julia package for Regularized Discriminant Analysis Regression - Algorithms for regression analysis (e.g. linear regression and logistic regression) Local Regression - Local regression, so smooooth! Naive Bayes - Simple Naive Bayes implementation in Julia Mixed Models - A Julia package for fitting (statistical) mixed-effects models Simple MCMC - basic mcmc sampler implemented in Julia Distance - Julia module for Distance evaluation Decision Tree - Decision Tree Classifier and Regressor Neural - A neural network in Julia MCMC - MCMC tools for Julia Mamba - Markov chain Monte Carlo (MCMC) for Bayesian analysis in Julia GLM - Generalized linear models in Julia Online Learning GLMNet - Julia wrapper for fitting Lasso/ElasticNet GLM models using glmnet Clustering - Basic functions for clustering data: k-means, dp-means, etc. SVM - SVM’s for Julia Kernal Density - Kernel density estimators for julia Dimensionality Reduction - Methods for dimensionality reduction NMF - A Julia package for non-negative matrix factorization ANN - Julia artificial neural networks Mocha - Deep Learning framework for Julia inspired by Caffe XGBoost - eXtreme Gradient Boosting Package in Julia ManifoldLearning - A Julia package for manifold learning and nonlinear dimensionality reduction MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, Javascript and more. Merlin - Flexible Deep Learning Framework in Julia ROCAnalysis - Receiver Operating Characteristics and functions for evaluation probabilistic binary classifiers GaussianMixtures - Large scale Gaussian Mixture Models ScikitLearn - Julia implementation of the scikit-learn API Knet - Koç University Deep Learning Framework Natural Language Processing Topic Models - TopicModels for Julia Text Analysis - Julia package for text analysis Data Analysis / Data Visualization Graph Layout - Graph layout algorithms in pure Julia Data Frames Meta - Metaprogramming tools for DataFrames Julia Data - library for working with tabular data in Julia Data Read - Read files from Stata, SAS, and SPSS Hypothesis Tests - Hypothesis tests for Julia Gadfly - Crafty statistical graphics for Julia. Stats - Statistical tests for Julia RDataSets - Julia package for loading many of the data sets available in R DataFrames - library for working with tabular data in Julia Distributions - A Julia package for probability distributions and associated functions. Data Arrays - Data structures that allow missing values Time Series - Time series toolkit for Julia Sampling - Basic sampling algorithms for Julia Misc Stuff / Presentations DSP - Digital Signal Processing (filtering, periodograms, spectrograms, window functions). JuliaCon Presentations - Presentations for JuliaCon SignalProcessing - Signal Processing tools for Julia Images - An image library for Julia Lua General-Purpose Machine Learning Torch7 cephes - Cephes mathematical functions library, wrapped for Torch. Provides and wraps the 180+ special mathematical functions from the Cephes mathematical library, developed by Stephen L. Moshier. It is used, among many other places, at the heart of SciPy.autograd - Autograd automatically differentiates native Torch code. Inspired by the original Python version.graph - Graph package for Torchrandomkit - Numpy’s randomkit, wrapped for Torchsignal - A signal processing toolbox for Torch-7. FFT, DCT, Hilbert, cepstrums, stftnn - Neural Network package for Torchtorchnet - framework for torch which provides a set of abstractions aiming at encouraging code re-use as well as encouraging modular programmingnngraph - This package provides graphical computation for nn library in Torch7.nnx - A completely unstable and experimental package that extends Torch’s builtin nn libraryrnn - A Recurrent Neural Network library that extends Torch’s nn. RNNs, LSTMs, GRUs, BRNNs, BLSTMs, etc.dpnn - Many useful features that aren’t part of the main nn package.dp - A deep learning library designed for streamlining research and development using the Torch7 distribution. It emphasizes flexibility through the elegant use of object-oriented design patterns.optim - An optimization library for Torch. SGD, Adagrad, Conjugate-Gradient, LBFGS, RProp and more.unsup - A package for unsupervised learning in Torch. Provides modules that are compatible with nn (LinearPsd, ConvPsd, AutoEncoder, …), and self-contained algorithms (k-means, PCA).manifold - A package to manipulate manifoldssvm - Torch-SVM librarylbfgs - FFI Wrapper for liblbfgsvowpalwabbit - An old vowpalwabbit interface to torch.OpenGM - OpenGM is a C++ library for graphical modeling, and inference. The Lua bindings provide a simple way of describing graphs, from Lua, and then optimizing them with OpenGM.sphagetti - Spaghetti (sparse linear) module for torch7 by @MichaelMathieuLuaSHKit - A lua wrapper around the Locality sensitive hashing library SHKitkernel smoothing - KNN, kernel-weighted average, local linear regression smootherscutorch - Torch CUDA Implementationcunn - Torch CUDA Neural Network Implementationimgraph - An image/graph library for Torch. This package provides routines to construct graphs on images, segment them, build trees out of them, and convert them back to images.videograph - A video/graph library for Torch. This package provides routines to construct graphs on videos, segment them, build trees out of them, and convert them back to videos.saliency - code and tools around integral images. A library for finding interest points based on fast integral histograms.stitch - allows us to use hugin to stitch images and apply same stitching to a video sequencesfm - A bundle adjustment/structure from motion packagefex - A package for feature extraction in Torch. Provides SIFT and dSIFT modules.OverFeat - A state-of-the-art generic dense feature extractorNumeric LuaLunatic PythonSciLuaLua - Numerical AlgorithmsLunum Demos and Scripts Core torch7 demos repository. linear-regression, logistic-regressionface detector (training and detection as separate demos)mst-based-segmentertrain-a-digit-classifiertrain-autoencoderoptical flow demotrain-on-housenumberstrain-on-cifartracking with deep netskinect demofilter-bank visualizationsaliency-networksTraining a Convnet for the Galaxy-Zoo Kaggle challenge(CUDA demo)Music Tagging - Music Tagging scripts for torch7torch-datasets - Scripts to load several popular datasets including:BSR 500CIFAR-10COILStreet View House NumbersMNISTNORBAtari2600 - Scripts to generate a dataset with static frames from the Arcade Learning Environment Matlab Computer Vision Contourlets - MATLAB source code that implements the contourlet transform and its utility functions. Shearlets - MATLAB code for shearlet transform Curvelets - The Curvelet transform is a higher dimensional generalization of the Wavelet transform designed to represent images at different scales and different angles. Bandlets - MATLAB code for bandlet transform mexopencv - Collection and a development kit of MATLAB mex functions for OpenCV library Natural Language Processing NLP - An NLP library for Matlab General-Purpose Machine Learning Training a deep autoencoder or a classifieron MNIST digits - Training a deep autoencoder or a classifieron MNIST digits[DEEP LEARNING] Convolutional-Recursive Deep Learning for 3D Object Classification - Convolutional-Recursive Deep Learning for 3D Object Classification[DEEP LEARNING] t-Distributed Stochastic Neighbor Embedding - t-Distributed Stochastic Neighbor Embedding (t-SNE) is a (prize-winning) technique for dimensionality reduction that is particularly well suited for the visualization of high-dimensional datasets. Spider - The spider is intended to be a complete object orientated environment for machine learning in Matlab. LibSVM - A Library for Support Vector Machines LibLinear - A Library for Large Linear Classification Machine Learning Module - Class on machine w/ PDF,lectures,code Caffe - A deep learning framework developed with cleanliness, readability, and speed in mind. Pattern Recognition Toolbox - A complete object-oriented environment for machine learning in Matlab. Pattern Recognition and Machine Learning - This package contains the matlab implementation of the algorithms described in the book Pattern Recognition and Machine Learning by C. Bishop. Optunity - A library dedicated to automated hyperparameter optimization with a simple, lightweight API to facilitate drop-in replacement of grid search. Optunity is written in Python but interfaces seamlessly with MATLAB. Data Analysis / Data Visualization matlab_gbl - MatlabBGL is a Matlab package for working with graphs. gamic - Efficient pure-Matlab implementations of graph algorithms to complement MatlabBGL’s mex functions. .NET Computer Vision OpenCVDotNet - A wrapper for the OpenCV project to be used with .NET applications. Emgu CV - Cross platform wrapper of OpenCV which can be compiled in Mono to e run on Windows, Linus, Mac OS X, iOS, and Android. AForge.NET - Open source C# framework for developers and researchers in the fields of Computer Vision and Artificial Intelligence. Development has now shifted to GitHub. Accord.NET - Together with AForge.NET, this library can provide image processing and computer vision algorithms to Windows, Windows RT and Windows Phone. Some components are also available for Java and Android. Natural Language Processing Stanford.NLP for .NET - A full port of Stanford NLP packages to .NET and also available precompiled as a NuGet package. General-Purpose Machine Learning Accord-Framework -The Accord.NET Framework is a complete framework for building machine learning, computer vision, computer audition, signal processing and statistical applications. Accord.MachineLearning - Support Vector Machines, Decision Trees, Naive Bayesian models, K-means, Gaussian Mixture models and general algorithms such as Ransac, Cross-validation and Grid-Search for machine-learning applications. This package is part of the Accord.NET Framework. DiffSharp - An automatic differentiation (AD) library providing exact and efficient derivatives (gradients, Hessians, Jacobians, directional derivatives, and matrix-free Hessian- and Jacobian-vector products) for machine learning and optimization applications. Operations can be nested to any level, meaning that you can compute exact higher-order derivatives and differentiate functions that are internally making use of differentiation, for applications such as hyperparameter optimization. Vulpes - Deep belief and deep learning implementation written in F# and leverages CUDA GPU execution with Alea.cuBase. Encog - An advanced neural network and machine learning framework. Encog contains classes to create a wide variety of networks, as well as support classes to normalize and process data for these neural networks. Encog trains using multithreaded resilient propagation. Encog can also make use of a GPU to further speed processing time. A GUI based workbench is also provided to help model and train neural networks. Neural Network Designer - DBMS management system and designer for neural networks. The designer application is developed using WPF, and is a user interface which allows you to design your neural network, query the network, create and configure chat bots that are capable of asking questions and learning from your feed back. The chat bots can even scrape the internet for information to return in their output as well as to use for learning. Data Analysis / Data Visualization numl - numl is a machine learning library intended to ease the use of using standard modeling techniques for both prediction and clustering. Math.NET Numerics - Numerical foundation of the Math.NET project, aiming to provide methods and algorithms for numerical computations in science, engineering and every day use. Supports .Net 4.0, .Net 3.5 and Mono on Windows, Linux and Mac; Silverlight 5, WindowsPhone/SL 8, WindowsPhone 8.1 and Windows 8 with PCL Portable Profiles 47 and 344; Android/iOS with Xamarin. Sho - Sho is an interactive environment for data analysis and scientific computing that lets you seamlessly connect scripts (in IronPython) with compiled code (in .NET) to enable fast and flexible prototyping. The environment includes powerful and efficient libraries for linear algebra as well as data visualization that can be used from any .NET language, as well as a feature-rich interactive shell for rapid development. Objective C General-Purpose Machine Learning YCML - A Machine Learning framework for Objective-C and Swift (OS X / iOS). MLPNeuralNet - Fast multilayer perceptron neural network library for iOS and Mac OS X. MLPNeuralNet predicts new examples by trained neural network. It is built on top of the Apple’s Accelerate Framework, using vectorized operations and hardware acceleration if available. MAChineLearning - An Objective-C multilayer perceptron library, with full support for training through backpropagation. Implemented using vDSP and vecLib, it’s 20 times faster than its Java equivalent. Includes sample code for use from Swift. BPN-NeuralNetwork - It implemented 3 layers neural network ( Input Layer, Hidden Layer and Output Layer ) and it named Back Propagation Neural Network (BPN). This network can be used in products recommendation, user behavior analysis, data mining and data analysis. Multi-Perceptron-NeuralNetwork - it implemented multi-perceptrons neural network (ニューラルネットワーク) based on Back Propagation Neural Network (BPN) and designed unlimited-hidden-layers. KRHebbian-Algorithm - It is a non-supervisor and self-learning algorithm (adjust the weights) in neural network of Machine Learning. KRKmeans-Algorithm - It implemented K-Means the clustering and classification algorithm. It could be used in data mining and image compression. KRFuzzyCMeans-Algorithm - It implemented Fuzzy C-Means (FCM) the fuzzy clustering / classification algorithm on Machine Learning. It could be used in data mining and image compression. OCaml General-Purpose Machine Learning Oml - A general statistics and machine learning library. GPR - Efficient Gaussian Process Regression in OCaml. Libra-Tk - Algorithms for learning and inference with discrete probabilistic models. PHP Natural Language Processing jieba-php - Chinese Words Segmentation Utilities. General-Purpose Machine Learning PHP-ML - Machine Learning library for PHP. Algorithms, Cross Validation, Neural Network, Preprocessing, Feature Extraction and much more in one library. PredictionBuilder - A library for machine learning that builds predictions using a linear regression. Python Computer Vision Scikit-Image - A collection of algorithms for image processing in Python. SimpleCV - An open source computer vision framework that gives access to several high-powered computer vision libraries, such as OpenCV. Written on Python and runs on Mac, Windows, and Ubuntu Linux. Vigranumpy - Python bindings for the VIGRA C++ computer vision library. OpenFace - Free and open source face recognition with deep neural networks. PCV - Open source Python module for computer vision Natural Language Processing NLTK - A leading platform for building Python programs to work with human language data. Pattern - A web mining module for the Python programming language. It has tools for natural language processing, machine learning, among others. Quepy - A python framework to transform natural language questions to queries in a database query language TextBlob - Providing a consistent API for diving into common natural language processing (NLP) tasks. Stands on the giant shoulders of NLTK and Pattern, and plays nicely with both. YAlign - A sentence aligner, a friendly tool for extracting parallel sentences from comparable corpora. jieba - Chinese Words Segmentation Utilities. SnowNLP - A library for processing Chinese text. spammy - A library for email Spam filtering built on top of nltk loso - Another Chinese segmentation library. genius - A Chinese segment base on Conditional Random Field. KoNLPy - A Python package for Korean natural language processing. nut - Natural language Understanding Toolkit Rosetta - Text processing tools and wrappers (e.g. Vowpal Wabbit) BLLIP Parser - Python bindings for the BLLIP Natural Language Parser (also known as the Charniak-Johnson parser) PyNLPl - Python Natural Language Processing Library. General purpose NLP library for Python. Also contains some specific modules for parsing common NLP formats, most notably for FoLiA, but also ARPA language models, Moses phrasetables, GIZA++ alignments. python-ucto - Python binding to ucto (a unicode-aware rule-based tokenizer for various languages) python-frog - Python binding to Frog, an NLP suite for Dutch. (pos tagging, lemmatisation, dependency parsing, NER) python-zpar - Python bindings for ZPar, a statistical part-of-speech-tagger, constiuency parser, and dependency parser for English. colibri-core - Python binding to C++ library for extracting and working with with basic linguistic constructions such as n-grams and skipgrams in a quick and memory-efficient way. spaCy - Industrial strength NLP with Python and Cython. PyStanfordDependencies - Python interface for converting Penn Treebank trees to Stanford Dependencies. Distance - Levenshtein and Hamming distance computation Fuzzy Wuzzy - Fuzzy String Matching in Python jellyfish - a python library for doing approximate and phonetic matching of strings. editdistance - fast implementation of edit distance textacy - higher-level NLP built on Spacy stanford-corenlp-python - Python wrapper for Stanford CoreNLP General-Purpose Machine Learning auto_ml - Automated machine learning pipelines for analytics and production. Handles some standard feature engineering, feature selection, model selection, model tuning, ensembling, and advanced scoring, in addition to logging output for analysts trying to understand their datasets. machine learning - automated build consisting of a web-interface, and set of programmatic-interface API, for support vector machines. Corresponding dataset(s) are stored into a SQL database, then generated model(s) used for prediction(s), are stored into a NoSQL datastore. XGBoost - Python bindings for eXtreme Gradient Boosting (Tree) Library Bayesian Methods for Hackers - Book/iPython notebooks on Probabilistic Programming in Python Featureforge A set of tools for creating and testing machine learning features, with a scikit-learn compatible API MLlib in Apache Spark - Distributed machine learning library in Spark Hydrosphere Mist - a service for deployment Apache Spark MLLib machine learning models as realtime, batch or reactive web services. scikit-learn - A Python module for machine learning built on top of SciPy. metric-learn - A Python module for metric learning. SimpleAI Python implementation of many of the artificial intelligence algorithms described on the book “Artificial Intelligence, a Modern Approach”. It focuses on providing an easy to use, well documented and tested library. astroML - Machine Learning and Data Mining for Astronomy. graphlab-create - A library with various machine learning models (regression, clustering, recommender systems, graph analytics, etc.) implemented on top of a disk-backed DataFrame. BigML - A library that contacts external servers. pattern - Web mining module for Python. NuPIC - Numenta Platform for Intelligent Computing. Pylearn2 - A Machine Learning library based on Theano. keras - Modular neural network library based on Theano. Lasagne - Lightweight library to build and train neural networks in Theano. hebel - GPU-Accelerated Deep Learning Library in Python. Chainer - Flexible neural network framework gensim - Topic Modelling for Humans. topik - Topic modelling toolkit PyBrain - Another Python Machine Learning Library. Brainstorm - Fast, flexible and fun neural networks. This is the successor of PyBrain. Crab - A ﬂexible, fast recommender engine. python-recsys - A Python library for implementing a Recommender System. thinking bayes - Book on Bayesian Analysis Restricted Boltzmann Machines -Restricted Boltzmann Machines in Python. [DEEP LEARNING] Bolt - Bolt Online Learning Toolbox CoverTree - Python implementation of cover trees, near-drop-in replacement for scipy.spatial.kdtree nilearn - Machine learning for NeuroImaging in Python imbalanced-learn - Python module to perform under sampling and over sampling with various techniques. Shogun - The Shogun Machine Learning Toolbox Pyevolve - Genetic algorithm framework. Caffe - A deep learning framework developed with cleanliness, readability, and speed in mind. breze - Theano based library for deep and recurrent neural networks pyhsmm - library for approximate unsupervised inference in Bayesian Hidden Markov Models (HMMs) and explicit-duration Hidden semi-Markov Models (HSMMs), focusing on the Bayesian Nonparametric extensions, the HDP-HMM and HDP-HSMM, mostly with weak-limit approximations. mrjob - A library to let Python program run on Hadoop. SKLL - A wrapper around scikit-learn that makes it simpler to conduct experiments. neurolab - https://github.com/zueve/neurolab Spearmint - Spearmint is a package to perform Bayesian optimization according to the algorithms outlined in the paper: Practical Bayesian Optimization of Machine Learning Algorithms. Jasper Snoek, Hugo Larochelle and Ryan P. Adams. Advances in Neural Information Processing Systems, 2012. Pebl - Python Environment for Bayesian Learning Theano - Optimizing GPU-meta-programming code generating array oriented optimizing math compiler in Python TensorFlow - Open source software library for numerical computation using data flow graphs yahmm - Hidden Markov Models for Python, implemented in Cython for speed and efficiency. python-timbl - A Python extension module wrapping the full TiMBL C++ programming interface. Timbl is an elaborate k-Nearest Neighbours machine learning toolkit. deap - Evolutionary algorithm framework. pydeep - Deep Learning In Python mlxtend - A library consisting of useful tools for data science and machine learning tasks. neon - Nervana’s high-performance Python-based Deep Learning framework [DEEP LEARNING] Optunity - A library dedicated to automated hyperparameter optimization with a simple, lightweight API to facilitate drop-in replacement of grid search. Neural Networks and Deep Learning - Code samples for my book “Neural Networks and Deep Learning” [DEEP LEARNING] Annoy - Approximate nearest neighbours implementation skflow - Simplified interface for TensorFlow, mimicking Scikit Learn. TPOT - Tool that automatically creates and optimizes machine learning pipelines using genetic programming. Consider it your personal data science assistant, automating a tedious part of machine learning. pgmpy A python library for working with Probabilistic Graphical Models. DIGITS - The Deep Learning GPU Training System (DIGITS) is a web application for training deep learning models. Orange - Open source data visualization and data analysis for novices and experts. MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, Javascript and more. milk - Machine learning toolkit focused on supervised classification. TFLearn - Deep learning library featuring a higher-level API for TensorFlow. REP - an IPython-based environment for conducting data-driven research in a consistent and reproducible way. REP is not trying to substitute scikit-learn, but extends it and provides better user experience. rgf_python - Python bindings for Regularized Greedy Forest (Tree) Library. gym - OpenAI Gym is a toolkit for developing and comparing reinforcement learning algorithms. skbayes - Python package for Bayesian Machine Learning with scikit-learn API Data Analysis / Data Visualization SciPy - A Python-based ecosystem of open-source software for mathematics, science, and engineering. NumPy - A fundamental package for scientific computing with Python. Numba - Python JIT (just in time) complier to LLVM aimed at scientific Python by the developers of Cython and NumPy. NetworkX - A high-productivity software for complex networks. igraph - binding to igraph library - General purpose graph library Pandas - A library providing high-performance, easy-to-use data structures and data analysis tools. Open Mining - Business Intelligence (BI) in Python (Pandas web interface) PyMC - Markov Chain Monte Carlo sampling toolkit. zipline - A Pythonic algorithmic trading library. PyDy - Short for Python Dynamics, used to assist with workflow in the modeling of dynamic motion based around NumPy, SciPy, IPython, and matplotlib. SymPy - A Python library for symbolic mathematics. statsmodels - Statistical modeling and econometrics in Python. astropy - A community Python library for Astronomy. matplotlib - A Python 2D plotting library. bokeh - Interactive Web Plotting for Python. plotly - Collaborative web plotting for Python and matplotlib. vincent - A Python to Vega translator. d3py - A plotting library for Python, based on D3.js. PyDexter - Simple plotting for Python. Wrapper for D3xterjs; easily render charts in-browser. ggplot - Same API as ggplot2 for R. ggfortify - Unified interface to ggplot2 popular R packages. Kartograph.py - Rendering beautiful SVG maps in Python. pygal - A Python SVG Charts Creator. PyQtGraph - A pure-python graphics and GUI library built on PyQt4 / PySide and NumPy. pycascading Petrel - Tools for writing, submitting, debugging, and monitoring Storm topologies in pure Python. Blaze - NumPy and Pandas interface to Big Data. emcee - The Python ensemble sampling toolkit for affine-invariant MCMC. windML - A Python Framework for Wind Energy Analysis and Prediction vispy - GPU-based high-performance interactive OpenGL 2D/3D data visualization library cerebro2 A web-based visualization and debugging platform for NuPIC. NuPIC Studio An all-in-one NuPIC Hierarchical Temporal Memory visualization and debugging super-tool! SparklingPandas Pandas on PySpark (POPS) Seaborn - A python visualization library based on matplotlib bqplot - An API for plotting in Jupyter (IPython) pastalog - Simple, realtime visualization of neural network training performance. caravel - A data exploration platform designed to be visual, intuitive, and interactive. Dora - Tools for exploratory data analysis in Python. Ruffus - Computation Pipeline library for python. SOMPY - Self Organizing Map written in Python (Uses neural networks for data analysis). somoclu Massively parallel self-organizing maps: accelerate training on multicore CPUs, GPUs, and clusters, has python API. HDBScan - implementation of the hdbscan algorithm in Python - used for clustering visualize_ML - A python package for data exploration and data analysis. Misc Scripts / iPython Notebooks / Codebases BioPy - Biologically-Inspired and Machine Learning Algorithms in Python. pattern_classification thinking stats 2 hyperopt numpic 2012-paper-diginorm A gallery of interesting IPython notebooks ipython-notebooks data-science-ipython-notebooks - Continually updated Data Science Python Notebooks: Spark, Hadoop MapReduce, HDFS, AWS, Kaggle, scikit-learn, matplotlib, pandas, NumPy, SciPy, and various command lines. decision-weights Sarah Palin LDA - Topic Modeling the Sarah Palin emails. Diffusion Segmentation - A collection of image segmentation algorithms based on diffusion methods Scipy Tutorials - SciPy tutorials. This is outdated, check out scipy-lecture-notes Crab - A recommendation engine library for Python BayesPy - Bayesian Inference Tools in Python scikit-learn tutorials - Series of notebooks for learning scikit-learn sentiment-analyzer - Tweets Sentiment Analyzer sentiment_classifier - Sentiment classifier using word sense disambiguation. group-lasso - Some experiments with the coordinate descent algorithm used in the (Sparse) Group Lasso model jProcessing - Kanji / Hiragana / Katakana to Romaji Converter. Edict Dictionary &amp; parallel sentences Search. Sentence Similarity between two JP Sentences. Sentiment Analysis of Japanese Text. Run Cabocha(ISO–8859-1 configured) in Python. mne-python-notebooks - IPython notebooks for EEG/MEG data processing using mne-python Neon Course - IPython notebooks for a complete course around understanding Nervana’s Neon pandas cookbook - Recipes for using Python’s pandas library climin - Optimization library focused on machine learning, pythonic implementations of gradient descent, LBFGS, rmsprop, adadelta and others Allen Downey’s Data Science Course - Code for Data Science at Olin College, Spring 2014. Allen Downey’s Think Bayes Code - Code repository for Think Bayes. Allen Downey’s Think Complexity Code - Code for Allen Downey’s book Think Complexity. Allen Downey’s Think OS Code - Text and supporting code for Think OS: A Brief Introduction to Operating Systems. Python Programming for the Humanities - Course for Python programming for the Humanities, assuming no prior knowledge. Heavy focus on text processing / NLP. GreatCircle - Library for calculating great circle distance. Optunity examples - Examples demonstrating how to use Optunity in synergy with machine learning libraries. Dive into Machine Learning with Python Jupyter notebook and scikit-learn - “I learned Python by hacking first, and getting serious later. I wanted to do this with Machine Learning. If this is your style, join me in getting a bit ahead of yourself.” TDB - TensorDebugger (TDB) is a visual debugger for deep learning. It features interactive, node-by-node debugging and visualization for TensorFlow. Suiron - Machine Learning for RC Cars. Introduction to machine learning with scikit-learn - IPython notebooks from Data School’s video tutorials on scikit-learn. Practical XGBoost in Python - comprehensive online course about using XGBoost in Python Neural networks Neural networks - NeuralTalk is a Python+numpy project for learning Multimodal Recurrent Neural Networks that describe images with sentences. Neuron - Neuron is simple class for time series predictions. It’s utilize LNU (Linear Neural Unit), QNU (Quadratic Neural Unit), RBF (Radial Basis Function), MLP (Multi Layer Perceptron), MLP-ELM (Multi Layer Perceptron - Extreme Learning Machine) neural networks learned with Gradient descent or LeLevenberg–Marquardt algorithm. Data Driven Code - Very simple implementation of neural networks for dummies in python without using any libraries, with detailed comments. Kaggle Competition Source Code wiki challenge - An implementation of Dell Zhang’s solution to Wikipedia’s Participation Challenge on Kaggle kaggle insults - Kaggle Submission for “Detecting Insults in Social Commentary” kaggle_acquire-valued-shoppers-challenge - Code for the Kaggle acquire valued shoppers challenge kaggle-cifar - Code for the CIFAR-10 competition at Kaggle, uses cuda-convnet kaggle-blackbox - Deep learning made easy kaggle-accelerometer - Code for Accelerometer Biometric Competition at Kaggle kaggle-advertised-salaries - Predicting job salaries from ads - a Kaggle competition kaggle amazon - Amazon access control challenge kaggle-bestbuy_big - Code for the Best Buy competition at Kaggle kaggle-bestbuy_small Kaggle Dogs vs. Cats - Code for Kaggle Dogs vs. Cats competition Kaggle Galaxy Challenge - Winning solution for the Galaxy Challenge on Kaggle Kaggle Gender - A Kaggle competition: discriminate gender based on handwriting Kaggle Merck - Merck challenge at Kaggle Kaggle Stackoverflow - Predicting closed questions on Stack Overflow kaggle_acquire-valued-shoppers-challenge - Code for the Kaggle acquire valued shoppers challenge wine-quality - Predicting wine quality Ruby Natural Language Processing Treat - Text REtrieval and Annotation Toolkit, definitely the most comprehensive toolkit I’ve encountered so far for Ruby Ruby Linguistics - Linguistics is a framework for building linguistic utilities for Ruby objects in any language. It includes a generic language-independent front end, a module for mapping language codes into language names, and a module which contains various English-language utilities. Stemmer - Expose libstemmer_c to Ruby Ruby Wordnet - This library is a Ruby interface to WordNet Raspel - raspell is an interface binding for ruby UEA Stemmer - Ruby port of UEALite Stemmer - a conservative stemmer for search and indexing Twitter-text-rb - A library that does auto linking and extraction of usernames, lists and hashtags in tweets General-Purpose Machine Learning Ruby Machine Learning - Some Machine Learning algorithms, implemented in Ruby Machine Learning Ruby jRuby Mahout - JRuby Mahout is a gem that unleashes the power of Apache Mahout in the world of JRuby. CardMagic-Classifier - A general classifier module to allow Bayesian and other types of classifications. rb-libsvm - Ruby language bindings for LIBSVM which is a Library for Support Vector Machines Data Analysis / Data Visualization rsruby - Ruby - R bridge data-visualization-ruby - Source code and supporting content for my Ruby Manor presentation on Data Visualisation with Ruby ruby-plot - gnuplot wrapper for ruby, especially for plotting roc curves into svg files plot-rb - A plotting library in Ruby built on top of Vega and D3. scruffy - A beautiful graphing toolkit for Ruby SciRuby Glean - A data management tool for humans Bioruby Arel Misc Big Data For Chimps Listof - Community based data collection, packed in gem. Get list of pretty much anything (stop words, countries, non words) in txt, json or hash. Demo/Search for a list Rust General-Purpose Machine Learning deeplearn-rs - deeplearn-rs provides simple networks that use matrix multiplication, addition, and ReLU under the MIT license. rustlearn - a machine learning framework featuring logistic regression, support vector machines, decision trees and random forests. rusty-machine - a pure-rust machine learning library. leaf - open source framework for machine intelligence, sharing concepts from TensorFlow and Caffe. Available under the MIT license. [Deprecated] RustNN - RustNN is a feedforward neural network library. R General-Purpose Machine Learning ahaz - ahaz: Regularization for semiparametric additive hazards regression arules - arules: Mining Association Rules and Frequent Itemsets biglasso - biglasso: Extending Lasso Model Fitting to Big Data in R bigrf - bigrf: Big Random Forests: Classification and Regression Forests for Large Data Sets bigRR - bigRR: Generalized Ridge Regression (with special advantage for p &gt;&gt; n cases) bmrm - bmrm: Bundle Methods for Regularized Risk Minimization Package Boruta - Boruta: A wrapper algorithm for all-relevant feature selection bst - bst: Gradient Boosting C50 - C50: C5.0 Decision Trees and Rule-Based Models caret - Classification and Regression Training: Unified interface to ~150 ML algorithms in R. caretEnsemble - caretEnsemble: Framework for fitting multiple caret models as well as creating ensembles of such models. Clever Algorithms For Machine Learning CORElearn - CORElearn: Classification, regression, feature evaluation and ordinal evaluation CoxBoost - CoxBoost: Cox models by likelihood based boosting for a single survival endpoint or competing risks Cubist - Cubist: Rule- and Instance-Based Regression Modeling e1071 - e1071: Misc Functions of the Department of Statistics (e1071), TU Wien earth - earth: Multivariate Adaptive Regression Spline Models elasticnet - elasticnet: Elastic-Net for Sparse Estimation and Sparse PCA ElemStatLearn - ElemStatLearn: Data sets, functions and examples from the book: “The Elements of Statistical Learning, Data Mining, Inference, and Prediction” by Trevor Hastie, Robert Tibshirani and Jerome Friedman Prediction” by Trevor Hastie, Robert Tibshirani and Jerome Friedman evtree - evtree: Evolutionary Learning of Globally Optimal Trees forecast - forecast: Timeseries forecasting using ARIMA, ETS, STLM, TBATS, and neural network models forecastHybrid - forecastHybrid: Automatic ensemble and cross validation of ARIMA, ETS, STLM, TBATS, and neural network models from the “forecast” package fpc - fpc: Flexible procedures for clustering frbs - frbs: Fuzzy Rule-based Systems for Classification and Regression Tasks GAMBoost - GAMBoost: Generalized linear and additive models by likelihood based boosting gamboostLSS - gamboostLSS: Boosting Methods for GAMLSS gbm - gbm: Generalized Boosted Regression Models glmnet - glmnet: Lasso and elastic-net regularized generalized linear models glmpath - glmpath: L1 Regularization Path for Generalized Linear Models and Cox Proportional Hazards Model GMMBoost - GMMBoost: Likelihood-based Boosting for Generalized mixed models grplasso - grplasso: Fitting user specified models with Group Lasso penalty grpreg - grpreg: Regularization paths for regression models with grouped covariates h2o - A framework for fast, parallel, and distributed machine learning algorithms at scale – Deeplearning, Random forests, GBM, KMeans, PCA, GLM hda - hda: Heteroscedastic Discriminant Analysis Introduction to Statistical Learning ipred - ipred: Improved Predictors kernlab - kernlab: Kernel-based Machine Learning Lab klaR - klaR: Classification and visualization lars - lars: Least Angle Regression, Lasso and Forward Stagewise lasso2 - lasso2: L1 constrained estimation aka ‘lasso’ LiblineaR - LiblineaR: Linear Predictive Models Based On The Liblinear C/C++ Library LogicReg - LogicReg: Logic Regression Machine Learning For Hackers maptree - maptree: Mapping, pruning, and graphing tree models mboost - mboost: Model-Based Boosting medley - medley: Blending regression models, using a greedy stepwise approach mlr - mlr: Machine Learning in R mvpart - mvpart: Multivariate partitioning ncvreg - ncvreg: Regularization paths for SCAD- and MCP-penalized regression models nnet - nnet: Feed-forward Neural Networks and Multinomial Log-Linear Models oblique.tree - oblique.tree: Oblique Trees for Classification Data pamr - pamr: Pam: prediction analysis for microarrays party - party: A Laboratory for Recursive Partytioning partykit - partykit: A Toolkit for Recursive Partytioning penalized - penalized: L1 (lasso and fused lasso) and L2 (ridge) penalized estimation in GLMs and in the Cox model penalizedLDA - penalizedLDA: Penalized classification using Fisher’s linear discriminant penalizedSVM - penalizedSVM: Feature Selection SVM using penalty functions quantregForest - quantregForest: Quantile Regression Forests randomForest - randomForest: Breiman and Cutler’s random forests for classification and regression randomForestSRC - randomForestSRC: Random Forests for Survival, Regression and Classification (RF-SRC) rattle - rattle: Graphical user interface for data mining in R rda - rda: Shrunken Centroids Regularized Discriminant Analysis rdetools - rdetools: Relevant Dimension Estimation (RDE) in Feature Spaces REEMtree - REEMtree: Regression Trees with Random Effects for Longitudinal (Panel) Data relaxo - relaxo: Relaxed Lasso rgenoud - rgenoud: R version of GENetic Optimization Using Derivatives rgp - rgp: R genetic programming framework Rmalschains - Rmalschains: Continuous Optimization using Memetic Algorithms with Local Search Chains (MA-LS-Chains) in R rminer - rminer: Simpler use of data mining methods (e.g. NN and SVM) in classification and regression ROCR - ROCR: Visualizing the performance of scoring classifiers RoughSets - RoughSets: Data Analysis Using Rough Set and Fuzzy Rough Set Theories rpart - rpart: Recursive Partitioning and Regression Trees RPMM - RPMM: Recursively Partitioned Mixture Model RSNNS - RSNNS: Neural Networks in R using the Stuttgart Neural Network Simulator (SNNS) RWeka - RWeka: R/Weka interface RXshrink - RXshrink: Maximum Likelihood Shrinkage via Generalized Ridge or Least Angle Regression sda - sda: Shrinkage Discriminant Analysis and CAT Score Variable Selection SDDA - SDDA: Stepwise Diagonal Discriminant Analysis SuperLearner and subsemble - Multi-algorithm ensemble learning packages. svmpath - svmpath: svmpath: the SVM Path algorithm tgp - tgp: Bayesian treed Gaussian process models tree - tree: Classification and regression trees varSelRF - varSelRF: Variable selection using random forests XGBoost.R - R binding for eXtreme Gradient Boosting (Tree) Library Optunity - A library dedicated to automated hyperparameter optimization with a simple, lightweight API to facilitate drop-in replacement of grid search. Optunity is written in Python but interfaces seamlessly to R. igraph - binding to igraph library - General purpose graph library MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, Javascript and more. TDSP-Utilities - Two data science utilities in R from Microsoft: 1) Interactive Data Exploration, Analysis, and Reporting (IDEAR) ; 2) Automated Modeling and Reporting (AMR). Data Analysis / Data Visualization ggplot2 - A data visualization package based on the grammar of graphics. SAS General-Purpose Machine Learning Enterprise Miner - Data mining and machine learning that creates deployable models using a GUI or code. Factory Miner - Automatically creates deployable machine learning models across numerous market or customer segments using a GUI. Data Analysis / Data Visualization SAS/STAT - For conducting advanced statistical analysis. University Edition - FREE! Includes all SAS packages necessary for data analysis and visualization, and includes online SAS courses. High Performance Machine Learning High Performance Data Mining - Data mining and machine learning that creates deployable models using a GUI or code in an MPP environment, including Hadoop. High Performance Text Mining - Text mining using a GUI or code in an MPP environment, including Hadoop. Natural Language Processing Contextual Analysis - Add structure to unstructured text using a GUI. Sentiment Analysis - Extract sentiment from text using a GUI. Text Miner - Text mining using a GUI or code. Demos and Scripts ML_Tables - Concise cheat sheets containing machine learning best practices. enlighten-apply - Example code and materials that illustrate applications of SAS machine learning techniques. enlighten-integration - Example code and materials that illustrate techniques for integrating SAS with other analytics technologies in Java, PMML, Python and R. enlighten-deep - Example code and materials that illustrate using neural networks with several hidden layers in SAS. dm-flow - Library of SAS Enterprise Miner process flow diagrams to help you learn by example about specific data mining topics. Scala Natural Language Processing ScalaNLP - ScalaNLP is a suite of machine learning and numerical computing libraries. Breeze - Breeze is a numerical processing library for Scala. Chalk - Chalk is a natural language processing library. FACTORIE - FACTORIE is a toolkit for deployable probabilistic modeling, implemented as a software library in Scala. It provides its users with a succinct language for creating relational factor graphs, estimating parameters and performing inference. Data Analysis / Data Visualization MLlib in Apache Spark - Distributed machine learning library in Spark Hydrosphere Mist - a service for deployment Apache Spark MLLib machine learning models as realtime, batch or reactive web services. Scalding - A Scala API for Cascading Summing Bird - Streaming MapReduce with Scalding and Storm Algebird - Abstract Algebra for Scala xerial - Data management utilities for Scala simmer - Reduce your data. A unix filter for algebird-powered aggregation. PredictionIO - PredictionIO, a machine learning server for software developers and data engineers. BIDMat - CPU and GPU-accelerated matrix library intended to support large-scale exploratory data analysis. Wolfe Declarative Machine Learning Flink - Open source platform for distributed stream and batch data processing. Spark Notebook - Interactive and Reactive Data Science using Scala and Spark. General-Purpose Machine Learning Conjecture - Scalable Machine Learning in Scalding brushfire - Distributed decision tree ensemble learning in Scala ganitha - scalding powered machine learning adam - A genomics processing engine and specialized file format built using Apache Avro, Apache Spark and Parquet. Apache 2 licensed. bioscala - Bioinformatics for the Scala programming language BIDMach - CPU and GPU-accelerated Machine Learning Library. Figaro - a Scala library for constructing probabilistic models. H2O Sparkling Water - H2O and Spark interoperability. FlinkML in Apache Flink - Distributed machine learning library in Flink DynaML - Scala Library/REPL for Machine Learning Research Saul - Flexible Declarative Learning-Based Programming. SwiftLearner - Simply written algorithms to help study ML or write your own implementations. Swift General-Purpose Machine Learning Swift AI - Highly optimized artificial intelligence and machine learning library written in Swift. BrainCore - The iOS and OS X neural network framework swix - A bare bones library thatincludes a general matrix language and wraps some OpenCV for iOS development. DeepLearningKit an Open Source Deep Learning Framework for Apple’s iOS, OS X and tvOS.It currently allows using deep convolutional neural network models trained in Caffe on Apple operating systems. AIToolbox - A toolbox framework of AI modules written in Swift: Graphs/Trees, Linear Regression, Support Vector Machines, Neural Networks, PCA, KMeans, Genetic Algorithms, MDP, Mixture of Gaussians. MLKit - A simple Machine Learning Framework written in Swift. Currently features Simple Linear Regression, Polynomial Regression, and Ridge Regression. Swift Brain - The first neural network / machine learning library written in Swift. This is a project for AI algorithms in Swift for iOS and OS X development. This project includes algorithms focused on Bayes theorem, neural networks, SVMs, Matrices, etc.. TensorFlow General-Purpose Machine Learning Awesome TensorFlow - A list of all things related to TensorFlow Credits Some of the python libraries were cut-and-pasted from vinta The few go reference I found where pulled from this page","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://ipcreator.me/tags/Machine-Learning/"}]},{"title":"Awesome Deep Learning","date":"2017-02-12T03:26:06.000Z","path":"2017/02/12/zh-awesome-deep-learning/","text":"作者：Joseph Misiti/josephmisiti A curated list of awesome Deep Learning tutorials, projects and communities. Free Online Books Deep Learning by Yoshua Bengio, Ian Goodfellow and Aaron Courville (01/01/2015) Neural Networks and Deep Learning by Michael Nielsen (Dec 2014) Deep Learning by Microsoft Research (2013) Deep Learning Tutorial by LISA lab, University of Montreal (Jan 6 2015)Courses Machine Learning - Stanford by Andrew Ng in Coursera (2010-2014) Machine Learning - Caltech by Yaser Abu-Mostafa (2012-2014) Machine Learning - Carnegie Mellon by Tom Mitchell (Spring 2011) Neural Networks for Machine Learning by Geoffrey Hinton in Coursera (2012) Neural networks class by Hugo Larochelle from Université de Sherbrooke (2013) Deep Learning Course by CILVR lab @ NYU (2014) A.I - Berkeley by Dan Klein and Pieter Abbeel (2013) A.I - MIT by Patrick Henry Winston (2010) Vision and learning - computers and brains by Shimon Ullman, Tomaso Poggio, Ethan Meyers @ MIT (2013)Video and Lectures How To Create A Mind By Ray Kurzweil Deep Learning, Self-Taught Learning and Unsupervised Feature Learning By Andrew Ng Recent Developments in Deep Learning By Geoff Hinton The Unreasonable Effectiveness of Deep Learning by Yann LeCun Deep Learning of Representations by Yoshua bengio Principles of Hierarchical Temporal Memory by Jeff Hawkins Machine Learning Discussion Group - Deep Learning w/ Stanford AI Lab by Adam Coates Making Sense of the World with Deep Learning By Adam Coates Demystifying Unsupervised Feature Learning By Adam Coates Visual Perception with Deep Learning By Yann LeCun The Next Generation of Neural Networks By Geoffrey Hinton at GoogleTechTalks The wonderful and terrifying implications of computers that can learn By Jeremy Howard at TEDxBrusselsPapers ImageNet Classification with Deep Convolutional Neural Networks Using Very Deep Autoencoders for Content Based Image Retrieval Learning Deep Architectures for AI CMU’s list of papersTutorials UFLDL Tutorial 1 UFLDL Tutorial 2 Deep Learning for NLP (without Magic) A Deep Learning Tutorial: From Perceptrons to Deep Networks Deep Learning from the Bottom upWebSites deeplearning.net deeplearning.stanford.eduDatasets MNIST Handwritten digits Google House Numbers from street view CIFAR-10 and CIFAR-1004. IMAGENET Tiny Images 80 Million tiny images6. Flickr Data 100 Million Yahoo dataset Berkeley Segmentation Dataset 500Frameworks Caffe Torch7 Theano cuda-convnet Ccv NuPIC DeepLearning4J BrainMiscellaneous Google Plus - Deep Learning Community Caffe Webinar 100 Best Github Resources in Github for DL Word2Vec Caffe DockerFile TorontoDeepLEarning convnet Vision data sets Fantastic Torch Tutorial gfx.jsTorch7 Cheat sheetMisc from MIT’s ‘Advanced Natural Language Processing’ courseMisc from MIT’s ‘Machine Learning’ courseMisc from MIT’s ‘Networks for Learning: Regression and Classification’ courseMisc from MIT’s ‘Neural Coding and Perception of Sound’ courseImplementing a Distributed Deep Learning Network over SparkContributingHave anything in mind that you think is awesome and would fit in this list? Feel free to send a pull request.","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"http://ipcreator.me/tags/Deep-Learning/"}]},{"title":"Python 资源大全中文版","date":"2017-02-12T01:02:06.000Z","path":"2017/02/12/zh-tools-of-python/","text":"作者：litai wong/wangaicc 我想很多程序员应该记得 GitHub 上有一个 Awesome - XXX 系列的资源整理。awesome-python 是 vinta 发起维护的 Python 资源列表，内容包括：Web框架、网络爬虫、网络内容提取、模板引擎、数据库、数据可视化、图片处理、文本处理、自然语言处理、机器学习、日志、代码分析等。由伯乐在线持续更新。 Awesome 系列虽然挺全，但基本只对收录的资源做了极为简要的介绍，如果有更详细的中文介绍，对相应开发者的帮助会更大。这也是我们发起这个开源项目的初衷。 我们要做什么？ 基于 awesome-python 列表，我们将对其中的各个资源项进行编译整理。此外还将从其他来源补充好资源。 整理后的内容，将收录在伯乐在线资源频道。可参考已整理的内容： 《Scrapy：Python的爬虫框架》 《Flask：一个使用Python编写的轻量级Web应用框架》 如何参与本项目？从下面的目录来看，本项目的工作量小不了，所以非常期待能有更多程序员一起来参与。 不过加入前，有几个小要求： 英文还不错，能读懂英文并用自己的话复述； 在用 Python； 如有兴趣，请加 QQ：50872495。加 Q 时请注明「Python大全」 本项目的参与者 维护者： 贡献者：艾凌风、Namco、Daetalus、黄利民、atupal、rainbow、木头lbj 注：名单不分排名，不定期补充更新 奖励计划虽然奖励可能并不是你加入的主要原因，但还是有必要提一下： 整理超过 20 个资源后，可在伯乐在线上开通打赏； 每整理 20 个资源，有机会获得技术书籍或各种有意思的创意、极客产品； 奖励详情 环境管理管理 Python 版本和环境的工具 p：非常简单的交互式 python 版本管理工具。官网 pyenv：简单的 Python 版本管理工具。官网 Vex：可以在虚拟环境中执行命令。官网 virtualenv：创建独立 Python 环境的工具。官网 virtualenvwrapper：virtualenv 的一组扩展。官网 包管理管理包和依赖的工具。 pip：Python 包和依赖关系管理工具。官网 pip-tools：保证 Python 包依赖关系更新的一组工具。官网 conda：跨平台，Python 二进制包管理工具。官网 Curdling：管理 Python 包的命令行工具。官网 wheel：Python 分发的新标准，意在取代 eggs。官网 包仓库本地 PyPI 仓库服务和代理。 warehouse：下一代 PyPI。官网 Warehouse：PyPA 提供的 PyPI 镜像工具。官网 bandersnatch devpi：PyPI 服务和打包/测试/分发工具。官网 localshop：本地 PyPI 服务（自定义包并且自动对 PyPI 镜像）。官网 分发打包为可执行文件以便分发。 PyInstaller：将 Python 程序转换成独立的执行文件（跨平台）。官网 dh-virtualenv：构建并将 virtualenv 虚拟环境作为一个 Debian 包来发布。官网 Nuitka：将脚本、模块、包编译成可执行文件或扩展模块。官网 py2app：将 Python 脚本变为独立软件包（Mac OS X）。官网 py2exe：将 Python 脚本变为独立软件包（Windows）。官网 pynsist：一个用来创建 Windows 安装程序的工具，可以在安装程序中打包 Python本身。官网 构建工具将源码编译成软件。 buildout：一个构建系统，从多个组件来创建，组装和部署应用。官网 BitBake：针对嵌入式 Linux 的类似 make 的构建工具。官网 fabricate：对任何语言自动找到依赖关系的构建工具。官网 PlatformIO：多平台命令行构建工具。官网 PyBuilder：纯 Python 实现的持续化构建工具。官网 SCons：软件构建工具。官网 交互式解析器交互式 Python 解析器。 IPython：功能丰富的工具，非常有效的使用交互式 Python。官网 bpython：界面丰富的 Python 解析器。官网 ptpython：高级交互式Python解析器， 构建于python-prompt-toolkit 之上。官网 文件文件管理和 MIME（多用途的网际邮件扩充协议）类型检测。 imghdr：（Python 标准库）检测图片类型。官网 mimetypes：（Python 标准库）将文件名映射为 MIME 类型。官网 path.py：对 os.path 进行封装的模块。官网 pathlib：（Python3.4+ 标准库）跨平台的、面向对象的路径操作库。官网 python-magic：文件类型检测的第三方库 libmagic 的 Python 接口。官网 Unipath：用面向对象的方式操作文件和目录。官网 watchdog：管理文件系统事件的 API 和 shell 工具官网 日期和时间操作日期和时间的类库。 arrow：更好的 Python 日期时间操作类库。官网 Chronyk：Python 3 的类库，用于解析手写格式的时间和日期。官网 dateutil：Python datetime 模块的扩展。官网 delorean：解决 Python 中有关日期处理的棘手问题的库。官网 moment：一个用来处理时间和日期的Python库。灵感来自于Moment.js。官网 PyTime：一个简单易用的Python模块，用于通过字符串来操作日期/时间。官网 pytz：现代以及历史版本的世界时区定义。将时区数据库引入Python。官网 when.py：提供用户友好的函数来帮助用户进行常用的日期和时间操作。官网 文本处理用于解析和操作文本的库。 通用 chardet：字符编码检测器，兼容 Python2 和 Python3。官网 difflib：(Python 标准库)帮助我们进行差异化比较。官网 ftfy：让Unicode文本更完整更连贯。官网 fuzzywuzzy：模糊字符串匹配。官网 Levenshtein：快速计算编辑距离以及字符串的相似度。官网 pangu.py：在中日韩语字符和数字字母之间添加空格。官网 yfiglet-figlet：pyfiglet -figlet 的 Python实现。 shortuuid：一个生成器库，用以生成简洁的，明白的，URL 安全的 UUID。官网 unidecode：Unicode 文本的 ASCII 转换形式 。官网 uniout：打印可读的字符，而不是转义的字符串。官网 xpinyin：一个用于把汉字转换为拼音的库。官网 Slug化 awesome-slugify：一个 Python slug 化库，可以保持 Unicode。官网 python-slugify：Python slug 化库，可以把 unicode 转化为 ASCII。官网 unicode-slugify：一个 slug 工具，可以生成 unicode slugs ,需要依赖 Django 。官网 解析器 phonenumbers：解析，格式化，储存，验证电话号码。官网 PLY：lex 和 yacc 解析工具的 Python 实现。官网 Pygments：通用语法高亮工具。官网 pyparsing：生成通用解析器的框架。官网 python-nameparser：把一个人名分解为几个独立的部分。官网 python-user-agents：浏览器 user agent 解析器。官网 sqlparse：一个无验证的 SQL 解析器。官网 特殊文本格式处理一些用来解析和操作特殊文本格式的库。 通用 tablib：一个用来处理中表格数据的模块。官网 Office Marmir：把输入的Python 数据结构转换为电子表单。官网 openpyxl：一个用来读写 Excel 2010 xlsx/xlsm/xltx/xltm 文件的库。官网 python-docx：读取，查询以及修改 Microsoft Word 2007/2008 docx 文件。官网 unoconv：在 LibreOffice/OpenOffice 支持的任意文件格式之间进行转换。官网 XlsxWriter：一个用于创建 Excel .xlsx 文件的 Python 模块。官网 xlwings：一个使得在 Excel 中方便调用 Python 的库（反之亦然），基于 BSD 协议。官网 xlwt：读写 Excel 文件的数据和格式信息。官网 / xlrd relatorio：模板化OpenDocument 文件。官网 PDF PDFMiner：一个用于从PDF文档中抽取信息的工具。官网 PyPDF2：一个可以分割，合并和转换 PDF 页面的库。官网 ReportLab：快速创建富文本 PDF 文档。官网 Markdown Mistune：快速并且功能齐全的纯 Python 实现的 Markdown 解析器。官网 Python-Markdown：John Gruber’s Markdown 的 Python 版实现。官网 YAML PyYAML：Python 版本的 YAML 解析器。官网 CSV csvkit：用于转换和操作 CSV 的工具。官网 Archive unp：一个用来方便解包归档文件的命令行工具。官网 自然语言处理用来处理人类语言的库。 NLTK：一个先进的平台，用以构建处理人类语言数据的 Python 程序。官网 jieba：中文分词工具。官网 langid.py：独立的语言识别系统。官网 Pattern：Python 网络信息挖掘模块。官网 SnowNLP：一个用来处理中文文本的库。官网 TextBlob：为进行普通自然语言处理任务提供一致的 API。官网 TextGrocery：一简单高效的短文本分类工具，基于 LibLinear 和 Jieba。官网 文档用以生成项目文档的库。 Sphinx：Python 文档生成器。官网 awesome-sphinxdoc：官网 MkDocs：对 Markdown 友好的文档生成器。官网 pdoc：一个可以替换Epydoc 的库，可以自动生成 Python 库的 API 文档。官网 Pycco：文学编程（literate-programming）风格的文档生成器。官网 配置用来保存和解析配置的库。 config：logging 模块作者写的分级配置模块。官网 ConfigObj：INI 文件解析器，带验证功能。官网 ConfigParser：(Python 标准库) INI 文件解析器。官网 profig：通过多种格式进行配置，具有数值转换功能。官网 python-decouple：将设置和代码完全隔离。官网 命令行工具用于创建命令行程序的库。 命令行程序开发 cement：Python 的命令行程序框架。官网 click：一个通过组合的方式来创建精美命令行界面的包。官网 cliff：一个用于创建命令行程序的框架，可以创建具有多层命令的命令行程序。官网 clint：Python 命令行程序工具。官网 colorama：跨平台彩色终端文本。官网 docopt：Python 风格的命令行参数解析器。官网 Gooey：一条命令，将命令行程序变成一个 GUI 程序。官网 python-prompt-toolkit：一个用于构建强大的交互式命令行程序的库。官网 Pythonpy：在命令行中直接执行任何Python指令。官网 生产力工具 aws-cli：Amazon Web Services 的通用命令行界面。官网 bashplotlib：在终端中进行基本绘图。官网 caniusepython3：判断是哪个项目妨碍你你移植到 Python 3。官网 cookiecutter：从 cookiecutters（项目模板）创建项目的一个命令行工具。官网 doitlive：一个用来在终端中进行现场演示的工具。官网 howdoi：通过命令行获取即时的编程问题解答。官网 httpie：一个命令行HTTP 客户端，cURL 的替代品，易用性更好。官网 PathPicker：从bash输出中选出文件。官网 percol：向UNIX shell 传统管道概念中加入交互式选择功能。官网 SAWS：一个加强版的 AWS 命令行。官网 thefuck：修正你之前的命令行指令。官网 mycli：一个 MySQL 命令行客户端，具有自动补全和语法高亮功能。官网 pgcli：Postgres 命令行工具，具有自动补全和语法高亮功能。官网 下载器用来进行下载的库. s3cmd：一个用来管理Amazon S3 和 CloudFront 的命令行工具。官网 s4cmd：超级 S3 命令行工具，性能更加强劲。官网 you-get：一个 YouTube/Youku/Niconico 视频下载器，使用 Python3 编写。官网 youtube-dl：一个小巧的命令行程序，用来下载 YouTube 视频。官网 图像处理用来操作图像的库. pillow：Pillow 是一个更加易用版的 PIL。官网 hmap：图像直方图映射。官网 imgSeek：一个使用视觉相似性搜索一组图片集合的项目。官网 nude.py：裸体检测。官网 pyBarcode：不借助 PIL 库在 Python 程序中生成条形码。官网 pygram：类似 Instagram 的图像滤镜。官网 python-qrcode：一个纯 Python 实现的二维码生成器。官网 Quads：基于四叉树的计算机艺术。官网 scikit-image：一个用于（科学）图像处理的 Python 库。官网 thumbor：一个小型图像服务，具有剪裁，尺寸重设和翻转功能。官网 wand：MagickWand的Python 绑定。MagickWand 是 ImageMagick的 C API 。官网 OCR光学字符识别库。 pyocr：Tesseract 和 Cuneiform 的一个封装(wrapper)。官网 pytesseract：Google Tesseract OCR 的另一个封装(wrapper)。官网 python-tesseract - Google Tesseract OCR 的一个包装类。 音频用来操作音频的库 audiolazy：Python 的数字信号处理包。官网 audioread：交叉库 (GStreamer + Core Audio + MAD + FFmpeg) 音频解码。官网 beets：一个音乐库管理工具及 MusicBrainz 标签添加工具官网 dejavu：音频指纹提取和识别官网 django-elastic-transcoder：Django + Amazon Elastic Transcoder。官网 eyeD3：一个用来操作音频文件的工具，具体来讲就是包含 ID3 元信息的 MP3 文件。官网 id3reader：一个用来读取 MP3 元数据的 Python 模块。官网 m3u8：一个用来解析 m3u8 文件的模块。官网 mutagen：一个用来处理音频元数据的 Python 模块。官网 pydub：通过简单、简洁的高层接口来操作音频文件。官网 pyechonest：Echo Nest API 的 Python 客户端官网 talkbox：一个用来处理演讲/信号的 Python 库官网 TimeSide：开源 web 音频处理框架。官网 tinytag：一个用来读取MP3, OGG, FLAC 以及 Wave 文件音乐元数据的库。官网 mingus：一个高级音乐理论和曲谱包，支持 MIDI 文件和回放功能。官网 Video用来操作视频和GIF的库。 moviepy：一个用来进行基于脚本的视频编辑模块，适用于多种格式，包括动图 GIFs。官网 scikit-video：SciPy 视频处理常用程序。官网 地理位置地理编码地址以及用来处理经纬度的库。 GeoDjango：世界级地理图形 web 框架。官网 GeoIP：MaxMind GeoIP Legacy 数据库的 Python API。官网 geojson：GeoJSON 的 Python 绑定及工具。官网 geopy：Python 地址编码工具箱。官网 pygeoip：纯 Python GeoIP API。官网 django-countries：一个 Django 应用程序，提供用于表格的国家选择功能，国旗图标静态文件以及模型中的国家字段。官网 HTTP使用HTTP的库。 requests：人性化的HTTP请求库。官网 grequests：requests 库 + gevent ，用于异步 HTTP 请求.官网 httplib2：全面的 HTTP 客户端库。官网 treq：类似 requests 的Python API 构建于 Twisted HTTP 客户端之上。官网 urllib3：一个具有线程安全连接池，支持文件 post，清晰友好的 HTTP 库。官网 数据库Python实现的数据库。 pickleDB：一个简单，轻量级键值储存数据库。官网 PipelineDB：流式 SQL 数据库。官网 TinyDB：一个微型的，面向文档型数据库。官网 ZODB：一个 Python 原生对象数据库。一个键值和对象图数据库。官网 数据库驱动用来连接和操作数据库的库。 ySQL：awesome-mysql系列 mysql-python：Python 的 MySQL 数据库连接器。官网 ysqlclient：mysql-python 分支，支持 Python 3。 oursql：一个更好的 MySQL 连接器，支持原生预编译指令和 BLOBs.官网 PyMySQL：纯 Python MySQL 驱动，兼容 mysql-python。官网 PostgreSQL psycopg2：Python 中最流行的 PostgreSQL 适配器。官网 queries：psycopg2 库的封装，用来和 PostgreSQL 进行交互。官网 txpostgres：基于 Twisted 的异步 PostgreSQL 驱动。官网 其他关系型数据库 apsw：另一个 Python SQLite封装。官网 dataset：在数据库中存储Python字典 pymssql：一个简单的Microsoft SQL Server数据库接口。官网 NoSQL 数据库 cassandra-python-driver：Cassandra 的 Python 驱动。官网 HappyBase：一个为 Apache HBase 设计的，对开发者友好的库。官网 Plyvel：一个快速且功能丰富的 LevelDB 的 Python 接口。官网 py2neo：Neo4j restful 接口的Python 封装客户端。官网 pycassa：Cassandra 的 Python Thrift 驱动。官网 PyMongo：MongoDB 的官方 Python 客户端。官网 redis-py：Redis 的 Python 客户端。官网 telephus：基于 Twisted 的 Cassandra 客户端。官网 txRedis：基于 Twisted 的 Redis 客户端。官网 ORM实现对象关系映射或数据映射技术的库。 关系型数据库 Django Models：Django 的一部分。官网 SQLAlchemy：Python SQL 工具以及对象关系映射工具。官网 awesome-sqlalchemy系列 Peewee：一个小巧，富有表达力的 ORM。官网 PonyORM：提供面向生成器的 SQL 接口的 ORM。官网 python-sql：编写 Python 风格的 SQL 查询。官网 NoSQL 数据库 django-mongodb-engine：Django MongoDB 后端。官网 PynamoDB：Amazon DynamoDB 的一个 Python 风格接口。官网 flywheel：Amazon DynamoDB 的对象映射工具。官网 MongoEngine：一个Python 对象文档映射工具，用于 MongoDB。官网 hot-redis：为 Redis 提供 Python 丰富的数据类型。官网 redisco：一个 Python 库，提供可以持续存在在 Redis 中的简单模型和容器。官网 其他 butterdb：Google Drive 电子表格的 Python ORM。官网 Web 框架全栈 Web 框架。 Django：Python 界最流行的 web 框架。官网 awesome-django系列 Flask：一个 Python 微型框架。官网 awesome-flask系列 yramid：一个小巧，快速，接地气的开源Python web 框架。 awesome-pyramid系列 Bottle：一个快速小巧，轻量级的 WSGI 微型 web 框架。官网 CherryPy：一个极简的 Python web 框架，服从 HTTP/1.1 协议且具有WSGI 线程池。官网 TurboGears：一个可以扩展为全栈解决方案的微型框架。官网 web.py：一个 Python 的 web 框架，既简单，又强大。官网 web2py：一个全栈 web 框架和平台，专注于简单易用。官网 Tornado：一个web 框架和异步网络库。官网 权限允许或拒绝用户访问数据或功能的库。 Carteblanche：Module to align code with thoughts of users and designers. Also magically handles navigation and permissions.官网 django-guardian：Django 1.2+ 实现了单个对象权限。官网 django-rules：一个小巧但是强大的应用，提供对象级别的权限管理，且不需要使用数据库。官网 CMS内容管理系统 django-cms：一个开源的，企业级 CMS，基于 Django。官网 djedi-cms：一个轻量级但却非常强大的 Django CMS ，考虑到了插件，内联编辑以及性能。官网 FeinCMS：基于 Django 构建的最先进的内容管理系统之一。官网 Kotti：一个高级的，Python 范的 web 应用框架，基于 Pyramid 构建。官网 Mezzanine：一个强大的，持续的，灵活的内容管理平台。官网 Opps：一个为杂志，报纸网站以及大流量门户网站设计的 CMS 平台，基于 Django。官网 Plone：一个构建于开源应用服务器 Zope 之上的 CMS。官网 Quokka：灵活，可扩展的小型 CMS，基于 Flask 和 MongoDB。官网 Wagtail：一个 Django 内容管理系统。官网 Widgy：最新的 CMS 框架，基于 Django。官网 电子商务用于电子商务以及支付的框架和库。 django-oscar：一个用于 Django 的开源的电子商务框架。官网 django-shop：一个基于 Django 的店铺系统。官网 Cartridge：一个基于 Mezzanine 构建的购物车应用。官网 shoop：一个基于 Django 的开源电子商务平台。官网 alipay：非官方的 Python 支付宝 API。官网 merchant：一个可以接收来自多种支付平台支付的 Django 应用。官网 money：货币类库with optional CLDR-backed locale-aware formatting and an extensible currency exchange solution.官网 python-currencies：显示货币格式以及它的数值。官网 RESTful API用来开发RESTful APIs的库 Django django-rest-framework：一个强大灵活的工具，用来构建 web API。官网 django-tastypie：为Django 应用开发API。官网 django-formapi：为 Django 的表单验证，创建 JSON APIs 。官网 Flask flask-api：为 flask 开发的，可浏览 Web APIs 。官网 flask-restful：为 flask 快速创建REST APIs 。官网 flask-restless：为 SQLAlchemy 定义的数据库模型创建 RESTful APIs 。官网 flask-api-utils：为 Flask 处理 API 表示和验证。官网 eve：REST API 框架，由 Flask, MongoDB 等驱动。官网 Pyramid cornice：一个Pyramid 的 REST 框架 。官网 与框架无关的 falcon：一个用来建立云 API 和 web app 后端的噶性能框架。官网 sandman：为现存的数据库驱动系统自动创建 REST APIs 。官网 restless：框架无关的 REST 框架 ，基于从 Tastypie 学到的知识。官网 ripozo：快速创建 REST/HATEOAS/Hypermedia APIs。官网 验证实现验证方案的库。 OAuth Authomatic：简单但是强大的框架，身份验证/授权客户端。官网 django-allauth：Django 的验证应用。官网 django-oauth-toolkit：为 Django 用户准备的 OAuth2。官网 django-oauth2-provider：为 Django 应用提供 OAuth2 接入。官网 Flask-OAuthlib：OAuth 1.0/a, 2.0 客户端实现，供 Flask 使用。官网 OAuthLib：一个 OAuth 请求-签名逻辑通用、 完整的实现。官网 python-oauth2：一个完全测试的抽象接口。用来创建 OAuth 客户端和服务端。官网 python-social-auth：一个设置简单的社会化验证方式。官网 rauth：OAuth 1.0/a, 2.0, 和 Ofly 的 Python 库。官网 sanction：一个超级简单的OAuth2 客户端实现。官网 其他 jose：JavaScript 对象签名和加密草案的实现。官网 PyJWT：JSON Web 令牌草案 01。官网 python-jws：JSON Web 签名草案 02 的实现。官网 python-jwt：一个用来生成和验证 JSON Web 令牌的模块。官网 模板引擎模板生成和词法解析的库和工具。 Jinja2：一个现代的，对设计师友好的模板引擎。官网 Chameleon：一个 HTML/XML 模板引擎。 模仿了 ZPT（Zope Page Templates）, 进行了速度上的优化。官网 Genshi：Python 模板工具，用以生成 web 感知的结果。官网 Mako：Python 平台的超高速轻量级模板。官网 Queue处理事件以及任务队列的库。 celery：一个异步任务队列/作业队列，基于分布式消息传递。官网 huey：小型多线程任务队列。官网 mrq：Mr. Queue -一个 Python 的分布式 worker 任务队列， 使用 Redis 和 gevent。官网 rq：简单的 Python 作业队列。官网 simpleq：一个简单的，可无限扩张的，基于亚马逊 SQS 的队列。官网 搜索对数据进行索引和执行搜索查询的库和软件。 django-haystack：Django 模块化搜索。官网 elasticsearch-py：Elasticsearch 的官方底层 Python 客户端。官网 elasticsearch-dsl-py：Elasticsearch 的官方高级 Python 客户端。官网 solrpy：solr的 Python 客户端。官网 Whoosh：一个快速的纯 Python 搜索引擎库。官网 动态消息用来创建用户活动的库。 django-activity-stream：从你的站点行为中生成通用活动信息流。官网 Stream-Framework：使用 Cassandra 和 Redis 创建动态消息和通知系统。官网 资源管理管理、压缩、缩小网站资源的工具。 django-compressor：将链接和内联的 JavaScript 或 CSS 压缩到一个单独的缓存文件中。官网 django-storages：一个针对 Django 的自定义存储后端的工具集合。官网 fanstatic：打包、优化，并且把静态文件依赖作为 Python 的包来提供。官网 File Conveyor：一个后台驻留的程序，用来发现和同步文件到 CDNs, S3 和 FTP。官网 Flask-Assets：帮你将 web 资源整合到你的 Flask app 中。官网 jinja-assets-compressor：一个 Jinja 扩展，用来编译和压缩你的资源。官网 webassets：为你的静态资源打包、优化和管理生成独一无二的缓存 URL。官网 缓存缓存数据的库。 Beaker：一个缓存和会话库，可以用在 web 应用和独立 Python脚本和应用上。官网 django-cache-machine：Django 模型的自动缓存和失效。官网 django-cacheops：具有自动颗粒化事件驱动失效功能的 ORM。官网 django-viewlet：渲染模板，同时具有额外的缓存控制功能。官网 dogpile.cache：dogpile.cache 是 Beaker 的下一代替代品，由同一作者开发。官网 HermesCache：Python 缓存库，具有基于标签的失效和 dogpile effect 保护功能。官网 johnny-cache：django应用缓存框架。官网 pylibmc：libmemcached 接口的 Python 封装。官网 电子邮件用来发送和解析电子邮件的库。 django-celery-ses：带有 AWS SES 和 Celery 的 Django email 后端。官网 envelopes：供人类使用的电子邮件库。官网 flanker：一个 email 地址和 Mime 解析库。官网 imbox：Python IMAP 库官网 inbox.py：Python SMTP 服务器。官网 inbox：一个开源电子邮件工具箱。官网 lamson：Python 风格的 SMTP 应用服务器。官网 mailjet：Mailjet API 实现，用来提供批量发送邮件，统计等功能。官网 marrow.mailer：高性能可扩展邮件分发框架。官网 modoboa：一个邮件托管和管理平台，具有现代的、简约的 Web UI。官网 pyzmail：创建，发送和解析电子邮件。官网 Talon：Mailgun 库，用来抽取信息和签名。官网 国际化用来进行国际化的库。 Babel：一个Python 的国际化库。官网 Korean：一个韩语词态库。官网 URL处理解析URLs的库 furl：一个让处理 URL 更简单小型 Python 库。官网 purl：一个简单的，不可变的URL类，具有简洁的 API 来进行询问和处理。官网 pyshorteners：一个纯 Python URL 缩短库。官网 shorturl：生成短小 URL 和类似 bit.ly 短链的Python 实现。官网 webargs：一个解析 HTTP 请求参数的库，内置对流行 web 框架的支持，包括 Flask, Django, Bottle, Tornado和 Pyramid。官网 HTML处理处理 HTML和XML的库。 BeautifulSoup：以 Python 风格的方式来对 HTML 或 XML 进行迭代，搜索和修改。官网 bleach：一个基于白名单的 HTML 清理和文本链接库。官网 cssutils：一个 Python 的 CSS 库。官网 html5lib：一个兼容标准的 HTML 文档和片段解析及序列化库。官网 lxml：一个非常快速，简单易用，功能齐全的库，用来处理 HTML 和 XML。官网 MarkupSafe：为Python 实现 XML/HTML/XHTML 标记安全字符串。官网 pyquery：一个解析 HTML 的库，类似 jQuery。官网 untangle：将XML文档转换为Python对象，使其可以方便的访问。官网 xhtml2pdf：HTML/CSS 转 PDF 工具。官网 xmltodict：像处理 JSON 一样处理 XML。官网 爬取网络站点的库 Scrapy：一个快速高级的屏幕爬取及网页采集框架。官网 cola：一个分布式爬虫框架。官网 Demiurge：基于PyQuery 的爬虫微型框架。官网 feedparser：通用 feed 解析器。官网 Grab：站点爬取框架。官网 MechanicalSoup：用于自动和网络站点交互的 Python 库。官网 portia：Scrapy 可视化爬取。官网 pyspider：一个强大的爬虫系统。官网 RoboBrowser：一个简单的，Python 风格的库，用来浏览网站，而不需要一个独立安装的浏览器。官网 网页内容提取用于进行网页内容提取的库。 Haul：一个可以扩展的图像爬取工具。官网 html2text：将 HTML 转换为 Markdown 格式文本官网 lassie：人性化的网页内容检索库。官网 micawber：一个小型网页内容提取库，用来从 URLs 提取富内容。官网 newspaper：使用 Python 进行新闻提取，文章提取以及内容策展。官网 opengraph：一个用来解析开放内容协议(Open Graph Protocol)的 Python模块。官网 python-goose：HTML内容/文章提取器。官网 python-readability：arc90 公司 readability 工具的 Python 高速端口。官网 sanitize：为杂乱的数据世界带来调理性。官网 sumy：一个为文本文件和 HTML 页面进行自动摘要的模块。官网 textract：从任何格式的文档中提取文本，Word，PowerPoint，PDFs 等等。官网 表单进行表单操作的库。 Deform：Python HTML 表单生成库，受到了 formish 表单生成库的启发。官网 django-bootstrap3：集成了 Bootstrap 3 的 Django。官网 django-crispy-forms：一个 Django 应用，他可以让你以一种非常优雅且 DRY（Don’t repeat yourself） 的方式来创建美观的表单。官网 django-remote-forms：一个平台独立的 Django 表单序列化工具。官网 WTForms：一个灵活的表单验证和呈现库。官网 WTForms-JSON：一个 WTForms 扩展，用来处理 JSON 数据。官网 数据验证数据验证库。多用于表单验证。 Cerberus：A mappings-validator with a variety of rules, normalization-features and simple customization that uses a pythonic schema-definition.官网 colander：一个用于对从 XML, JSON，HTML 表单获取的数据或其他同样简单的序列化数据进行验证和反序列化的系统。官网 kmatch：一种用于匹配/验证/筛选 Python 字典的语言。官网 schema：一个用于对 Python 数据结构进行验证的库。官网 Schematics：数据结构验证。官网 valideer：轻量级可扩展的数据验证和适配库。官网 voluptuous：一个 Python 数据验证库。主要是为了验证传入 Python的 JSON，YAML 等数据。官网 反垃圾技术帮助你和电子垃圾进行战斗的库。 django-simple-captcha：一个简单、高度可定制的Django 应用，可以为任何Django表单添加验证码。官网 django-simple-spam-blocker：一个用于Django的简单的电子垃圾屏蔽工具。官网 标记用来进行标记的库。 django-taggit：简单的 Django 标记工具。官网 管理面板管理界面库。 Ajenti：一个你的服务器值得拥有的管理面板。官网 django-suit：Django 管理界面的一个替代品 (仅对于非商业用途是免费的)。官网 django-xadmin：Django admin 的一个替代品，具有很多不错的功能。官网 flask-admin：一个用于 Flask 的简单可扩展的管理界面框架。官网 flower：一个对 Celery 集群进行实时监控和提供 web 管理界面的工具。官网 Grappelli：Django 管理界面的一个漂亮的皮肤。官网 Wooey：一个 Django 应用，可以为 Python 脚本创建 web 用户界面。官网 静态站点生成器静态站点生成器是一个软件，它把文本和模板作为输入，然后输出HTML文件。 Pelican：使用 Markdown 或 ReST 来处理内容， Jinja 2 来制作主题。支持 DVCS, Disqus.。AGPL 许可。官网 Cactus：为设计师设计的静态站点生成器。官网 Hyde：基于 Jinja2 的静态站点生成器。官网 Nikola：一个静态网站和博客生成器。官网 Tinkerer：Tinkerer 是一个博客引擎/静态站点生成器，由Sphinx驱动。官网 Lektor：一个简单易用的静态 CMS 和博客引擎。官网 进程操作系统进程启动及通信库。 envoy：比 Python subprocess 模块更人性化。官网 sarge：另一 种 subprocess 模块的封装。官网 sh：一个完备的 subprocess 替代库。官网 并发和并行用以进行并发和并行操作的库。 multiprocessing：(Python 标准库) 基于进程的“线程”接口。官网 threading：(Python 标准库)更高层的线程接口。官网 eventlet：支持 WSGI 的异步框架。官网 gevent：一个基于协程的 Python 网络库，使用greenlet。官网 Tomorrow：用于产生异步代码的神奇的装饰器语法实现。官网 网络用于网络编程的库。 asyncio：(Python 标准库) 异步 I/O, 事件循环, 协程以及任务。官网 Twisted：一个事件驱动的网络引擎。官网 pulsar：事件驱动的并发框架。官网 diesel：基于Greenlet 的事件 I/O 框架。官网 pyzmq：一个 ZeroMQ 消息库的 Python 封装。官网 txZMQ：基于 Twisted 的 ZeroMQ 消息库的 Python 封装。官网 WebSocket帮助使用WebSocket的库。 AutobahnPython：给 Python 、使用的 WebSocket &amp; WAMP 基于 Twisted 和 asyncio。官网 Crossbar：开源统一应用路由(Websocket &amp; WAMP for Python on Autobahn).官网 django-socketio：给 Django 用的 WebSockets。官网 WebSocket-for-Python：为Python2/3 以及 PyPy 编写的 WebSocket 客户端和服务器库。官网 WSGI 服务器兼容 WSGI 的 web 服务器 gunicorn：Pre-forked, 部分是由 C 语言编写的。官网 uwsgi：uwsgi 项目的目的是开发一组全栈工具，用来建立托管服务， 由 C 语言编写。官网 bjoern：异步，非常快速，由 C 语言编写。官网 fapws3：异步 (仅对于网络端)，由 C 语言编写。官网 meinheld：异步，部分是由 C 语言编写的。官网 netius：异步，非常快速。官网 paste：多线程，稳定，久经考验。官网 rocket：多线程。官网 waitress：多线程, 是它驱动着 Pyramid 框架。官网 Werkzeug：一个 WSGI 工具库，驱动着 Flask ，而且可以很方便大嵌入到你的项目中去。官网 RPC 服务器兼容 RPC 的服务器。 SimpleJSONRPCServer：这个库是 JSON-RPC 规范的一个实现。官网 SimpleXMLRPCServer：(Python 标准库) 简单的 XML-RPC 服务器实现，单线程。官网 zeroRPC：zerorpc 是一个灵活的 RPC 实现，基于 ZeroMQ 和 MessagePack。官网 密码学 cryptography：这个软件包意在提供密码学基本内容和方法提供给 Python 开发者。官网 hashids：在 Python 中实现 hashids 。官网 Paramiko：SSHv2 协议的 Python (2.6+, 3.3+) ，提供客户端和服务端的功能。官网 Passlib：安全密码存储／哈希库，官网 PyCrypto：Python 密码学工具箱。官网 PyNacl：网络和密码学(NaCl) 库的 Python 绑定。官网 图形用户界面用来创建图形用户界面程序的库。 curses：内建的 ncurses 封装，用来创建终端图形用户界面。官网 enaml：使用类似 QML 的Declaratic语法来创建美观的用户界面。官网 kivy：一个用来创建自然用户交互（NUI）应用程序的库，可以运行在 Windows, Linux, Mac OS X, Android 以及 iOS平台上。官网 pyglet：一个Python 的跨平台窗口及多媒体库。官网 PyQt：跨平台用户界面框架 Qt 的 Python 绑定 ，支持Qt v4 和 Qt v5。官网 PySide：P跨平台用户界面框架 Qt 的 Python 绑定 ，支持Qt v4。官网 Tkinter：Tkinter 是 Python GUI 的一个事实标准库。官网 Toga：一个 Python 原生的, 操作系统原生的 GUI 工具包。官网 urwid：一个用来创建终端 GUI 应用的库，支持组件，事件和丰富的色彩等。官网 wxPython：wxPython 是 wxWidgets C++ 类库和 Python 语言混合的产物。官网 PyGObject：GLib/GObject/GIO/GTK+ (GTK+3) 的 Python 绑定官网 Flexx：Flexx 是一个纯 Python 语言编写的用来创建 GUI 程序的工具集，它使用 web 技术进行界面的展示。官网 游戏开发超赞的游戏开发库。 Cocos2d：cocos2d 是一个用来开发 2D 游戏， 示例和其他图形/交互应用的框架。基于 pyglet。官网 Panda3D：由迪士尼开发的 3D 游戏引擎，并由卡内基梅陇娱乐技术中心负责维护。使用C++编写, 针对 Python 进行了完全的封装。官网 Pygame：Pygame 是一组 Python 模块，用来编写游戏。官网 PyOgre：Ogre 3D 渲染引擎的 Python 绑定，可以用来开发游戏和仿真程序等任何 3D 应用。官网 PyOpenGL：OpenGL 的 Python 绑定及其相关 APIs。官网 PySDL2：SDL2 库的封装，基于 ctypes。官网 RenPy：一个视觉小说（visual novel）引擎。官网 日志用来生成和操作日志的库。 logging：(Python 标准库) 为 Python 提供日志功能。官网 logbook：Logging 库的替代品。官网 Eliot：为复杂的和分布式系统创建日志。官网 Raven：Sentry的 Python 客户端。官网 Sentry：实时记录和收集日志的服务器。官网 Testing进行代码库测试和生成测试数据的库。 测试框架 unittest：(Python 标准库) 单元测试框架。官网 nose：nose 扩展了 unittest 的功能。官网 contexts：一个 Python 3.3+ 的 BDD 框架。受到C# hypothesis：Hypothesis 是一个基于先进的 Quickcheck 风格特性的测试库。官网 mamba：Python 的终极测试工具， 拥护BDD。官网 PyAutoGUI：PyAutoGUI 是一个人性化的跨平台 GUI 自动测试模块。官网 pyshould：Should 风格的断言，基于 PyHamcrest。官网 pytest：一个成熟的全功能 Python 测试工具。官网 green：干净，多彩的测试工具。官网 pyvows：BDD 风格的测试工具，受Vows.js的启发。官网- Robot Framework：一个通用的自动化测试框架。官网 Web 测试 Selenium：Selenium WebDriver 的 Python 绑定。官网 locust：使用 Python 编写的，可扩展的用户加载测试工具。官网 sixpack：一个和语言无关的 A/B 测试框架。官网 splinter：开源的 web 应用测试工具。官网 Mock测试 mock：(Python 标准库) 一个用于伪造测试的库。官网 doublex：Python 的一个功能强大的 doubles 测试框架。官网 freezegun：通过伪造日期模块来生成不同的时间。官网 httmock：针对 Python 2.6+ 和 3.2+ 生成 伪造请求的库。官网 httpretty：Python 的 HTTP 请求 mock 工具。官网 responses：伪造 Python 中的 requests 库的一个通用库。官网 VCR.py：在你的测试中记录和重放 HTTP 交互。官网 对象工厂 factoryboy：一个 Python 用的测试固件 (test fixtures) 替代库。官网 mixer：另外一个测试固件 (test fixtures) 替代库，支持 Django, Flask, SQLAlchemy, Peewee 等。官网 modelmommy：为 Django 测试创建随机固件官网 代码覆盖率 coverage：代码覆盖率测量。官网 伪数据 faker：一个 Python 库，用来生成伪数据。官网 fake2db：伪数据库生成器。官网 radar：生成随机的日期/时间。官网 错误处理 FuckIt.py：FuckIt.py 使用最先进的技术来保证你的 Python 代码无论对错都能继续运行。官网 代码分析和Lint工具进行代码分析，解析和操作代码库的库和工具。 代码分析 code2flow：把你的 Python 和 JavaScript 代码转换为流程图。官网 pycallgraph：这个库可以把你的Python 应用的流程(调用图)进行可视化。官网 pysonar2：Python 类型推断和检索工具。官网 Lint工具 Flake8：模块化源码检查工具: pep8, pyflakes 以及 co。官网 Pylint：一个完全可定制的源码分析器。官网 pylama：Python 和 JavaScript 的代码审查工具。官网 Debugging Tools用来进行代码调试的库。 调试器 ipdb：IPython 启用的 pdb。官网 pudb：全屏，基于控制台的 Python 调试器。官网 pyringe：可以在 Python 进程中附加和注入代码的调试器。官网 wdb：一个奇异的 web 调试器，通过 WebSockets 工作。官网 winpdb：一个具有图形用户界面的 Python 调试器，可以进行远程调试，基于 rpdb2。官网 django-debug-toolbar：为 Django 显示各种调试信息。官网 django-devserver：一个 Django 运行服务器的替代品。官网 flask-debugtoolbar：django-debug-toolbar 的 flask 版。官网 性能分析器 lineprofiler：逐行性能分析。官网 memoryprofiler：监控 Python 代码的内存使用。官网 profiling：一个交互式 Python 性能分析工具。官网 其他 pyelftools：解析和分析 ELF 文件以及 DWARF 调试信息。官网 python-statsd：statsd 服务器的 Python 客户端。官网 Science and Data Analysis用来进行科学计算和数据分析的库。 astropy：一个天文学 Python 库。官网 bcbio-nextgen：这个工具箱为全自动高通量测序分析提供符合最佳实践的处理流程。官网 bccb：生物分析相关代码集合官网 Biopython：Biopython 是一组可以免费使用的用来进行生物计算的工具。官网 blaze：NumPy 和 Pandas 的大数据接口。官网 cclib：一个用来解析和解释计算化学软件包输出结果的库。官网 NetworkX：一个为复杂网络设计的高性能软件。官网 Neupy：执行和测试各种不同的人工神经网络算法。官网 Numba：Python JIT (just in time) 编译器，针对科学用的 Python ，由Cython 和 NumPy 的开发者开发。官网 NumPy：使用 Python 进行科学计算的基础包。官网 Open Babel：一个化学工具箱，用来描述多种化学数据。官网 Open Mining：使用 Python 挖掘商业情报 (BI) (Pandas web 接口)。官网 orange：通过可视化编程或 Python 脚本进行数据挖掘，数据可视化，分析和机器学习。官网 Pandas：提供高性能，易用的数据结构和数据分析工具。官网 PyDy：PyDy 是 Python Dynamics 的缩写，用来为动力学运动建模工作流程提供帮助， 基于 NumPy, SciPy, IPython 和 matplotlib。官网 PyMC：马尔科夫链蒙特卡洛采样工具。官网 RDKit：化学信息学和机器学习软件。官网 SciPy：由一些基于 Python ，用于数学，科学和工程的开源软件构成的生态系统。官网 statsmodels：统计建模和计量经济学。官网 SymPy：一个用于符号数学的 Python 库。官网 zipline：一个 Python 算法交易库。官网 数据可视化进行数据可视化的库。 参见: awesome-javascript。 matplotlib：一个 Python 2D 绘图库。官网 bokeh：用 Python 进行交互式 web 绘图。官网 ggplot：ggplot2 给 R 提供的 API 的 Python 版本。官网 plotly：协同 Python 和 matplotlib 工作的 web 绘图库。官网 pygal：一个 Python SVG 图表创建工具。官网 pygraphviz：Graphviz 的 Python 接口。官网 PyQtGraph：交互式实时2D/3D/图像绘制及科学/工程学组件。官网 SnakeViz：一个基于浏览器的 Python’s cProfile 模块输出结果查看工具。官网 vincent：把 Python 转换为 Vega 语法的转换工具。官网 VisPy：基于 OpenGL 的高性能科学可视化工具。官网 计算机视觉计算机视觉库。 OpenCV：开源计算机视觉库。官网 SimpleCV：一个用来创建计算机视觉应用的开源框架。官网 机器学习机器学习库。 参见: awesome-machine-learning. Crab：灵活、快速的推荐引擎。官网 gensim：人性化的话题建模库。官网 hebel：GPU 加速的深度学习库。官网 NuPIC：智能计算 Numenta 平台。官网 pattern：Python 网络挖掘模块。官网 PyBrain：另一个 Python 机器学习库。官网 Pylearn2：一个基于 Theano 的机器学习库。官网 python-recsys：一个用来实现推荐系统的 Python 库。官网 scikit-learn：基于 SciPy 构建的机器学习 Python 模块。官网 pydeep：Python 深度学习库。官网 vowpalporpoise：轻量级 Vowpal Wabbit 的 Python 封装。官网 skflow：一个 TensorFlow 的简化接口(模仿 scikit-learn)。官网 MapReduceMapReduce 框架和库。 dpark：Spark 的 Python 克隆版，一个类似 MapReduce 的框架。官网 dumbo：这个 Python 模块可以让人轻松的编写和运行 Hadoop 程序。官网 luigi：这个模块帮你构建批处理作业的复杂流水线。官网 mrjob：在 Hadoop 或 Amazon Web Services 上运行 MapReduce 任务。官网 PySpark：Spark 的 Python API 。官网 streamparse：运行针对事实数据流的 Python 代码。集成了Apache Storm。官网 函数式编程使用 Python 进行函数式编程。 CyToolz：Toolz 的 Cython 实现 : 高性能函数式工具。官网 fn.py：在 Python 中进行函数式编程 : 实现了一些享受函数式编程缺失的功能。官网 funcy：炫酷又实用的函数式工具。官网 Toolz：一组用于迭代器，函数和字典的函数式编程工具。官网 第三方 API用来访问第三方 API的库。 参见： List of Python API Wrappers and Libraries。 apache-libcloud：一个为各种云设计的 Python 库。官网 boto：Amazon Web Services 的 Python 接口。官网 django-wordpress：WordPress models and views for Django.官网 facebook-sdk：Facebook 平台的 Python SDK.官网 facepy：Facepy 让和 Facebook’s Graph API 的交互变得更容易。官网 gmail：Gmail 的 Python 接口。官网 google-api-python-client：Python 用的 Google APIs 客户端库。官网 gspread：Google 电子表格的 Python API.官网 twython：Twitter API 的封装。官网 DevOps 工具用于 DevOps 的软件和库。 Ansible：一个非常简单的 IT 自动化平台。官网 SaltStack：基础设施自动化和管理系统。官网 OpenStack：用于构建私有和公有云的开源软件。官网 Docker Compose：快速，分离的开发环境，使用 Docker。官网 Fabric：一个简单的，Python 风格的工具，用来进行远程执行和部署。官网 cuisine：为 Fabric 提供一系列高级函数。官网 Fabtools：一个用来编写超赞的 Fabric 文件的工具。官网 gitapi：Git 的纯 Python API。官网 hgapi：Mercurial 的纯 Python API。官网 honcho：Foreman的 Python 克隆版，用来管理基于Procfile的应用。官网 pexpect：Controlling interactive programs in a pseudo-terminal like 在一个伪终端中控制交互程序，就像 GNU expect 一样。官网 psutil：一个跨平台进程和系统工具模块。官网 supervisor：UNIX 的进程控制系统。官网 任务调度任务调度库。 APScheduler：轻巧但强大的进程内任务调度，使你可以调度函数。官网 django-schedule：一个 Django 排程应用。官网 doit：一个任务执行和构建工具。官网 gunnery：分布式系统使用的多用途任务执行工具 ，具有 web 交互界面。官网 Joblib：一组为 Python 提供轻量级作业流水线的工具。官网 Plan：如有神助地编写 crontab 文件。官网 schedule：人性化的 Python 任务调度库。官网 Spiff：使用纯 Python 实现的强大的工作流引擎。官网 TaskFlow：一个可以让你方便执行任务的 Python 库，一致并且可靠。官网 外来函数接口使用外来函数接口的库。 cffi：用来调用 C 代码的外来函数接口。官网 ctypes：(Python 标准库) 用来调用 C 代码的外来函数接口。官网 PyCUDA：Nvidia CUDA API 的封装。官网 SWIG：简化的封装和接口生成器。官网 高性能让 Python 更快的库。 Cython：优化的 Python 静态编译器。使用类型混合使 Python 编译成 C 或 C++ 模块来获得性能的极大提升。官网 PeachPy：嵌入 Python 的 x86-64 汇编器。可以被用作 Python 内联的汇编器或者是独立的汇编器，用于 Windows, Linux, OS X, Native Client 或者 Go 。官网 PyPy：使用 Python 实现的 Python。解释器使用黑魔法加快 Python 运行速度且不需要加入额外的类型信息。官网 Pyston：使用 LLVM 和现代 JIT 技术构建的 Python 实现，目标是为了获得很好的性能。官网 Stackless Python：一个强化版的 Python。官网 微软的 Windows平台在 Windows 平台上进行 Python 编程。 Python(x,y)：面向科学应用的 Python 发行版，基于 Qt 和 Spyder。官网 pythonlibs：非官方的 Windows 平台 Python 扩展二进制包。官网 PythonNet：Python 与 .NET 公共语言运行库 (CLR)的集成。官网 PyWin32：针对 Windows 的Python 扩展。官网 WinPython：Windows 7/8 系统下便携式开发环境。官网 网络可视化和SDN用来进行网络可视化和SDN(软件定义网络)的工具和库。 Mininet：一款流行的网络模拟器以及用 Python 编写的 API。官网 POX：一个针对基于 Python 的软件定义网络应用（例如 OpenFlow SDN 控制器）的开源开发平台。官网 Pyretic：火热的 SDN 编程语言中的一员，为网络交换机和模拟器提供强大的抽象能力。官网 SDX Platform：基于 SDN 的 IXP 实现，影响了 Mininet, POX 和 Pyretic。官网 硬件用来对硬件进行编程的库。 ino：操作Arduino的命令行工具。官网 Pyro：Python 机器人编程库。官网 PyUserInput：跨平台的，控制鼠标和键盘的模块。官网 scapy：一个非常棒的操作数据包的库。官网 wifi：一个 Python 库和命令行工具用来在 Linux 平台上操作WiFi。官网 Pingo：Pingo 为类似Raspberry Pi，pcDuino， Intel Galileo等设备提供统一的API用以编程。官网 兼容性帮助从 Python 2 向 Python 3迁移的库。 Python-Future：这就是 Python 2 和 Python 3 之间丢失的那个兼容性层。官网 Python-Modernize：使 Python 代码更加现代化以便最终迁移到 Python 3。官网 Six：Python 2 和 3 的兼容性工具。官网 杂项不属于上面任何一个类别，但是非常有用的库。 blinker：一个快速的 Python 进程内信号/事件分发系统。官网 itsdangerous：一系列辅助工具用来将可信的数据传入不可信的环境。官网 pluginbase：一个简单但是非常灵活的 Python 插件系统。官网 Pychievements：一个用来创建和追踪成就的 Python 框架。官网 Tryton：一个通用商务框架。官网 算法和设计模式Python 实现的算法和设计模式。 algorithms：一个 Python 算法模块。官网 python-patterns：Python 设计模式的集合。官网 sortedcontainers：快速，纯 Python 实现的SortedList，SortedDict 和 SortedSet 类型。官网 编辑器插件编辑器和 IDE 的插件 Emacs Elpy：Emacs Python 开发环境。官网 Sublime Text SublimeJEDI：一个 Sublime Text 插件，用来使用超赞的自动补全库 Jedi。官网 Anaconda：Anaconda 把你的 Sublime Text 3 变成一个功能齐全的 Python IDE。官网 Vim YouCompleteMe：引入基于 Jedi 的 Python 自动补全引擎。官网 Jedi-vim：绑定 Vim 和 Jedi 自动补全库对 Python 进行自动补全。官网 Python-mode：将 Vim 变成 Python IDE 的一款多合一插件。官网 Visual Studio PTVS：Visual Studio 的 Python 工具官网 集成开发环境流行的 Python 集成开发环境。 PyCharm：商业化的 Python IDE ，由 JetBrains 开发。也有免费的社区版提供。官网 LiClipse：基于 Eclipse 的免费多语言 IDE 。使用 PyDev 来支持 Python 。官网 Spyder：开源 Python IDE。官网 服务在线工具和简化开发的 API 。 持续集成参见: awesome-CIandCD. Travis CI：一个流行的工具，为你的开源和私人项目提供持续集成服务。(仅支持 GitHub)官网 CircleCI：一个持续集成工具，可以非常快速的进行并行测试。 (仅支持 GitHub)官网 Vexor CI：一个为私人 app 提供持续集成的工具，支持按分钟付费。官网 Wercker：基于 Docker 平台，用来构建和部署微服务。官网 代码质量 Codacy：自动化代码审查，更加快速的发布高质量代码。对于开源项目是免费的。官网 QuantifiedCode：一个数据驱动、自动、持续的代码审查工具。官网 资源在这里可以找到新的 Python 库。 网站 r/Python CoolGithubProjects Django Packages Full Stack Python Python 3 Wall of Superpowers Python Hackers Python ZEEF Trending Python repositories on GitHub today PyPI Ranking 周刊 Import Python Newsletter Pycoder’s Weekly Python Weekly Twitter @codetengu @getpy @planetpython @pycoders @pypi @pythontrending @PythonWeekly 学习指南 Scipy-lecture-notes：如何用Python来做学术？官网 SScientific-python-lectures：Python科学计算的资料。官网 Mario-Level-1：用Python和Pygame写的超级马里奥第一关。官网 Python Koans：Python的交互式学习工具。官网 Minecraft：用python写的Minecraft游戏。官网 pycrumbs：Python资源大全。官网 python-patterns：使用python实现设计模式。官网 Projects：Python项目大集合。官网 The Hitchhiker’s Guide to Python：旅行者的Python学习指南。官网 知名网站值得关注的 Python 技术站点。 中文站点 伯乐在线 Python 频道：分享 Python 开发技术、相关的行业动态。官网 英文站点 待补充 微博、微信公众号 Python开发者 微博：@Python开发者 Python开发者：人生苦短，我用 Python。Python 越来越受广大程序员的喜爱。「Python开发者」是最受欢迎的、专注分享Python技术的微信公众号，主要分享 Python 相关的技术文章、工具资源和资讯等。","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"python","slug":"python","permalink":"http://ipcreator.me/tags/python/"}]},{"title":"Question Answering System","date":"2017-02-12T01:02:06.000Z","path":"2017/02/12/zh-question-answering-system/","text":"作者：eric_xu/ericxk QuestionAnsweringSystem是一个Java实现的人机问答系统，能够自动分析问题并给出候选答案。IBM人工智能计算机系统”沃森”（Watson）在2011年2月美国热门的电视智力问答节目”危险边缘”（Jeopardy！）中战胜了两位人类冠军选手，QuestionAnsweringSystem就是IBM Watson的Java开源实现。使用方法：1、安装JDK8和Maven2.2.1 将JDK的bin目录和Maven的bin目录加入PATH环境变量，确保在命令行能调用java和mvn命令： java -version java version “1.8.0_45” mvn -v Apache Maven 2.2.12、准备word分词器 word分词器1.3还未release，先自己编译最新的源码 git clone https://github.com/ysc/word.git cd word mvn clean install cd ..3、获取问答系统源码 git clone https://github.com/ysc/QuestionAnsweringSystem.git cd QuestionAnsweringSystem 建议自己注册一个GitHub账号，将项目Fork到自己的账号下，然后再从自己的账号下签出项目源码， 这样便于使用GitHub的Pull requests功能进行协作开发。4、运行项目 unix类操作系统执行： chmod +x startup.sh &amp; ./startup.sh windows类操作系统执行： ./startup.bat5、使用系统 打开浏览器访问：http://localhost:8080/deep-qa-web/index.jsp工作原理：1、判断问题类型（答案类型），当前使用模式匹配的方法，将来支持更多的方法，如朴素贝叶斯分类器。2、提取问题关键词。3、利用问题关键词搜索多种数据源，当前的数据源主要是人工标注的语料库、谷歌、百度。4、从搜索结果中根据问题类型（答案类型）提取候选答案。5、结合问题以及搜索结果对候选答案进行打分。6、返回得分最高的TopN项候选答案。目前支持5种问题类型（答案类型）：1、人名 如： APDPlat的作者是谁？ APDPlat的发起人是谁？ 谁死后布了七十二疑冢？ 习近平最爱的女人是谁？2、地名 如： “海的女儿”是哪个城市的城徽？ 世界上流经国家最多的河流是哪一条？ 世界上最长的河流是什么？ 汉城是哪个国家的首都？3、机构团体名 如： BMW是哪个汽车公司制造的？ 长城信用卡是哪家银行发行的？ 美国历史上第一所高等学府是哪个学校？ 前身是红色中华通讯社的是什么？4、数字 如： 全球表面积有多少平方公里？ 撒哈拉有多少平方公里？ 北京大学占地多少平方米？ 撒哈拉有多少平方公里？5、时间 如： 哪一年第一次提出“大跃进”的口号？ 大庆油田是哪一年发现的？ 澳门是在哪一年回归祖国怀抱的？ 邓小平在什么时候进行南巡讲话？API接口：调用地址： http://127.0.0.1/api/ask?n=1&amp;q=APDPlat的作者是谁？参数： n表示需要返回的答案的个数 q表示问题编码： 服务端和客户端均使用UTF-8编码 服务端需要修改tomcat配置文件conf/server.xml，在相应的Connector中加入配置URIEncoding=”UTF-8”返回json: [ { “answer”: “杨尚川”, “score”: 1 } ]使用说明：1、初始化MySQL数据库(MySQL作为数据缓存区使用，此步骤可选)： 在MySQL命令行中执行QuestionAnsweringSystem\\deep-qa\\src\\main\\resources\\mysql\\questionanswer.sql文件中的脚本MySQL编码：UTF-8，主机：127.0.0.1端口：3306数据库：questionanswer用户名：root密码：root2、构建war文件并部署到tomcat：cd QuestionAnsweringSystemmvn installcd deep-qa-web\\targetcp deep-qa-web-1.1.war apache-tomcat-7.0.37/webapps/QuestionAnsweringSystem.war启动tomcat3、打开浏览器访问：http://localhost:8080/QuestionAnsweringSystem/可部署war包下载如何在你的应用中集成人机问答系统QuestionAnsweringSystem?QuestionAnsweringSystem提供了两种集成方式，以库的方式嵌入到应用中，以平台的方式独立部署。下面说说这两种方式如何做。1、以库的方式嵌入到应用中。这种方式只支持Java平台，可通过Maven依赖将库加入构建路径，如下所示：&lt;dependency&gt; &lt;groupId&gt;org.apdplat&lt;/groupId&gt; &lt;artifactId&gt;deep-qa&lt;/artifactId&gt; &lt;version&gt;1.1&lt;/version&gt;&lt;/dependency&gt;在应用如何使用呢？示例代码如下：String questionStr = “APDPlat的作者是谁？”;Question question = SharedQuestionAnsweringSystem.getInstance().answerQuestion(questionStr);if (question != null) { List&lt;CandidateAnswer&gt; candidateAnswers = question.getAllCandidateAnswer(); int i=1; for(CandidateAnswer candidateAnswer : candidateAnswers){ System.out.println((i++)+”、”+candidateAnswer.getAnswer()+”:”+candidateAnswer.getScore()); }}运行程序后会在当前目录下生成目录deep-qa，目录里面又有两个目录dic和questionTypePatterns。dic是中文分词组件依赖的词库，questionTypePatterns是问题类别分析依赖的模式定义，可根据自己的需要修改。2、以平台的方式独立部署。首先在自己的服务器上如192.168.0.1部署好了，然后就可以通过Json Over HTTP的方式提供服务，使用方法如下所示：调用地址：http://192.168.0.1/api/ask?n=1&amp;q=APDPlat的作者是谁？参数：n表示需要返回的答案的个数q表示问题编码：UTF-8编码返回json:[ { “answer”: “杨尚川”, “score”: 1 }]深入了解：QuestionAnsweringSystem由2个子项目构成，deep-qa和deep-qa-web。deep-qa是核心部分，deep-qa-web提供web界面来和用户交互，同时也提供了Json Over HTTP的访问接口，便于异构系统的集成。deep-qa是一个jar包，可通过maven引用：&lt;dependency&gt; &lt;groupId&gt;org.apdplat&lt;/groupId&gt; &lt;artifactId&gt;deep-qa&lt;/artifactId&gt; &lt;version&gt;1.1&lt;/version&gt;&lt;/dependency&gt;示例代码如下：String questionStr = “APDPlat的作者是谁？”;Question question = SharedQuestionAnsweringSystem.getInstance().answerQuestion(questionStr);if (question != null) { List&lt;CandidateAnswer&gt; candidateAnswers = question.getAllCandidateAnswer(); int i=1; for(CandidateAnswer candidateAnswer : candidateAnswers){ System.out.println((i++)+”、”+candidateAnswer.getAnswer()+”:”+candidateAnswer.getScore()); }}运行程序后会在当前目录下生成目录deep-qa，目录里面又有两个目录dic和questionTypePatterns。dic是中文分词组件依赖的词库，questionTypePatterns是问题类别分析依赖的模式定义，可根据自己的需要修改。测试人机问答系统智能性的3760个问题人机问答系统的前世今生人机问答系统的类别What is Question Answering?其他人机问答系统介绍：1、OpenEphyra（Java开源）Ephyra is a modular and extensible framework for open domain question answering (QA).The system retrieves accurate answers to natural language questions from the Web andother sources.OpenEphyra主页2、Watsonsim（Java开源）Open-domain question answering system from UNCC.Watsonsim works using a pipeline of operations on questions, candidate answers, andtheir supporting passages.In many ways it is similar to IBM’s Watson, and Petr’s YodaQA.It’s not all that similar to more logic based systems like OpenCog or Wolfram Alpha.Watsonsim主页3、YodaQA（Java开源）YodaQA is an open source Question Answering system.using on-the-fly Information Extraction from various data sources (mainly enwiki).YodaQA stands for “Yet anOther Deep Answering pipeline” andthe system is inspired by the DeepQA (IBM Watson) papers.It is built on top of the Apache UIMA.YodaQA主页4、OpenQA（Java开源）OpenQA is an open source question answering framework that unifies approaches fromseveral domain experts.The aim of OpenQA is to provide a common platform that can be used to promote advancesby easy integration and measurement of different approaches.OpenQA主页5、START（商业）START, the world’s first Web-based question answering system, has been on-lineand continuously operating since December, 1993.It has been developed by Boris Katz and his associates of the InfoLab Groupat the MIT Computer Science and Artificial Intelligence Laboratory.Unlike information retrieval systems (e.g., search engines),START aims to supply users with “just the right information”instead of merely providing a list of hits.Currently, the system can answer millions of English questions aboutplaces (e.g., cities, countries, lakes, coordinates, weather, maps, demographics,political and economic systems), movies (e.g., titles, actors, directors),people (e.g., birth dates, biographies), dictionary definitions, and much, much more.START主页6、IBM Watson（商业）Watson is built to mirror the same learning process that we have.Watson has been learning the language of professions and is trainedby experts to work across many different industries.IBM Watson主页7、Siri（商业）Siri /ˈsɪri/ is a part of Apple Inc.’s iOS which works asan intelligent personal assistant and knowledge navigator.The feature uses a natural language user interface toanswer questions, make recommendations, and perform actionsby delegating requests to a set of Web services.Siri主页8、Wolfram|Alpha（商业）Wolfram|Alpha introduces a fundamentally new way to get knowledge and answersnot by searching the web, but by doing dynamic computations based on a vast collectionof built-in data, algorithms, and methods.Wolfram|Alpha主页9、Evi（商业）Evi was founded in August 2005, originally under the name of True Knowledge, with the missionof powering a new kind of search experience where users can access the world’s knowledge simplyby asking for the information they need in a way that is completely natural.Evi主页10、微软小冰（商业）微软小冰是智能聊天机器人，基于微软搜16e4索引擎和大数据积累，所有数据全部来自于公开的互联网网页信息。微软小冰主页11、Magi Semantic Search（商业）Magi is a search engine that gives you answers instead of references.It’s designed to be General, Feasible and Useful.Magi Semantic Search主页","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"问答系统","slug":"问答系统","permalink":"http://ipcreator.me/tags/问答系统/"},{"name":"Java","slug":"Java","permalink":"http://ipcreator.me/tags/Java/"},{"name":"Watson","slug":"Watson","permalink":"http://ipcreator.me/tags/Watson/"}]},{"title":"Android-Green-Antivirus","date":"2017-02-12T01:02:06.000Z","path":"2017/02/12/zh-android-green-antivirus/","text":"作者：Lucky/lucky521 Android-Green-Antivirus客户端是安卓应用程序，提供用户交互、数据扫描和文件摘要上传；服务器端是Django服务，爬取、分析、管理海量文件信息。Server - DjangoIt was built by Python Django framework and sqlite3 database, with antivirus engine based on ClamAV.Client - Android AppIt scans the local files on the cellphone and leaves analysis things on the cloud.Prerequisitesjdk 1.6+Android sdk 2.3+Python 2.6/7djangoclamav 0.97pyclamav","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://ipcreator.me/tags/Android/"},{"name":"Django","slug":"Django","permalink":"http://ipcreator.me/tags/Django/"},{"name":"ClamAV","slug":"ClamAV","permalink":"http://ipcreator.me/tags/ClamAV/"}]},{"title":"2016年最精彩科学美图","date":"2017-02-11T12:24:06.000Z","path":"2017/02/11/beautiful-pics-of-scientific-discovery/","text":"这一年有啥留恋：看2016年最精彩科学美图 随着2016年即将接近尾声，美国新闻聚合网站BuzzFeed评选出2016年最精彩的科学美图。这些美图展示了今年被发现的科学奇迹，包括揭示了从微观到宇宙尺度等不同物体的形态，比如国际空间站、鲨鱼、变色龙等，下面就让我们带领大家欣赏这些令人震撼的图片。 这张照片获得2016年度英国生态学会摄影大赛的总冠军，图中是古巴翠蜂鸟。 沙丘鹤正从西伯利亚向墨西哥长途迁徙，正在内布拉斯加州躲避风暴。这是美国《国家地理》杂志年度最佳图片。 7月16日，在450多米高空拍摄的航拍图，可以看到下面大块的海冰、融化的池塘以及开阔的水域。 11月10日，南极拉森冰架（Larsen C ice shelf）上的大裂谷。 保存在琥珀中的9900万年前恐龙尾部羽毛。 10月3日，在国际空间站上拍摄利比亚西部的撒哈拉沙漠。 火星轨道侦测器拍摄到的火星山谷。 这是西门子资助的、由皇家摄影协会主办的国际科学图片摄影大奖获奖作品之一。从小型液态燃料露营炉中缓缓上升的热空气形成无形湍流。纹影摄影（Schlieren photography）让我们可以看到和记录被火焰加热的空气与周围环境中冷空气之间的折射率差异。 “好奇”号火星探测器自拍照。 10月30日，搭载3名宇航员的俄罗斯“联盟”号飞船在哈萨克斯坦着陆。 世界野生动物基金会12月份发布报告宣称，在东南亚大湄公河地区发现了新的蝾螈物种。 天文学家们发现的最新证据显示，这可能是有史以来发现的最极端的脉冲星或旋转的中子星。 这只毛虫遭到黄蜂袭击，背部寄生蛹也开始爆发，它的生命已经到了最后时刻。图中的液滴是血淋巴，也就是毛虫的血液。这张照片获得2016年度英国生态学会摄影大赛学生类作品大奖。 这是眼线化妆品中发现的微小塑料块，又被称为微球体。由于其体型过小，无法在污水处理过程中清除出去，可对海洋生命造成危害。这张照片来自一个摄影项目，主要研究微小塑料对环境的影响。 这些蚂蚁正在吃用糖着色的食物，摄入液体让它们的身体变成蓝色。 这是在喜马拉雅山海拔4400多米处拍摄的照片，展示云海上空的银河系。 风喉蜥蜴又被称为“草原战士”，它们是由高度领土意识的生物，会不遗余力地保护自己的领地。这张照片是夏季时在印度马哈拉施特拉邦拍摄的，当时正处于蜥蜴交配季节。 10月份，通过哈勃太空望远镜观察大的螃蟹星云。它是一团巨大的气体云，形成于2600年前的恒星爆炸，距离我们大约有1600光年远。 这是在泰国旅游胜地普吉岛上发现的飞龙科树蜥(Acanthosaura phuketensis)，它们看起来就像迷你飞龙。 这是格陵兰鲨，属于睡鲨的一种。这些体型巨大、行动缓慢的生物正在大西洋深处优雅的游动。最新研究发现，格陵兰鲨是寿命最长的脊椎动物，有的标本至少已经活了392岁。 这些小星团正围绕透镜状星系NGC 5308旋转。这里所谓的“小”只是相对来说，每个星团都包含着数十万颗恒星。 这是在显微镜下看到的潜水甲虫腿部末端，它大约有2毫米长，可在交配时帮助黏在雌性甲虫背上。 从国际空间站上观看闪电和地球城市灯光，前面则是2艘俄罗斯飞船。 这些黑鳍礁鲨正在塞舌尔群岛的低潮浅水中潜伏，等待涨潮。 这是巴哈马群岛北部被称为“老虎滩”的地方，这里以常见虎鲨闻名。 这是在澳大利亚内陆通过银河系与河外星系全天默奇森广域阵列(Galactic and Extragalactic All-sky Murchison Widefield Array）射频望远镜拍摄到的宇宙射频图像。 在坦桑尼亚谢伦盖蒂平原上，鲁氏粗鲁氏秃鹫（黑白兀鹫）与非洲白背秃鹫正啄食斑马的遗骸。","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"分享","slug":"分享","permalink":"http://ipcreator.me/tags/分享/"}]},{"title":"此生未完成","date":"2017-02-11T11:02:06.000Z","path":"2017/02/11/unfinished-life/","text":"于娟《此生未完成：一个母亲、妻子、女儿的生命日记》 我们要用多大的代价，才能认清活着的意义。 在生命的最后日子里，于娟完全放下了生死，放下了名利权情，赤裸裸的去反思和写作。所有的浮躁沉淀了，所有的伪装剥离了，所有的喧嚣远去了，所有的执着放下了。只有一个普通的女子，普通的女儿、妻子、母亲对生命最单纯的感悟。在这个故事里，很多读者看到的不是于娟，而是自己。 在生死临界点的时候，你会发现，任何的加班，给自己太多的压力，买房买车的需求，这些都是浮云。如果有时间好好陪陪你的孩子，把买车的钱给父母买双鞋子，不要拼命去换什么大房子 ，和爱的人在一起蜗居也温暖…… 不要认为后面还有更好的，因为现在拥有的就是最好的；不要认为还年轻可以晚些结婚，爱情是不等年龄的；不要因为距离太远而放弃，爱情是可以和你一起坐火车的；不要因为对方不富裕而放弃，只要不是无能的人，彼此鼓励可以让你们富足的；不要因为外人反对而放弃，幸福是靠自己内心来感受的。 人有个好的心态，才能享受人生。不奢望太多的东西，只要这一生中有自己的居所，有自己的小家，甜蜜而温馨，每天过着快乐的生活就够了。随缘的爱是最幸福的爱，无须计划，无须设计，一切都顺理成章，轻松，自然，流淌着最本真的爱，相爱的人儿自是充满着感动，心喜，激动。","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"感悟","slug":"感悟","permalink":"http://ipcreator.me/tags/感悟/"}]},{"title":"向死而生","date":"2017-02-11T11:02:06.000Z","path":"2017/02/11/credits- of- death /","text":"李开复《向死而生：我修的死亡学分》 脱去虚名与成就，你的人生还剩下什么? 7 个学分 健康无价； 一切事物都是有它的理由； 珍惜缘分，学会感恩和爱； 学会如何生活，活在当下； 经得住诱惑； 人人平等，善待每一个人； 我们的人生究竟是为什么？ 李开复演讲实录： 谢谢各位，非常感谢今天各位嘉宾的到来。让我有这个机会跟大家分享一下我生病的心路路程。平时我工作的时候，非常热爱我的工作，包括今天，我从来没有想到，要面临死亡，面临癌症，我心中想过的每一个思念都和我的工作丝毫无关。有一个很著名的护士看护了很多临终病人，大部分的临终病人最大的遗憾就是没有和自己的家人在一起。 我们每个人都要临死才会想到这样的事情吗？我相信今天的纪录片和我出的书，能阐述我个人向死而生的过程。向死而生本身的意思，就是人在世俗里面很容易陷入今天的现实世界里面。而面对死亡，我们反而容易得到顿悟，了解生命的意义，让死亡成为生命旅程中无形的好友，温和提醒我们，好好珍惜我们的生命，不是只渡过每一天的日子，也不是只是追求一个现实的名利目标。 学分1：健康无价 在我平时的生活中，我热爱美食，不爱睡眠，认为睡眠是浪费时间，每天起来回E-mail，给我员工证明我工业多努力。生病以后，才深深体会到，其实健康失去了，就什么都没有了，生命最重要，健康和生命是一样重要的。 如果我们要维护自己的健康和生命，很多人会认为说，如果你养生，就没有事业了，什么都不要了，过退休的生活，过慢日子吧。我领悟以后，和几位朋友交流以后，其实真的不是这样的。每一个人的健康，其实不是要放弃一切。我们的健康如果简单来说，其实就是我们的睡眠、压力、运动、饮食。如果这 4 点达到即可，对年轻人来说。你是可以努力工作的，一个礼拜拿三四个小时维护你的健康，我非常希望在这里告诉大家要爱惜自己的健康，不要等到有一天，像我这样几乎后悔，几乎来不及才知道学会要爱惜自己的身体。 学分2：一切的事物都是有它的理由 我们往往把发生在自己身体的事情，一定做错了才惩罚我身上。其实不见得如此，世界的玄妙我们只了解里面的千分之一，万分之一，也许每一件事情的发生都有它的理由，我们应该多思考当一件事发生以后，是不是有什么正面的启示或者正面的力量。发生一个灾难，是不是不要把它当成一个果，而是把它当成因 ，如果把它当成因，任何的灾难都是学习的机会。如果我们生病了，是让我们学会生活更健康，也许我们无助的时候，让我们接受无法改变的事情。也许我们面临死亡才能教会我们分辨什么才是人生最重要的事情。 学分3：珍惜缘分，学会感恩和爱 一直面对死亡的时候，对于家人对我无私的爱，我当年是多么冷漠。虽然我告诉朋友说，我一放假就陪我们的母亲，但是我们只有 4 周的假。陪母亲 5 天以后，我就认为我的任务完成了。一直到我自己面临死亡的时候，我才知道，我是多么冷漠，我是以多么敷衍的方式表达了人们口中的孝顺。 我觉得真正改变应该有三个层次。最基本的是别人对你好，你感觉到了这是感恩，再稍微好一点的是别人对你好你要回报他。第三个层次就是主动不要求回报付出关怀，这才是最高的境界。这是我发现的，不知道过去做的什么好事，如果有上辈子，上辈子做了好事，有这样的家庭，我的父母、姐姐、妻子、女儿都是不要求回报的。无论我怎么对待他们，无论我是因为事业把家庭从美国搬来了中国又搬回美国，再搬回中国，又迁回台湾，整个过程对他们是多么煎熬，我只想做好我的事业。 有一句话，我觉得很有意义，每一次的相遇都是久别重逢，能和亲人在一起，他们能这样对我们，这不是猿猴演变出来的人类，就因为被教导，孔子说的亲情，我觉得这样的缘份，真的是久别之后的重逢，我们应该珍惜人生中的缘份和爱护。 所以我生病以后我就决定说，我要改变我的方式，每一周不但要陪我的妈妈，还要陪我的姐姐。我到了台湾，花更多的时间和我爱人在一起。我女儿要考大学，我帮她做各种准备。后来有一天她弄了一个刺青，刺了一个 try，这就是我没有付出足够教育方式的现象。然后她学业上升了也被大学录取了，然后又把 try 变成了 stay gold，我认为我自己是发光的黄金。也许我对父母的爱可能很难直接给他们回报，但是至少对妻子女儿，过去的 17 个月，我做的一些事情，也学会如何感恩，如何爱，如何直接表达。 父亲节的时候，我发了一条微博，是我女儿亲我的照片，我鼓励更多的孩子亲他们的父亲。我看他们的留言，很多女孩子说这么大了，怎么好意思，父亲很威严。爱不是藏在心里的，是应该表达出来的，如果没有表达，以后没有机会的话会很后悔。 学分4：学会如何生活，活在当下 我的癌症是淋巴癌四期，我认为我的生命并不长了。当时我也想到，如果我的生命真的只有 100 天了，我会怎么样渡过这个时间？我的结论和看护临终病人的护士是非常相似的。我的结论是说，我要让我的亲人知道我如何爱他们，我和他们在一起渡过特别难忘的时光，无论是和妻子去我们蜜月的地方，或者和孩子去一个我们过去特别快乐的地方，怀念回忆过去的美好，去吃我们爱吃的东西，做我们爱做的事情，这才是活。我希望活的时候，能全心全意每一刻活着，不只是脑子不停想我的公司，想我的事情。开始看世界其实是充满了美好的东西的。 如果稍微偶尔慢一下，能活在当下，才能体验到这些美好，才能感觉自己没有白活。我活了 50 多岁，一直没有分清什么是桂花，什么是茉莉花等等，我就知道他们都有香味。有一次我到朋友家这是什么味？我说桂花，什么时候种的？他说种了很长时间了。慢下来的时候，才会感受世界的美好。这是美食，这是我们最爱的酒，最漂亮的衣服，留到哪一天才会穿。我鼓励你们，不要把所有事情都推到以后，别说将来，找机会，还有一天等特殊的日子，我希望我们都活在当下。我们今天为什么不能成为那个特殊的日子呢，让每一天都成为最特殊的一天。我觉得人生如果这样活下去，不仅仅是最后的一百天，而是每一天都这样活下去，一定会非常圆满，丰富。 学分5：经得住诱惑 第五个学分经得住诱惑。我们小的时候，我父亲跟我们说，不要爱钱，对财富来讲，越多越好，但是不要贪婪的想得到更多。中国有一个通病，特别爱美。我们看到这么多古时候的皇帝，各方面的慈善家，做的各种事情都让别人知道自己有好。我父亲留给我 10 个字，有容则乃大，无求则更高。人死留名，我们希望做好的事情是对的，希望留名没有任何的必要，除了孔子以外，有哪个人被大家都记住了。我相信我们每一位 50 年以后都没有被别人记下来。 当你特别纠结自己“名”的时候，或许刻意，或者不刻意，都会让自己追求名成为一种方式。比如说之前我告诉年轻人追求自己的梦想，最大化自己的影响力，做最好的自己。这个话没有错，如果把最大化影响力这个词发挥到极致，每天机械化衡量影响力有没有提升，有没有人听我的演讲，成为我的粉丝。当我人生过去生病前的几年，5-10 年，慢慢越来越越顺，越来越有更多人喜欢把我当成他们的导师，一方面出于善心的帮助年轻人，但是不可避免的，每天的追随希望有更大的影响力。 听起来是很灰色的地带，影响力是好的吗？要一点名没有关系，我和清云大师讨论这个事情的时候，他告诉我，其实人是禁不住诱惑的。你要影响力的目的就是让世界更好，不断做好事情，不断衡量，我和别人都做好事就够了，为什么算我卖了多少本书，有多少粉丝呢？这样的过程，让我发现，虽然我认为我一直追求的方向和建议并没有错，但是如果特别机械化的追求效率，衡量每一天的结果，会让我们变得更冷漠无情。所以我发现，虽然我走的道路是正确的，但是过度追求名声，让我走偏了。 学分6：人人平等，善待每一个人 当你追求每一件事情影响力最大化的时候，你就想认识更多聪明的人。见创业者只见最顶尖的，一个青年人找你签字，如果是普通人，你就不考虑，你会见聪明人，成功人，把自己的一圈都变成社会的顶尖人士。但是我发现，如果真的再继续这么做的话，其实丧失了非常重要的一点就是人人是平等的。当我得了癌症，发的第一条微博，癌症面前人人平等。但是我慢慢觉醒的时候，我发现任何事上，人人都是平等的。世界的奥妙，不允许我们渺小对人类的评估。我们凭什么说这个人是普通人，这个人不怎么样，这个企业不会成功，这个创业者不行。 既然我们没有权利，也没有能力做评估的话，既然人人都是平等的，只要时间允许，我会秉承这样的理念，让我花更多的时间在网上和一些包括所谓的普通网友交流，每一周见一些想要见我的人，哪怕我们从来不认识，哪怕他们并没有特别光辉的履历。我建议大家，不要吝啬给别人爱的关怀。因为你对任何人，优秀的人，普通的人，都是一样的。你对任何人的微笑，一个行为，都可能帮助别人，帮助生命。 学分7：我们的人生究竟是为什么？ 我觉得如果我们太狂妄的说，我们来到人生就是为了改变世界，我们懂得这么小，这么渺小，凭什么狂妄，我们世界改变了，是更好，还是更不好，每天做的每一件事都能评估出来吗？我认为我们不必强求把改变世界作为我们的要求。如果每天拼命改变世界，那是充满压力的。 我认为来到人间，我们有缘认识周围的人，好好体验人生，结交善缘，做事问心无愧，凭良心，做人真诚平等，让自己的每一天都能有学习，成长，其实那就足够了。如果世界上每一个人都这么做，世界就会变得更好。如果过去我的哲学更多的是因为人生只有一次，所以要分秒必争，征求效率做最好的自己。现在我更觉得说，其实生命里很多东西，并没有办法用科学的方法解释，并没有办法每天衡量，比如说人与人之间的缘份。从现在开始，我不再看世界上很多的缺陷，批评他们，我相信每一个平等的生命都是来到这里不断学习，不断成长。人只有有缺陷才能学习成长，我们没有权利过分的批评别人，我们需要做的是怎么让自己成为一个更好更完善的人。 既然每个人都在持续成长，对于那些曾经伤害我，打击我，或者未来打击我的人，我不但宽恕他们，而且感谢他们，因为他们可能点醒我很多的不足。我相信人生的生命是与大宇宙连在一起的，我们有责任提升自己。我们的生命随着心跳停止也没关系，我们的人生只有一次，死去离开世界，如果这一生是体验学习提升，我相信也会让世界更美好，整个世界的群体意识也会变得更正向。 我经过这七个教训，我认为我们珍贵的生命旅程，应该保持着初学者的心态，对世界有儿童一般的好奇心，好好体验人生，让每天的自己都比以前有进步有成长，不要想着改变他人，做事问心无愧，多感恩和爱你周围的人。对人真诚、平等，这样就足够了。如果世界上每个人都能如此，世界就会更美好，谢谢。","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"感悟","slug":"感悟","permalink":"http://ipcreator.me/tags/感悟/"}]},{"title":"人人都是工程师","date":"2017-02-11T11:02:06.000Z","path":"2017/02/11/everybody-can-be-engineer/","text":"李笑来《人人都是工程师》前言 在中国，对绝大多数人来说，English + Computer Skills = Freedom 程序设计也许是目前地球上最容易变现、最被高估、可事实上却实际上并不难以获得的技能。程序设计的学习难度被有意无意地过分高估了。 人们向来有把学不会的技能神秘化的倾向，也许是因为只有这样心里才舒服，觉得自己学不会正常一点。但，程序设计这个领域，实在是被过份高估了（其程度比第二语言习得领域还要高出许多许多），乃至于很多人只是因为被误导了才望而却步，根本不是做不了做不好的原因。这个领域里的每一项技能，都会让习得者有这样的慨叹，“这样简单的东西竟然这么有用！” 或者 “连这么简单的东西我都没学会的话，实在是太可惜了！” 在计算机这个领域的顶尖范围里，集聚着人类的精英，他们设计了一个又一个的方法论去优化自己的工作环境，优化自己的工作流程，优化自己的产品，没完没了地改善，没完没了地更迭…… 也就是说，在计算机这个领域里，有大量的概念与方法论都是走在最前沿的。学习程序设计，并不是肤浅地学一门编程语言，设计一些函数，更重要、更本质的是学习计算机科学家们用来改变世界的思考方式、行为模式。 这真是个神奇的时代。跟过去不一样了，现在很可能已经是“一门语言打天下”的时代了，学一门 javascript，就有可能什么都做了…… 这在哪怕仅仅是三五年前都是不可能的事情。不过，我们涉及的话题可能很多很多 —— 总而言之，前面有一条路通往“全栈工程师”的方向…… HTML, CSS, JAVASCRIPTPUG, LESS, COFFEESCRIPTMONGODB, RETHINKDBNODEJS, EXPRESSJSREACT, VUE, ANGULARRELUXELECTRONTDD…反正没有什么是不能学的…… 学习是一种生活方式，是少数人的生活方式生活方式决定了生活质量，这是最基本的逻辑。 既然学习是一种他们已经选择了的生活方式，所谓的“终生学习”只是必然的结果每天进步一点点地活着，没有最好，只有更好，不需要成功，只需要不断成长。 自学其实是一种社交活动 学习从来都不是单独孤立的行为，而是社交行为。 生活中，你遇到过这样的现象没有：“看见别人打针，自己先疼得受不了……” 这是因为我们的大脑中有一种神经元，叫做“镜像神经元”（Mirror Neuron），它会让我们“感同身受”，当我们看到另外一个人正在做什么的时候，镜像神经元会尽力给我们足够的刺激，让我们“体验”那个人的感受。以前人们不知道为什么喷嚏竟然会“传染”，现在科学家们很清楚了 —— 那就是镜像神经元在起作用。 镜像神经元的存在，使得我们有模仿能力、有通感能力、有同情心、有同理心…… 这也是为什么人类天然有社交需求的重要原因，因为我们的大脑皮层上都有很多的镜像神经元。 一切的学习起初都基于模仿，一切的模仿，都源自于看到真人的行为 —— 哪怕是在电影里看到，虽然其实只不过是影相而已，并非真人，但毕竟是真人的影相。 所以，无论学什么技能，都要找到用那种技能的人，这样我们的镜像神经元才可能更容易被激发，学习效果才会好。若是能找到热爱那项技能，乃至于一使用那项技能就很开心（最好的情绪之一）的人，那就更好了。激情这东西，是少数幸运儿才长期持有的东西，大多数人小时候挺多，过了十五六岁之后就开始有意无意磨灭了激情，且并不自知。 很多人误以为他们眼里的成功者靠的是“坚持”、靠的是“毅力”，这完全是自己的镜像神经元“尽力”的结果，是“调用自己过往经验去‘感同身受’的结果”…… 事实上呢？那些“成功者”其实并不在意成功，因为到死之前成长不应该也不可能结束，因为那是他们的生活方式，学习、进步、探索、迂回，甚至折腾、挫败和迷茫，都是他们生活中必不可少的内容，这是最初不自觉的选择，谈不上什么“坚持”，谈不上什么“毅力”…… 说实话，对他们来说，不让折腾才真痛苦呢，不学习才需要坚持和毅力呢！ 为什么要选择朋友的原因。人与人之间有很大的差异，最大的差异来自于性格养成，大多数人会沦为表现型人格，只有少数人才会在不断调整中保持、呵护、进一步培养“进取型”人格。他们自然而然地更为乐观，更有耐心，更有承受力，更有战斗力，更能生产与体验学习与进步的乐趣。与这样的人在一起，学习会更容易 —— 只因为镜像神经元会更容易地被正确激发。说清楚了，道理其实挺简单的。 刻意练习是必须自己完成的核心 重复才能练就技艺。刻意练习，必须自己完成。即便是在进取型人格占大多数的社交圈里，一切的改变也都来自于自己的刻意练习，用时间浇灌的践行，才能引发真正的改变与进步。 所谓的智商，其实是一个人最终积累出来的知识经验的总和 —— 若是这样理解的话，就不难理解为什么到最后人与人之间的聪明程度相差天壤。因为有一些人天天往前走啊，另外一些人早就不动了啊！所谓的刻意练习，说来也很简单，就是把那些现在做起来生疏的技能通过反复使用最终做到不假思索就可以做完且做好 —— 这与智商高低全无关系。 一切看起来复杂的技艺，其实都并不难，很多人最终学不会，其实只是练不成，就是说，他们并不是不理解那道理、那原理；可理解本身并无太大用处，因为真正需要做的是通过大量的重复与实践，把那道理、那原理转化为大脑皮层表面的沟回…… 缺少了刻意训练的环节，学什么都是白搭。 你若是去了健身房，并且还能持续频繁地去健身房锻炼，你的身材就是会变的，而且变化还会非常大，那可是一整年啊！事实上，三个月下来，总计一百小时左右，就会发生巨大的无法忽视的变化。对，仅仅一百小时，在绝大多数领域里，就足矣把绝大多数人甩在身后 —— 对一些人来说这个事实可能是解脱；对更多另人来说，这个事实其实非常残酷，因为仅仅一百个小时，他们就已经败下阵来，别说一辈子了，别说七年就是一辈子了，他们在生生世世中，第一百个小时之前就已经死去。 概念与方法论：最少必要知识 什么是“最少必要知识”呢？所谓“最少必要知识”，指的是为了能够实践某项技能，最起码要学会的那一点知识。 MAKE —— Minimal Actionable Knoweldge &amp; Experience。注意这里的一个词：Actionable，“可行动的/可执行的”。比如，开车的最少必要知识是什么呢？学会如何启动学会如何制动再加上一个字：慢 学习编程的最少必要知识是什么呢？ 你得习得几个程序员都应该有的起步方法论。 …… 然后呢？然后你就可以开始边学习，边实践，在学习中实践，在实践中学习更多，虽然有时掉进陷阱，有时误入歧途，但，请你放心，肯定不会死人的。是谓不断进步，是谓 “路漫漫其修远兮，吾将上下而求索”。 只使用 Google 不论你遇到什么困难，都可以去问 Google，这是目前地球上最大的“人工智能”项目。一切能问 Google 的，都不要去问人。 既然你准备当工程师，那么，在使用 Google 的时候，除了那些常用的符号之外，还需要常用以下几个关键字： tutorial example tricks cheatsheet cookbook awesome 在中国，你最好买一个 VPN 服务一切能节省时间的服务都值得购买，因为时间才是最宝贵、最稀缺，压根无法再生的资源，跟时间比，钱算个屁。 在国内，一个程序员的水平怎么样，基本只取决于一件事儿：英语水平 那些在国内学英语专业的人本科毕业去当老师或者靠研究生，真不如脱产学一年计算机呢，拿着这个优势，一下子就干掉国内 90% 的所谓程序员，年薪 60 万人民币，其实指日可待…… 尤其是那些英语系的女生，一脚踏进码农的世界，瞬间就是女神中的女神。 提高英语的最直接、最有效方式，就是从此在某个领域坚决只使用英语 —— 平时，一般人还真的很难有这个环境呢！现在机会来了，你想学习，你想学习计算机，你想成为一个工程师，你就要从今天开始在计算机领域里，只读英文文档。 触类旁通地想想吧，如果不把你的中文使用能力锁起来，那么在这个领域里，你的英文使用能力就一定不能发展起来 —— 就犹如上面那个小女孩的左臂没有被绑起来一样，直接导致右臂永远没有办法恢复 —— 因为大脑会走捷径，于是那一部分功能永远不可能被大脑的另外一部分学会。所以啊，还是那句话：“都已经给你说清楚了，你自己选。” 本来人人都是工程师，只不过很多人明里暗里自己放弃了而已。 我们每天都要给自己洗脑。可这并不是我发明的习惯啊！孔老夫子说，“吾日三省吾身”，你看看他老人家个人卫生习惯多好，不仅洗，还要天天洗，而且还是每天要给自己洗脑至少三次…… 学习其实是一种生活方式，学习本身就是最好的洗脑方式。只要我投入时间精力，长期来看，没有什么是我学不会的。我学会的东西越多，我再学新的东西就只能越来越快。学习不是目的，用起来才是真的，因为价值只能通过创造去实现。我知道我现在看起来很笨拙，但刚开始谁都是这样的，实践多了，就自然了，就自然地好起来了。在学习这件事儿上，他们不理解我是正常的，这方面我也不需要理解，因为我是一个独立的人。我不应该与他们争辩，因为我不想伤害他们；我也不应该被他们影响，因为我不想伤害自己。刻意练习永远是必要的，虽然它通常并不舒适，但它的复利效应确实巨大的。哪怕是为了下一代，我也要通过现在的努力成为学习专家，这样才有资格与我的孩子共同成长……我的路还很长，我要健康，我要干净，尤其是我的脑子更要干净。 所谓的原则，就是一定要恪守的形式准则，如果不能恪守，就不能称之为原则。做个有原则的人，是很重要的原则。","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"感悟","slug":"感悟","permalink":"http://ipcreator.me/tags/感悟/"}]},{"title":"理财理念","date":"2017-02-11T08:50:06.000Z","path":"2017/02/11/financial-philosophy./","text":"原文作者：李笑来 摘自《新生————七年一辈子》 越早越好 从今天开始存钱 躺着赚钱 自由意志 生活目标 注重学识 节省与否 被动支出 认识周期 性格养成 别做“险盲” 越早开始越好的事情没几个，理财排在第一位对大多数人来说，理财的困难与矛盾来自这样一个窘境：很难很早开始，等开始的时候已经太晚。 所谓理财，这个定义比较合理、准确：如何有效管理现金流—— 这其实与钱多钱少关系不大。 研究者发现，贫穷与自制力差有很大的正相关。这也很容易解释：贫穷意味着诱惑显得更多、更大、更明显。也就是说，即便在自制力实际上差不多的情况下，贫穷的个体与富有的个体相比，贫穷的个体也会表现得更差。年轻人相对是穷的，于是，相对来看需要更多的自制力才能抵制诱惑。这其中的重要因素是：不同年龄段的人对时间的感受不同。 为什么今天的人更应该重视理财呢？人们的平均寿命变得更长了。人们可获得收入的工作时间也随之变长了。 有更多的钱需要管理，有更长的时间去管理钱，而最为重要的是 —— 哪怕起点稍微低一点也无所谓了。 理财最难的地方有两个：对自我的把控对风险的把控这两个都是可习得的，且习得之后不可逆的技能。更为重要的是，这两个都是必须通过反复实践才能习得的技能。 转移注意力是抵御诱惑的一种常用的有效手段，这其实也是后来理财成功的人常用的手段。他们会尝试着骗自己，把那些定期存款或者股票投资当作“已经丢了”，尽量不去想它，不去看它。这跟聪明与否其实没有什么关系。有时候，骗骗自己也挺好的，不是吗？ 理财上的风险意识，跟遗传没什么关系，跟智商关系也不大，它是必须通过自己的实践、通过自己的失败、通过自己的教训、通过自己的总结才能获得的东西—哪怕在书上看过、听别人说过也没用。理财这件事肯定是越早开始越好。年轻的时候理财虽然难，但即便发生风险，损失也不会太多—因为本来就没有太多。等可管理的财富多了才开始学习，一旦损失，就肯定惨重得多。在这种情况下，尤其可怕的是—剩下的时间不多了！ 自控与自制是可以习得的，并且，一旦习得就不会失去，这才是关键。而反过来，开始学习理财，可能也是改善自制力、自控力的方法，不是吗？ 理财越早开始越好，这已经说过了。那如何开始呢？从今天开始存钱。“我得存钱，我才不想跟那些笨蛋一样呢……”因为没有引发负面情绪而更容易被大脑采纳的建议 一个人的自控能力是总量一定的，某些方面的高度自控，会导致在其他方面的失控。该花就要花，有的时候就要活在当下人的年纪越大，赚到的钱对生活质量的改善越小，这是事实。年轻的时候，确实应该适当地享受人生，甚至应该有意培养一些高质量的生活习惯。 爱面子其实是绝大多数人存不下钱的根本原因。年轻人更爱面子，为什么呢？说穿了，就是不成熟呗 —— 过分地、没必要地在意他人的看法。从商业模式上，校园分期是很成功的；从风险投资的角度，那几个做校园分期的创始人也是非常优秀的，优秀到令人眼红。但从另外一个角度看，那些肯支付年化 30% 甚至 50% 的利息购买 iPhone 的人，也挺吓人的…… 真的合适吗？分期没还完的时候，新一代 iPhone 又出来了…… 如何摆脱呢？我有经验 —— 海量阅读心理学书籍。尼采认为“一切都是主观的”，其实也有一点点道理，因为现代心理学告诉我们，我们都是受自己的主观意识所影响的，或轻或重，只不过有些人可以通过对心理学常识的理解去调整自己。 还有一个办法非常有效：给自己培养一个不那么费钱的兴趣爱好。大多数人出去花钱，根本上来看就是“闲的” —— 女性读者该笑出声了，因为她们自己最清楚。在我看来，读书就是一个超级省钱的兴趣爱好，可竟然有很多人认为“书太贵了”！这也是没办法的事，因为“连希望对一些人而言都是极其危险的”。再如，弹琴也是一个花钱比较少的兴趣爱好，吉他比钢琴花钱更少。有个兴趣爱好的好处是，闲暇时间有所寄托 —— 没工夫乱花钱，这不挺好的吗？ 从另外一个角度，理财无非就是“开源节流”。相对来看，“节流”固然重要，“开源”才是正途。对年轻人来说，努力提高自己未来的营收能力才是当务之急。微博、微信朋友圈固然得看，但更为重要的是要花更多时间去系统地研读正式书籍，多花时间去打磨自己的劳动技能。不要只顾着升级手机系统，也要常常升级自己的大脑，选择更好、更强的思维模式，进而有能力作出不同的选择。 最后，死活存不下钱的人，某种意义上都有共同的特征 —— 常常“一厢情愿”。他们一开始是“心里希望”，后来是“认定”一切都会自动变好，甚至进一步成功地欺骗自己：“这才是正能量”……骨子里，这是拒绝成长，拒绝承担责任，乃至心理学上还有个专门的词 —— 彼得潘综合症1。 现实是这样的：这个世界和这个社会整体上来看是会越来越好的，可每个个体的状况却不一定。很多人越来越糟，没有人会自动变好，只有行动才会带来变化，期望本身在没有行动支持的情况下只能变成自我欺骗。 成年之后，生活的一切几乎都是选择的结果。然后，给自己设置一个机制，使自己就是不能动用存起来的钱。这时，欺骗自己其实是有用的 —— 还记得那些 4 岁的孩子是怎么学会通过骗自己忍住不吃棉花糖的吗？就当那些钱丢了。丢了的钱，不是用来“应急”的，丢了就是丢了！“丢了”的意思是，没了，那些钱彻底没了！ 如何制造这种效果呢？这个灵感来自《本能：为什么我们管不住自己？》的作者。你可以这么干：到外地办一张储蓄卡，记下卡号之后把卡扔掉；以后每个月转一定金额的钱到那张卡上。其实金额大小并不重要，是收入的 20% 还是 5% 也不是很重要，真正重要的是 —— 给自己一个机会，在 5 年之后体会一下突然可以动用一笔闲钱的机会。如果你今年 25 岁，等待相当于自己已有生命的 1/5 的时段是很惊人的成就，这段经历在未来很可能会“折现”成惊人的毅力（Grit） —— 另外一个提高收入的重要能力。而且，来自经验的毅力更可靠 —— 5 年后你可就赚大了。 给自己存出一个机会，这就试试吧。 作为这个时代的年轻人，要坚定地理解两个事实： 普遍来看，普通人的赚钱能力在越来越快地提高； 普遍来看，普通人在生活必需上的开销所占比例正在缩小。这两条都笃信且实践，才能做到“别把自己的青春过得太穷”。 收入其实分为两种： 主动收入 被动收入 所谓主动收入，就是你必须干点什么才能获得点什么的那种收入；而被动收入则相反，就是那种你不必干什么但竟然可以获得的收入。被动收入的最常见例子是利息。利息是需要本金才能获得的，没有本金怎么办？更多的人，不仅没有“睡后收入”，还有很多“睡后支出” —— 分期消费的负担其实挺重的。 不管你处在什么年龄，从现在开始刻意寻找那种可以一次性付出却能够长期获得收入的事情去做。这种事情不像看上去那么难，甚至有越来越简单的趋势。比如，过去只有靠写书被正式出版才能拿到版税，现在很多人写写微信公众号文章就可能获得读者“打赏”，收入甚至比写书高一点，这就是趋势。 拼命锻炼自己的创作技能。可以是任何领域的创作，但必须是可以获得收入的创作。慨叹一句：所谓的创作，从某个角度上来看简直就是“无中生有” —— 一种成本长期趋近于零，收入长期趋近于无限的活动。 “未来是不可知的（unknown）”和“未来是不确定的（uncertain/random）”之间有着看起来细微但实际上意义重大的差异。 未来是不可知的（The Future is unkownable），意味着我们对未来毫无办法，正如我们对过去无可奈何一样。2未来是不确定的（The Future is uncertain/random），意味着我们对未来有一定的概率可以成功预测。 换句话讲，当我们抛出一个硬币，在它落稳之前，我们确实不知道它究竟是哪一面朝上，但我们确实知道任何一面朝上的概率都是 1/2 —— 这是巨大的差异。 科学的敌人并不一定是宗教，科学的敌人一定是那些不愿意改变自己既定人生观、价值观的人。 概率论就是风险控制的基础工具。因为绝大多数人真的不认为科学与自己的生活有太大的关系。学识使人坚毅。金融专业毕业的人通常会想办法全款买房买车，这不仅仅是因为他们可能赚的比较多，更因为他们对利率和理财的理解使他们无法作出分期消费的决定。在今天这个时代，求知就是求富。因为知识变现不仅越来越容易，也越来越快，越来越多。重复的、枯燥的工作应该自动化完成。 这世界发生了很多变化。其中之一就是，越来越多的人靠着一点点的小发明的商业化赚到了越来越多的钱。这就是时代的不同。所谓“屌丝逆袭”的故事只有到了现代才开始批量出现，就是因为智力变现、知识变现可能了、容易了。 在今天这个时代，我们可能并不需要打败谁才能过得更好，起码可以过得足够好。细想想，很多人其实是被自己打败的。他们普遍的特点是一样的：在虽然很难但明明可以选择的情况下，误以为自己完全没有选择，于是只能走进死胡同。放弃了选择，就是被打败了。 在一个普遍认为人们其实没有选择的世界里： 用以学识支持的坚毅认定其实选择是存在的，并且是可追求的，是有很大相对优势的—— 就是这样。 什么叫高品质生活？高品质生活与金钱肯定有着一定的联系自欺欺人不仅无补，甚至有害，尤其是对自己的大脑 —— 人要珍爱自己的大脑。被动收入略高于支付足够高品质的生活必需支出所需要的金额。 对成年人来说，高品质生活从停止自欺欺人开始。比如， “金钱不一定带来高品质生活”，以及它的各种变体：有钱不一定幸福。（但没钱更不容易幸福。）那么拼有什么用？不还是得了乳腺癌？（不拼的人也有很多得了乳腺癌。）我很穷，但我有骨气！（说得好像富人没有骨气似的。） 即便是今天，求知的成本依然相当高。全球范围内连年上涨的大学学费就是明证 —— 真的不是所有人都有钱完成高等教育的，不是吗？正因为富有，他们的勤奋才更容易达成目标，或者反过来，当他们的勤奋没有直接、快速的回报之时，他们也更不容易着急，而是显得更有耐心 —— 时间久了，耐心就真的有了。 事实上，致富失败的人更容易放弃勤奋，而持续勤奋的人最终不可能太穷。很努力依然很穷的人，其实是选择出了问题，而不应该怪罪勤奋本身。 是否能拥有高品质生活与一个人的审美能力有着至关重要的联系。所谓审美，真的不只是在选美大赛中判断哪个姑娘最漂亮而已。审美实际上是一切生活选择的基础。什么是美？审美教育不够普及，就算有也常常失败的重要原因在于 —— 人们误以为“美”与“不美”是一种主观判断，可事实上，美是一种客观存在。所谓的“主观”，实际上指的是对美的感受有多准确。达·芬奇遇到帕西奥利之后，因为帕西奥利教给了他足够的数学知识，他专门为帕西奥利的书《神圣比例论》画了插图。在此之前，达·芬奇其实一直是凭直觉创造美，但被教育之后，美的创作就有了理论依据和指导，这就是黄金分割率的应用。 对美的认知是可以培养的。对美的认知，最基础的来自“五感”，即视觉、听觉、嗅觉、味觉和触觉。即便是小孩子，也有一些天然的审美意识：有些人的相貌是美的，有些风景是美的，有些音乐是美的，有些食物是美的，有些材料是美的有审美意识，有审美能力，有为自己创造美的意愿和动手能力 —— 这是长期培养之后习得的结果。审美认知、审美能力，大多数情况下真的与金钱无关，因为更多更重要的审美体系，需要的不只是某一个器官的感受，而是系统思考的能力。 比如，除了美食、美景、美人之外，还有很多事物都是美的。 有些语言文字很美有些科学证明很美 进而还有更多抽象的美。 简洁很美效率很美创新很美 教育的意义就是让我们拥有更高级、知觉更丰富的器官。科学教育可以让一个人“打开眼睛”，看到不一样的却更真实的世界；音乐训练可以使我们分辨、创造更美的曲调……于是，长期的教育和自我教育会形成个体之间审美能力的巨大差异。最终，审美意识会触及且影响一个人价值观的方方面面。 审美意识的开化和审美能力的积累，自始至终都在影响人们的理财过程。金钱这个东西对于审美来说是“后相关”。什么叫“后相关”呢？这是我自己杜撰的一个词。金钱本身通常对开启审美意识、提高审美能力没什么作用，不过，在有了良好的审美意识、良好的审美能力之后，金钱可以发挥的作用很大，这就是金钱对审美的“后相关”作用。 高品质生活不一定要等到未来，也不一定要有钱才可以拥有。但未来因为现在开始理财成功的你，一定会有更高品质的生活。千万不要胡乱从小刻意灌输理财观念，尤其是大多数父母的观念还是错的。要从更本质的地方开始：开启孩子的审美意识，刻意培养他们的审美能力。 理财也好、投资也罢，要抛弃勇气，注重学识。 人们对勇气、勇敢的理解常常过于肤浅，从未认真审视，甚至干脆忽视。勇气、勇敢背后的支撑究竟是什么？比如，小孩子打架，双方对峙，更多是靠先天条件 —— 身强力壮的更容易“勇敢”，体质弱小的更容易“怯懦”。细想想，这跟勇气的关联并非100% —— 甚至没有勇气什么事，只与体质的强弱有关。 俗话说，“狭路相逢，勇者胜”。这也确实是一种实际存在的情况。在双方势均力敌的情况下，竟然有一方是更有勇气的，最终勇者胜出了。可问题在于，胜出的一方为什么更有勇气呢？更可能的解释是：其中一方想明白了 —— 大家都害怕，你们害怕，我们也害怕，只不过，我不让你们看出来我在害怕，那你们就更害怕了，于是我就有相对优势了。这样的时候，所谓的勇气，已经不再是抽象的特质，而是一种相对精巧的计算（或算计）了。 苏轼在《留侯论》里就说过：“古之所谓豪杰之士，必有过人之节。人情有所不能忍者，匹夫见辱，拔剑而起，挺身而斗，此不足为勇也。天下有大勇者，卒然临之而不惊，无故加之而不怒。此其所挟持者甚大，而其志甚远也。”意思是说，“蛮勇”其实并不算“勇”，只不过是个“然并卵”的东西。苏轼所说的“大勇”是什么呢？换句话讲，其实是脑壮，而不是肉粗。 所谓的勇敢、勇气，尤其是脱离先天条件支撑的勇敢、勇气，其实也是、更是学识与思考的表现。在理财与投资的起点就要明白：成功与所谓的勇气无关，靠的是足够的衡量风险与收益的能力 —— 这才是成功的智慧。智慧的特征是，可习得，可积累。 风险永远无所不在，真正的问题在于你如何识别它们，如何衡量它们，当有收益可能的时候如何计算风险是否可以接受，以及自己是否有足够的实力承受。这些都是可以通过学习获得并进一步提高的思考能力。应对风险的能力是必须花时间学习的，只因为它确实可以习得，但不容易习得。大多数人在生活的方方面面都缺乏风险意识。比如，刚学会开车的人，上路之后就常常后怕 —— 看着不怕车辆的行人才反应过来，原来过去那么多年里，自己其实很多次都是在“九死一生”的状态下过马路的。再如，我个人也是在自己开车之后才明白晚上穿着深色的衣服沿着马路走其实是非常危险的。对没有开过车的人来说，有一些风险“不存在” —— 他们未曾意识到那些很大的风险竟然存在。同样的道理，未曾做过理财和投资的人，往往不知道很多风险的存在，原因仅仅是他们从来没见过、从来没想过。 仅仅能够感知风险的存在，清楚地知道风险有多大，大到什么程度，都是需要大量观察、大量思考才能真正习得的能力。我问过很多专家，他们其实都一样，除了反复说“注意风险”之外拿不出更好的建议。不仅仅是理财，生活中的任何方面其实都一样：安全，要靠避险，而不是冒险；要靠小心，而不是勇气。 从本质上来看，大多数人想着去赚钱，最终却“被赚”了的本质原因在于他们根本就没学习过、没研究过他们所参与的游戏究竟是怎么回事。他们甚至连赌徒都算不上，因为赌徒起码知道应该怎样结合胜率计算收益、怎样决定下注的筹码数量、怎样计算多次下注后的概率变化……所以，实际观察一下就能知道，很多人进了股市，连赌都没有赌，钱就没了。他们只不过是人肉印钞机，为股市“定向增发”。钱没了，他们都不知道是怎么没的，甚至都不知道应该怪谁、该怪什么，只能怨自己运气不好。他们有的其实不是勇气，也不是勇敢，只不过是天然的贪婪而已。 “股市有风险，投资需谨慎”这种建议天天在耳边飘荡，怎么那么多人就是听不进去呢？ 第一个解释就是：无知无畏。 第二个解释是：安全保护会使人放松警惕。正如驾驶员系上安全带之后会不由自主地、下意识放心地提高车速一样，安全保护常常刺激人们放松安全意识。所以，对安全带的争议在于：安全带也许保护了驾车的司机，却可能给路上的其他人、其他车带来更大的危险。 风险与收益一直共存，并且，风险的大小是可以通过对它的了解和学习而被控制的 —— 这是人类进步的基础，也是人类进步的表现。但显然，它不会自动消失，或者自动配合人们的行动。只有通过学习，才能与它共舞。 科技的进步正在某个层面抹平贫富差异所造成的生活质量差异。有了 Uber 之后，人们几乎可以随时轮换着坐各种品牌的豪车，还不需要支付过高的费用 —— 弄不好补贴完发现比搭乘普通的出租车还便宜。 【买书的钱不能省】：在追求学识的过程中，免费常常是陷阱。因为，我们的时间并不是免费的，同时会随着我们自己的学识变得越来越贵。舍不得花钱买好书是最“屌丝”的行为，也是最高效地制造“屌丝”的方式。不仅不能在好书上省钱，还要为了淘到真正的好书，付出“总是得前后买过很多烂书才能提高甄别能力”的代价。再往大里说，一切有助于帮助自己成长的开销都不能省，尤其对年轻人来说更是如此 —— 你的前途取决于此。 【买工具的钱不能省】一切工具，其发明与使用的目的都是一样的 —— 提高效率。花一点钱提高效率，赚大了；为了省一点钱，却要忍受长期的低效率甚至无效率 —— 只有“屌丝”才会觉得没问题。 【事关安全的钱不能省】家里的电源插座之类的东西，绝对不能图便宜，因为这涉及安全。在这样的事情上，没有“万一”，因为天天都在用，所以最终结果是“一定会出事”。买车的时候也一样，要不要加后视影像，要不要配置全景雷达 —— 这些其实完全不是应该省钱的地方，因为它涉及安全。在这样的地方省钱，将来一定会付出更高的代价。 【事关终极体验的钱不能省】终极体验的特点是，当前的享受不可能用未来的享受替代。 【知识产权的钱不能省】我总觉得程序员用盗版软件是个特别“屌丝”的行为 —— 你自己指望用技能、产品赚钱，却坚决不让别人用技能、产品赚钱，这种逻辑让人无语。对知识产权的尊重，对知识产权的保护，是让那些有能力创作的人获得“被动收入”、获得财务自由的基础。没有知识产权保护，有能力创作的人就只能“无产”了 —— 还有什么是比这更阴暗的未来展望呢？ 节省肯定没错，但节省肯定不是创造未来的主要方式。铺张浪费肯定不对，但在一些地方对自己好一点，对今天的年轻人来说，也肯定没错。 被动支出 【通货膨胀是最可怕的被动支出】2015 年 10 月，央行释放 7 万亿元，导致人民币瞬间贬值 2%，也就是说，你兜里揣着的 100 元钱，现在只相当于之前的 98 元了，有 2 元钱已经“不翼而飞”，只不过那张纸币上印着的数字不会自动改变，所以，看起来还是 100 元。越有钱的人，“恢复能力”越强，就好像受了同样的伤，身体强壮的人相对更容易复原一样。假设货币贬值了 2%，即购买力大约下降了 2%。一个月收入 5,000 元的人，如果他的月花销本来就是 5,000 元（也就是说，本来每月刚刚好），那么他现在收入依然是 5,000 元，可每个月的花销却需要大约 5,102 元（5,000 ÷ 0.98） —— 还得去借点钱才够用。而一个月收入 15,000 元的人，假定他的月花销也是 5,000 元，那么，虽然他现在需要用 5,102 元才能满足生活需求，但他依然有 9,898 元可以去储蓄，如果是定存的话，有可能获得 3% 甚至更高的利息，于是没多久，那损失的 2% 就补回来了。如果一个人有几百万元的存款，那么他通常可以在银行买到利率更高的理财产品，比如信托之类，利率可能高达 12% ~ 15% —— 虽然也有一定的风险 —— 于是，他们的恢复能力更强。 【利息对借款者来说也是很可怕的被动支出】借来的钱，之所以要支付利息，是因为在很多情况下钱本身就是一种生产资料，它也可以用来购买其他生产资料，而生产出来的商品是可以以更高的价格卖掉的 —— 能赚到钱。所以，利息这东西，本来就是天经地义的。只是古今中外，在很多文化里，很多人总是下意识地觉得赚取利息的人是不劳而获的，但到了不得已的时候又不惜去借很高利息的贷款 —— 错上加错。 【生活必需品开支其实是一种被动支出】尽量只为生产借钱，尽量不要为消费借钱。也就是说，如果你借来钱，用它可以赚到钱，赚到的钱比利息多，你就是有利润的，这本质上就是生产。如果借钱仅仅是为了消费，钱花出去了，获得的只是享受（即便有些确实是“终极体验”），那就有点亏了，甚至亏大了 —— 别人赚了 1 分钱，你花掉 1 分钱，这加起来就差了 2 分钱呢。 用借来的钱去支付教育费用，这也是生产，因为这相当于提高了自己将来获得更高收入的可能，算是一种投资，其实是很划算的投资。用借来的钱去买房子，虽然复杂一点，也算是投资，但还要看整个经济周期的状况。可用借来的钱去买部 iPhone，然后支付 30% 以上的利息，就不太划算了，因为有更便宜的替代方案存在，比如用坚果手机之类，代价就是 —— 没那么酷呗。但是，如果买来 iPhone，不仅用了，还把它作为开发机、测试机，那就不一样了！ 最后看第三项生活必需品支出。对于生活必需品的支出，对策如果是不吃不喝，显然不怎么明智。在今天这个世界里，竟然要连上网费都省下，那跟原始人有什么区别？过分约束自己，其实并不是一个优势策略，尤其是考虑到终极体验的不可替代性的时候。 一般规律倒也简单：收益越高，风险越大（反过来不一定成立） —— 虽然同时也有很多收益并不高的风险也很大。 别指望从别人那里找到答案，只能靠自己去判断。 人一辈子基本上要靠3种力量： 体力智力财力 即便是在远古时代，体力超群或者智力超群，直接的结果通常就是财力的增加，而财力的增加常常会进一步导致体力和智力的改善。 有两个自然规律在人类史上从来都没有变过： 只有第一被重赏财力积累无上限 自然规律就是“老大通吃”，发展到今天，这个趋势越来越夸张。创投圈里流行一个朴素的认知，其是古老的自然规律：这个世界，只有老大，没有老二。一个人的体力是有上限的，再强壮也有衰老的必然；一个人的智力是有上限的，再好学、再勤奋，时间总是有限的。但是，财力却有着优于体力和智力的属性。 可无限积累可直接继承 后天获得的体力可能遗传，也可能不遗传，也就是说，有可能，但不一定。后天提高的智力，很难遗传，更多的是通过对下一代的教育引导大致达到“遗传”的效果。可财力却不一样，除了可积累、无上限之外，还可以直接让子女继承，若是他们拥有足够的体力和智力，就可以继续积累，且站在更高的起点上继续积累。 从历史上看，只有一种靠谱的途径 —— 长期积累。“一夜暴富”其实很常见，但由于不是通过积累获得的，所谓“暴发户”在财富方面的智力（所谓“财商”）跟不上，于是无论有多少财富都可能很快败光。这种例子非常多，学者们曾经跟踪观察那些中了彩票的人，几乎有一个算一个都最终回到穷困潦倒的状态。 长期积累本来就是很少有人能做到的事情。积累就是难得的习惯，且要长期，这就难上加难。即便有人做到，历史上也有观察 —— 富不过三代，穷不过五服。为什么呢？只因为积累教育实在太难了！但这确实是唯一靠谱的途径。 所以，细想想就会发现，只有养成积累的习惯 —— 无论是在哪方面 —— 才是抵消被动支出的最有效手段。 认识周期周期是理财投资活动中最为关键的考量因素，是开始实践之前必须学习、研究、掌握、遵循的理念和现实，可惜总是被忽略。周期也是市场上大多数理财书籍中干脆不提，或者放在最后一笔带过，实际上却是最为基础、最为关键的知识点。不深入了解周期，就无法进行有效的判断，整个理财投资活动基本上就等于是没有判断的行为，甚至比不过两个人抛硬币赌博。而在这样的时候，墨菲定律一定会显灵：如果一件事可能变坏，那么它一定会变坏。 真正的趋势常常需要在多个周期（至少2个）之后才能真实展现。如果我们探究的是真正的趋势，就会发现，上升与下降只不过是一个真理的表象 —— 现实的经济里没有直线，只有波（动）。 在一个很长的波段中，从任何一个点前后望，看起来都像自己身处在一条直线而不是曲线上，就好像我们站在地球上却很难感知我们自己其实是站在球面上而不是平面上一样。 一个上升与一个下降构成一个周期。2 个或多个周期之后，如果我们发现曲线就好像是数学课本里的 sin 曲线的话，那么所谓的“趋势”实际上就是一条水平线而已，而我们常常说的且在寻找的所谓“趋势”应该是个要么上升、要么下降的线条才对，因为“水平”等于“无变化”，无变化就无趋势。 这就解释了为什么有些人认定的所谓的趋势在另外一些人眼里根本谈不上是趋势，因为后者重视的是1个以上的周期之后所显现的真正的趋势。这也解释了为什么“跟涨杀跌”的人必然吃亏，因为他们所看到的并不是实际的趋势，他们看到的和把握的只不过是幻象而已。 关注周期，以及多个周期背后显现出来的真正趋势，会给你一个全新且更为可靠的世界和视界。 进而，几乎一切事物，无论是抽象的还是具体的，都有它自己的周期。而他们的周期不大可能一致。于是，几乎一切的机会和陷阱都隐藏在周期与周期之间的差异上。据说GDP和股市的周期轮换如下图所示。 还有个“库伯勒 —— 罗丝改变曲线”（Kübler-Ross change curve）特别好玩，它看起来是这样的。 更进一步，人们发现，任何新生事物的发展过程（Transition Curve）也是差不多的。 反思这样的现象了：每次巨大技术变革出现的时候，都有一批投资者死在路上。为什么呢？因为他们看到了所谓的“趋势”，却忘记了或者不知道真正的趋势需要 1 个以上的周期才会真正显现。回顾一下历史吧，互联网、NetPC（后来所谓的“云”）等都是如此。再如，我相对比较了解的比特币，现在在这样一个阶段：比特币正在引发很多人的愤怒。 对周期的深入理解，甚至可能影响一个人的性格。在我看来，所谓的不屈不挠，所谓的坚持不懈，更多的时候，只不过是因为对自己身处某个周期的某个位置非常了解，所以才更容易作出的决定。 事实上，如果你需要理财顾问或者保险顾问1，你会发现，真正专业的理财师、保险师最终都是从你的情况出发，即从你身处的生命周期与经济周期的具体节点出发，制定你的理财计划。 繁殖能力强是王道。拿到理财与投资里说，就是存的越多越好。 太简单了吧？简单到好像没必要教育或学习似的。其实这也是传递重要知识时所面临的困惑与困难 —— 越是重要的东西越是看起来并不相关。比如，品质生活其实与审美能力更正相关，与钱的关系并不大，但是钱却看起来是最重要的、也被认为是最重要的因素。再如，当年我教英语的时候也发现，背单词的方法、找外教之类的学习环境其实都没有另外一个简单的字重要 —— 用。可越是重要的东西，说出来之后越是简单到令人不由自主地轻视。还有，性高潮其实与大脑关系最大。 性格养成一个人的性格是由他的价值观决定的。而所谓的价值观，其实就是一个人分辨好坏主次的思维体系。审美能力让我们分辨美丑，价值观让我们分辨好坏。于是，正如审美能力能够影响生活品质一样，价值观决定了一个人的性格。每个人都有自己的价值观，于是，每个人都有自己的一套体系去判别好坏，进而，好坏的判别，影响每一次的选择。于是，价值观影响选择，选择影响行动，行动构成命运。所以，“一个人的命运是由他的性格决定的”，这话我没办法不同意。 虽然环境对于性格养成的影响很大，但实际上一个人的性格可以脱离环境的影响，或者至少部分脱离。不做没用的事，这也是一种价值观导致的选择 我常常自我审视。现在回头看，对我性格影响最大的一个时期，是我从 2007 年开始写《把时间当作朋友》的两年时间。从我的个人体验来说，那个长达两年的写作过程 ——期间还有一次书稿尽失，只好凭记忆重新来过 —— 是我对自己的价值观的一次细心梳理。虽然很多价值观在那之前就定型了，但那一次的梳理却将更多的细节确定下来 —— 直接的结果就是，对自己可能做出的选择毫无疑问、毫不犹豫。 有什么值得生气的呢？都是想不开造成的。平时人们所说的“想不开”，其实无非就是“价值观混乱”。是什么影响价值观呢？我觉得与影响审美能力的因素是一样的：还是学识。 这个时代的好处是，学识相对容易获得，而且越来越容易获得。读书其实越来越便宜，早已不像过去，只有贵族才有资格读书；正规教育体系固然有很多问题，但毕竟义务教育真的普及了；人们讨论的问题越来越开放，而拥有健康好奇心的人刨根问底也越来越方便 ——若是能读懂英文，再加上 Google，那简直没有边界。 一个人的性格是长期自我选择积累的结果。 “险盲”是我借用“文盲”这个词的结构杜撰出来的一个词汇，是指那些不了解风险，不知道如何回避风险，更不懂如何控制风险的人。文盲的一生其实很吃亏，险盲的一生更是如此。文盲可以通过（自我）教育得到解放，险盲也一样。 风险教育应该是理财教育，甚至应该是整个教育中最重要的组成部分，也不知道为什么它竟然一直被忽略，顶多在学校里搞个防火模拟演习。火灾其实只是风险的一种，有一个术语是“不可抗力造成的系统风险”。这也是为什么我们必须不断自我教育的原因。仅靠别人教永远是不够的，要靠自己学才行。至于“活到老，学到老”，其实只不过是一种生活方式。 首先，要平静地接受第一个事实：风险是一种客观存在。第二，一旦未知存在，就有风险存在。有一个普遍的误解就是认为“风险的概率决定风险的大小”，可实际上，衡量风险的首要因素并不是风险的概率第三，衡量风险大小的决定性因素是赌注的大小。 假设有两个人玩公平的抛硬币赌输赢的游戏，规则是： 赌注大小恒定直至一方输光游戏才能结束请问，最终决定输赢的是什么（单选）？ A.手气 B.谁先抛硬币 C.抛硬币次数 D.总游戏时长 E.以上皆是 F.以上皆不是 关于之前的那道选择题，最终决定输赢的是谁的赌本更多。 由于赌注是大小恒定的，又由于抛硬币是概率为¹⁄₂的游戏，所以，如果双方赌本一样多，那么最终双方输赢的概率就都是¹⁄₂。可是，如果一方的赌本更多，那么他最终获胜的概率就会更大。由于玩的是概率为¹⁄₂的游戏，所以，如果其中一方的赌本是另外一方的2倍以上，那么前者几乎必胜。也就是说，在这个游戏里，赌本相对越多，输的概率越趋近于零。 如果你参与这个游戏，一上来发现那个“恒定大小的赌注”比你的总赌本还多，那么你就不应该参与。如果你的赌本只够下 1 注，虽然赢的概率依然是¹⁄₂，但从长期来看，你没有任何胜算。 很多人看起来一辈子倒霉，可实际上，那所谓的“倒霉”是有来历的。他们对风险的认识是错误的。他们倒霉的原因只有一个： 动不动就把自己的全部赌进去。赌注太大，则意味着结果无法承受。为什么赌本少的人更倾向于下大赌注呢？据说是越差的人梦想越大。高速公路上开得很快还不愿意系安全带的 —— 险盲，因为这些人不知不觉就把自己的性命当成了赌注。经常做铤而走险之事的人 —— 险盲。股市里怕自己赚得少，拿出全部身家（甚至借钱，更甚至借钱做杠杆）的人 —— 险盲。 第四，抗风险能力的高低本质上就是总赌本的大小，尤其是在面临同样概率的风险的时候。赌注相对大的时候，智力会急剧下降。为什么高考的时候总有一些人考砸？就是因为赌注（未来一辈子）太大，以致压力太大，进而无法正常发挥。那些天天刻苦训练的选手，每一个在训练的时候都能经常打出“满贯”，但在整个赛季都没有几个选手能在赛场上做到。为什么呢？就是因为赌注太大了。平时训练的时候没什么赌注，也就没什么压力。这也可以反过来解释一个常见的现象：历史上所有成功的庞氏骗局都有一个普遍的重要特征，那就是“加入费用惊人地高”，因为只有这样，进来的人才能普遍不冷静。所以，人真的不能穷，不能没有积蓄，否则真的会在某一瞬间突然变傻。另外，永远不要“All In”。这在很多时候并不是空话，真的需要放在心上。 第五，冒险没问题，但尽量不要被抽水。“抽水”是赌场里的术语，是指赢家要支付盈利中的一定比例给庄家。不要以为赌场太阴险，实际上，开赌场、保证公平就是需要开销的，所以，玩家支付抽水是合理的。也不要以为股票交易所太贪婪，它们收手续费也是合理的，这就是无所不在、不可消灭的“成本”。公平是有成本的。有抽水机制的赌局本质是倾斜的。因为即便是抛硬币的游戏，加上抽水机制之后，长期来看所有的玩家也都会输光，所有的赌注最终都会转化成抽水者的利润 —— 就好像一个正弦函数被改造成阻尼正弦函数一样。","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"理财","slug":"理财","permalink":"http://ipcreator.me/tags/理财/"}]},{"title":"正确高效使用 Google","date":"2017-02-11T08:33:06.000Z","path":"2017/02/11/how-to-use-google/","text":"原文作者：李笑来，摘自《新生 —— 七年就是一辈子》 研究这个词，在英文中是research，我把它理解为re-search，实际上各种语言是相通的，所谓re-search其实就是“反复搜索”，就是“上下求索”（路漫漫其修远兮，吾将上下而求索）。所以，如果你想学点什么，就要善于搜索。而在这个时代里，最好的搜索工具就是 Google。 搜索引擎之所以迷人，就是因为它就好像望远镜一样： 能让你看到你原本完全看不到的东西……互联网就好像那浩瀚的宇宙，里面几乎什么都有，只要你肯用“望远镜”去看、用搜索引擎去搜…… 搜索引擎是公开的，人人都可以用的，可偏偏大多数人不用、不会用，甚至错误地用…… 于是人与人之间的差异多了另外一个不断延展的维度。在这个维度上你不如人家你能怪谁？ 最烂的提问是：“我连不上 Google 怎么办呀？” 答案是“自己想办法” —— 如果你在乎，你就肯花时间自己解决这个问题，如果你不在乎，就不用在乎了。 1 使用“本尊” 最好使用 http://www.google.com/ncr NCR: No Country Redirection，而不是http://www.google.com.hk；有时，直接输入http://www.google.com也会被自动转到“本地Google”，比如，我用日本的 VPN，浏览器就会把我转到http://www.google.co.jp…… 2 优先使用英文关键字搜索 这是个好习惯。别说不会英文，不会就学，没那么难。 3 基本技巧 Google 搜索引擎也许是世界上最简单的应用界面，只有一个输入框和一个按钮。然而，用好它还是需要花点时间去学习的。Google 有帮助文档，还专门设计了个学习网站 A Google A Day 3.a 加号 在 Google 的输入框里，所有的空格都被 Google 理解为加号+。如果你输入的是 purpose of education那么 Google 返回的文章里既有“purpose”存在，也有“education”存在，但不一定有“purpose of education”存在。另外，过分常用的、单独存在没有意义的词汇往往被忽略掉，比如冠词“a”、“the”；介词“of”、“in”、“on”、“at”、“to”；连词“and”、“or”、“but”；从属连词“that”、“which”、“when”；代词“my”、“his”、“them”等等。 3.b 引号 如果你想要找含有“purpose of education”这个词组的文章，那么你必须输入”purpose of education”。现在的 Google 已经可以处理 utf-8 大字符集了，所以，即便你在输入的时候使用的是全角字符（不是半角字符的”而是“或者”）Google也照样能够正确处理。比较一下两种输入返回的结果：purpose of education vs.“purpose of education”。再试试 the most important benefit of education 和 “the most important benefit of education”。这就是引号（“……”）的作用——返回“完整匹配”的结果。 3.c 减号 为了进一步筛选搜索结果，还需要学会另外一个符号——减号-。比如，“the most important benefit of education” – “united states”要求Google返回含有“the most important benefit of education”但不存在“united states”的文章。 3.d 星号 另外一个威力无穷的符号是星号。Google 支持通配符搜索，即搜索字符串中可以包含星号，用来替代任意字符串。比如，“the most * examples of censorship”将会返回含有类似“the most outrageous examples of censorship”、“the most brazen examples of censorship”、“the most heinous examples of censorship”、“the most stupidest examples of censorship”、“the most dangerous examples of censorship”、“the most egregious examples of censorship”、“the most prolific examples of censorship”、“the most absurd examples of censorship”…… 3.e 波浪号 还有一个运用相当灵活、经常带来意外收获的符号是波浪号~。把波浪号~加在某个单词前面，是在告诉 Google：除了给出的关键字之外，还要搜索与波浪号~后面的那个单词相关的词汇。比如，搜索the importance of ~censorship的结果中包含着“the importance of censorship”，也包含着与censorship相关的另外一个词汇“propaganda”——“the importance of propaganda”。 4 高级技巧 4.a 站内搜索 再学一个在指定网站中搜索的语法“site:”。比如，“the purpose of education” site:http://www.time.com/就是要求 Google 只返回 http://www.time.com 这个网站里的含有“the purpose of education”的文章。 4.b 定制搜索 2006年，Google 推出了“co-op”服务（自定义搜索引擎）。其中最常用的功能之一就是可以指定 Google 搜索一个或者若干个指定的网站——相当于前面提到的 Google 语法“site:”的扩展。比如，我就曾经为我的学生定制了一个 Google cse（Custom Search Engine）——Search News Media。不妨看看在这个自定义搜索引擎上搜索censorship返回的结果（GRE/SAT 的作文考试中，都有很多关于“censorship”的作文题）。这个 cse 只搜索以下10个网站： http://www.economist.com/http://www.cnn.com/http://www.time.com/http://nytimes.com/http://www.washingtonpost.com/http://www.usnews.com/http://usatoday.com/http://www.reuters.com/http://www.bbc.co.uk/http://en.wikinews.org/","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Google","slug":"Google","permalink":"http://ipcreator.me/tags/Google/"}]},{"title":"选择的智慧","date":"2017-02-11T01:12:06.000Z","path":"2017/02/11/wisdom-of-choose/","text":"李开复写《给中国学生的第六封信》——选择的智慧 有勇气来改变可以改变的事情，有胸怀来接受不可改变的事情，有智慧来分辨两者的不同。 “‘有勇气来改变可以改变的事情’代表了用西方式的积极进取的心态，以永不放弃、永不消沉的主动人生态度，鼓励我们靠自己的努力达到目的。“‘有胸怀来接受不可改变的事情’代表了用中国式的谦恭谨让的度量来培养自己的修养，学会承认和接受真实的、不完美甚至不公正的世界。有智慧来分辨两者的不同，可是，智慧从哪里来呢？”其实，“有智慧来分辨两者的不同”就是要求我们使用自己的智慧，主动发现并选择最完整、最均衡的状态，并通过这一选择获得成功。这里所说的“智 慧”，既是甄别、判断的智慧，也是权衡、折中的智慧，但从根本上讲，它更是在选择中孕育又在选择中升华的最高智慧——我也把它称作“选择成功”的智慧。 中国的青年学生虽然有幸出生在能够自由选择的时代，但时代并没有传授他们选择的智慧。我能帮你做的不是选择，因为你自身的问题只有自己最清楚，自己的未来也只有自己最在意。我能做的只是传授给你选择的智慧，帮你聆听自己心底里最真实的声音，帮助你做出智慧的选择 选择成功的智慧共有八种： 用中庸拒绝极端 用理智分析情景 用务实发挥影响 用冷静掌控抉择 用自觉端正态度 用学习积累经验 用勇气放弃包袱 用真心追随智慧 中庸告诉我们的最重要的一点，就是要避免并拒绝极端和片面。比如说，我认为最重要的积极主动，如果做到了极端，就变成了霸道，喜欢对别人颐指气使，横行跋扈。还有我提出与人相处最重要的同理心，如果做到了极端， 就变成了盲从，失去了自己的选择，什么事都没有主见。极端的自信就成了自傲，极端的勇气就成了愚勇，极端的胸怀就是懦弱，极端的 自省就会变成自卑。 自信、自省、勇气、胸怀，积极、同理心六种态度都是成功的必备要素，也都是成功者需要具备的优点。但是，一旦将其中某一种态度发展到极端，优点就会立刻演变为缺点。下面的图显示的就是这六种成功者必须的态度，和它们发展到极端的后果：内圈代表完整、均衡的状态，外圈代表极端、片面的行为。第一个智慧的真谛就是：我们必须用中庸的思想指导自己，把自己的态度限制在完整、均衡的范畴内，兼顾自信和自省、勇气和胸怀、积极和同理心等各方面因素，时刻防止自己在其中某一方面有过于偏激的表现。 沉默是金和口无遮拦都不可取，那么我们怎么达到“中庸式的智慧沟通”呢？记得我刚进入苹果公司开始我的第一份工 作时，公司里有一位经理叫西恩，大家都知道他是一个非常有才华的人，尤其在开会的时候， 他得体的言辞完美地展现出他过人的才学、情商与口才，足以让在场的 所有人钦佩不已。有一天，我鼓足勇气去向西恩讨教有效沟通的秘诀。 西恩说：“我的秘诀其实很简单：我并不总是抢着发言；当我不懂或不确定时，我的嘴闭得紧 紧的；但是，当我有好的意见时，我绝不错过良机——如果不让我发言，我就不让会议结束。” 我问他：“如果别人都抢着讲话，你怎么发言呢？”西恩说：“我会 先用肢体语言告诉别人：下一个该轮到我发言啦！例如，我会举起手，发出特殊的声响（如清嗓子声），或者用目光要求主持人让我发言。 但是，如果其他人的确霸 占了所有的发言机会，我就等发言人调整呼吸时，迅速接上话头。”我又问他：“如果你懂得不多，但是别人向你咨询呢？” 西恩说：“我会先看看有没有比我懂得 更多的人帮我回答。如果有，我会巧妙地把回答的机会‘让’给他；如果没有，我会说‘我不知道，但是我会去查’，等会开完后，我一定去把问题查清楚。” 跟他 的一席话让我学到了很多东西——只要把握好说话的度，选择好说话的时机，就可以得到周围人的尊敬，而且，别人也会从你的话语中了解到你是一个渊博而谦逊的 人。 “我不同意我的老板，我该站起来发言吗？” 我的回答是：“这要看情形而定。首先，你的老板是一个愿意接纳异议的人吗？如果不是，那么你千万不要乱发言，但是，你可以开始物色一个新 工作和新老板了！如果他能够接受异议，那么，在老板还没做出最后的决定时，不要怕提出异议；但同时也要考虑到，如果是当众发言，自己的话就必须有一定的技 巧，应当顾虑到老板的面子。老板一旦做出了决定，我们无论有无异议，都必须支持和贯彻，有不同意的地方只可以私下与老板沟通。” 在这样一个具体的例子里，我们必须学会用智慧甄别各种复杂的情况，并从不同候选方案中择善而从的方法，这样才能找到提出异议的最佳途径。这个例子中的选择过程也可以用计算机流程图直观地表示出来： 一个出色领导总是拥有上述的六种领导力，并且会理智地分析当前的情景，以便决定运用其中的哪一种。例如， 假设员工表现不佳或 员工是新手，在公司遇到重大危机时，对员工就应该采用指挥、命令的方式； 如果企业需要改变方向，或员工因为不理解方向而士气不高，而你又是一个值得信任的 领导者，那就应该采用宏观掌控的方法； 如果你发现员工对工作得心应手，部门协调没有问题，那就应该注重和谐合作； 当你发现员工知识渊博，或你对结果不确定 的时候，就应该选择民主自由的方式； 如果员工能力很高又是专家，或具备了积极自主的态度，就应该采用授权负责的方式； 如果员工很有动力，愿意把工作做好， 但是经验不足，同时企业并没有处于危机时刻，那应该尽量指导培养。 最好的领导是拥有这六种看起来相互矛盾的领导力，并且用智慧根据不同的情景正确选择的 人。 人生中的绝大多数选择都不是非黑即白、非此即彼的事情。大家要学会在最合适的时候对最合适的人用最合适的方法，要学会在做出决定前用理智全面衡 量各种因素的利弊以及自己的能力和倾向。这些东西并不能靠简单的公式来决定。读者应该凭借自己的智慧，选择最适合自己的成功之路。 史蒂芬·柯维在其所著的《高效能人士的七个习惯》一书中，把所有值得关注的事情称为“关注圈”，把能够发挥影响的事情称为“影响圈”。在整个关注圈中，根据自主程度的高低，人生面临的问题可分为三类： 可直接影响的问题：对于这种问题，解决之道在于用正确的态度执行。这是我们绝对做得到的，也是最核心的“影响圈”。 可间接影响的问题：有赖改进发挥影响力的方法来加以解决，如借助人际关系、团队合作和沟通能力来解决。这是最值得我们努力争取的“影响圈”。 无能为力的问题：需要以平和的态度和胸怀，接纳这些问题。纵使有再多不满，也要泰然处之，如此才不至于让问题征服了我们。 碰到问题时，你只要耐心地将它分解开，看看哪些部分是你可以影响的，哪些部分是你可以关注但却无法影响的。然后，去努力争取那些可以 “间接影响”的问题，让它们变成可“直接影响”的，同时把全部心力投入自己的影响圈——你可以在这样的过程中不断获得进步，这反过来又可以让你进一步扩大 自己的影响圈。解决问题的第一步都要从自己的影响圈开始：先影响自己，再影响别人，最后才有可能影响环境。虽然我们不能改变风，但我们可以调整船帆。人在挫折中学到的 东西会远远多于在成功中学到的。希望你在经过这一次不幸后能够成为一个更成熟、更成功的人。专注于你能够改变的事情，可能最后连当初不能改变的事情也改变了。 在抉择前“重重”思考，抉择后“轻轻”放下。 所谓“重重”思考，就是要培养客观的、精准的判断力。每一个重要的抉择可能都与你自己的前途密切相关，但你在抉择和判断时，一定要避免先入为主的思维定式，要避免自己的主观倾向影响判断的精准和客观。我们该如何做出客观、精准的抉择呢？我给大家提供三个建议： 第一、把影响你抉择的因素罗列成一张“利弊对照表”。 第二、学会用概率论的方法看问题。 第三、当自己不确定时，学会谋之于众。 在利弊对照表中写出每个因素的利益和弊端，然后借助该表客观地分析，哪些利益和弊端对你来说最为重要？这些因素是否符合你的价值观和理想？当你面前摆了这样一张客观而详尽的利弊对照表时，主观因素就不容易影响你的判断力了。借助这样一份利弊对照表，我很快就做出了客观而明智的决定——回中国工作。因为综合考虑各种利弊因素后，回中国工作最能发挥我自身的特长，也最符合我个人的价值观和理想。 我们应当学会分析一件事情“可改变的概率”或“可能发生的概 率”。对于发生概率小的事情，在做之前一定要有失败的心理准备。另一方面，也不要等到事情成功的概率达到100%时才去做，因为即便做成了这种事情，也没 有什么值得骄傲的。做概率分析时，可以列出“最好的可能”和“最坏的打算”，以帮助自己综合考量。例如，上面提到的“回中国建立研究院”的工作，我有100%的把 握，可以把研究院办得与其他任何公司在中国建立的研究院一样好——这是最坏的打算；我有40%的把握，可以做出世界一流的研究机构来——这是最好的可能。用这样的方法考虑到两个极端后，我马上就会明白，即便出现最坏的情况，我和公司也可以坦然接受。因此，我选择回中国工作就成了一件顺理成章的事。许多抉择并没有这么好的“后路”，在这种时候，我们既要谨慎地评估风险因素，也要在适当的时候有勇气挑战自己。美国前国务卿鲍威尔曾在阐 述“领导力”时指出：“当你自估的成功概率达到40~70%，你就该去做这件事了。也许你会失败，但拖延或等待的代价往往是更大的。” 多征求别人的意见总是好的。那些更有经验的人可以用他们多年的积累为我们指引方向，那些聪明绝顶的人可以用他们的智商启发我们的思路，那些懂得人际关系的人可以用他们的情商帮助我们有效沟通…… 最终的决定权在你自己，即便你采纳了别人的意见，你也不可以就此将责任推卸给他人。所谓“轻轻”放下，就是说我们在做出抉择后，应当坦然面对可能发生的任何结果，既不要因为抉择正确而欣喜若狂，也不要因为抉择失误而悔恨终生。 无论你的抉择正确与否，无论它的结果如何，已经做出的决定就无法收回了，你只有坦然接受它，或者在今后想办法补救。对于已经发生的事情， 或者自己已经无法控制的事情，任何担忧或悔恨都是多余的。与其把时间花在无谓的焦虑上，倒不如把这些东西“轻轻”放下，然后一身轻松地去做自己应该做的 事。 人贵有自知之明。这实际上是说，社会生活中的每个人都应当对自己的素质、潜能、特长、缺陷、 经验等各种基本能力有一个清醒的认识，对自己在社会工作生活中可能扮演的角色有一个明确的定位。心理学上把这种有自知之明的能力称为“自觉”，这通常包括 察觉自己的情绪对言行的影响，了解并正确评估自己的资质、能力与局限，相信自己的价值和能力等几个方面。 有自觉的人能够针对自己做出最具有智慧的选择，选择做自己能够胜任的工作，选择做能够得到满足感的工作等等。要做一个自觉的人，既不会对自己的 能力判断过高，也不会轻易低估自己的潜能。对自己判断过高的人往往容易浮躁、冒进，不善于和他人合作，在事业遭到挫折时心理落差较大，难以平静对待客观事 实；低估了自己潜能的人，则会在工作中畏首畏尾、踟蹰不前，没有承担责任和肩负重担的勇气，也没有主动请缨的积极性。无论是上述哪一种情况，个人的潜力都 不能得到充分的发挥，个人事业也不可能取得最大的成功。 有自觉的人在工作遇到挫折的时候不会轻言失败，在工作取得成绩时也不会沾沾自喜。认识自我，准确定位自我价值的能力不仅仅可以帮助个人找到自己合适的空间及发展方向，也可以帮助企业建立起各司其职、协同工作的优秀团队。有自觉的人的抉择让他人更愿意信任。 很多人只是从来没有考虑过要 了解自己。确定计划和原则时，必须完全基于对自己的了解。最关键的是，一定要清楚自己对什么事情最感兴趣。制定了一个计划以后，也许随着时间的推移，会有 某种程度上的修改，但始终要明确自己的大方向。所以我觉得更难的一点是，能经常以旁观者的目光审视自己，看一下自己哪方面做得好，需要保持，哪方面做得 差，需要更加努力，哪方面走入了歧途，需要改正。 西方有一则寓言，说的是一个年轻人向一个年长的智者请教智慧的秘诀。年轻人问：“智慧从哪里来？”智者说：“正确的选择。”年轻人又问：“正确的选择从哪里来？”智者说：“经验。”年轻人进一步追问：“经验从哪里来？”智者说：“错误的选择。”不要畏惧失败。每一个失 败不是惩罚，而是一个学习的经验。 学习经验不是一蹴而就的事情，有时候要经历漫长的过程。英文中有一句名言：“旅途本身就是收获（The journey is the reward）。”很多时候，你的收获并不一定是每件事的成功，而是你在走向成功的旅途中经历的一切。旅途中的每一次正确的或是错误的选择都会让你学到新 的知识、获取新的教训，并以此调整自己的自觉，掌握正确的选择方法。 创新固然重要，但有用的创新更重要。在整个学习的过程中，无论是错误的选择，还是失败的经历，它们都可以成为印刻在我们心底，能够随时拿出来比较、借鉴的“模板 （Template）”。当我们面临新的抉择时，我们就会使用过去积累的“模板”来比较、分析各种不同情况下成功的概率，以权衡利弊，做出正确的抉择。 当新的机会摆在面前的时候，敢于放弃已经获得的一切，这需要相当大的勇气。有时，你在还没有找到“新的机会”之前，就必须放弃你已经拥有的东西，那就需要更多的勇气了。这种眼前的利益往往是阻碍你获得更大成功的根源。当新的机会到来时，勇于放弃已经获得的东西并不是功亏一篑，更不是半途而 废，这是为了谋求新的发展空间。如果你在适当的时候勇敢地——当然也应该是有智慧地——放弃已经拥有但可能成为前进障碍的东西，你多半会惊讶地发现，自己 抛开的不过是一把虽能遮风挡雨，但又会阻碍视线的雨伞，自己因此而看到的却是无比广阔、无比壮丽的江山图景！ 当苹果电脑的一 位副总裁对我说“你要选择终身写些没有人读得懂的论文，还是要选择改变世界”时，我毫不犹豫地选择了改变世界。我的感觉就像是获得了自由。如果我只对我拥有的东西依依不舍，那么我将错过这个“once in a lifetime”的机会。于是，就像我在“追随我新的抉择”中所说的：“我有选择的权利——我选择了Google。我选择了中国。我要做有影响力的事 ——在中国，我能更多地帮助中国的青年，做最有影响力的事。我要成为最好的自己——在Google，我能经过学习新的创新模式，成为最好的自己。”同时， 我放弃了在微软的人脉，放弃了继续与比尔·盖茨工作的机会，放弃了那安稳的工作，放弃了那“世界第一大IT公司”的荣誉。 我人生中这几次勇于放弃的经历，都使我更加清楚自己的追求和兴趣所在，也使我更有激情去从事自己喜爱的事业。放弃意味着失去，但失去的是那些自己缺乏激情的东西，得到的却是自己主动追寻的事业。 最后一个可以帮助你做出正确抉择的“智囊”就是你内心深处的价值观、理想和兴趣了。价值观就是每个人判断是非、善恶的信念体系（What is right？），理想就是我们对自己人生目标的基本设计（What do I want my life to be?），而兴趣则是我们每个人最喜欢、最热爱的事情（What do I love doing?）。这三者共同构成了我们内心深处最为真实的声音。有关如何找到自己的价值观、理想和兴趣，读者可以参看《做最好的自己》一书中的相关章节。 你的价值观是你判断“是非”的准绳，你的理想和兴趣是你辨别“方向”的指南针——它们都是你心底里最真实、最“自我” 的东西，还有什么是比这些更重要，更精确的判断依据呢？ 我建议大家应该通过自己正确的价值观和理想来寻找最为完整、最为均衡的人生状态。任何一个高尚的人，一个有远大理想的人都必然会在积极追寻成功 的道路上运用自己最高的智慧：因为拥有了正确的价值观和远大的理想，他在面临困难和挑战时就必然会听从自己的真心、用冷静的心态权衡各种利弊，他也必然会 在一次又一次或是成功、或是失败的抉择中不断积累经验完善自我……这样的人最能理解完整与均衡的真谛，这样的人最懂得使用自己的“选择”的权利来赢得真正 的成功。 融会中西，均衡发展在今天这个信息化、全球化的时代里，只有融会中西才能成为真正有价值的国际化人才。中国人讲求纪律与服从、重视谦虚和毅力以及西方人强调创意与个性，鼓励积极与勇气的 特长 大部分中国青年和美国青年的优势可以用下表来概括。既需要西方的科技和理性，也需要东方的心胸与美德。 一个人甚至要同时具备多种看似相互矛盾的品质，才能在复杂的境遇中因具体情景不同而运用正确的一种。 用智慧在各种看似矛盾的因素之间主动选择“完整”和“均衡”，这是“选择成功”的最大秘诀。","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"成长","slug":"成长","permalink":"http://ipcreator.me/tags/成长/"}]},{"title":"孙振耀退休感言","date":"2017-02-10T23:50:06.000Z","path":"2017/02/11/retirement-speech-of-HP-president/","text":"HP大中华区总裁孙振耀退休感言 职业生涯首先要关注的是自己，自己想要什么？寻找真正能够使你获得快乐的东西，那才是你想要的东西。有很多的不快乐，其实是源自不满足，而不满足，很多时候是源自于心不定，而心不定则是因为不清楚究竟自己要什么，不清楚要什么的结果就是什么都想要，结果什么都没得到。 关于工作与生活 外企员工的成功很大程度上是公司的成功，并非个人的成功而进外企的人往往并不能很早理解这一点，把自己的成功90％归功于自己的能力看待工作，眼光要放远一点，一时的谁高谁低并不能说明什么。 马拉松比赛 正常人大概要工作35年，这好比是一场马拉松比赛，和真正的马拉松比赛不同的是，这次比赛没有职业选手，每个人都只有一次机会。要知道，有很多人甚至坚持不到终点，大多数人最后是走到终点的，只有少数人是跑过终点的，因此在刚开始的时候，去抢领先的位置并没有太大的意义。每个人的职业生涯中都会碰到几个瓶颈，你熬过去了而别人没有熬过去你就领先了。跑长跑的人会知道，开始的时候很轻松，但是很快会有第一次的难受，但过了这一段又能跑很长一段，接下来会碰到第二次的难受，坚持过了以后又能跑一段，如此往复，难受一次比一次厉害，直到坚持不下去了。大多数人第一次就坚持不了了，一些人能坚持到第二次，第三次，虽然大家都坚持不住了，可是跑到这里的人也没几个了，这点资本足够你安稳活这一辈子了。 初赛 职业生涯就像一场体育比赛，有初赛、复赛、决赛。初赛的时候大家都刚刚进社会，大多数都是实力一般的人，这时候努力一点认真一点很快就能让人脱颖而出，于是有的人二十多岁做了经理，有的人迟些也终于赢得了初赛，三十多岁成了经理。然后是复赛，能参加复赛的都是赢得初赛的，每个人都有些能耐，在聪明才智上都不成问题，这个时候再想要胜出就不那么容易了，单靠一点点努力和认真还不够，要有很强的坚忍精神，要懂得靠团队的力量，要懂得收服人心，要有长远的眼光…… 复赛 看上去赢得复赛并不容易，但，还不是那么难。因为这个世界的规律就是给人一点成功的同时让人骄傲自满，刚刚赢得初赛的人往往不知道自己赢得的仅仅是初赛，有了一点小小的成绩大多数人都会骄傲自满起来，认为自己已经懂得了全部，不需要再努力再学习了，他们会认为之所以不能再进一步已经不是自己的原因了。虽然他们仍然不好对付，但是他们没有耐性，没有容人的度量，更没有清晰长远的目光。就像一只愤怒的斗牛，虽然猛烈，最终是会败的，而赢得复赛的人则象斗牛士一样，不急不躁，跟随着自己的节拍，慢慢耗尽对手的耐心和体力。赢得了复赛以后，大约已经是一位很了不起的职业经理人了，当上了中小公司的总经理，大公司的副总经理，主管着每年几千万乃至几亿的生意。 决赛 最终的决赛来了，说实话我自己都还没有赢得决赛，因此对于决赛的决胜因素也只能凭自己的猜测而已，这个时候的输赢或许就像武侠小说里写得那样，大家都是高手，只能等待对方犯错了，要想轻易击败对手是不可能的，除了使上浑身解数，还需要一点运气和时间。世界的规律依然发挥着作用，赢得复赛的人已经不只是骄傲自满了，他们往往刚愎自用，听不进去别人的话，有些人的脾气变得暴躁，心情变得浮躁，身体变得糟糕，他们最大的敌人就是他们自己，在决赛中要做的只是不被自己击败，等着别人被自己击败。这和体育比赛是一样的，最后高手之间的比赛，就看谁失误少谁就赢得了决赛。 你工作快乐么？你的工作好么？ 你不快乐的根源，是因为你不知道要什么！你不知道要什么，所以你不知道去追求什么，你不知道追求什么，所以你什么也得不到。职业生涯首先要关注的是自己，自己想要什么？大多数人大概没想过这个问题，唯一的想法只是——我想要一份工作，我想要一份不错的薪水寻找自己想要的东西不是和别人比赛，比谁要得更多更高，比谁的目标更远大。你必须听听你内心的声音，寻找真正能够使你获得快乐的东西，那才是你想要的东西。先想好自己要过怎样的人生，再决定要找什么样的职业。有很多的不快乐，其实是源自不满足，而不满足，很多时候是源自于心不定，而心不定则是因为不清楚究竟自己要什么，不清楚要什么的结果就是什么都想要，结果什么都没得到。还是因为生活而工作，不是因为工作而生活，生活是最要紧的，工作只是生活中的一部分。我总是觉得生活的各个方面都是相互影响的，如果生活本身一团乱麻，工作也不会顺利。所以要有娱乐、要有社交、要锻炼身体，要有和睦的家庭……最要紧的，要开心首先的首先，人还是要让自己高兴起来，让自己心态好起来，这种发自内心的改变会让你更有耐心，更有信心，更有气质，更能包容…… 恶性循环你想每隔几年重来一次找工作的过程么？你想每年都在这种对于工作和薪水的焦急不安中度过么？不想的话，就好好想清楚。饮鸩止渴，不能因为口渴就拼命喝毒药。越是焦急，越是觉得自己需要一份工作，越饥不择食，越想不清楚，越容易失败，你的经历越来越差，下一份工作的人看着你的简历就皱眉头。于是你越喝越渴，越渴越喝，陷入恶性循环。 压力大多数人都有生存压力，我也是，有生存压力就会有很多焦虑，积极的人会从焦虑中得到动力，而消极的人则会因为焦虑而迷失方向。所有人都必须在压力下做出选择，这就是世道，你喜欢也罢不喜欢也罢。 重要 VS 紧急 一般我们处理的事情分为重要的事情和紧急的事情，如果不做重要的事情就会常常去做紧急的事情。比如锻炼身体保持健康是重要的事情，而看病则是紧急的事情。如果不锻炼身体保持健康，就会常常为了病痛烦恼。又比如防火是重要的事情，而救火是紧急的事情，如果不注意防火，就要常常救火。找工作也是如此，想好自己究竟要什么是重要的事情，找工作是紧急的事情，如果不想好，就会常常要找工作。往往紧急的事情给人的压力比较大，迫使人们去赶紧做，相对来说重要的事情反而没有那么大的压力，大多数人做事情都是以压力为导向的，压力之下，总觉得非要先做紧急的事情，结果就是永远到处救火，永远没有停歇的时候。（很多人的工作也像是救火队一样忙碌痛苦，也是因为工作中没有做好重要的事情。）那些说自己活在水深火热为了生存顾不上那么多的朋友，今天找工作困难是当初你们没有做重要的事情，是结果不是原因。如果今天你们还是因为急于要找一份工作而不去思考，那么或许将来要继续承受痛苦找工作的结果。 12天下没有轻松的成功，成功，要付代价。请先忘记一切的生存压力，想想这辈子你最想要的是什么？所以，最要紧的事情，先想好自己想要什么。人总想找到那个最好的，可是，什么是最好的？你觉得是最好的那个，是因为你的确了解，还是因为别人说他是最好的？即使他对于别人是最好的，对于你也一定是最好的么？ 什么是好工作 人都是要面子的，也是喜欢攀比的，即使在工作上也喜欢攀比，不管那是不是自己想要的。你想清楚了么？500强一定好么？找工作究竟是考虑你想要什么，还是考虑别人想看什么？“很多事情就像看A片，看的人觉得很爽，做的人未必。” 你究竟是要过谁的一生？人的一生不是父母一生的续集，也不是儿女一生的前传，更不是朋友一生的外篇，只有你自己对自己的一生负责，别人无法也负不起这个责任。自己做的决定，至少到最后，自己没什么可后悔。对于大多数正常智力的人来说，所做的决定没有大的对错，无论怎么样的选择，都是可以尝试的。 好工作，应该是适合你的工作，具体点说，应该是能给你带来你想要的东西的工作，你或许应该以此来衡量你的工作究竟好不好，而不是拿公司的大小，规模，外企还是国企，是不是有名，是不是上市公司来衡量。小公司，未必不是好公司，赚钱多的工作，也未必是好工作。你还是要先弄清楚你想要什么，如果你不清楚你想要什么，你就永远也不会找到好工作，因为你永远只看到你得不到的东西，你得到的，都是你不想要的。 万科的王石登珠穆朗玛峰的体验给我很多启发，虽然在出发时携带大量的物资，但是登顶的过程中，必须不断减轻负荷，最终只有一个氧气瓶和他登上峰顶。登山如此，漫长的人生又何尝不是。 可能，最好的，已经在你的身边，只是，你还没有学会珍惜。人们总是盯着得不到的东西，而忽视了那些已经得到的东西。 普通人 中国的励志比较鼓励人立下大志愿，卧薪尝胆，有朝一日成富成贵。需要用999个失败者来堆砌一个成功者的故事。国外的励志比较鼓励人勇敢面对现实生活，面对普通人的困境，虽然结果也是成富成贵，但起点不一样目标定得高些对于喜欢挑战的人来说有好处，但对于大多数普通人来说，反而比较容易灰心沮丧，很容易就放弃了。 目标其实并没有高低之分，你不需要因为自己的目标没有别人远大而不好意思，达到自己的目标其实就是成功，成功有大有小，快乐却是一样的。我们追逐成功，其实追逐的是成功带来的快乐，而非成功本身。职业生涯的道路上，我们常常会被攀比的心态蒙住眼睛，忘记了追求的究竟是什么，忘记了是什么能使我们更快乐。 这个世界上，有史以来直到我们能够预见得到的未来，成功的人总是少数，有钱的人总是少数，大多数人是一般的，普通的，不太成功的。因此，大多数人的做法和看法，往往都不是距离成功最近的做法和看法。因此大多数人说好的东西不见得好，大多数人说不好的东西不见得不好。大多数人都去炒股的时候说明跌只是时间问题，大家越是热情高涨的时候，跌的日子越近。大多数人买房子的时候，房价不会涨，而房价涨的差不多的时候，大多数人才开始买房子。不会有这样一件事情让大家都变成功，发了财，历史上不曾有过，将来也不会发生。有些东西即使一时运气好得到了，还是会在别的时候别的地方失去的。 只见贼吃肉，不见贼挨揍社会上一夜暴富的新闻很多，这些消息，总会在我们的心里面掀起很多涟漪，涟漪多了就变成惊涛骇浪，心里的惊涛骇浪除了打翻承载你目标的小船，并不会使得你也一夜暴富。“只见贼吃肉，不见贼挨揍。”我们这些普通人既没有当贼的勇气，又缺乏当贼的狠辣绝决，虽然羡慕吃肉，却更害怕挨揍，偶尔看到几个没挨揍的贼就按奈不住，或者心思活动，或者大感不公，真要叫去做贼，却也不敢。 跳槽与积累 不反对跳槽，但跳槽决不是解决问题的办法，而且频繁跳槽的后果是让人觉得没有忠诚度可言，而且不能安心工作。要跳槽肯定是有问题，一般来说问题发生了，躲是躲不开的，很多人跳槽是因为这样或者那样的不开心，如果这种不开心，在现在这个公司不能解决，那么在下一个公司多半也解决不掉。你必须相信，90%的情况下，你所在的公司并没有那么烂，你认为不错的公司也没有那么好。就像围城里说的，“城里的人拼命想冲出来，而城外的人拼命想冲进去。”每个公司都有每个公司的问题，没有问题的公司是不存在的。换个环境你都不知道会碰到什么问题，与其如此，不如就在当下把问题解决掉。很多问题当你真的想要去解决的时候，或许并没有那么难。有的时候你觉得问题无法解决，事实上，那只是“你觉得”。 基本上，35岁以前我们的生存资本靠打拼，35岁以生存的资本靠的就是积累，这种积累包括人际关系，经验，人脉，口碑……工作两三年的人，无论是客户关系，人脉，手下，和领导的关系，在业内的名气……还都是远远不够的，但稍有成绩的人总是会自我感觉良好的，每个人都觉得自己跟客户关系铁得要命，觉得自己在业界的口碑好得很。其实可以肯定地说，一定不是，这个时候，还是要拿出前两年的干劲来，稳扎稳打，积累才刚刚开始。你足够了解你的客户吗？你知道他最大的烦恼是什么吗？你足够了解你的老板么？你知道他最大的烦恼是什么吗？你足够了解你的手下么？你知道他最大的烦恼是什么吗？如果你不知道，你凭什么觉得自己已经积累够了？如果你都不了解，你怎么能让他们帮你的忙，做你想让他们做的事情？如果他们不做你想让他们做的事情，你又何来的成功？ 等待 并不是每次闯红灯都会被汽车撞，并不是每个罪犯都会被抓到， 并不是每个错误都会被惩罚，并不是每个贪官都会被枪毙， 并不是你的每一份努力都会得到回报，并不是你的每一次坚持都会有人看到， 并不是你每一点付出都能得到公正的回报，并不是你的每一个善意都能被理解…… 这个，就是世道。好吧，世道不够好，可是，你有推翻世道的勇气么？如果没有，你有更好的解决办法么？ 有很多时候，人需要一点耐心，一点信心。每个人总会轮到几次不公平的事情，而通常，安心等待是最好的办法。 有很多时候我们需要等待，需要耐得住寂寞，等待属于你的那一刻。 每一个成功者都有一段低沉苦闷的日子，我几乎能想象得出来他们借酒浇愁的样子，我也能想象得出他们为了生存而挣扎的窘迫。在他们一生最中灿烂美好的日子里，他们渴望成功，但却两手空空，一如现在的你。没有人保证他们将来一定会成功，而他们的选择是耐住寂寞。如果当时的他们总念叨着“成功只是属于特权阶级的”，你觉得他们今天会怎样？ 他们在社会上奋斗积累了十几二十年，我们新人来了，他们有的我都想要，我这不是在要公平，我这是在要抢劫。因为我要得太急，因为我忍不住寂寞。二十多岁的男人，没有钱，没有事业，却有蓬勃的欲望。 12345人总是会遇到挫折的，人总是会有低潮的，人总是会有不被人理解的时候的，人总是有要低声下气的时候，这些时候恰恰是人生最关键的时候，因为大家都会碰到挫折，而大多数人过不了这个门槛，你能过，你就成功了。在这样的时刻，我们需要耐心等待，满怀信心地去等待，相信，生活不会放弃你，机会总会来的。至少，你还年轻，你没有坐牢，没有生治不了的病，没有欠还不起的债。比你不幸的人远远多过比你幸运的人，你还怕什么？路要一步步走，虽然到达终点的那一步很激动人心，但大部分的脚步是平凡甚至枯燥的，但没有这些脚步，或者耐不住这些平凡枯燥，你终归是无法迎来最后的那些激动人心。无论什么时候，我们总还是有希望。当所有的人离开的时候，我不失去希望，我不放弃。每天下班坐在车里，我喜欢哼着《隐形的翅膀》看着窗外，我知道，我在静静等待，等待属于我的那一刻。 逆境，是上帝帮你淘汰竞争者的地方。要知道，你不好受，别人也不好受，你坚持不下去了，别人也一样，千万不要告诉别人你坚持不住了，那只能让别人获得坚持的信心，让竞争者看着你微笑的面孔，失去信心，退出比赛。胜利属于那些有耐心的人。 入对行跟对人 第一份工作对人最大的影响就是入行，现代的职业分工已经很细，我们基本上只能在一个行业里成为专家，不可能在多个行业里成为专家。很多案例也证明即使一个人在一个行业非常成功，到另外一个行业，往往完全不是那么回事情其实没有哪个行业特别好，也没有哪个行业特别差，或许有报道说哪个行业的平均薪资比较高，但是他们没说的是，那个行业的平均压力也比较大。看上去很美的行业一旦进入才发现很多地方其实并不那么完美，只是外人看不见。其实选什么行业真的不重要，关键是怎么做。事情都是人做出来的，关键是人。和那些比你强的人打交道，看他们是怎么想的，怎么做的，学习他们，然后跟更强的人打交道。 年轻人在职业生涯的刚开始，尤其要注意的是，要做对的事情，不要让自己今后几十年的人生总是提心吊胆，更不值得为了一份工作赔上自己的青春年华。人还是要看长远一点。很多时候，看起来最近的路，其实是最远的路，看起来最远的路，其实是最近的路。 跟对人是说，入行后要跟个好领导好老师，刚进社会的人做事情往往没有经验，需要有人言传身教。对于一个人的发展来说，一个好领导是非常重要的。所谓“好”的标准，不是他让你少干活多拿钱，而是以下三个。 首先，好领导要有宽广的心胸，如果一个领导每天都会发脾气，那几乎可以肯定他不是个心胸宽广的人，能发脾气的时候却不发脾气的领导，多半是非常厉害的领导。中国人当领导最大的毛病是容忍不了能力比自己强的人，所以常常可以看到的一个现象是，领导很有能力，手下一群庸才或者手下一群闲人。如果看到这样的环境，还是不要去的好。 其次，领导要愿意从下属的角度来思考问题，这一点其实是从面试的时候就能发现的，如果这位领导总是从自己的角度来考虑问题，几乎不听你说什么，这就危险了。从下属的角度来考虑问题并不代表同意下属的说法，但他必须了解下属的立场，下属为什么要这么想，然后他才有办法说服你，只关心自己怎么想的领导往往难以获得下属的信服。 第三，领导敢于承担责任，如果出了问题就把责任往下推，有了功劳就往自己身上揽，这样的领导不跟也罢。选择领导，要选择关键时刻能抗得住的领导，能够为下属的错误买单的领导，因为这是他作为领导的责任。 选择 从某种意义上来说我们的未来不是别人给的，是我们自己选择的每天你都可以选择是否为客户服务更周到一些，是否对同事更耐心一些，是否把工作做得更细致一些，是否把情况了解得更清楚一些，是否把不清楚的问题再弄清楚一些……你也可以选择在是否在痛苦中继续坚持，是否抛弃掉自己的那些负面的想法，是否原谅一个人的错误，是否相信我在这里写下的这些话，是否不要再犯同样的错误……生活每天都在给你选择的机会，每天都在给你改变自己人生的机会，你可以选择赖在地上撒泼打滚，也可以选择咬牙站起来。你永远都有选择。有些选择不是立杆见影的，需要累积，比如农民可以选择自己常常去浇地，也可以选择让老天去浇地，诚然你今天浇水下去苗不见得今天马上就长出来，但常常浇水，大部分苗终究会长出来的，如果你不浇，收成一定很糟糕。 你选择相信什么？你选择和谁交朋友？你选择做什么？你选择怎么做？……我们面临太多的选择，而这些选择当中，意识形态层面的选择又远比客观条件的选择来得重要得多，比如选择做什么产品其实并不那么重要，而选择怎么做才重要。选择用什么人并不重要，而选择怎么带这些人才重要。大多数时候选择客观条件并不要紧，大多数关于客观条件的选择并没有对错之分，要紧的是选择怎么做。一个大学生毕业了，他要去微软也好，他要卖猪肉也好，他要创业也好，他要做游戏代练也好，只要不犯法，不害人，都没有什么关系，要紧的是，选择了以后，怎么把事情做好。 你还可以选择时间和环境，比如，你可以选择把这辈子最大的困难放在最有体力最有精力的时候，也可以走一步看一步，等到了40岁再说，只是到了40多岁，那正是一辈子最脆弱的时候，上有老下有小，如果在那个时候碰上了职业危机，实在是一件很苦恼的事情。与其如此不如在20多岁30多岁的时候吃点苦，好让自己脆弱的时候活得从容一些。你可以选择在温室里成长，也可以选择到野外磨砺，你可以选择在办公室吹冷气的工作，也可以选择40度的酷热下，去见你的客户，只是，这一切最终会累积起来，引导你到你应得的未来。 选择职业销售就是一门跟人打交道的学问，而管理其实也是跟人打交道的学问，这两者之中有很多相通的东西，他们的共同目标就是“让别人去做某件特定的事情。”而财务则是从数字的层面了解生意的本质，从宏观上看待生意的本质，对于一个生意是否挣钱，是否可以正常运作有着最深刻的认识。 公司小的时候是销售主导公司，而公司大的时候是财务主导公司，销售的局限性在于只看人情不看数字，财务的局限性在于只看数字不看人情。公司初期，运营成本低，有订单就活得下去，跟客户也没有什么谈判的条件，别人肯给生意做已经谢天谢地了，这个时候订单压倒一切，客户的要求压倒一切，所以当然要顾人情。公司大了以后，一切都要规范化，免得因为不规范引起一些不必要的风险，同时运营成本也变高，必须提高利润率，把有限的资金放到最有产出的地方。对于上市公司来说，股东才不管你客户是不是最近出国，最近是不是那个省又在搞严打，到了时候就要把业绩拿出来，拿不出来就抛股票，这个时候就是数字压倒一切。 开始的时候我们想“能做什么？”，等到公司做大了有规模了，我们想“不能做什么。”很多人在工作中觉得为什么领导这么保守，这也不行那也不行，错过很多机会。很多时候是因为，你还年轻，你想的是“能做什么”，而作为公司领导要考虑的方面很多，他比较关心“不能做什么”。 践行有人会说，你说得容易，我每天加班，不加班老板就会把我炒掉，每天累得要死，哪有时间娱乐、社交、锻炼？那是人们把目标设定太高的缘故，如果你还在动不动就会被老板炒掉的边缘，那么你当然不能设立太高的目标，难道你还想每天去打高尔夫？你没时间去健身房锻炼身体，但是上下班的时候多走几步可以吧，有楼梯的时候走走楼梯不走电梯可以吧？办公的间隙扭扭脖子拉拉肩膀做做俯卧撑可以吧？谁规定锻炼就一定要拿出每天2个小时去健身房？你没时间社交，每月参加郊游一次可以吧，周末去参加个什么音乐班，绘画班之类的可以吧，去尝试认识一些同行，和他们找机会交流交流可以吧？开始的时候总是有些难的，但迈出这一步就会向良性循环的方向发展。而每天工作得很苦闷，剩下的时间用来咀嚼苦闷，只会陷入恶性循环，让生活更加糟糕。 墓志铭由于受我父亲早逝的影响，我很早就下定决心，要在有生之年实现自己的愿望，我不要像我父亲一样，为家庭生活忙碌一辈子，临终前感伤，懊恼自己有很多没有实现的理想。一本杂志的文章提到我们在生前就应该思考自己的墓志铭，因为那代表你自己对完美人生的定义，我们应该尽可能在有生之年去实现它。Carly Fiorina曾经对我说过“这个世界上有好想法的人很多，但有能力去实现的人很少”，2007年5月21日在北大演讲时，有人问起那些书对我影响较大，我想对我人生观有影响的其中一本书叫 “TriggerPoint”，它的主要观点是：人生最需要的不是规划，而是在适当的时机掌握机会，采取行动。 和任何人一样，要丢掉自己现在所拥有的，所熟悉的环境及稳定的收入，转到一条自己未曾经历过，存在未知风险的道路，需要绝大的勇气，家人的支持和好友的鼓励。有舍才有得，真是知易行难，我很高兴自己终于跨出了第一步。因为割舍及改变对人是多么的困难，我相信大部分的人都有自己人生的理想，但我也相信很多人最终只是把这些理想当成是幻想，然后不断的为自己寻找不能实现的藉口，南非前总统曼德拉曾经说过，“与改变世界相比，改变自己更困难”，真是一针见血。 LakeTahoe我去了多次，但这次的体验有所不同，我从心里欣赏到它的美丽。 我的人生观是“完美的演出来自充分的准备”，“勇于改变自己，适应不断变化的环境，机会将不断出现”，“快乐及有意义的人生来自于实现自己心中的愿望，而非外在的掌声”。 我总结人生有三个阶段，一个阶段是为现实找一份工作，一个阶段是为现实，但可以选择一份自己愿意投入的工作，一个阶段是为理想去做一些事情。","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"感悟","slug":"感悟","permalink":"http://ipcreator.me/tags/感悟/"}]},{"title":"人工智能的黄金时代","date":"2017-02-09T10:06:18.000Z","path":"2017/02/09/golden-age-of-artificial-intelligence/","text":"“人工智能时代，将是一个比移动互联时代大十倍的市场 —-李开复” 10年后，人工智能能将取代世界上90%的翻译/记者/助理/保安/司机/销售/客服/交易员/会计/保姆。 人工智能也就是这样几个事情，感知、决策、反馈。 人工智能发展的主要里程碑。 近年最大的突破：深度学习深度学习是什么？你丢一大堆数据给它，然后问它，我应该买什么股票？这个人的保险该付多少钱？这个想贷款的该不该贷？这个信用卡的交易是否有欺诈的嫌疑？你还可以问他，这么多的男人你应该找哪一个为对象？你也可以问他，今天晚上这么多好吃的，我应该吃哪些？它都会告诉你一个答案。 深度学习之后还有更新的技术 什么领域适合人工智能海量的数据，清晰领域界限，顶尖的AI科学家，还有自动标注数据，以及超大的计算量。科学家的创业时代来临了，而不是三个小朋友的创业时代。 机器学习在很多领域超越人类、创造巨大价值左上角代表的是在图像识别领域机器超越人类，左下角是语音识别领域机器的错误率低于人类。当人脸识别超越了人类，我们还需要保安吗？当语音识别超越了人类，我们还需要客服吗？还需要打电话推销吗？当自动驾驶超越人类，我们还需要司机吗？当传内容，写新闻，金融稿件的能力超越了人类我们还需要金融界记者吗？90%的金融领域的报道都是传出来的，这些报道以后绝对不是人写的，人写是会犯错的，机器不会犯错，只有深度的报道才需要人写。那到底哪些领域可以做人工智能，可以挣钱呢？实在太多了，这里随便列了三十多个领域，在任何一个领域就是一个商业计划书，如果你能找到一个该领域的超级的商业专家，销售专家，再搭配一个人工智能的科学家，那就是一个黄金创业团队。 简单来说，谁能做人工智能的创业 第一种，谁手中拥有互联网数据的这个是最了不起的，也就是BAT、滴滴、美图等等，他们手中有数据，而且已经标注，只要有科学家就可以产生价值。 第二种是传统企业，比如说股票的数据，比如说保险业、银行业，各种金融的。我觉得数据非常的丰富，而且是非常的狭窄领域，不用跨领域的理解，而且可以快速产生商业价值。再往下医学，如何看片子，看MRI，看CT，看各种人的健康记录一定是超过医生的，现在至少有3种重要的病症人工智能已经超越了医生的平均水平，而且你像这个是要花多少临床的时间，现在三种可能再过5年就是300种，再过10年可能就是3000种。然后90%的医生就都不需要了，至少被机器取代。那这些医生就要做更高等的工作，更深入的工作，去发掘新的医药的工作，或者是做更心理医疗的工作。面对病人，机器还是冷冰冰的，可能还需要一个人脸对着病人，但是90%的医生，在10年以后应该都打不过我们机器的诊断能力了。这对人类是有很大意义的，教育的数据也是很多的，就不多细讲。 最右边是无人驾驶。这是我们特别看好的领域，它是最大颠覆量的，以后都不需要人开车了。再加上电动车和共享经济，以后我们出门的时候，一辆坐一人的车就会出现在我们面前，它带我们去要去的地方，节能低碳，减少雾霾，而且这还会影响整个经济。如果大家谁有投资停车场的，十年以后就没有停车场了。所以，这些都有巨大的颠覆性。如果你们觉得听起来像是天方夜谭，像是科幻小说，那么你们也可以想一想，2009年当我告诉所有人移动互联网时代来临的时候，大部分人也是这样想的。甚至当时的BAT听了移动互联网的预测之后，他们总是认为没有PC大，没有PC赚钱，成长的会很慢。但现在你看他们一个个也都追上来了。所以人工智能是一个特别巨大的领域和机会。 我们到底该和谁学人工智能呢？ 世界上最懂人工智能的绝对是谷歌这个公司了。在一年前他就宣布了要做Alphabet这个母公司。什么是Alphabet呢？其实它就是把谷歌里面做搜索提炼出来的人工智能做成谷歌大脑，然后把它用到各种领域。用在围棋就成了AlphaGo，我们已经看到它的威力有多大了，用在汽车就是Google car，用在健康就是Google house用在基因检测就是Google genetics，所以在Alphabet上面，谷歌的野心就是要把一个谷歌的成功变成26个，这是一个特别有野心的人工智能的公司。 谷歌公司内部也是在用刚才所说的深度学习。这个图是来自谷歌的一个科学家，他对外演讲用的我们可以看到也是在这4年，他们才领悟了人工智能的价值和谷歌大脑的价值，收购了Deep Mind这样的公司。所以很明确的就是，谷歌的Alphabet这样的一个动作，绝对是它看到了机器学习可以进入各种领域的机会，这也是它所进行的一个很有野心的探索。 到底人工智能如何克服挑战产生竞争壁垒呢？ 第一，就是要寻找行业里面有特别大的大数据，然后是垄断性和闭环的。第二是买很多机器，尤其是CPU＋GPU。第三是有很厉害的深度学习的科学家。第四，虽然这些顶尖科学家很有价值，同样的小朋友也有价值。不过小朋友还不能创业，需要培训。人工智能很大的一个特色是速成，他不像是你去找一个化学科学家，或者说生物科技或者甚至是计算机领域的这个Networking 、Database之类的，非常难学。人工智能不一样，它很好学，前提是你一定要是一个数学天才。 怎么样让人工智能快速商业化 第一是做助手，而非取代人。第二是界面要用好，给很多结果，而不只是一个结果。第三草船借箭，要用户提供数据，如果你的数据不够。第四局限你的领域，不要做一个特别伟大的超级的技术。 中国的独特人工智能机会 中国在人工智能领域比移动互联网领域还适合创造世界顶尖的公司。第一个理由就是，中国人很适合做人工智能。第二，训练小朋友非常快速第三，传统企业的人工智能技术非常的弱第四个理由，因为中国市场大，互联网公司多，很多非AI的公司到了一定的规模，就开始需要AI。第五点，美国人工智能现在是绝对领先中国的，但是他们进不了中国，中国上面有各种理由。最后一点是中国对人工智能各方面的约束较少。 创新工场对人工智能有一个很完整的投资蓝图 第一个重点是大数据的机会第二个是语言方面第三呢，是传感器的降价非常的重要。最后是自动驾驶 创新工场在人工智能领域在做什么呢？ wonder workshop，它是一个人工智能的玩具。它可以跟着小朋友，就像现在的这个大疆新的机型，可以让它跟着你一样。甚至两个机器可以在一块玩等等，很有趣的。它是一个没有眼睛、耳朵、手与脚只是几个小轮子做的这样的一个机器人，我们认为这个领域也像Echo音响一样是有机会的。 找一批专家带一批学生，买大量的数据，数据也包括了金融交易的数据。AI时代的创业呢，都是科学家。 如何去做早期公司的投资 第一个怎么投资公司。刚才我已经说过了，要衡量它有没有大数据，然后有没有独特的大数据，不是买来的大数据，有没有科学家，有没有闭环，有没有很多机器。然后他做的这个领域，是不是可以产生商业价值的领域，还是一批科学家在瞎搞。这是第一个。看这些项目要小心，还有看机器人的项目，有眼睛耳朵手与脚的就千万不要再听了，虽然听起来很酷。无人驾驶可以去想想怎么去参与。 这是投公司的，投基金呢？投创新工场和真格基金就可以了。 至于买股票呢？我是美图的董事，可能下面不适合说，但是你应该知道我要说什么，我们看好美图，认可美图。 刚才也分享了，量化AI在国内的投资应该机会特别大，这不是一个人工智能投资，这是一个真的二级市场的投资，当然要避免一些法律所不允许的事情，但是机会还是很多。那么我们现在也在专门看这个量化AI投资，对于这些呢，如果有兴趣的我们也可以一起以后在别的机会一起探索。 我也给大家说了，过去两年，我所有的资产基本都是在创新工场里，除了一栋房子，创新工场，我所有的资产基本上都是交给机器人管理，都是用AI量化来管理。这个也就是告诉你我对这个领域是多么看好和认可。当然三年后这个领域可能就是红海了，只是说现在的机会是非常好的。当然我还有一支股票是例外的，是我孩子决定要投资的。就像如果说在移动互联网时代，二级市场最好的投资标的是ARM，人工智能的时代是什么？大家确实可以看一看NVIDIA。","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"AI","slug":"AI","permalink":"http://ipcreator.me/tags/AI/"}]},{"title":"新生 —— 七年就是一辈子","date":"2017-02-09T10:00:18.000Z","path":"2017/02/09/reborn-every-7-years/","text":"“我们的一生其实可以活很多辈子的…… —-李笑来” 没有任何工具能够直接令人进步。真正使人进步的其实只有两个字：践行。切记：只有行动才能发生改变。想到了，就按照正确的想法做了 —— 不管别人是否理解 —— 这就是践行。我这哪里是对自己狠啊？这根本就是对自己的爱惜啊！想到了，学到了，就当真了；当真了，就当真做了，且真的做到了，这才是践行。践行才是真正的学习与创作。讲道理的人很多，践行的人很少很少。 我们就好像计算机一样，通过不断打磨、升级概念与方法论来升级我们自己的操作系统； 我们相信通过学习获得重生 —— 对我们来说，七年就是一辈子。每一辈子都要至少习得一个重要的技能，进而获得不可逆的重生。第一年可以像苍蝇一样左冲右突，一旦找到了突破口就要像蜜蜂一样，朝着既定的方向不断飞行。习得任何技能的过程中，我们都知道刻意训练并不依赖任何运气，只要付出就有收获。越是早期，越应该花更多时间精力去学习（磨练技能）。我们就是相信学识决定一切。 我们崇尚自学，认为没有自学能力的人尚不成熟。我们学习学习再学习。我们向往更好的生活，我们相信本质上一切都依赖学识。我们相信一切的努力都遵循复利效应，只要有耐心，通过积累，就可以达到之前无法想象的效果。财富、能力、魅力，以及抵御变故的能量…… 都是靠积累获得的，都有复利效应。我们相信惊喜（serendipity）其实是复利效应的终极体现。我们总是尝试着融会贯通…… 学习其实很简单，核心只不过是深入理解最重要的概念，不断总结与之相关的方法论。这样的朴素总结，使得我们很容易量化自己的进步 —— 看看自己过去一段时间里习得、打磨的概念与方法论数量就可以了。衡量学习效果的标准也很清楚：生活没有随之改变，就是没学会、没学好 —— 因为只有践行才是唯一有效的学习手段。我们不需要榜样，我们要成为他人的榜样。 要经常全无功利地学习 —— 只有这样才有更多的意外好运。我们向任何人学习，只要他们有长处，我们知道研究别人的失败比研究别人的成功更有价值。 我们珍爱家人，知道那是我们与这个世界最重要的关联。我们珍惜朋友，清楚他们的价值，也时时刻刻在寻找战友；我们寻找共同的价值取向，我们渴望改变自己，也渴望与战友共同参与到这个世界的逐步变好的过程中。我们通过努力把学习变成乐趣，不仅是为了自己，更是为了下一代 —— 聪明不能通过基因遗传，但绝对靠环境的潜移默化影响。 我们不花时间与他人争论，我们只为了弄清楚事实而讨论。我们不鄙视他人的能力 —— 我们自己曾经也能力不足，我们倒是不怕自黑，不过，我们更愿意与那些欣赏我们的人共同成长。我们懂得如何调整焦点，我们会主动尝试从多个角度去看待问题；我们不会把时间浪费在无谓的情绪之中，我们会用时间精力改变那些能够改变的事情。 我们不是圣人，肯定不小心会犯错。做错了事，我们不会逃避，我们不会只用嘴道歉，我们会想办法尽力用行动去弥补，只有这样做才能证明我们是负责任的人。犯了错，我们会认错；若是当初选择错误，我们会接受后果。我们量力而行，我们知道自己不断进步是为了即便出了更大的错误或者麻烦，也依然有能力承担、承受。生活中我们早晚会遇到各式各样的问题，它也总是反复无常，在不同的情况下，我们可能会调整模式，在极端的逆境中，我们也会想办法不被击败。 掌握任何一项新的重要技能，都相当于重生。学了却没有改变生活，那其实就是根本没学会。 重生的手段倒也简单：学习。学习新技能、走入新领域，循环往复。 学习学习再学习 我所说的“学习学习再学习”，不是由三个动词构成的句子；在这个句子中，第一个学习是动词，第二个学习是名词，第三个学习是动词。所以我的意思是说：要先学会学习这件事儿然后再去接着学习，这样才真的有意思。真的不是“学啊学啊学”的意思，更不是所谓的“重要的事情要说三遍”…… 《把时间当作朋友》 一本讲“如何正常、正确思考”的书籍，而不是一本“时间管理书籍” —— 因为时间其实不可管理，所以还是最好管管自己罢。而所谓的成功，其实只不过是用正确的方式去做正确的事情，耐心等待正确的结果出现。所以必须学会正常、正确思考，否则想错了的话，就做错了事情，做错事情的时候，效率越高越可怕，不是吗？选择了正确的事情之后，正确的方式是什么呢？是“一切都靠积累”。 史蒂夫·乔布斯 “You can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future.”你无法连接未来的点，你只能连接过去的点。所以你只能也最好相信那些点终究会连起来。乔布斯就是把东西做到最好的人，这是他最可贵的地方。他是神一样的销售，他创造奇迹 —— 别人做不到他却做得到的事儿就是奇迹，这很朴素的道理。他把东西做到最好，好到什么程度呢？苹果也有很多不可理喻的地方，但不重要了，因为其它地方实在是太好了，好到用户无法舍弃的地步。就是这样。 李笑来当年我费尽周折应聘进入新东方，对我个人来说，是个突破。小时候学了点编程原理得过大奖却没能够被保送进清华但终究有点计算机常识；读了完全不喜欢的会计专业却因此收获了最重要的知识：概率和统计；因为本专业并不精湛所以毕业之后只能去做销售却因此锻炼了演讲能力 —— 就是这三点使得我在突破之后成为最受欢迎的老师。突破是突破了，这样的结果，其实并不是“设计”，却也不完全是“偶然”。 再后来的《把时间当作朋友》创作，对我个人来说也是一次突破。教写作不是我的计划与设计，只是教阅读的我听从领导安排去教大家不愿意教的课程 —— 没人愿意教写作课，都觉得费力不讨好。为了教好，自己就要学好，写好。前后写了大量的英文文章，反过来中文竟然写得比以前更清澈了，我自己也没想到。而最终提炼出“时间不可管理”，其实是在写作过程中闪现的“灵感” —— 这一点从我最初给那系列文章取的名字就看得出来：《管理我的时间》…… 在反复折腾中抵达了一个之前完全看不见、想不到的地方。 创建 Knewone，收割大量的比特币，创建比特基金，参与若干个创业项目，甚至像是玩票一样的 Telegram 第三方客户端 Dove…… 这些都是今天我正在做一个教育类社群的成因，但还是相同的类比：是破冰，而不是登山。哪怕在 2015 年的 10 月份，我还没有彻底明了我最终做出来的东西究竟是什么样的。整个破冰过程是 2015 年的 11 月才开始的，然后我就看到了另外一个之前完全无法想象的世界…… 很多道理上清楚正确的事情，却很少有人真的去做。 绝大多数人，差的其实只是一个机会和一点点的训练 —— 如若他真的有一颗不甘的心。恰当的机会、恰当的训练，就是可能让一个人脱胎换骨的 —— 就是我们反复提及的“重生”。 鸡汤 所谓的鸡汤，其实正确的概念名称应该是：进步方法论。 爱因斯坦 “Compound interest is the eighth wonder of the world. He who understands it, earns it … he who doesn’t … pays it.” 复利是世界第八大奇迹。知之者赚、不知之者被赚。 笨蛋 别笑，别以为自己不是笨蛋，我们每个人都有可能是，或者必然曾经是。 复利效应 万幸的、也是公平的是，每个人都一样，在智力上、知识上、经验上，复利效应依然存在的 —— 这是多么令人喜出望外的事实啊！只要能积累的东西，基本上最终都会产生复利效应。如果没有继承资产，那么就持续积累知识罢，我们运气真的很好。我们恰恰活在一个知识变现很容易、且越来越容易、且变现金额越来越大的时代。在没有继承资产的情况下。我选择了知识积累，并且笃信知识的效用 —— 我知道、我相信，在许多年后的某一天，知识会变现的，而且它一旦变现，很可能瞬间就能抵消过往所有的挫折。结果呢？所谓的“许多年之后”，在我 39 岁那年（2011）的时候来临了…… “逃逸速度”（Escape Velocity），又叫做第二宇宙速度（Second Cosmic Velocity） 第一宇宙速度是 7.9 km/s —— 用这个起始速度发射，航天器可以环绕地球飞行； 若是起始速度超过 11.2 km/s，即超过第二宇宙速度，那么航天器可以摆脱地球引力的束缚，飞离地球…… 第三宇宙速度，16.7 km/s，可以让航天器飞离太阳系， 第四宇宙速度，大约应该是 52.5 km/s，能飞离银河系…… 航天飞行器怎么飞起来的呢？科学家们要考虑的是这么几件事情，航天飞行器的重量、起始的速度、可携带的燃料数量 —— 要命的是燃料箱本身也有重量…… 所以，科学家们想出来的办法是，飞到一定高度之后，把一节燃料箱丢弃掉（jettison），降低飞行器的重量；再飞高一段距离之后，还要再丢掉另外一节燃料箱…… 知识是有能量的，且不受“重力加速度”的限制。 你的商业计划就是你的赚钱计划。 既然商业计划就是赚钱计划，这样朴素的描述，使得衡量商业计划的标准特别简单： 你可能赚到多少钱？你最快多久可能赚到那么多钱？注意措辞：是“可能”，不是必然，不是必须。另外，快不是一个单独的变量，数量和速度放在一起才有意义。获得经济自由的方法很简单：就是靠朴素的思考、朴素的方法论、朴素的践行 个人品牌 “个人品牌”的积累，从使用实名那一瞬间开始……认真给自己找乐子的人没办法不招别人喜欢。新鲜感其实完全是可以自己创造的麽！我今天的写作能力也是通过很长很长时间才磨炼出来的。你的苦没人知道。所以，从此坚决不抱怨。但凡有点办法的人，就忙着做事去了，抱怨、诉苦管啥用啊？这就是我的看法。没人害你，你也可能很倒霉。关键时刻，谁都帮不上忙，只能靠自己。 灵感灵感更多的时候是创作过程中获得的，而不是创作的起点。 评论 不删除评论是很重要的，先不说那些冠冕堂皇的话，比如， “你有表达的的自由，我有捍卫你表达的自由的权利”，只说说这对自己的用处：若是真能做到心平气和，那些反对你的和辱骂你的留言和评论，作用很多： 给你一些线索去理解那些人的思考方式； 偶尔你会发现自己的表达不清楚才招致误解； 还有些时候恰恰因为它们的存在而能确认自己确实是对的……绝对不删除任何评论，在那几年里给我带来了另外一个好处：性情真的淡定起来，开始变得很难生气或者难过。 情绪 许多年后，我一直觉得那段经历是我幸运的起点之一，因为我后来的淡定的性格，几乎真的是从那时候开始的，情绪的鸿沟，只要真正跨越一次，就真的不可逆了，因为你已经明白一个道理，情绪与目标无关，相对于“达成目标”只有行动才是相关事件。失败不可怕，可怕的是差一点成功了。关键时刻，不要掉链子，没人能帮你，只有靠自己。情绪这东西，百无一用，行动才是必须的。 主动、创造 我希望有一天我能够卖我自己创造的东西，而不是别人的东西。虽然我不知道我能创造什么，但我知道我要成为一个有创造产品能力的人。在那段时间里，我做出了我人生第一个重大的主动的选择。这次的选择，却是主动的。我在挣扎中看到了自己的未来，我必须成为一个有创造能力的人这次的选择，其实是含混的，我甚至不知道将来要创造的是什么，我只知道我必须成为能创造的人。从 28 岁那次的主动选择之后，做出主动选择的难度在不断降低，所以，这一次再做出一个主动选择就很自然了。所有的重生都是主动的选择。衡量一个人是否真正活着的根本方法，就是看他是否有意愿、有能力做出主动的选择。 自欺欺人 我在某次事件中义愤填膺地觉得“不公平！”，并且四处游说…… 可事后反思的时候，发现自己真正想要的只不过是“分一杯羹”。在自欺欺人的状态下，很多卑劣的行动好像一下子就“理直气壮”、“光明正大”了似的；等冷静下来开始反思的时候，觉得自己每个毛孔都是肮脏的……甚至连呼吸的声音都是猥琐的。高品质生活完全从停止自欺欺人开始……我逐渐开始意识到很多情况下，抢占道德制高点是特愚蠢的事情……人们抢占道德制高点，只不过是被“自欺欺人”的心理所左右。我开始不怕被人们用道德的理由指责我了，我甚至开始懒得争辩，他们说他们的，我做我的，他们舒服他们的，我舒服我的，其实可以互不干涉，只不过是他们以为他们的干涉有用而已，我要是像之前那样一不小心就真的被他们干涉了，那才不划算呢。 犯错 人总是会犯错的——本质上来看，对大多数人来说，这只是运气不好，因为故意犯错的人是坏人，不在考虑范围内。 犯了错之后，绝大多数人只用嘴道歉。 表现更为恶劣的是掩盖、撒谎、或想办法证明对方也不是个好人……这些人其实已经差不多是坏人了， 再下一步就是用嘴道歉之后得不到原谅就说你小心眼啊、没风度啊、不够意思啊什么的，这样的人比坏人还坏。 只有少数人在发现自己不小心犯了错之后，马上用嘴道歉，随后开始用行动道歉，弥补，直至一切恢复原状，甚至比原来更好——这其中可能需要付出很多代价，但他们知道这是自己必须做的，否则就不再是自己。 Live with it! —— 这是我在电影里听到的最震撼心灵的台词。是啊，很多事，最终就留在那里，好啊、坏啊，不重要，重要的是它们挥之不去，一辈子都与你相伴。我用了好几年的时间，才渐渐地感觉自己干净了一些，清爽了一些，也因此感觉自己真的重生了。那几年过后，我开始变得宽容起来 —— 真正的宽容 —— 因为我自己是“走出来的人”。那“自欺欺人”就像个牢笼，何止啊？干脆是个“Panopticon”，我自己走出来了，就好像成功越狱一样，当然明了走出来多难，当然知道在里面多苦，不是吗？ 严于律己、宽于律人，对我来说不再是一句“有道理的废话”，而是清楚的实践。而且，这其实是一种“自私的实践”。严于律己，其实等同于在提高自己的效率；严于律人，其实等同于降低自己的效率，或者用另外一个说法就是，允许他人拖累自己的效率。与此同时，严于律人的副产品常常只不过是“凭什么让他们占便宜？” 或者 “我也不必当个好人罢？” 之类的特别容易转换为行动的愚蠢想法。自我治疗成功的另外一个副作用是，从此不害怕追求进步了。从此不再容易自卑。 “年轻的时候做了蠢事是正常的” —— 何止“正常”啊，简直是“必然”。每个人在成长过程中都会做一些这样那样的蠢事，关键在于一个人是否能够成长到可以承担那些责任，修复那些错误的地步 —— 大多数人不能。没有人是完美的，没有人不曾做过蠢事，即便有一天在某方面成功，也要永远面对自己曾经做过的蠢事，也要 live with it，扛一辈子…… 自信 人要有自信，但，应该是对自己的未来有自信，而对现在的自己，对过去的自己，自信、自负、自卑其实都是无意义的，要现实才对 —— 错了就是错了，蠢了就是蠢了，把自己变得更好才能弥补那些错误，才能承担当初的愚蠢。我应该对自己的未来自信，而不是对自己的现状自信……我能够真心为了别人的进步和成功感到高兴，说明我终于有了真正的自信。衡量一个人是否真正自信，就看他是否能真心为他人的成功而毫无芥蒂地感到高兴。 自卑 该自卑的时候就得自卑。生活中遇到问题，就犹如遇到一个已经被锁上了的锁头，而那钥匙一定不在锁孔里，否则那锁头一拧钥匙就开了啊。遇到打不开的锁头，当然要到其他地方找钥匙，而不是盯着锁头发呆。找钥匙所耗费的时间可能很短，也可能很久。“彻底消灭自卑”的钥匙我找了三十多年…… 找到之后才觉得自己好笨啊！ 停止嘲弄他人 忘记自己的优点 适当地放纵一下自己 自省自省真的是个艰苦卓绝的事情，虽然说起来的时候总是可以做到显得云淡风轻…… 比较拿着现状与他人相互比较，必然总有这样那样的不足 —— 而比较带来的幸福感，通常也是虚妄的。即便是要比较，那被比较的对象也应该是“自己的现状”和“自己的未来”；而不是“自己的现状”与“别人的现状”。为了自己有更好的未来，所以今天必须足够努力，反过来，今天要更加努力，也正因此才对自己有更好的未来确信不疑。(又一次 X 值相对下降，Y 值相对提高……) 错过 错过的原因，无非是一个念头，一个当时想当然的念头而已。这是个活生生的“ 一念之差 ”的例子。想当然的念头，常常来自于周遭环境，一团乱糟糟的东西打成包，直接植入了自己的操作系统，最要命的是它们通常还处于底层，所以才想当然，所以它们的害处才不易察觉。比如，“学外语很难的！” 就是个这样的“想当然的念头”，被打包植入了我们的操作系统，乃至于我们不由自主地变傻了…… 观念 人与人的差异在哪里？在我看来主要是观念上的差异。上面让我错过一辈子的，就是个落后的观念：别人做不好的，我也别做了罢……很多影响我们一生的，竟然都是很小，却又不成比例地重要的环节。 想当然与认知读一本好书，基本上就是对操作系统的一次升级 ，或者起码一点的升级（叫“打补丁”也可以）。然后呢？有的人一年升级 50 次以上，有的人起码 12 次，也有的人好几年都不升级，后来干脆就那么对付着用了，却也不觉得自己落后且越来越心安……很多其实很重要的建议，常常只不过是因为陈述过于笼统而难以传递，难以接受，难以践行。找出那些想当然的念头，挨个审视一遍，看看它对不对？有没有道理？是否应该被升级，或者被替换？这事儿一定要仔细，因为那些不经审视就嵌入操作系统的“想当然”实在是太危险了…… 类比计算机 我们自己其实就是这样的计算机，“厂商”（我们的父母）并没有为我们提供详尽的说明书，也并不负责定期升级我们的操作系统 —— 即便他们并非故意……每个人的大脑里其实都有一个属于自己的操作系统，真的跟计算机一样！每个人都有一套属于自己的输入输出体系（IO 系统），有着一套属于自己的运行处理机制。人和人之间很不一样，就好像计算机和计算机之间也很不一样。有些人的中央处理器（头脑）更强大一些，有些人的内存容量（记忆力）更大一些，有些人的硬盘空间（笔记与藏书）更大一些，有些人的显示器（外表）更漂亮一点，有些人的打印机（写作能力）相对比较高效，有些人配置了网卡（沟通能力）所以可以连网，有些人则不连网，有些人的带宽（沟通有效性）很足，有些人的带宽很小，有点人在互联网上（开放），有的人在局域网里（封闭）…… 操作系统升级 绝大多数人的操作系统竟然从不更新！粗糙、原始的操作系统的主要特征是：它越差就越自洽，漏洞百出却又能持续运转，最关键的是：它没有任何自动升级的机制。我们的操作系统主要由概念及其相关方法论两个紧密相关的部分构成我们操作系统里 —— 描述正确的、理解完整的概念和方法论越多，我们理解新概念、新方法论的速度越快，融会贯通能力也越强……理解速度快了，阅读速度放慢一点，效率可能更高呢。只不过是不断清理自己的概念、扔掉该废弃的，不断吸收新的、有必要的概念，并且通过应用不断完善与那些概念相关的方法论。所谓的“成长”就是操作系统不断完善的过程；所谓的“重生”就是操作系统更新换代的节点；所谓的“不断再生”就是我们意识到这些操作系统更新换代的必要性，于是给自己设置提醒模式，给自己发展自动更新模式的持续动力。(比如给自己设定每七年要有一次大的更新换代……) 硬件升级 所有的体育运动本质上都是在升级“硬件”。熟练使用工具，也是“升级”硬件的一种方法。很多人长期不升级自己的“硬件”的根本原因只不过是“没想到”罢了。 教育就像一副眼镜。 戴上眼镜之前和之后，我们看到的其实是同样的世界；但带上眼镜之后，我们就能看得更清楚。教育也一样，受教育之前与之后，我们身处的其实是同样的世界；可受教育之后，我们就能看得更清楚，想得更明白，选择得更有效，行动起来更有收获…… 科学与信息 VS 房子与砖头 科学确实是由信息构成的，正如房子是用砖头盖的一样。可问题在于，正如仅仅一堆砖头放在那里的时候我们不能称其为房子一样，一堆信息放在一块儿就叫科学，有点不像话…… 创造类比 创造类比本身就是难度很高的活动，一般人做不来 首先要有足够的知识、信息储备，才能在理解新事物的时候找到真正合适的、最恰当的那个“参照物”； 之所以能找到最恰当的，不仅仅是找到最“像”的那个，还要仔细搞清楚“不像”的地方究竟有哪些，以免在传递信息的时候出现偏差……类比也常常是产生“融会贯通”的手段。学会任何一个概念、方法论之后，都要问自己：这个道理还能用在什么地方？ 幸福 VS 商业 … all happy families are alike and all unhappy families are unhappy in their own special way, is not true in business, where I think all happy companies are different because they’re doing something very unique. All unhappy companies are alike because they failed to escape the essential sameness in competition.（这是个反向类比——即，你别以为它们一样，其实它们刚好相反……） ……据说，幸福婚姻都是一样的，不幸的婚姻各有各自的不幸；在商业世界里不是这样的，我倒是认为所有的幸福公司都是不一样的，因为他们都在做不同的事情。而所有不行的公司倒是一样的，因为他们都没能脱离竞争的相同窘境。 编辑 VS 管理 So one of the most important things I learned at Square is the concept of editing. And this is the best metaphor I have ever seen in 14 years of running stuff, of how to think about your job. 所以我在 Square 学到的最重要事情之一就是“编辑”的概念 —— 这是过去我在管理员工的 14 年经历中所遇到的关于如何看待（管理者）工作的最好隐喻（类比）。 “像”与“是”不小心混淆了“像”与“是”的人，在用类比理解新事物的时候，接着下一步要犯的错误就是“以偏概全” —— 因为新事物已经等同于（是）旧事物了，那就没什么需要“理解”的了嘛！更没有了继续研究得必要……理解了那“像”的部分之后，还要继续探究那些“不像”的部分，新事物之所以新，就是因为那些“不像”旧事物的部分啊！在面对新事物的时候，我总是告诫自己，暂时先克制寻找类比的冲动，因为不恰当的类比还不如没有类比，甚至，不恰当的类比干脆相当于有毒，会麻醉我们的大脑，阻止我们有效地思考。我总觉得，在对新事物有了足够的了解之后再去找类比不迟；而对新事物有足够的了解，也是有能力找到精妙类比的前提，万一找到了，可以自己用来辅助面向他人的说明，或者作为帮助他人的辅助理解工具…… 找不到很好的类比，也很正常。好的、精妙的类比超级炫酷，可还是要小心为妙，因为类比真的影响思维。 成功类比 好像人们都喜欢用“登山”去比喻成功的路径，也许“攀登”这个词本身就给人“进取”的印象罢。 可是长期以来，我觉得我所遇到的所有成功与突破，都更像是破冰。我总觉得自己站在一个冰原之上，特别想要把脚下的冰砸开…… 可无论是我使劲跺脚也好，满地打滚也罢，我总是没办法一下子成功，一下子突破。若非换个视角，或者谁给我个透视镜，我真不知道那冰实在是太厚了…… 往往是就好像我在冰原上四处游荡，四处猛砸，猛凿，有时深，有时浅，有时候甚至可以从冰缝或者冰洞里看到冰下的水，可那冰就是那么坚实，我死活都没办法破冰而入…… 还记得美剧越狱里主角是怎样运用胡克定律凿开那堵厚厚的、“坚不可摧”的墙的吗？ 终于破冰的那一瞬间，我的感觉就是，过往我砸过的、凿过冰缝、冰洞，终于以某种方式（几乎肯定是我之前完全不知道的方式）形成了一个三角，力学原理瞬间爆发，那冰一下子大面积破开…… 于是，我终于“入水”了。把登山当作类比，与把破冰当作类比，有一点不一样的地方。把登山当作类比的时候，我们会不由自主地以为“突破”是看得到目标的事情 —— 因为山顶就在那里。把破冰当作类比的时候，我就很自然地不太在意那个可以看得见、想得到的目标，很理直气壮地明白：我要去的是一个现在完全看不到的地方，但肯定是不一样的世界。 概念 概念是一切知识的基石我们要持续升级概念及其相关方法论我们描述一个人能力不够，或者全无能力的时候，经常这么说：xxx 在 yyy 方面根本没概念。司机坐在车里，有完全看不到的盲区车这东西，真不是司机想停下来的时候就能瞬间停下来的……行人在晚上穿着暗色衣服在路边走非常危险……在任何一个领域，对该领域中重要的概念无知，那就真的与白痴无异学习就是让自己变聪明的过程，习得那个领域中最重要的概念，琢磨清楚相关的方法论，就马上“不那么白痴了”。“上火”就是一个早就应该抛弃了的概念，正确的概念是“炎症”，或者“维生素供应不足”。 独立思考 能够独立地、正确地使用正确的概念。 读书 这么厚厚一本书，其实就那么几个概念；讲一个概念就要花费一个章节的篇幅，从结构上来看，其实讲的都一样，无非是一个接一个的概念，要说清楚它是什么，它不是什么，它和别的概念有什么异同；然后就是与它相关的方法论，比如，使用的时候需要注意什么，怎样使用是正确的，怎样使用是错误的，容易发生错误的地方是什么…… 这些都弄明白了，一个概念就算是学透了，这些概念都弄明白了，这本书算是看懂了，就这么简单。 那些之前属于“死记硬背”的东西，其实相当于给自己的大脑安装了很多个“传感器”，一旦听到有人提到它们，因为熟悉，脑子里就会有反应。若是之前完全没有过死记硬背，那些概念在脑子里根本不存在，那么在走神的时候，即便有人在身边提到那个东西，大脑也全然不会有所反应。 教育 今天学了什么呀？那 xxx 是 yyy 吗？那 xxx 为什么不是 yyy 呀？那 yyy 有什么用处啊？那我这么用 yyy 可不可以啊？今天有谁把 yyy 用错了啊？…… 阅读速度真正有意义值得研究的概念是：理解速度。输入是为了处理啊，胡乱处理，甚至无法处理，输入了也没用啊！读书不是吃东西啊，读书就算有点像吃东西，那也是要消化了之后再排泄啊！不消化很难受的好不好？若是阅读速度快就可以了的话，那么谁都拼不过复印机了罢？开什么玩笑？！ 固守与进取人分为两种，一种是固守型的（Be Good Type），一种是进取型的（Be Better Type）。这两种人的主要区别在于，他们做事的时候，关注的焦点不一样：固守型的人（Be Good Type）更关注自己当时的表现，更在意外界对那表现的看法；进取型的人（Be Better Type）更关注自己当时有无进步，并不在意对外界的看法； 第一种人过分在意自己当时当刻的表现，直接带来的结果就是，如果“感觉有可能做不好”，就直接不做了 —— 省的丢人。第二种人常常并不在意外界的看法，他们知道自己有可能做得并不好，但这并不妨碍他们进步，只要下一次比这一次更好，就是他们想要的结果。他们更习惯于接受挑战，处理压力，更懂得积累的好处。 面对同样的压力，这两种人会做出截然相反的选择。固守型的人，在压力下表现会更差，表现差会进一步导致他全方位溃退。进取型的人，在压力下反倒可能更有动力，因为历史经验反复告诉他自己总会越来越好的…… X和Y评测 固守型、进取型这两个重要的概念来自于一本书，《成功，动机与目标》(Succeed: How Can We Reach Our Goals, by Heidi Grant Halvorson)。Halvorson 博士在书中给出了一个小调查文件，用来让读者自行判断自己究竟属于哪一种人：认真地问自己以下问题，如实地回答自己，给每一个问题打分。一点都不同意，是1分，非常正确是6分。 功课或者工作比同学、同事做的更好对我来说非常重要。 我喜欢能让我更了解自己的朋友，尽管有时候得到的不是正面信息。 我常常寻找开发新技能、汲取新知识的机会。 我很在乎是否给人留下好印象。 展示自己的聪明才智与能力对我来说很重要。 我努力和朋友及熟人保持开诚布公的关系。 我努力在学校或者工作中不断学习与进步。 当我和其他人在一起时，我很在意给别人留下的印象如何。 当我知道别人喜欢我时，自我感觉会很好。 我试图比同学或同事更出色。 我喜欢别人挑战我，从而使我成长。 在上学或上班时，我注重施展我的本领。 现在请把第1、4、5、8、9、10、12题的得分相加之后除以7，记为 X。再把第2、3、6、7、11题的得分想家之后除以5，记为 Y。最终，你的得分中，X 和 Y 哪个数值更大呢？X 数值更大的人倾向于“表现导向”（Be-Good Type）；而 Y 数值更大的人倾向于“进步导向”（Be-Better Type）。 有个简便的方法判断一个人的 X 值是否过高？“你只要看他是否害怕被他人嘲弄？”固守型这类人的主要特征是“死要面子活受罪”，但更为可怕的是，他们无法进步。 压力 致命的不是压力本身，而是压力与观念（认为压力有害健康甚至致命）的组合。“很多人其实是被自己慢慢吓死的……”人就是这样一种动物：”心理与生理相互影响。” 成长 学会了哪些原本不知道的概念和方法论？？哪些已有的概念和方法论被进一步打磨了？这样的描述使得“成长”多少可被量化 —— “可量化”很重要，因为量化的结果是最好的反馈。成长从来都是需要过程的（常常是漫长的过程），需要不断有足够的反馈机制去激励。成长可量化了，它就有了足够的动力。而这本身，也是“成长与重生的方法论”。一切都是学识决定的。很多的时候，所谓的耐心、所谓的沉得住气，其实是学识 —— 学识决定一切。 非议、争论，与鄙视链 所谓的“超常的应急反应”其实是可以提前通过各种假想和预演提前反复练习的……善恶其实是次要的。所谓“人人心里有杆秤”——那秤称的其实是强弱。面对非议的时候，真正要解决的问题不是去辩解，而是想办法让自己变得更强。弱者的逻辑都一样，奇葩而又自洽爷又不是人民币，怎么可能谁都喜欢？自己错了，就承认，并且想办法承担后果 —— 我觉得大丈夫就应该这样。而别人错了，承认与承担都是别人的事情，用不着我去操心；如果那错造成了我的损失，可也无法上升到法律保护高度，那我就懒得追究 —— 因为我自认自己的时间精力更为宝贵，不应该浪费在这样的地方，甚至连生气的必要都没有，大好的人生在等着自己，哪里有功夫理会那些？你所处在的那个位置，常常会决定你的视角“有些事情跟处女就不要说了罢” —— 这是一个很好的类比，因为有些人的立场，是不可能有另外一些体验、经历所支持的。这是一方面，于此同时，“有些话跟已经离婚的人就别说了罢” —— 这还是个很好的类比，因为有些人的立场，是不再可能有另外一些体验经历所支持的，因为他们已经确定不会有“百年好合”的结果了。 你手里攥着某个公司的股票（数量很多），那么你的立场就与那些光说不练的股评师不同；跟那些买一点见好就收的短线操作者不同；其实你的立场通常也与董事会那些大股东非常不同…… 在这种情况下，有些争论，其实并不是道理上的冲突，只不过是视角不同、层面不同而已。 最终的数据表明，无论是哪一方都得到了印证自己想法的结果…相信“压力影响健康”的人，健康就真的受到了影响；相信“压力不影响健康”的人，健康就真的没有受到影响 ——这种观念影响结局的现象，使得有些争论永无平息之日，因为从争论双方各自的视角来看，自己都是天经地义地正确的！ 讨论的目标是为了让自己更明白争论的目标是为了彻底说服对方 争论的冲动常常来于自己的弱小。人微易怒。弱小的个体更容易闹情绪，若是有情绪掺杂，那么言论就越发地不靠谱，不靠谱的言论又掺杂着更多的情绪，恶性循环生生不息。彻底逃离鄙视链。有些事情，尤其是倒霉事情，其实是自找的鄙视链也是一样的，那是个循环嵌套的局，一旦置身其中，必然会反过来被鄙视，早晚而已，私下或者公开，谁都逃不掉。不想被鄙视，就别在那个局里。事实上，即便你挣扎着脱离了那个局，一样会被莫名其妙的人鄙视，只不过，因为你自己不在那个局里，所以你清醒，所以你知道，那鄙视是那个人的幻觉，跟你完全没关系。时常反省，就会知道鄙视与争论一样，通常是自身弱小才更容易产生的冲动，常常是自欺欺人的表现。嗯，被鄙视，其实是自找的。 计算机 计算机是由我们人类中的极少数极少数人 —— 比例上来看可能连千万分之一都不到 —— 发明并持续研究完善出来的东西。所以，我们从计算机上可以学到的，其实是极少数极少数聪明人的思维方式和方法论。 通信协议 不同的操作系统之间的通讯，是需要共同的协议支撑的，不使用共同的协议的计算机之间没办法通讯。在互联网上，最常见的协议是 TCP/IP 协议。TCP/IP 协议的运行机理大致如下：网络上有很多台计算机（A ~ Z）相互联网，它们之间使用相同的协议传输数据……A 若是需要传输数据给 Z，那么之前需要 A 与 Z 握手三次，才能确定连接有效…… A 必须先把数据切分成若干个小的数据块，然后逐一传输出去…… A 送出的每个小数据块，到达 Z 的路径每次都可能并不相同：不一定是直接的 A-Z，可能是 A-B-X-Z，可能是 A-X-C-Z，也可能是 A-B-C-Z…… 反正是个各自相通的网络么，所以，无论选择什么路径，只要能够到达就可以…… Z 一旦收到了小数据块，会发出回执，A 收到上一条回执之后就会发出下一条，若是在设定的时间窗口中未获得回执，则判定传输失败，放弃继续传输…… 直至所有数据块全部发送完毕，A 收到所有收据之后，再发出一个“发送完毕”的消息（这个消息也会返回一个收据），Z 在另外一端再把所有数据块按照顺序拼起来，形成一个完整的数据…… 沟通借鉴 很多事儿，其实很复杂，想要一下子说明白，一下子让对方想通，是很难的，甚至是不可能的。那怎么办？必须把整个事情提前拆分好，分清楚主次，分清楚先后，然后一件一件地来，并且在这过程中，还要反复确认确实沟通成功才能进行下一步……沟通成功的关键在于：双方都是讲道理的人（就是肯遵守协议的人）。 我要做好至少尝试确认三次是否真的可以开始沟通； 沟通有很多种方式(至少有直接沟通和间接沟通两种)，不能局限在特定的某种方式上； 我要有个办法确认每次沟通确实成功； 如果事儿足够大，我就会切块，分步沟通； 总而言之每个环节上都一定要有清楚的确认机制…… 夫妻为什么吵架 在选择伴侣的时候，最好……寻找同级别的操作系统；要升级就大家一块儿升级……“门当户对”，其实就可能是为了找到“合适的、可兼容的操作系统”“三观不和最伤感情了……”，其实真的不是玩笑。的确如此，从某个角度望过去，所谓的三观，就是在说操作系统的一部分。保持对异性的魅力的方法其实很简单：持续学习，不断进步。为什么婚姻中普遍存在所谓的“七年之痒”？我的解释是很简单：七年就是一辈子，一辈子都过去了，下辈子还要过同样的生活，多腻歪啊。 底层概念差异 主次不分 价值观不同 立场不同 历史不同 无仲裁夫妻不吵架或者逐步减少吵架频率的方法论无非是：共同“创建”协议，共同”遵守”协议，共同”升级”协议…… 身边还有很多原本应该很亲近但实际上却不那么亲近的人 —— 亲戚。不知道为什么，我发现亲戚竟然是最难与之共同成长群体，也许是现代人的生活结构发生了变化罢。另外一个群体也是如此，老同学 —— 明明心里有那么多的亲近之感，但确实早就失去了共同成长的机会。那怎么办？在自己的大脑里也多创建几个虚拟机才对啊！这真是非常先进的方法论！—— 说多少遍都不过份：向计算机科学学习思考，等同于向地球上最聪明的人学习思考……教书的时候，之所以被学生“感觉教得好”，无非就是相当于我在脑子里开启了一个与他们一样操作系统的虚拟机，所以我知道他们跑出来的结果是什么样的，所以我才有清楚的解决方案啊…… 有规定没问题啊，拿出来给我看看呗……先说清楚啊，我一会儿哪怕嗓门大了，也不是针对你个人，是被你们公司气的…… 生气，是最浪费时间的行为。浪费的不仅仅是气头上的那一段时间，更为可怕的是在气头上做的决定常常连带一个很微妙且又复杂当期影响，最可怕的是，这个影响其实很容易产生“复利效应”，我的意思是说，“负面的复利效应”……首先，不能生气。其次，在不生气的情况下，偶尔可以假装生气，这是工具。再次，一定要先表明立场和态度。最后，只说道理上百分之百站得住脚的话。 多赚钱，快赚钱，有钱到吃得起亏的地步。吃不起亏，就很容易生气；很生气，就很容易失控，最终无法解决问题，既浪费了时间，又不得不接受不好的结果，于是恶性循环……哪里有什么好脾气啊，只有想的明白和想不明白…… 因为想不明白而抓耳挠腮的时候多的去了，实际上，我自己天天都有生气的时候，气自己为什么那么笨，连这点问题都解决不了…… 能解决问题就不用生气了罢。 什么是朋友？ 朋友就是那些与我们共度时光，让我们感觉温暖，让我们心甘情愿地付出的人。而这里所说的付出，常常是我愿意花时间、花精力主动联络，主动维系友谊的那些人。因为老朋友的稀缺性，自己开始为这个类别增加了一个原则：轻易不跟他们产生合作关系，生怕伤到这个稀缺的存在。不是不，而是轻易不，这其实是一种尊重。成熟的特征就是独立，独立的意思是说，生活上、经济上越来越不依赖朋友的存在，朋友更多是精神上的需求。 朋友就是那些愿意与我交往，并且我也钦佩的人。朋友就是那些我愿意花时间与精力，与之共同做成至少一件事儿的人。 对朋友、友情的定义，其实背后是一个很简单很清晰的过程： 依附 独立 共生 友谊中最有价值的部分来自于各自的成长或者共同成长。 维系任何一个关系，都需要有一个主动的人存在，否则，总会渐渐淡忘。这当然也是很多朋友这么长时间以来一直能跟我保持联系的重要原因。每个人的时间都有限，必须认真选择值得花时间的人，否则不划算。于是，我有了几个简单的标准，作为我甄别朋友的方法论： 一技之长追求进步真诚热情 所谓的大牛，就是那些有能力构建自己的世界的人。用嘴道歉的人不值得交往，用行动道歉的人遇到一个就要珍惜一个。 所谓的情商，指的是一个人有多大的能力去创造共赢局面。不要说多人，就是两个人交往，也最好尽量避免求人的状态，这样的关系没办法长久。最好是能够创造一个两人共赢的局面，各自都开心。这不太容易做到，但肯定值得为此多花时间做功课。 有些人别说战友了，连朋友都做不得，尤其是那种“死要面子活受罪”的人。他们总是毫无主张（就是其实没脑子），遇事总是各种纠结（还是没脑子），要么唉声叹气地抱怨，要么无能地暴跳如雷（反正就是没脑子）……遇到这种人，一定要当机立断地断舍离，顶多偶尔为他们打开一个虚拟机，应付一下，但有一扇大门一定要直接关掉，让他们绝对没办法进入属于你的那个领域。 朋友不会自动变为战友。要满足以下几个条件或者经过以下几个阶段，朋友才可能转变成战友：共同目标并肩战斗共享成果 找到共同的目标，并且经过沟通，确立共同的目标，这很重要 —— 否则没有战斗，就算有也是各自的战斗。有了共同的目标，才有并肩战斗，才有同甘共苦，才有荣辱与共，才有出生入死，才有共进退……没有共同目标的，不是战友，是狐朋狗友，不是团队，是团伙。所谓战斗力，长期来看，是脑力，而不是体力，核心是学习能力。要先把自己变成战士，然后才有资格寻找到其他的战士，找到共同目标之后，成为战友，然后共同浴血奋战，达成成就。看看历史书吧，有一个生死战友，就很厉害了，陈胜、吴广，各自只有一个真正的生死战友；有两个生死战友，就可以桃园三结义了……创个业什么的，根本不是什么事儿罢？所谓的领导力，其实就是带着战友战斗，然后自己成长，也帮助他们成长，帮助战友再找到战友……两三个层级下来，就形成了一个真正的团队。 真正有用的书，一本就可能完全改变生活 做出真正好的东西，销售就好像是不存在了一样，放在那里就行 —— 为什么呢？因为这是互联网时代。《把时间当作朋友》更是印证了这个看法，在免费版一直放在网上的情况下，印刷版销量一样也是多年逐步攀升。 把东西做到真好，直至最好，其实是最省心、最省时的方法论。它若是真的已经最好了，任何“推销”都是没必要的。不用费心给别人理论为什么我这个东西最好，也不用理论为什么你一定要买我的东西…… 完全不用。 不学习就要挨打，这肯定是真的。 做出最好的东西，不是不讲理，而是不用讲理了 —— 因为把东西做到最好，就是最大的理，这事儿都做完了，还有啥可讲的？你都把东西做到最好了，还有人说三道四，那就随他们去罢，忽略他们，过滤掉他们，没时间跟他们打交道，就是这样。 这是一个物资极为丰富的时代，这是个任何人都可以光明正大赚到足够多钱的时代。在这样的一个时代里，没必要偷偷摸摸地赚钱，没必要昧着良心做事，没必要靠着雕虫小计讨生活。我希望这不是技巧。这应该只是一个习惯：把客户真的当作好朋友。真的做到这点，你就会发现自己的整个想法都可能变了。别说不好意思，你就是不愿意把不好的东西卖给朋友的。甚至即便是好东西，也要三思而行，万一有什么闪失怎么办？别说卖了，哪怕推荐都要自然而然地三思而行。 那些酒肉朋友，那些平日里跟你热闹的人，绝大多数都是靠不住的。 把东西做到最好的人，往往能自然而然地享受这世上看起来最好的一种状态：头上有光环。光环效应同时可能是毁人的。光环效应之所以存在，并且能量巨大，本质上就是因为绝大多数人无能力判断，甚至不知道自己其实完全无能力判断。于是，光环效应是迷惑人的，但创造者要抵御这股力量，不能被自己的光环晃瞎了自己的眼镜，灼坏了自己的脑子，要想尽一切办法继续做出更好的东西。 说服他人有两个重要的终极诀窍。践行，才是真正的学习；也只有践行，才可能带来真正的改变；只有改变，才会成为榜样。若是已经成为了榜样，根本不需要说服过程，用不着费那些口舌。就是这样。榜样其实不需要完美。只需要确实不断进步，就已经是神一样的榜样了……有效沟通，真的很难。与其花时间精力推销，还真不如把那时间花在自己身上，默默地成为榜样好了。 第一个：让对方自己得出结论，而不是把结论塞给对方。第二个，实际上是第一个的升级版：自己成为榜样，对方若是认同，自然就会追随。 解决问题 解决问题的能力，是人生最重要的能力。遇到解决不了的问题，就烦恼，就痛苦；同样遇到问题，别人解决不了，你能解决，那你就高人一等；别人都解决不了，只有你能解决，那你就可以算作英雄了 —— 这么说并不夸张，因为历史上所有的英雄，本质上来看其实都是解决问题的高手。 （一）有些问题是永远解决不了的（二）有些问题是不用解决的（三）有些问题可能会自动消失（四）有些问题是自己造成的（五）有些问题是其他人的问题（六）有些问题是所有人的问题（七）大多数问题需要特定的人解决 面对永存问题，尽力就好。 “魔鬼在细节之中”，换个朴素的说法：细节很重要。说实话，我并不反对这个建议，但我很少把它当回事儿 —— 更多情况下，我觉得“细节很重要”是用来吓唬那些没做成过事儿甚至压根就没做过事儿的人的。因为最重要的东西没做好，细节再好没用。看看素描初学者的作品就知道了，看着石膏雕塑在纸上把头像上的某一只眼睛画得精准是完全没用的……永远问自己，“什么是最重要的？” —— 先去做那些真正重要、最重要的事儿，先去解决那些真正重要、最重要的问题，至于细节么，那是要等到前面那些事儿做完之后再去做的事情……所以，有些问题不用解决，至少不用在最重要的问题被解决之前解决。 完美主义彻底的完美主义者都是脆弱的。 事实上也确实如此，彻头彻尾的完美主义者是不懂“永存问题”这个概念的，他们离这世界的真相太远，又不自知，于是脑子里追求完美，行动上永远做不到，真的是压力山大，最终都有自杀倾向，这是事实。 演讲 最重要的是什么？ 最重要的是我要有足够好的内容。在讲演的时候，什么是足够好的内容？ 我有没有向听众传递他们之前未知的信息？（已知 vs. 未知） 我有没有向听众传递他们之前未重视的信息？（次要 vs. 重要） 我有没有向听众传递理解足够简单应用足够容易的方法论？（简单 vs. 复杂） 有一点问题就坐立不安的人，本质上只是天真。一般来说，公司内部的问题，基本上都是由于发展不够快，或者发展放缓造成的，够快地发展，持续地发展，相当于免疫力，大多数问题只不过是感冒，甚至不需要治疗，它们并不是癌症晚期之类的不治之症。 英语学习很多人问我，零基础如何开始学英语…… 我很难回答，因为我知道， 大多数人根本不是零基础，而是负基础 —— 这是我不太敢告诉他们的事情。很多人岁数一大把了（二十一岁在我眼里就是三把岁数了……），母语的语文功底还是几近于零，还想学外语，这不是负基础嘛！因为，所有语言的基础元素都是相通的，尽管细节上有差异…… 绝大多数人的母语是完全不过关的，只不过处于“识字而已”的水平 文章逻辑复杂一点，就各种凌乱，读不懂； 文章篇幅稍微长一点，就根本没耐心看完； 自己从来写不出一篇完整的文章； 大多数人看别人写的文章只能不服气，却无法做到有理有据地反驳重点； 很多人连个产品说明书都读不懂； 连个租房合同都不会写，甚至不会读，最终要去打官司，然后还要吃亏； 别说读书学习了，就是读个小说看个电影消遣一下，也常常被带入阴沟而不自知…… 基础很重要！ 这么朴素、简单、有效的建议，绝大多数人这一生都没听进去过 —— 然后，最令人啼笑皆非的是，一生都要为此付出巨大代价却又从不自知。 比如，国内校外英语培训机构的所有收入都来自于那些“一辈子都没学会主动查字典、用语法书的人” —— 这是个可以生出若干个上市公司的庞大产业，我从来不觉得那是教育，我只觉得那是在欺负人…… 不过，被欺负的人们在被欺负这件事儿上倒是主动得很，甚至享受得很，这真是颇有些令人意外。 再比如，各种庞氏骗局，连绵不断，生生不息。为什么呢？很多人没有过恰当的基础理财教育，不懂得 a) 10% 以上的利息就已经开始伴随着巨大的风险，不懂得 b) 本金安全比收益更重要（重要很多倍！）…… 就是这么两个基础概念的缺失，造成了一片又一片的受害者，业内叫“一茬又一茬的韭菜”…… “不一样”的观念 时间就是不可管理的，管理时间的意愿和炼丹求长生没啥太大区别…… 与其控制情绪，不如继续求知，学识才决定人的品行和生活的品质…… 外语发音不好，甚至说不流利又怎样？我使用外语的最大用途是阅读…… 写作技巧都不重要，践行才是创作呢……我就这样把自己活成了行为艺术家…… 想要学什么，我就去教什么，反正我学得快，至少比大多数人的学习经验更多一些，学习时间更长一些…… 谁说不能同时做好几件事情？我跑步的时候还听音乐呢，我走路的时候还听电子书呢，我甚至在写文章的时候也同时看电影呢！DOS 就是理解不了 Unix 罢？ 法定假日是限制企业的，不是限制我个人的，谁说过年之外我就不能回家看望父母了？ 有时候效率并不重要，长期努力更重要，音乐认知上我有过脑受损，但三十年过去了，不也恢复了不少吗？ 为什么要坚持锻炼呢？答案是： 本金最重要。 反思自己年轻的时候，少不经事，不懂得这个道理，于是，浪费了很多时间精力和情绪在自己其实压根就无法解决的问题上，也把很多时间精力和情绪寄托在他人身上，以为他们可以帮我们解决问题， 甚至错误地把责任横加在他们头上 ，想想真是浪费，也真是不应该。 正确的方法论可能是这样： 一方面，专注于自己的进步，让自己成为能解决更多问题、更大问题的人—— 只要时间足够久，进步是一定的； 把自己能解决的问题，都给解决了，为了自己，也为了别人。 另一方面，在自己的能力范围内，尽量帮助那些可能解决很大问题的人。但必须牢记，解决那些问题，可能并不是此人的责任，也不一定是此人能有的运气。 所谓的“平和”只不过是认真思考的结果。 惊喜与创造惊喜的方法论 你必须相信你自己会有好运的什么时候开始笃信自己将来一定会有好运的呢？大学的时候认真研究概率论的时候。如果生活在一定程度上是随机的，而有些事件是好的，有些事件是坏的，那么无论我现在遇到过的坏事儿有多少，好事儿还是会出现的，大小不同而已，早晚而已。这是多简单的道理啊！乐观是一种需要时间、需要耐心才能生成的一种态度。 为什么倒霉事儿相对较多呢？两个主要的原因， 没能力和实力做出 主动的选择 没有足够完善的逻辑思考能力所谓“尽量不做可能倒霉的事情”，其实只不过是打磨自己的逻辑思考能力，使其完善，乃至于你不大可能去做未来可能产生恶果的事情。 笃信逻辑，精于推演，是 活在未来的关键。有些事情，有些选择，在做的那一瞬间，就注定了未来一定会倒霉，这样的事情不能去做。我做事情，该公开的都是公开的；此为其一，其二，我不做需要别人给我保密的事情，那样没劲。 不要给自己建造围墙。围墙的作用除了可能提供一些庇护之外，更大的作用是让别人走不进来、也让你走不出去。开放（Open）就是可以创造好运和惊喜的，无论在哪个领域。 比特币这个例子我说过好多次了，我在 Twitter 上 Follow 了 18,000+ 账户，为什么呢？因为我不觉得预先筛选信息对我有好处。而且从逻辑上看，我们明明要的是 信息 ，却通过 人 来过滤，这是效率相当低下的方式。 迄今为止，别人能看到的，在我身上发生的最大惊喜，就是比特币。 ……当然还有更大的惊喜，只不过我没必要告诉别人而已。我怎么知道比特币的啊？这并不完全是意外，一定程度上，这是我特有的方法论的结果。就是因为我 Follow 了那么多人，我才会有机会“随便扫了一眼，看到一个惊悚的新闻标题”： “这个虚拟币价格超过了一美元！”有些东西、有些知识，一旦知道了，就是不可逆的，你不可能从此装作不知道。于是我就开始去研究这个东西去了…… 可问题是，如果我像绝大多数人一样，给自己建个围墙，提前过滤了很多信息，只关注自己觉得重要的人物，那么我估计早晚也会知道比特币的 —— 许多年后呗。 学习，从来都是创造惊喜、创造好运的最优路径。每个真正习得过技能的人终究有一天会发出惊叹：真没想到在这里可以用上！ 学习 就是掌握一系列新的 概念 。那么为什么持续学习一定会产生好运和惊喜呢？理由也很简单， 只有概念多到一定程度的时候，它们之间才有机会产生“意外的连接” —— 即，所谓的融会贯通。学习就是反复打磨概念与方法论，等着注定的惊喜注定地发生。 只有节点多到一定程度，才可能有“意外的连接”出现。要想办法认识很多真正拥有高效率的操作系统的人。 交流，可能是坐下来喝茶，也可能是读对方的文字，更可能是长期观察。甄别出那些有属于自己的高效操作系统的人，甄别出那些愿意打磨自己的操作系统的人，遇到了，必须 马上连接。 一旦概率论确立，这世界上开始有一些人能够理解随机的概念，开始明白 这世上有些事儿是不讲因果的 。 你抛一个硬币，结果是正面，为什么呢？为什么不是反面呢？不是因为你抛了一个硬币，也不是因为你上一次抛硬币的结果是反面…… 没有原因。反过来，当你抛出一个硬币的时候，因为我们知道那是随机事件，所以我们也知道那结果不是正面就是反面，至于究竟是哪一面，概率是 1:1 —— 虽然我们不知道确切的结果，但我们确切地知道可能性。 学习的时候不要问有什么用，因为不一定在将来在什么时候在什么地方会用到。本质上来看，这也是一种放弃直接因果判断，利用一定的随机性创造惊喜的方法论。 在一些时候，在一定程度上，跨越因果思考与判断，在生活、工作、学习中添加一点随机性，就是创造惊喜的方法论。 一定要想办法把自己打造成一个多任务操作系统。不要做一个低级的单任务操作系统。DOS 是没办法理解 Unix 的。人不能因为自己笨，就觉得别人也笨；更不能要求别人有义务跟自己一样笨。不过，我们反过来倒是能够理解，笨蛋不知道自己笨，即便别人指出来也不肯相信自己笨的。 通过恰当的统筹，让自己多开几个进程，齐头并进地去做一些事情，永远是提高效率的基本手段。 多管齐下，齐头并进，也是创造惊喜的好方法，理由很简单，效率高了，成果就多了，成果这东西，跟之前提到的“连接”啊、“节点”啊一样，越多越好，这些成果本身也是节点，它们之间也会产生连接，最终一样产生聚变，至于能够获得什么，我们还不知道，但我们知道一定会有所获得。 创造惊喜的方法论逻辑很重要、概率学很重要、统筹学很重要 你必须相信你自己会有好运的 尽量不做可能倒霉的事情 保持开放 持续学习 创造更多的连接 保留适当的随机 多管齐下，齐头并进 成功 = 技能 + 运气 所谓“运气”，是完全不可控的，它可能是好的，也可能是坏的，也可能是“0” —— 即，什么影响都没发生。我们不知道它什么时候发生，不知道它是好是坏，也不知道它好坏的程度到底如何；我们只知道最坏的情况下，坏运气可能导致“灭顶之灾”。与之相对，技能却是可控的 —— 通过刻意练习（deliberate practice），绝大多数技能都可以获得极大的提高。在“技能-运气”的横轴上，尽量选择去做靠近左端的活动，就是那些更多依赖技能，更少依赖运气的活动。下棋、学习，都是完全不靠运气的 —— 只靠积累。于此同时，无论做什么，都需要技能，而技能只能靠积累。在技能没有达到一定程度的时候，别指望运气。因为坏运气在这种情况下其实格外可怕。 通过选择来回避坏运气。选择很重要。甚至可以不夸张地讲，人生就是选择。对于选择这件事，我的好朋友铁岭有个精彩的陈述：所谓的（创业）成功，无非是解答题高手作对了选择题。 可这世界上真的有很多人不相信自己有选择的！更准确地讲，他们骨子里完全不相信自由意志的存在。说实话，我完全没办法理解那些不相信自由意志存在的人有什么接着活下去的必要…… 我们可以通过两个层面做出更优的选择： 提高技能值 降低坏运气的绝对值 惊喜（Serendipity） 原本想象不到的好事儿“竟然”发生了……或者反过来说也行，原本想象不到的坏事儿“竟然”没有发生……甚至，原本想象不到的坏事儿即便真的发生了，也没有造成“毁灭性打击”…… 学习（磨练技能）永远是创造惊喜的最根本手段：当坏运气发生的时候，有能力抵御、有能力承受，那么坏事可以变成好事—— 因为那些没有干掉我们的事儿会使我们变得更强（“What doesn’t kill you makes you stronger” —— 有首歌的歌名就是这句话。）……若是没有能力抵御、没有能力承受，那么坏事就铁板钉钉，又因为“因此要提前出局”所以要蒙受的损失大到无法估量…… 所谓的学习，本质上是在提高自身的“免疫力”，让自己不被病毒打倒。这个类比告诉我们，有的时候，我们甚至有必要主动给自己下毒 —— 这就是打疫苗的原理。你看，类比真的影响思维。 切换模式：苍蝇与蜜蜂的启示 问题显然不在眼睛上。因为瓶底朝着窗户，蜜蜂便不停地在亮处寻找出口，却碰到蜜蜂怎么也弄不懂的玻璃，对阳光的敏感和执着使它们不肯到瓶口 —— 那个黑暗的出口去。是呀，黑暗与出口怎么能联系在一起。 但是苍蝇可不管什么光明与黑暗，它们四下乱飞乱闯，瓶子又这么小，碰上瓶口的机会太多了，一群头脑简单、貌似全无所追求的苍蝇就这样获得了自由。 “这件事说明，实验、坚持不懈、试错、冒险、即兴发挥、最佳途径、迂回前进、混乱、刻板和随机应变，所有这些都有助于应付变化。” 无论是谁，若是只有一根筋，总有一天会倒霉。独立思考这事儿，说难也难，因为绝大多数人都是“人家说什么就信什么”，别说独立了，连思考都不做；说简单就特别简单， 凡事儿多琢磨一会儿。一旦真开始想了（思考），就可能得到不一样的结论； 收获多起来之后，遇到重要的事儿，一般都舍不得不想 —— 知道不多想想就会吃亏的。 思考过一根筋的窘境之后，怎么可能再是一根筋的人了呢？知识的获得就是不可逆的。 刚刚冲进一个新领域的时候，我会把自己调整为“苍蝇模式” 。在我找到“门道”之前，我就是一只苍蝇，乱打乱撞实际上就是最佳的选择、最佳策略。 做销售，很快发现信任最重要；做教育很快发现榜样很重要；做留学咨询很快发现家长才是客户；做电商导流很快发现反向筛选客户很重要；做比特币很快发现买进来且拿住才最重要；做互联网创业早期项目投资很快发现行研最重要…… 找到门道之后怎么办？我会马上把自己调到另外一个模式“蜜蜂模式”。 经过如此这般的打磨，我的操作系统一定是升级了的 —— 起码我的是有两个模式的操作系统，不是吗？多任务、多模式的操作系统怎么可能与“一根筋”的操作系统相提并论呢？ 不仅要多模式，还要在很多重要的节点上多模式 调整焦点为什么能够随着大势成长的人永远是极少数呢？大多数人没有那样好的运气。 当一个大的趋势来临的时候，绝大多数人即便绞尽脑汁，也想不出那大势如何为己所用。很多人输就输在，对于新兴事物，看不见、看不起、看不懂、来不及……开始有足够数量的人看不起某种因新趋势的存在而产生的行为模式的时候，基本上总是那个趋势要发力的时间点。 不是问自己，这个大势如何才能为我所用？ 而是问自己，在这个大势中，我去做什么最划算？ 这两个问题的区别在于， 第一个问题的焦点是放在自己身上的； 第二个问题的焦点是放在大势本身上的。把焦点放在自己身上，而后开始思考，思考结果常常是，几乎所有的大势其实都与我没关系…… 把焦点放在大势自身上，而后开始思考，思考的结果常常是一样的： 必须跨界 —— 自己手里正在做的事情，常常与那大势完全没有关系，也并不适合与那大势共存。某个大势出现的时候，一定有一些特定的事情比其他的事情更适合“顺势而为”，万一那些特定的事情恰恰是自己正在做的，或者是最擅长做的，那真是天大的运气； 有办法、有能力让自己变得运气足够好的人 —— 源自于我们有不一样的操作系统： 我们不断升级概念和方法论 我们多任务运行 我们在不同的情况下切换不同的模式 我们还会在不同的时间点转换不同的焦点…… 我们就是那种勤于深入思考的人，更为关键的是，我们就是那种践行者。想到，就要琢磨清楚；搞明白到一定程度之后，就开始行动，在行动中继续思考，在行动中不断调整，在行动中获得更多的灵感，在行动中主动创造各种好运气…… 这就是所谓的“ 主动选择”了。 微信公众号 跳进来，自己动手开始写的目的有这么几个：我想知道这个生态里的每一个细节，不自己跳进来，只看别人做，一切分析在我看来还是“得来终觉浅”……我从来都知道“个人品牌”的重要性，所以，虽然在这事儿上起步晚（那是因为有一段时间我就是在休息），但终归我需要一个信息传播通道，既然微信公共平台已经成了大势，我就不应该任由它把我自己落下；我想验证一个猜想。在没有“早期初始红利”的情况下，什么样的 IP 依然可以迅速获得流量？我的猜想是：那些独特的内容 —— 那些打着作者独特印迹的内容，那些读者一看就知道是谁写的内容，那些天然被搬运工拿走也带着作者独特印迹的内容；而在这一点上，我运气足够好，因为我恰恰懂得如何生产这种内容……我认为如果我能短期之内集聚足够的流量的话，那我一定有什么办法，或者遇到什么机会，搞出一个完全不一样的东西。 果然，在这个过程中，很多之前尚处于模糊状态的念头开始清晰起来，很多之前在脑子里尚未关联起来的节点开始相互碰撞，很多昨天的想法在今天已经开始发酵，很多原本根本不可能认识的人（尤其是那些恰当的人）感觉在突然之间就从各个方向“冒了出来”…… “ IP 多维化 ”。只有一个维度的 IP，没有足够强大的商业潜力，最终只能沦为“发发广告收点钱”的奴隶 —— 这几乎是最没前途的商业模式。好的 IP 从来都是可以锻造出多个维度的，这不是什么新鲜事儿。相比火爆的《盗梦空间》，《星球大战》的 IP 更有潜力，因为后者早已是多维化的 IP，单单玩偶市场就大得不得了，且经久不衰，过去、现在，与将来；前者并非不可能多维，但相对后者明显在多维上有很大的劣势。 转换焦点，是整个征程的起点。 事实上，这就是我在多年后不可能再是一个托福培训教师的根本原因。每当我意识到某个大势存在，并且对之深入思考之后，得到的结论总是一样的： 我必须离开，我必须存在。其实这里套用的是崔健的歌词： 我想要离开，我想要存在，我想要死去之后从头再来…… 真正的大势，很少频繁出现，尤其对个体来说，能够感知的大势更少。 选择 活在未来而不是当下， 研究新生事物的时候更应该关注优点而不是缺点 平日里人们评价“某一个人格局不一样”的时候，本质上来看，其实就是指那个人关注的 焦点 不一样。我们更应该 对自己的未来自信 ，前提只不过是过去与现在以及未来，我们都在挣扎着进步。我们在自信这件事儿上，关注的焦点更多在于自己的未来 ，而不是，或者不仅仅是自己的过去或者现在。 我们不仅应该优先关注这个世界的未来，也要 活在未来而不是当下。为什么我们这么自信，自信自己可以活在未来呢？理由简单而又清晰，我们是掌握了方法论的人，一旦我们通过研究通过思考，发现某个属于未来的大势出现的时候，我们早已调整过自己的关注焦点： 不是问自己，这个大势如何才能为我所用？而是问自己，在这个大势中，我去做什么最划算？人们的平均寿命正在加长 —— 我想，在更长的一生中（好几辈子里），每个人其实都有机会，总能逮到几个大的罢？逮不到，别怪别人。 不能容错的系统肯定是脆弱的 任何一个在现实世界里运转的系统所面对的，必然是一个不完美的、不理想的、各种意外频繁发生的现实世界 。有一点错，就直接停止运转，那系统基本上就是个废物。我们最好给自己的操作系统设置一定的容错机制。绝大多数人在没有恰当训练之前，不懂得容错，就基本上跟废物差不多。看看那些易怒的人罢。有一点差池，他们就暴跳如雷，大脑充血，系统完全瘫痪…… 这不是废物是什么？其实他们比废物还可怕。暴怒的人不大像一个失灵了的冰箱，坏了也就坏了，暴怒的人更像失控的火车，要冲出轨道，毁掉停下来之前撞到的一切…… 没有冗余度设计的系统，通常不够健壮，不够可靠。这地球不是少了你就不运转了！有容错能力的系统更为强壮，有冗余度设计的系统运转更为持久……一切更为健壮的都要耗费更多的成本。学习范围广了，思考更为深入了。容错是自己的事儿。 自学自己的灵魂必须自己塑造你自己就是自己的灵魂的工程师。教，才是最好的学习方法。自学很简单，其实就是不断习得、积累、研究、打磨、升级那些概念和方法论。进一步来看，自学能力是靠积累增强的。开始自学的人，越学越快。自学的人好比给自己的脑子开了个黑洞，刚开始看不出来，因为那黑洞的质量太小，乃至于跟没有一样；但随着时间的推移，那黑洞的质量逐步积累，渐渐地，另外一个现象终究会产生 —— 很多知识就好像是“不由自主”地飞进他们的脑子里。 如何解释这个现象呢？善于自学的人，最终会形成一个重要的能力：融会贯通。 善于学习的人会越来越善于学习，学习能力会越来越强，因为在一个知识点上的感悟，不知道什么时候会在另外一个知识点上发挥效用。知识点（概念与方法论）就好像是有生命的东西一样，它们自己会发酵，它们自己会相互连接，它们自己会相互碰撞，进而产生出更多有生命的东西。 学习几乎是唯一一个可以必然产生惊喜（意外的好运，Serendipity）的日常活动。并且，那些伴随着惊喜的幸福感（多巴胺分泌）就是一直在持续增长。 自学这事儿， 方法并不首要，首要的是态度。 不为自己做的事儿，做久是不大可能的 ，于是，自然而然产生讨厌，产生抗拒，自然最终能放弃就马上放弃。 所以最终，离开学校之后，到了工作岗位上，绝大多数人都不是 给自己打工 ，而是 给别人打工 …… 这只不过是在延续他们长期的生活方式而已。 遇到一个普遍的现象，而后对其做出正确的分析，得到正确的结论，是一个人有良好的思维能力和习惯的重要表现和进一步成长的前提。有一类人做什么事儿都是为了自己而做，即便在某件事儿上做得并不好；另一类人做什么事儿都是为了别人而做，即便在某件事儿上做的还不错； 为自己而努力的人逐步变成所谓的精英，为别人对付事儿的人逐步变成所谓的庸众。是啊，为自己做事儿，就肯定更努力啊！为别人做事儿就自然而然地应付了事么！如果你想创业找个靠谱合伙人，那么请注意两个根基： 远离那些“表现型”选手 ，无论多费劲也要去找到那些“进取型”选手。明明是为了别人而活，却真切地感觉是“为了自己的利益”；这是最底层的价值观，位于“操作系统”的核心位置，很难与不同的操作系统相互兼容。尝试着改造他们是全无意义的，谁都做不到—— 除非有一天他们自己意识到了，自己改，可说实话这希望也太渺茫了。 远离那些应付了事的人 ，无论多费劲也要去找到那些“把事情当作自己的事儿来做”的人。明明是为了自己而活，却最终不仅显得也确实是“大公无私”。 “表现型”选手做事常常不是为了自己的进步 ，而是为了自己当下表现得多好，也就是说，为了获得更多的当时的认可。“进取型”选手做事是为了自己的进步 ，做事的收获，最大的部分不是来自外部的奖励或者赞赏，最大的部分是自己的进步；即便在做得不足够好的时候，甚至外部只有忽视和鄙视的时候，收获依然清晰：无论如何都有一些哪怕看不着但确实体会得到的进步啊！ 所谓的聪明，虽然可能也受先天条件限制，但聪明确实是可积累、可锻炼的。 霍金（Hawkings） Smart is the new sexy.聪明是新兴的性感。 法国生物学家拉马克（Jean-Baptiste Lamarck） 拉馬克认为 用进废退 这种后天获得的性状是可以遗传的，因此生物可把后天锻炼的成果遗传给下一代。 最新的研究表明，拉马克可能是对的。有一项研究表明， 人们的生活状态发生变化时，基因也会发生变化。 智商却是可以习得的、可以积累的，又因为这种通过锻炼习得的特性（Acquired Characteristics）竟然是可以遗传的……哇！这是多性感的一件事儿哦！并且，这世界有很多人是 Sapiosexual 的，只要够聪明，不怕无配偶啊！于是， 多读书罢，让自己更聪明一点，也为了下一代 。 如何真正消化一本书？ 书大抵上分为两种：虚构类（Fiction），非虚构类（Non-Fiction）。阅读，是为了理解，而理解这事儿，慢，即是快；快，便是无。 标题党的文章直接不看了——说实话，即便错过什么了，也没什么可惜。 这个小技巧真的不知道帮我节约了多少时间，提高了多少生活质量。 信息这东西，必须系统才有价值。碎片化的信息也许有用，但就算完全忽略，也不至于致命。舍了就舍了，没啥。这种勇气其实不少人都有，巴菲特就是其中之一。害怕错过什么，是一种情绪，来自于空虚的情绪：因为什么都没有，所以就渴望有一点什么，所以就特别害怕错过任何机会。 充实的人，是不怕错过什么的，因为已经充实，错过点什么，真的无所谓，机会有的是，错过一大把又如何，反正因为充实而能够相信自己确实有实力终归抓到至少一个适合自己的机会。 买好书，读好书，读懂好书，然后用知识改变自己的生活。 拿来一本书，就好像要打一场仗，打仗之前最好先考察一下地形吧？ 同样的道理，拿来一本书，不应该是抓起来就从第一个字开始读起，一直读到最后……应该先看看目录，再看看附录，仔细读读前言， 也不妨在网上先扫扫书评……要先大致对这本书有个了解，然后再开始行动比较好。 在读的过程中，不断整理这些概念与方法论之间的关系，其实是“消化”的必要过程。 在阅读的过程中，要不断向后总结，向前预期 —— 这是最基本的理解技巧。 绝大多数人除了输入之外什么都没有，连处理都没有。最终只有少数人的阅读理解过程是不断循环地“输入、处理、输出”的过程，尽管这里的“输出”某种意义上不过是“伪输出”…… 理解过的东西越多，理解新的东西就越快。说穿了，理解能力差，无非就是见识少，仅此而已。 重要的知识，从来都是通过反复学习才能获得的。一下就能学会得东西，通常上价值不大。 一定要用起来。 不用，学它干嘛？这与我读书的原则也是相通的：不用认真读的书，读它干嘛？这与我对生活的态度也是一样的，既然活着，就要活好，活得精彩。 暂时用不起来怎么办？教！我总是重复这句话：教是最好的学习方法。 分享，不仅需要能力支撑，也是培养能力的最重要手段。知识分享，没有成本，只有收益 —— 双方都有的收益。 分享的技巧很简单： 真诚，只分享自己确实觉得好的东西； 也是真诚，绝对不能居高临下地装蛋； 还是真诚，对方完全有可能不理解你。 这个概念、这个方法论、这个道理、这个知识，还可以用在什么地方？聪明的操作系统总是有更多的想法、更多的方案、更多的可能性。 万一想到了可以“出其不意”地使用的场景，那就赚大了，因为同样的东西到了你的手里却发挥了不一样的作用，你当然与众不同，也只能与众不同。 寻找那些终生学习的人，把他们当作朋友，把他们当作榜样。我就有个很长期的榜样：Bruce Eckel。我根本不认识他，也没有过任何传统意义上的交往，连 email 往来都没有。他是 Thinking In C++ 的作者。十多年前，他在网上发布 Thinking In C++ 第一版的写作计划，然后以极快的速度更新完成…… 毫无疑问，见识到有人这样，就成了后来我写书的时候“雷厉风行”的根本原因和动力。再反过来说，人家写书都可以这样，我们读书怎么可以拖拖拉拉呢？ 人群中的阅读量分布，大抵上应该是这样一个曲线： 若是把年平均阅读，换成“一生平均阅读”，那条曲线可能变成这个样子，嗯，你之前见过的那个曲线， 人与人之间差的岂止 10 倍，100 倍都很正常 ： 在哪儿都一样，真正尊重知识的人就是少数，古今中外都一样。每个月至少读一本好书，是那些关注自我成长的人的最低要求。学门外语（尤其是英语），根本没那么难，甚至很容易，能不能学，能不能学会，只不过是学习意识问题。 网络时代有很多方法可以去了解牛人们在做什么，牛人的共同特征是喜欢分享。他们正在看的东西，是他们筛选过后的，常常有很大参考价值。注意，是“参考价值”，不一定是“价值”。(这里有个很好的例子：Some Books for Software-oriented Humans，文章作者是 Pat Maddox, Rspec 核心开发团队 2 号人物。 什么是更好的知识？ 有价值的信息才可以算作知识。知识有两种： 无繁殖能力的知识 有繁殖能力的知识显然，有繁殖能力的知识，比无繁殖能力的知识更有价值；繁殖能力强的知识，比繁殖能力差的知识更有价值。 什么叫有繁殖能力的知识呢？最好靠举个例子说明罢。 科学方法论，就是一种有繁殖能力的知识，也是迄今为止我习得的最有繁殖能力的知识。再比如说，概率、统计，除了可以帮助我们更准确地理解这个世界之外，甚至可以直接用来赚钱…… 一般来说，有繁殖能力的知识： 可以积累，因为它有积累效应 必须应用，因为它有指导意义 值得传播，因为它可造福大众 把大量用来“牢记”的时间，直接输入到“践行”之中，好像更为牢靠，更为划算。保持好奇心很重要，但若是竟然养成了猎奇心理，那就算是掉进坑了。 如何研究新生事物？绝大多数人都是一根筋地生活的。对他们来说，最好什么都有唯一、正确、标准的答案、方式、手段；一旦答案是“ 看情况 ”，他们就一脸茫然，瞬间进入死机状态。 如何面对、如何研究新生事物？就是一个很好的例子和测试。绝大多数人其实使用一贯的模式（当然那是他们唯一的模式）去面对、研究新生事物。可事实上， 面对新生事物的时候，一定要切换模式，否则就事实上完全无法面对、彻底无法研究。 任何新生事物都是不完美的。 实际上，无论是过去、还是现在，抑或是将来，在任何时间点上出现的新生事物都不是完美的，它之所以出现，核心上来看，只是因为它相比之前的相对物更好而已，一旦它成功，它就不再是新生事物，而是现有世界的一部分，等待着被下一个新生事物所颠覆 —— 几年后、或者几十年后，甚至成千上百年之后。 最终，我们接纳任何新生事物，都不是因为它完美，而是因为它相对更好而已。 在面对、或者研究新生事物的时候，我们应该关注的是它的优点，而不是它的缺点。 也就是说，我们应该让自己的操作系统切换一下模式，从“优先关注缺点模式”，转换到“优先关注优点模式”。 类比是用来帮助我们理解新生事物的；类比不应该是我们用来定义新生事物的。 可是，一旦进入投资领域，这样的操作系统就完全无法运转了 ，因为投资行为的核心本质有这么两个： 投资必须自负盈亏，所以只能、且必须靠独立思考；只有投资未来才有真正的胜算，投资的收益才可能大到有意义的地步。 学习和投资的机会几乎无限多 —— 只有在这样的时代里，知识变现才是可能的，且知识变现的金额才可能是巨大的。仅仅是我的上一代 —— 我父亲的那个年代里 —— 就没有这样的时代恩惠。 学习就是用自己免费的时间与精力再加上少量的金钱去投资自己的未来。 人分为两种，主动升级自己操作系统的，和不升级自己操作系统的；主动升级自己操作系统的人又分为两种，多模式的和单模式的…… 除了在跨界和研究新生事物的时候我们需要调整模式之外，我们还需要在更多的地方调整模式…… 我们永远不要在容易和艰难之间选择，要在错误与正确之间选择 。要做正确的事情，哪怕很艰难也要做；错误的事情，越容易越不应该做。这很清楚，不是吗？ 超越绝大多数人的窍门其实很简单，就是想办法活在未来。生活幸福美满的窍门就在于比别人早半步，早太多了不安全，晚半步就始终遗憾，相对于别人不早不晚，其实就是一样，那就没意思。 如何活在未来呢？这听起来好像是不大可能的事情。但实际上却很简单，就两件事儿： 笃信逻辑。用逻辑去判断明天会发生什么。 你的孩子受教育程度越高，将来的收入就会越高。在我想明白并开始笃信的那一刻，我已经某种程度上“活在未来”了，只不过，我的未来需要时间证明，而我需要要用行动与耐心等待早已经决定的结果最终落实。 做事之前常常要在脑子里预演至少一次做好你的功课。 （Do your homework.）咱是谁啊？！ 有意识地提高自我要求，是切实提高自己水准的前提 —— 我的确相信这事儿。对自己抬高一点点要求，然后做足功课，更好一点的结果就是自然而然的了。 按照未来的你所需要的标准去学习、去工作，将会构建一个完全不同的生活。提前成为未来的你。多花点时间想想自己未来的样子，多花点时间预演一下，多抬高一点点的标准，多做足一点点的功课，就这样，差异应该就一点点地积累形成了。 关于圣人与榜样 这世界根本就没有强者，其实大家都是弱者 —— 只不过弱的程度不一样而已，或者弱的方面不同而已。所谓的原罪，很可能只不过是没有学会学习的结果…… 傲慢是因为认为别人不可能进步，以为自己的优势永存；嫉妒是因为认为自己不可能进步，以为他人的优势永存；懒惰是因为相信自己不可能进步，所以干脆放弃，一了百了；暴怒是因为不知道自己可以进步，所以弱者永远患得患失、永远输不起、吃不起亏；所以强者一旦发现自己的地位可能被动摇就自然而然地勃然大怒；贪婪是因为不知道自己的进步效果不是线性的，而是一个需要长期努力才可能出现的复利曲线，所以才生成的不切实际的欲望…… 所有人都有进步的可能，只不过是有没有放弃而已，若不放弃，那最多是进步程度大小不同而已。原来所谓的“ 宽容 ”、所谓的“ 淡定 ”，竟然如此容易获得 —— 惊喜，绝对是惊喜。嗯，进步（升级）是获得、制造 惊喜 的最有效手段。 自欺欺人是装给自己看；欺世盗名是装给别人看，反正都是装蛋。装蛋有无数种变体，可装蛋的本质，其实都是一样的：对自己的未来不自信。 不要以为你干过的蠢事别人不知道，只是人家没空、或者懒得挖出来而已。唐骏就是个很明显的例子。其实他何必呢？人又不笨，若是当初不投机取巧，不欺世盗名，现在也不会差到哪里去……这个时代的恩惠在于，普通人不必一定大富大贵，老老实实学习、老老实实成长、老老实实工作，做个中产阶级并不是很难 —— 早已不再是“必须你死才能我活”的时代了，真没什么必要欺世盗名的。 别装，千万别装。偶尔装装，不是不可以，但千万别装圣人 —— 绝对不可能的事情就不要做了，这跟不要尝试发明永动机是一个道理，多明显啊！ 其实真的没必要装。 其实大家都是可怜人，最初的时候大家都不怎么样 —— 不一样的只是某些天生条件而已，可那些基本上真的都是 “脑”外之物 —— 比如，遗传的长相，或者继承的财富。 智商这东西，其实不遗传的，大家都是从零开始。 也完全没必要顾镜自怜。 虽然不可否认的是，每个人的成长环境不同，但这世界正在发生变化。一个很重要但常常并不被重视的变化就是人类平均寿命的增加 —— 在今天这个社会，三十岁的时候醒悟过来，和一百年前的人十五岁的时候醒悟过来没什么太大的区别，时间段的增长，明显增加了可以获得并体验 复利效果的概率…… 这就是时代的恩惠。 花几十块钱（人民币或美元）买回来的一本书，哪怕是有其中一点点的内容（有时哪怕是一句话而已）给我带来惊喜，已经很划算了！ 这跟什么很像呢？这样的方法论可以用到其他什么地方呢？—— 习惯于这种提问，是让自己学会 融会贯通 的最直接手段…… 这样的方法论可以用在“向他人学习”的行为上。 无论学什么，都可以同时向多个人学习（就好像可以多买几本相同领域的书一并阅读一样）；只要满足一定条件的人，都可以成为学习对象（就好像挑书那样，设定一些基本条件）；总是可以在这个人身上学到这点，在那个人身上学到另外一点；甚至可以从烂人身上反向学习如何才能避免变成那种烂人？曾经，我也好像需要榜样的激励，后来放弃了。如果把榜样比作好书，理由就清晰了： 好书永远存在；经典书籍永远不止一本；经典书籍也有可能被颠覆的可能；新的好书永远源源不断；众多好书都各有千秋……同样的道理， 榜样永远存在；值得当作榜样的人其实有很多；曾经的榜样，很可能被颠覆，实际上经常被颠覆；新的榜样永远远远不断；即便是普通人也常常各有千秋…… “被装得最好的那个人蒙蔽”，是寻求单一榜样的最可怕后果。完美无缺的榜样，只存在于信息流动不畅通的时代里，不是吗？ 把绝大多数人都当做正常人处理，其实挺解脱的；把别人以为的榜样、偶像也当作正常人处理，自己就变得更正常了。与此同时的 惊喜是，学习对象更多了、学习范围更广了，真是令人大喜过望。 做个正常人，和大家一起做正常人，挺好的。 其实大家都是正常人。 不能改变的最根本原因在于不愿意改变。知道自己的缺点，也知道自己改不掉，其实并不是最坏的情况，最坏的情况是，自己确实有缺点，自己却完全不知道，甚至以为自己其实是完美的 —— 这才是真正不可容忍的缺陷。想改，却最终失败，大抵上都是“误以为改变是瞬间的事情”造成的。 改变常常是个过程，且是个很长的过程，不是瞬间能够完成的。能够瞬间完成的改变大多没有什么意义。比如，改变一下瞬间的站姿（其实也是个过程，虽然很短）很容易，但意义也不是很大，彻底改变日常的错误站姿，却需要矫正很长时间，肯定很有意义；但，就因为这是个长期的过程，这个改变的难度就无限提高了。 这世界是动态的，人们却总是不由自主地用静态的方式去思考、理解这个世界。 下个决心，是瞬间的事情，瞬间的决定，行动才是填补后面非瞬间的整个过程的实际内容。若是真想明白了这个道理，就可以直接把 “下决心的这个瞬间决定” 直接跳过 —— 它没必要存在；直接开始行动就好，这才是关键。 解锁这个关键之后，一切都显得明显了： 改变是个过程。改变最初的时候很难显现。改变需要足够的时间，所以也需要足够的耐心。改变结果出现的时候，已经耗费了很长时间、很多精力、很多耐心。看到自己的改变，会给自己更多的自信；改变是过程，获得、积累自信也是过程。看到别人已经改变的时候，不会盲目地羡慕，因为真正改变过自己的你，知道那意味着什么……最为关键的是，因为自己清楚变化是个过程，知道这个过程在最初的时候不明显，甚至完全看不到，所以，你就不会误以为身边的人都没什么变化…… 也不会因为（许多年后）突然有一天看到朋友的明显变化而感到惊诧甚至懊恼…… 刚开始用力过猛，就基本上注定会失败。绝大多数人成为父母之后，在孩子 0 ~ 3 岁的时候投入过多，耗费了过多的资源，到了孩子 15 ~ 18 岁的时候早已经耗尽资源，甚至，孩子早就成了 “事实上的负担”…… 用力过猛还有另外一个害处：动作变形…… 所以，很多父母把孩子当作自己的骄傲；用力再猛一点，就会把孩子当作自己的炫耀 —— 这已经开始令人讨厌了；用力再猛一点，就会把孩子当作自己当初不曾实现的愿望 —— 这已经开始变得可怜了…… 依照我的经历，我觉得健身是最容易的改变之一，因为它的外部限制因素很少，也几乎完全不依赖运气。但很多人在这种最简单的改变上，还是失败了。怎么失败的呢？就是最初的时候 “用力过猛” 造成的…… 四处告诉他人 “自己就要变了！”买很多配套服装、器材工具……早期过份勤奋，甚至不给自己喘息机会…… 因为早期经济投入太多，后期会出现经济危机；因为早期精力投入太多，后期会出现精力不足…… 因为早期过份勤奋，所以很多该做的事儿都被挤掉了，所以这些该做没做的事情最终会集中起来一起报复你，不信走着瞧！ 千万别用力过猛。避免这个误区的核心在于，心平气和地接受自己最初的弱小。既然改变是个过程，那么就可以把“改变”理解成一股势力，最初相当弱小的势力，它需要时间，需要投入，需要持续投入才能逐步壮大起来。它就跟花儿一样，上来就浇了太多的水，会被涝死的！ 人们普遍认为，在教育行业里，是老师在塑造学生。这好像很自然，但更多的时候，曾经长期从事教师职业的我，却更多的时候看到一个反过来的现象： 很多的时候，其实是那些学生在塑造老师。人是很容易被“ 反向塑造 ”的。你跟什么样的人打交道，哪怕你“高高在上”，你还是会反过来被他们塑造。再比如，同样是做销售，卖奢侈品的、卖高档商品的、卖中档商品的、买低档商品的，各自都会被塑造成不同的样子，不信你就观察一下。 千万不要做免费的、公益的事情。你还没到那时候。 我写书免费公开在网上，是因为我确实不需要指望它赚钱，更重要的是，我 自信到不需要用市场衡量我自己。 如果你做一件事情，是公益的，是免费的，你得到的只能是赞扬——哪怕你做得并不好。这是关键，你可能做得并不好，但由于你是免费的、公益的，所以人家只能对你客气 —— 这其实是不真实的反应。 反过来，你收哪怕一分钱试试？只要你出了问题就会有人骂你，甚至不出问题的时候都有人骂你。 不会回避商业，该收钱就收钱，不能免费、不能公益——这是为了得到真实的反馈。 如果在你做得并不好的时候，依然得到赞扬，你最终只能被麻痹。而你不可能一辈子回避商业的，一旦开始玩真的，你就傻了，因为真实的世界（商业世界）全然不是你过往经历的样子。你被麻痹得越久，你越难以从瘫痪状态恢复过来。 在你做的其实很好的时候，依然被骂，这其实是好事，会让你心理上更成熟，承受能力更强。 千万要小心自己被反向塑造成你原本不应该变成的样子。 近朱者赤，近墨者黑，这不是空话，这也不应该只被肤浅地理解。 认真筛选自己的朋友，很必要 —— 因为他们终究会成为塑造你的一股力量；认真筛选自己面对的所有人，同样必要 —— 因为他们的力量更大，人多势众，生生不息，连绵不绝，所以更要小心，需要更多挣扎。若有可能，要认真选择自己所身处的环境 —— 因为， 地理位置很重要，远比大多数人想象得更为重要。 出淤泥而不染，濯清涟而不妖，那是莲花，那不是人；而人想要摆脱 反向塑造 ，不仅不可能天然做到，而且需要很多努力、很多挣扎。 人要真诚热爱自己 —— 然而，很多人其实没有这样的勇气。 小时候练脑子，下棋绝对是好工具。 倒是看别人下棋很有意思 —— 这倒成了我从来戒不掉的爱好。 观棋不语真君子。落子不悔真君子。真君子罕见。 输了，就得认。悔棋的人，就是那种遇到麻烦不肯买单的人 —— 之前的每一步都是自己选的啊！ 一点都不夸张，任何人大概都有悔棋的冲动（准确地讲，跟悔棋没关系，就是看到失败那一刹那的恐慌和懊恼），可一旦某人提出要悔棋，那么有一个判断就可以确定了：竖子不足与谋。因为能说出来悔棋，已经说明了很多细节： 技不如人且不自知的人很可怕；不尊重规则的人无法合作；爱面子胜过一切的人不可能有什么有意义的进步 如何才能避免制造麻烦？最终的败局，其实来自于很多步之前的某一步错了 —— 从那一步开始，败局已定。后面的只不过都是其实毫无意义的挣扎而已。 于是，再往前推，就是“如何不走出那步败棋？” 而不是“我输了，悔棋行不行？” …… 观棋不语真的是很有意思的事情，你总是可以看到很多人厚下脸皮悔棋，可是他们其实不知道自己真正的败棋是哪一步，于是，最终还是输掉，花了半天的力气，只是让自己输得更彻底，显得更傻屄…… 所以说， 不制造麻烦的人不用解决麻烦。 “那我老婆不讲理怎么办呀？” 其实正确答案挺残酷的： 谁让你当初不认为“能讲道理”是择偶的最重要因素来着呢？ 什么门当户对啊，什么高矮胖瘦啊，什么学历血型啊，都扯淡而已，只有能讲道理这个要求不可或缺。这一步走错了，败局早已经确定。这事儿凄惨在，当初一个人不在意对方是不是能讲道理的人，就说明他自己并不是在意讲道理的人，所以，等有一天他自己觉得麻烦了的时候，他更可能没意识到的是他自己本身就是个麻烦…… 更甚的是，这样的人通常就是那种只知道悔棋，不知道反思，不知道改进的人 —— 更是无解。 人生不可能没有任何麻烦。于是，当遇到麻烦的时候，方法论应该很坚定： 对已经发生的麻烦，认了！ 检查一下根源究竟在哪里，自己的问题究竟在哪里？ 为了将来不再出现同样的麻烦，自己需要改正、改进的是什么？ 进而，如何才能 “未卜先知” 呢？方法论是： 多观察、多研究、多思考别人的失败与麻烦。《黑天鹅》的作者，纳西姆·尼古拉斯·塔勒布有个类比可以借用： 一杯水，放在冰箱里，会冻成冰，那个杯子的形状（水冻成冰之前的形状）可以推测出水冻成冰之后的形状；可反过来，如果一块儿冰放在桌子上，一会儿化成了水，我们看着那水的形状，无论如何都倒推不出化成水之前的冰究竟是怎样的形状……纳西姆·尼古拉斯·塔勒布说的是，研究方向不同，会造成研究难度不同；我的意思是，研究焦点不同，也会造成研究难度不同。研究他人的失败，就好像是第一种情况；研究他人的成功就好像是第二种情况。 我一向认为研究别人的成功很难，因为太多因素其实是隐蔽的；研究别人的失败相对容易，因为有更多更公开的因素可用来研究…… 更为关键的是，研究他人的失败，比研究他人的成功更有指导意义。 看到别人失败了，看到别人遇到麻烦了，就要琢磨自己如何才能避免那样的失败那样的麻烦 —— 其实这是人们每天都在做的事情啊！某次北京下大雨之后有人在车里生生被憋死，于是很多人都反应过来，四处求问，而后才知道原来虽然玻璃无法敲碎，但可以从后备箱逃生……而后才知道有些车竟然不可能这样！ 当一个人从逆境中走出来之后，回头再看那逆境，暗流涌动的背后却可能是个机会，一个塑造传奇的机会。历史总是这样，它就像一条河，时不时地莫名其妙就产生了一处漩涡，大多数人被卷入漩涡，葬身河底，可总有一些人，“配合”着那暗流，走出一条生路，就成了传奇。 特朗博的策略，其实并不是他独有的，细看历史上所有从逆境中走出来的人，大抵上都差不多： 他们就是很有才华；才华这东西，一点点不够用，必须很多很多；他们因为有才华而更为勤奋，更不愿、不敢、不甘浪费一点点生命；他们热爱家庭，那是生活的希望；他们善待朋友，那是他们生存于世的关联与证据；他们专注于做能做的事情，把最重要的事情做到最好；他们与之斗争的，不是哪个人、或者哪群人，而是那个把所有人都变成受害者的历史漩涡；他们最终从逆境里走了出来……当这样的人走出来的那一瞬间，过往的对错其实都不重要了，重要的只有一件事儿：他们走出来了。 《把时间当作朋友》 一切都靠积累。 《新生 —— 七年就是一辈子》 我们必须主动升级自己的操作系统。我们的操作系统由概念和方法论构成。我们要把自己进化为多任务、多模式的操作系统。不断进化的操作系统要与、也只能与其他不断进化的操作系统沟通。沟通的目的是分享，分享最终会形成惊喜…… “急智”其实并不存在，所有的“急智”，其实都是过往积累的结果与表现，而非“信手拈来”、“急中生智”。闲聊，即便常常确实是“生产途径”，但它也绝对是“生产途径”之一而已。更多的生产，或者说是绝大多数的生产，其实发生在闲聊之前的研究、探索与思考。","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"成长","slug":"成长","permalink":"http://ipcreator.me/tags/成长/"}]},{"title":"深圳风采","date":"2017-02-08T12:28:06.000Z","path":"2017/02/08/view-of-shenzhen/","text":"“美好的事物值得付出、等待和分享” 欢乐海岸 地点：南山区白石路8号与海园二路交界特色：彩灯、喷泉、酒吧推荐指数：★★★★★ 大沙河公园 地点：北环大道与沙河东路交叉口附近特色：广场、草地、运动推荐指数：★★★★★ 仙湖植物园简介 地点：罗湖区莲塘仙湖路特色：弘法寺、植物推荐指数：★★★★★ 月亮湾公园简介 地点：南山青青世界下边特色：百年荔枝古树、廉政主题推荐指数：★★★☆☆","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"分享","slug":"分享","permalink":"http://ipcreator.me/tags/分享/"}]},{"title":"惠州风采","date":"2017-02-08T07:10:06.000Z","path":"2017/02/08/view-of-huizhou/","text":"“美好的事物值得付出、等待和分享” 巽寮湾（xùn liáo wān）简介 地点：惠东县的大亚湾畔特色：石奇美、水奇清、沙奇白推荐指数：★★★★★","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"分享","slug":"分享","permalink":"http://ipcreator.me/tags/分享/"}]},{"title":"从前端到全端：JavaScript逆袭之路","date":"2017-02-07T11:55:06.000Z","path":"2017/02/07/zh-history-of-javascript/","text":"作者：今日头条技术团队 近年来，前端技术日新月异，前端已经不仅仅是网页，更多的开始由狭义向广义发展。先后涌现出了具备后端能力的node，具备移动开发能力的react native，具备游戏渲染能力的cocos2d-js，以及iOS上的热修复技术JSPatch等等新技术。咋一看，几乎各个端都被JavaScript攻陷，大有一统江湖之势。究竟，JavaScript如何做到上天入地无所不能？JavaScript真的能一统江湖吗？ 乱世出英雄：JavaScript的诞生故事要从JavaScript的由来说起。高能瞎扯淡版，正经脸的同学可以忽略有人的地方就有江湖，有江湖的地方就有纷争。故事要从当年的浏览器之战说起。时间回到1994年，（→ 那时候我还是个宝宝~ #天真脸#）景兄弟横空出世，并自带神器网景导航，战斗力爆表，势如劈竹，瞬时间威震天下。一出世就武装到牙齿，武力值这么高还自带兵器，这个科学吗？港真，我也觉得不科学，也许跟熊孩子哪吒、女汉子雅典娜是一个品种吧？这一切北方的老前辈微软大湿，都看在眼里，不甘天下尽归景兄弟这个初出茅庐的毛孩子，大湿积淀多年，潜心修炼一年，终于带着大杀器IE 1.0出关了，誓于景兄弟争个高低。自此景兄弟的网景导航 VS 微软大湿的IE 的军备战争开始。景兄弟仔细掂量，微软大湿财大气粗，内功深厚，臣妾实在是办不到啊啊啊啊啊啊。景兄弟紧急召集门人商议对策，有一门人曰：”以我们微薄之力硬磕，是万万使不得的。如今我们，一是宜施行合纵之策，抱大腿，组成联盟！二是避其锋芒，出奇招致胜。“于是景兄弟依照此策略，一方面找到了当时德高为重的另一位前辈SUN，组成了开发者联盟。（微软大湿：握草，联盟都粗来了，那我是不是得搞个部落？）另一方面，景兄弟找到了锻造大师布兰登，请布大师帮忙升级兵器网景导航，大师就是大师，不费吹灰之力就完成了强化升级，然而布大师突发奇想，本来这是近距离攻击兵器，要是有多一个远距离攻击的能力那岂不是更好？Just do it. 想罢大师就加了一个远距离攻击的feature。于是有了自带远距离攻击能力的网景导航2.0。景兄弟一看这么流弊心里甚是欢喜，不过远距离攻击的技能叫做LiveScript，感觉不是特别Fashion。特然想到这不是跟SUN前辈联盟嘛，SUN家的Java正是独霸武林之时。不如把名字改成跟Java有关，蹭一把东风，蹭点光环。一拍脑袋，JavaScript！！！众门人一听：”好好好，JavaScript 流弊炫酷吊炸天！“果然第一节下半场，景兄弟携强化过的网景导航2.0 战个痛快，那是杠杠的！人家一问，你咋还能远程攻击，你这个远程攻击用的是啥？答曰：JavaScript。“JavaScript，一定是跟SUN家Java是一个系列产品，一定很流弊！”#光环加成，各种膜拜脸#微软大湿亏了一场，痛定思痛，也要搞远程攻击功能，果然不久，就祭出了同样带有远程攻击能力的IE 3.0，鉴于景兄弟的远程攻击叫做JavaScript，J开头的感觉应该比较流弊，所以微软大湿的叫做JScript。然后战争就从地面贴身肉搏战，开始逐步升级到了远距离核战争。正所谓，城门失火，殃及池鱼。这么打下去苦逼的是搬砖的页面仔，就是我这种，到处都是雷区，无处下脚。最后到了1997年，“联合国安理会秘书长”艾玛（ECMA）出来调停，多方签署了“核不扩散条约”，约束各种远程攻击武器的使用，这才走上了正轨。1995年SUN开发了Java技术，这是第一个通用软件平台。Java拥有跨平台、面向对象、泛型编程的特性，广泛应用于企业级Web应用开发和移动应用开发。Java也伴随着互联网的迅猛发展而发展，逐渐成为重要的网络编程语言。名噪一时。1994年Netscape公司成立，并推出了自己的浏览器的免费版本 Netscape Navigator，很快就占有了浏览器市场。到了 1995 年，微软公司开始加入，并很快发布了自己的 Internet Explorer 1.0。1995年，当时在Netscape就职的Brendan Eich（布兰登·艾克），正为Netscape Navigator 2.0浏览器开发的一门名为LiveScript的脚本语言，后来Netscape与Sun Microsystems组成的开发联盟，为了让这门语言搭上Java这个编程语言“热词”，将其临时改名为“JavaScript”，日后这成为大众对这门语言有诸多误解的原因之一。JavaScript最初受Java启发而开始设计的，目的之一就是“看上去像Java”，因此语法上有类似之处，一些名称和命名规范也借自Java。但JavaScript的主要设计原则源自Self和Scheme。JavaScript与Java名称上的近似，是当时Netscape为了营销考虑与SUN达成协议的结果。==&gt; 所以，JavaScript和Java其实没有半毛钱关系。JavaScript推出后在浏览器上大获成功，微软在不久后就为Internet Explorer 3.0浏览器推出了JScript，以与处于市场领导地位的Netscape产品同台竞争。JScript也是一种JavaScript实现，这两个JavaScript语言版本在浏览器端共存意味着语言标准化的缺失，对这门语言进行标准化被提上了日程，在1997年，由Netscape、SUN、微软、宝蓝等公司组织及个人组成的技术委员会在ECMA（欧洲计算机制造商协会）确定定义了一种名叫ECMAScript的新脚本语言标准，规范名为ECMA-262。JavaScript成为了ECMAScript的实现之一。ECMA-262 第五版，即是ES5。==&gt; ECMA-262，包括ES5, ES6等是一个标准，JavaScript是ECMAScript的一个实现。完整的JavaScript实现应该包含三个部分：在网景导航2.0和IE 3.0出现之后的几年间，网景和微软公司不停的发布新版本的浏览器，支持更多的新功能。自此拉开了浏览器之战的序幕。这场浏览器之战到现在还在继续，以下一张图看清楚过程。从浏览器之战可以看出，各家浏览器比拼的大致两个方面视觉体验（渲染排版）和速度（脚本运行）。==&gt; 所以一个完整的浏览器组成，至少包含两个部分：补充一个市面常见浏览器的内核和JavaScript引擎搭配：其他JavaScript引擎，Rhino，由Mozilla基金会管理，开放源代码，完全以Java编写，可以看做SpiderMonkey的Java版。注意：webkit不单单只是一个排版引擎，webkit = 排版引擎 + JavaScript引擎。==&gt; 所以，JavaScript是动态语言，它的运行都是基于JavaScript引擎，引擎大都是由静态语言实现C++、Java、and so on。JavaScript的能力也是由引擎赋予。不管是浏览器环境中是window，亦或是node环境中的process，均是由引擎提供。（番外：Mozilla的人不知道为啥特别喜欢猴子，经常以猴子命名技术，所以看到带Monkey的，十有八九估计是他们搞的。）诺曼底登陆：JavaScript Binding/Bridge 桥接技术在浏览器环境中，DOM、BOM、window对象、setTimeout/setInterval，alert，console等方法均不是JavaScript自身具备的能力，而是浏览器native实现，然后通过JavaScript引擎注入到JS运行的全局上下文中，供JS使用。鉴别方式，在调试器console中打出来，带有[native code]的即是：讲道理：JavaScript运行 → 依赖于JavaScript引擎 ← 浏览器集成了JavaScript引擎，同时通过JavaScript引擎注入native代码工JS脚本使用发散一下思维，只要有JavaScript引擎，就能运行JS脚本，不管有没有浏览器！只是缺少浏览器提供的alert，window等方法。既然浏览器可以往JavaScript引擎中注入代码，赋予JS脚本在网页中特殊的能力，同理我们可以自己集成JavaScript引擎，自己定义自己的方法往JavaScript引擎中注入，赋予JS更多更强的自定义能力！注入的关键是：值类型相互对应，Obj映射class的一个实例，function映射一个句柄或者引用JavaScript数值型中的坑JavaScript内部，所有数字都是以64位浮点数形式储存，即使整数也是如此这就是说，在JavaScript语言的底层，根本没有整数，所有数字都是小数（64位浮点数）。容易造成混淆的是，某些运算只有整数才能完成，此时JavaScript会自动把64位浮点数，转成32位整数，然后再进行运算。由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。尽量避免使用JavaScript做精准计算和密集计算。根据国际标准IEEE 754，JavaScript浮点数的64个二进制位，从最左边开始，是这样组成的。第1位：符号位，0表示正数，1表示负数第2位到第12位：储存指数部分第13位到第64位：储存小数部分（即有效数字）符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。IEEE 754规定，有效数字第一位默认总是1，不保存在64位浮点数之中。也就是说，有效数字总是1.xx…xx的形式，其中xx..xx的部分保存在64位浮点数之中，最长可能为52位。因此，JavaScript提供的有效数字最长为53个二进制位（64位浮点的后52位+有效数字第一位的1）。内部表现公式：(-1)^符号位 1.xx…xx 2^指数位精度最多只能到53个二进制位，这意味着，绝对值小于2的53次方的整数，即-(253-1)到253-1，都可以精确表示。而大部分的后端语言，C++、Java、Python等的long型都是可以支持到64位，因此long型数据从后端语言传给JavaScript会发生低位截断。遇到这种情况一般使用String处理，如需要在JavaScript中做long型计算，需要自行实现计算器。有了自行往JavaScript引擎中注入的想法，接下来就是分析可行性。大部分是JavaScript引擎是使用C++编写，如果自己的程序使用的是C++可以很方便的进行注入，如果是OC，可以使用OC和C++混编的形式。其他语言怎么破？要在一门静态语言上与动态语言JavaScript相互调用，最便捷的方式是找到一个这门语言实现的JavaScript引擎（开源），直接进行集成，注入。如果没有，则需要使用多一层桥接，把这门语言的接口暴露给C++，再由C++实现的JavaScript引擎将接口注入供JavaScript使用。服务端集成思路&amp;实践：nodeJS中的桥接我们都知道nodeJS，但是nodeJS的运行依赖于Google的V8 引擎，V8是C++实现，底层使用C++实现底层功能，比如网络，数据库IO，对外暴露一个构造器接口注入到上下文中，注意此处暴露的只是一个构造器接口而不是一个创建完的实例。然后实现了一个require的hook函数。当使用require加载一个JS模块时，跟网页中使用AMD 的require并无异样，当使用require加载系统库，既是C++的模块时，会调用暴露出来的构造器接口，得到一个实例对象。不管是装载JS模块还是装载C++模块，得到的都可以看做是一个Module Object，node会将装载完的模块缓存到binding_cache中，下次在别处的代码中使用require装载模块时，就会先去binding_cache中查找，如果找到了则返回该module object，如果没找到再执行上面的装载流程。这就是node的基本原理：C++封装底层操作，通过V8注入，使得JS脚本有网络和IO能力基于Spring的桥接以上说到的几个都是C++层面的应用，那么经典的Java怎么玩？是不是Java就必须是静态语言的玩法，没有办法像C++之类的，可以使用JS的动态特性？当然不是。这个时候，我们需要说起前面介绍过的一个JS引擎 Rhino，Rhino是完全由Java编写，可想而知，Rhino几乎就是为Java应用而生的。用法是这样：首先在我们的Java应用中集成Rhino；所有的IO操作，网络操作等，都封装成service，并提供增删改查，setter &amp;&amp; getter等多种方法通过spring，把这些service bean注入到Rhino中；把业务逻辑写到JS代码中，JS代码调用多个已注入的Java service处理业务逻辑，拼装数据返回！好处：修改业务逻辑不需要修改Java代码，也就是不需要重新编译和部署，只需要刷新下跑在Rhino中的JS代码即可。以往Java应用的一个痛点是部署，需要重新编译，打包，部署重启服务器，现在以这种形式开发，可以达到服务端的热更新和热部署。既可以享有Java服务的稳定性和可靠性，又可以享有JS的灵活性。这种技术和用法在差不多十年前就有过，前EMC的工程师基于EMC著名的商业产品Documentum，设计了一套Java开源的中小企业CMS系统Alfresco，在该系统中实现了这种技术，这种技术基于spring，叫做spring-surf，做了一个胶水层。可以看做小十年前的node吧。Demo，使用spring-surf框架的系统中一个webscript模块categorynode.get.xml定义URL拦截器和权限控制；.get指明是处理GET请求，RESTful；在categorynode.get.js中调用已注入的Java Bean处理业务逻辑；若为网页请求返回.html.ftl，若为Ajax，返回.json.ftl；（此处配套使用的是FreeMarker模板引擎）==&gt; categorynode.get.desc.xml==&gt; categorynode.get.js==&gt; categorynode.get.html.ftl==&gt; categorynode.get.json.ftl移动端集成思路&amp;实践：React Native中的桥接React Native目前也是异常火爆，RN程序的运行依赖于Facebook的RN框架。在iOS、Android的模拟器或是真机上，React Native使用的是JavaScriptCore引擎，也就是Safari所使用的JavaScript引擎。但是在iOS上JavaScriptCore并没有使用即时编译技术（JIT），因为在iOS中应用无权拥有可写可执行的内存页（因而无法动态生成代码），在安卓上，理论上是可以使用的。JavaScriptCore引擎也是使用C++编写，在iOS和安卓中，JavaScriptCore都做了一层封装，可以无须关心引擎和系统桥接的那一层。iOS/Android系统通过JavaScriptCore引擎将定制好的各种原生组件注入，如：listview，text等。Cocos2d-JS中的桥接cocos2dx是游戏开发中非常常用的游戏渲染引擎，有一系列的产品，如：cocos2dx(C++)，cocos2d-lua（lua）, cocos2d-js(JavaScript)等多个产品。其中最新退出的是cocos2dx的JS版本的cocos2d-js，编写游戏渲染特效代码相比于C++和lua非常方便。对于做需要经常更新的渲染场景，C++是静态语言，每次修改都需要重新编译才能运行，显然是不合适的。自然也就想到了脚本语言，lua和js，两者有些类似，都是动态语言，只需要集成一个运行引擎，提供一个运行的容器即可运行，同时通过引擎注入底层方法供脚本调用即可。lua好处是精简，语法精简，引擎页很小很精简，所以不可避免的代码量会比js多，同时学习成本比较高。js的好处是有ECMAScrtpt的核心，语法比较丰富，同时有支持一些高级属性。在cocos2d-js中，cocos2dx(C++)集成了SpiderMonkey（C++）作为JS运行引擎，中间做了一个胶水层既是JS Binding，通过引擎注入了一个cc的全局对象，映射的是底层C++的一个单例C++实例。表面上写的是JS代码，实际上操作的是底层的C++。cocos2d-js是代码可以运行在多种环境中，当运行的网页环境中时，使用的是cocos2d-html5引擎，底层操作的是canvas；当运行在客户端上时，使用的是cocos2dx引擎，底层操作的是C++，再由C++去操控openGL做绘制和渲染。提供相同的API，对开发者几乎是透明无差异的，开发者只需要关注实现效果即可。达到一套代码，多端运行（网页端，客户端）。JSPatch技术中的桥接JSPatch是目前比较流行的iOS上的热修复技术，JSPatch 能做到通过 JS 调用和改写 OC 方法最根本的原因是 Objective-C 是动态语言，OC 上所有方法的调用/类的生成都通过 Objective-C Runtime 在运行时进行，我们可以通过类名/方法名反射得到相应的类和方法。JSPatch 的基本原理就是：JS 传递字符串给 OC，OC 通过 Runtime 接口调用和替换 OC 方法。关键技术之一是 JS 和 OC 之间的消息互传。JSPatch里包含了，一个JS引擎JavaScriptCore（Safari，React Native用的同款）。用到了 JavaScriptCore 的接口，OC 端在启动 JSPatch 引擎时会创建一个 JSContext 实例，JSContext 是 JS 代码的执行环境，可以给 JSContext 添加方法，JS 就可以直接调用这个方法。本质上就是通过JavaScriptCore引擎注入，暴露OC的方法供JS调用来实现动态修改OC的反射。Demo，iOS热更新，热修复：集成JavaScriptCore引擎；通过引擎，桥接JS和OC；通过JS修改OC反射。详细的JSPatch技术介绍请移步：https://github.com/bang590/JSPatch/wiki关于JavaScript引擎：在iOS 或 android 上能够运行的JavaScript 引擎有4个：JavaScriptCore，SpiderMonkey，V8，Rhino。下面这个表格展示各个引擎在iOS 和 Android 的兼容性。因为iOS平台不支持JIT即时编译，而V8只有JIT模式，所以V8无法在iOS平台使用（越狱设备除外，想体验iOS JIT的同学可以自行越狱）。所以，目前可以做到横跨iOS和Android双平台的JS引擎，只有两款，即是SpiderMonkey和JavaScriptCore。JavaScript引擎会受很多东西影响，比如交叉编译器的版本、引擎的版本和操作系统的种类等。至于如何选择，可以参考:《Part I: How to Choose a JavaScript Engine for iOS and Android Development》至此，JavaScript从立足于前端，到征战全端的逆袭之路，可以总结为“携引擎以令天下”。不足之处，还请各位看官轻拍~参考文章：bang590/JSPatch中问参考文档Cocos2d-JS | Cocos2d-x官方参考文档Alfresco官方参考文档《Browser Wars: The End or Just the Beginning?》《Part I: How to Choose a JavaScript Engine for iOS and Android Development》《React Native 从入门到源码》","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"js","slug":"js","permalink":"http://ipcreator.me/tags/js/"}]},{"title":"管理之我见","date":"2017-02-03T06:30:18.000Z","path":"2017/02/03/my-view-of-management/","text":"基本概念 什么是管理？ 管事理人 什么是领导？ 让追随者“升官发财” 什么是狼性？ 以结果为导向，多为成功找方法 自我 自知者明、自胜者强、自律者自由 主管参考阅读：JMT主管管理技能培训 中层参考阅读：MTP管理才能发展培训 高层参考阅读：LTP领导力训练 关于分享 柳传志给杨元庆写过这样一封信：你最初是小鸡，你长成大鸡的时候没有人佩服你，当你长成火鸡的时候，也没有人佩服你，只有你变成鸵鸟的时候，别人才会佩服你，因为你比别人都大。所以，你的分享不会带来任何好处，只会给你带来不必要的管理困扰。参考阅读：王治全反思：被我“毁掉”的兄弟！ 关于黑天鹅 塔勒布在他后一本书《反脆弱》中给出的应对之道——黑天鹅的出现，和观察者有关。一只被喂养了很久的火鸡，它会觉得屠夫很爱它，对它来说，它在感恩节被宰杀就是一个黑天鹅事件，但这不会让屠夫吃惊。所以，塑造新的思维模式的办法就是，不要成为火鸡。应对科技挑战的最佳解决方式，就是让自己成为一家科技公司。参考阅读：刘湘明：应对科技挑战的最佳方式，就是让自己成为一家科技公司 关于“推销” 李笑来《新生——七年就是一辈子》之第19章节“如何克制自己的“推销”欲望”推销知识很难的更深层次的原因在于： 仅仅说是肯定没用的，得做，不然说没分量； 做都不一定是有用的，得有改变，没改变不算数； 有改变也不一定够，得有看得见的改变，看不见还是没分量； 有看得见的改变还是不一定成功，因为对方可能并不服气； 改变太大了也不行，因为对方一看，吓倒了，直接放弃了…… 真的感谢互联网，它给了我们另外一个可以分享的通道。自从我开始写博客之后，之前此类的烦恼彻底消失了。有分享欲望的时候，可以喷在网上，又由于没有了特定的对象，反倒没有了“获取认可”的压力，分享变成了一个纯粹开心的行为。能否有因获得认可而产生的快乐，只取决于两个因素， 我是否真的真诚（这个不用提）; 我是否运气好，消息能传递给那些能理解我的人（我好像这方面运气一直都不错）…… 于是，整个人就感觉少了很大一个负担， 该干嘛就去干嘛，说那么多有什么用？ 做了，就有变化，有变化，自己先开心，别人看不看得到其实并不重要罢？ 少说导致更专注，更专注导致变化最大化，有时候吓到别人，也怪不得自己罢？","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"成长","slug":"成长","permalink":"http://ipcreator.me/tags/成长/"}]},{"title":"IPCreator的书单","date":"2017-02-03T06:30:18.000Z","path":"2017/02/03/my-book-list/","text":"“美好的事物值得付出、等待和分享” 专利 图解专利法－专利知识12讲 一图胜千言 创新 创新者的基因 英文标题:The Innovator’s DNA：Mastering the Five Skills of Disruptive Innovators作者：Clayton M. Christensen豆瓣评分：7.4 观察，联系，发问，实验，交际 横向思维 英文标题:Lateral Thinking作者：Edward de Bono豆瓣评分：7.8 条条大道通罗马 六顶思考帽作者：Edward de Bono豆瓣评分：7.4 一个全面思考问题的模型，落实平行思维的工具蓝色思考帽：蓝色负责控制思考帽的使用顺序，它规划和管理整个思考过程，并负责做出结论。白色思考帽：白色是中立而客观的，关注客观的事实和数据。黄色思考帽：黄色代表价值与肯定。从正面考虑问题，表达乐观的、满怀希望的、建设性的观点。红色思考帽：红色是情感的色彩，表现自己的情绪、直觉、感受、预感等。黑色思考帽：黑色代表否定、怀疑、质疑的看法，合乎逻辑的批判。绿色思考帽：绿色代表茵茵芳草，象征勃勃生机，寓意创造力和想象力。 管理 像TED一样演讲 副标题:创造世界顶级演讲的9个秘诀作者：Carmine Gallo豆瓣评分：7.7 一个主题、三个要点、十八分钟 影响力英文标题:Influence: The Psychology of Persuasion作者：Robert B. Cialdini豆瓣评分：8.6 影响力的武器：互惠、承诺和一致、社会认同、喜好、权威、短缺 成长 你的生命有什么可能作者：古典豆瓣评分：8.4 成长，长成为自己的样子！ 拆掉思维里的墙作者：古典豆瓣评分：8.0 向自己的生命发问 把时间当作朋友 副标题:运用心智获得解放作者：李笑来豆瓣评分：8.5 要管理的不是时间，而是自己。 做最好的自己作者：李开复豆瓣评分：7.9 有勇气改变可以改变的事情，有胸怀来接受不可以改变的事情，有智慧来分辨两者的不同。 破解幸福密码作者：毕淑敏 豆瓣评分：7.6 幸福是一种心灵的感受，有意义的快乐就是幸福。 罗辑思维 副标题:运用心智获得解放作者：罗振宇豆瓣评分：7.2 独立、理性的思考通往自由的彼岸。 你要如何衡量你的人生 英文标题:How will you measure your life?作者：Clayton M. Christensen豆瓣评分：8.0 工作是为了更好地生活。 此生未完成 副标题:一个母亲、妻子、女儿的生命日记作者：于娟豆瓣评分：9.0 为什么是我？又为什么不是你？ 向死而生 副标题:我修的死亡学分作者：李开复豆瓣评分：7.3 不忘初心，心怀感恩，随缘随喜 投资 投资中最简单的事作者：邱国鹭豆瓣评分：8.7 定价权是核心竞争力，人弃我取逆向投资，便宜才是硬道理。 时寒冰说：未来二十年，经济大趋势（现实篇）作者：时寒冰豆瓣评分：8.3 感悟趋势之美 时寒冰说：未来二十年，经济大趋势（未来篇）作者：时寒冰豆瓣评分：8.0 感悟趋势之美 技术","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"分享","slug":"分享","permalink":"http://ipcreator.me/tags/分享/"}]},{"title":"成长之我见","date":"2017-02-03T05:53:18.000Z","path":"2017/02/03/my-view-of-growing-up/","text":"基本概念 什么是爱？ 陪伴就是爱 什么是幸福？ 健康、充实、知足和感恩 什么是成功？ 按自己的意愿过一生 什么是思维升级？ 技术/法律–&gt;商业思维 什么是自由？ 自由=能力-欲望参考阅读：《如何控制自己的情绪》 如何避免被洗脑？ 事情本身是否符合常识和逻辑 事情及对方的利益立场是什么 独立判断能力的重要性 美国的卡耐基说：成功来自于85%的人脉关系，15%的专业知识中国的李笑来说：学习重要，还是经营人脉重要？我的个人逻辑，分阶段调节不同比例，如：成长初级阶段（学校/应届生等）个人/人脉比例85/15，中级阶段（主管/经理等）50/50，高级阶段（总监/副总裁等）15/85 为什么系列 为什么要努力？ 拥有更多选择的自由 为什么要读书？ 开启心智，增长见识 为什么要留在大城市？ 见识参考阅读：《罗振宇：拒绝逃离北上广 见识决定命运》 痛点系列 功名VS幸福应试VS素质理论VS实践抽象VS具体宏观VS微观说说VS执行","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"成长","slug":"成长","permalink":"http://ipcreator.me/tags/成长/"}]},{"title":"创新之我见","date":"2017-02-03T05:53:18.000Z","path":"2017/02/03/my-view-of-innovation/","text":"基本概念 什么是创新？ 你无我有、你有我优、你优我快 什么是体验？ 用起来很爽，很智能非常快 快速智能示例一 支持联系人拼音首字母键盘定位，智能屏蔽无数据按键 快速智能示例二支持联系人分组一键群发短信，智能屏蔽呼出按钮，以防用户误操作","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"感悟","slug":"感悟","permalink":"http://ipcreator.me/tags/感悟/"}]},{"title":"专利之我见","date":"2017-02-03T05:53:18.000Z","path":"2017/02/03/my-view-of-patent-strategy/","text":"基本概念 什么是专利？ 专有的权利 什么是专利的价值？ 风险控制、增值经营、竞争超越参考阅读：现代公司法务的核心商业价值构建 什么是好的专利？ 能带来价值的专利参考阅读：移动互联时代的知识产权新特征 什么是好的专利布局？ 产出更多更高价值专利的挖掘和扩展 如何有效实施专利布局？ 五位一体/沙漠寻路/三步六法","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"感悟","slug":"感悟","permalink":"http://ipcreator.me/tags/感悟/"}]},{"title":"简书的 Markdown 新手指南","date":"2017-02-03T04:55:06.000Z","path":"2017/02/03/zh-mark-down/","text":"『为什么作家应该用 Markdown 保存自己的文稿』。 在此，我们总结 Markdown 的优点如下： 纯文本，所以兼容性极强，可以用所有文本编辑器打开。 让你专注于文字而不是排版。 格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。 Markdown 的标记语法有极好的可读性。 当然，我们既然如此推崇 Markdown ，也必定会教会你使用 Markdown ，这也是本文的目的所在。不过，虽然 Markdown 的语法已经足够简单，但是现有的 Markdown 语法说明更多的是写给 web 从业者看的，对于很多写作者来说，学习起来效率很低，现在，我们特地为写作者量身定做本指南，从写作者的实际需求出发，介绍写作者真正实用的常用格式，深入浅出、图文并茂地让您迅速掌握 Markdown 语法。为了使您更好地学习，我们建议您登录「简书」，将您的编辑器切换至 Markdown 编辑器，新建一篇空白笔记，然后点击右上角的预览模式： 此时，您的界面应当如下图所示，左侧为编辑区域，右侧为预览区域，您在左侧输入 Markdown 语法的文本，右侧会立即帮您呈现最终结果，好了，让我们开始学习吧~ 标题 这是最为常用的格式，在平时常用的的文本编辑器中大多是这样实现的：输入文本、选中文本、设置标题格式。而在 Markdown 中，你只需要在文本前面加上 # 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 # 即可，标题字号相应降低。例如： # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 注：# 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。 你可以你的编辑器中尝试输入这六级标题，可以参考下方的截图： 一级标题至六级标题 列表 列表格式也很常用，在 Markdown 中，你只需要在文字前面加上 - 就可以了，例如： - 文本1 - 文本2 - 文本3 如果你希望有序列表，也可以在文字前面加上 1. 2. 3. 就可以了，例如： 1. 文本1 2. 文本2 3. 文本3 注：-、1.和文本之间要保留一个字符的空格。 列表案例截图如下： 链接和图片 在 Markdown 中，插入链接不需要其他按钮，你只需要使用 [显示文本](链接地址) 这样的语法即可，例如： [简书](http://www.jianshu.com) 在 Markdown 中，插入图片不需要其他按钮，你只需要使用 ![](图片链接地址) 这样的语法即可，例如： ![](http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 注：插入图片的语法和链接的语法很像，只是前面多了一个 ！。 插入链接和图片的案例截图： 引用 在我们写作的时候经常需要引用他人的文字，这个时候引用这个格式就很有必要了，在 Markdown 中，你只需要在你希望引用的文字前面加上 &gt; 就好了，例如： &gt; 一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。 注：&gt; 和文本之间要保留一个字符的空格。 最终显示的就是： 一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。 引用的案例截图： 粗体和斜体 Markdown 的粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。例如： *一盏灯*， 一片昏黄；**一简书**， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。 最终显示的就是下文，其中「一盏灯」是斜体，「一简书」是粗体： 一盏灯， 一片昏黄；一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。 粗体和斜体的案例截图： 代码引用 需要引用代码时，如果引用的语句只有一段，不分行，可以用 ` 将语句包起来。如果引用的语句为多行，可以将```置于这段代码的首行和末行。代码引用的案例截图： 表格 相关代码： | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | 显示效果： Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 相关代码：dog | bird | cat----|------|----foo | foo | foobar | bar | barbaz | baz | ba 显示效果： dog bird cat foo foo foo bar bar bar baz baz baz 显示链接中带括号的图片 代码如下: ![][1] [1]: http://latex.codecogs.com/gif.latex?\\prod%20\\(n_{i}\\)+1 结语 以上几种格式是比较常用的格式，所以我们针对这些语法做了比较详细的说明。除这些之外，Markdown 还有其他语法，如想了解和学习更多，可以参考这篇『Markdown 语法说明』。强烈建议您现在就立马用 Markdown 写一篇文章吧，体会一下 Markdown 的优雅之处！最后，希望我们的指南可以帮助到您，也希望「简书」能够成为您书写 Markdown 的最佳选择。 图灵社区发帖采用的是流行的Markdown语法，本文可供快速入门。 代码 单个回车 视为空格。 连续回车 才能分段。 行尾加两个空格，这里-&gt; 即可段内换行。 *这些文字显示为斜体* **这些文字显示为粗体** 效果 单个回车视为空格。 连续回车 才能分段。 行尾加两个空格，这里-&gt;即可段内换行。 这些文字显示为斜体 这些文字显示为粗体 代码 行的开头空4个空格，表示程序代码，例如： C#: //这里显示一些代码，在正文显示中会自动识别语言，进行代码染色，这是一段C#代码 public class Blog { public int Id { get; set; } public string Subject { get; set; } } Python: keywords = [&quot;dsaa&quot;,&quot;Asd&quot;,&quot;sadc&quot;,&quot;Gdfd&quot;,&quot;gdfdd&quot;,&quot;gaf&quot;,&quot;gabdddddd&quot;,&quot;eg&quot;] print dict([(i[0],list(i[1])) for i in groupby(sorted(keywords),lambda x:x[0].lower())]) Javascript: /** * nth element in the fibonacci series. * @param n &gt;= 0 * @return the nth element, &gt;= 0. */ function fib(n) { var a = 1, b = 1; var tmp; while (--n &gt;= 0) { tmp = a; a += b; b = tmp; } return a; } document.write(fib(10)); 效果 行的开头空4个空格，表示程序代码，例如： C#: //这里显示一些代码，在正文显示中会自动识别语言，进行代码染色，这是一段C#代码 public class Blog { public int Id { get; set; } public string Subject { get; set; } } Python: keywords = [&quot;dsaa&quot;,&quot;Asd&quot;,&quot;sadc&quot;,&quot;Gdfd&quot;,&quot;gdfdd&quot;,&quot;gaf&quot;,&quot;gabdddddd&quot;,&quot;eg&quot;] print dict([(i[0],list(i[1])) for i in groupby(sorted(keywords),lambda x:x[0].lower())]) Javascript: /** * nth element in the fibonacci series. * @param n &gt;= 0 * @return the nth element, &gt;= 0. */ function fib(n) { var a = 1, b = 1; var tmp; while (--n &gt;= 0) { tmp = a; a += b; b = tmp; } return a; } document.write(fib(10)); 代码 &gt;表示引用文字内容。 #表示这是一级标题 ##表示这是二级标题 ###表示这是三级标题 …… ###### 最小是六级标题 也可以这样表示大标题 = 这样表示小标题 - 效果 表示引用文字内容。 表示这是一级标题 表示这是二级标题 表示这是三级标题 …… 最小是六级标题 也可以这样表示大标题 这样表示小标题 代码 --- 上面是一条分隔线 - 这是无序列表项目 - 这是无序列表项目 - 这是无序列表项目 两个列表之间不能相邻，否则会解释为嵌套的列表 1. 这是有序列表项目 2. 这是有序列表项目 3. 这是有序列表项目 下面这个是嵌套的列表 - 外层列表项目 + 内层列表项目 + 内层无序列表项目 + 内层列表项目 - 外层列表项目 效果 上面是一条分隔线 这是无序列表项目这是无序列表项目这是无序列表项目 两个列表之间不能相邻，否则会解释为嵌套的列表 这是有序列表项目这是有序列表项目这是有序列表项目 下面这个是嵌套的列表 外层列表项目内层列表项目内层无序列表项目内层列表项目外层列表项目 代码 直接把一个URL显示为超级连接： 也可以这样：[图灵社区](http://www.ituring.com.cn) 图像和链接非常类似，区别在开头加一个惊叹号： ![这是一个Logo图像](http://www.turingbook.com/Content/img/Turing.Gif) 此外，还可以以索引方式把url都列在文章的最后，例如这样： [图灵社区][1] ![图灵社区Logo][2] [1]:http://www.ituring.com.cn [2]:http://www.ituring.com.cn/Content/img/Turing.Gif 效果 直接把一个URL显示为超级连接： 也可以这样：图灵社区 图像和链接非常类似，区别在开头加一个惊叹号： 此外，还可以以索引方式把url都列在文章的最后，例如这样： 图灵社区 进一步了解： 计算机图书在线交稿模板图灵社区电子书标准，供合集用户参考Markdown语法详解图灵社区发贴帮助Markdown之表格的处理","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://ipcreator.me/tags/Markdown/"}]},{"title":"The Unix and Internet Fundamentals HOWTO","date":"2017-02-02T14:19:06.000Z","path":"2017/02/02/The Unix and Internet Fundamentals HOWTO/","text":"Eric RaymondThis document describes the working basics of PC-class computers, Unix-like operating systems, and the Internet in non-technical language. Table of Contents Introduction1.1. Purpose of this document1.2. New versions of this document1.3. Feedback and corrections1.4. Related resources Basic anatomy of your computer What happens when you switch on a computer? What happens when you log in? What happens when you run programs from the shell? How do input devices and interrupts work? How does my computer do several things at once? How does my computer keep processes from stepping on each other?8.1. Virtual memory: the simple version8.2. Virtual memory: the detailed version8.3. The Memory Management Unit How does my computer store things in memory?9.1. Numbers9.2. Characters How does my computer store things on disk?10.1. Low-level disk and file system structure10.2. File names and directories10.3. Mount points10.4. How a file gets looked up10.5. File ownership, permissions and security10.6. How things can go wrong How do computer languages work?11.1. Compiled languages11.2. Interpreted languages11.3. P-code languages How does the Internet work?12.1. Names and locations12.2. The Domain Name System12.3. Packets and routers12.4. TCP and IP12.5. HTTP, an application protocol To Learn More Introduction 1.1. Purpose of this document This document is intended to help Linux and Internet users who are learning by doing. While this is a great way to acquire specific skills, sometimes it leaves peculiar gaps in one’s knowledge of the basics – gaps which can make it hard to think creatively or troubleshoot effectively, from lack of a good mental model of what is really going on. I’ll try to describe in clear, simple language how it all works. The presentation will be tuned for people using Unix or Linux on PC-class hardware. Nevertheless, I’ll usually refer simply to `Unix’ here, as most of what I will describe is constant across platforms and across Unix variants. I’m going to assume you’re using an Intel PC. The details differ slightly if you’re running an Alpha or PowerPC or some other Unix box, but the basic concepts are the same. I won’t repeat things, so you’ll have to pay attention, but that also means you’ll learn from every word you read. It’s a good idea to just skim when you first read this; you should come back and reread it a few times after you’ve digested what you have learned. This is an evolving document. I intend to keep adding sections in response to user feedback, so you should come back and review it periodically. 1.2. New versions of this document New versions of the Unix and Internet Fundamentals HOWTO will be periodically posted to comp.os.linux.help and comp.os.linux.announce and news.answers. They will also be uploaded to various Linux WWW and FTP sites, including the LDP home page. You can view the latest version of this on the World Wide Web via the URL http://www.linuxdoc.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/index.html. This document has been translated into Polish. 1.3. Feedback and corrections If you have questions or comments about this document, please feel free to mail Eric S. Raymond, at esr@thyrsus.com. I welcome any suggestions or criticisms. I especially welcome hyperlinks to more detailed explanations of individual concepts. If you find a mistake with this document, please let me know so I can correct it in the next version. Thanks. 1.4. Related resources If you’re reading this in order to learn how to hack, you should also read the How To Become A Hacker FAQ. It has links to some other useful resources. Basic anatomy of your computer Your computer has a processor chip inside it that does the actual computing. It has internal memory (what DOS/Windows people call RAM&#39;&#39; and Unix people often callcore’’; the Unix term is a folk memory from when RAM consisted of ferrite-core donuts). The processor and memory live on the motherboard, which is the heart of your computer. Your computer has a screen and keyboard. It has hard drives and floppy disks. Some of these devices are run by controller cards that plug into the motherboard and help the computer drive them; others are run by specialized chipsets directly on the motherboard that fulfill the same function as a controller card. Your keyboard is too simple to need a separate card; the controller is built into the keyboard chassis itself. We’ll go into some of the details of how these devices work later. For now, here are a few basic things to keep in mind about how they work together: All the parts of your computer inside the case are connected by a bus. Physically, the bus is what you plug your controller cards into (the video card, the disk controller, a sound card if you have one). The bus is the data highway between your processor, your screen, your disk, and everything else. (If you’ve seen references to ISA&#39;,PCI’, and `PCMCIA’ in connection with PCs and have not understood them, these are bus types. ISA is, except in minor details, the same bus that was used on IBM’s original PCs in 1980; it is passing out of use now. PCI, for Peripheral Component Interconnection, is the bus used on most modern PCs, and on modern Macintoshes as well. PCMCIA is a variant of ISA with smaller physical connectors used on laptop computers.) The processor, which makes everything else go, can’t actually see any of the other pieces directly; it has to talk to them over the bus. The only other subsystem that it has really fast, immediate access to is memory (the core). In order for programs to run, then, they have to be in core (in memory). When your computer reads a program or data off the disk, what actually happens is that the processor uses the bus to send a disk read request to your disk controller. Some time later the disk controller uses the bus to signal the processor that it has read the data and put it in a certain location in memory. The processor can then use the bus to look at that data. Your keyboard and screen also communicate with the processor via the bus, but in simpler ways. We’ll discuss those later on. For now, you know enough to understand what happens when you turn on your computer. What happens when you switch on a computer? A computer without a program running is just an inert hunk of electronics. The first thing a computer has to do when it is turned on is start up a special program called an operating system. The operating system’s job is to help other computer programs to work by handling the messy details of controlling the computer’s hardware. The process of bringing up the operating system is called booting (originally this was bootstrapping and alluded to the process of pulling yourself up ``by your bootstraps’’). Your computer knows how to boot because instructions for booting are built into one of its chips, the BIOS (or Basic Input/Output System) chip. The BIOS chip tells it to look in a fixed place, usually on the lowest-numbered hard disk (the boot disk) for a special program called a boot loader (under Linux the boot loader is called LILO). The boot loader is pulled into memory and started. The boot loader’s job is to start the real operating system. The loader does this by looking for a kernel, loading it into memory, and starting it. When you boot Linux and see “LILO” on the screen followed by a bunch of dots, it is loading the kernel. (Each dot means it has loaded another disk block of kernel code.) (You may wonder why the BIOS doesn’t load the kernel directly – why the two-step process with the boot loader? Well, the BIOS isn’t very smart. In fact it’s very stupid, and Linux doesn’t use it at all after boot time. It was originally written for primitive 8-bit PCs with tiny disks, and literally can’t access enough of the disk to load the kernel directly. The boot loader step also lets you start one of several operating systems off different places on your disk, in the unlikely event that Unix isn’t good enough for you.) Once the kernel starts, it has to look around, find the rest of the hardware, and get ready to run programs. It does this by poking not at ordinary memory locations but rather at I/O ports – special bus addresses that are likely to have device controller cards listening at them for commands. The kernel doesn’t poke at random; it has a lot of built-in knowledge about what it’s likely to find where, and how controllers will respond if they’re present. This process is called autoprobing. Most of the messages you see at boot time are the kernel autoprobing your hardware through the I/O ports, figuring out what it has available to it and adapting itself to your machine. The Linux kernel is extremely good at this, better than most other Unixes and much better than DOS or Windows. In fact, many Linux old-timers think the cleverness of Linux’s boot-time probes (which made it relatively easy to install) was a major reason it broke out of the pack of free-Unix experiments to attract a critical mass of users. But getting the kernel fully loaded and running isn’t the end of the boot process; it’s just the first stage (sometimes called run level 1). After this first stage, the kernel hands control to a special process called `init’ which spawns several housekeeping processes. The init process’s first job is usually to check to make sure your disks are OK. Disk file systems are fragile things; if they’ve been damaged by a hardware failure or a sudden power outage, there are good reasons to take recovery steps before your Unix is all the way up. We’ll go into some of this later on when we talk about how file systems can go wrong. Init’s next step is to start several daemons. A daemon is a program like a print spooler, a mail listener or a WWW server that lurks in the background, waiting for things to do. These special programs often have to coordinate several requests that could conflict. They are daemons because it’s often easier to write one program that runs constantly and knows about all requests than it would be to try to make sure that a flock of copies (each processing one request and all running at the same time) don’t step on each other. The particular collection of daemons your system starts may vary, but will almost always include a print spooler (a gatekeeper daemon for your printer). The next step is to prepare for users. Init starts a copy of a program called getty to watch your console (and maybe more copies to watch dial-in serial ports). This program is what issues the login prompt to your console. Once all daemons and getty processes for each terminal are started, we’re at run level 2. At this level, you can log in and run programs. But we’re not done yet. The next step is to start up various daemons that support networking and other services. Once that’s done, we’re at run level 3 and the system is fully ready for use. What happens when you log in? When you log in (give a name to getty) you identify yourself to the computer. It then runs a program called (naturally enough) login, which takes your password and checks to see if you are authorized to be using the machine. If you aren’t, your login attempt will be rejected. If you are, login does a few housekeeping things and then starts up a command interpreter, the shell. (Yes, getty and login could be one program. They’re separate for historical reasons not worth going into here.) Here’s a bit more about what the system does before giving you a shell (you’ll need to know this later when we talk about file permissions). You identify yourself with a login name and password. That login name is looked up in a file called /etc/passwd, which is a sequence of lines each describing a user account. One of these fields is an encrypted version of the account password (sometimes the encrypted fields are actually kept in a second /etc/shadow file with tighter permissions; this makes password cracking harder). What you enter as an account password is encrypted in exactly the same way, and the login program checks to see if they match. The security of this method depends on the fact that, while it’s easy to go from your clear password to the encrypted version, the reverse is very hard. Thus, even if someone can see the encrypted version of your password, they can’t use your account. (It also means that if you forget your password, there’s no way to recover it, only to change it to something else you choose.) Once you have successfully logged in, you get all the privileges associated with the individual account you are using. You may also be recognized as part of a group. A group is a named collection of users set up by the system administrator. Groups can have privileges independently of their members’ privileges. A user can be a member of multiple groups. (For details about how Unix privileges work, see the section below on permissions.) (Note that although you will normally refer to users and groups by name, they are actually stored internally as numeric IDs. The password file maps your account name to a user ID; the /etc/group file maps group names to numeric group IDs. Commands that deal with accounts and groups do the translation automatically.) Your account entry also contains your home directory, the place in the Unix file system where your personal files will live. Finally, your account entry also sets your shell, the command interpreter that login will start up to accept your commmands. What happens when you run programs from the shell? The shell is Unix’s interpreter for the commands you type in; it’s called a shell because it wraps around and hides the operating system kernel. It’s an important feature of Unix that the shell and kernel are separate programs communicating through a small set of system calls. This makes it possible for there to be multiple shells, suiting different tastes in interfaces. The normal shell gives you the ‘$’ prompt that you see after logging in (unless you’ve customized it to be something else). We won’t talk about shell syntax and the easy things you can see on the screen here; instead we’ll take a look behind the scenes at what’s happening from the computer’s point of view. After boot time and before you run a program, you can think of your computer as containing a zoo of processes that are all waiting for something to do. They’re all waiting on events. An event can be you pressing a key or moving a mouse. Or, if your machine is hooked to a network, an event can be a data packet coming in over that network. The kernel is one of these processes. It’s a special one, because it controls when the other user processes can run, and it is normally the only process with direct access to the machine’s hardware. In fact, user processes have to make requests to the kernel when they want to get keyboard input, write to your screen, read from or write to disk, or do just about anything other than crunching bits in memory. These requests are known as system calls. Normally all I/O goes through the kernel so it can schedule the operations and prevent processes from stepping on each other. A few special user processes are allowed to slide around the kernel, usually by being given direct access to I/O ports. X servers (the programs that handle other programs’ requests to do screen graphics on most Unix boxes) are the most common example of this. But we haven’t gotten to an X server yet; you’re looking at a shell prompt on a character console. The shell is just a user process, and not a particularly special one. It waits on your keystrokes, listening (through the kernel) to the keyboard I/O port. As the kernel sees them, it echoes them to your screen. When the kernel sees an `Enter’ it passes your line of text to the shell. The shell tries to interpret those keystrokes as commands. Let’s say you type ls&#39; and Enter to invoke the Unix directory lister. The shell applies its built-in rules to figure out that you want to run the executable command in the file/bin/ls’. It makes a system call asking the kernel to start /bin/ls as a new child process and give it access to the screen and keyboard through the kernel. Then the shell goes to sleep, waiting for ls to finish. When /bin/ls is done, it tells the kernel it’s finished by issuing an exit system call. The kernel then wakes up the shell and tells it it can continue running. The shell issues another prompt and waits for another line of input. Other things may be going on while your `ls’ is executing, however (we’ll have to suppose that you’re listing a very long directory). You might switch to another virtual console, log in there, and start a game of Quake, for example. Or, suppose you’re hooked up to the Internet. Your machine might be sending or receiving mail while /bin/ls runs. How do input devices and interrupts work? Your keyboard is a very simple input device; simple because it generates small amounts of data very slowly (by a computer’s standards). When you press or release a key, that event is signalled up the keyboard cable to raise a hardware interrupt. It’s the operating system’s job to watch for such interrupts. For each possible kind of interrupt, there will be an interrupt handler, a part of the operating system that stashes away any data associated with them (like your keypress/keyrelease value) until it can be processed. What the interrupt handler for your keyboard actually does is post the key value into a system area near the bottom of memory. There, it will be available for inspection when the operating system passes control to whichever program is currently supposed to be reading from the keyboard. More complex input devices like disk or network cards work in a similar way. Earlier, I referred to a disk controller using the bus to signal that a disk request has been fulfilled. What actually happens is that the disk raises an interrupt. The disk interrupt handler then copies the retrieved data into memory, for later use by the program that made the request. Every kind of interrupt has an associated priority level. Lower-priority interrupts (like keyboard events) have to wait on higher-priority interrupts (like clock ticks or disk events). Unix is designed to give high priority to the kinds of events that need to be processed rapidly in order to keep the machine’s response smooth. In your operating system’s boot-time messages, you may see references to IRQ numbers. You may be aware that one of the common ways to misconfigure hardware is to have two different devices try to use the same IRQ, without understanding exactly why. Here’s the answer. IRQ is short for “Interrupt Request”. The operating system needs to know at startup time which numbered interrupts each hardware device will use, so it can associate the proper handlers with each one. If two different devices try use the same IRQ, interrupts will sometimes get dispatched to the wrong handler. This will usually at least lock up the device, and can sometimes confuse the OS badly enough that it will flake out or crash. How does my computer do several things at once? It doesn’t, actually. Computers can only do one task (or process) at a time. But a computer can change tasks very rapidly, and fool slow human beings into thinking it’s doing several things at once. This is called timesharing. One of the kernel’s jobs is to manage timesharing. It has a part called the scheduler which keeps information inside itself about all the other (non-kernel) processes in your zoo. Every 1/60th of a second, a timer goes off in the kernel, generating a clock interrupt. The scheduler stops whatever process is currently running, suspends it in place, and hands control to another process. 1/60th of a second may not sound like a lot of time. But on today’s microprocessors it’s enough to run tens of thousands of machine instructions, which can do a great deal of work. So even if you have many processes, each one can accomplish quite a bit in each of its timeslices. In practice, a program may not get its entire timeslice. If an interrupt comes in from an I/O device, the kernel effectively stops the current task, runs the interrupt handler, and then returns to the current task. A storm of high-priority interrupts can squeeze out normal processing; this misbehavior is called thrashing and is fortunately very hard to induce under modern Unixes. In fact, the speed of programs is only very seldom limited by the amount of machine time they can get (there are a few exceptions to this rule, such as sound or 3-D graphics generation). Much more often, delays are caused when the program has to wait on data from a disk drive or network connection. An operating system that can routinely support many simultaneous processes is called “multitasking”. The Unix family of operating systems was designed from the ground up for multitasking and is very good at it – much more effective than Windows or the Mac OS, which have had multitasking bolted into it as an afterthought and do it rather poorly. Efficient, reliable multitasking is a large part of what makes Linux superior for networking, communications, and Web service. How does my computer keep processes from stepping on each other? The kernel’s scheduler takes care of dividing processes in time. Your operating system also has to divide them in space, so that processes can’t step on each others’ working memory. Even if you assume that all programs are trying to be cooperative, you don’t want a bug in one of them to be able to corrupt others. The things your operating system does to solve this problem are called memory management. Each process in your zoo needs its own area of memory, as a place to run its code from and keep variables and results in. You can think of this set as consisting of a read-only code segment (containing the process’s instructions) and a writeable data segment (containing all the process’s variable storage). The data segment is truly unique to each process, but if two processes are running the same code Unix automatically arranges for them to share a single code segment as an efficiency measure. 8.1. Virtual memory: the simple version Efficiency is important, because memory is expensive. Sometimes you don’t have enough to hold the entirety of all the programs the machine is running, especially if you are using a large program like an X server. To get around this, Unix uses a technique called virtual memory. It doesn’t try to hold all the code and data for a process in memory. Instead, it keeps around only a relatively small working set; the rest of the process’s state is left in a special swap space area on your hard disk. Note that in the past, that “Sometimes” last paragraph ago was “Almost always” – the size of memory was typically small relative to the size of running programs, so swapping was frequent. Memory is far less expensive nowadays and even low-end machines have quite a lot of it. On modern single-user machines with 64MB of memory and up, it’s possible to run X and a typical mix of jobs without ever swapping after they’re initially loded into core. 8.2. Virtual memory: the detailed version Actually, the last section oversimplified things a bit. Yes, programs see most of your memory as one big flat bank of addresses bigger than physical memory, and disk swapping is used to maintain that illusion. But your hardware actually has no fewer than five different kinds of memory in it, and the differences between them can matter a good deal when programs have to be tuned for maximum speed. To really understand what goes on in your machine, you should learn how all of them work. The five kinds of memory are these: processor registers, internal (or on-chip) cache, external (or off-chip) cache, main memory, and disk. And the reason there are so many kinds is simple: speed costs money. I have listed these kinds of memory in decreasing order of access time and increasing order of cost. Register memory is the fastest and most expensive and can be random-accessed about a billion times a second, while disk is the slowest and cheapest and can do about 100 random accesses a second. Here’s a full list reflecting early-2000 speeds for a typical desktop machine. While speed and capacity will go up and prices will drop, you can expect these ratios to remain fairly constant – and it’s those ratios that shape the memory hierarchy. DiskSize: 13000MB Accesses: 100KB/sec Main memorySize: 256MB Accesses: 100M/sec External cacheSize: 512KB Accesses: 250M/sec Internal CacheSize: 32KB Accesses: 500M/sec ProcessorSize: 28 bytes Accesses: 1000M/sec We can’t build everything out of the fastest kinds of memory. It would be way too expensive – and even if it weren’t, fast memory is volatile. That is, it loses its marbles when the power goes off. Thus, computers have to have hard disks or other kinds of non-volatile storage that retains data when the power goes off. And there’s a huge mismatch between the speed of processors and the speed of disks. The middle three levels of the memory hierarchy (internal cache, external cache, and main memory) basically exist to bridge that gap. Linux and other Unixes have a feature called virtual memory. What this means is that the operating system behaves as though it has much more main memory than it actually does. Your actual physical main memory behaves like a set of windows or caches on a much larger “virtual” memory space, most of which at any given time is actually stored on disk in a special zone called the swap area. Out of sight of user programs, the OS is moving blocks of data (called “pages”) between memory and disk to maintain this illusion. The end result is that your virtual memory is much larger but not too much slower than real memory. How much slower virtual memory is than physical depends on how well the operating system’s swapping algorithms match the way your programs use virtual memory. Fortunately, memory reads and writes that are close together in time also tend to cluster in memory space. This tendency is called locality, or more formally locality of reference – and it’s a good thing. If memory references jumped around virtual space at random, you’d typically have to do a disk read and write for each new reference and virtual memory would be as slow as a disk. But because programs do actually exhibit strong locality, your operating system can do relatively few swaps per reference. It’s been found by experience that the most effective method for a broad class of memory-usage patterns is very simple; it’s called LRU or the “least recently used” algorithm. The virtual-memory system grabs disk blocks into its working set as it needs them. When it runs out of physical memory for the working set, it dumps the least-recently-used block. All Unixes, and most other virtual-memory operating systems, use minor variations on LRU. Virtual memory is the first link in the bridge between disk and processor speeds. It’s explicitly managed by the OS. But there is still a major gap between the speed of physical main memory and the speed at which a processor can access its register memory. The external and internal caches address this, using a technique similar to virtual memory as I’ve described it. Just as the physical main memory behaves like a set of windows or caches on the disk’s swap area, the external cache acts as windows on main memory. External cache is faster (250M accesses per sec, rather than 100M) and smaller. The hardware (specifically, your computer’s memory controller) does the LRU thing in the external cache on blocks of data fetched from the main memory. For historical reasons, the unit of cache swapping is called a “line” rather than a page. But we’re not done. The internal cache gives us the final step-up in effective speed by caching portions of the external cache. It is faster and smaller yet – in fact, it lives right on the processor chip. If you want to make your programs really fast, it’s useful to know these details. Your programs get faster when they have stronger locality, because that makes the caching work better. The easiest way to make programs fast is therefore to make them small. If a program isn’t slowed down by lots of disk I/O or waits on network events, it will usually run at the speed of the smallest cache that it will fit inside. If you can’t make your whole program small, some effort to tune the speed-critical portions so they have stronger locality can pay off. Details on techniques for doing such tuning are beyond the scope of this tutorial; by the time you need them, you’ll be intimate enough with some compiler to figure out many of them yourself. 8.3. The Memory Management Unit Even when you have enough physical core to avoid swapping, the part of the operating system called the memory manager still has important work to do. It has to make sure that programs can only alter their own data segments – that is, prevent erroneous or malicious code in one program from garbaging the data in another. To do this, it keeps a table of data and code segments. The table is updated whenever a process either requests more memory or releases memory (the latter usually when it exits). This table is used to pass commands to a specialized part of the underlying hardware called an MMU or memory management unit. Modern processor chips have MMUs built right onto them. The MMU has the special ability to put fences around areas of memory, so an out-of-bound reference will be refused and cause a special interrupt to be raised. If you ever see a Unix message that says “Segmentation fault”, “core dumped” or something similar, this is exactly what has happened; an attempt by the running program to access memory (core) outside its segment has raised a fatal interrupt. This indicates a bug in the program code; the core dump it leaves behind is diagnostic information intended to help a programmer track it down. There is another aspect to protecting processes from each other besides segregating the memory they access. You also want to be able to control their file accesses so a buggy or malicious program can’t corrupt critical pieces of the system. This is why Unix has file permissions which we’ll discuss later. How does my computer store things in memory? You probably know that everything on a computer is stored as strings of bits (binary digits; you can think of them as lots of little on-off switches). Here we’ll explain how those bits are used to represent the letters and numbers that your computer is crunching. Before we can go into this, you need to understand about the word size of your computer. The word size is the computer’s preferred size for moving units of information around; technically it’s the width of your processor’s registers, which are the holding areas your processor uses to do arithmetic and logical calculations. When people write about computers having bit sizes (calling them, say, 32-bit&#39;&#39; or64-bit’’ computers), this is what they mean. Most computers (including 386, 486, and Pentium PCs) have a word size of 32 bits. The old 286 machines had a word size of 16. Old-style mainframes often had 36-bit words. A few processors (like the Alpha from what used to be DEC and is now Compaq) have 64-bit words. The 64-bit word will become more common over the next five years; Intel is planning to replace the Pentium series with a 64-bit chip called the `Itanium’. The computer views your memory as a sequence of words numbered from zero up to some large value dependent on your memory size. That value is limited by your word size, which is why programs on older machines like 286s had to go through painful contortions to address large amounts of memory. I won’t describe them here; they still give older programmers nightmares. 9.1. Numbers Integer numbers are represented as either words or pairs of words, depending on your processor’s word size. One 32-bit machine word is the most common integer representation. Integer arithmetic is close to but not actually mathematical base-two. The low-order bit is 1, next 2, then 4 and so forth as in pure binary. But signed numbers are represented in twos-complement notation. The highest-order bit is a sign bit which makes the quantity negative, and every negative number can be obtained from the corresponding positive value by inverting all the bits and adding one. This is why integers on a 32-bit machine have the range -2^31 to 2^31 - 1 1 (where ^ is the `power’ operation, 2^3 = 8). That 32nd bit is being used for sign. Some computer languages give you access to unsigned arithmetic which is straight base 2 with zero and positive numbers only. Most processors and some languages can do operations in floating-point numbers (this capability is built into all recent processor chips). Floating-point numbers give you a much wider range of values than integers and let you express fractions. The ways in which this is done vary and are rather too complicated to discuss in detail here, but the general idea is much like so-called `scientific notation’, where one might write (say) 1.234 * 10^23; the encoding of the number is split into a mantissa (1.234) and the exponent part (23) for the power-of-ten multiplier (which means the number multiplied out would have 20 zeros on it, 23 minus the three decimal places). 9.2. Characters Characters are normally represented as strings of seven bits each in an encoding called ASCII (American Standard Code for Information Interchange). On modern machines, each of the 128 ASCII characters is the low seven bits of an octet or 8-bit byte; octets are packed into memory words so that (for example) a six-character string only takes up two memory words. For an ASCII code chart, type `man 7 ascii’ at your Unix prompt. The preceding paragraph was misleading in two ways. The minor one is that the term octet&#39; is formally correct but seldom actually used; most people refer to an octet as byte and expect bytes to be eight bits long. Strictly speaking, the termbyte’ is more general; there used to be, for example, 36-bit machines with 9-bit bytes (though there probably never will be again). The major one is that not all the world uses ASCII. In fact, much of the world can’t – ASCII, while fine for American English, lacks many accented and other special characters needed by users of other languages. Even British English has trouble with the lack of a pound-currency sign. There have been several attempts to fix this problem. All use the extra high bit that ASCII doesn’t, making it the low half of a 256-character set. The most widely-used of these is the so-called `Latin-1’ character set (more formally called ISO 8859-1). This is the default character set for Linux, HTML, and X. Microsoft Windows uses a mutant version of Latin-1 that adds a bunch of characters such as right and left double quotes in places proper Latin-1 leaves unassigned for historical reasons (for a scathing account of the trouble this causes, see the demoroniser page). Latin-1 handles western European languages, including English, French, German, Spanish, Italian, Dutch, Norwegian, Swedish, Danish. However, this isn’t good enough either, and as a result there is a whole series of Latin-2 through -9 character sets to handle things like Greek, Arabic, Hebrew, Esperanto, and Serbo-Croatian. For details, see the ISO alphabet soup page. The ultimate solution is a huge standard called Unicode (and its identical twin ISO/IEC 10646-1:1993). Unicode is identical to Latin-1 in its lowest 256 slots. Above these in 16-bit space it includes Greek, Cyrillic, Armenian, Hebrew, Arabic, Devanagari, Bengali, Gurmukhi, Gujarati, Oriya, Tamil, Telugu, Kannada, Malayalam, Thai, Lao, Georgian, Tibetan, Japanese Kana, the complete set of modern Korean Hangul, and a unified set of Chinese/Japanese/Korean (CJK) ideographs. For details, see the Unicode Home Page. How does my computer store things on disk? When you look at a hard disk under Unix, you see a tree of named directories and files. Normally you won’t need to look any deeper than that, but it does become useful to know what’s going on underneath if you have a disk crash and need to try to salvage files. Unfortunately, there’s no good way to describe disk organization from the file level downwards, so I’ll have to describe it from the hardware up. 10.1. Low-level disk and file system structure The surface area of your disk, where it stores data, is divided up something like a dartboard – into circular tracks which are then pie-sliced into sectors. Because tracks near the outer edge have more area than those close to the spindle at the center of the disk, the outer tracks have more sector slices in them than the inner ones. Each sector (or disk block) has the same size, which under modern Unixes is generally 1 binary K (1024 8-bit words). Each disk block has a unique address or disk block number. Unix divides the disk into disk partitions. Each partition is a continuous span of blocks that’s used separately from any other partition, either as a file system or as swap space. The original reasons for partitions had to do with crash recovery in a world of much slower and more error-prone disks; the boundaries between them reduce the fraction of your disk likely to become inaccessible or corrupted by a random bad spot on the disk. Nowadays, it’s more important that partitions can be declared read-only (preventing an intruder from modifying critical system files) or shared over a network through various means we won’t discuss here. The lowest-numbered partition on a disk is often treated specially, as a boot partition where you can put a kernel to be booted. Each partition is either swap space (used to implement virtual memory) or a file system used to hold files. Swap-space partitions are just treated as a linear sequence of blocks. File systems, on the other hand, need a way to map file names to sequences of disk blocks. Because files grow, shrink, and change over time, a file’s data blocks will not be a linear sequence but may be scattered all over its partition (from wherever the operating system can find a free block when it needs one). This scattering effect is called fragmentation. 10.2. File names and directories Within each file system, the mapping from names to blocks is handled through a structure called an i-node. There’s a pool of these things near the ``bottom’’ (lowest-numbered blocks) of each file system (the very lowest ones are used for housekeeping and labeling purposes we won’t describe here). Each i-node describes one file. File data blocks (including directories) live above the i-nodes (in higher-numbered blocks). Every i-node contains a list of the disk block numbers in the file it describes. (Actually this is a half-truth, only correct for small files, but the rest of the details aren’t important here.) Note that the i-node does not contain the name of the file. Names of files live in directory structures. A directory structure just maps names to i-node numbers. This is why, in Unix, a file can have multiple true names (or hard links); they’re just multiple directory entries that happen to point to the same i-node. 10.3. Mount points In the simplest case, your entire Unix file system lives in just one disk partition. While you’ll see this arrangement on some small personal Unix systems, it’s unusual. More typical is for it to be spread across several disk partitions, possibly on different physical disks. So, for example, your system may have one small partition where the kernel lives, a slightly larger one where OS utilities live, and a much bigger one where user home directories live. The only partition you’ll have access to immediately after system boot is your root partition, which is (almost always) the one you booted from. It holds the root directory of the file system, the top node from which everything else hangs. The other partitions in the system have to be attached to this root in order for your entire, multiple-partition file system to be accessible. About midway through the boot process, your Unix will make these non-root partitions accessible. It will mount each one onto a directory on the root partition. For example, if you have a Unix directory called `/usr’, it is probably a mount point to a partition that contains many programs installed with your Unix but not required during initial boot. 10.4. How a file gets looked up Now we can look at the file system from the top down. When you open a file (such as, say, /home/esr/WWW/ldp/fundamentals.sgml) here is what happens: Your kernel starts at the root of your Unix file system (in the root partition). It looks for a directory there called home&#39;. Usuallyhome’ is a mount point to a large user partition elsewhere, so it will go there. In the top-level directory structure of that user partition, it will look for a entry called esr&#39; and extract an i-node number. It will go to that i-node, notice that its associated file data blocks are a directory structure, and look upWWW’. Extracting that i-node, it will go to the corresponding subdirectory and look up ldp&#39;. That will take it to yet another directory i-node. Opening that one, it will find an i-node number forfundamentals.sgml’. That i-node is not a directory, but instead holds the list of disk blocks associated with the file. 10.5. File ownership, permissions and security To keep programs from accidentally or maliciously stepping on data they shouldn’t, Unix has permission features. These were originally designed to support timesharing by protecting multiple users on the same machine from each other, back in the days when Unix ran mainly on expensive shared minicomputers. In order to understand file permissions, you need to recall the description of users and groups in the section What happens when you log in?. Each file has an owning user and an owning group. These are initially those of the file’s creator; they can be changed with the programs chown(1) and chgrp(1). The basic permissions that can be associated with a file are read&#39; (permission to read data from it),write’ (permission to modify it) and execute&#39; (permission to run it as a program). Each file has three sets of permissions; one for its owning user, one for any user in its owning group, and one for everyone else. Theprivileges’ you get when you log in are just the ability to do read, write, and execute on those files for which the permission bits match your user ID or one of the groups you are in, or files that have been made accessible to the world. To see how these may interact and how Unix displays them, let’s look at some file listings on a hypothetical Unix system. Here’s one: snark:~$ ls -l notes-rw-r–r– 1 esr users 2993 Jun 17 11:00 notesThis is an ordinary data file. The listing tells us that it’s owned by the user esr&#39; and was created with the owning groupusers’. Probably the machine we’re on puts every ordinary user in this group by default; other groups you commonly see on timesharing machines are staff&#39;,admin’, or `wheel’ (for obvious reasons, groups are not very important on single-user workstations or PCs). Your Unix may use a different default group, perhaps one named after your user ID. The string -rw-r--r--&#39; represents the permission bits for the file. The very first dash is the position for the directory bit; it would showd’ if the file were a directory. After that, the first three places are user permissions, the second three group permissions, and the third are permissions for others (often called world&#39; permissions). On this file, the owning useresr’ may read or write the file, other people in the `users’ group may read it, and everybody else in the world may read it. This is a pretty typical set of permissions for an ordinary data file. Now let’s look at a file with very different permissions. This file is GCC, the GNU C compiler. snark:~$ ls -l /usr/bin/gcc-rwxr-xr-x 3 root bin 64796 Mar 21 16:41 /usr/bin/gccThis file belongs to a user called root&#39; and a group calledbin’; it can be written (modified) only by root, but read or executed by anyone. This is a typical ownership and set of permissions for a pre-installed system command. The bin&#39; group exists on some Unixes to group together system commands (the name is a historical relic, short forbinary’). Your Unix might use a root&#39; group instead (not quite the same as theroot’ user!). The `root’ user is the conventional name for numeric user ID 0, a special, privileged account that can override all privileges. Root access is useful but dangerous; a typing mistake while you’re logged in as root can clobber critical system files that the same command executed from an ordinary user account could not touch. Because the root account is so powerful, access to it should be guarded very carefully. Your root password is the single most critical piece of security information on your system, and it is what any crackers and intruders who ever come after you will be trying to get. About passwords: Don’t write them down – and don’t pick a passwords that can easily be guessed, like the first name of your girlfriend/boyfriend/spouse. This is an astonishingly common bad practice that helps crackers no end. In general, don’t pick any word in the dictionary; there are programs called dictionary crackers that look for likely passwords by running through word lists of common choices. A good technique is to pick a combination consisting of a word, a digit, and another word, such as shark6cider&#39; orjump3joy’; that will make the search space too large for a dictionary cracker. Don’t use these examples, though – crackers might expect that after reading this document and put them in their dictionaries. Now let’s look at a third case: snark:~$ ls -ld ~drwxr-xr-x 89 esr users 9216 Jun 27 11:29 /home2/esrsnark:~$This file is a directory (note the `d’ in the first permissions slot). We see that it can be written only by esr, but read and executed by anybody else. Read permission gives you the ability to list the directory – that is, to see the names of files and directories it contains. Write permission gives you the ability to create and delete files in the directory. If you remember that the directory includes a list of the names of the files and subdirectories it contains, these rules will make sense. Execute permission on a directory means you can get through the directory to open the files and directories below it. In effect, it gives you permission to access the i-nodes in the directory. A directory with execute completely turned off would be useless. Occasionally you’ll see a directory that is world-executable but not world-readable; this means a random user can get to files and directories beneath it, but only by knowing their exact names (the directory cannot be listed). It’s important to remember that read, write, or execute permission on a directory is independent of the permissions on the files and directories beneath. In particular, write access on a directory means you can create new files or delete existing files there, but does not automatically give you write access to existing files. Finally, let’s look at the permissions of the login program itself. snark:~$ ls -l /bin/login-rwsr-xr-x 1 root bin 20164 Apr 17 12:57 /bin/loginThis has the permissions we’d expect for a system command – except for that ‘s’ where the owner-execute bit ought to be. This is the visible manifestation of a special permission called the `set-user-id’ or setuid bit. The setuid bit is normally attached to programs that need to give ordinary users the privileges of root, but in a controlled way. When it is set on an executable program, you get the privileges of the owner of that program file while the program is running on your behalf, whether or not they match your own. Like the root account itself, setuid programs are useful but dangerous. Anyone who can subvert or modify a setuid program owned by root can use it to spawn a shell with root privileges. For this reason, opening a file to write it automatically turns off its setuid bit on most Unixes. Many attacks on Unix security try to exploit bugs in setuid programs in order to subvert them. Security-conscious system administrators are therefore extra-careful about these programs and reluctant to install new ones. There are a couple of important details we glossed over when discussing permissions above; namely, how the owning group and permissions are assigned when a file or directory is first created. The group is an issue because users can be members of multiple groups, but one of them (specified in the user’s /etc/passwd entry) is the user’s default group and will normally own files created by the user. The story with initial permission bits is a little more complicated. A program that creates a file will normally specify the permissions it is to start with. But these will be modified by a variable in the user’s environment called the umask. The umask specifies which permission bits to turn off when creating a file; the most common value, and the default on most systems, is ——-w- or 002, which turns off the world-write bit. See the documentation of the umask command on your shell’s manual page for details. Initial directory group is also a bit complicated. On some Unixes a new directory gets the default group of the creating user (this in the System V convention); on others, it gets the owning group of the parent directory in which it’s created (this is the BSD convention). On some modern Unixes, including Linux, the latter behavior can be selected by setting the set-group-ID on the directory (chmod g+s). 10.6. How things can go wrong Earlier it was hinted that file systems can be fragile things. Now we know that to get to a file you have to hopscotch through what may be an arbitrarily long chain of directory and i-node references. Now suppose your hard disk develops a bad spot? If you’re lucky, it will only trash some file data. If you’re unlucky, it could corrupt a directory structure or i-node number and leave an entire subtree of your system hanging in limbo – or, worse, result in a corrupted structure that points multiple ways at the same disk block or i-node. Such corruption can be spread by normal file operations, trashing data that was not in the original bad spot. Fortunately, this kind of contingency has become quite uncommon as disk hardware has become more reliable. Still, it means that your Unix will want to integrity-check the file system periodically to make sure nothing is amiss. Modern Unixes do a fast integrity check on each partition at boot time, just before mounting it. Every few reboots they’ll do a much more thorough check that takes a few minutes longer. If all of this sounds like Unix is terribly complex and failure-prone, it may be reassuring to know that these boot-time checks typically catch and correct normal problems before they become really disastrous. Other operating systems don’t have these facilities, which speeds up booting a bit but can leave you much more seriously screwed when attempting to recover by hand (and that’s assuming you have a copy of Norton Utilities or whatever in the first place…). One of the trends in current Unix designs is journalling file systems. These arrange traffic to the disk so that it’s guaranteed to be in a consistent state that can be recovered when the system comes back up. This will speed up the boot-time integrity check a lot. How do computer languages work? We’ve already discussed how programs are run. Every program ultimately has to execute as a stream of bytes that are instructions in your computer’s machine language. But human beings don’t deal with machine language very well; doing so has become a rare, black art even among hackers. Almost all Unix code except a small amount of direct hardware-interface support in the kernel itself is nowadays written in a high-level language. (The high-level&#39; in this term is a historical relic meant to distinguish these fromlow-level’ assembler languages, which are basically thin wrappers around machine code.) There are several different kinds of high-level languages. In order to talk about these, you’ll find it useful to bear in mind that the source code of a program (the human-created, editable version) has to go through some kind of translation into machine code that the machine can actually run. 11.1. Compiled languages The most conventional kind of language is a compiled language. Compiled languages get translated into runnable files of binary machine code by a special program called (logically enough) a compiler. Once the binary has been generated, you can run it directly without looking at the source code again. (Most software is delivered as compiled binaries made from code you don’t see.) Compiled languages tend to give excellent performance and have the most complete access to the OS, but also to be difficult to program in. C, the language in which Unix itself is written, is by far the most important of these (with its variant C++). FORTRAN is another compiled language still used among engineers and scientists but years older and much more primitive. In the Unix world no other compiled languages are in mainstream use. Outside it, COBOL is very widely used for financial and business software. There used to be many other compiler languages, but most of them have either gone extinct or are strictly research tools. If you are a new Unix developer using a compiled language, it is overwhelmingly likely to be C or C++. 11.2. Interpreted languages An interpreted language depends on an interpreter program that reads the source code and translates it on the fly into computations and system calls. The source has to be re-interpreted (and the interpreter present) each time the code is executed. Interpreted languages tend to be slower than compiled languages, and often have limited access to the underlying operating system and hardware. On the other hand, they tend to be easier to program and more forgiving of coding errors than compiled languages. Many Unix utilities, including the shell and bc(1) and sed(1) and awk(1), are effectively small interpreted languages. BASICs are usually interpreted. So is Tcl. Historically, the most important interpretive language has been LISP (a major improvement over most of its successors). Today, Unix shells and the Lisp that lives inside the Emacs editor are probably the most important pure interpreted languages. 11.3. P-code languages Since 1990 a kind of hybrid language that uses both compilation and interpretation has become increasingly important. P-code languages are like compiled languages in that the source is translated to a compact binary form which is what you actually execute, but that form is not machine code. Instead it’s pseudocode (or p-code), which is usually a lot simpler but more powerful than a real machine language. When you run the program, you interpret the p-code. P-code can run nearly as fast as a compiled binary (p-code interpreters can be made quite simple, small and speedy). But p-code languages can keep the flexibility and power of a good interpreter. Important p-code languages include Python, Perl, and Java. How does the Internet work? To help you understand how the Internet works, we’ll look at the things that happen when you do a typical Internet operation – pointing a browser at the front page of this document at its home on the Web at the Linux Documentation Project. This document is ttp://www.linuxdoc.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/index.htmlwhich means it lives in the file LDP/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/index.html under the World Wide Web export directory of the host www.linuxdoc.org. 12.1. Names and locations The first thing your browser has to do is to establish a network connection to the machine where the document lives. To do that, it first has to find the network location of the host www.linuxdoc.org (host&#39; is short forhost machine’ or network host&#39;; www.linuxdoc.org is a typical hostname). The corresponding location is actually a number called an IP address (we&#39;ll explain theIP’ part of this term later). To do this, your browser queries a program called a name server. The name server may live on your machine, but it’s more likely to run on a service machine that yours talks to. When you sign up with an ISP, part of your setup procedure will almost certainly involve telling your Internet software the IP address of a nameserver on the ISP’s network. The name servers on different machines talk to each other, exchanging and keeping up to date all the information needed to resolve hostnames (map them to IP addresses). Your nameserver may query three or four different sites across the network in the process of resolving www.linuxdoc.org, but this usually happens very quickly (as in less than a second). We’ll look at how nameservers detail in the next section. The nameserver will tell your browser that www.linuxdoc.org’s IP address is 152.19.254.81; knowing this, your machine will be able to exchange bits with www.linuxdoc.org directly. 12.2. The Domain Name System The whole network of programs and databases that cooperates to translate hostnames to IP addresses is called DNS&#39; (Domain Name System). When you see references to aDNS server’, that means what we just called a nameserver. Now I’ll explain how the overall system works. Internet hostnames are composed of parts separated by dots. A domain is a collection of machines that share a common name suffix. Domains can live inside other domains. For example, the machine www.linuxdoc.org lives in the .linuxdoc.org subdomain of the .org domain. Each domain is defined by an authoritative name server that knows the IP addresses of the other machines in the domain. The authoritative (or primary&#39;) name server may have backups in case it goes down; if you see references to a secondary name server or (secondary DNS’) it’s talking about one of those. These secondaries typically refresh their information from their primaries every few hours, so a change made to the hostname-to-IP mapping on the primary will automatically be propagated. Now here’s the important part. The nameservers for a domain do not have to know the locations of all the machines in other domains (including their own subdomains); they only have to know the location of the nameservers. In our example, the authoritative name server for the .org domain knows the IP address of the nameserver for .linuxdoc.org, but not the address of all the other machines in linuxdoc.org. The domains in the DNS system are arranged like a big inverted tree. At the top are the root servers. Everybody knows the IP addresses of the root servers; they’re wired into your DNS software. The root servers know the IP addresses of the nameservers for the top-level domains like .com and .org, but not the addresses of machines inside those domains. Each top-level domain server knows where the nameservers for the domains directly beneath it are, and so forth. DNS is carefully designed so that each machine can get away with the minimum amount of knowledge it needs to have about the shape of the tree, and local changes to subtrees can be made simply by changing one authoritative server’s database of name-to-IP-address mappings. When you query for the IP address of www.linuxdoc.org, what actually happens is this: First, your nameserver asks a root server to tell it where it can find a nameserver for .org. Once it knows that, it then asks the .org server to tell it the IP address of a .linuxdoc.org nameserver. Once it has that, it asks the .linuxdoc.org nameserver to tell it the address of the host www.linuxdoc.org. Most of the time, your nameserver doesn’t actually have to work that hard. Nameservers do a lot of cacheing; when yours resolves a hostname, it keeps the association with the resulting IP address around in memory for a while. This is why, when you surf to a new website, you’ll usually only see a message from your browser about “Looking up” the host for the first page you fetch. Eventually the name-to-address mapping expires and your DNS has to re-query — this is important so you don’t have invalid information hanging around forever when a hostname changes addresses. Your cached IP address for a site is also thrown out if the host is unreachable. 12.3. Packets and routers What the browser wants to do is send a command to the Web server on www.linuxdoc.org that looks like this: GET /LDP/HOWTO/Fundamentals.html HTTP/1.0Here’s how that happens. The command is made into a packet, a block of bits like a telegram that is wrapped with three important things; the source address (the IP address of your machine), the destination address (152.19.254.81), and a service number or port number (80, in this case) that indicates that it’s a World Wide Web request. Your machine then ships the packet down the wire (your connection to your ISP, or local network) until it gets to a specialized machine called a router. The router has a map of the Internet in its memory – not always a complete one, but one that completely describes your network neighborhood and knows how to get to the routers for other neighborhoods on the Internet. Your packet may pass through several routers on the way to its destination. Routers are smart. They watch how long it takes for other routers to acknowledge having received a packet. They also use that information to direct traffic over fast links. They use it to notice when another routers (or a cable) have dropped off the network, and compensate if possible by finding another route. There’s an urban legend that the Internet was designed to survive nuclear war. This is not true, but the Internet’s design is extremely good at getting reliable performance out of flaky hardware in an uncertain world. This is directly due to the fact that its intelligence is distributed through thousands of routers rather than concentrated in a few massive and vulnerable switches (like the phone network). This means that failures tend to be well localized and the network can route around them. Once your packet gets to its destination machine, that machine uses the service number to feed the packet to the web server. The web server can tell where to reply to by looking at the command packet’s source IP address. When the web server returns this document, it will be broken up into a number of packets. The size of the packets will vary according to the transmission media in the network and the type of service. 12.4. TCP and IP To understand how multiple-packet transmissions are handled, you need to know that the Internet actually uses two protocols, stacked one on top of the other. The lower level, IP (Internet Protocol), is responsible for labeling individual packets with the source address and destination address of two computers exchanging information over a network. For example, when you access http://www.linuxdoc.org, the packets you send will have your computer’s IP address, such as 192.168.1.101, and the IP address of the www.linuxdoc.org computer, 152.2.210.81. These addresses work in much the same way that your home address works when someone sends you a letter. The post office can read the address and determine where you are and how best to route the letter to you, much like a router does for Internet traffic. The upper level, TCP (Transmission Control Protocol), gives you reliability. When two machines negotiate a TCP connection (which they do using IP), the receiver knows to send acknowledgements of the packets it sees back to the sender. If the sender doesn’t see an acknowledgement for a packet within some timeout period, it resends that packet. Furthermore, the sender gives each TCP packet a sequence number, which the receiver can use you reassemble packets in case they show up out of order. (This can easily happen if network links go up or down during a connection.) TCP/IP packets also contain a checksum to enable detection of data corrupted by bad links. (The checksum is computed from the rest of the packet in such a way that if the either the rest of the packet or the checksum is corrupted, redoing the computation and comparing is very likely to indicate an error.) So, from the point of view of anyone using TCP/IP and nameservers, it looks like a reliable way to pass streams of bytes between hostname/service-number pairs. People who write network protocols almost never have to think about all the packetizing, packet reassembly, error checking, checksumming, and retransmission that goes on below that level. 12.5. HTTP, an application protocol Now let’s get back to our example. Web browsers and servers speak an application protocol that runs on top of TCP/IP, using it simply as a way to pass strings of bytes back and forth. This protocol is called HTTP (Hyper-Text Transfer Protocol) and we’ve already seen one command in it – the GET shown above. When the GET command goes to www.linuxdoc.org’s webserver with service number 80, it will be dispatched to a server daemon listening on port 80. Most Internet services are implemented by server daemons that do nothing but wait on ports, watching for and executing incoming commands. If the design of the Internet has one overall rule, it’s that all the parts should be as simple and human-accessible as possible. HTTP, and its relatives (like the Simple Mail Transfer Protocol, SMTP, that is used to move electronic mail between hosts) tend to use simple printable-text commands that end with a carriage-return/line feed. This is marginally inefficient; in some circumstances you could get more speed by using a tightly-coded binary protocol. But experience has shown that the benefits of having commands be easy for human beings to describe and understand outweigh any marginal gain in efficiency that you might get at the cost of making things tricky and opaque. Therefore, what the server daemon ships back to you via TCP/IP is also text. The beginning of the response will look something like this (a few headers have been suppressed): HTTP/1.1 200 OKDate: Sat, 10 Oct 1998 18:43:35 GMTServer: Apache/1.2.6 Red HatLast-Modified: Thu, 27 Aug 1998 17:55:15 GMTContent-Length: 2982Content-Type: text/htmlThese headers will be followed by a blank line and the text of the web page (after which the connection is dropped). Your browser just displays that page. The headers tell it how (in particular, the Content-Type header tells it the returned data is really HTML). To Learn More There is a Reading List HOWTO that lists books you can read to learn more about the topics we have touched on here. You might also want to read the How To Become A Hacker document.","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Unix","slug":"Unix","permalink":"http://ipcreator.me/tags/Unix/"},{"name":"Internet","slug":"Internet","permalink":"http://ipcreator.me/tags/Internet/"}]},{"title":"如何成为一名黑客","date":"2017-02-02T13:49:06.000Z","path":"2017/02/02/How To Become A Hacker/","text":"Eric Steven RaymondThyrsus EnterprisesCopyright © 2001 Eric S. Raymond &lt;esr&#64;thyrsus&#46;com&gt;Wang Dingwei &lt;wangdingwei82&#64;gmail&#46;com&gt; 基于 Barret 的翻译更正而成。转载请注明出处。 目录如何成为一名黑客为什么会有这份文档？什么是黑客？黑客的态度黑客的基本技能提高自己在黑客圈中的地位黑客和书呆子(Nerd)的联系向黑客的格调靠拢关于黑客、开源、以及自由软件的历史其它资源FAQ（常见问题解答）为什么会有这份文档？¶作为 Jargon File（译注：黑客行话大全）的编辑和几份其他类似性质知名文章的作者，我经常收到充满热情的网络新手的电子邮件询问：“我如何才能成为一名出色的Hacker？”早在 1996 年，我注意到网上似乎没有任何的 FAQ 或者 Web 形式的文档提到及这个至关重要的问题，因此我写了这份文档。现在，很多 Hacker 都认为这是一篇权威性文档，那我也姑且这么认为吧。不过，我不认为我是这个话题的绝对权威；如果你不喜欢这篇文档，你也可以自己写一份。如果你读到的是这份文档的离线拷贝，你可以在http://catb.org/~esr/faqs/hacker-howto.html 读到最新版本。注意：文档的结尾有一份 FAQ（常见问题解答）。如果你想通过邮件询问我关于这份文档的问题，请先读这份 FAQ 看看能否找到答案——一遍不行就读两遍。目前这份文档有很多翻译版本：阿拉伯语、白俄罗斯语、丹麦语、荷兰语 、爱沙尼亚语、德语 、希腊语、意大利语 、希伯来语、 挪威语 、葡萄牙语（巴西）、 罗马尼亚语 、西班牙语、土耳其语、瑞典语 。注意由于这份文档时有修正，所以以上翻译版本可能有不同程度的过时。装饰本文的“五点九宫格”图像被称作“glider”，在一种叫做 Life 的数学模型中，这个简单的样本有一些异乎寻常的属性，多年以来 Hacker 们都为此着迷。我认为这个图像是一个很好的黑客徽标：它显得抽象而且神秘，而且像是一扇大门，通向一个截然不同的有其内在逻辑的世界。你可以阅读更多关于 Glider 徽标 的内容。 什么是黑客？¶Jargon File 讲了一堆关于“hacker”这个词的定义，大部分是关于“技术高超”、“热衷解决问题”、以及“超越极限”的内容。但如果你只想知道如何成为一名黑客的话，真正重要的只有两条。这可以追溯到几十年前，那时候第一代分时微型计算机才刚刚诞生, 而 ARPAnet 的实验也才刚展开。那时的编程专家和组网高手建立了一个具有共享性质的文化社群，“hacker” 这个名词就是其中的成员创造的。黑客们建立了互联网，黑客们让 Unix操作系统演化到现在的模样，黑客们经营着 Usenet，黑客们让万维网运转起来。如果你是这个文化的一部分，如果你对这种文化有所贡献，而且这个社群的其它成员也认识你并称你为 hacker，那么你就是一名黑客。黑客的思维方式并不仅仅局限在软件黑客的文化圈内。也有人用黑客态度对待其它事情，如电子和音乐方面——其实你可以在任何最高级别的科学和艺术活动中发现它的身影。软件黑客对这些领域的践行者尊重有加，并把他们也称作黑客——有人宣称黑客天性是绝对独立于他们工作的特定领域的。但在这份文档中，我们将集中书写在软件黑客的技术和态度，以及发明了“黑客”一词的、以共享为特征的文化传统。有另外一群人大声嚷嚷着自己是黑客，但他们根本不是。他们主要由青少年男性构成，是一些蓄意破坏计算机和电话系统的人。真正的黑客把这些人叫做“骇客”(cracker)，并不屑与之为伍。黑客们通常认为他们是一群懒散、没有责任心、而且不是很聪明的人。会通过热接线发动汽车并不意味着你是一个汽车工程师。一样的道理，会破坏安全也不意味着你是一名黑客，不幸的是，很多记者和作家往往错把“骇客”当成黑客；这种做法一直使真正的黑客感到恼火。根本的区别是：黑客搞建设，骇客搞破坏。如果你想成为一名黑客，请接着读下去。如果你想做一个骇客，就去读 alt.2600 新闻组吧，顺便准备好去蹲个五到十年的监狱，而且最终你会意识到你并不像自己想象的那么聪明。关于骇客，我能说的只有这些。黑客的态度¶1. 这个世界充满了令人着迷的问题等着我们解决。2. 一个问题不应该被解决两次。3. 无聊和乏味的工作是罪恶。4. 崇尚自由。5. 态度不能替代能力。黑客们解决问题，建设事物，同时他们信仰自由和无私的双向帮助。要想作为一名黑客被社群认同，你需要体现出自己已经具备了这种态度。而要体现出这种态度，你就得真正相信和赞同这种态度。但是，如果你认为培养黑客态度只是进入黑客文化圈的敲门砖，那就大错特错了。这种态度将有助于有助于你的学习，并且能为你提供源源不断的动力，所以它对你而言是至关重要的。和所有创造性的艺术一样，成为大师的最有效方法，就是模仿大师的精神——智力上的模仿还不够，还要从感情上进行模仿。或者正如下面这首现代的禅诗讲的：修行之道：关注大师的言行，跟随大师的举动，和大师一并修行，领会大师的意境，成为真正的大师。所以，如果你想成为一名黑客，反复读下面的事情直至你相信它们为止：1. 这个世界充满了令人着迷的问题等着我们解决。¶做一名黑客会有很多乐趣，但是这些乐趣需要付出很多努力才能获得。这些努力需要动力。成功的运动员在表演和超越自我极限的时候获得身体上的愉悦，并把这种愉悦作为自己的动力。同样，为了成为一名黑客，你要从解决问题、磨练技术，以及锻炼智力中得到基本的享受。如果你不是天性如此，而你又想成为一名黑客，你就要设法成为这样的人。否则你会发现，你的黑客热情会被其他分心的事物吞噬掉——如金钱、性、以及社交圈的认同。（你必须建立对于自己学习能力的信念——就算你掌握的知识不足以解决当前的问题，如果你从问题的一小部分下手并从中学习，你将学到足够的知识用来解决下一部分——以此类推，直到整个问题都被你解决为止。）2. 一个问题不应该被解决两次。¶有创新能力的大脑是一种宝贵的有限资源。当世界还充满非常多有待解决的有趣的新问题时，它们不应该被浪费在重新发明轮子的事情上。作为一名黑客，你必须相信其他黑客的思考时间是宝贵的——因此共享信息、解决问题、并发布结果给其他黑客几乎是一种道义，这样其他人就可以去解决新问题，而不用在旧问题上面浪费精力了。（这并不是在说你有义务把自己所有的作品都免费发布出来，但这样做的黑客能获得大家最大的尊敬。使用黑客技能养家糊口甚至发财致富都没关系，只要你别忘记自己作为一个黑客的责任，不背离黑客群体即可。）3. 无聊和乏味的工作是罪恶。¶黑客（以及所有创造力的人们）都不应该被愚蠢的重复性劳动所困扰。重复性劳动浪费了他们解决新问题的时间，而解决新问题正是黑客最大的价值所在。这种浪费会伤害到每一个人。无聊和乏味的工作不仅仅是令人不舒服而已，而且本身就是一种罪恶。作为一个黑客，你必须坚信这点并尽可能多地将乏味的工作自动化，这不仅是为了你自己，也是为了其他人（尤其是其他黑客们）。(对此有一个明显的例外。黑客有时为了休息大脑、学习技能、或者别的特别的原因，也会做一些在他人看来是重复性或枯燥的事情。但这是自愿的——只要是有思维能力的人，就不应该被迫做无聊的活儿。）4. 崇尚自由。¶黑客们是天生的反权威主义者。任何能向你发号施令的人都可以让你停止解决令你着迷的问题，同时，按照权威主义者的一般思路，他通常会给出一些极端愚昧的理由。因此，不论何处，任何权威主义的做法，只要它影响到了你和其他的黑客，你就要和它斗到底。（这并非向所有权威挑战。儿童需要监护，罪犯要被看管起来。如果服从命令得到某种东西比起用其他方式得到它更节约时间，黑客可以同意接受某种形式的权威。但这是一个有限度的，斟酌过的的交易；那种权威主义者想要的个人服从是不在考虑范围内的。）权威主义者喜欢审查和保密。他们不信任自愿的合作和信息的共享——他们只喜欢由他们控制的所谓“合作”。因此，作为一个黑客，你应该对审查、保密，以及使用武力或欺骗去压迫有行为能力的人们的做法有一种本能的敌意。同时你要有为此信念付出的意愿。5. 态度不能替代能力。¶作为一名黑客，你必须培养起这些态度。但只具备这些态度并不能使你成为一名黑客，也不能使你成为一个运动健将和摇滚明星。成为一名黑客需要智力、实践、奉献精神、以及辛苦的工作。因此，你必须学着忽略态度问题，并尊重各种各样的能力。黑客们不会为那些装模做样的人浪费时间，但他们却非常尊重能力——尤其是从事黑客工作的能力（虽然有能力总归是好事）。如果能具备少有人能掌握的技能就更好了，当然如果你具备一些急需的技能，而这些技能又需要敏锐的思维、高超的技巧、和专注的精神，那就是再好不过了。如果你尊重能力，你就会享受到提高自己能力的乐趣——辛苦的工作和奉献将不会是一件苦差事，而是一种紧张的娱乐，这是成为黑客至关重要重要的一点。黑客的基本技能¶1. 学习如何编程。2. 学习使用开源 Unix 系统。_3. 学会使用万维网以及编写 HTML。4. 学习英语，如果你的水平不够用的话。黑客态度重要，但技术更加重要。态度无法替代技术，在你被别的黑客称为黑客之前，你必须掌握一些基本的技术作为你随身携带的工具。随着新技术的出现和老技术的过时，这个工具包的内容也在不断改变。比如以前机器语言编程也被列在里边，而 HTML 是直到最近才包括进去的。不过现在可以清楚地告诉你包含以下内容：1. 学习如何编程。¶这一条无须多说，当然是最基本的黑客技能。如果你还不会任何编程语言，我建议你从Python 开始学起。它设计清晰，文档齐全，而且对初学者比较友好。虽然它很适合作为一种入门语言，但它不仅仅只是个玩具；它非常强大、灵活，也适合做大型项目。我在一篇更详细的 Evaluation of Python（译注：Python 试用体验）中有更详细的论述。Python 网站有很好的入门教程。我曾经推荐过将 Java 作为初学的语言，但这则批评改变了我的想法（在里边搜索&#8221;The Pitfalls of Java as a First Programming Language&#8221; 就知道我的意思了）。作为一名黑客，你不能像人们挖苦的一样，“像水管工人一样装电脑”，你必须知道各个部件的工作原理。现在我觉得可能还是学过 C 和 Lisp 后再学 Java 比较好。有一个大体的规律，就是如果你过于偏重使用一种语言，这种语言一方面会成为你得心应手的工具，另一方面也会阻碍你的学习。有这个问题的不只是编程语言，类似RubyOnRails、CakePHP、以及 Django 的 web 应用框架也有这个问题，它们只会让你肤浅地懂得一些东西，当你碰到难以解决的问题或者需要调试时，你就可能不知所措了。如果你想进入正式的编程领域，你将不得不学习 C 语言，它是 Unix 的核心语言。C++ 与C 非常其他类似；如果你了解其中一种，学习另一种应该不难。但这两种都不适合编程入门者学习。而且事实上，你越避免用C编程，你的工作效率会越高。C 语言效率极高，而且占用很少的系统资源。不幸的是，C 的高效是通过你手动做很多底层的管理（如内存管理）来达到的。底层代码都很复杂，而且极易出现 bug，你要花很多的时间调试。而现今的计算机速度如此之快，花时间调试程序通常是得不偿失——比较明智的做法是使用一种运行较慢、效率较低，但能大幅节省你的开发时间的语言。因此，还是选择 Python 吧。其他对黑客而言比较重要的语言包括 Perl 和 LISP。从实用的角度来说，Perl是值得一学的；它被广泛用于动态网页和系统管理中，因此，即便你从不用Perl 写程序，至少也应该学会读懂 Perl。许多人使用 Perl 的理由和 我建议你使用 Python 的理由一样，都是为了避免用 C 完成那些不需要 C 高效率的工作。你会需要理解那些工作的代码的。LISP 值得学习的理由不同——最终掌握了它时你会得到丰富的启迪和经验。虽然你实际上很少会用到 LISP，但这些经验会使你在以后的日子里成为一个更好的程序员。当然，实际上你最好五种都会（Python，Java，C/C++，Perl 和 LISP）。除了是最重要的黑客语言外，它们还代表了截然不同的编程思路和方法，每种都会让你受益非浅。（你可以通过修改 Emacs 编辑器的模式）单单学习编程语言并不会让你达到黑客的程度，甚至连程序员的程度都难企及——你需要脱离某种编程语言的素服，学习通过编程解决问题的思路。要成为一个真正的黑客，你需要达到几天就能学会一门编程语言的水平，你可以将文档里的信息和你已经掌握的知识结合起来，很快就学会一门编程语言。这意味着你需要先学会机种思路截然不同的语言才行。编程是一个复杂的技能，我无法给你完整的指南来教会你如何编程，不过我可以告诉你，书本和课程也无法教会你如何编程——很多黑客，或者也许几乎所有的黑客，都是靠自学的。你从书本上学到语言的特点——只是一些皮毛，但要使书面知识成为自身技能，你只能通过实践和虚心向他人学习。因此你要做的就是 (a) 读代码，(b) 写代码。Peter Novig 是 Google 公司的顶尖黑客之一，而且是最受欢迎的 AI 课本的一名作者。他写了一篇好文章名叫 Teach Yourself Programming in Ten Years（译注：十年教会自己编程），其中的“recipe for programming success”（译注：编程的成功之道）尤其值得一读。学习编程就象学习自然语言写作一样。最好的做法是读一些大师的名著，试着自己写点东西，再读些，再写点，再读些，再写点……如此往复，直到你的文章具备范文的力量和感觉为止。以前要找适合阅读的好代码并不容易，因为几乎没有大型程序的源代码能让新手练手。这种状况已经戏剧性地发生变化；开源软件、编程工具、和操作系统（全都由黑客写成）现在已经随处可见。让我们在下一个话题中继续讨论……2. 学习使用开源的 Unix 系统。¶我将假设你已经有一台个人计算机供自己使用了（你可以体会一下这意味着多少东西。早些时候，计算机是如此的昂贵，没有人能买得起。而黑客文化就是在那样的环境下演化来的）。新手们能够朝学习黑客技能迈出的最基本的一步，就是找一版 Linux 或 BSD-Unix，安装在个人电脑上，并且把它跑起来。没错，这世界上除了Unix还有其他操作系统。但它们都是以二进制形式发布的——你无法读到它的源代码，也不可能修改它。尝试在运行 DOS、Windows、或 MacOS 的机器上学习黑客技术，就象是穿着骑士铠甲学跳舞。除此之外，Unix 还是 Internet 的操作系统。你可以学会上网却不知道 Unix，但你不了解 Unix 就无法成为一名 Internet 黑客。因此，今天的黑客文化在很大程度上是以 Unix为核心的。（这点并不总是真的，一些很早的黑客对此一直很不满，但 Unix 和 Internet之间的联系已是如此之强，就连 Microsoft 这样强力的公司也对此也无可奈何。）所以, 安装一套 Unix 吧——我个人偏爱 Linux，但还有其他种类共你选择（是的，你可以在同一电脑上同时安装 Linux 和 DOS/Windows)。学习它，运行它，鼓捣它。用它上Internet。阅读它的源代码。修改它的源代码。你会用到很多优秀的编程工具（包括 C，LISP，Python 及 Perl），这些工具在 Windows 下是做梦都没法得到的。你会觉得乐趣无穷。当你有一天成为大师再回顾初学的日子，你会觉得那时学到的东西可真多。如果你想了解更多关于学习 Unix 的信息，读一下 The Loginataka（译注：ESR 的另一著作，可以称为黑客大藏经）吧。也许你还想看看 The Art of Unix Programming（译注：Unix 编程艺术，经典著作）。你可以访问 Linux Online! 网站，这个网站可以帮你起步。你可以从那里下载到Linux，或者更好的办法是找一个本地的 Linux 用户组，让他们帮你安装 Linux。在这份 HOWTO 文档发布后的前十年里，关于 Linux 我写的是，从新人的观点来看，所有的Linux 发行版都差不多，但在 2006-2007 之间，我们终于有了一个最佳选择：Ubuntu。我们可以说各种Linux 发行版各有千秋，但 Ubuntu 是新人最容易上手的一个发行版。你可以在 www.bsd.org 找到 BSD Unix 的求助及其他资源。Linux 有一种被称为 Live CD 的发行方式，这种发行版会从CD 运行起来，而且不会动到你硬盘里的东西，Live CD 是尝试 Linux 的一个不错的方法。由于光驱读写本来就比较慢，Live CD 的速度一般也会比较慢，不过 Live CD 总归是一个能尝试各种可能性而又不过激的方法。我有写一篇关于 Unix 和 Internet 基础的入门文章。对于新手，我以前不鼓励你自己独立安装Linux 或者 BSD，现在这些系统的安装工具已经足够好了，就算对新手来说，独立安装操作系统也不是不可能的事。无论如何，我还是推荐你联系本地的 Linux 用户组，向他们寻求帮助，这会进程更加顺利。3. 学会使用万维网以及编写 HTML。¶黑客文化建造的大多东西都在你看不见的地方发挥着作用。浙西东西可以帮助工厂、办公室、以及大学正常运转起来，但从表面上很难看到它们对非黑客的普通人的生活的影响。而 Web 是一个大大的例外。就连政客也同意，这个庞大耀眼的黑客玩具正在改变整个世界。就算只是因为这个（还有许多其它的原因），Web 也值得你一学。这并不是仅仅意味着如何使用浏览器（谁都会），而是要学会如何写 HTML，也就是 Web的标记语言。如果你不会编程，写HTML会教你一些有助于学习的思考习惯。因此，先完成一个主页。（网上有很多不错的资源，比如 这个 HTML 入门教程。)但仅仅拥有一个主页不能使你成为一名黑客。 Web里充满了各种网页。大多数是毫无意义的、毫无信息量的垃圾——界面时髦的垃圾，不过还是垃圾（更多相关信息访问The HTML Hell Page）。要想有价值，你的网页必须有内容——它必须有趣或对其它黑客有帮助。这是下一个话题所涉及的……4. 学习英语，如果你的水平不够用的话。¶作为一个以英语为母语的美国人，我以前很不情愿提到这点，免得被当做一种文化上的帝国主义。但相当多以其他语言为母语的人一直劝我指出这一点，那就是：英语是黑客文化和 Internet 的工作语言，只有懂英语，你才能在黑客社区顺利做事。大概1991年的时候，我就了解到许多黑客在技术讨论中使用英语，甚至有时他们来自同一种母语也在用英文讨论。在现阶段，英语有着比其他语言丰富得多的技术词汇，因此是一个对于工作来说相当好的工具。基于类似的原因，英文技术书籍的翻译通常都不怎么令人满意。（如果有翻译的话）。Linus Torvalds 是芬兰人，但他的代码注解是用英语写的（很明显他从没想过其他的可能性）。他流利的英语。是他能够管理全球范围的 Linux 开发人员社区的重要因素。 这是一个值得学习的例子。就算你的母语是英语，这也无法保证你的语言技能足够达到黑客的标准。如果你的写作文字不通、语法混乱、错字连篇，包括我在内的大部分的黑客都会忽略你的存在。虽然写作马虎不一定意味着思考也马虎，但我们发现两者的关联性还是挺强的——马虎的头脑对我们来说毫无价值，如果你写作能力不够，就好好学习写作吧。提高自己在黑客圈中的地位¶1. 撰写开源软件2. 帮助测试并调试开源软件3. 发布有用的信息4. 帮助维护基础设施的运转5. 为黑客文化本身服务和大部分不涉及金钱的文化一样，黑客王国靠声誉运转。你设法解决有趣的问题，但它们到底多有趣，你的解法有多好，是要由那些和你具有同样技术水平，或比你更厉害的人去评判的。相应地你需要认识到，当你在玩黑客游戏时，你的分数主要是靠其他黑客对你的技术的评价得到的（这就是为什么只有在其它黑客称你为黑客时，你才算得上是一名黑客）。常人的印象里，黑客是一项独来独往的工作，所以上述评价方式并不为众人所知。另一个黑客文化误区是拒绝承认自我或外部评价是一个人的动力，这种想法在 1990 年代末以后就逐渐衰退了，但现在还有人这么认为。这也是让上述评价方式鲜为人知的原因之一。明确地讲，黑客行为就是人类学家所称的“奉献文化”。在这里你不是凭借你对别人的统治来建立地位和名望，也不是靠美貌，或拥有其他人想要的东西，而是靠你的贡献。尤其是贡献你的时间、你的创造、以及你的技术成果。要获得其他黑客的尊敬，你可以从下面五种事情着手：1. 撰写开源软件¶第一个方法（也是最重要，最传统的方法）是写些被其他黑客认为有趣或有用的程序，并把程序源代码提供给整个黑客文化圈使用。（过去我们称之为“free software （自由软件）”， 但这却使很多不知 free 的精确含义的人感到困惑。现在我们很多人，根据搜索引擎网页内容分析，至少三分之二的人在使用&#8221;open-source software，即“开源软件”这个词）。黑客领域里最受尊敬的偶像，是那些写了大型的、好用的、用途广泛的软件，并把它们发布出来，使得每人都在使用他软件的人。但是从历史方面来讲有一点值得一提。虽然黑客们一直认为开源软件的开发者是真正的黑客，但在 1990 年代中期以前，大部分黑客会把自己的主要时间用来撰写闭源软件，直到我 1996 年开始写这篇 HOWTO 时也是如此。但从 1997 年后开源软件进入了主流，而且改变了这一切。以现在的观点来看，“黑客社群”和“开源开发者”是对这一个社群的两种称呼，但值得记住的是，以前这两者的概念并不完全一样。要了解更多信息，你可以看看关于黑客、开源、以及自由软件的历史这一节的内容。2. 帮助测试并调试开源软件¶黑客也尊敬那些使用和测试开源软件的人。这个世界并不完美，我们不可避免地要把大多数的开发时间放在调试阶段。这就是为什么任何有头脑的开源代码的作者都会告诉你好的beta 测试员象红宝石一样珍贵。好的测试者知道如何清楚描述出错症状，很好地定位错误，能忍受快速发布中的 bug，并且乐意配合做一些例行的诊断性工作。一个优秀的测试者可以让一场旷日持久辛苦不堪的调试大战变成一场有益身心的小打小闹。如果你是个新手，试着找一个你感兴趣的正在开发中的程序，做一个好的 beta 测试员。你会自然地从帮着测试，进步到帮着抓 bug，到最后帮着改程序。你会从中学到很多，而且善因种善果，以后别人也会很乐意帮助你。3. 发布有用的信息¶另一件好事是收集整理有用有趣的信息，做成网页或类似 FAQ 的文档，并且让大家都能看到。技术性 FAQ 的维护者会受到和开源代码的作者一样多的尊敬。4. 帮助维护基础设施的运转¶黑客文化（还有互联网工程方面的发展）是靠志愿者推动的。要使Internet能正常工作，就要有大量枯燥的工作不得不去完成——管理邮件列表和新闻组，维护大型软件库，开发RFC 和其它技术标准等等。做这类事情的人会得到很多尊敬，因为每人都知道这些事情费时颇多，而又不象编程那样有趣。做这些事情需要奉献精神。5. 为黑客文化本身服务¶最后，你可以为这个文化本身做宣传（例如像我这样，写一个“如何成为黑客”的教程:-) ）这并不要求在你已经在这个圈子呆了很久，因以上四点中的某点而出名，有一定声誉后才能去做。黑客文化没有领袖，这点是确认无疑的。但黑客圈里确实有些文化英雄、部落长者、史学家、还有发言人。如果你在这圈里呆足够长时间，你也许也能成为其中之一。 记住：黑客们不相信他们的部落长者的自夸，因此过分追求这种名誉是危险的。与其奋力追求，不如先摆正自己的位置，等它自己落到你的手中——那时则要做到谦虚和优雅。黑客和书呆子(Nerd)的联系¶和大家普遍认为的相反，并不是只有书呆子才能成为一名黑客。但它确实有帮助，而且许多黑客事实上是书呆子。做一个深居简出的人有助于你集中精力进行十分重要的事情，如思考和编程。因此，很多黑客都接受了“geek（奇客）”这个标签，并把它作为骄傲的奖章——这是宣布他们独立于主流社会期望的一种方式（这个标签也是他们喜欢科幻小说和策略型游戏的标记，而这些也是很多黑客喜欢的东西）。1990 年代更多用的称呼是“nerd（书呆子）”，那时“nerd”只带点轻微的贬义，而“geek”则是地地道道的蔑称，而在 2000年以后，这两者逐渐调转过来了，至少再美国的大众文化中是这样。而到了现在，甚至在非技术人群里，也有不少以 geek 精神为傲的文化团体。如果你能集中足够的精力做好黑客工作同时还能有正常的生活，这是件好事。现在要做到这一点比我在 1970 年代还是新手的时候要容易的多；如今主流文化对技术怪人要友善得多。甚至有越来越多的人意识到黑客通常是很好的恋人和配偶的材料。如果你因为生活上不如意而迷上做黑客，那也没什么——至少你不会分神了。也许你以后还能找到自己的生活。向黑客的格调靠拢¶重申一下，要做一名黑客，你必须深入体验黑客精神。计算你不在计算机边上，你仍然有很多对黑客工作有帮助的事情可做。它们并不能替代真正的编程（没有什么能替代编程），但很多黑客都那么做，并感到它们与黑客的本质存在某些基本的连系。学会用母语流畅地写作。尽管很多人认为程序员写不出好文章，但是有相当数量的黑客（包括所有我知道的最棒的黑客）都是很有能力的写手。阅读科幻小说。参加科幻小说讨论会。（这是一个认识黑客和准黑客的好方法）学习一种武术。武术中需要的精神自律能力和黑客在这方面的需求非常相似。黑中最受欢迎的武术是来自亚洲的空手格斗类武术，例如跆拳道、空手道、武术、合气道、柔术等。西式击剑和亚洲剑术也有不少的跟随者。1990 年后期以来，在可以合法使用枪支的地方，射击受欢迎的程度也越来越高了。大部分黑客喜欢的武术类型都是那些强调精神的自律，放松的意识，以及意念的控制，而不仅仅是单纯的力量、运动精神、以及身体的强健。实实在在学习一种冥想修炼。多年以来黑客中最受欢迎的形式是参禅。（很重要的一点是，参禅和宗教可以说是独立的，你不需要接受一种新宗教，或者放弃现有的宗教信仰，就能做参禅的修炼。其他的形式也许也管用，但注意一定要挑那些靠谱的，不需要你相信不着边际的事物的冥想方式来演练。提高自己对双关语和文字游戏的鉴赏能力。如果这些事情有很多你已经在做了，那你可能是天生做黑客的材料。至于为什么偏偏是这些事情，原因并不完全清楚，但它们都涉及用到左－右脑能力的综合，这似乎是关键所在（黑客们既需要清晰的逻辑思维，有时又需要偏离逻辑跳出问题的表象）。最后，还有一些不要去做的事情。不要使用愚蠢的，哗众取宠的ID或昵称。不要卷入 Usenet（或任何其他地方）的骂战。不要自称为“cyberpunk（网络朋克）”，也不要浪费时间和那些人打交道。不要让你的 email 或者帖子中充满错误的拼写和语法。以上的事情只会为你招来嘲笑。黑客们个个记忆超群——你将需要数年的时间让他们忘记你犯下的错误。网名的问题值得深思。将身份隐藏在虚假的名字后是骇客、软件破解者、及其他低等生物幼稚愚蠢的行为。黑客不会做这些事；他们对他们所作的感到骄傲，而且乐于人们将作品与他们的真名相联系。因此, 如果你现在还在使用假名，那就放弃它吧。在黑客文化里假名是失败者的标记。关于黑客、开源、以及自由软件的历史¶1996 年我开始写这篇 HOWTO，那时候的大环境和现在很不一样。这里会给你简单介绍一下相关的历史变迁，这样大致可以澄清一下开源软件、自由软件、以及 Linux和黑客圈的关系。如果你对这些不感兴趣，你可以直接跳过这一节，继续读下面的FAQ。我在这里所描述黑客精神和社会远远早于1990 Linux 出现的时候，我第一次涉足黑客圈是 1976 年，而究其根源则可追溯到20世纪60年代初。但在 Linux 出现之前，大多数黑客使用的操作系统要么是私有的商业版本，要么是自己开发的未得到广泛使用的系统（例如麻省理工学院的 ITS 系统）。虽然那时也有人想要改变这种状况，但他们的努力影响范围相当有限，充其量仅在某个黑客社区有少数忠实用户而已。现在所谓“开源”历史和黑客社区的历史几乎一样长，但直到 1985 年前，它只是一种没有固定称谓的习惯做法，而不是一套有理论做后盾，有宣言做前锋的自觉运动。这种状态在1985年结束了，长老级黑客 Richard Stallman（也被称为“RMS”）将其命名为“自由软件(Free Software)”。这种命名也是一种宣言的方式，不过大多数黑客社区都不接收这种包含明显思想烙印的标签。因此而大多数现有的黑客社区从来没有接受。结果，“自由软件”这一标签被黑客社群中声音较大的少数人（尤其是 BSD Unix 的相关人士）拒绝掉了，而剩下的大部分人（包括我）虽然也有保留意见，可也还是沿用了这一称谓。尽管很多人存在保留意见，RMS 的“自由软件”的大旗也一直举到了 1990 年代中期。直到Liunx 崛起时它才受到了重大挑战。Linux 给了的开源开发者一个新的自然归宿，很多项目都已我们现称的开源的方式由 Unix 移植到了 Linux 系统中。Linux 的社区也得到了爆炸性增长，成为了一个比以前黑客文化更为庞大，并且异质化的新的群体。RMS曾今尝试将这一社群也归并到他的“自由软件运动”大旗下，但终究没有成功，原因可以归于 Linux 社区的样性，以及 Linus Torvalds 本人的质疑。Torvalds 公开拒绝了 RMS 的自由软件思想，但还是沿用了“自由软件”这一术语，这也引来了很多年轻黑客的效仿。1996年，当我第一次发表这篇 HOWTO 的时候，黑客社团正在围绕着 Linux 和其它几个开源操作系统（尤其是 BSD Unix 的衍生系统）进行着快速的重组。几十年来围绕着闭源系统进行闭源开发的方式还没有开始淡出集体记忆，但在大家看来，这似乎已经是死去的历史了。越来越多的黑客都已经开始注重自己在开源项目（例如 Linux、Apache 等）上的贡献，并将这些贡献当做自己的成就。然而在那个时候“开源”这一名词还没有出现。这个名词是 1998 年初才开始出现的，而在出现的半年内，大部分的黑客社区就接受了这一名词，只有少数不接受这一概念的人还在坚持使用“自由软件”这一名词。1998 年以后，或者更准确地说是 2003 年以后，所谓的“hacking” 和 “开源（自由）软件开发”的含义已经非常接近了。从今天的眼光来看，这种区分已经没有意义了，看趋势，这个现状将来也不大可能有多大的改变。不管怎样，这段变更的历史还是值得记住的。其它资源¶Paul Graham 写了一篇 Great Hackers，还有 Undergraduation 一篇，里边有充满智慧的言论。还有一篇叫 How To Be A Programmer 的文章，是这篇文章很好的补充。里边的建议不但包括如何提高编程和其它技术，还包含团队合作的窍门。我还写过一篇 A Brief History Of Hackerdom （译注：黑客文化简史）。我写了一本 The Cathedral and the Bazaar（译注：大教堂与市集），对于 Linux及开放源代码文化现象有详细的解释。这种现象在我的另一篇 Homesteading the Noosphere（译注：开拓智域）中还有更直接的阐述。Rick Moen 写了一份很好的关于 how to run a Linux user group（译注：如何运营Linux用户组）的文档。我和Rick Moen合作完成了另一份关于 How To Ask Smart Questions（译注：提问的智慧）的文章，可以让在寻求帮助时得到事半功倍的效果。如果你想知道 PC、UNIX 及 Internet 基本概念和工作原理，参考 The Unix andInternet Fundamentals HOWTO。当你发布软件或者补丁的时候，请遵照 Software Release Practice HOWTO 去做。如果你对禅诗感兴趣，也许你还喜欢看这篇 Rootless Root: The Unix Koans of Master FooFAQ（常见问题解答）¶内容¶怎样才能知道自己已经是一名够格的黑客？你能教我做黑客吗？那么，我要如何开始？我得什么时候开始学？现在会不会太迟了？要学多久才能学会黑客技能？Visual Basic 是好的入门语言吗？你能帮我“黑”掉一个站点吗？或者教我怎么黑它？我怎么样才能得到别人帐号的密码？我如何入侵/查看/监视别人的 Email？我如何才能在IRC聊天室里偷到频道 op 的特权？我被黑了。你能帮我避免以后再被攻击吗？我的 Windows 软件出现问题了。你能帮我吗？我在哪里能找到可以与之交流的真正的黑客？你能推荐一些有关黑客的好书吗？成为一名黑客我需要擅长数学吗？我该从那种语言学起？我需要什么样的机器配置？我想贡献社区。你可以帮我选一个问题让我下手吗？我得因此憎恨和反对 Microsoft 吗？开放源代码软件不会使程序员丢饭碗吗？我要如何开始？哪里有免费的Unix？怎样才能知道自己已经是一名够格的黑客？¶你可以问自己下面三个问题：你能流利地读写代码吗？你认同黑客社群的目的和价值吗？黑客社群里有没有资深成员称呼你为黑客呢？如果你对这三个问题的答案都是“是”的话，你已经是一名黑客了。如果你只满足其中两项，那就说明你还不够格。第一个问题是关于技能的。如果你已经符合本文前面提到的最低需求的话，你也算过关，不过如果你发布过为数不少的开源代码并被社群接受，那你就算满分过关了。第二个问题是关于态度的。如果黑客精神的五项基本原则对你来说能有共鸣，而且已经是你处事的方式，你就算过关一半了。这算靠里的一半，靠外的一半和你在黑客社区长期项目上的投入和关联程度有关。这里列出了一些项目的不完全列表供你参考：Linux 的改进和用户群扩大对你来说是否重要？你对于自由软件精神是否充满激情？你对于垄断是否有敌意？你是否相信计算机这种工具会让增加世界财富，让这个世界更富有人道主义？不过值得注意的一点是，黑客社群有一些特有的政治倾向，其中两条，一条是保卫言论自由权，一种是抵御所谓“知识产权”对于开源社区的侵害。实践这两条的是一些民间组织，例如电子前沿基金会（Electronic Frontier Foundation）就是其中之一。不过虽然如此，黑客们对于有任何明确政治目的的团体都是心怀戒备的，因为我们已经从各种经验教训中学到一点：这些活动只会分裂黑客社团，并让黑客们分心。如果有人以黑客精神为名组织一场首都大游行，那他就完全没有弄明白这点。真正的应对方式也许应该是“闭上嘴巴，给他们看代码”。第三个问题有点循环递归的味道。在“什么是黑客”一节我已经讲过，作为一名黑客的意义在于参与某个黑客社群，也就是社交网络的一个亚文化团体，作为内部的贡献成员以及外部的宣传者积极活动。和很久以前相比，黑客群体现在的团结意识和自我意识已经增强了很多。过去三十年来，随着互联网的发展，社交网络逐渐开始发挥举足轻重的作用，而黑客的亚文化团体也更加容易发展和维护了。这种变革的明显一个有代表性的现象是：有的黑客社群现在都有自己专门的文化衫了。研究社交网络的社会学家把黑客文化归为“看不见的大学”，而且注意到这些网络社交圈还有所谓的“看门人”——其中的一些核心成员，他们有一定的权威，可以准新成员的进入。所谓的“看不见的大学”本来就是一个松散的非正式组织，所以这些“看门人”也只是这门称呼而已。但不是每个黑客都是“看门人”，这是每个黑客都深刻明白的一点。“看门人”需要有一定的资历和成就，究竟要到什么程度很难讲，但一旦有这样的人出现，每一个黑客都能辨识出来。你能教我做黑客吗？¶自从第一次发布这份文档，我每周都会收到一些请求，（频繁的话一天几封）要我“教会他们做黑客”。遗憾的是，我 没有时间和精力来做这个；我自己的黑客项目，及我作为一个开放源代码倡导者 的四处奔波已经占用了我110%的时间。即便我想教你，黑客也依然基本上是一项自行修炼的的态度和技术。 当真正的黑客想帮助你的时候，如果你乞求他们一汤匙一汤匙“喂”你的话，你会发现他们不会尊重你。先去学一些东西。显示你在尝试，你能靠自己去学习。然后再去向你遇到的黑客请教特殊的问题。如果你发E-mail给一位黑客寻求他的帮助，这是两件首要记住的事情。 第一，写出来的文字显得懒且粗心的人通常非常懒于思考且非常马大哈，不能成为好黑客——因此注意拼写正确，使用正确的语法及发音，否则你可能会无人理睬。 第二，不要试图要求回复到一个ISP帐号，而那个帐号与你 的发信地址不同。这样做的人一般是使用盗用帐号，我们对于回报或者帮助窃贼不感兴趣。那么，我要如何开始？¶对你而言最佳的入门方式也许是去参加 LUG（Linux用户组）的聚会。 你可以找到在 LDP 的综合 Linux 信息页面上找到类似的组织；也许有一个在你家附近的，而且非常有可能与一所大学或学校挂钩。如果你提出要求，LUG 成员兴许会给你一套Linux，当然此后会帮你安装并带你入门。我得什么时候开始学？现在会不会太迟了？¶你有动力学习的时候就是好时候。大多数人看来都是在15－20岁之间开始感兴趣的，但据我所知，在此年龄段之外的例外也是有的。要学多久才能学会黑客技能？¶这取决于你的聪明程度和努力程度。对于大多数人，只要足够专注，就能在 18 个月到2 年之间学会一套令人尊敬的技能。但是，不要以为这样就够了；如果你是一个真正的黑客，你要用你的余生来学习和完善你的技术。Visual Basic 是好的入门语言吗？¶既然你问了这个问题，那你肯定是想在 Microsoft Windows 操作系统下学习黑客技能。这本身就不是一个好主意。我前面讲过在 Windows 下 hack 就跟穿着骑士铠甲跳舞一样，我不是在开玩笑。别走这条路，Windows 是一个很低劣的 hack环境，而且一直如此。Visual Basic 有一个特征性问题，就是它不可以被移植到其他平台。虽然也有些Visual Basic 开源实现的雏形，但实现的只是 ECMA 标准的一个很小的子集。在Windows 下大部分类库的知识产权都是 Microsoft 独家所有，如果你不是及其小心的话，你的代码将只能在 Microsoft 支持的平台上使用。如果你不打算从 Unix起步，那你也有更好的语言可选，而且类库质量还更高，例如 Python 就是其中之一和其他的 Basic 类语言一样，Visual Basic 这门编程语言的设计也很糟糕，它会教你一些坏的变成习惯。你就别问我细节了，这可是罄竹难书。还是去学一门设计优良的语言吧。其中一个坏习惯是让你依赖于单一厂商的函数库、控件及开发工具。一般而言，任何不能够支持至少 Linux 或者某一种 BSD，或其不能支持至少三种以上操作系统的语言，都是一种不适合应付黑客工作的语言。你能帮我“黑”掉一个站点吗？或者教我怎么黑它？¶No。任何读完这份 FAQ 后还问这个问题的人，都是无可救药的蠢材，即使有时间指教我也不会理睬。任何发给我的此类电子邮件都会被忽略或被痛骂一顿。我怎么样才能得到别人帐号的密码？¶这是骇客行为。滚得远远的，白痴。我如何入侵/查看/监视别人的 Email？¶这是骇客行为。在我面前消失，智障。我如何才能在IRC聊天室里偷到频道 op 的特权？¶这是骇客行为。滚开，笨蛋。我被黑了。你能帮我避免以后再被攻击吗？¶不行。目前为止，每次问我这个问题的，都是一些运行 Microsoft Windows 的菜鸟。不可能有效的保护 Windows 系统免受骇客攻击；太多代码和架构的缺陷使保护Windows 的努力有如隔靴搔痒。唯一可靠的预防来自转移到 Linux 或其他设计得至少足够安全的系统。我的 Windows 软件出现问题了。你能帮我吗？¶当然。打开 DOS 命令行输入“format c:”。你遇到的任何问题将会在几分钟之内消失。我在哪里能找到可以与之交流的真正的黑客？¶最佳办法是在你附近找一个Unix或Linux的用户组，参加他们的聚会。（你可以在ibiblio 的 LDP 站点找到一些用户组的链接。）（我过去曾说过不能在IRC上找到真正的黑客，但我发觉现在情况有所改变。显然一些真正的黑客的社区像 GIMP 及 Perl，也有IRC频道了。）你能推荐一些有关黑客的好书吗？¶我维护着一份 Linux Reading List HOWTO，也许你会觉得有用。The Loginataka 也大致值得一读。关于Python的介绍，请访问在Python站点上的入门教程。成为一名黑客我需要擅长数学吗？¶不用。黑客道很少使用常规的数学或算术，不过你绝对需要能逻辑性地思考和进行精密的推理。尤其是你不会用到微积分或电路分析（我们把这些留给电子工程师们:-)）。有限数学中的一些可提（包括布尔代数，集合论，组合数学，图论）的背景知识会对你有所帮助。更重要的一点：你要有逻辑思维能力，能够以数学家的方式追溯因果。虽然大部分的数学知识对你可能没什么用处，但数学思维的能力对你来说是极其重要的。如果你缺乏这方面的智慧，要做一名黑客恐怕是无望了。如果你缺乏这方面的训练，还是尽早开始吧。我该从那种语言学起？¶如果你还没学过XHTML（HTML最新的表现形式）的话，就从它开始吧。市面上有一大堆的封面精美，宣传得天花乱坠的HTML 书籍，不幸的是质量优秀的几近于无。我最喜欢的是 HTML: The Definitive Guide。但HTML 不是一种完整的编程语言。当你准备开始编程时，我推荐从 Python起步。 你会听到一大群人推荐 Perl，但是 Perl 要难学得多，而且（以我之见）设计得不是很好。C 确实重要，但它也比 Python 或 Perl 难多了。不要尝试先学 C。Windows用户注意：不要满足于 Visual Basic。它会教给你坏习惯，而且它不可以跨平台移植，只能在Windows下运行。因此还是敬而远之为好。我需要什么样的机器配置？¶过去个人电脑能力相当不足并且内存很小，这给黑客的学习过程设置了人为的障碍。不过 1990 中期以后就不是这样了；任何一台 Intel 486DX50 以上配置的机器都有足够的能力进行开发工作、运行 X 系统、以及进行 Internet 通讯。而且你买到的市面上最小的硬盘都大得足够你使用了。选择用来学习的机器时重要的一点是注意配件是否是Linux兼容的（或BSD兼容，如果你选择 BSD 的话）。和刚才提到的一样，大多数现在的机器都是符合的；唯一值得注意的区域在于 modem 和打印机；有些具备为Windows设计的配件的机器不会在Linux下工作。你可以查看这份 Linux Hardware Compatibility FAQ。我想贡献社区。你可以帮我选一个问题让我下手吗？¶不行，因为我不知道你的兴趣和擅长领域在哪里。如果你没有内在动力，你就很难坚持下去，所以说，别人只给你的路是行不通的。试试这么做吧。在 Freshmeat 网站观察几天，看看里边的项目更新，如果你看到一个看上去很酷而且你也很感兴趣的项目，就加入吧。我得因此憎恨和反对 Microsoft 吗？¶不，你不必如此。不是因为Microsoft不令人讨厌，而是因为黑客文化早在Microsoft 出现之前就存在了，且将在 Microsoft 成为历史后依然存在。 你耗费在憎恨 Microsoft 的任何力气不如花在爱你的技术上。写好的代码——那会相当有效地打击 Microsoft 又不会让你得到恶报应。开放源代码软件不会使程序员丢饭碗吗？¶目前看起来不太可能，开放源代码软件产业似乎创造了更多的就业机会而不是减少就业机会。如果写一个程序比起不写来是纯经济收益的话，那么在写完后，程序员应该得到报酬不管程序是否是开放源代码。并且，无论写出多么“免费自由”的软件，都存在更多对新的，定制的软件的需求。我有这方面更多的论述，放在放源代码网站资料中。我要如何开始？哪里有免费的Unix？¶在本份文档的某个地方我已经提到过何处可以得到最常用的免费 Unix。要做一名黑客，你需要自己找到激励和动力，还要有自学的能力。现在就开始努力吧…… &lt;/div&gt; &lt;footer&gt; &lt;div class=&quot;rst-footer-buttons&quot; role=&quot;navigation&quot; aria-label=&quot;footer navigation&quot;&gt; &lt;a href=&quot;flask-babel.html&quot; class=&quot;btn btn-neutral float-right&quot; title=&quot;Flask-Babel 简介&quot;&gt;Next &lt;span class=&quot;fa fa-arrow-circle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;index.html&quot; class=&quot;btn btn-neutral&quot; title=&quot;Welcome to Wang Dingwei’s Translations!&quot;&gt;&lt;span class=&quot;fa fa-arrow-circle-left&quot;&gt;&lt;/span&gt; Previous&lt;/a&gt; &lt;/div&gt; &copy; Copyright 2011, Wang Dingwei. Built with Sphinx using a theme provided by Read the Docs. &lt;/section&gt; 个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。 如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的查看源代码命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。 精确的描述问题并言之有物 仔细、清楚地描述你的问题或 Bug 的症状。描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：Fedora Core 4、Slackware 9.1等）。描述在提问前你是怎样去研究和理解这个问题的。描述在提问前为确定问题而采取的诊断步骤。描述最近做过什么可能相关的硬件或软件变更。尽可能的提供一个可以重现这个问题的可控环境的方法。 尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。 以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。 Simon Tatham 写过一篇名为《如何有效的报告 Bug》的出色文章。强力推荐你也读一读。 话不在多而在精 你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。 这样做的用处至少有三点。第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；第二，简化问题使你更有可能得到有用的答案；第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。 别动辄声称找到 Bug 当你在使用软件中遇到问题，除非你非常、非常的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的Bug，你应该能提供相应位置的修正或替代文件。 请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前已经做了这些，是吧？）。这也意味着很有可能是你弄错了而不是软件本身有问题。 编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有Bug时，这尤其严重。 提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是你做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。 低声下气不能代替你的功课 有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 – 低声下气：我知道我只是个可悲的新手，一个撸瑟，但…。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。 别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。 有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。 描述问题症状而非你的猜测 告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。 蠢问题 我在编译内核时接连遇到 SIG11 错误，我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？ 聪明问题 我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。所有内存都换过了，没有效果。相关部分的标准编译记录如下…。 由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：所有的诊断专家都来自密苏里州。 美国国务院的官方座右铭则是：让我看看（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！ 按发生时间先后列出问题症状 问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。 如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，多不等于好。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。 如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。 描述目标而不是过程 如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。 经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。 蠢问题 我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？ 聪明问题 // This is included here because other places don't have access to the pagename variable. var READTHEDOCS_DATA = { project: \"translations\", version: \"latest\", language: \"en\", page: \"hacker_howto\", builder: \"sphinx\", theme: \"sphinx_rtd_theme\", docroot: \"/\", source_suffix: \".rst\", api_host: \"https://readthedocs.org\", commit: \"19908408075c+\" } // Old variables var doc_version = \"latest\"; var doc_slug = \"translations\"; var page_name = \"hacker_howto\"; var html_theme = \"sphinx_rtd_theme\"; var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-17997319-1']); _gaq.push(['_trackPageview']); // User Analytics Code _gaq.push(['user._setAccount', 'None']); _gaq.push(['user._trackPageview']); // End User Analytics Code (function() { var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Chinese Translations &lt;div class=&quot;wy-menu wy-menu-vertical&quot; data-spy=&quot;affix&quot; role=&quot;navigation&quot; aria-label=&quot;main navigation&quot;&gt; &lt;ul class=&quot;current&quot;&gt; 如何成为一名黑客为什么会有这份文档？什么是黑客？黑客的态度黑客的基本技能提高自己在黑客圈中的地位黑客和书呆子(Nerd)的联系向黑客的格调靠拢关于黑客、开源、以及自由软件的历史其它资源FAQ（常见问题解答）Flask-Babel 简介安装 Flask-BabelHello, World更新程序和模板设置 Babel生成翻译模板翻译编译翻译结果更新翻译 &nbsp; Chinese Translations Docs &raquo; &lt;li&gt;如何成为一名黑客&lt;/li&gt; &lt;li class=&quot;wy-breadcrumbs-aside&quot;&gt; &lt;a href=&quot;https://bitbucket.org/gastlygem/translations/src/default/hacker_howto.rst&quot; class=&quot;fa fa-bitbucket&quot;&gt; Edit on Bitbucket&lt;/a&gt; &lt;/li&gt; 如何成为一名黑客¶Eric Steven RaymondThyrsus EnterprisesCopyright © 2001 Eric S. Raymond &lt;esr&#64;thyrsus&#46;com&gt;Wang Dingwei &lt;wangdingwei82&#64;gmail&#46;com&gt; 基于 Barret 的翻译更正而成。转载请注明出处。版本更新历史版本 1.432011-02-07esr2011 年以后 Python 比 Perl 更流行了版本 1.422010-10-22esr添加了“历史回顾”版本 1.402008-11-03esr链接修正版本 1.392008-08-14esr链接修正版本 1.382008-01-08esr取消将 Java 推荐为首学语言版本 1.372008-01-08esr推荐 Ubuntu 作为新手首选 Unix 发行版目录如何成为一名黑客为什么会有这份文档？什么是黑客？黑客的态度黑客的基本技能提高自己在黑客圈中的地位黑客和书呆子(Nerd)的联系向黑客的格调靠拢关于黑客、开源、以及自由软件的历史其它资源FAQ（常见问题解答） 为什么会有这份文档？¶ 作为 Jargon File（译注：黑客行话大全）的编辑和几份其他类似性质知名文章的作者，我经常收到充满热情的网络新手的电子邮件询问：“我如何才能成为一名出色的Hacker？”早在 1996 年，我注意到网上似乎没有任何的 FAQ 或者 Web 形式的文档提到及这个至关重要的问题，因此我写了这份文档。现在，很多 Hacker 都认为这是一篇权威性文档，那我也姑且这么认为吧。不过，我不认为我是这个话题的绝对权威；如果你不喜欢这篇文档，你也可以自己写一份。如果你读到的是这份文档的离线拷贝，你可以在http://catb.org/~esr/faqs/hacker-howto.html 读到最新版本。注意：文档的结尾有一份 FAQ（常见问题解答）。如果你想通过邮件询问我关于这份文档的问题，请先读这份 FAQ 看看能否找到答案——一遍不行就读两遍。目前这份文档有很多翻译版本：阿拉伯语、白俄罗斯语、丹麦语、荷兰语 、爱沙尼亚语、德语 、希腊语、意大利语 、希伯来语、 挪威语 、葡萄牙语（巴西）、 罗马尼亚语 、西班牙语、土耳其语、瑞典语 。注意由于这份文档时有修正，所以以上翻译版本可能有不同程度的过时。装饰本文的“五点九宫格”图像被称作“glider”，在一种叫做 Life 的数学模型中，这个简单的样本有一些异乎寻常的属性，多年以来 Hacker 们都为此着迷。我认为这个图像是一个很好的黑客徽标：它显得抽象而且神秘，而且像是一扇大门，通向一个截然不同的有其内在逻辑的世界。你可以阅读更多关于 Glider 徽标 的内容。 什么是黑客？¶ Jargon File 讲了一堆关于“hacker”这个词的定义，大部分是关于“技术高超”、“热衷解决问题”、以及“超越极限”的内容。但如果你只想知道如何成为一名黑客的话，真正重要的只有两条。这可以追溯到几十年前，那时候第一代分时微型计算机才刚刚诞生, 而 ARPAnet 的实验也才刚展开。那时的编程专家和组网高手建立了一个具有共享性质的文化社群，“hacker” 这个名词就是其中的成员创造的。黑客们建立了互联网，黑客们让 Unix操作系统演化到现在的模样，黑客们经营着 Usenet，黑客们让万维网运转起来。如果你是这个文化的一部分，如果你对这种文化有所贡献，而且这个社群的其它成员也认识你并称你为 hacker，那么你就是一名黑客。黑客的思维方式并不仅仅局限在软件黑客的文化圈内。也有人用黑客态度对待其它事情，如电子和音乐方面——其实你可以在任何最高级别的科学和艺术活动中发现它的身影。软件黑客对这些领域的践行者尊重有加，并把他们也称作黑客——有人宣称黑客天性是绝对独立于他们工作的特定领域的。但在这份文档中，我们将集中书写在软件黑客的技术和态度，以及发明了“黑客”一词的、以共享为特征的文化传统。有另外一群人大声嚷嚷着自己是黑客，但他们根本不是。他们主要由青少年男性构成，是一些蓄意破坏计算机和电话系统的人。真正的黑客把这些人叫做“骇客”(cracker)，并不屑与之为伍。黑客们通常认为他们是一群懒散、没有责任心、而且不是很聪明的人。会通过热接线发动汽车并不意味着你是一个汽车工程师。一样的道理，会破坏安全也不意味着你是一名黑客，不幸的是，很多记者和作家往往错把“骇客”当成黑客；这种做法一直使真正的黑客感到恼火。根本的区别是：黑客搞建设，骇客搞破坏。如果你想成为一名黑客，请接着读下去。如果你想做一个骇客，就去读 alt.2600 新闻组吧，顺便准备好去蹲个五到十年的监狱，而且最终你会意识到你并不像自己想象的那么聪明。关于骇客，我能说的只有这些。 黑客的态度¶ 1. 这个世界充满了令人着迷的问题等着我们解决。 2. 一个问题不应该被解决两次。 3. 无聊和乏味的工作是罪恶。 4. 崇尚自由。 5. 态度不能替代能力。 黑客们解决问题，建设事物，同时他们信仰自由和无私的双向帮助。要想作为一名黑客被社群认同，你需要体现出自己已经具备了这种态度。而要体现出这种态度，你就得真正相信和赞同这种态度。但是，如果你认为培养黑客态度只是进入黑客文化圈的敲门砖，那就大错特错了。这种态度将有助于有助于你的学习，并且能为你提供源源不断的动力，所以它对你而言是至关重要的。和所有创造性的艺术一样，成为大师的最有效方法，就是模仿大师的精神——智力上的模仿还不够，还要从感情上进行模仿。或者正如下面这首现代的禅诗讲的：&gt;修行之道：关注大师的言行，跟随大师的举动，和大师一并修行，领会大师的意境，成为真正的大师。所以，如果你想成为一名黑客，反复读下面的事情直至你相信它们为止：1. 这个世界充满了令人着迷的问题等着我们解决。¶做一名黑客会有很多乐趣，但是这些乐趣需要付出很多努力才能获得。这些努力需要动力。成功的运动员在表演和超越自我极限的时候获得身体上的愉悦，并把这种愉悦作为自己的动力。同样，为了成为一名黑客，你要从解决问题、磨练技术，以及锻炼智力中得到基本的享受。如果你不是天性如此，而你又想成为一名黑客，你就要设法成为这样的人。否则你会发现，你的黑客热情会被其他分心的事物吞噬掉——如金钱、性、以及社交圈的认同。（你必须建立对于自己学习能力的信念——就算你掌握的知识不足以解决当前的问题，如果你从问题的一小部分下手并从中学习，你将学到足够的知识用来解决下一部分——以此类推，直到整个问题都被你解决为止。）2. 一个问题不应该被解决两次。¶有创新能力的大脑是一种宝贵的有限资源。当世界还充满非常多有待解决的有趣的新问题时，它们不应该被浪费在重新发明轮子的事情上。作为一名黑客，你必须相信其他黑客的思考时间是宝贵的——因此共享信息、解决问题、并发布结果给其他黑客几乎是一种道义，这样其他人就可以去解决新问题，而不用在旧问题上面浪费精力了。（这并不是在说你有义务把自己所有的作品都免费发布出来，但这样做的黑客能获得大家最大的尊敬。使用黑客技能养家糊口甚至发财致富都没关系，只要你别忘记自己作为一个黑客的责任，不背离黑客群体即可。）3. 无聊和乏味的工作是罪恶。¶黑客（以及所有创造力的人们）都不应该被愚蠢的重复性劳动所困扰。重复性劳动浪费了他们解决新问题的时间，而解决新问题正是黑客最大的价值所在。这种浪费会伤害到每一个人。无聊和乏味的工作不仅仅是令人不舒服而已，而且本身就是一种罪恶。作为一个黑客，你必须坚信这点并尽可能多地将乏味的工作自动化，这不仅是为了你自己，也是为了其他人（尤其是其他黑客们）。(对此有一个明显的例外。黑客有时为了休息大脑、学习技能、或者别的特别的原因，也会做一些在他人看来是重复性或枯燥的事情。但这是自愿的——只要是有思维能力的人，就不应该被迫做无聊的活儿。）4. 崇尚自由。¶黑客们是天生的反权威主义者。任何能向你发号施令的人都可以让你停止解决令你着迷的问题，同时，按照权威主义者的一般思路，他通常会给出一些极端愚昧的理由。因此，不论何处，任何权威主义的做法，只要它影响到了你和其他的黑客，你就要和它斗到底。（这并非向所有权威挑战。儿童需要监护，罪犯要被看管起来。如果服从命令得到某种东西比起用其他方式得到它更节约时间，黑客可以同意接受某种形式的权威。但这是一个有限度的，斟酌过的的交易；那种权威主义者想要的个人服从是不在考虑范围内的。）权威主义者喜欢审查和保密。他们不信任自愿的合作和信息的共享——他们只喜欢由他们控制的所谓“合作”。因此，作为一个黑客，你应该对审查、保密，以及使用武力或欺骗去压迫有行为能力的人们的做法有一种本能的敌意。同时你要有为此信念付出的意愿。5. 态度不能替代能力。¶作为一名黑客，你必须培养起这些态度。但只具备这些态度并不能使你成为一名黑客，也不能使你成为一个运动健将和摇滚明星。成为一名黑客需要智力、实践、奉献精神、以及辛苦的工作。因此，你必须学着忽略态度问题，并尊重各种各样的能力。黑客们不会为那些装模做样的人浪费时间，但他们却非常尊重能力——尤其是从事黑客工作的能力（虽然有能力总归是好事）。如果能具备少有人能掌握的技能就更好了，当然如果你具备一些急需的技能，而这些技能又需要敏锐的思维、高超的技巧、和专注的精神，那就是再好不过了。如果你尊重能力，你就会享受到提高自己能力的乐趣——辛苦的工作和奉献将不会是一件苦差事，而是一种紧张的娱乐，这是成为黑客至关重要重要的一点。 黑客的基本技能¶ 1. 学习如何编程。 2. 学习使用开源 Unix 系统。_ 3. 学会使用万维网以及编写 HTML。 4. 学习英语，如果你的水平不够用的话。 黑客态度重要，但技术更加重要。态度无法替代技术，在你被别的黑客称为黑客之前，你必须掌握一些基本的技术作为你随身携带的工具。随着新技术的出现和老技术的过时，这个工具包的内容也在不断改变。比如以前机器语言编程也被列在里边，而 HTML 是直到最近才包括进去的。不过现在可以清楚地告诉你包含以下内容：1. 学习如何编程。¶这一条无须多说，当然是最基本的黑客技能。如果你还不会任何编程语言，我建议你从Python 开始学起。它设计清晰，文档齐全，而且对初学者比较友好。虽然它很适合作为一种入门语言，但它不仅仅只是个玩具；它非常强大、灵活，也适合做大型项目。我在一篇更详细的 Evaluation of Python（译注：Python 试用体验）中有更详细的论述。Python 网站有很好的入门教程。我曾经推荐过将 Java 作为初学的语言，但这则批评改变了我的想法（在里边搜索&#8221;The Pitfalls of Java as a First Programming Language&#8221; 就知道我的意思了）。作为一名黑客，你不能像人们挖苦的一样，“像水管工人一样装电脑”，你必须知道各个部件的工作原理。现在我觉得可能还是学过 C 和 Lisp 后再学 Java 比较好。有一个大体的规律，就是如果你过于偏重使用一种语言，这种语言一方面会成为你得心应手的工具，另一方面也会阻碍你的学习。有这个问题的不只是编程语言，类似RubyOnRails、CakePHP、以及 Django 的 web 应用框架也有这个问题，它们只会让你肤浅地懂得一些东西，当你碰到难以解决的问题或者需要调试时，你就可能不知所措了。如果你想进入正式的编程领域，你将不得不学习 C 语言，它是 Unix 的核心语言。C++ 与C 非常其他类似；如果你了解其中一种，学习另一种应该不难。但这两种都不适合编程入门者学习。而且事实上，你越避免用C编程，你的工作效率会越高。C 语言效率极高，而且占用很少的系统资源。不幸的是，C 的高效是通过你手动做很多底层的管理（如内存管理）来达到的。底层代码都很复杂，而且极易出现 bug，你要花很多的时间调试。而现今的计算机速度如此之快，花时间调试程序通常是得不偿失——比较明智的做法是使用一种运行较慢、效率较低，但能大幅节省你的开发时间的语言。因此，还是选择 Python 吧。其他对黑客而言比较重要的语言包括 Perl 和 LISP。从实用的角度来说，Perl是值得一学的；它被广泛用于动态网页和系统管理中，因此，即便你从不用Perl 写程序，至少也应该学会读懂 Perl。许多人使用 Perl 的理由和 我建议你使用 Python 的理由一样，都是为了避免用 C 完成那些不需要 C 高效率的工作。你会需要理解那些工作的代码的。LISP 值得学习的理由不同——最终掌握了它时你会得到丰富的启迪和经验。虽然你实际上很少会用到 LISP，但这些经验会使你在以后的日子里成为一个更好的程序员。当然，实际上你最好五种都会（Python，Java，C/C++，Perl 和 LISP）。除了是最重要的黑客语言外，它们还代表了截然不同的编程思路和方法，每种都会让你受益非浅。（你可以通过修改 Emacs 编辑器的模式）单单学习编程语言并不会让你达到黑客的程度，甚至连程序员的程度都难企及——你需要脱离某种编程语言的素服，学习通过编程解决问题的思路。要成为一个真正的黑客，你需要达到几天就能学会一门编程语言的水平，你可以将文档里的信息和你已经掌握的知识结合起来，很快就学会一门编程语言。这意味着你需要先学会机种思路截然不同的语言才行。编程是一个复杂的技能，我无法给你完整的指南来教会你如何编程，不过我可以告诉你，书本和课程也无法教会你如何编程——很多黑客，或者也许几乎所有的黑客，都是靠自学的。你从书本上学到语言的特点——只是一些皮毛，但要使书面知识成为自身技能，你只能通过实践和虚心向他人学习。因此你要做的就是 (a) 读代码，(b) 写代码。Peter Novig 是 Google 公司的顶尖黑客之一，而且是最受欢迎的 AI 课本的一名作者。他写了一篇好文章名叫 Teach Yourself Programming in Ten Years（译注：十年教会自己编程），其中的“recipe for programming success”（译注：编程的成功之道）尤其值得一读。学习编程就象学习自然语言写作一样。最好的做法是读一些大师的名著，试着自己写点东西，再读些，再写点，再读些，再写点……如此往复，直到你的文章具备范文的力量和感觉为止。以前要找适合阅读的好代码并不容易，因为几乎没有大型程序的源代码能让新手练手。这种状况已经戏剧性地发生变化；开源软件、编程工具、和操作系统（全都由黑客写成）现在已经随处可见。让我们在下一个话题中继续讨论……2. 学习使用开源的 Unix 系统。¶我将假设你已经有一台个人计算机供自己使用了（你可以体会一下这意味着多少东西。早些时候，计算机是如此的昂贵，没有人能买得起。而黑客文化就是在那样的环境下演化来的）。新手们能够朝学习黑客技能迈出的最基本的一步，就是找一版 Linux 或 BSD-Unix，安装在个人电脑上，并且把它跑起来。没错，这世界上除了Unix还有其他操作系统。但它们都是以二进制形式发布的——你无法读到它的源代码，也不可能修改它。尝试在运行 DOS、Windows、或 MacOS 的机器上学习黑客技术，就象是穿着骑士铠甲学跳舞。除此之外，Unix 还是 Internet 的操作系统。你可以学会上网却不知道 Unix，但你不了解 Unix 就无法成为一名 Internet 黑客。因此，今天的黑客文化在很大程度上是以 Unix为核心的。（这点并不总是真的，一些很早的黑客对此一直很不满，但 Unix 和 Internet之间的联系已是如此之强，就连 Microsoft 这样强力的公司也对此也无可奈何。）所以, 安装一套 Unix 吧——我个人偏爱 Linux，但还有其他种类共你选择（是的，你可以在同一电脑上同时安装 Linux 和 DOS/Windows)。学习它，运行它，鼓捣它。用它上Internet。阅读它的源代码。修改它的源代码。你会用到很多优秀的编程工具（包括 C，LISP，Python 及 Perl），这些工具在 Windows 下是做梦都没法得到的。你会觉得乐趣无穷。当你有一天成为大师再回顾初学的日子，你会觉得那时学到的东西可真多。如果你想了解更多关于学习 Unix 的信息，读一下 The Loginataka（译注：ESR 的另一著作，可以称为黑客大藏经）吧。也许你还想看看 The Art of Unix Programming（译注：Unix 编程艺术，经典著作）。你可以访问 Linux Online! 网站，这个网站可以帮你起步。你可以从那里下载到Linux，或者更好的办法是找一个本地的 Linux 用户组，让他们帮你安装 Linux。在这份 HOWTO 文档发布后的前十年里，关于 Linux 我写的是，从新人的观点来看，所有的Linux 发行版都差不多，但在 2006-2007 之间，我们终于有了一个最佳选择：Ubuntu。我们可以说各种Linux 发行版各有千秋，但 Ubuntu 是新人最容易上手的一个发行版。你可以在 www.bsd.org 找到 BSD Unix 的求助及其他资源。Linux 有一种被称为 Live CD 的发行方式，这种发行版会从CD 运行起来，而且不会动到你硬盘里的东西，Live CD 是尝试 Linux 的一个不错的方法。由于光驱读写本来就比较慢，Live CD 的速度一般也会比较慢，不过 Live CD 总归是一个能尝试各种可能性而又不过激的方法。我有写一篇关于 Unix 和 Internet 基础的入门文章。对于新手，我以前不鼓励你自己独立安装Linux 或者 BSD，现在这些系统的安装工具已经足够好了，就算对新手来说，独立安装操作系统也不是不可能的事。无论如何，我还是推荐你联系本地的 Linux 用户组，向他们寻求帮助，这会进程更加顺利。3. 学会使用万维网以及编写 HTML。¶黑客文化建造的大多东西都在你看不见的地方发挥着作用。浙西东西可以帮助工厂、办公室、以及大学正常运转起来，但从表面上很难看到它们对非黑客的普通人的生活的影响。而 Web 是一个大大的例外。就连政客也同意，这个庞大耀眼的黑客玩具正在改变整个世界。就算只是因为这个（还有许多其它的原因），Web 也值得你一学。这并不是仅仅意味着如何使用浏览器（谁都会），而是要学会如何写 HTML，也就是 Web的标记语言。如果你不会编程，写HTML会教你一些有助于学习的思考习惯。因此，先完成一个主页。（网上有很多不错的资源，比如 这个 HTML 入门教程。)但仅仅拥有一个主页不能使你成为一名黑客。 Web里充满了各种网页。大多数是毫无意义的、毫无信息量的垃圾——界面时髦的垃圾，不过还是垃圾（更多相关信息访问The HTML Hell Page）。要想有价值，你的网页必须有内容——它必须有趣或对其它黑客有帮助。这是下一个话题所涉及的……4. 学习英语，如果你的水平不够用的话。¶作为一个以英语为母语的美国人，我以前很不情愿提到这点，免得被当做一种文化上的帝国主义。但相当多以其他语言为母语的人一直劝我指出这一点，那就是：英语是黑客文化和 Internet 的工作语言，只有懂英语，你才能在黑客社区顺利做事。大概1991年的时候，我就了解到许多黑客在技术讨论中使用英语，甚至有时他们来自同一种母语也在用英文讨论。在现阶段，英语有着比其他语言丰富得多的技术词汇，因此是一个对于工作来说相当好的工具。基于类似的原因，英文技术书籍的翻译通常都不怎么令人满意。（如果有翻译的话）。Linus Torvalds 是芬兰人，但他的代码注解是用英语写的（很明显他从没想过其他的可能性）。他流利的英语。是他能够管理全球范围的 Linux 开发人员社区的重要因素。 这是一个值得学习的例子。就算你的母语是英语，这也无法保证你的语言技能足够达到黑客的标准。如果你的写作文字不通、语法混乱、错字连篇，包括我在内的大部分的黑客都会忽略你的存在。虽然写作马虎不一定意味着思考也马虎，但我们发现两者的关联性还是挺强的——马虎的头脑对我们来说毫无价值，如果你写作能力不够，就好好学习写作吧。 提高自己在黑客圈中的地位¶ 1. 撰写开源软件 2. 帮助测试并调试开源软件 3. 发布有用的信息 4. 帮助维护基础设施的运转 5. 为黑客文化本身服务 和大部分不涉及金钱的文化一样，黑客王国靠声誉运转。你设法解决有趣的问题，但它们到底多有趣，你的解法有多好，是要由那些和你具有同样技术水平，或比你更厉害的人去评判的。相应地你需要认识到，当你在玩黑客游戏时，你的分数主要是靠其他黑客对你的技术的评价得到的（这就是为什么只有在其它黑客称你为黑客时，你才算得上是一名黑客）。常人的印象里，黑客是一项独来独往的工作，所以上述评价方式并不为众人所知。另一个黑客文化误区是拒绝承认自我或外部评价是一个人的动力，这种想法在 1990 年代末以后就逐渐衰退了，但现在还有人这么认为。这也是让上述评价方式鲜为人知的原因之一。明确地讲，黑客行为就是人类学家所称的“奉献文化”。在这里你不是凭借你对别人的统治来建立地位和名望，也不是靠美貌，或拥有其他人想要的东西，而是靠你的贡献。尤其是贡献你的时间、你的创造、以及你的技术成果。要获得其他黑客的尊敬，你可以从下面五种事情着手：1. 撰写开源软件¶第一个方法（也是最重要，最传统的方法）是写些被其他黑客认为有趣或有用的程序，并把程序源代码提供给整个黑客文化圈使用。（过去我们称之为“free software （自由软件）”， 但这却使很多不知 free 的精确含义的人感到困惑。现在我们很多人，根据搜索引擎网页内容分析，至少三分之二的人在使用&#8221;open-source software，即“开源软件”这个词）。黑客领域里最受尊敬的偶像，是那些写了大型的、好用的、用途广泛的软件，并把它们发布出来，使得每人都在使用他软件的人。但是从历史方面来讲有一点值得一提。虽然黑客们一直认为开源软件的开发者是真正的黑客，但在 1990 年代中期以前，大部分黑客会把自己的主要时间用来撰写闭源软件，直到我 1996 年开始写这篇 HOWTO 时也是如此。但从 1997 年后开源软件进入了主流，而且改变了这一切。以现在的观点来看，“黑客社群”和“开源开发者”是对这一个社群的两种称呼，但值得记住的是，以前这两者的概念并不完全一样。要了解更多信息，你可以看看关于黑客、开源、以及自由软件的历史这一节的内容。2. 帮助测试并调试开源软件¶黑客也尊敬那些使用和测试开源软件的人。这个世界并不完美，我们不可避免地要把大多数的开发时间放在调试阶段。这就是为什么任何有头脑的开源代码的作者都会告诉你好的beta 测试员象红宝石一样珍贵。好的测试者知道如何清楚描述出错症状，很好地定位错误，能忍受快速发布中的 bug，并且乐意配合做一些例行的诊断性工作。一个优秀的测试者可以让一场旷日持久辛苦不堪的调试大战变成一场有益身心的小打小闹。如果你是个新手，试着找一个你感兴趣的正在开发中的程序，做一个好的 beta 测试员。你会自然地从帮着测试，进步到帮着抓 bug，到最后帮着改程序。你会从中学到很多，而且善因种善果，以后别人也会很乐意帮助你。3. 发布有用的信息¶另一件好事是收集整理有用有趣的信息，做成网页或类似 FAQ 的文档，并且让大家都能看到。技术性 FAQ 的维护者会受到和开源代码的作者一样多的尊敬。4. 帮助维护基础设施的运转¶黑客文化（还有互联网工程方面的发展）是靠志愿者推动的。要使Internet能正常工作，就要有大量枯燥的工作不得不去完成——管理邮件列表和新闻组，维护大型软件库，开发RFC 和其它技术标准等等。做这类事情的人会得到很多尊敬，因为每人都知道这些事情费时颇多，而又不象编程那样有趣。做这些事情需要奉献精神。5. 为黑客文化本身服务¶最后，你可以为这个文化本身做宣传（例如像我这样，写一个“如何成为黑客”的教程:-) ）这并不要求在你已经在这个圈子呆了很久，因以上四点中的某点而出名，有一定声誉后才能去做。黑客文化没有领袖，这点是确认无疑的。但黑客圈里确实有些文化英雄、部落长者、史学家、还有发言人。如果你在这圈里呆足够长时间，你也许也能成为其中之一。 记住：黑客们不相信他们的部落长者的自夸，因此过分追求这种名誉是危险的。与其奋力追求，不如先摆正自己的位置，等它自己落到你的手中——那时则要做到谦虚和优雅。黑客和书呆子(Nerd)的联系¶和大家普遍认为的相反，并不是只有书呆子才能成为一名黑客。但它确实有帮助，而且许多黑客事实上是书呆子。做一个深居简出的人有助于你集中精力进行十分重要的事情，如思考和编程。因此，很多黑客都接受了“geek（奇客）”这个标签，并把它作为骄傲的奖章——这是宣布他们独立于主流社会期望的一种方式（这个标签也是他们喜欢科幻小说和策略型游戏的标记，而这些也是很多黑客喜欢的东西）。1990 年代更多用的称呼是“nerd（书呆子）”，那时“nerd”只带点轻微的贬义，而“geek”则是地地道道的蔑称，而在 2000年以后，这两者逐渐调转过来了，至少再美国的大众文化中是这样。而到了现在，甚至在非技术人群里，也有不少以 geek 精神为傲的文化团体。如果你能集中足够的精力做好黑客工作同时还能有正常的生活，这是件好事。现在要做到这一点比我在 1970 年代还是新手的时候要容易的多；如今主流文化对技术怪人要友善得多。甚至有越来越多的人意识到黑客通常是很好的恋人和配偶的材料。如果你因为生活上不如意而迷上做黑客，那也没什么——至少你不会分神了。也许你以后还能找到自己的生活。 向黑客的格调靠拢¶ 重申一下，要做一名黑客，你必须深入体验黑客精神。计算你不在计算机边上，你仍然有很多对黑客工作有帮助的事情可做。它们并不能替代真正的编程（没有什么能替代编程），但很多黑客都那么做，并感到它们与黑客的本质存在某些基本的连系。学会用母语流畅地写作。尽管很多人认为程序员写不出好文章，但是有相当数量的黑客（包括所有我知道的最棒的黑客）都是很有能力的写手。阅读科幻小说。参加科幻小说讨论会。（这是一个认识黑客和准黑客的好方法）学习一种武术。武术中需要的精神自律能力和黑客在这方面的需求非常相似。黑中最受欢迎的武术是来自亚洲的空手格斗类武术，例如跆拳道、空手道、武术、合气道、柔术等。西式击剑和亚洲剑术也有不少的跟随者。1990 年后期以来，在可以合法使用枪支的地方，射击受欢迎的程度也越来越高了。大部分黑客喜欢的武术类型都是那些强调精神的自律，放松的意识，以及意念的控制，而不仅仅是单纯的力量、运动精神、以及身体的强健。实实在在学习一种冥想修炼。多年以来黑客中最受欢迎的形式是参禅。（很重要的一点是，参禅和宗教可以说是独立的，你不需要接受一种新宗教，或者放弃现有的宗教信仰，就能做参禅的修炼。其他的形式也许也管用，但注意一定要挑那些靠谱的，不需要你相信不着边际的事物的冥想方式来演练。提高自己对双关语和文字游戏的鉴赏能力。如果这些事情有很多你已经在做了，那你可能是天生做黑客的材料。至于为什么偏偏是这些事情，原因并不完全清楚，但它们都涉及用到左－右脑能力的综合，这似乎是关键所在（黑客们既需要清晰的逻辑思维，有时又需要偏离逻辑跳出问题的表象）。最后，还有一些不要去做的事情。不要使用愚蠢的，哗众取宠的ID或昵称。不要卷入 Usenet（或任何其他地方）的骂战。不要自称为“cyberpunk（网络朋克）”，也不要浪费时间和那些人打交道。不要让你的 email 或者帖子中充满错误的拼写和语法。以上的事情只会为你招来嘲笑。黑客们个个记忆超群——你将需要数年的时间让他们忘记你犯下的错误。网名的问题值得深思。将身份隐藏在虚假的名字后是骇客、软件破解者、及其他低等生物幼稚愚蠢的行为。黑客不会做这些事；他们对他们所作的感到骄傲，而且乐于人们将作品与他们的真名相联系。因此, 如果你现在还在使用假名，那就放弃它吧。在黑客文化里假名是失败者的标记。 关于黑客、开源、以及自由软件的历史¶ 1996 年我开始写这篇 HOWTO，那时候的大环境和现在很不一样。这里会给你简单介绍一下相关的历史变迁，这样大致可以澄清一下开源软件、自由软件、以及 Linux和黑客圈的关系。如果你对这些不感兴趣，你可以直接跳过这一节，继续读下面的FAQ。我在这里所描述黑客精神和社会远远早于1990 Linux 出现的时候，我第一次涉足黑客圈是 1976 年，而究其根源则可追溯到20世纪60年代初。但在 Linux 出现之前，大多数黑客使用的操作系统要么是私有的商业版本，要么是自己开发的未得到广泛使用的系统（例如麻省理工学院的 ITS 系统）。虽然那时也有人想要改变这种状况，但他们的努力影响范围相当有限，充其量仅在某个黑客社区有少数忠实用户而已。现在所谓“开源”历史和黑客社区的历史几乎一样长，但直到 1985 年前，它只是一种没有固定称谓的习惯做法，而不是一套有理论做后盾，有宣言做前锋的自觉运动。这种状态在1985年结束了，长老级黑客 Richard Stallman（也被称为“RMS”）将其命名为“自由软件(Free Software)”。这种命名也是一种宣言的方式，不过大多数黑客社区都不接收这种包含明显思想烙印的标签。因此而大多数现有的黑客社区从来没有接受。结果，“自由软件”这一标签被黑客社群中声音较大的少数人（尤其是 BSD Unix 的相关人士）拒绝掉了，而剩下的大部分人（包括我）虽然也有保留意见，可也还是沿用了这一称谓。尽管很多人存在保留意见，RMS 的“自由软件”的大旗也一直举到了 1990 年代中期。直到Liunx 崛起时它才受到了重大挑战。Linux 给了的开源开发者一个新的自然归宿，很多项目都已我们现称的开源的方式由 Unix 移植到了 Linux 系统中。Linux 的社区也得到了爆炸性增长，成为了一个比以前黑客文化更为庞大，并且异质化的新的群体。RMS曾今尝试将这一社群也归并到他的“自由软件运动”大旗下，但终究没有成功，原因可以归于 Linux 社区的样性，以及 Linus Torvalds 本人的质疑。Torvalds 公开拒绝了 RMS 的自由软件思想，但还是沿用了“自由软件”这一术语，这也引来了很多年轻黑客的效仿。1996年，当我第一次发表这篇 HOWTO 的时候，黑客社团正在围绕着 Linux 和其它几个开源操作系统（尤其是 BSD Unix 的衍生系统）进行着快速的重组。几十年来围绕着闭源系统进行闭源开发的方式还没有开始淡出集体记忆，但在大家看来，这似乎已经是死去的历史了。越来越多的黑客都已经开始注重自己在开源项目（例如 Linux、Apache 等）上的贡献，并将这些贡献当做自己的成就。然而在那个时候“开源”这一名词还没有出现。这个名词是 1998 年初才开始出现的，而在出现的半年内，大部分的黑客社区就接受了这一名词，只有少数不接受这一概念的人还在坚持使用“自由软件”这一名词。1998 年以后，或者更准确地说是 2003 年以后，所谓的“hacking” 和 “开源（自由）软件开发”的含义已经非常接近了。从今天的眼光来看，这种区分已经没有意义了，看趋势，这个现状将来也不大可能有多大的改变。不管怎样，这段变更的历史还是值得记住的。 其它资源¶ Paul Graham 写了一篇 Great Hackers，还有 Undergraduation 一篇，里边有充满智慧的言论。还有一篇叫 How To Be A Programmer 的文章，是这篇文章很好的补充。里边的建议不但包括如何提高编程和其它技术，还包含团队合作的窍门。我还写过一篇 A Brief History Of Hackerdom （译注：黑客文化简史）。我写了一本 The Cathedral and the Bazaar（译注：大教堂与市集），对于 Linux及开放源代码文化现象有详细的解释。这种现象在我的另一篇 Homesteading the Noosphere（译注：开拓智域）中还有更直接的阐述。Rick Moen 写了一份很好的关于 how to run a Linux user group（译注：如何运营Linux用户组）的文档。我和Rick Moen合作完成了另一份关于 How To Ask Smart Questions（译注：提问的智慧）的文章，可以让在寻求帮助时得到事半功倍的效果。如果你想知道 PC、UNIX 及 Internet 基本概念和工作原理，参考 The Unix andInternet Fundamentals HOWTO。当你发布软件或者补丁的时候，请遵照 Software Release Practice HOWTO 去做。如果你对禅诗感兴趣，也许你还喜欢看这篇 Rootless Root: The Unix Koans of Master Foo FAQ（常见问题解答）¶ 内容¶ 怎样才能知道自己已经是一名够格的黑客？ 你能教我做黑客吗？ 那么，我要如何开始？ 我得什么时候开始学？现在会不会太迟了？ 要学多久才能学会黑客技能？ Visual Basic 是好的入门语言吗？ 你能帮我“黑”掉一个站点吗？或者教我怎么黑它？ 我怎么样才能得到别人帐号的密码？ 我如何入侵/查看/监视别人的 Email？ 我如何才能在IRC聊天室里偷到频道 op 的特权？ 我被黑了。你能帮我避免以后再被攻击吗？ 我的 Windows 软件出现问题了。你能帮我吗？ 我在哪里能找到可以与之交流的真正的黑客？ 你能推荐一些有关黑客的好书吗？ 成为一名黑客我需要擅长数学吗？ 我该从那种语言学起？ 我需要什么样的机器配置？ 我想贡献社区。你可以帮我选一个问题让我下手吗？ 我得因此憎恨和反对 Microsoft 吗？ 开放源代码软件不会使程序员丢饭碗吗？ 我要如何开始？哪里有免费的Unix？ 怎样才能知道自己已经是一名够格的黑客？¶ 你可以问自己下面三个问题：你能流利地读写代码吗？你认同黑客社群的目的和价值吗？黑客社群里有没有资深成员称呼你为黑客呢？如果你对这三个问题的答案都是“是”的话，你已经是一名黑客了。如果你只满足其中两项，那就说明你还不够格。第一个问题是关于技能的。如果你已经符合本文前面提到的最低需求的话，你也算过关，不过如果你发布过为数不少的开源代码并被社群接受，那你就算满分过关了。第二个问题是关于态度的。如果黑客精神的五项基本原则对你来说能有共鸣，而且已经是你处事的方式，你就算过关一半了。这算靠里的一半，靠外的一半和你在黑客社区长期项目上的投入和关联程度有关。这里列出了一些项目的不完全列表供你参考：Linux 的改进和用户群扩大对你来说是否重要？你对于自由软件精神是否充满激情？你对于垄断是否有敌意？你是否相信计算机这种工具会让增加世界财富，让这个世界更富有人道主义？不过值得注意的一点是，黑客社群有一些特有的政治倾向，其中两条，一条是保卫言论自由权，一种是抵御所谓“知识产权”对于开源社区的侵害。实践这两条的是一些民间组织，例如电子前沿基金会（Electronic Frontier Foundation）就是其中之一。不过虽然如此，黑客们对于有任何明确政治目的的团体都是心怀戒备的，因为我们已经从各种经验教训中学到一点：这些活动只会分裂黑客社团，并让黑客们分心。如果有人以黑客精神为名组织一场首都大游行，那他就完全没有弄明白这点。真正的应对方式也许应该是“闭上嘴巴，给他们看代码”。第三个问题有点循环递归的味道。在“什么是黑客”一节我已经讲过，作为一名黑客的意义在于参与某个黑客社群，也就是社交网络的一个亚文化团体，作为内部的贡献成员以及外部的宣传者积极活动。和很久以前相比，黑客群体现在的团结意识和自我意识已经增强了很多。过去三十年来，随着互联网的发展，社交网络逐渐开始发挥举足轻重的作用，而黑客的亚文化团体也更加容易发展和维护了。这种变革的明显一个有代表性的现象是：有的黑客社群现在都有自己专门的文化衫了。研究社交网络的社会学家把黑客文化归为“看不见的大学”，而且注意到这些网络社交圈还有所谓的“看门人”——其中的一些核心成员，他们有一定的权威，可以准新成员的进入。所谓的“看不见的大学”本来就是一个松散的非正式组织，所以这些“看门人”也只是这门称呼而已。但不是每个黑客都是“看门人”，这是每个黑客都深刻明白的一点。“看门人”需要有一定的资历和成就，究竟要到什么程度很难讲，但一旦有这样的人出现，每一个黑客都能辨识出来。你能教我做黑客吗？¶自从第一次发布这份文档，我每周都会收到一些请求，（频繁的话一天几封）要我“教会他们做黑客”。遗憾的是，我 没有时间和精力来做这个；我自己的黑客项目，及我作为一个开放源代码倡导者 的四处奔波已经占用了我110%的时间。即便我想教你，黑客也依然基本上是一项自行修炼的的态度和技术。 当真正的黑客想帮助你的时候，如果你乞求他们一汤匙一汤匙“喂”你的话，你会发现他们不会尊重你。先去学一些东西。显示你在尝试，你能靠自己去学习。然后再去向你遇到的黑客请教特殊的问题。如果你发E-mail给一位黑客寻求他的帮助，这是两件首要记住的事情。 第一，写出来的文字显得懒且粗心的人通常非常懒于思考且非常马大哈，不能成为好黑客——因此注意拼写正确，使用正确的语法及发音，否则你可能会无人理睬。 第二，不要试图要求回复到一个ISP帐号，而那个帐号与你 的发信地址不同。这样做的人一般是使用盗用帐号，我们对于回报或者帮助窃贼不感兴趣。那么，我要如何开始？¶对你而言最佳的入门方式也许是去参加 LUG（Linux用户组）的聚会。 你可以找到在 LDP 的综合 Linux 信息页面上找到类似的组织；也许有一个在你家附近的，而且非常有可能与一所大学或学校挂钩。如果你提出要求，LUG 成员兴许会给你一套Linux，当然此后会帮你安装并带你入门。我得什么时候开始学？现在会不会太迟了？¶你有动力学习的时候就是好时候。大多数人看来都是在15－20岁之间开始感兴趣的，但据我所知，在此年龄段之外的例外也是有的。要学多久才能学会黑客技能？¶这取决于你的聪明程度和努力程度。对于大多数人，只要足够专注，就能在 18 个月到2 年之间学会一套令人尊敬的技能。但是，不要以为这样就够了；如果你是一个真正的黑客，你要用你的余生来学习和完善你的技术。Visual Basic 是好的入门语言吗？¶既然你问了这个问题，那你肯定是想在 Microsoft Windows 操作系统下学习黑客技能。这本身就不是一个好主意。我前面讲过在 Windows 下 hack 就跟穿着骑士铠甲跳舞一样，我不是在开玩笑。别走这条路，Windows 是一个很低劣的 hack环境，而且一直如此。Visual Basic 有一个特征性问题，就是它不可以被移植到其他平台。虽然也有些Visual Basic 开源实现的雏形，但实现的只是 ECMA 标准的一个很小的子集。在Windows 下大部分类库的知识产权都是 Microsoft 独家所有，如果你不是及其小心的话，你的代码将只能在 Microsoft 支持的平台上使用。如果你不打算从 Unix起步，那你也有更好的语言可选，而且类库质量还更高，例如 Python 就是其中之一和其他的 Basic 类语言一样，Visual Basic 这门编程语言的设计也很糟糕，它会教你一些坏的变成习惯。你就别问我细节了，这可是罄竹难书。还是去学一门设计优良的语言吧。其中一个坏习惯是让你依赖于单一厂商的函数库、控件及开发工具。一般而言，任何不能够支持至少 Linux 或者某一种 BSD，或其不能支持至少三种以上操作系统的语言，都是一种不适合应付黑客工作的语言。你能帮我“黑”掉一个站点吗？或者教我怎么黑它？¶No。任何读完这份 FAQ 后还问这个问题的人，都是无可救药的蠢材，即使有时间指教我也不会理睬。任何发给我的此类电子邮件都会被忽略或被痛骂一顿。我怎么样才能得到别人帐号的密码？¶这是骇客行为。滚得远远的，白痴。我如何入侵/查看/监视别人的 Email？¶这是骇客行为。在我面前消失，智障。我如何才能在IRC聊天室里偷到频道 op 的特权？¶这是骇客行为。滚开，笨蛋。我被黑了。你能帮我避免以后再被攻击吗？¶不行。目前为止，每次问我这个问题的，都是一些运行 Microsoft Windows 的菜鸟。不可能有效的保护 Windows 系统免受骇客攻击；太多代码和架构的缺陷使保护Windows 的努力有如隔靴搔痒。唯一可靠的预防来自转移到 Linux 或其他设计得至少足够安全的系统。我的 Windows 软件出现问题了。你能帮我吗？¶当然。打开 DOS 命令行输入“format c:”。你遇到的任何问题将会在几分钟之内消失。我在哪里能找到可以与之交流的真正的黑客？¶最佳办法是在你附近找一个Unix或Linux的用户组，参加他们的聚会。（你可以在ibiblio 的 LDP 站点找到一些用户组的链接。）（我过去曾说过不能在IRC上找到真正的黑客，但我发觉现在情况有所改变。显然一些真正的黑客的社区像 GIMP 及 Perl，也有IRC频道了。）你能推荐一些有关黑客的好书吗？¶我维护着一份 Linux Reading List HOWTO，也许你会觉得有用。The Loginataka 也大致值得一读。关于Python的介绍，请访问在Python站点上的入门教程。成为一名黑客我需要擅长数学吗？¶不用。黑客道很少使用常规的数学或算术，不过你绝对需要能逻辑性地思考和进行精密的推理。尤其是你不会用到微积分或电路分析（我们把这些留给电子工程师们:-)）。有限数学中的一些可提（包括布尔代数，集合论，组合数学，图论）的背景知识会对你有所帮助。更重要的一点：你要有逻辑思维能力，能够以数学家的方式追溯因果。虽然大部分的数学知识对你可能没什么用处，但数学思维的能力对你来说是极其重要的。如果你缺乏这方面的智慧，要做一名黑客恐怕是无望了。如果你缺乏这方面的训练，还是尽早开始吧。我该从那种语言学起？¶如果你还没学过XHTML（HTML最新的表现形式）的话，就从它开始吧。市面上有一大堆的封面精美，宣传得天花乱坠的HTML 书籍，不幸的是质量优秀的几近于无。我最喜欢的是 HTML: The Definitive Guide。但HTML 不是一种完整的编程语言。当你准备开始编程时，我推荐从 Python起步。 你会听到一大群人推荐 Perl，但是 Perl 要难学得多，而且（以我之见）设计得不是很好。C 确实重要，但它也比 Python 或 Perl 难多了。不要尝试先学 C。Windows用户注意：不要满足于 Visual Basic。它会教给你坏习惯，而且它不可以跨平台移植，只能在Windows下运行。因此还是敬而远之为好。我需要什么样的机器配置？¶过去个人电脑能力相当不足并且内存很小，这给黑客的学习过程设置了人为的障碍。不过 1990 中期以后就不是这样了；任何一台 Intel 486DX50 以上配置的机器都有足够的能力进行开发工作、运行 X 系统、以及进行 Internet 通讯。而且你买到的市面上最小的硬盘都大得足够你使用了。选择用来学习的机器时重要的一点是注意配件是否是Linux兼容的（或BSD兼容，如果你选择 BSD 的话）。和刚才提到的一样，大多数现在的机器都是符合的；唯一值得注意的区域在于 modem 和打印机；有些具备为Windows设计的配件的机器不会在Linux下工作。你可以查看这份 Linux Hardware Compatibility FAQ。我想贡献社区。你可以帮我选一个问题让我下手吗？¶不行，因为我不知道你的兴趣和擅长领域在哪里。如果你没有内在动力，你就很难坚持下去，所以说，别人只给你的路是行不通的。试试这么做吧。在 Freshmeat 网站观察几天，看看里边的项目更新，如果你看到一个看上去很酷而且你也很感兴趣的项目，就加入吧。我得因此憎恨和反对 Microsoft 吗？¶不，你不必如此。不是因为Microsoft不令人讨厌，而是因为黑客文化早在Microsoft 出现之前就存在了，且将在 Microsoft 成为历史后依然存在。 你耗费在憎恨 Microsoft 的任何力气不如花在爱你的技术上。写好的代码——那会相当有效地打击 Microsoft 又不会让你得到恶报应。开放源代码软件不会使程序员丢饭碗吗？¶目前看起来不太可能，开放源代码软件产业似乎创造了更多的就业机会而不是减少就业机会。如果写一个程序比起不写来是纯经济收益的话，那么在写完后，程序员应该得到报酬不管程序是否是开放源代码。并且，无论写出多么“免费自由”的软件，都存在更多对新的，定制的软件的需求。我有这方面更多的论述，放在放源代码网站资料中。我要如何开始？哪里有免费的Unix？¶在本份文档的某个地方我已经提到过何处可以得到最常用的免费 Unix。要做一名黑客，你需要自己找到激励和动力，还要有自学的能力。现在就开始努力吧……","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Hacker","slug":"Hacker","permalink":"http://ipcreator.me/tags/Hacker/"}]},{"title":"提问的智慧","date":"2017-02-02T13:32:06.000Z","path":"2017/02/02/How-To-Ask-Questions-The-Smart-Way/","text":"How To Ask Questions The Smart WayCopyright © 2001,2006,2014 Eric S. Raymond, Rick Moen本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。本中文指南是基于原文 3.10 版以及 2010 年由 Gasolin 所翻译版本的最新翻译；本文另有繁體中文版。 原文版本历史 目录 声明简介在提问之前当你提问时慎选提问的论坛Stack Overflow网站和 IRC 论坛第二步，使用项目邮件列表使用有意义且描述明确的标题使问题容易回复用清晰、正确、精准并合法语法的语句使用易于读取且标准的文件格式发送问题精确的描述问题并言之有物话不在多而在精别动辄声称找到 Bug可以低声下气，但还是要先做功课描述问题症状而非猜测按发生时间先后列出问题症状描述目标而不是过程别要求使用私人电邮回复清楚明确的表达你的问题以及需求询问有关代码的问题时别把自己家庭作业的问题贴上来去掉无意义的提问句即使你很急也不要在标题写紧急礼多人不怪，而且有时还很有帮助问题解决后，加个简短的补充说明如何解读答案RTFM 和 STFW：如何知道你已完全搞砸了如果还是搞不懂处理无礼的回应如何避免扮演失败者不该问的问题好问题与蠢问题如果得不到回答如何更好地回答问题相关资源鸣谢 声明 许多项目在他们的使用协助/说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明： 本指南不提供此项目的实际支持服务！ 我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。 如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。 简介 在黑客的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。 不只是黑客，现在开放源代码（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件好事；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。 首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发我们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。 尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。 我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 -– 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 失败者（撸瑟） （由于历史原因，我们有时把它拼作 lusers）。 我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。 我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答赢家（winner）的问题。 如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 – 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。 所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 – 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。 如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 – 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。 （欢迎对本指南提出改进意见。你可以 email 你的建议至 esr@thyrsus.com 或 respond-auto@linuxmafia.com。然而请注意，本文并非网络礼节的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议。） 在提问之前 在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情： 尝试在你准备提问的论坛的旧文章中搜索答案。尝试上网搜索以找到答案。尝试阅读手册以找到答案。尝试阅读常见问题文件（FAQ）以找到答案。尝试自己检查或试验以找到答案向你身边的强者朋友打听以找到答案。如果你是程序开发者，请尝试阅读源代码以找到答案。 当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所学到的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。 运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（既搜索 Google 论坛，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 我在 Google 中搜过下列句子但没有找到什么有用的东西 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。 别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。 准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。 小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着蠢问题…， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。 绝不要自以为够格得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去挣到一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 –一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。 另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。谁能给点提示？、我的这个例子里缺了什么？以及我应该检查什么地方比请把我需要的确切的过程贴出来更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。 当你提问时 慎选提问的论坛 小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者： 在与主题不合的论坛上贴出你的问题在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然在太多的不同新闻群组上重复转贴同样的问题（cross-post）向既非熟人也没有义务解决你问题的人发送私人电邮 黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。 因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括阅读 FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，连过去看看。 向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 – 如果你不确定，那就向别处发送，或者压根别发。 在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。 别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。 搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。 一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。 可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 – 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。 Stack Overflow 搜索，然后 在 Stack Exchange 问。 近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。 因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。 Stack Exchange 已经成长到超过一百个网站，以下是最常用的几个站： Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。Stack Overflow 是问写程序有关的问题。Server Fault 是问服务器和网管相关的问题。 网站和 IRC 论坛 本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。 事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用我们的版本”。 在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。 通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。 在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。 第二步，使用项目邮件列表 当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法： 任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。 如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。 然而，如果你确信你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意） 如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。 使用有意义且描述明确的标题 在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的帮帮忙、跪求、急（更别说救命啊！！！！这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而是在这点空间中使用极简单扼要的描述方式来提出问题。 一个好标题范例是目标 – 差异式的描述，许多技术支持组织就是这样做的。在目标部分指出是哪一个或哪一组东西有问题，在差异部分则描述与期望的行为不一致的地方。 蠢问题：救命啊！我的笔电不能正常显示了！聪明问题：X.org 6.8.1 的鼠标游标会变形，某牌显卡 MV1005 芯片组。更聪明问题：X.org 6.8.1 的鼠标游标，在某牌显卡 MV1005 芯片组环境下 - 会变形。 编写目标 – 差异 式描述的过程有助于你组织对问题瘍细致思考。是什么被影响了？ 仅仅是鼠标游标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境和你遇到的问题。 总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。 如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 Re: 测试 或者 Re: 新 bug 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。 对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。 仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。 在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你只想在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。 使问题容易回复 以请将你的回复寄到……来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，换个好点的；如果是操作系统不支持这种邮件程序，也换个好点的。 在论坛，要求通过电子邮件回复是非常无礼的，除非你相信回复的信息可能比较敏感（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如追踪此讨论串、有回复时发送邮件提醒等功能。 用清晰、正确、精准并语法正确的语句 我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。 正确的拼字、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 – 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它必须很准确，而且有迹象表明你是在思考和关注问题。 正确地拼写、使用标点和大小写，不要将its混淆为it’s，loose搞成lose或者将discrete弄成discreet。不要全部用大写，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。Alan Cox 也许可以这样做，但你不行。） 更白话的说，如果你写得像是个半文盲[译注：小白]，那多半得不到理睬。也不要使用即时通讯中的简写或火星文，如将的简化为ㄉ会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。 如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。 如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：[译注：以下附上原文以供使用] English is not my native language; please excuse typing errors. 英文不是我的母语，请原谅我的错字或语法 If you speak $LANGUAGE, please email/PM me;I may need assistance translating my question. 如果你说某语言，请寄信/私讯给我；我需要有人协助我翻译我的问题 I am familiar with the technical terms,but some slang expressions and idioms are difficult for me. 我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。 I’ve posted my question in $LANGUAGE and English.I’ll be glad to translate responses, if you only use one or the other. 我把我的问题用某语言和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。 使用易于读取且标准的文件格式发送问题 如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以： 使用纯文字而不是 HTML (关闭 HTML 并不难）。使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。但是，对一些特殊的文件不要设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。在英语论坛中，不要使用Quoted-Printable MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的=20符号既难看也分散注意力，甚至有可能破坏内容的语意。绝对，永远不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的智能引号功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉智能引号单选框），以免在你的邮件中到处散布垃圾字符。在论坛，勿滥用表情符号和HTML功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。 如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的查看源代码命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。 精确的描述问题并言之有物 仔细、清楚地描述你的问题或 Bug 的症状。描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：Fedora Core 4、Slackware 9.1等）。描述在提问前你是怎样去研究和理解这个问题的。描述在提问前为确定问题而采取的诊断步骤。描述最近做过什么可能相关的硬件或软件变更。尽可能的提供一个可以重现这个问题的可控环境的方法。 尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。 以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。 Simon Tatham 写过一篇名为《如何有效的报告 Bug》的出色文章。强力推荐你也读一读。 话不在多而在精 你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。 这样做的用处至少有三点。第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；第二，简化问题使你更有可能得到有用的答案；第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。 别动辄声称找到 Bug 当你在使用软件中遇到问题，除非你非常、非常的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的Bug，你应该能提供相应位置的修正或替代文件。 请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前已经做了这些，是吧？）。这也意味着很有可能是你弄错了而不是软件本身有问题。 编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有Bug时，这尤其严重。 提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是你做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。 低声下气不能代替你的功课 有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 – 低声下气：我知道我只是个可悲的新手，一个撸瑟，但…。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。 别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。 有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。 描述问题症状而非你的猜测 告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。 蠢问题 我在编译内核时接连遇到 SIG11 错误，我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？ 聪明问题 我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。所有内存都换过了，没有效果。相关部分的标准编译记录如下…。 由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：所有的诊断专家都来自密苏里州。 美国国务院的官方座右铭则是：让我看看（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！ 按发生时间先后列出问题症状 问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。 如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，多不等于好。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。 如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。 描述目标而不是过程 如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。 经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。 蠢问题 我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？ 聪明问题 我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。 第二种提问法比较聪明，你可能得到像是建议采用另一个更合适的工具的回复。 别要求使用私人电邮回复 黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。 当你要求私下回复时，这个过程和奖励都被中止。别这样做，让回复者来决定是否私下回答 – 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。 这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是向我发电邮，我将为论坛归纳这些回复。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 – 但你必须信守诺言。 清楚明确的表达你的问题以及需求 漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。 如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。 要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。 所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 – 但这技巧通常和简化问题有所区别。因此，问我想更好的理解 X，可否指点一下哪有好一点说明？通常比问你能解释一下 X 吗？更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。 询问有关代码的问题时 别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：它不能工作会让你完全被忽略。只贴几十行代码，然后说一句：在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;比较有可能让你得到回应。 最有效描述程序问题的方法是提供最精简的 Bug 展示测试示例（bug-demonstrating test case）。什么是最精简的测试示例？那是问题的缩影；一小个程序片段能刚好展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试示例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试示例越小越好（查看话不在多而在精一节）。 一般而言，要得到一段相当精简的测试示例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —- 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。 如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。 别把自己家庭作业的问题贴上来 黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由你来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。 如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的使用者邮件列表或论坛中提问。尽管黑客们会看出来，但一些有经验的使用者也许仍会给你一些提示。 去掉无意义的提问句 避免用无意义的话结束提问，例如有人能帮我吗？或者这有答案吗？。 首先：如果你对问题的描述不是很好，这样问更是画蛇添足。 其次：由于这样问是画蛇添足，黑客们会很厌烦你 – 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：没错，有人能帮你或者不，没答案。 一般来说，避免用 是或否、对或错、有或没有类型的问句，除非你想得到是或否类型的回答。 即使你很急也不要在标题写紧急 这是你的问题，不是我们的。宣称紧急极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，紧急这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 – 你希望能看到你问题的人可能永远也看不到。 有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。 当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如紧急：帮我救救这个毛绒绒的小海豹！肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。 如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。 礼多人不怪，而且有时还很有帮助 彬彬有礼，多用请和谢谢您的关注，或谢谢你的关照。让大家都知道你对他们花时间免费提供帮助心存感激。 坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的） 然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。 （我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得先谢了意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说先谢了，然后事后再对回复者表示感谢，或者换种方式表达感激，譬如用谢谢你的关注或谢谢你的关照。） 问题解决后，加个简短的补充说明 问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。 最理想的方式是向最初提问的话题回复此消息，并在标题中包含已修正，已解决或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串问题 X和问题 X - 已解决的潜在回复者就明白不用再浪费时间了（除非他个人觉得问题 X的有趣），因此可以利用此时间去解决其它问题。 补充说明不必很长或是很深入；简单的一句你好，原来是网线出了问题！谢谢大家 – Bill比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。 对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此之后才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。 除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。 至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。 思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。 在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。 如何解读答案 RTFM 和 STFW：如何知道你已完全搞砸了 有一个古老而神圣的传统：如果你收到RTFM （Read The Fucking Manual）的回应，回答者认为你应该去读他妈的手册。当然，基本上他是对的，你应该去读一读。 RTFM 有一个年轻的亲戚。如果你收到STFW（Search The Fucking Web）的回应，回答者认为你应该到他妈的网上搜索过了。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 Google 是你的朋友！） 在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。 通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为 你需要的信息非常容易获得；你自己去搜索这些信息比灌给你，能让你学到更多。 你不应该因此不爽；依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见。你应该对他祖母般的慈祥表示感谢。 如果还是搞不懂 如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。 比方说，如果我回答你：看来似乎是 zentry 卡住了；你应该先清除它。，然后，这是一个很糟的后续问题回应：zentry 是什么？ 好的问法应该是这样：哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？ 处理无礼的回应 很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。 如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这没有发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而你将被视为有错的一方，这将伤害到你获取信息或帮助的机会。 另一方面，你偶而真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。 （有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会正常交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们喜欢我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑。） Jeff Bigler 的观察总结和这个相关也值得一读 (tact filters)。 在下一节，我们会谈到另一个问题，当你行为不当时所会受到的冒犯。 如何避免扮演失败者 在黑客社区的论坛中有那么几次你可能会搞砸 – 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。 这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做： 熬过去，这很正常。事实上，它是有益健康且合理的。 社区的标准不会自行维持，它们是通过参与者积极而公开地执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。 也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称如果你不想帮助用户就闭嘴。 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。 夸张的讲法是：你要的是友善（以上述方式）还是有用？两个里面挑一个。 记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心你和他的社区而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。 有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是真的会把问题搞砸。 这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。 也别让自己卷入口水战，最好不要理睬大多数的口水战 – 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。 不该问的问题 以下是几个经典蠢问题，以及黑客没回答时心中所想的： 问题：我能在哪找到 X 程序或 X 资源？ 问题：我怎样用 X 做 Y？ 问题：如何设定我的 shell 提示？ 问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？ 问题：我的程序/设定/SQL 语句没有用 问题：我的 Windows 电脑有问题，你能帮我吗？ 问题：我的程序不会动了，我认为系统工具 X 有问题 问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？ 问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？ 问题：我能在哪找到 X 程序或 X 资源？ 回答：就在我找到它的地方啊，白痴 – 搜索引擎的那一头。天哪！难道还有人不会用 Google 吗？ 问题：我怎样用 X 做 Y？ 回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。 问题：如何设定我的 shell 提示？？ 回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM，然后自己去找出来。 问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？ 回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。 问题：我的{程序/设定/SQL 语句}不工作 回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 – 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种 你还有什么要补充的吗？真糟糕，希望你能搞定。这关我有什么屁事？ 问题：我的 Windows 电脑有问题，你能帮我吗？ 回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开放源代码操作系统吧。 注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你可以问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。 问题：我的程序不会动了，我认为系统工具 X 有问题 回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。 问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？ 回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在这儿找到使用者群组的清单）。 注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 Linux 和所有被怀疑的硬件作关键词仔细搜索。 问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？ 回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！ 好问题与蠢问题 最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。 蠢问题： 我可以在哪儿找到关于 Foonly Flurbamatic 的资料？ 这种问法无非想得到 STFW 这样的回答。 聪明问题： 我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？ 这个问题已经 STFW 过了，看起来他真的遇到了麻烦。 蠢问题 我从 foo 项目找来的源码没法编译。它怎么这么烂？ 他觉得都是别人的错，这个傲慢自大的提问者。 聪明问题 foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？ 提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。 蠢问题 我的主机板有问题了，谁来帮我？ 某黑客对这类问题的回答通常是：好的，还要帮你拍拍背和换尿布吗？，然后按下删除键。 聪明问题 我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？ 这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。 在最后一个问题中，注意告诉我答案和给我启示，指出我还应该做什么诊断工作之间微妙而又重要的区别。 事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。 通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。 事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的名人，而是因为我用了正确的方式来提问。 黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我像个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。 如果得不到回答 如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。 总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。 你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。 有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。 另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了– 完全可能如此 –你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。 对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开放源代码软件的要高得多，且内容也没那么丰富）。 如何更好地回答问题 态度和善一点。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。 对初犯者私下回复。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。 如果你不确定，一定要说出来！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。 如果帮不了忙，也别妨碍他。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 –有些可怜的呆瓜会把它当成真的指令。 试探性的反问以引出更多的细节。如果你做得好，提问者可以学到点东西 –你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。 尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。 如果你决定回答，就请给出好的答案。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（wordaround），应推荐更好的工具，重新界定问题。 正面的回答问题！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 试试看 A 或是 B 或者 试试 X 、 Y 、 Z 、 A 、 B 、 C 并附上一个链接一点用都没有。 帮助你的社区从问题中学习。当回复一个好问题时，问问自己如何修改相关文件或常见问题文件以免再次解答同样的问题？，接着再向文件维护者发一份补丁。 如果你是在研究一番后才做出的回答，展现你的技巧而不是直接端出结果。毕竟授人以鱼不如授人以渔。 相关资源 如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 Unix 系统和网络基本原理。 当你发布软件或补丁时，试着按软件发布实践操作。 鸣谢 Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写如何更好地回答问题这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Ask","slug":"Ask","permalink":"http://ipcreator.me/tags/Ask/"}]},{"title":"酷派集团：“五位一体”高效管理7000件专利申请","date":"2017-01-31T09:22:06.000Z","path":"2017/01/31/my-article-for-newspaper/","text":"文章下载 酷派集团：“五位一体”高效管理7000件专利申请 “非苹果，即酷派。”酷派集团董事长郭德英在去年世界互联网大会上的豪言壮语仍言犹在耳，这份自信不仅源于酷派集团雄厚的技术研发实力，还得益于其前瞻性的专利布局和高效的专利管理。 酷派集团在手机领域耕耘多年，掌握了手机领域的诸多核心技术，在智能手机技术研发、专利布局、产品创新和提升用户体验等方面积累了丰富的经验。 在持续开展专利布局的同时，如何对7000余件专利申请进行高效管理？酷派集团给出的答案是：通过实施“一把手工程”、打造“五位一体”专利布局体系和采用“开放式”的创新模式，制定了以“提升商业竞争力”为核心目标的知识产权战略，以此发挥专利的最大价值。 “一把手”的管理理念 郭德英是酷派集团的首席发明人，自2001年提交第一件专利申请开始，截至目前，他已提交了100多件专利申请。以郭德英为代表的公司领导对技术创新和专利布局的高度重视，并身体力行地践行着专利布局是“一把手工程”的发展理念，是酷派集团高效开展专利管理工作的关键。 “企业开展专利管理的基础是以自主创新能力作为支撑，并服务于公司战略发展需要，但关键因素是公司领导的高度重视和支持，而酷派集团实施的‘一把手工程’为我们开展专利管理工作提供了有力支撑。”酷派集团知识产权部经理汪智勇在接受中国知识产权报记者采访时表示。 “截至目前，酷派集团在全球范围内已提交了7000余件专利申请，其中90%以上是发明专利申请，内容涉及多模多待、双系统、UI交互、手机安全等方面。”汪智勇向本报记者介绍，目前，酷派集团已有1500余件专利申请获得授权，其中包括数十件涉及通信领域基础技术的基础专利和数百件提升酷派集团智能手机高端市场竞争力的核心专利。 得益于公司领导的高度重视，酷派集团很早就开展了专利管理工作，并确立了以“提升商业竞争力”为核心目标的知识产权战略。汪智勇介绍，酷派集团实施的知识产权战略包括3个方面，即立足研发、聚焦市场，知识产权工作要全方位嵌入公司的生产经营环节；建立完善的知识产权防御体系，支撑公司的经营战略，并提高公司开拓市场的自由度；降低知识产权风险，同时加强知识产权运营。 “五位一体”的专利布局 打造“体验、技术、产品、专利和标准”五位一体的专利布局体系是酷派集团专利管理工作的第二大特色，其核心思想为技术、产品、专利和标准都是以提升用户体验为出发点及落脚点，并相互融合促进。 汪智勇介绍，通过给业务部门设置专利考核指标等方式，酷派集团把专利布局嵌入到了产品生命周期的各个环节，以确保创新技术、产品能在第一时间得到全面的专利保护。 “五位一体”的专利布局体系为酷派集团高质量、全方位开展专利挖掘和布局工作奠定了基础。汪智勇介绍， “五位一体”中的体验是指日常生活中典型的用户场景或痛点；技术是指解决用户痛点、提升用户体验的创新技术，并在第一时间将其转化为产品，同时开展专利布局，并争取使其成为行业标准；产品是指产品立项和创新要以用户需求为中心，在遵循标准的基础上，结合用户对产品的反馈进一步开展技术创新和专利布局；专利是指以创新技术或产品为载体开展专利布局，并争取将其纳入到标准中，进而成为标准专利。 “通过加大技术创新力度，有效提高了专利质量。与此同时,在专利布局时开展的专利检索和数据分析也为产品创新开拓了新的视角。”汪智勇表示，通过实施“五位一体”的专利布局体系，酷派集团不仅提升了用户体验，而且还达到了体验、技术、产品、专利和标准“五位一体”的良好效果。 “开放式”的创新模式 对于不同的企业而言，其都会根据所在行业采取不同的专利管理策略。在汪智勇看来，专利管理工作要服务于公司的商业战略，并根据自身情况“量体裁衣”，这就需要企业专利管理人员结合移动互联网时代的新形势，提前做好应对和转型升级。 通常来说，传统企业的创新模式是封闭式的，企业的技术研发人员都是自主研发，而在移动互联网时代，企业的技术创新往往需要从外界获取大量创新资源，这就要求企业专利管理人员积极引导企业创新模式从“封闭式”逐渐转为“开放式”，比如企业可以与用户、供应商、科研院所、服务机构、行业协会，甚至竞争对手等相关部门建立协同创新机制。汪智勇向记者举例说，酷派集团每年有很多技术创新点源自高校合作项目或竞争对手的用户论坛等外部渠道。 在汪智勇看来， 企业专利管理人员要始终坚持“专利战略服务于商业战略”，因此，专利管理人员不仅要具有传统的技术思维和法律思维，还要具备相应的商业思维，比如使专利管理工作服务于产品宣传和品牌建设等。","comments":true,"categories":[{"name":"专利","slug":"专利","permalink":"http://ipcreator.me/categories/专利/"}],"tags":[{"name":"管理","slug":"管理","permalink":"http://ipcreator.me/tags/管理/"}]},{"title":"IPCreator专利清单","date":"2017-01-30T12:53:06.000Z","path":"2017/01/30/my-patent-list/","text":"检索方法1、打开专利检索网址大为；2、以“汪智勇”为关键字进行检索；3、在检索结果中，以申请（权利人）为“宇龙/Yulong” or “酷派/Coolpad”进行二次筛选便可得出结果。 备注 以下清单，基于2017.1.27日以前公开的专利库进行检索，未纳入未公开的相关专利申请（中国/PCT）。 专利清单 序号 公开号 专利名称 发明人 1 WO2013000123A1 PASTING METHOD AND TERMINAL THEREOF WANG ZHIYONG;YE BIQING;FENG YUHUI;LIU DONGHAI 2 WO2016106938A1 CONTACT-BASED SYSTEM SWITCHING METHOD AND APPARATUS AND TERMINAL LIU DONGHAI;WANG ZHIYONG 3 WO2016115760A1 TERMINAL SYSTEM CONTROL METHOD, DEVICE, AND TERMINAL LIU DONGHAI;WANG ZHIYONG 4 WO2016119288A1 DATA ACQUISITION METHOD, DATA ACQUISITION DEVICE AND TERMINAL XU XING;LIU DONGHAI;WANG ZHIYONG 5 WO2016173072A1 DATA INFORMATION PROCESSING METHOD, DATA INFORMATION PROCESSING DEVICE, AND TERMINAL ZHOU WEI;WANG ZHIYONG;PANG MIN 6 WO2016173075A1 SYSTEM SWITCHING METHOD AND DEVICE LIU DONGHAI;WU DIANQING;WANG ZHIYONG 7 WO2016192161A1 DATA PROCESSING METHOD AND DEVICE LIU DONGHAI;WANG ZHIYONG 8 WO2016192163A1 METHOD AND SYSTEM FOR REDUCING POWER CONSUMPTION OF MOBILE TERMINAL, AND MOBILE TERMINAL WU KEBIAO;WANG ZHIYONG 9 WO2017000341A1 INFORMATION PROCESSING METHOD, DEVICE, AND TERMINAL LIU DONGHAI;WANG ZHIYONG 10 WO2017000344A1 OPERATING METHOD AND TERMINAL BASED ON FINGERPRINT RECOGNITION LIU DONGHAI;WANG ZHIYONG 11 WO2017000354A1 FINGERPRINT PASSWORD VERIFICATION METHOD, SYSTEM, AND TERMINAL LIU DONGHAI;WANG ZHIYONG 序号 申请号 专利名称 发明人 1 CN201510344976.5 一种图像处理方法、装置及终端 吕楠;汪智勇;蒋罗 2 CN201510306351.X 一种用于降低移动终端功耗的方法和系统、以及移动终端 吴科标;汪智勇 3 CN201610567614.7 一种消息处理的方法及装置 吴殿清;汪智勇;闫娟;唐冬兰 4 CN201610565644.4 一种消息处理的方法及装置 吴殿清;汪智勇;闫娟;唐冬兰 5 CN2015082964 METHOD AND SYSTEM FOR REDUCING POWER CONSUMPTION OF MOBILE TERMINAL, AND MOBILE TERMINAL WU KEBIAO;WANG ZHIYONG 6 CN201610200631.7 一种指纹操作方法及终端设备 吴殿清;汪智勇;张娜;雷武 7 CN201610567587.3 一种消息处理的方法及装置 吴殿清;汪智勇;闫娟;唐冬兰 8 CN201610178390.0 基于智能水杯的信息调整方法、信息调整装置及智能水杯 吴殿清;汪智勇;闫娟;张娜 9 CN201610200353.5 一种多指纹混合登记的预警处理方法及移动终端 吴殿清;郭德英;汪智勇;张娜 10 CN201510236129.7 一种红外遥控方法及系统 吕楠;汪智勇;蒋罗 11 CN201510992251.7 一种应用程序下载安装方法及终端设备 刘东海;党乐;吴殿清;汪智勇 12 CN201610179140.9 用于智能水杯的控制方法、控制装置及智能水杯 吴殿清;汪智勇;闫娟;潘露杰 13 CN201610177989.2 用于智能水杯的控制方法、控制装置及智能水杯 涂欣;汪智勇;闫娟 14 CN201610184737.2 电梯控制方法、电梯控制装置和终端 梅各各;吴殿清;汪智勇;闫娟 15 CN201511019709.7 指纹识别的安全管理方法及装置、终端 刘东海;汪智勇 16 CN201610184821.4 通信处理方法及通信处理装置 潘晓;吴殿清;汪智勇;潘露杰 17 CN201610177915.9 基于智能水杯的信息调整方法、信息调整装置及智能水杯 吴殿清;汪智勇;闫娟;唐冬兰 18 CN201510369387.2 指纹密码的验证方法、系统和终端 刘东海;汪智勇 19 CN201510288979.1 虹膜信息采集方法、虹膜信息采集装置及终端 吕楠;蒋罗;汪智勇 20 CN201511018264.0 数据访问方法、数据访问系统和终端 刘东海;吴殿清;汪智勇 21 CN201510290387.3 水印嵌入方法、水印嵌入装置和终端 刘东海;汪智勇 22 CN201510458375.7 一种基于用户信息识别的设备控制方法及移动终端 刘东海;郭建军;李沙;吴殿清;汪智勇 23 CN201510460556.3 密码信息的验证方法、密码信息的验证系统和终端 刘东海;郭建军;吴殿清;汪智勇 24 CN201510615614.5 鉴权方法和终端 刘东海;汪智勇 25 CN201510374951.X 一种信息处理方法、装置以及终端 刘东海;汪智勇 26 CN201510374233.2 一种基于指纹识别的操作方法及终端 刘东海;汪智勇 27 CN201510282913.1 一种酒驾检测方法及终端、服务器 刘东海;汪智勇 28 CN201510456437.0 一种环境监控方法及用户终端 吴殿清;汪智勇;闫娟 29 CN201510734361.3 移动支付的监控方法、系统及智能终端 陈历伟;汪智勇 30 CN201510466796.4 指纹校验方法及装置 刘东海;郭建军;吴殿清;汪智勇 31 CN201510386218.X 一种数据处理方法及设备 刘东海;李仕伦;汪智勇 32 CN201510454769.5 一种室内环境监控方法及物联网终端 吴殿清;汪智勇;闫娟 33 CN201510854609.X 一种支付方法及其装置 陈历伟;汪智勇 34 CN201410464798.5 一种终端运行方法和装置 詹谷;黄焕荣;袁刚;汪智勇 35 CN201510848857.3 远程控制方法、远程控制装置、终端和远程控制系统 蒋罗;吕楠;汪智勇 36 CN201510623457.2 一种登录信息的配置方法、装置和移动终端 吴殿清;汪智勇;闫娟 37 CN201510618247.4 一种多系统间的应用安全保护方法及终端 刘东海;张碧君;汪智勇;吴殿清 38 CN201410303207.6 跨平台关联设备间的应用的安装方法及其系统 刘东海;汪智勇 39 CN201510615266.1 一种用户数据的保护方法及终端 刘东海;许奕波;吴殿清;汪智勇 40 CN201410195732.0 一种超级用户权限控制方法及装置 李仕伦;汪智勇;阳得常 41 CN201510611610.X 虹膜认证方法、虹膜认证装置及终端 梁文栋;黄习昌;闫娟;汪智勇 42 CN201410165760.8 一种安全驾驶的预警方法及系统 李仕伦;汪智勇;冯玉慧 43 CN201410066559.4 消息通知方法、消息通知装置、移动设备和消息通知系统 汪智勇;郭德英;郭建军;吴殿清;王文清 44 CN201510288853.4 一种数据处理方法和装置 刘东海;汪智勇 45 CN201510209238.X 一种系统切换方法和装置 刘东海;吴殿清;汪智勇 46 CN201510209832.9 数据信息处理方法、数据信息处理装置和终端 周威;汪智勇;庞敏 47 CN201510201478.5 系统切换方法、系统切换装置和终端 胡军杰;汪智勇 48 CN201410856593.1 多系统终端的系统切换方法、装置和终端 石爱民;汪智勇 49 CN201510054797.8 数据获取方法、数据获取装置和终端 许行;刘东海;汪智勇 50 CN201510044131.4 应用程序的运行控制方法、运行控制系统和终端 胡军杰;汪智勇 51 CN201410843159.X 基于联系人的系统切换方法及装置 刘东海;汪智勇 52 CN201410579593.1 丢失终端的管理方法及系统 刘东海;汪智勇;冯玉慧;叶必清;李仕伦 53 CN201510026623.0 一种终端系统的控制方法、装置和终端 刘东海;汪智勇 54 CN201410719656.9 一种汽车监控方法及系统 刘东海;汪智勇 55 CN201410453522.7 一种低电量提示方法、装置及终端设备 詹谷;黄焕荣;卓优;汪智勇 56 CN201410301262.1 一种基于虚拟键盘的文字输入方法及装置 林荣辉;汪智勇;陈运哲;战磊 57 CN201410204656.5 信息同步系统和信息同步方法 叶必清;汪智勇 58 CN201410056902.7 数据保护系统及方法 汪智勇;王正泽;王旭;郭德英;邓小英 59 CN201410099365.4 一种智能输入法切换方法及装置 叶必清;汪智勇 60 CN201410042322.2 一种终端及防止敏感信息泄露的方法 陈祥;汪智勇 61 CN201310625749.0 一种文件的传输方法及装置 李仕伦;汪智勇;叶必清 62 CN201310530882.8 商品信息的处理方法及装置 汪智勇;李俊;邓小英 63 CN201110451257.5 一种图片下载的方法、移动终端及服务器 冯玉慧;汪智勇;叶必清 64 CN201210527902.1 一种应用协同方法及移动终端 汪智勇;王文清;王正泽 65 CN2011076513 PASTING METHOD AND TERMINAL THEREOF WANG ZHIYONG;YE BIQING;FENG YUHUI;LIU DONGHAI 66 CN201110384354.7 一种应用程序安全预判装置及方法 汪智勇;朱宗伟;王新颖;冯玉慧 67 CN201110291506.9 终端和数据处理方法 罗彪;汪智勇;冯玉慧 68 CN201110283313.9 一种通信信息提醒方法、系统及移动终端 叶必清;廖迴敏;冯玉慧;汪智勇;刘东海;王新颖 69 CN201110301688.3 一种对数据进行操作的方法及移动终端 汪智勇;叶必清;冯玉慧 70 CN201110304416.9 一种应用程序的显示及分类方法、系统及移动终端 汪智勇;李自来;廖迴敏;冯玉慧 71 CN201110295666.0 好友搜索方法、设备和系统 冯玉慧;廖迴敏;王新颖;汪智勇 72 CN201110204888.7 应用程序管理方法和终端 汪智勇;叶必清;冯玉慧;刘东海;王新颖;张开营;廖迴敏 73 CN201110215246.7 终端和文件保存方法 汪智勇;冯玉慧;王新颖;廖迴敏 74 CN201110174335.1 应用程序管理装置和应用程序管理方法 汪智勇;叶必清;冯玉慧;刘东海 75 CN201110090127.3 一种应用程序访问权限设置方法、系统及移动终端 汪智勇;冯玉慧;李仕伦 76 CN201110084844.5 应用程序安装方法和终端 汪智勇;刘东海;冯玉慧 77 CN201110086742.7 手机应用分类管理方法及装置 冯玉慧;汪智勇 78 CN201110037376.6 一种应用程序监控方法及装置 汪智勇;叶必清;冯玉慧 79 CN201010624198.2 智能呈现联系人相关信息的方法、系统及移动终端 汪智勇;叶必清;冯玉慧;王志标;王玮;刘东海;李仕伦 80 CN201110044252.0 一种移动终端内应用程序的升级方法、移动终端及服务器 汪智勇;刘东海;冯玉慧 81 CN201110031882.4 一种基于android平台应用安装控制方法及系统 汪智勇;叶必清;冯玉慧 82 CN201010589186.0 信息处理方法及装置 叶必清;汪智勇;冯玉慧 83 CN201010596846.8 基于Android的应用程序升级方法、系统及应用开发平台 汪智勇;冯玉慧;刘东海;李仕伦;王玮;叶必清 84 CN201010598458.3 移动终端中应用运行条件的评估方法及装置、移动终端 汪智勇;冯玉慧;叶必清 85 CN201010523146.6 一种应用协同的操作方法、系统及移动终端 汪智勇;冯玉慧 86 CN201010578230.8 应用程序管理方法、装置以及终端 汪智勇;冯玉慧 87 CN201010508288.5 一种联系人菜单智能生成的方法、系统及移动终端 汪智勇;冯玉慧;孟宪衡;邱圣华 88 CN201020532495.X 一种触摸式移动终端 王灿;汪智勇;冯玉慧 89 CN201010531736.3 控制应用程序并行运行的方法、装置及具有该装置的终端 汪智勇;冯玉慧 90 CN201010286512.0 实现移动终端的一号多卡的方法和系统 邱圣华;张碧君;汪智勇;冯玉慧;孟宪衡;张毓华 91 CN201010282444.0 联系人分组方法及终端 汪智勇;冯玉慧;邱圣华;孟宪衡 92 CN201010270503.2 一种应用程序使用状态的提醒方法、系统及移动终端 汪智勇;冯玉慧 93 CN200910041406.3 一种终端功能协同方法及对应的终端 郭和平;汪智勇 94 CN200910040535.0 一种数据排序的方法及移动通信终端 汪智勇 95 CN200910038390.0 数据协同的方法、终端及系统 汪智勇 96 CN200810198086.8 一种终端监控方法、装置及系统 杨鹏辉;汪智勇 97 CN200810026989.8 一种信息显示方法、主机端及子机端 杨鹏辉;汪智勇","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"专利","slug":"专利","permalink":"http://ipcreator.me/tags/专利/"}]},{"title":"IPCreator简历","date":"2017-01-29T11:37:06.000Z","path":"2017/01/29/my-resume/","text":"“合适的才是最好的” 联系方式 手机：13652311447 Email：ipcreator@yeah.net 个人信息 男/1984 研究生专业：中南大学/计算机应用技术 英语：国家六级 技术：高级程序员 个人博客：http://ipcreator.me 行业博客：http://blog.163.com/zhuxuanlv@126/ 工作经历宇龙酷派 （2012年8月 ~ 2016年6月） 职位：知识产权部经理职责：团队/制度流程建设、专利布局、奖项申报、专利诉讼等。 示范企业及专利奖项申报承担项目经理职责，全程组织申报材料的撰写、递送及答辩，2015年荣获深圳市专利奖并成功申报国家知识产权示范企业，带领团队连续三年获得中国专利优秀奖（十六届、十七届和十八届）。 公司级布局项目制定和落实集团专利储备战略，构建“沙漠寻路/三步六法”专利布局体系及配套制度/流程/模板，作为第一负责人，主导完成公司级布局项目10+个，均受到公司高层的充分肯定和专项表彰，其中，“体验、技术、产品、专利和标准”五位一体布局体系在中国知识产权报上发表和推广。 其他项目作为集团第一个欧洲项目的知识产权代表，建立了海外知识产权风险防控体系，创建了中国/美国/欧洲律所资源池，制定了公司律所招标流程/专利诉讼处理流程及配套模板；主导处理了集团在美国的第一个专利诉讼，并以最低代价胜诉结案；主导处理了集团在中国的第一个大额专利诉讼案件，包括无效请求和不侵权分析，最后以涉案专利被成功无效，原告主动撤诉大获全胜；作为公司专利运营项目第一负责人， 制定并推行专利运营流程及配套模板，创建国内外专利运营资源池， 并主导专利组合评估相关工作。 宇龙酷派 （ 2007年7月 ~ 2012年8月 ） 职位：开发工程师/软件项目经理职责：软件开发、项目管理、团队建设等。 F608/F603项目担任软件项目经理，负责F608/F603移动TD畅销机型的软件业务，先后荣获最佳产品质量奖，最佳项目团队奖，杰出贡献奖，参加软件项目经理手册、软件质量过程监控等流程及知识库建设，荣获知识库建设之星1次， 过程改进奖4次。 软件开发担任开发工程师，负责多个核心系统模块和应用的开发，其中，联系人应用在第三方组织的用户调查中荣获最高评分，个人先后获得最佳代码质量奖，最佳应用奖，最佳设计文档等奖项，并多次被评为天道酬勤之星。 其他项目负责运营商业务小组，培养出多名项目经理和高级工程师，荣获最佳导师称号，团队共通过国内外专利申请100+篇(专利清单)。 致谢感谢您花时间阅读我的简历，期待能有机会和您共事。","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"简历","slug":"简历","permalink":"http://ipcreator.me/tags/简历/"}]},{"title":"欢迎访问我的个人博客","date":"2017-01-29T11:37:06.000Z","path":"2017/01/29/hello-world/","text":"IPCreator = IP + Creator 网易中文博客 创新不难、专利有趣学以致用、知行合一自知者明、自胜者强不忘初心、方得始终 明代杨慎《临江仙》 滚滚长江东逝水，浪花淘尽英雄。是非成败转头空。青山依旧在，几度夕阳红。白发渔樵江渚上，惯看秋月春风。一壶浊酒喜相逢。古今多少事，都付笑谈中。 明代唐伯虎：《桃花庵歌》 桃花坞里桃明代花庵，桃花庵里桃花仙；桃花仙人种桃树，又摘桃花换酒钱。酒醒只在花间坐，酒醉还来花下眠；半醒半醉日复日，花开花落年复年。但愿老死花酒间，不愿鞠躬车马前；车尘马足贵者趣，酒盏花枝贫者缘。若将贫贱比贫者，一在平地一在天；若将贫贱比车马，他得驱驰我得闲。别人笑我太疯癫，我笑他人看不穿；不见五陵豪杰墓，无花无酒锄作田。","comments":true,"categories":[{"name":"个人","slug":"个人","permalink":"http://ipcreator.me/categories/个人/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://ipcreator.me/tags/博客/"}]},{"title":"Echarts Demo3","date":"2017-01-10T00:51:44.000Z","path":"2017/01/10/echarts-demo3/","text":"直接通过调用js脚本实现 var xAxisData = []; var data1 = []; var data2 = []; for (var i = 0; i < 100; i++) { xAxisData.push(i); data1.push((Math.sin(i / 5) * (i / 5 -10) + i / 6) * 5); data2.push((Math.cos(i / 5) * (i / 5 -10) + i / 6) * 5); } // 基于准备好的dom，初始化echarts实例 var myChart = echarts.init(document.getElementById('echarts9202')); // 指定图表的配置项和数据 var option = option = { title: { text: '' }, legend: { data: ['input', 'output'], align: 'left' }, toolbox: { // y: 'bottom', feature: { magicType: { type: ['stack', 'tiled'] } } }, tooltip: {}, xAxis: { data: xAxisData, silent: false, splitLine: { show: false } }, yAxis: { }, series: [{ name: 'input', type: 'bar', data: data1, animationDelay: function (idx) { return idx * 10; } }, { name: 'output', type: 'bar', data: data2, animationDelay: function (idx) { return idx * 10 + 1000; } }], animationEasing: 'elasticOut', animationDelayUpdate: function (idx) { return idx * 5; } }; // 使用刚指定的配置项和数据显示图表。 myChart.setOption(option); 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;script type=\"text/javascript\"&gt;var xAxisData = [];var data1 = [];var data2 = [];for (var i = 0; i &lt; 100; i++) &#123; xAxisData.push(i); data1.push((Math.sin(i / 5) * (i / 5 -10) + i / 6) * 5); data2.push((Math.cos(i / 5) * (i / 5 -10) + i / 6) * 5);&#125;&lt;/script&gt;&lt;div id=\"echarts9202\" style=\"width: 100%;height: 250px;margin: 0 auto\"&gt;&lt;/div&gt;&lt;script src=\"http://echarts.baidu.com/dist/echarts.common.min.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; // 基于准备好的dom，初始化echarts实例 var myChart = echarts.init(document.getElementById('echarts9202')); // 指定图表的配置项和数据 var option = option = &#123; title: &#123; text: '' &#125;, legend: &#123; data: ['input', 'output'], align: 'left' &#125;, toolbox: &#123; // y: 'bottom', feature: &#123; magicType: &#123; type: ['stack', 'tiled'] &#125; &#125; &#125;, tooltip: &#123;&#125;, xAxis: &#123; data: xAxisData, silent: false, splitLine: &#123; show: false &#125; &#125;, yAxis: &#123; &#125;, series: [&#123; name: 'input', type: 'bar', data: data1, animationDelay: function (idx) &#123; return idx * 10; &#125; &#125;, &#123; name: 'output', type: 'bar', data: data2, animationDelay: function (idx) &#123; return idx * 10 + 1000; &#125; &#125;], animationEasing: 'elasticOut', animationDelayUpdate: function (idx) &#123; return idx * 5; &#125;&#125;; // 使用刚指定的配置项和数据显示图表。 myChart.setOption(option);&lt;/script&gt;","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Echarts","slug":"Echarts","permalink":"http://ipcreator.me/tags/Echarts/"}]},{"title":"Echarts Demo2","date":"2016-12-30T12:51:44.000Z","path":"2016/12/30/echarts-demo2/","text":"通过ECharts 插件直接运行增加标题信息 // 基于准备好的dom，初始化echarts实例 var myChart = echarts.init(document.getElementById('echarts7477')); // 指定图表的配置项和数据 var option = { title: { text: '男性女性身高体重分布', subtext: 'data from PM25.in', sublink: 'http://www.pm25.in', x:'center', textStyle: { color: '#fff' } }, tooltip: { trigger: \"axis\", showDelay: 0, axisPointer: { type: \"cross\", lineStyle: { type: \"dashed\", width: 1 } } }, legend: { bottom: 5, data: [\"女性\", \"男性\"] }, toolbox: { show: true, feature: { mark: { show: true }, dataZoom: { show: true } } }, xAxis: [ { type: \"value\", power: 1, precision: 2, scale: true } ], yAxis: [ { type: \"value\", power: 1, precision: 2, scale: true } ], series: [ { name: \"女性\", type: \"scatter\", data: [[161.2, 51.6], [172.9, 62.5], [153.4, 42], [160, 50], [147.2, 49.8], [168.2, 49.2], [175, 73.2], [157, 47.8], [167.6, 68.8], [159.5, 50.6], [175, 82.5], [166.8, 57.2], [176.5, 87.8], [170.2, 72.8], [174, 54.5], [173, 59.8], [179.9, 67.3], [170.5, 67.8], [162.6, 61.4]] }, { name: \"男性\", type: \"scatter\", data: [[174, 65.6], [164.1, 55.2], [163, 57], [171.5, 61.4], [184.2, 76.8], [174, 86.8], [182, 72], [167, 64.6], [177.8, 74.8], [180.3, 93.2], [180.3, 82.7], [177.8, 58], [177.8, 79.5], [177.8, 78.6], [177.8, 71.8], [177.8, 72], [177.8, 81.8], [180.3, 83.2]] } ] }; // 使用刚指定的配置项和数据显示图表。 myChart.setOption(option); 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&#123;% echarts 400 '85%' %&#125;&#123; title: &#123; text: '男性女性身高体重分布', subtext: 'data from PM25.in', sublink: 'http://www.pm25.in', x:'center', textStyle: &#123; color: '#fff' &#125; &#125;, tooltip: &#123; trigger: \"axis\", showDelay: 0, axisPointer: &#123; type: \"cross\", lineStyle: &#123; type: \"dashed\", width: 1 &#125; &#125; &#125;, legend: &#123; bottom: 5, data: [\"女性\", \"男性\"] &#125;, toolbox: &#123; show: true, feature: &#123; mark: &#123; show: true &#125;, dataZoom: &#123; show: true &#125; &#125; &#125;, xAxis: [ &#123; type: \"value\", power: 1, precision: 2, scale: true &#125; ], yAxis: [ &#123; type: \"value\", power: 1, precision: 2, scale: true &#125; ], series: [ &#123; name: \"女性\", type: \"scatter\", data: [[161.2, 51.6], [172.9, 62.5], [153.4, 42], [160, 50], [147.2, 49.8], [168.2, 49.2], [175, 73.2], [157, 47.8], [167.6, 68.8], [159.5, 50.6], [175, 82.5], [166.8, 57.2], [176.5, 87.8], [170.2, 72.8], [174, 54.5], [173, 59.8], [179.9, 67.3], [170.5, 67.8], [162.6, 61.4]] &#125;, &#123; name: \"男性\", type: \"scatter\", data: [[174, 65.6], [164.1, 55.2], [163, 57], [171.5, 61.4], [184.2, 76.8], [174, 86.8], [182, 72], [167, 64.6], [177.8, 74.8], [180.3, 93.2], [180.3, 82.7], [177.8, 58], [177.8, 79.5], [177.8, 78.6], [177.8, 71.8], [177.8, 72], [177.8, 81.8], [180.3, 83.2]] &#125; ] &#125;;&#123;% endecharts %&#125;","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Echarts","slug":"Echarts","permalink":"http://ipcreator.me/tags/Echarts/"}]},{"title":"Echarts Demo","date":"2016-12-29T12:51:44.000Z","path":"2016/12/29/echarts-demo/","text":"通过ECharts 插件直接运行 123&#123;% echarts 400 '85%' %&#125;\\\\TODO option goes here&#123;% endecharts %&#125; // 基于准备好的dom，初始化echarts实例 var myChart = echarts.init(document.getElementById('echarts283')); // 指定图表的配置项和数据 var option = { tooltip : { trigger: 'axis', axisPointer : { // 坐标轴指示器，坐标轴触发有效 type : 'shadow' // 默认为直线，可选为：'line' | 'shadow' } }, legend: { data:['利润', '支出', '收入'] }, grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true }, xAxis : [ { type : 'value' } ], yAxis : [ { type : 'category', axisTick : {show: false}, data : ['周一','周二','周三','周四','周五','周六','周日'] } ], series : [ { name:'利润', type:'bar', itemStyle : { normal: { label: {show: true, position: 'inside'} } }, data:[200, 170, 240, 244, 200, 220, 210] }, { name:'收入', type:'bar', stack: '总量', itemStyle: { normal: { label : {show: true} } }, data:[320, 302, 341, 374, 390, 450, 420] }, { name:'支出', type:'bar', stack: '总量', itemStyle: {normal: { label : {show: true, position: 'left'} }}, data:[-120, -132, -101, -134, -190, -230, -210] } ] }; // 使用刚指定的配置项和数据显示图表。 myChart.setOption(option);","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"Echarts","slug":"Echarts","permalink":"http://ipcreator.me/tags/Echarts/"}]},{"title":"浏览器野史 UserAgent列传（下）","date":"2014-10-05T09:26:00.000Z","path":"2014/10/05/zh-history-of-browser-useragent2/","text":"作者：Litten 前篇《浏览器野史 UserAgent列传（上）》 六、师夷长技前面说到，微软靠Windows系统捆绑IE销售。而Windows自然也有它的对手，Linux。一个技术快速发展的时代，系统的世界里也是战火纷飞。Linux系统自从有了可视化界面，也需要浏览器呀。桌面系统KDE的缔造者们就发明了一个。 真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？但大神就是大神，大神就是讲究先从文字上占据压垮你的气势。先有Navigator航海家，再有Explorer探索者，咱就叫Konqueror(Conqueror的变体)征服者吧。行行行。我已懒得理这帮大神… 可是，问题来了。Konqueror使用KHTML排版引擎，即使它们认为自己跟Gecko引擎一样优秀，但用户不买单。你UserAgent里没有“Gecko”字样，我就不给你经过优良排版的html。结果，Konqueror思来想去，做了一个艰难但很萌的决定，把UserAgent写成Mozilla/5.0 (compatible; Konqueror/3.2; FreeBSD) (KHTML, like Gecko)…这就是现代浏览器里like Gecko这一萌词的由来。 就这样，伟大的排版引擎KHTML为了获得更好的资源，师夷长技。这并没什么不好，却造成了UserAgent的越发混乱。KHTML与Gecko这一对，永远卿卿我我比翼双飞在UserAgent里面了。那个满含深意的“like”，有人觉得翻译成“像”，但也有人觉得应该是“喜欢”… 七、世界大战首先是IE冷静下来了，他觉得，你们不带这么玩的？就我年少时不懂事，首先改了个Mozilla字样，后面追究这历史我岂不是成了罪魁祸首？我改还不行吗？在IE6，它明确自己UserAgent为Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0)。除去已经注定不可抹去的“Mozilla”字样，其余信息简洁，准确，清晰。 但事态已经不可收拾。 Opera给这狂躁的世界添了一把火。它觉得，易容术非常炫酷呀。Opera直接在菜单提供了Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.51，Mozilla/5.0 (Windows NT 6.0; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.51，Opera/9.51 (Windows NT 5.1; U; en)三个选择项。第一个是易容成IE，第二个是易容成火狐，第三个才是自己，选谁就是谁！ 其实这并不是一件坏事。因为Opera是站在能够让用户通过选择，去获得更好的浏览体验的基础上的。你提供选择，或是不提供，混乱的UserAgent还是在这，不离，不弃。再者，这对网页的开发者有极大的好处，在某些情况，你不必同时打开几个不同的浏览器去调试。到目前，最新的Chrome浏览器更加炫酷，能够支持近40种不同的UserAgent，甚至你还可以自定义。当然这是后话。 与此同时，苹果公司依靠内核WebKit，开发出Safari，命名UserAgent为Mozilla/5.0 (Macintosh; U; PPC Mac OS X; de-de) AppleWebKit/85.7 (KHTML, like Gecko) Safari/85.5。 有人就会问了，不是Webkit内核吗，怎么还有KHTML, like Gecko？注意，内核Webkit包含了一个排版引擎叫WebCore，而WebCore是KHTML衍生而来的。也就是说，WebCore是KHTML的儿子，子承父业，基因差不多。为了能够正常排版，safari只能这么写。 后来，google也开发了自己的浏览器Chrome，其内核也是Webkit，但它设定UserAgent为Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13。Safari一看，不对劲啊！你怎么也在后面写有Safari？Chrome呵呵一笑，你懂的。 因此，请让我一口气说完下面这一段：Chrome希望能得到为Safari编写的网页，于是决定装成Safari，Safari使用了WebKit渲染引擎，而WebKit呢又伪装自己是KHTML，KHTML呢又是伪装成Gecko的。同时所有的浏览器又都宣称自己是Mozilla。 这就是整个UserAgent世界大战的格局… 八、军阀混战将目光聚焦到国内，更是狼烟四起，混乱不堪。大家都知道，浏览器是互联网的入口，这块肥肉谁也不想丢。因而一个接一个的“国产”浏览器进入斗兽场。360，百度，QQ，UC，搜狗，猎豹，遨游，世界之窗…你能说出一大堆。连淘宝，酷狗，hao123都有浏览器，不信你搜。注意我前面“国产”两个字必须加上双引号，因为这个made in china并不纯。国人并没能像远古大神一样，硬生生发明一个内核出来，我们更擅长“微创新”。 利用Trident（IE的内核），包装一下皮肤，美化一下，就可以说：完美兼容利用Webkit，包装一下皮肤，美化一下，就可以说：极速浏览把两个内核都包起来，就可以说：智能双核 是微创新！读书人的事，能叫偷吗？ 在这插播一下，浏览器的“双核”，并不是你听说手机双核电脑双核那回事。再多个核，速度也不会更快，当然这么说，会显得很厉害的样子。德艺双馨，智勇双全，名利双收，才貌双绝，夫妻双双把家还，你看带“双”字的词都很牛的。 但我上面的叙述，的确有夸张的成分。浏览器的诞生，肯定不仅仅是包一下皮肤那么简单，国内的工程师们，也苦心研究做了许多工作。如果要说优化策略，我可以再写一篇超级长的文章。优化无止境，路漫漫其修远，向同行们致敬。只是我非常讨厌那些不把事实说清楚，纯粹靠文案去忽悠人的产品… 话说回来，这么多国产浏览器，总得靠不同UserAgent标志自己呀。大家自动分为两个阵营：使用Trident内核的，在IE已有UserAgent后添加自己的名称；使用Webkit内核的，就在Chrome的UserAgent后面添加。 前者像QQ浏览器：Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.7.26717.400)。后者像猎豹：Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.137 Safari/537.36 LBBROWSER。当然双核浏览器诚然就是墙头草，切换内核时UserAgent也需要跟着变化。 如此的混战格局，这厢的IE和Chome想必也是醉了。 九、国共内战适者生存是不变的生存法则，国产浏览器们经过一段时间的用户筛选，自然优胜劣汰。时值2010年，真正还在运营和更新的浏览器数量慢慢下降，用户集中在几家表现更优异的厂商手中。就在这时，好看的故事来了——3Q大战爆发。 有人说，腾讯电脑管家的推出是导火索。其实这场仗，大家都忍了好久，推不推出，都一定会在某个事件后爆发。360浏览器是奇虎的重量级产品，用户量众多，2009年它推出一个功能：过滤其它网站的广告。诚然民众们都很喜欢。可是其他互联网公司肯定就不乐意了，用户看不到更点击不到广告，这钱还怎么赚？ 因而在3Q大战爆发后，腾讯的一个手段就是：如果你使用360浏览器，就不能访问QQ的网站（单单QQ空间就有巨大的用户量），也直接反攻360的最大收入来源。一个艰难的决定背后，往往是需要无数种的技术战略支撑的。企鹅判断用户是否使用360浏览器，依靠的就是UserAgent里是否有“360SE”的字样。 战报传来：号外，360浏览器上不了QQ空间！已经买了黄钻的杀马特贵族急了呀！只能换浏览器了呀！感覺侢乜卟哙噯嘞呀！2011年11月3日，腾讯网站封杀360浏览器2011年11月4日，360浏览器访问量仅为昨日一半2011年11月5日，360浏览器访问量几乎为0 有人说，腾讯就这么快赢了？恰恰相反，360浏览器通过一次强制的自动升级，又可以访问QQ的网站了。360的工程师们在5日使用了伪装术——把“360SE”字样从UserAgent中去掉！意思就是，360浏览器的UserAgent跟IE完全一样，你根本判断不出来（因而访问量为0）。就怕流氓有文化！企鹅傻眼了，总不能把大微软的IE也一并给禁了吧… 这场土匪遇恶霸的耍流氓大战，最终通过法律而化解。企鹅在技术侧拿360没办法，而360则得到了一个跟IE一样的身份证。在这场内战中，受伤的除了广大网民们，其实还有令人心疼UserAgent君，以往让它越长越长就算了，这次长了还得阉割掉，真心dan疼呀。 十、明日边缘看到这里，大家会明白一个道理：如果未来不出现一款霸主级别的浏览器（或内核），UserAgent应该不会有大变化了。不过，这道理并不全对。别忘了，移动侧也是有浏览器的。在早期能上网的手机里，内置了各手机厂商自研的浏览器。这些浏览器并不需要像PC一样的复杂设计，可以访问wap网页就足够了。因而它们的UserAgent命名，怎么简单怎么来，就直接叫诺基亚 3100 Nokia3100/06.01 (UCWEB 3.3B)，PHILIPS755 ObigoInternetBrowser/2.0 这样，有甚者连浏览器叫什么都不带 TCL-3199，三星 E618 SEC-SGHE618。 这样任由发展下去，一种要历史重演，往日重现的即视感压迫而来。web世界的联合国——W3C组织，站在明日边缘，面对着历史和未来，终于发话，它制定UserAgent标准，以后都得按这规范去起名字。详细请阅User Agent Accessibility Guidelines。至此，命运坎坷的UserAgent终于逐步走向规范。W3C大法好，有人说你怎么不早点来拯救世界呀！其实W3C一直在努力，但规范的制定，到推广至大家认可并执行，是一条漫长的道路，需要时间，也需要实践。W3C组织，在制定web标准这件工作之外，再我看来，还有两个身份：1、和事佬；2、背黑锅。和事不成，就得背黑锅。是的就是这样。 彩蛋那么，我们的故事接近尾声。还有一些有趣的小彩蛋。 Chome 28开始，与苹果正式分道扬镳，采用Blink内核，但它的UserAgent并不改变。 淘宝封杀微信打开淘宝页面，靠的就是微信内置浏览器UserAgent里的MicroMessenger字样。其实微信也可以像当初360一样把UserAgent去掉，但微信并不这样做。 360出招之时留有后招。也许，它一开始就想到了腾讯会告他们对于UserAgent的欺瞒，因而它其实提供了设置项。默认设置是“保持跟IE一样的UserAgent”，但用户也可以不勾选。只是这选项比较隐蔽，而且你重启浏览器后…又会变回默认设置。如果没有这个小小的设置，结果大家可以自行想象。 微软又玩新花样了，在泄露版IE 11中，去掉了以往的MSIE字样。初步猜测此举是为了使现有的 CSS hack 失效，避免过去网页设计师对IE差别对待的情况再度发生。但又会引发其他问题啊亲。 End.Litten 2014.10.5","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"http://ipcreator.me/tags/web/"},{"name":"浏览器","slug":"浏览器","permalink":"http://ipcreator.me/tags/浏览器/"}]},{"title":"浏览器野史 UserAgent列传（上）","date":"2014-09-26T03:26:00.000Z","path":"2014/09/26/zh-history-of-browser-useragent/","text":"作者：Litten 某天，我做一个小项目，需要判断一下浏览器类型。简单的呀。控制台敲下：navigator.userAgent浏览器回应：Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36 天，这串是啥？你怎么连话都说不清楚？ 我对userAgent并不陌生，但明明一个单词就可以说清楚的事情，却是这么掏心掏肺的回答。怪可怜的，一定有冤情。 后来我查阅了很多资料，发现历史非常的精彩。 大事年表 1990年: Nexus(WorldWideWeb)诞生 1993年1月23日：Mosaic诞生 1994年12月：Netscape(Mozilla)诞生 1995年4月：Opera诞生 1995年8月16日：Internet Explorer诞生 2002年9月23日：Firefox诞生 2003年1月7日：Safari诞生 2008年9月2日：Chrome诞生 一、盘古开天地很久很久之前，上古大神Berners-Lee发明了WorldWideWeb，即万维网。同时，李大神也发明了第一款浏览器。真是具有跨时代意义的工具呀，好伟大呀，人们在想，叫什么好呢？但大神就是大神，大神内心的想法又岂是尔等凡人能够肆意揣摩？ 万万没想到，李大神说，我这浏览器，也叫WorldWideWeb！不行么？行行行。 虽然李大神起名字这么拽，但他后来发觉，还是得赋予一点承上启下的历史意义，就改名成“Nexus”。值得注意的是，这浏览器，居然是可以兼容Unix跟Microsoft DOS的。它在当时流行的各种电脑上跑得飞起，应用也越来越广，被称为“杀手级应用”。杀手级…你们看互联网一开始就是这么的腥风血雨。 但这个浏览器，还不支持图片的显示，这是出现UserAgent的导火索。 二、唐尧虞舜93年，伊利诺大学的NCSA组织认为，浏览器无图无真相，这不好。因而他们发明了第一款可显示图片的浏览器。真是具有跨时代意义的工具呀，好伟大呀，人们在想，叫什么好呢？但大神就是大神，大神就是连起名字都让你惊心动魄。 NCSA组织说，它能显示图片，偏偏我们就要叫它“马赛克(Mosaic)”！不行么？行行行。 但有人就问了，Nexus不显示图片，Mosaic能显示，你们让html提供者怎么写代码？你们是不是想逼死选择困难症患者？有没有考虑过天秤座的感受？ 因而UserAgent就诞生了。Mosaic将自己标志为NCSA_Mosaic/2.0 (Windows 3.1)，大家该怎么写代码就怎么写，但请求会带上这个信息，服务器就知道该不该返回能显示图片的html。UserAgent君，出生时跟我们设想的一样简单，仅仅标明了自己是什么浏览器，在什么系统运行，以及各自的版本号。 新旧浏览器们像彬彬有礼的君王，商议和让位是为了更好的繁荣。但风雨欲来。 三、楚汉争霸像刘邦一样，走出来一个搅局的小流氓。当然他还是很有志向的，他的目标，就是战胜霸主Mosaic。后来，他还真的做到了。如今，所有现代浏览器的UserAgent里都有它的标志，就像汉朝之后，我们都称为“汉”人。一群很有天赋的程序员，一起缔造了它的辉煌。 真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？但大神就是大神，大神就是让你永远也猜不到他们想了个什么名字。大神们说，叫Mozilla，不行么？行。但什么意思呢？ 含义有二。其一，哥斯拉(Godzilla)谐音，诚然是一头野心勃勃的怪兽；其二，”Mosaic Killa”之意，Killa是俚语中Killer的拼法，即“马赛克的终结者”，赤裸裸的挑战。 惊呆了的Mosaic小心翼翼的念着Mozilla这发音：“Mo…摸咋了？”勃然大怒，“摸你妹！” 鉴于Mosaic当时的权势，Mozilla改名成Netscape Navigator(网景航海家)。小怪兽突然变成有点文艺小清新的名字，郁闷得很，但内心的血液沸腾着。虽然叫大名叫网景，但它把UserAgent偷偷设置成Mozilla/1.0 (Win3.1)。还是摸咋了？咬我？ 四、宋元之战很快，NetScape战胜了Mosaic，成为了新的霸主，因为其更优的展示。NetScape最先支持了html框架显示，就是简单的table布局，内外边距之类，仅仅这点就将Mosaic抛诸身后。区别这两个浏览器，还是用的UserAgent。如果是UserAgent里含有“Mozilla”字样，那就发送支持框架的页面，否则，就发送不含框架的页面。 NetScape帝国日益庞大，歌舞升平，一切风平浪静，直到微软的铁骑挥军南下。 微软发布了一款跟系统强绑定的浏览器，真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？不用想了，就是IE。这命名也相当简单粗暴，Internet Explorer，直接把这工具的用途拍在你脸上。连说明书都可以免了。 IE也是支持html标准框架的，但由于前面的历史原因，人们只会给UserAgent里含有“Mozilla”字样的浏览器发送含框架的页面。但这点小事能难倒我大微软？IE呵呵一笑，把自己的UserAgent改成Mozilla/1.22 (compatible; MSIE 2.0; Windows 95)。看，我这里也有“Mozilla”字样，也能收到含框架的页面了！ 当然，这个小流氓行为，跟后来把IE和Windows捆绑一起销售的大流氓行为比起来，根本不为足道。后面的故事我们也知道了，IE把NetScape干掉了。但它的身体上，却永远的烙上了“Mozilla”的印记。 五、康乾盛世看过奥特曼的都知道，怪兽被打败了会再回来。别忘了NetScape曾拥有一批大神们，失败后，他们围绕着浏览器排版引擎Gecko(壁虎)成立了非正式组织Mozilla。小怪兽再次出发。大神们发明了另一款优秀的浏览器，它在插件拓展和开发调试领域做出的贡献，绝对可以载入互联网历史。 真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？但大神就是大神，大神就是即使你知道了Mozilla的命名都是野兽，却还是猜不到是什么。Mozilla说，我们浴火重生，叫Phoenix(凤凰)！不行么？真不行。 刚推出就被人告了，原来已经有一家公司叫做“凤凰科技”。Mozilla瀑布汗，改名叫Firebird(火鸟)！还不行么？我们得原谅一下他们的取名，虽然现在看来满满的山寨感，可放在那个时代，Firebird这名字很炫酷。就像你当初的QQ昵称叫赤炎天使感觉依然良好一样。 但是，他们发现，业内有个数据库系统，也叫的Firebird…泪流满面的Mozilla感慨重生好难呀。最后才决定叫Firefox(火狐)。 基于Gecko引擎的Firefox非常优秀，为了告诉大家，我使用了这个引擎，它标志自己的UserAgent为Mozilla/5.0 (Windows; U; Windows NT 5.1; sv-SE; rv:1.7.5) Gecko/20041108 Firefox/1.0。这时候的UserAgent，虽然长了点，但它并不混乱，准确的标明了系统，排版引擎，浏览器名称等信息。虽然IE这时已经占有了很大的市场份额，但基本停步不前；而Mozilla经过一段时间的修生养息，Firefox在业内广受好评，得到了快速的发展。 时值2003年，web2.0的浪潮前夕，浏览器的发展达到了空前的盛世。然而所谓否极泰来，盛极则衰。涅槃的Firefox迎来盛世，却又恰恰由于盛世，决定了UserAgent纠结的命运。 《浏览器野史 UserAgent列传（下）》 To Be Continue.litten 2014.9.28","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"http://ipcreator.me/tags/web/"},{"name":"浏览器","slug":"浏览器","permalink":"http://ipcreator.me/tags/浏览器/"}]},{"title":"兔子，胡萝卜与OAuth的故事","date":"2013-08-20T04:55:00.000Z","path":"2013/08/20/zh-oauth-rabbit/","text":"作者：Litten 那些简单的故事，就别用复杂的方式传诵 ##【让我来讲几个故事吧】 从前，有只老兔子，在仓库里存了一万根胡萝卜，作为给小兔子的遗产。而后他就去周游世界了。小兔子有天想去把萝卜拿出来，却被仓库外的一只兔子拦住了。一问才知道，这是老兔子安排的仓库守卫。和所有故事中的守护者一样，他正直而古板，八字眉下面有着睡眠不足的熊猫眼，世人一般称他为兔门神。兔子想要拿到萝卜，就得说服兔门神呀，于是他走了上前… ##【兔子与OAuth1.0的故事】 兔子首先得证明自己是只兔子，不是狗熊也不是狼，于是他向兔门神出示了身份证 兔门神说：哦，你是只兔子。但你还得证明你是老兔子的兔崽子呀。兔子说我爸旅游去了，怎么证明呢？兔门神说，这样吧，我把你的身份证拍下来，发送给你爸，让他看下这是不是你。于是兔门神打开了微信…… 正在休假的老兔子看了下照片，回复说证件照好难看毁三观啊，但勉强认得出这货就是我儿子 兔门神确认这信息后，说，你老爸还是认你这个儿子的 兔子问，那我可以去拿胡萝卜了没？ 兔门神说，可以了，这样吧，我发你个通行证，以后拿这个来我就不用这么麻烦了。 ##【兔子与OAuth1.0a的故事】 这种貌似天衣无缝的形式，却被一只坏兔子看出了破绽。他注意到一个细节，在最后的一步，兔门神都是习惯性的把通行证交给了面前的兔子,而不管这只兔子是不是当初的那只。于是，坏兔子趁兔门神正在和老兔子聊微信的时候，一个劲站在了兔子前面，最后兔门神居然把通行证塞给了他！这怎么可以？于是在第一步和第六步又有了修改。 兔子出示身份证的同时，也出示了自己的私房照，说，门神大哥呀，后面你记得把通行证给照片上的帅哥！ …… …… …… …… 兔门神看了下面前的兔子，私房照上的明显P过嘛但勉强认得出是本人，于是才交出了通行证 ##【兔子与Oauth2.0的故事】 兔门神回家后，向他的老婆兔女神汇报了今天的工作，更安全的方案使他得意洋洋，没想到被兔女神骂了一顿。兔女神说，兔子证明自己还得带个身份证，你不知道在天朝办个身份证多麻烦吗？让小兔子跟老兔子去聊下微信就可以了干嘛要你插手？兔门神哑口无言，兔女神高贵冷艳的说我有四种方案，给你先说说最常用的一种吧。 兔子一开始就跟他老爸聊微信了。当然他得明确告诉老爸，他需要打开哪个仓库（因为老兔子有很多儿子，每个儿子去拿萝卜的仓库不一样，兔子要指定一下具体是哪个，问他可不可以） 老兔子回复说：“just do IT”… 兔子然后去拿胡萝卜，首先被兔女神拦住了。女神告诉他，你要给我四样东西：老兔子的回复，你的私房照，身份证，还要给我一个密码。兔子愣愣的想了个密码，把这四样东西交了过去 兔女神把这四种东西混在一起，用魔法变出了两件法宝：一封情书和一撮猴子毛…然后她解释说：拿着我的情书去找我老公，他就让你进仓库了；但是这情书会过期，是出于安全考虑啦，过期后你得召唤我再写一封，召唤出我的步骤就是吹一下猴子毛，像孙悟空那样你就别在意这些细节好伐？ 兔子拿着情书去找兔门神时，发现他由于被妻子分担了压力，明显睡眠好多了… ##【演员表】 兔子-消费者，也就是第三方应用老兔子-用户，也就是我们，记住，我们永远是第三方的亲爹仓库-Oauth提供者，这里有我们保存的资料，比如说新浪微博，qq空间，人人…兔门神-在前两个故事中，由授权服务器和资源服务器共同扮演，在最后的故事中，只由资源服务器扮演兔女神-授权服务器，只管授权，不管取资源 ##【重要道具】 身份证-签名，将一个http请求以及相应参数字符串化拍下的身份证照片-Request Token，服务器进行认证通行证-Access Token，获取资源的凭证私房照-重定向地址坏兔子(我把它当成道具而不是演员)-重定向地址劫持仓库的名称-appId,即对应具体哪个第三方just do it-Auth code，用户授权号第三个故事的身份证-client id 客户端帐号密码-client secret 客户端密码魔法-将client id，client secket，重定向地址，Auth code生成Access Token情书-Access Token，获取资源的凭证猴子毛-Refresh Token，用来在Access Token过期后将其刷新，刷新需带上client id和client secret ##【说书人说】 Oauth2.0比起Oauth1.0，没有了第一步的签名，将服务器分开为授权服务器与资源服务器。这是最大的两个特征。开放平台必须得做到对第三方友好，才有利于接入。像Oauth1.0签名的操作，就难倒了许多第三方。也许你知道了Oauth2.0接入步骤简化了些，但也知道其内部实现要更复杂，抛去安全方面的考虑，我认为这是正确的方向。因为，Oauth2.0在某种意义上说，向第三方做到了——“把悲伤留给自己，你的美丽让你带走”。","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"http://ipcreator.me/tags/web/"},{"name":"OAuth","slug":"OAuth","permalink":"http://ipcreator.me/tags/OAuth/"}]},{"title":"谈谈OAuth1,OAuth2异同","date":"2013-08-11T02:55:00.000Z","path":"2013/08/11/zh-brief-oauth/","text":"作者：Litten ##一、写在前面在收集资料时，我查询和学习了许多介绍OAuth的文章，这些文章有好有坏，但大多是从个例出发。因此我想从官方文档出发，结合在stackoverflow上的一些讨论，一并整理一下。整理的内容分为OAuth1.0a和OAuth2两部分。 OAuth 1.0a：One Leg -&gt;Two Leg -&gt; Three LeggedOAuth 2:Two Leg -&gt;Three Legged (附：Refresh Token的方式) 这两种模式都是按箭头从左往右安全性递增，其实现也会相对复杂。关于官方的这种leg（腿？）的说法，在中文翻译中比较少有文章提及。下面分别来介绍OAuth的这5种授权流程。 ##二、OAuth1.0a2.1 OAuth 1.0a (One Leg) 应用给服务器发送一个签名请求，附带以下参数： oauth_token Empty String oauth_consumer_key oauth_timestamp oauth_nonce oauth_signature oauth_signature_method oauth_version Optional 服务验证并授予对资源的访问 应用程序利用请求的资源 2.2 OAuth 1.0a (Two Legs) 应用发送一个签名请求，以获取 Request Token： oauth_consumer_key oauth_timestamp oauth_nonce oauth_signature oauth_signature_method oauth_version Optional 服务器返回Request Token： oauth_token oauth_token_secret Additional Parameters / Arguments 发送签名请求，用Request Token换取Access Token oauth_token Request Token oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_version 服务器返回Access Token和Token Secret 应用通过Access Token和Token Secret利用请求的资源 2.3 OAuth 1.0a (Three Legged) 应用发送一个签名请求，以获取 Request Token： oauth_consumer_key oauth_timestamp oauth_nonce oauth_signature oauth_signature_method oauth_version Optional 服务器返回Request Token： oauth_token oauth_token_secret oauth_callback_confirmed … Additional Parameters / Arguments 发送给用户授权的URL oauth_token 提示用户进行授权 用户进行授权 授权结束后返回应用，附带上： oauth_token oauth_verifier 发送签名请求，用Request Token换取Access Token oauth_token Request Token oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_version oauth_verifier 服务器返回Access Token和Token Secret 应用通过Access Token和Token Secret利用请求的资源 ##三、OAuth2 3.1 OAuth 2 (Two Legged) 3.1.1 客户端凭据方式 应用发送请求到服务器： grant_type = client_credentials如果没有使用Authorization（Authorization: Basic Base64(client_id:client_secret)） 的header，必须附带参数为： client_id client_secret 服务器以Access Token回应 access_token expires_in token_type 3.1.2 隐式授予方式 应用发送请求到服务器： response_type = token redirect_uri This is a server-side Redirection URI hosted by the provider or yourself. scope state Optional client_id 用户可根据需要授权。 username password 服务器将响应包含access_token在内的redirect_uri 应用程序跳转至redirect_uri redirect_uri将响应一段脚本或HTML片段。响应的脚本或HTML片段包含参数access_token，还有您可能需要的任何其他参数。 3.1.3 资源所有者密码方式 应用向资源所有者请求凭证 username password 应用使用凭证，向服务器发送请求 grant_type = password username passwordurl看起来会像这样：grant_type=password&amp;username=my_username&amp;password=my_password如果你没有使用Authorization的header，必须附带上参数： client_id client_secreturl看起来会像是：grant_type=password&amp;username=my_username&amp;password=my_password&amp;client_id=random_string&amp;client_secret=random_secret 服务器返回Access Toke access_token expires_in token_type 3.2 OAuth 2 (Three Legged) 应用重定向用户到授权服务： client_id redirect_uri response_type state Optional; Unique identifier to protect against CSRF scope Optional; what data your application can access.url看起来会像是：oauth_service/login/oauth/authorize?client_id=3MVG9lKcPoNINVB&amp;redirect_uri=http://localhost/oauth/code_callback&amp;scope=user 用户登录服务器并确认授权给应用 服务器重定向用户到redirect_url ，附带参数： code state 应用拿到code，并换取Access Token client_id client_secret code redirect_uri Optional; grant_type = “authorization_code” 如果的client_id和client_secret是有效的，服务器将调用一个回调redirect_url，包含ACCESS_TOKEN access_token expires_in refresh_token 应用保存ACCESS_TOKEN，在随后的请求中使用。通常这个值被存储在session或或cookie，需要时作为授权请求的参数。 3.3 OAuth 2 (Refresh Token 刷新token) 在OAuth2中，Token会有过期时间，我们必须去refresh_token，使用其他一些先前获得的参数，生成一个新的token。这是一个容易得多的流程。 创建刷新令牌请求 grant_type = “refresh_token” scope Optional; Cannot have any new scopes not previously defined. refresh_token client_id client_secret 服务验证和响应以下参数： access_token issued_at ##四、stackoverflow上的一些问答 Q：OpenID和OAuth的区别是什么？A：OpenID是有关身份验证（即证明你是谁），OAuth有关授权（即授予访问权限），推荐博文：从用户的角度来看OpenID和OAuth Q：OAuth2与OAuth1不同的地方是？有人可以简单的解释的OAuth2和OAuth1之间的区别吗？ OAuth1现在已经过时，应实施的OAuth2？我没有看到许多实现的OAuth2，大多数仍在使用OAuth，这让我怀疑的OAuth2的准备使用。是吗？A：OAuth2能更好地支持不是基于浏览器的应用。对于不是基于浏览器的应用程序，这是对OAuth的主要挑战。例如，在OAuth1.0，桌面应用或手机应用必须引导用户打开浏览器所需的服务，与服务进行身份验证，并复制令牌从服务返回给应用程序。这里的主要批评是针对用户体验。使用OAuth2.0，可以用新的方式为用户的应用程序获得授权。OAuth2.0不再需要客户端应用程序拥有密钥。这让人回想起老的Twitter认证的API，它并不需要应用得到HMAC哈希令牌和请求字符串。使用OAuth2.0，应用程序可以通过HTTPS获得令牌。OAuth2.0的签名流程简单得多。没有更多的特殊解析，排序，或编码。OAuth2.0的访问令牌是“短命”的。通常情况下，OAuth1.0的访问令牌可以存储一年或一年以上（Twitter从来没有让他们到期）。 OAuth的2.0有刷新令牌的概念。虽然我不能完全肯定这是什么意思，我的猜测是，您的访问令牌可以是短暂存储的（即基于会话），而你可以刷新令牌。你使用刷新令牌获取新的访问令牌，而不是让用户重新授权您的应用程序。最后，OAuth2.0使得负责处理的OAuth请求的服务器和处理用户的授权服务器之间的角色有一个干净的分离。更多信息，在上述的文章中详述。 Q：OAuth2服务器群怎么使用state来防范CSRF？A：state只是一个随机的字符串，可以做这样的事情：$state = md5(uniqid(rand(), TRUE));在session中记录satate，以便稍后你能做验证。一些额外的资料：OAuth2威胁文件模型，特别CSRF保护","comments":true,"categories":[{"name":"技术","slug":"技术","permalink":"http://ipcreator.me/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"http://ipcreator.me/tags/web/"},{"name":"OAuth","slug":"OAuth","permalink":"http://ipcreator.me/tags/OAuth/"}]}]