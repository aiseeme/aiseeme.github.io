<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>For life</title>
  <subtitle>Growing up is the only password.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ipcreator.me/"/>
  <updated>2017-03-30T15:15:02.574Z</updated>
  <id>http://ipcreator.me/</id>
  
  <author>
    <name>IPCreator</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitHub Cheat Sheet</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Tools/github-cheat-sheet/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Tools/github-cheat-sheet/</id>
    <published>2017-03-30T14:51:06.000Z</published>
    <updated>2017-03-30T15:15:02.574Z</updated>
    
    <content type="html"><![CDATA[<p>A collection of cool hidden and not so hidden features of Git and GitHub. This cheat sheet was inspired by <a href="https://github.com/holman" target="_blank" rel="external">Zach Holman</a>‘s <a href="http://confreaks.tv/videos/aloharuby2012-git-and-github-secrets" target="_blank" rel="external">Git and GitHub Secrets</a> talk at Aloha Ruby Conference 2012 (<a href="https://speakerdeck.com/holman/git-and-github-secrets" target="_blank" rel="external">slides</a>) and his <a href="https://vimeo.com/72955426" target="_blank" rel="external">More Git and GitHub Secrets</a> talk at WDCNZ 2013 (<a href="https://speakerdeck.com/holman/more-git-and-github-secrets" target="_blank" rel="external">slides</a>).</p>
<p><em>Shortlink: <a href="http://git.io/sheet" target="_blank" rel="external"><code>http://git.io/sheet</code></a></em></p>
<p><em>Read this in other languages: <a href="README.md">English</a>, <a href="README.ko.md">한국어</a>, <a href="README.ja.md">日本語</a>, <a href="README.zh-cn.md">简体中文</a>, <a href="README.zh-tw.md">正體中文</a>.</em></p>
<a id="more"></a>
<h1 id="GitHub-Cheat-Sheet-1"><a href="#GitHub-Cheat-Sheet-1" class="headerlink" title="GitHub Cheat Sheet [1]"></a>GitHub Cheat Sheet <sup>[1]<sup></sup></sup></h1><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul>
<li><a href="#github">GitHub</a><ul>
<li><a href="#ignore-whitespace">Ignore Whitespace</a></li>
<li><a href="#adjust-tab-space">Adjust Tab Space</a></li>
<li><a href="#commit-history-by-author">Commit History by Author</a></li>
<li><a href="#cloning-a-repository">Cloning a Repository</a></li>
<li><a href="#branch">Branch</a><ul>
<li><a href="#compare-all-branches-to-another-branch">Compare all Branches to Another Branch</a></li>
<li><a href="#comparing-branches">Comparing Branches</a></li>
<li><a href="#compare-branches-across-forked-repositories">Compare Branches across Forked Repositories</a></li>
</ul>
</li>
<li><a href="#gists">Gists</a></li>
<li><a href="#gitio">Git.io</a></li>
<li><a href="#keyboard-shortcuts">Keyboard Shortcuts</a></li>
<li><a href="#line-highlighting-in-repositories">Line Highlighting in Repositories</a></li>
<li><a href="#closing-issues-via-commit-messages">Closing Issues via Commit Messages</a></li>
<li><a href="#cross-link-issues">Cross-Link Issues</a></li>
<li><a href="#locking-conversations">Locking Conversations</a></li>
<li><a href="#ci-status-on-pull-requests">CI Status on Pull Requests</a></li>
<li><a href="#filters">Filters</a></li>
<li><a href="#syntax-highlighting-in-markdown-files">Syntax Highlighting in Markdown Files</a></li>
<li><a href="#emojis">Emojis</a></li>
<li><a href="#imagesgifs">Images/GIFs</a><ul>
<li><a href="#embedding-images-in-github-wiki">Embedding Images in GitHub Wiki</a></li>
</ul>
</li>
<li><a href="#quick-quoting">Quick Quoting</a></li>
<li><a href="#pasting-clipboard-image-to-comments">Pasting Clipboard Image to Comments</a></li>
<li><a href="#quick-licensing">Quick Licensing</a></li>
<li><a href="#task-lists">Task Lists</a><ul>
<li><a href="#task-lists-in-markdown-documents">Task Lists in Markdown Documents</a></li>
</ul>
</li>
<li><a href="#relative-links">Relative Links</a></li>
<li><a href="#metadata-and-plugin-support-for-github-pages">Metadata and Plugin Support for GitHub Pages</a></li>
<li><a href="#viewing-yaml-metadata-in-your-documents">Viewing YAML Metadata in your Documents</a></li>
<li><a href="#rendering-tabular-data">Rendering Tabular Data</a></li>
<li><a href="#rendering-pdf">Rendering PDF</a></li>
<li><a href="#revert-a-pull-request">Revert a Pull Request</a></li>
<li><a href="#diffs">Diffs</a><ul>
<li><a href="#rendered-prose-diffs">Rendered Prose Diffs</a></li>
<li><a href="#diffable-maps">Diffable Maps</a></li>
<li><a href="#expanding-context-in-diffs">Expanding Context in Diffs</a></li>
<li><a href="#diff-or-patch-of-pull-request">Diff or Patch of Pull Request</a></li>
<li><a href="#rendering-and-diffing-images">Rendering and diffing images</a></li>
</ul>
</li>
<li><a href="#hub">Hub</a></li>
<li><a href="#contribution-guidelines">Contribution Guidelines</a><ul>
<li><a href="#contributing-file">CONTRIBUTING file</a></li>
<li><a href="#issue_template-file">ISSUE_TEMPLATE file</a></li>
<li><a href="#pull_request_template-file">PULL_REQUEST_TEMPLATE file</a></li>
</ul>
</li>
<li><a href="#octicons">Octicons</a></li>
<li><a href="#github-student-developer-pack">GitHub Student Developer Pack</a></li>
<li><a href="#github-resources">GitHub Resources</a><ul>
<li><a href="#github-talks">GitHub Talks</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#git">Git</a><ul>
<li><a href="#remove-all-deleted-files-from-the-working-tree">Remove All Deleted Files from the Working Tree</a></li>
<li><a href="#previous-branch">Previous Branch</a></li>
<li><a href="#stripspace">Stripspace</a></li>
<li><a href="#ssh-keys">SSH keys</a></li>
<li><a href="#checking-out-pull-requests">Checking out Pull Requests</a></li>
<li><a href="#empty-commits">Empty Commits</a></li>
<li><a href="#styled-git-status">Styled Git Status</a></li>
<li><a href="#styled-git-log">Styled Git Log</a></li>
<li><a href="#git-query">Git Query</a></li>
<li><a href="#git-grep">Git Grep</a></li>
<li><a href="#merged-branches">Merged Branches</a></li>
<li><a href="#fixup-and-autosquash">Fixup and Autosquash</a></li>
<li><a href="#web-server-for-browsing-local-repositories">Web Server for Browsing Local Repositories</a></li>
<li><a href="#git-configurations">Git Configurations</a><ul>
<li><a href="#aliases">Aliases</a></li>
<li><a href="#auto-correct">Auto-Correct</a></li>
<li><a href="#color">Color</a></li>
</ul>
</li>
<li><a href="#git-resources">Git Resources</a><ul>
<li><a href="#git-books">Git Books</a></li>
<li><a href="#git-videos">Git Videos</a></li>
<li><a href="#git-articles">Git Articles</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h3 id="Ignore-Whitespace"><a href="#Ignore-Whitespace" class="headerlink" title="Ignore Whitespace"></a>Ignore Whitespace</h3><p>Adding <code>?w=1</code> to any diff URL will remove any changes only in whitespace, enabling you to see only that code that has changed.</p>
<p><img src="https://camo.githubusercontent.com/797184940defadec00393e6559b835358a863eeb/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f626c6f672f323031312f736563726574732f776869746573706163652e706e67" alt="Diff without whitespace"></p>
<p><a href="https://github.com/blog/967-github-secrets" target="_blank" rel="external"><em>Read more about GitHub secrets.</em></a></p>
<h3 id="Adjust-Tab-Space"><a href="#Adjust-Tab-Space" class="headerlink" title="Adjust Tab Space"></a>Adjust Tab Space</h3><p>Adding <code>?ts=4</code> to a diff or file URL will display tab characters as 4 spaces wide instead of the default 8. The number after <code>ts</code> can be adjusted to suit your preference. This does not work on Gists, or raw file views, but a <a href="https://chrome.google.com/webstore/detail/tab-size-on-github/ofjbgncegkdemndciafljngjbdpfmbkn" target="_blank" rel="external">Chrome</a> or <a href="https://addons.opera.com/en/extensions/details/github-tab-size/" target="_blank" rel="external">Opera extension</a> can automate this.</p>
<p>Here is a Go source file before adding <code>?ts=4</code>:</p>
<p><img src="http://i.imgur.com/GIT1Fr0.png" alt="Before, tab space example"></p>
<p>…and this is after adding <code>?ts=4</code>:</p>
<p><img src="http://i.imgur.com/70FL4H9.png" alt="After, tab space example"></p>
<h3 id="Commit-History-by-Author"><a href="#Commit-History-by-Author" class="headerlink" title="Commit History by Author"></a>Commit History by Author</h3><p>To view all commits on a repo by author add <code>?author={user}</code> to the URL.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/rails/rails/commits/master?author=dhh</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/S7AE29b.png" alt="DHH commit history"></p>
<p><a href="https://help.github.com/articles/differences-between-commit-views/" target="_blank" rel="external"><em>Read more about the differences between commits views.</em></a></p>
<h3 id="Cloning-a-Repository"><a href="#Cloning-a-Repository" class="headerlink" title="Cloning a Repository"></a>Cloning a Repository</h3><p>When cloning a repository the <code>.git</code> can be left off the end.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/tiimgreen/github-cheat-sheet</div></pre></td></tr></table></figure>
<p><a href="http://git-scm.com/docs/git-clone" target="_blank" rel="external"><em>Read more about the Git <code>clone</code> command.</em></a></p>
<p>###Branch</p>
<h4 id="Compare-all-Branches-to-Another-Branch"><a href="#Compare-all-Branches-to-Another-Branch" class="headerlink" title="Compare all Branches to Another Branch"></a>Compare all Branches to Another Branch</h4><p>If you go to the repo’s <a href="https://github.com/tiimgreen/github-cheat-sheet/branches" target="_blank" rel="external">Branches</a> page, next to the Commits button:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/&#123;user&#125;/&#123;repo&#125;/branches</div></pre></td></tr></table></figure>
<p>… you would see a list of all branches which are not merged into the main branch.</p>
<p>From here you can access the compare page or delete a branch with a click of a button.</p>
<p><img src="http://i.imgur.com/0FEe30z.png" alt="Compare branches not merged into master in rails/rails repo - https://github.com/rails/rails/branches"></p>
<h4 id="Comparing-Branches"><a href="#Comparing-Branches" class="headerlink" title="Comparing Branches"></a>Comparing Branches</h4><p>To use GitHub to compare branches, change the URL to look like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/&#123;user&#125;/&#123;repo&#125;/compare/&#123;range&#125;</div></pre></td></tr></table></figure>
<p>Where <code>{range} = master...4-1-stable</code></p>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/rails/rails/compare/master...4-1-stable</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/tIRCOsK.png" alt="Rails branch compare example"></p>
<p><code>{range}</code> can be changed to things like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://github.com/rails/rails/compare/master@&#123;1.day.ago&#125;...master</div><div class="line">https://github.com/rails/rails/compare/master@&#123;2014-10-04&#125;...master</div></pre></td></tr></table></figure>
<p><em>Dates are in the format <code>YYYY-MM-DD</code></em></p>
<p><img src="http://i.imgur.com/5dtzESz.png" alt="Another compare example"></p>
<p>Branches can also be compared in <code>diff</code> and <code>patch</code> views:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://github.com/rails/rails/compare/master...4-1-stable.diff</div><div class="line">https://github.com/rails/rails/compare/master...4-1-stable.patch</div></pre></td></tr></table></figure>
<p><a href="https://help.github.com/articles/comparing-commits-across-time/" target="_blank" rel="external"><em>Read more about comparing commits across time.</em></a></p>
<h4 id="Compare-Branches-across-Forked-Repositories"><a href="#Compare-Branches-across-Forked-Repositories" class="headerlink" title="Compare Branches across Forked Repositories"></a>Compare Branches across Forked Repositories</h4><p>To use GitHub to compare branches across forked repositories, change the URL to look like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/&#123;user&#125;/&#123;repo&#125;/compare/&#123;foreign-user&#125;:&#123;branch&#125;...&#123;own-branch&#125;</div></pre></td></tr></table></figure>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/rails/rails/compare/byroot:master...master</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/Q1W6qcB.png" alt="Forked branch compare"></p>
<h3 id="Gists"><a href="#Gists" class="headerlink" title="Gists"></a>Gists</h3><p><a href="https://gist.github.com/" target="_blank" rel="external">Gists</a> are an easy way to work with small bits of code without creating a fully fledged repository.</p>
<p><img src="http://i.imgur.com/VkKI1LC.png?1" alt="Gist"></p>
<p>Add <code>.pibb</code> to the end of any Gist URL (<a href="https://gist.github.com/tiimgreen/10545817.pibb" target="_blank" rel="external">like this</a>) in order to get the <em>HTML only</em> version suitable for embedding in any other site.</p>
<p>Gists can be treated as a repository so they can be cloned like any other:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://gist.github.com/tiimgreen/10545817</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/BcFzabp.png" alt="Gists"></p>
<p>This means you also can modify and push updates to Gists:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git commit</div><div class="line">$ git push</div><div class="line">Username <span class="keyword">for</span> <span class="string">'https://gist.github.com'</span>:</div><div class="line">Password <span class="keyword">for</span> <span class="string">'https://tiimgreen@gist.github.com'</span>:</div></pre></td></tr></table></figure>
<p>However, Gists do not support directories. All files need to be added to the repository root.<br><a href="https://help.github.com/articles/creating-gists/" target="_blank" rel="external"><em>Read more about creating Gists.</em></a></p>
<h3 id="Git-io"><a href="#Git-io" class="headerlink" title="Git.io"></a>Git.io</h3><p><a href="http://git.io" target="_blank" rel="external">Git.io</a> is a simple URL shortener for GitHub.</p>
<p><img src="http://i.imgur.com/6JUfbcG.png?1" alt="Git.io"></p>
<p>You can also use it via pure HTTP using Curl:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ curl -i http://git.io -F <span class="string">"url=https://github.com/..."</span></div><div class="line">HTTP/1.1 201 Created</div><div class="line">Location: http://git.io/abc123</div><div class="line"></div><div class="line">$ curl -i http://git.io/abc123</div><div class="line">HTTP/1.1 302 Found</div><div class="line">Location: https://github.com/...</div></pre></td></tr></table></figure>
<p><a href="https://github.com/blog/985-git-io-github-url-shortener" target="_blank" rel="external"><em>Read more about Git.io.</em></a></p>
<h3 id="Keyboard-Shortcuts"><a href="#Keyboard-Shortcuts" class="headerlink" title="Keyboard Shortcuts"></a>Keyboard Shortcuts</h3><p>When on a repository page, keyboard shortcuts allow you to navigate easily.</p>
<ul>
<li>Pressing <code>t</code> will bring up a file explorer.</li>
<li>Pressing <code>w</code> will bring up the branch selector.</li>
<li>Pressing <code>s</code> will focus the search field for the current repository. Pressing Backspace to delete the “This repository” pill changes the field to search all of GitHub.</li>
<li>Pressing <code>l</code> will edit labels on existing Issues.</li>
<li>Pressing <code>y</code> <strong>when looking at a file</strong> (e.g. <code>https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.md</code>) will change your URL to one which, in effect, freezes the page you are looking at. If this code changes, you will still be able to see what you saw at that current time.</li>
</ul>
<p>To see all of the shortcuts for the current page press <code>?</code>:</p>
<p><img src="http://i.imgur.com/y5ZfNEm.png" alt="Keyboard shortcuts"></p>
<p><a href="https://help.github.com/articles/search-syntax/" target="_blank" rel="external">Read more about search syntax you can use.</a></p>
<h3 id="Line-Highlighting-in-Repositories"><a href="#Line-Highlighting-in-Repositories" class="headerlink" title="Line Highlighting in Repositories"></a>Line Highlighting in Repositories</h3><p>Either adding <code>#L52</code> to the end of a code file URL or simply clicking the line number will highlight that line number.</p>
<p>It also works with ranges, e.g. <code>#L53-L60</code>, to select ranges, hold <code>shift</code> and click two lines:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/rails/rails/blob/master/activemodel/lib/active_model.rb#L53-L60</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/8AhjrCz.png" alt="Line Highlighting"></p>
<h3 id="Closing-Issues-via-Commit-Messages"><a href="#Closing-Issues-via-Commit-Messages" class="headerlink" title="Closing Issues via Commit Messages"></a>Closing Issues via Commit Messages</h3><p>If a particular commit fixes an issue, any of the keywords <code>fix/fixes/fixed</code>, <code>close/closes/closed</code> or <code>resolve/resolves/resolved</code>, followed by the issue number, will close the issue once it is committed to the master branch.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"Fix screwup, fixes #12"</span></div></pre></td></tr></table></figure>
<p>This closes the issue and references the closing commit.</p>
<p><img src="http://i.imgur.com/Uh1gZdx.png" alt="Closing Repo"></p>
<p><a href="https://help.github.com/articles/closing-issues-via-commit-messages/" target="_blank" rel="external"><em>Read more about closing Issues via commit messages.</em></a></p>
<h3 id="Cross-Link-Issues"><a href="#Cross-Link-Issues" class="headerlink" title="Cross-Link Issues"></a>Cross-Link Issues</h3><p>If you want to link to another issue in the same repository, simply type hash <code>#</code> then the issue number, and it will be auto-linked.</p>
<p>To link to an issue in another repository, <code>{user}/{repo}#ISSUE_NUMBER</code> e.g. <code>tiimgreen/toc#12</code>.</p>
<p><img src="https://camo.githubusercontent.com/447e39ab8d96b553cadc8d31799100190df230a8/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f626c6f672f323031312f736563726574732f7265666572656e6365732e706e67" alt="Cross-Link Issues"></p>
<h3 id="Locking-Conversations"><a href="#Locking-Conversations" class="headerlink" title="Locking Conversations"></a>Locking Conversations</h3><p>Pull Requests and Issues can now be locked by owners or collaborators of the repo.</p>
<p><img src="https://cloud.githubusercontent.com/assets/2723/3221693/bf54dd44-f00d-11e3-8eb6-bb51e825bc2c.png" alt="Lock conversation"></p>
<p>This means that users who are not collaborators on the project will no longer be able to comment.</p>
<p><img src="https://cloud.githubusercontent.com/assets/2723/3221775/d6e513b0-f00e-11e3-9721-2131cb37c906.png" alt="Comments locked"></p>
<p><a href="https://github.com/blog/1847-locking-conversations" target="_blank" rel="external"><em>Read more about locking conversations.</em></a></p>
<h3 id="CI-Status-on-Pull-Requests"><a href="#CI-Status-on-Pull-Requests" class="headerlink" title="CI Status on Pull Requests"></a>CI Status on Pull Requests</h3><p>If set up correctly, every time you receive a Pull Request, <a href="https://travis-ci.org/" target="_blank" rel="external">Travis CI</a> will build that Pull Request just like it would every time you make a new commit. Read more about how to <a href="http://docs.travis-ci.com/user/getting-started/" target="_blank" rel="external">get started with Travis CI</a>.</p>
<p><a href="https://github.com/octokit/octokit.rb/pull/452" target="_blank" rel="external"><img src="https://cloud.githubusercontent.com/assets/1687642/2700187/3a88838c-c410-11e3-9a46-e65e2a0458cd.png" alt="Travis CI status"></a></p>
<p><a href="https://github.com/blog/1227-commit-status-api" target="_blank" rel="external"><em>Read more about the commit status API.</em></a></p>
<h3 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h3><p>Both issues and pull requests allow filtering in the user interface.</p>
<p>For the Rails repo: <a href="https://github.com/rails/rails/issues" target="_blank" rel="external">https://github.com/rails/rails/issues</a>, the following filter is built by selecting the label “activerecord”:</p>
<p><code>is:issue label:activerecord</code></p>
<p>But, you can also find all issues that are NOT labeled activerecord:</p>
<p><code>is:issue -label:activerecord</code></p>
<p>Additionally, this also works for pull requests:</p>
<p><code>is:pr -label:activerecord</code></p>
<p>Github has tabs for displaying open or closed issues and pull requests but you<br>can also see merged pull requests.  Just put the following in the filter:</p>
<p><code>is:merged</code></p>
<p><a href="https://help.github.com/articles/searching-issues/" target="_blank" rel="external"><em>Read more about searching issues.</em></a></p>
<p>Finally, github now allows you to filter by the Status API’s status.</p>
<p>Pull requests with only successful statuses:</p>
<p><code>status:success</code></p>
<p><a href="https://github.com/blog/2014-filter-pull-requests-by-status" target="_blank" rel="external"><em>Read more about searching on the Status API.</em></a></p>
<h3 id="Syntax-Highlighting-in-Markdown-Files"><a href="#Syntax-Highlighting-in-Markdown-Files" class="headerlink" title="Syntax Highlighting in Markdown Files"></a>Syntax Highlighting in Markdown Files</h3><p>For example, to syntax highlight Ruby code in your Markdown files write:</p>
<pre><code><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'tabbit'</span></div><div class="line">table = Tabbit.new(<span class="string">'Name'</span>, <span class="string">'Email'</span>)</div><div class="line">table.add_row(<span class="string">'Tim Green'</span>, <span class="string">'tiimgreen@gmail.com'</span>)</div><div class="line">puts table.to_s</div></pre></td></tr></table></figure>
</code></pre><p>This will produce:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'tabbit'</span></div><div class="line">table = Tabbit.new(<span class="string">'Name'</span>, <span class="string">'Email'</span>)</div><div class="line">table.add_row(<span class="string">'Tim Green'</span>, <span class="string">'tiimgreen@gmail.com'</span>)</div><div class="line">puts table.to_s</div></pre></td></tr></table></figure>
<p>GitHub uses <a href="https://github.com/github/linguist" target="_blank" rel="external">Linguist</a> to perform language detection and syntax highlighting. You can find out which keywords are valid by perusing the <a href="https://github.com/github/linguist/blob/master/lib/linguist/languages.yml" target="_blank" rel="external">languages YAML file</a>.</p>
<p><a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="external"><em>Read more about GitHub Flavored Markdown.</em></a></p>
<h3 id="Emojis"><a href="#Emojis" class="headerlink" title="Emojis"></a>Emojis</h3><p>Emojis can be added to Pull Requests, Issues, commit messages, repository descriptions, etc. using <code>:name_of_emoji:</code>.</p>
<p>The full list of supported Emojis on GitHub can be found at <a href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="external">emoji-cheat-sheet.com</a> or <a href="https://github.com/scotch-io/All-Github-Emoji-Icons" target="_blank" rel="external">scotch-io/All-Github-Emoji-Icons</a>.<br>A handy emoji search engine can be found at <a href="http://emoji.muan.co/" target="_blank" rel="external">emoji.muan.co</a>.</p>
<p>The top 5 used Emojis on GitHub are:</p>
<ol>
<li><code>:shipit:</code></li>
<li><code>:sparkles:</code></li>
<li><code>:-1:</code></li>
<li><code>:+1:</code></li>
<li><code>:clap:</code></li>
</ol>
<h3 id="Images-GIFs"><a href="#Images-GIFs" class="headerlink" title="Images/GIFs"></a>Images/GIFs</h3><p>Images and GIFs can be added to comments, READMEs etc.:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt Text](http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif)</div></pre></td></tr></table></figure>
<p>Raw images from the repo can be used by calling them directly.:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt Text](https://github.com/&#123;user&#125;/&#123;repo&#125;/raw/master/path/to/image.gif)</div></pre></td></tr></table></figure>
<p><img src="http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif" alt="Peter don&#39;t care"></p>
<p>All images are cached on GitHub, so if your host goes down, the image will remain available.</p>
<h4 id="Embedding-Images-in-GitHub-Wiki"><a href="#Embedding-Images-in-GitHub-Wiki" class="headerlink" title="Embedding Images in GitHub Wiki"></a>Embedding Images in GitHub Wiki</h4><p>There are multiple ways of embedding images in Wiki pages. There’s the standard Markdown syntax (shown above). But there’s also a syntax that allows things like specifying the height or width of the image:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[ http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif | height = 100px ]]</div></pre></td></tr></table></figure>
<p>Which produces:</p>
<p><img src="http://i.imgur.com/J5bMf7S.png" alt="Just a screenshot"></p>
<h3 id="Quick-Quoting"><a href="#Quick-Quoting" class="headerlink" title="Quick Quoting"></a>Quick Quoting</h3><p>When on a comment thread and you want to quote something someone previously said, highlight the text and press <code>r</code>, this will copy it into your text box in the block-quote format.</p>
<p><img src="https://f.cloud.github.com/assets/296432/124483/b0fa6204-6ef0-11e2-83c3-256c37fa7abc.gif" alt="Quick Quote"></p>
<p><a href="https://github.com/blog/1399-quick-quotes" target="_blank" rel="external"><em>Read more about quick quoting.</em></a></p>
<h3 id="Pasting-Clipboard-Image-to-Comments"><a href="#Pasting-Clipboard-Image-to-Comments" class="headerlink" title="Pasting Clipboard Image to Comments"></a>Pasting Clipboard Image to Comments</h3><p><em>(Works on Chrome browsers only)</em></p>
<p>After taking a screenshot and adding it to the clipboard (mac: <code>cmd-ctrl-shift-4</code>), you can simply paste (<code>cmd-v / ctrl-v</code>) the image into the comment section and it will be auto-uploaded to github.</p>
<p><img src="https://cloud.githubusercontent.com/assets/39191/5794265/39c9b65a-9f1b-11e4-9bc7-04e41f59ea5f.png" alt="Pasting Clipboard Image to Comments"></p>
<p><a href="https://help.github.com/articles/issue-attachments/" target="_blank" rel="external"><em>Read more about issue attachments.</em></a></p>
<h3 id="Quick-Licensing"><a href="#Quick-Licensing" class="headerlink" title="Quick Licensing"></a>Quick Licensing</h3><p>When creating a repository, GitHub gives you the option of adding in a pre-made license:</p>
<p><img src="http://i.imgur.com/Chqj4Fg.png" alt="License"></p>
<p>You can also add them to existing repositories by creating a new file through the web interface. When the name <code>LICENSE</code> is typed in you will get an option to use a template:</p>
<p><img src="http://i.imgur.com/fTjQict.png" alt="License"></p>
<p>Also works for <code>.gitignore</code>.</p>
<p><a href="https://help.github.com/articles/open-source-licensing/" target="_blank" rel="external"><em>Read more about open source licensing.</em></a></p>
<h3 id="Task-Lists"><a href="#Task-Lists" class="headerlink" title="Task Lists"></a>Task Lists</h3><p>In Issues and Pull requests check boxes can be added with the following syntax (notice the space):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- [ ] Be awesome</div><div class="line">- [ ] Prepare dinner</div><div class="line">  - [ ] Research recipe</div><div class="line">  - [ ] Buy ingredients</div><div class="line">  - [ ] Cook recipe</div><div class="line">- [ ] Sleep</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/jJBXhsY.png" alt="Task List"></p>
<p>When they are clicked, they will be updated in the pure Markdown:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- [x] Be awesome</div><div class="line">- [ ] Prepare dinner</div><div class="line">  - [x] Research recipe</div><div class="line">  - [x] Buy ingredients</div><div class="line">  - [ ] Cook recipe</div><div class="line">- [ ] Sleep</div></pre></td></tr></table></figure>
<p><a href="https://help.github.com/articles/writing-on-github/#task-lists" target="_blank" rel="external"><em>Read more about task lists.</em></a></p>
<h4 id="Task-Lists-in-Markdown-Documents"><a href="#Task-Lists-in-Markdown-Documents" class="headerlink" title="Task Lists in Markdown Documents"></a>Task Lists in Markdown Documents</h4><p>In full Markdown documents <strong>read-only</strong> checklists can now be added using the following syntax:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- [ ] Mercury</div><div class="line">- [x] Venus</div><div class="line">- [x] Earth</div><div class="line">  - [x] Moon</div><div class="line">- [x] Mars</div><div class="line">  - [ ] Deimos</div><div class="line">  - [ ] Phobos</div></pre></td></tr></table></figure>
<ul>
<li>[ ] Mercury</li>
<li>[x] Venus</li>
<li>[x] Earth<ul>
<li>[x] Moon</li>
</ul>
</li>
<li>[x] Mars<ul>
<li>[ ] Deimos</li>
<li>[ ] Phobos</li>
</ul>
</li>
</ul>
<p><a href="https://github.com/blog/1825-task-lists-in-all-markdown-documents" target="_blank" rel="external"><em>Read more about task lists in markdown documents.</em></a></p>
<h3 id="Relative-Links"><a href="#Relative-Links" class="headerlink" title="Relative Links"></a>Relative Links</h3><p>Relative links are recommended in your Markdown files when linking to internal content.</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="string">Link to a header</span>](<span class="link">#awesome-section</span>)</div><div class="line">[<span class="string">Link to a file</span>](<span class="link">docs/readme</span>)</div></pre></td></tr></table></figure>
<p>Absolute links have to be updated whenever the URL changes (e.g. repository renamed, username changed, project forked). Using relative links makes your documentation easily stand on its own.</p>
<p><a href="https://help.github.com/articles/relative-links-in-readmes/" target="_blank" rel="external"><em>Read more about relative links.</em></a></p>
<h3 id="Metadata-and-Plugin-Support-for-GitHub-Pages"><a href="#Metadata-and-Plugin-Support-for-GitHub-Pages" class="headerlink" title="Metadata and Plugin Support for GitHub Pages"></a>Metadata and Plugin Support for GitHub Pages</h3><p>Within Jekyll pages and posts, repository information is available within the <code>site.github</code> namespace, and can be displayed, for example, using <code></code>.</p>
<p>The Jemoji and jekyll-mentions plugins enable <a href="#emojis">emoji</a> and <a href="https://github.com/blog/821" target="_blank" rel="external">@mentions</a> in your Jekyll posts and pages to work just like you’d expect when interacting with a repository on GitHub.com.</p>
<p><a href="https://github.com/blog/1797-repository-metadata-and-plugin-support-for-github-pages" target="_blank" rel="external"><em>Read more about repository metadata and plugin support for GitHub Pages.</em></a></p>
<h3 id="Viewing-YAML-Metadata-in-your-Documents"><a href="#Viewing-YAML-Metadata-in-your-Documents" class="headerlink" title="Viewing YAML Metadata in your Documents"></a>Viewing YAML Metadata in your Documents</h3><p>Many blogging websites, like <a href="http://jekyllrb.com/" target="_blank" rel="external">Jekyll</a> with <a href="https://pages.github.com" target="_blank" rel="external">GitHub Pages</a>, depend on some YAML-formatted metadata at the beginning of your post. GitHub will render this metadata as a horizontal table, for easier reading</p>
<p><img src="https://camo.githubusercontent.com/47245aa16728e242f74a9a324ce0d24c0b916075/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f36343035302f313232383236372f65303439643063362d323761302d313165332d396464382d6131636432323539393334342e706e67" alt="YAML metadata"></p>
<p><a href="https://github.com/blog/1647-viewing-yaml-metadata-in-your-documents" target="_blank" rel="external"><em>Read more about viewing YAML metadata in your documents.</em></a></p>
<h3 id="Rendering-Tabular-Data"><a href="#Rendering-Tabular-Data" class="headerlink" title="Rendering Tabular Data"></a>Rendering Tabular Data</h3><p>GitHub supports rendering tabular data in the form of <code>.csv</code> (comma-separated) and <code>.tsv</code> (tab-separated) files.</p>
<p><img src="https://camo.githubusercontent.com/1b6dd0157ffb45d9939abf14233a0cb13b3b4dfe/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f3238323735392f3937363436322f33323038336463652d303638642d313165332d393262322d3566323863313061353035392e706e67" alt="Tabular data"></p>
<p><a href="https://github.com/blog/1601-see-your-csvs" target="_blank" rel="external"><em>Read more about rendering tabular data.</em></a></p>
<h3 id="Rendering-PDF"><a href="#Rendering-PDF" class="headerlink" title="Rendering PDF"></a>Rendering PDF</h3><p>GitHub supports rendering PDF:</p>
<p><img src="https://cloud.githubusercontent.com/assets/1000669/7492902/f8493160-f42e-11e4-8cea-1cb4f02757e7.png" alt="PDF"></p>
<p><a href="https://github.com/blog/1974-pdf-viewing" target="_blank" rel="external"><em>Read more about rendering PDF.</em></a></p>
<p>###Revert a Pull Request<br>After a pull request is merged, you may find it does not help anything or it was a bad decision to merge the pull request.</p>
<p>You can revert it by clicking the <strong>Revert</strong> button on the right side of a commit in the pull request page to create a pull request with reverted changes to this specific pull request.</p>
<p><img src="https://camo.githubusercontent.com/0d3350caf2bb1cba53123ffeafc00ca702b1b164/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f68656c702f70756c6c5f72657175657374732f7265766572742d70756c6c2d726571756573742d6c696e6b2e706e67" alt="Revert button"></p>
<p><a href="https://github.com/blog/1857-introducing-the-revert-button" target="_blank" rel="external"><em>Read more about reverting pull requests</em></a></p>
<h3 id="Diffs"><a href="#Diffs" class="headerlink" title="Diffs"></a>Diffs</h3><h4 id="Rendered-Prose-Diffs"><a href="#Rendered-Prose-Diffs" class="headerlink" title="Rendered Prose Diffs"></a>Rendered Prose Diffs</h4><p>Commits and pull requests, including rendered documents supported by GitHub (e.g. Markdown), feature <em>source</em> and <em>rendered</em> views.</p>
<p><img src="https://github-images.s3.amazonaws.com/help/repository/rendered_prose_diff.png" alt="Source / Rendered view"></p>
<p>Click the “rendered” button to see the changes as they’ll appear in the rendered document. Rendered prose view is handy when you’re adding, removing, and editing text:</p>
<p><img src="https://f.cloud.github.com/assets/17715/2003056/3997edb4-862b-11e3-90be-5e9586edecd7.png" alt="Rendered Prose Diffs"></p>
<p><a href="https://github.com/blog/1784-rendered-prose-diffs" target="_blank" rel="external"><em>Read more about rendered prose diffs.</em></a></p>
<h4 id="Diffable-Maps"><a href="#Diffable-Maps" class="headerlink" title="Diffable Maps"></a>Diffable Maps</h4><p>Any time you view a commit or pull request on GitHub that includes geodata, GitHub will render a visual representation of what was changed.</p>
<p><a href="https://github.com/benbalter/congressional-districts/commit/2233c76ca5bb059582d796f053775d8859198ec5" target="_blank" rel="external"><img src="https://f.cloud.github.com/assets/282759/2090660/63f2e45a-8e97-11e3-9d8b-d4c8078b004e.gif" alt="Diffable Maps"></a></p>
<p><a href="https://github.com/blog/1772-diffable-more-customizable-maps" target="_blank" rel="external"><em>Read more about diffable maps.</em></a></p>
<h4 id="Expanding-Context-in-Diffs"><a href="#Expanding-Context-in-Diffs" class="headerlink" title="Expanding Context in Diffs"></a>Expanding Context in Diffs</h4><p>Using the <em>unfold</em> button in the gutter of a diff, you can reveal additional lines of context with a click. You can keep clicking <em>unfold</em> until you’ve revealed the whole file, and the feature is available anywhere GitHub renders diffs.</p>
<p><img src="https://f.cloud.github.com/assets/22635/1610539/863c1f64-5584-11e3-82bf-151b406a272f.gif" alt="Expanding Context in Diffs"></p>
<p><a href="https://github.com/blog/1705-expanding-context-in-diffs" target="_blank" rel="external"><em>Read more about expanding context in diffs.</em></a></p>
<h4 id="Diff-or-Patch-of-Pull-Request"><a href="#Diff-or-Patch-of-Pull-Request" class="headerlink" title="Diff or Patch of Pull Request"></a>Diff or Patch of Pull Request</h4><p>You can get the diff of a Pull Request by adding a <code>.diff</code> or <code>.patch</code><br>extension to the end of the URL. For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">https://github.com/tiimgreen/github-cheat-sheet/pull/15</div><div class="line">https://github.com/tiimgreen/github-cheat-sheet/pull/15.diff</div><div class="line">https://github.com/tiimgreen/github-cheat-sheet/pull/15.patch</div></pre></td></tr></table></figure>
<p>The <code>.diff</code> extension would give you this in plain text:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">diff --git a/README.md b/README.md</div><div class="line">index 88fcf69..8614873 100644</div><div class="line">--- a/README.md</div><div class="line">+++ b/README.md</div><div class="line">@@ -28,6 +28,7 @@ All the hidden and not hidden features of Git and GitHub. This cheat sheet was i</div><div class="line"> - [Merged Branches](#merged-branches)</div><div class="line"> - [Quick Licensing](#quick-licensing)</div><div class="line"> - [TODO Lists](#todo-lists)</div><div class="line">+- [Relative Links](#relative-links)</div><div class="line"> - [.gitconfig Recommendations](#gitconfig-recommendations)</div><div class="line">     - [Aliases](#aliases)</div><div class="line">     - [Auto-correct](#auto-correct)</div><div class="line">@@ -381,6 +382,19 @@ When they are clicked, they will be updated in the pure Markdown:</div><div class="line"> - [ ] Sleep</div><div class="line"></div><div class="line">(...)</div></pre></td></tr></table></figure>
<h4 id="Rendering-and-diffing-images"><a href="#Rendering-and-diffing-images" class="headerlink" title="Rendering and diffing images"></a>Rendering and diffing images</h4><p>GitHub can display several common image formats, including PNG, JPG, GIF, and PSD. In addition, there are several ways to compare differences between versions of those image formats.</p>
<p><a href="https://github.com/blog/1845-psd-viewing-diffing" target="_blank" rel="external"><img src="https://cloud.githubusercontent.com/assets/2546/3165594/55f2798a-eb56-11e3-92e7-b79ad791a697.gif" alt="Diffable PSD"></a></p>
<p><a href="https://help.github.com/articles/rendering-and-diffing-images/" target="_blank" rel="external"><em>Read more about rendering and diffing images.</em></a></p>
<h3 id="Hub"><a href="#Hub" class="headerlink" title="Hub"></a>Hub</h3><p><a href="https://github.com/github/hub" target="_blank" rel="external">Hub</a> is a command line Git wrapper that gives you extra features and commands that make working with GitHub easier.</p>
<p>This allows you to do things like:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hub <span class="built_in">clone</span> tiimgreen/toc</div></pre></td></tr></table></figure>
<p><a href="https://github.com/github/hub#commands" target="_blank" rel="external"><em>Check out some more cool commands Hub has to offer.</em></a></p>
<h3 id="Contribution-Guidelines"><a href="#Contribution-Guidelines" class="headerlink" title="Contribution Guidelines"></a>Contribution Guidelines</h3><p>GitHub supports adding 3 different files which help users contribute to your project.<br>These files can either be placed in the root of your repository or a <code>.github</code> directory under the root.</p>
<h4 id="CONTRIBUTING-File"><a href="#CONTRIBUTING-File" class="headerlink" title="CONTRIBUTING File"></a>CONTRIBUTING File</h4><p>Adding a <code>CONTRIBUTING</code> or <code>CONTRIBUTING.md</code> file to either the root of your repository or a <code>.github</code> directory will add a link to your file when a contributor creates an Issue or opens a Pull Request.</p>
<p><img src="https://camo.githubusercontent.com/71995d6b0e620a9ef1ded00a04498241c69dd1bf/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f736b697463682f6973737565732d32303132303931332d3136323533392e6a7067" alt="Contributing Guidelines"></p>
<p><a href="https://github.com/blog/1184-contributing-guidelines" target="_blank" rel="external"><em>Read more about contributing guidelines.</em></a></p>
<h4 id="ISSUE-TEMPLATE-file"><a href="#ISSUE-TEMPLATE-file" class="headerlink" title="ISSUE_TEMPLATE file"></a>ISSUE_TEMPLATE file</h4><p>You can define a template for all new issues opened in your project. The content of this file will pre-populate the new issue box when users create new issues. Add an <code>ISSUE_TEMPLATE</code> or <code>ISSUE_TEMPLATE.md</code> file to either the root of your repository or a <code>.github</code> directory.</p>
<p><a href="https://github.com/blog/2111-issue-and-pull-request-templates" target="_blank" rel="external"><em>Read more about issue templates.</em></a></p>
<p><a href="https://www.talater.com/open-source-templates/" target="_blank" rel="external">Issue template file generator</a></p>
<p><img src="https://cloud.githubusercontent.com/assets/25792/13120859/733479fe-d564-11e5-8a1f-a03f95072f7a.png" alt="GitHub Issue template"></p>
<h4 id="PULL-REQUEST-TEMPLATE-file"><a href="#PULL-REQUEST-TEMPLATE-file" class="headerlink" title="PULL_REQUEST_TEMPLATE file"></a>PULL_REQUEST_TEMPLATE file</h4><p>You can define a template for all new pull requests opened in your project. The content of this file will pre-populate the text area when users create pull requests. Add a <code>PULL_REQUEST_TEMPLATE</code> or <code>PULL_REQUEST_TEMPLATE.md</code> file to either the root of your repository or a <code>.github</code> directory.</p>
<p><a href="https://github.com/blog/2111-issue-and-pull-request-templates" target="_blank" rel="external"><em>Read more about pull request templates.</em></a></p>
<p><a href="https://www.talater.com/open-source-templates/" target="_blank" rel="external">Pull request template file generator</a></p>
<h3 id="Octicons"><a href="#Octicons" class="headerlink" title="Octicons"></a>Octicons</h3><p>GitHubs icons (Octicons) have now been open sourced.</p>
<p><img src="https://og.github.com/octicons/octicons@1200x630.png" alt="Octicons"></p>
<p><a href="https://octicons.github.com" target="_blank" rel="external"><em>Read more about GitHub’s Octicons</em></a></p>
<h3 id="GitHub-Student-Developer-Pack"><a href="#GitHub-Student-Developer-Pack" class="headerlink" title="GitHub Student Developer Pack"></a>GitHub Student Developer Pack</h3><p>If you are a student you will be eligible for the GitHub Student Developer Pack. This gives you free credit, free trials and early access to software that will help you when developing.</p>
<p><img src="http://i.imgur.com/9ru3K43.png" alt="GitHub Student Developer Pack"></p>
<p><a href="https://education.github.com/pack" target="_blank" rel="external"><em>Read more about GitHub’s Student Developer Pack</em></a></p>
<h3 id="GitHub-Resources"><a href="#GitHub-Resources" class="headerlink" title="GitHub Resources"></a>GitHub Resources</h3><table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>GitHub Explore</td>
<td><a href="https://github.com/explore" target="_blank" rel="external">https://github.com/explore</a></td>
</tr>
<tr>
<td>GitHub Blog</td>
<td><a href="https://github.com/blog" target="_blank" rel="external">https://github.com/blog</a></td>
</tr>
<tr>
<td>GitHub Help</td>
<td><a href="https://help.github.com/" target="_blank" rel="external">https://help.github.com/</a></td>
</tr>
<tr>
<td>GitHub Training</td>
<td><a href="https://training.github.com/" target="_blank" rel="external">https://training.github.com/</a></td>
</tr>
<tr>
<td>GitHub Developer</td>
<td><a href="https://developer.github.com/" target="_blank" rel="external">https://developer.github.com/</a></td>
</tr>
<tr>
<td>Github Education (Free Micro Account and other stuff for students)</td>
<td><a href="https://education.github.com/" target="_blank" rel="external">https://education.github.com/</a></td>
</tr>
</tbody>
</table>
<h4 id="GitHub-Talks"><a href="#GitHub-Talks" class="headerlink" title="GitHub Talks"></a>GitHub Talks</h4><table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>How GitHub Uses GitHub to Build GitHub</td>
<td><a href="https://www.youtube.com/watch?v=qyz3jkOBbQY" target="_blank" rel="external">https://www.youtube.com/watch?v=qyz3jkOBbQY</a></td>
</tr>
<tr>
<td>Introduction to Git with Scott Chacon of GitHub</td>
<td><a href="https://www.youtube.com/watch?v=ZDR433b0HJY" target="_blank" rel="external">https://www.youtube.com/watch?v=ZDR433b0HJY</a></td>
</tr>
<tr>
<td>How GitHub No Longer Works</td>
<td><a href="https://www.youtube.com/watch?v=gXD1ITW7iZI" target="_blank" rel="external">https://www.youtube.com/watch?v=gXD1ITW7iZI</a></td>
</tr>
<tr>
<td>Git and GitHub Secrets</td>
<td><a href="https://www.youtube.com/watch?v=Foz9yvMkvlA" target="_blank" rel="external">https://www.youtube.com/watch?v=Foz9yvMkvlA</a></td>
</tr>
<tr>
<td>More Git and GitHub Secrets</td>
<td><a href="https://www.youtube.com/watch?v=p50xsL-iVgU" target="_blank" rel="external">https://www.youtube.com/watch?v=p50xsL-iVgU</a></td>
</tr>
</tbody>
</table>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="Remove-All-Deleted-Files-from-the-Working-Tree"><a href="#Remove-All-Deleted-Files-from-the-Working-Tree" class="headerlink" title="Remove All Deleted Files from the Working Tree"></a>Remove All Deleted Files from the Working Tree</h3><p>When you delete a lot of files using <code>/bin/rm</code> you can use the following command to remove them from the working tree and from the index, eliminating the need to remove each one individually:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm $(git ls-files <span class="_">-d</span>)</div></pre></td></tr></table></figure>
<p>For example:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">	deleted:    a</div><div class="line">	deleted:    c</div><div class="line"></div><div class="line">$ git rm $(git ls-files <span class="_">-d</span>)</div><div class="line">rm <span class="string">'a'</span></div><div class="line">rm <span class="string">'c'</span></div><div class="line"></div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">	deleted:    a</div><div class="line">	deleted:    c</div></pre></td></tr></table></figure>
<h3 id="Previous-Branch"><a href="#Previous-Branch" class="headerlink" title="Previous Branch"></a>Previous Branch</h3><p>To move to the previous branch in Git:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git checkout -</div><div class="line"><span class="comment"># Switched to branch 'master'</span></div><div class="line"></div><div class="line">$ git checkout -</div><div class="line"><span class="comment"># Switched to branch 'next'</span></div><div class="line"></div><div class="line">$ git checkout -</div><div class="line"><span class="comment"># Switched to branch 'master'</span></div></pre></td></tr></table></figure>
<p><a href="http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging" target="_blank" rel="external"><em>Read more about Git branching.</em></a></p>
<h3 id="Stripspace"><a href="#Stripspace" class="headerlink" title="Stripspace"></a>Stripspace</h3><p>Git Stripspace:</p>
<ul>
<li>Strips trailing whitespace</li>
<li>Collapses newlines</li>
<li>Adds newline to end of file</li>
</ul>
<p>A file must be passed when calling the command, e.g.:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stripspace &lt; README.md</div></pre></td></tr></table></figure></p>
<p><a href="http://git-scm.com/docs/git-stripspace" target="_blank" rel="external"><em>Read more about the Git <code>stripspace</code> command.</em></a></p>
<h3 id="SSH-keys"><a href="#SSH-keys" class="headerlink" title="SSH keys"></a>SSH keys</h3><p>You can get a list of public ssh keys in plain text format by visiting:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/&#123;user&#125;.keys</div></pre></td></tr></table></figure>
<p>e.g. <a href="https://github.com/tiimgreen.keys" target="_blank" rel="external">https://github.com/tiimgreen.keys</a></p>
<p><a href="https://changelog.com/github-exposes-public-ssh-keys-for-its-users/" target="_blank" rel="external"><em>Read more about accessing public ssh keys.</em></a></p>
<h3 id="Checking-out-Pull-Requests"><a href="#Checking-out-Pull-Requests" class="headerlink" title="Checking out Pull Requests"></a>Checking out Pull Requests</h3><p>Pull Requests are special branches on the GitHub repository which can be retrieved locally in several ways:</p>
<p>Retrieve a specific Pull Request and store it temporarily in <code>FETCH_HEAD</code> for quickly <code>diff</code>ing or <code>merge</code>ing:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin refs/pull/[PR-Number]/head</div></pre></td></tr></table></figure>
<p>Acquire all Pull Request branches as local remote branches by refspec:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin <span class="string">'+refs/pull/*/head:refs/remotes/origin/pr/*'</span></div></pre></td></tr></table></figure>
<p>Or setup the remote to fetch Pull Requests automatically by adding these corresponding lines in your repository’s <code>.git/config</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[remote &quot;origin&quot;]</div><div class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</div><div class="line">    url = git@github.com:tiimgreen/github-cheat-sheet.git</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[remote &quot;origin&quot;]</div><div class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</div><div class="line">    url = git@github.com:tiimgreen/github-cheat-sheet.git</div><div class="line">    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*</div></pre></td></tr></table></figure>
<p>For Fork-based Pull Request contributions, it’s useful to <code>checkout</code> a remote branch representing the Pull Request and create a local branch from it:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout pr/42 pr-42</div></pre></td></tr></table></figure>
<p>Or should you work on more repositories, you can globally configure fetching pull requests in the global git config instead.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global --add remote.origin.fetch <span class="string">"+refs/pull/*/head:refs/remotes/origin/pr/*"</span></div></pre></td></tr></table></figure>
<p>This way, you can use the following short commands in all your repositories:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch origin</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout pr/42</div></pre></td></tr></table></figure>
<p><a href="https://help.github.com/articles/checking-out-pull-requests-locally/" target="_blank" rel="external"><em>Read more about checking out pull requests locally.</em></a></p>
<h3 id="Empty-Commits"><a href="#Empty-Commits" class="headerlink" title="Empty Commits"></a>Empty Commits</h3><p>Commits can be pushed with no code changes by adding <code>--allow-empty</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"Big-ass commit"</span> --allow-empty</div></pre></td></tr></table></figure>
<p>Some use-cases for this (that make sense), include:</p>
<ul>
<li>Annotating the start of a new bulk of work or a new feature.</li>
<li>Documenting when you make changes to the project that aren’t code related.</li>
<li>Communicating with people using your repository.</li>
<li>The first commit of a repository: <code>git commit -m &quot;Initial commit&quot; --allow-empty</code>.</li>
</ul>
<h3 id="Styled-Git-Status"><a href="#Styled-Git-Status" class="headerlink" title="Styled Git Status"></a>Styled Git Status</h3><p>Running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure>
<p>Produces:</p>
<p><img src="http://i.imgur.com/qjPyvXb.png" alt="git status"></p>
<p>By adding <code>-sb</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status -sb</div></pre></td></tr></table></figure>
<p>This is produced:</p>
<p><img src="http://i.imgur.com/K0OY3nm.png" alt="git status -sb"></p>
<p><a href="http://git-scm.com/docs/git-status" target="_blank" rel="external"><em>Read more about the Git <code>status</code> command.</em></a></p>
<h3 id="Styled-Git-Log"><a href="#Styled-Git-Log" class="headerlink" title="Styled Git Log"></a>Styled Git Log</h3><p>Running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --all --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit --date=relative</div></pre></td></tr></table></figure>
<p>Produces:</p>
<p><img src="http://i.imgur.com/58eOtkW.png" alt="git log --all --graph --pretty=format:&#39;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative"></p>
<p>Credit to <a href="http://stackoverflow.com/users/88355/palesz" target="_blank" rel="external">Palesz</a></p>
<p><em>This can be aliased using the instructions found <a href="https://github.com/tiimgreen/github-cheat-sheet#aliases" target="_blank" rel="external">here</a>.</em></p>
<p><a href="http://git-scm.com/docs/git-log" target="_blank" rel="external"><em>Read more about the Git <code>log</code> command.</em></a></p>
<h3 id="Git-Query"><a href="#Git-Query" class="headerlink" title="Git Query"></a>Git Query</h3><p>A Git query allows you to search all your previous commit messages and find the most recent one matching the query.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git show :/query</div></pre></td></tr></table></figure>
<p>Where <code>query</code> (case-sensitive) is the term you want to search, this then finds the last one and gives details on the lines that were changed.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git show :/typo</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/icaGiNt.png" alt="git show :/query"></p>
<p><em>Press <code>q</code> to quit.</em></p>
<h3 id="Git-Grep"><a href="#Git-Grep" class="headerlink" title="Git Grep"></a>Git Grep</h3><p>Git Grep will return a list of lines matching a pattern.</p>
<p>Running:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git grep aliases</div></pre></td></tr></table></figure></p>
<p>will show all the files containing the string <em>aliases</em>.</p>
<p><img src="http://i.imgur.com/DL2zpQ9.png" alt="git grep aliases"></p>
<p><em>Press <code>q</code> to quit.</em></p>
<p>You can also use multiple flags for more advanced search. For example:</p>
<ul>
<li><code>-e</code> The next parameter is the pattern (e.g. regex)</li>
<li><code>--and</code>, <code>--or</code> and <code>--not</code> Combine multiple patterns.</li>
</ul>
<p>Use it like this:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git grep <span class="_">-e</span> pattern --and <span class="_">-e</span> anotherpattern</div></pre></td></tr></table></figure></p>
<p><a href="http://git-scm.com/docs/git-grep" target="_blank" rel="external"><em>Read more about the Git <code>grep</code> command.</em></a></p>
<h3 id="Merged-Branches"><a href="#Merged-Branches" class="headerlink" title="Merged Branches"></a>Merged Branches</h3><p>Running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --merged</div></pre></td></tr></table></figure>
<p>Will give you a list of all branches that have been merged into your current branch.</p>
<p>Conversely:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --no-merged</div></pre></td></tr></table></figure>
<p>Will give you a list of branches that have not been merged into your current branch.</p>
<p><a href="http://git-scm.com/docs/git-branch" target="_blank" rel="external"><em>Read more about the Git <code>branch</code> command.</em></a></p>
<h3 id="Fixup-and-Autosquash"><a href="#Fixup-and-Autosquash" class="headerlink" title="Fixup and Autosquash"></a>Fixup and Autosquash</h3><p>If there is something wrong with a previous commit (can be one or more from HEAD), for example <code>abcde</code>, run the following command after you’ve amended the problem:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git commit --fixup=abcde</div><div class="line">$ git rebase abcde^ --autosquash -i</div></pre></td></tr></table></figure></p>
<p><a href="http://git-scm.com/docs/git-commit" target="_blank" rel="external"><em>Read more about the Git <code>commit</code> command.</em></a><br><a href="http://git-scm.com/docs/git-rebase" target="_blank" rel="external"><em>Read more about the Git <code>rebase</code> command.</em></a></p>
<h3 id="Web-Server-for-Browsing-Local-Repositories"><a href="#Web-Server-for-Browsing-Local-Repositories" class="headerlink" title="Web Server for Browsing Local Repositories"></a>Web Server for Browsing Local Repositories</h3><p>Use the Git <code>instaweb</code> command to instantly browse your working repository in <code>gitweb</code>. This command is a simple script to set up <code>gitweb</code> and a web server for browsing the local repository.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git instaweb</div></pre></td></tr></table></figure>
<p>Opens:</p>
<p><img src="http://i.imgur.com/Dxekmqc.png" alt="Git instaweb"></p>
<p><a href="http://git-scm.com/docs/git-instaweb" target="_blank" rel="external"><em>Read more about the Git <code>instaweb</code> command.</em></a></p>
<h3 id="Git-Configurations"><a href="#Git-Configurations" class="headerlink" title="Git Configurations"></a>Git Configurations</h3><p>Your <code>.gitconfig</code> file contains all your Git configurations.</p>
<h4 id="Aliases"><a href="#Aliases" class="headerlink" title="Aliases"></a>Aliases</h4><p>Aliases are helpers that let you define your own git calls. For example you could set <code>git a</code> to run <code>git add --all</code>.</p>
<p>To add an alias, either navigate to <code>~/.gitconfig</code> and fill it out in the following format:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[alias]</div><div class="line">  co = checkout</div><div class="line">  cm = commit</div><div class="line">  p = push</div><div class="line">  # Show verbose output about tags, branches or remotes</div><div class="line">  tags = tag -l</div><div class="line">  branches = branch -a</div><div class="line">  remotes = remote -v</div></pre></td></tr></table></figure>
<p>…or type in the command-line:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.new_alias git_function</div></pre></td></tr></table></figure>
<p>For example:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.cm commit</div></pre></td></tr></table></figure>
<p>For an alias with multiple functions use quotes:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.ac <span class="string">'add -A . &amp;&amp; commit'</span></div></pre></td></tr></table></figure>
<p>Some useful aliases include:</p>
<table>
<thead>
<tr>
<th>Alias</th>
<th>Command</th>
<th>What to Type</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git cm</code></td>
<td><code>git commit</code></td>
<td><code>git config --global alias.cm commit</code></td>
</tr>
<tr>
<td><code>git co</code></td>
<td><code>git checkout</code></td>
<td><code>git config --global alias.co checkout</code></td>
</tr>
<tr>
<td><code>git ac</code></td>
<td><code>git add . -A</code> <code>git commit</code></td>
<td><code>git config --global alias.ac &#39;!git add -A &amp;&amp; git commit&#39;</code></td>
</tr>
<tr>
<td><code>git st</code></td>
<td><code>git status -sb</code></td>
<td><code>git config --global alias.st &#39;status -sb&#39;</code></td>
</tr>
<tr>
<td><code>git tags</code></td>
<td><code>git tag -l</code></td>
<td><code>git config --global alias.tags &#39;tag -l&#39;</code></td>
</tr>
<tr>
<td><code>git branches</code></td>
<td><code>git branch -a</code></td>
<td><code>git config --global alias.branches &#39;branch -a&#39;</code></td>
</tr>
<tr>
<td><code>git cleanup</code></td>
<td>`git branch –merged</td>
<td>grep -v ‘*’</td>
<td>xargs git branch -d`</td>
<td>`git config –global alias.cleanup “!git branch –merged</td>
<td>grep -v ‘*’</td>
<td>xargs git branch -d”`</td>
</tr>
<tr>
<td><code>git remotes</code></td>
<td><code>git remote -v</code></td>
<td><code>git config --global alias.remotes &#39;remote -v&#39;</code></td>
</tr>
<tr>
<td><code>git lg</code></td>
<td><code>git log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --</code></td>
<td><code>git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --&quot;</code></td>
</tr>
</tbody>
</table>
<p><em>Some Aliases are taken from <a href="https://github.com/mathiasbynens" target="_blank" rel="external">@mathiasbynens</a> dotfiles: <a href="https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig" target="_blank" rel="external">https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig</a></em></p>
<h4 id="Auto-Correct"><a href="#Auto-Correct" class="headerlink" title="Auto-Correct"></a>Auto-Correct</h4><p>If you type <code>git comit</code> you will get this:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git comit -m <span class="string">"Message"</span></div><div class="line"><span class="comment"># git: 'comit' is not a git command. See 'git --help'.</span></div><div class="line"></div><div class="line"><span class="comment"># Did you mean this?</span></div><div class="line"><span class="comment">#   commit</span></div></pre></td></tr></table></figure>
<p>To call <code>commit</code> when <code>comit</code> is typed, just enable auto-correct:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global help.autocorrect 1</div></pre></td></tr></table></figure>
<p>So now you will get this:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git comit -m <span class="string">"Message"</span></div><div class="line"><span class="comment"># WARNING: You called a Git command named 'comit', which does not exist.</span></div><div class="line"><span class="comment"># Continuing under the assumption that you meant 'commit'</span></div><div class="line"><span class="comment"># in 0.1 seconds automatically...</span></div></pre></td></tr></table></figure>
<h4 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h4><p>To add more color to your Git output:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global color.ui 1</div></pre></td></tr></table></figure>
<p><a href="http://git-scm.com/docs/git-config" target="_blank" rel="external"><em>Read more about the Git <code>config</code> command.</em></a></p>
<h3 id="Git-Resources"><a href="#Git-Resources" class="headerlink" title="Git Resources"></a>Git Resources</h3><table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>Official Git Site</td>
<td><a href="http://git-scm.com/" target="_blank" rel="external">http://git-scm.com/</a></td>
</tr>
<tr>
<td>Official Git Video Tutorials</td>
<td><a href="http://git-scm.com/videos" target="_blank" rel="external">http://git-scm.com/videos</a></td>
</tr>
<tr>
<td>Code School Try Git</td>
<td><a href="http://try.github.com/" target="_blank" rel="external">http://try.github.com/</a></td>
</tr>
<tr>
<td>Introductory Reference &amp; Tutorial for Git</td>
<td><a href="http://gitref.org/" target="_blank" rel="external">http://gitref.org/</a></td>
</tr>
<tr>
<td>Official Git Tutorial</td>
<td><a href="http://git-scm.com/docs/gittutorial" target="_blank" rel="external">http://git-scm.com/docs/gittutorial</a></td>
</tr>
<tr>
<td>Everyday Git</td>
<td><a href="http://git-scm.com/docs/everyday" target="_blank" rel="external">http://git-scm.com/docs/everyday</a></td>
</tr>
<tr>
<td>Git Immersion</td>
<td><a href="http://gitimmersion.com/" target="_blank" rel="external">http://gitimmersion.com/</a></td>
</tr>
<tr>
<td>Ry’s Git Tutorial</td>
<td><a href="http://rypress.com/tutorials/git/index" target="_blank" rel="external">http://rypress.com/tutorials/git/index</a></td>
</tr>
<tr>
<td>Git for Computer Scientists</td>
<td><a href="http://eagain.net/articles/git-for-computer-scientists/" target="_blank" rel="external">http://eagain.net/articles/git-for-computer-scientists/</a></td>
</tr>
<tr>
<td>Git Magic</td>
<td><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/" target="_blank" rel="external">http://www-cs-students.stanford.edu/~blynn/gitmagic/</a></td>
</tr>
<tr>
<td>GitHub Training Kit</td>
<td><a href="https://training.github.com/kit/" target="_blank" rel="external">https://training.github.com/kit/</a></td>
</tr>
<tr>
<td>Git Visualization Playground</td>
<td><a href="http://onlywei.github.io/explain-git-with-d3/#freeplay" target="_blank" rel="external">http://onlywei.github.io/explain-git-with-d3/#freeplay</a></td>
</tr>
<tr>
<td>Learn Git Branching</td>
<td><a href="http://pcottle.github.io/learnGitBranching/" target="_blank" rel="external">http://pcottle.github.io/learnGitBranching/</a></td>
</tr>
<tr>
<td>A collection of useful .gitignore templates</td>
<td><a href="https://github.com/github/gitignore" target="_blank" rel="external">https://github.com/github/gitignore</a></td>
</tr>
</tbody>
</table>
<h4 id="Git-Books"><a href="#Git-Books" class="headerlink" title="Git Books"></a>Git Books</h4><table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>Pragmatic Version Control Using Git</td>
<td><a href="https://pragprog.com/titles/tsgit/pragmatic-version-control-using-git" target="_blank" rel="external">https://pragprog.com/titles/tsgit/pragmatic-version-control-using-git</a></td>
</tr>
<tr>
<td>Pro Git</td>
<td><a href="http://git-scm.com/book" target="_blank" rel="external">http://git-scm.com/book</a></td>
</tr>
<tr>
<td>Git Internals PluralSight</td>
<td><a href="https://github.com/pluralsight/git-internals-pdf" target="_blank" rel="external">https://github.com/pluralsight/git-internals-pdf</a></td>
</tr>
<tr>
<td>Git in the Trenches</td>
<td><a href="http://cbx33.github.io/gitt/" target="_blank" rel="external">http://cbx33.github.io/gitt/</a></td>
</tr>
<tr>
<td>Version Control with Git</td>
<td><a href="http://www.amazon.com/Version-Control-Git-collaborative-development/dp/1449316387" target="_blank" rel="external">http://www.amazon.com/Version-Control-Git-collaborative-development/dp/1449316387</a></td>
</tr>
<tr>
<td>Pragmatic Guide to Git</td>
<td><a href="https://pragprog.com/titles/pg_git/pragmatic-guide-to-git" target="_blank" rel="external">https://pragprog.com/titles/pg_git/pragmatic-guide-to-git</a></td>
</tr>
<tr>
<td>Git: Version Control for Everyone</td>
<td><a href="https://www.packtpub.com/application-development/git-version-control-everyone" target="_blank" rel="external">https://www.packtpub.com/application-development/git-version-control-everyone</a></td>
</tr>
</tbody>
</table>
<h4 id="Git-Videos"><a href="#Git-Videos" class="headerlink" title="Git Videos"></a>Git Videos</h4><table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>Linus Torvalds on Git</td>
<td><a href="https://www.youtube.com/watch?v=4XpnKHJAok8" target="_blank" rel="external">https://www.youtube.com/watch?v=4XpnKHJAok8</a></td>
</tr>
<tr>
<td>Introduction to Git with Scott Chacon</td>
<td><a href="https://www.youtube.com/watch?v=ZDR433b0HJY" target="_blank" rel="external">https://www.youtube.com/watch?v=ZDR433b0HJY</a></td>
</tr>
<tr>
<td>Git From the Bits Up</td>
<td><a href="https://www.youtube.com/watch?v=MYP56QJpDr4" target="_blank" rel="external">https://www.youtube.com/watch?v=MYP56QJpDr4</a></td>
</tr>
<tr>
<td>Graphs, Hashes, and Compression, Oh My!</td>
<td><a href="https://www.youtube.com/watch?v=ig5E8CcdM9g" target="_blank" rel="external">https://www.youtube.com/watch?v=ig5E8CcdM9g</a></td>
</tr>
<tr>
<td>GitHub Training &amp; Guides</td>
<td><a href="https://www.youtube.com/watch?list=PLg7s6cbtAD15G8lNyoaYDuKZSKyJrgwB-&amp;v=FyfwLX4HAxM" target="_blank" rel="external">https://www.youtube.com/watch?list=PLg7s6cbtAD15G8lNyoaYDuKZSKyJrgwB-&amp;v=FyfwLX4HAxM</a></td>
</tr>
</tbody>
</table>
<h4 id="Git-Articles"><a href="#Git-Articles" class="headerlink" title="Git Articles"></a>Git Articles</h4><table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>GitHub Flow</td>
<td><a href="http://scottchacon.com/2011/08/31/github-flow.html" target="_blank" rel="external">http://scottchacon.com/2011/08/31/github-flow.html</a></td>
</tr>
</tbody>
</table>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/tiimgreen/github-cheat-sheet/" target="_blank" rel="external">GitHub Cheat Sheet</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A collection of cool hidden and not so hidden features of Git and GitHub. This cheat sheet was inspired by &lt;a href=&quot;https://github.com/holman&quot;&gt;Zach Holman&lt;/a&gt;‘s &lt;a href=&quot;http://confreaks.tv/videos/aloharuby2012-git-and-github-secrets&quot;&gt;Git and GitHub Secrets&lt;/a&gt; talk at Aloha Ruby Conference 2012 (&lt;a href=&quot;https://speakerdeck.com/holman/git-and-github-secrets&quot;&gt;slides&lt;/a&gt;) and his &lt;a href=&quot;https://vimeo.com/72955426&quot;&gt;More Git and GitHub Secrets&lt;/a&gt; talk at WDCNZ 2013 (&lt;a href=&quot;https://speakerdeck.com/holman/more-git-and-github-secrets&quot;&gt;slides&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Shortlink: &lt;a href=&quot;http://git.io/sheet&quot;&gt;&lt;code&gt;http://git.io/sheet&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read this in other languages: &lt;a href=&quot;README.md&quot;&gt;English&lt;/a&gt;, &lt;a href=&quot;README.ko.md&quot;&gt;한국어&lt;/a&gt;, &lt;a href=&quot;README.ja.md&quot;&gt;日本語&lt;/a&gt;, &lt;a href=&quot;README.zh-cn.md&quot;&gt;简体中文&lt;/a&gt;, &lt;a href=&quot;README.zh-tw.md&quot;&gt;正體中文&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="GitHub" scheme="http://ipcreator.me/tags/GitHub/"/>
    
      <category term="Cheat Sheet" scheme="http://ipcreator.me/tags/Cheat-Sheet/"/>
    
  </entry>
  
  <entry>
    <title>List of Android UI/UX Libraries</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Android/3rdLib/list-of-android-ui-ux-libraries/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Android/3rdLib/list-of-android-ui-ux-libraries/</id>
    <published>2017-03-30T14:41:06.000Z</published>
    <updated>2017-03-30T14:51:31.317Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/1131548cf666e1150ebd2a52f44776d539f06324/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f6d61737465722f6d656469612f6c6f676f2e737667" alt="Awesome"></p>
<p>A curated list of awesome Android UI/UX libraries.</p>
<a id="more"></a>
<h1 id="List-of-Android-UI-UX-Libraries-1"><a href="#List-of-Android-UI-UX-Libraries-1" class="headerlink" title="List of Android UI/UX Libraries[1]"></a>List of Android UI/UX Libraries<sup>[1]<sup></sup></sup></h1><h2 id="Index-light-weight-pages"><a href="#Index-light-weight-pages" class="headerlink" title="Index (light-weight pages)"></a>Index <code>(light-weight pages)</code></h2><ul>
<li><a href="pages/Material.md">Material</a></li>
<li><a href="pages/Layout.md">Layout</a></li>
<li><a href="pages/Button.md">Button</a></li>
<li><a href="pages/List-Grid.md">List / Grid</a></li>
<li><a href="pages/ViewPager.md">ViewPager</a></li>
<li><a href="pages/Label-Form.md">Label / Form</a></li>
<li><a href="pages/Image.md">Image</a></li>
<li><a href="pages/SeekBar.md">SeekBar</a></li>
<li><a href="pages/Progress.md">Progress</a></li>
<li><a href="pages/Menu.md">Menu</a></li>
<li><a href="pages/ActionBar.md">ActionBar</a></li>
<li><a href="pages/Dialog.md">Dialog</a></li>
<li><a href="pages/Calendar.md">Calendar</a></li>
<li><a href="pages/Graph.md">Graph</a></li>
<li><a href="pages/Animation.md">Animation</a></li>
<li><a href="pages/Parallax.md">Parallax</a></li>
<li><a href="pages/Effect.md">Effect (Blur… etc)</a></li>
<li><a href="pages/Other.md">Other</a></li>
</ul>
<h1 id="Material"><a href="#Material" class="headerlink" title="Material"></a>Material</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/navasmdc/MaterialDesignLibrary" target="_blank" rel="external">MaterialDesignLibrary</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialDesignLibrary.png" width="100%"> <img src="/art/MaterialDesignLibrary2.png" width="49%"> <img src="/art/MaterialDesignLibrary3.png" width="49%"> <img src="/art/MaterialDesignLibrary4.png" width="49%"> <img src="/art/MaterialDesignLibrary5.png" width="49%"> <img src="/art/MaterialDesignLibrary6.png" width="49%"> <img src="/art/MaterialDesignLibrary7.png" width="49%"> <img src="/art/MaterialDesignLibrary8.png" width="49%"> <img src="/art/MaterialDesignLibrary9.png" width="49%"> <img src="/art/MaterialDesignLibrary10.png" width="49%"> <img src="/art/MaterialDesignLibrary11.png" width="49%"> <img src="/art/MaterialDesignLibrary12.png" width="49%"> <img src="/art/MaterialDesignLibrary13.png" width="49%"> <img src="/art/MaterialDesignLibrary14.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ChrisRenke/DrawerArrowDrawable" target="_blank" rel="external">DrawerArrowDrawable</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/DrawerArrowDrawable.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/neokree/MaterialTabs" target="_blank" rel="external">MaterialTabs</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialTabs.png" width="49%"> <img src="/art/MaterialTabs2.png" width="49%"> <img src="/art/MaterialTabs3.jpeg" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/jpardogo/PagerSlidingTabStrip" target="_blank" rel="external">PagerSlidingTabStrip</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/PagerSlidingTabStrip.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/balysv/material-ripple" target="_blank" rel="external">material-ripple</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-ripple.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/traex/RippleEffect" target="_blank" rel="external">RippleEffect</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/RippleEffect.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/keklikhasan/LDrawer" target="_blank" rel="external">LDrawer</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/LDrawer.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/google/material-design-icons" target="_blank" rel="external">material-design-icons</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-design-icons.png" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/tekinarslan/AndroidMaterialDesignToolbar" target="_blank" rel="external">AndroidMaterialDesignToolbar</a></td>
<td>UnKnown</td>
<td><img src="/art/AndroidMaterialDesignToolbar.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/rengwuxian/MaterialEditText" target="_blank" rel="external">MaterialEditText</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialEditText.png" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/balysv/material-menu" target="_blank" rel="external">material-menu</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-menu.gif" alt=""> <img src="/art/material-menu2.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="external">material-dialogs</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-dialogs.webp" alt=""> <img src="/art/material-dialogs2.webp" alt=""> <img src="/art/material-dialogs3.webp" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/fengdai/AlertDialogPro" target="_blank" rel="external">AlertDialogPro</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AlertDialogPro.png" width="49%"> <img src="/art/AlertDialogPro2.png" width="49%"> <img src="/art/AlertDialogPro3.png" width="49%"> <img src="/art/AlertDialogPro4.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/neokree/MaterialNavigationDrawer" target="_blank" rel="external">MaterialNavigationDrawer</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialNavigationDrawer.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/drakeet/MaterialDialog" target="_blank" rel="external">MaterialDialog</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialDialog.png" width="49%"> <img src="/art/MaterialDialog2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/pnikosis/materialish-progress" target="_blank" rel="external">materialish-progress</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/materialish-progress.gif" width="49%"> <img src="/art/materialish-progress2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/makovkastar/FloatingActionButton" target="_blank" rel="external">FloatingActionButton</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/FloatingActionButton.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/futuresimple/android-floating-action-button" target="_blank" rel="external">android-floating-action-button</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-floating-action-button.gif" width="49%"> <img src="/art/android-floating-action-button.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/gowong/material-sheet-fab" target="_blank" rel="external">MaterialSheetFab</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/MaterialSheetFab.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/nispok/snackbar" target="_blank" rel="external">snackbar</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/snackbar.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ozodrukh/CircularReveal" target="_blank" rel="external">CircularReveal</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/CircularReveal.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/oli107/material-range-bar" target="_blank" rel="external">material-range-bar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-range-bar.png" width="49%"> <img src="/art/material-range-bar2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/sachin1092/Lollipop-AppCompat-Widgets-Skeleton" target="_blank" rel="external">Lollipop-AppCompat-Widgets-Skeleton</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/LollipopAppCompatWidgetSkeleton.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ZieIony/Carbon" target="_blank" rel="external">Carbon</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td>NONE</td>
</tr>
<tr>
<td><a href="https://github.com/prolificinteractive/material-calendarview" target="_blank" rel="external">material-calendarview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-calendarview.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/rey5137/material" target="_blank" rel="external">Material</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Material.gif" width="49%"> <img src="/art/Material2.gif" width="49%"> <img src="/art/Material3.gif" width="49%"> <img src="/art/Material4.gif" width="49%"> <img src="/art/Material5.gif" width="49%"> <img src="/art/Material6.gif" width="49%"> <img src="/art/Material7.gif" width="49%"> <img src="/art/Material8.gif" width="49%"> <img src="/art/Material9.gif" width="49%"> <img src="/art/Material10.gif" width="49%"> <img src="/art/Material11.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/code-mc/material-icon-lib" target="_blank" rel="external">Material Icon Library</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-icon-lib.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/SaeedMasoumi/FAB-Loading" target="_blank" rel="external">FAB-Loading</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FAB-Loading.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/florent37/MaterialTextField" target="_blank" rel="external">MaterialTextField</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialTextField.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/borax12/MaterialDateRangePicker" target="_blank" rel="external">MaterialDateRangePicker</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialDateRangePicker.png" width="49%"> <img src="/art/MaterialDateRangePicker2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/KeepSafe/TapTargetView" target="_blank" rel="external">TapTargetView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/TapTargetView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/sjwall/MaterialTapTargetPrompt" target="_blank" rel="external">MaterialTapTargetPrompt</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialTapTargetPrompt.jpg" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/john990/WaveView" target="_blank" rel="external">WaveView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/waveview.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/kyze8439690/ResideLayout" target="_blank" rel="external">ResideLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ResideLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/AndroidSwipeLayout" target="_blank" rel="external">AndroidSwipeLayout</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/AndroidSwipeLayout.gif" width="49%"> <img src="/art/AndroidSwipeLayout2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ikew0ng/SwipeBackLayout" target="_blank" rel="external">SwipeBackLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/SwipeBackLayout.webp" width="49%"> <img src="/art/SwipeBackLayout2.webp" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/christophesmet/android_maskable_layout" target="_blank" rel="external">Maskable Layout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android_maskable_layout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/traex/ExpandableLayout" target="_blank" rel="external">ExpandableLayout</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/ExpandableLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/baoyongzhang/android-PullRefreshLayout" target="_blank" rel="external">android-PullRefreshLayout</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/android-PullRefreshLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/moagrius/TileView" target="_blank" rel="external">TileView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/TileView.jpeg" width="49%"> <img src="/art/TileView2.jpeg" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/amlcurran/ShowcaseView" target="_blank" rel="external">ShowcaseView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ShowcaseView.png" width="49%"> <img src="/art/ShowcaseView2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">Ultra Pull To Refresh</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-Ultra-Pull-To-Refresh.gif" width="49%"> <img src="/art/android-Ultra-Pull-To-Refresh2.gif" width="49%"> <img src="/art/android-Ultra-Pull-To-Refresh3.gif" width="49%"> <img src="/art/android-Ultra-Pull-To-Refresh4.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/AndroidViewHover" target="_blank" rel="external">AndroidViewHover</a></td>
<td>UnKnown</td>
<td><img src="/art/AndroidViewHover.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/pedrovgs/DraggablePanel" target="_blank" rel="external">DraggablePanel</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/DraggablePanel.gif" width="49%"> <img src="/art/DraggablePanel2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/r0adkll/Slidr" target="_blank" rel="external">Slidr</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Slidr.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Yalantis/Phoenix" target="_blank" rel="external">Phoenix Pull-to-Refresh</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Phoenix.gif" width="65%"></td>
</tr>
<tr>
<td><a href="https://github.com/Yalantis/Taurus" target="_blank" rel="external">Pull-to-Refresh.Tours</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Taurus.gif" width="65%"></td>
</tr>
<tr>
<td><a href="https://github.com/zhaozhentao/InboxLayout" target="_blank" rel="external">InboxLayout</a></td>
<td>UnKnown</td>
<td><img src="/art/InboxLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/liuguangqiang/SwipeBack" target="_blank" rel="external">SwipeBack</a></td>
<td>UnKnown</td>
<td><img src="/art/SwipeBack.gif" width="49%"> <img src="/art/SwipeBack2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ogaclejapan/ArcLayout" target="_blank" rel="external">ArcLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/arclayout1.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ppamorim/Dragger" target="_blank" rel="external">Dragger</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Dragger.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/Jawnnypoo/PhysicsLayout" target="_blank" rel="external">PhysicsLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/PhysicsLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Flipboard/bottomsheet" target="_blank" rel="external">BottomSheet</a></td>
<td><a href="https://github.com/Flipboard/bottomsheet/blob/master/LICENSE" target="_blank" rel="external">License</a></td>
<td><img src="/art/BottomSheet.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/txusballesteros/bubbles-for-android" target="_blank" rel="external">Bubbles for Android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/bubbles-for-android.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/umano/AndroidSlidingUpPanel" target="_blank" rel="external">AndroidSlidingUpPanel</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AndroidSlidingUpPanel.jpg" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/kaichunlin/android-transition" target="_blank" rel="external">android-transition</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-transition.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/tuesda/CircleRefreshLayout" target="_blank" rel="external">CircleRefreshLayout</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/CircleRefreshLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/recruit-lifestyle/WaveSwipeRefreshLayout" target="_blank" rel="external">WaveSwipeRefreshLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/WaveSwipeRefreshLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/recruit-lifestyle/FloatingView" target="_blank" rel="external">FloatingView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FloatingView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/pyricau/frenchtoast" target="_blank" rel="external">FrenchToast</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/frenchtoast.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/zzz40500/AndroidSweetSheet" target="_blank" rel="external">AndroidSweetSheet</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AndroidSweetSheet.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/truizlop/FABRevealLayout" target="_blank" rel="external">FABRevealLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FABRevealLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/fenjuly/ToggleExpandLayout" target="_blank" rel="external">ToggleExpandLayout</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/ToggleExpandLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/mxn21/FlowingDrawer" target="_blank" rel="external">FlowingDrawer</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FlowingDrawer.gif" width="65%"></td>
</tr>
<tr>
<td><a href="https://github.com/gelitenight/WaveView" target="_blank" rel="external">WaveView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/gelitenight-WaveView.gif" width="65%"></td>
</tr>
<tr>
<td><a href="https://github.com/worldline/FoldableLayout" target="_blank" rel="external">FoldableLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FoldableLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/shts/TriangleLabelView" target="_blank" rel="external">TriangleLabelView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/TriangleLabelView.jpg" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/google/flexbox-layout" target="_blank" rel="external">FlexboxLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FlexboxLayout.gif" width="49%"> <img src="/art/FlexboxLayout2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Quatja/Vorolay" target="_blank" rel="external">Vorolay</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Vorolay.png" width="49%"> <img src="/art/Vorolay2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/google/hover" target="_blank" rel="external">Hover</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/hover.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/dmytrodanylyk/circular-progress-button" target="_blank" rel="external">circular-progress-button</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/circular-progress-button.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/dmytrodanylyk/android-process-button" target="_blank" rel="external">android-process-button</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-process-button.gif" width="75%"> <img src="/art/android-process-button2.gif" width="75%"></td>
</tr>
<tr>
<td><a href="https://github.com/markushi/android-circlebutton" target="_blank" rel="external">android-circlebutton</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-circlebutton.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/hoang8f/android-flat-button" target="_blank" rel="external">android-flat-button</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-flat-button.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/TheFinestArtist/MovingButton" target="_blank" rel="external">MovingButton</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/MovingButton.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/linger1216/labelview" target="_blank" rel="external">LabelView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="https://github.com/linger1216/labelview/blob/master/img/img1.png" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="List-Grid"><a href="#List-Grid" class="headerlink" title="List / Grid"></a>List / Grid</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/Malinskiy/SuperRecyclerView" target="_blank" rel="external">SuperRecyclerView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td>NONE</td>
</tr>
<tr>
<td><a href="https://github.com/CodeFalling/RecyclerViewSwipeDismiss" target="_blank" rel="external">RecyclerViewSwipeDismiss</a></td>
<td>UnKnown</td>
<td><img src="/art/RecyclerViewSwipeDismiss.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/jpardogo/FlabbyListView" target="_blank" rel="external">FlabbyListView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FlabbyListView.gif" width="49%"> <img src="/art/FlabbyListView2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/eowise/recyclerview-stickyheaders" target="_blank" rel="external">recyclerview-stickyheaders</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/recyclerview-stickyheaders.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Gnod/ParallaxListView" target="_blank" rel="external">ParallaxListView</a></td>
<td>UnKnown</td>
<td><img src="/art/ParallaxListView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Frank-Zhu/PullZoomView" target="_blank" rel="external">PullZoomView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/PullZoomView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/baoyongzhang/SwipeMenuListView" target="_blank" rel="external">SwipeMenuListView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/SwipeMenuListView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/flavienlaurent/discrollview" target="_blank" rel="external">discrollview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/discrollview.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/emilsjolander/StickyListHeaders" target="_blank" rel="external">StickyListHeaders</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/StickyListHeaders.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/jpardogo/ListBuddies" target="_blank" rel="external">ListBuddies</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ListBuddies.png" width="49%"> <img src="/art/ListBuddies.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ksoichiro/Android-ObservableScrollView" target="_blank" rel="external">Android-ObservableScrollView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Android-ObservableScrollView.gif" width="32%"> <img src="/art/Android-ObservableScrollView.gif" width="32%"> <img src="/art/Android-ObservableScrollView2.gif" width="32%"> <img src="/art/Android-ObservableScrollView3.gif" width="32%"> <img src="/art/Android-ObservableScrollView4.gif" width="32%"> <img src="/art/Android-ObservableScrollView5.gif" width="32%"> <img src="/art/Android-ObservableScrollView6.gif" width="32%"> <img src="/art/Android-ObservableScrollView7.gif" width="32%"> <img src="/art/Android-ObservableScrollView8.gif" width="32%"> <img src="/art/Android-ObservableScrollView9.gif" width="32%"> <img src="/art/Android-ObservableScrollView10.gif" width="32%"> <img src="/art/Android-ObservableScrollView11.gif" width="32%"> <img src="/art/Android-ObservableScrollView12.gif" width="32%"> <img src="/art/Android-ObservableScrollView13.gif" width="32%"></td>
</tr>
<tr>
<td><a href="https://github.com/felipecsl/AsymmetricGridView" target="_blank" rel="external">AsymmetricGridView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AsymmetricGridView.png" width="49%"> <img src="/art/AsymmetricGridView2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/askerov/DynamicGrid" target="_blank" rel="external">DynamicGrid</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/DynamicGrid.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/etsy/AndroidStaggeredGrid" target="_blank" rel="external">AndroidStaggeredGrid</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AndroidStaggeredGrid.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/47deg/android-swipelistview" target="_blank" rel="external">SwipeListView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-swipelistview.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/kanytu/android-parallax-recyclerview" target="_blank" rel="external">android-parallax-recyclerview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-parallax-recyclerview.gif" width="49%"> <img src="/art/android-parallax-recyclerview2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/emmano/BlurStickyHeaderListView" target="_blank" rel="external">BlurStickyHeaderListView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/BlurStickyHeaderListView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/wasabeef/recyclerview-animators" target="_blank" rel="external">RecyclerView Animators</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/recyclerview-animators.gif" width="49%"> <img src="/art/recyclerview-animators2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/yqritc/RecyclerView-FlexibleDivider" target="_blank" rel="external">RecyclerView-FlexibleDivider</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/RecyclerView-FlexibleDivider.png" width="49%"> <img src="/art/RecyclerView-FlexibleDivider2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/bmelnychuk/AndroidTreeView" target="_blank" rel="external">AndroidTreeView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AndroidTreeView.webp" width="49%"> <img src="/art/AndroidTreeView2.webp" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/danoz73/RecyclerViewFastScroller" target="_blank" rel="external">RecyclerViewFastScroller</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/RecyclerViewFastScroller.png" width="49%"> <img src="/art/RecyclerViewFastScroller2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/yqritc/RecyclerView-MultipleViewTypesAdapter" target="_blank" rel="external">RecyclerView-MultipleViewTypesAdapter</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/RecyclerView-MultipleViewTypesAdapter.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/vcalvello/SwipeToAction" target="_blank" rel="external">SwipeToAction</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/SwipeToAction.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/h6ah4i/android-advancedrecyclerview" target="_blank" rel="external">Advanced Recyclerview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AdvancedRecyclerView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/magiepooh/RecyclerItemDecoration" target="_blank" rel="external">RecyclerItemDecoration</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/recycler-itemdecoration1.gif" width="49%"> <img src="/art/recycler-itemdecoration2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ZieIony/MaterialRecents" target="_blank" rel="external">MaterialRecents</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialRecents.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Karumi/Dividers" target="_blank" rel="external">Dividers</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Dividers.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/afollestad/drag-select-recyclerview" target="_blank" rel="external">Drag Select Recycler View</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/drag-select-recyclerview.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/timehop/sticky-headers-recyclerview" target="_blank" rel="external">sticky-headers-recyclerview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/sticky-headers-recyclerview.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="ViewPager"><a href="#ViewPager" class="headerlink" title="ViewPager"></a>ViewPager</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/xgc1986/ParallaxPagerTransformer" target="_blank" rel="external">ParallaxPagerTransformer</a></td>
<td>UnKnown</td>
<td><img src="/art/ParallaxPagerTransformer.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ToxicBakery/ViewPagerTransforms" target="_blank" rel="external">ViewPagerTransforms</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ViewPagerTransforms.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ongakuer/CircleIndicator" target="_blank" rel="external">CircleIndicator</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/CircleIndicator.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/ViewPagerIndicator" target="_blank" rel="external">Android ViewPagerIndicator</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Android-ViewPagerIndicator.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/kmshack/Android-ParallaxHeaderViewPager" target="_blank" rel="external">Android-ParallaxHeaderViewPager</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Android-ParallaxHeaderViewPager.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/alexzaitsev/freepager" target="_blank" rel="external">freepager</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/freepager.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/chenupt/SpringIndicator" target="_blank" rel="external">SpringIndicator</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/SpringIndicator.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ogaclejapan/SmartTabLayout" target="_blank" rel="external">SmartTabLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/smarttablayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Yalantis/FlipViewPager.Draco" target="_blank" rel="external">FlipViewPager.Draco</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FlipViewPager-Draco.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/florent37/MaterialViewPager" target="_blank" rel="external">MaterialViewPager</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialViewPager.png" width="49%"> <img src="/art/MaterialViewPager2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/LyndonChin/AndroidRubberIndicator" target="_blank" rel="external">AndroidRubberIndicator</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/AndroidRubberIndicator.gif" width="60%"></td>
</tr>
<tr>
<td><a href="https://github.com/florent37/HollyViewPager" target="_blank" rel="external">HollyViewPager</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/HollyViewPager.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/sacot41/SCViewPager" target="_blank" rel="external">SCViewPager</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/SCViewPager.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/roughike/SwipeSelector" target="_blank" rel="external">SwipeSelector</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/SwipeSelector.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/DevLight-Mobile-Agency/NavigationTabStrip" target="_blank" rel="external">NavigationTabStrip</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a> &amp; <a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/NavigationTabStrip.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/DevLight-Mobile-Agency/NavigationTabBar" target="_blank" rel="external">NavigationTabBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a> &amp; <a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/NavigationTabBar.gif" width="49%"> <img src="/art/NavigationTabBar2.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="Label-Form"><a href="#Label-Form" class="headerlink" title="Label / Form"></a>Label / Form</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/RomainPiel/Shimmer-android" target="_blank" rel="external">Shimmer-android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Shimmer-android.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/facebook/shimmer-android" target="_blank" rel="external">Shimmer for Android</a></td>
<td><a href="http://opensource.org/licenses/BSD-2-Clause" target="_blank" rel="external">BSD 2 License</a></td>
<td><img src="/art/shimmer-android-fb.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/RomainPiel/Titanic" target="_blank" rel="external">Titanic</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Titanic.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/Rogero0o/MatchView" target="_blank" rel="external">MatchView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MatchView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/grantland/android-autofittextview" target="_blank" rel="external">android-autofittextview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-autofittextview.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/matthewrkula/SecretTextView" target="_blank" rel="external">SecretTextView</a></td>
<td>UnKnown</td>
<td><img src="/art/SecretTextView.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/bluejamesbond/TextJustify-Android" target="_blank" rel="external">TextJustify-Android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/TextJustify-Android.png" width="100%"> <img src="/art/TextJustify-Android2.jpeg" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/pavlospt/RoundedLetterView" target="_blank" rel="external">RoundedLetterView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/RoundedLetterView.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/amulyakhare/TextDrawable" target="_blank" rel="external">TextDrawable</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/TextDrawable.png" width="49%"> <img src="/art/TextDrawable2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/quiqueqs/BabushkaText" target="_blank" rel="external">BabushkaText</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/BabushkaText.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Manabu-GT/ExpandableTextView" target="_blank" rel="external">ExpandableTextView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ExpandableTextView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/wrapp/floatlabelededittext" target="_blank" rel="external">Float Labeled EditText</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/floatlabelededittext.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/erchenger/SizeAdjustingTextView" target="_blank" rel="external">SizeAdjustingTextView</a></td>
<td><a href="http://www.gnu.org/licenses/gpl-3.0.en.html" target="_blank" rel="external">GNU License</a></td>
<td>NONE</td>
</tr>
<tr>
<td><a href="https://github.com/gotokatsuya/ParkedTextView" target="_blank" rel="external">ParkedTextView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/ParkedTextView.gif" width="60%"></td>
</tr>
<tr>
<td><a href="https://github.com/glomadrian/material-code-input" target="_blank" rel="external">Material Code input</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-code-input.gif" width="60%"> <br><br> <img src="/art/material-code-input2.gif" width="60%"></td>
</tr>
<tr>
<td><a href="https://github.com/elevenetc/TextSurface" target="_blank" rel="external">TextSurface</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/TextSurface.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/tasomaniac/EmailAutoCompleteTextView" target="_blank" rel="external">EmailAutoCompleteTextView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/EmailAutoCompleteTextView.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/xenione/tab-digit" target="_blank" rel="external">Tab Digit</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/tab-digit.gif" width="49%"> <img src="/art/tab-digit2.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/MikeOrtiz/TouchImageView" target="_blank" rel="external">TouchImageView</a></td>
<td><a href="https://raw.githubusercontent.com/MikeOrtiz/TouchImageView/master/LICENSE" target="_blank" rel="external">LICENSE</a></td>
<td>NONE</td>
</tr>
<tr>
<td><a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="external">CircleImageView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/CircleImageView.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/siyamed/android-shape-imageview" target="_blank" rel="external">android-shape-imageview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-shape-imageview.png" width="49%"> <img src="/art/android-shape-imageview2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/felipecsl/GifImageView" target="_blank" rel="external">GifImageView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/GifImageView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/edmodo/cropper" target="_blank" rel="external">cropper</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/cropper.jpeg" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/jdamcd/android-crop" target="_blank" rel="external">android-crop</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-crop.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/pungrue26/SelectableRoundedImageView" target="_blank" rel="external">SelectableRoundedImageView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/SelectableRoundedImageView.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/vinc3m1/RoundedImageView" target="_blank" rel="external">RoundedImageView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/RoundedImageView.png" width="49%"> <img src="/art/RoundedImageView2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/cesards/CropImageView" target="_blank" rel="external">CropImageView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/CropImageView.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/cooltechworks/BitmapMerger" target="_blank" rel="external">BitmapMerger</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/BitmapMerger.gif" width="49%"> <img src="/art/BitmapMerger2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Q42/AndroidScrollingImageView" target="_blank" rel="external">Scrolling Image View</a></td>
<td>NONE</td>
<td><img src="/art/AndroidScrollingImageView.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/DanielMartinus/Pixelate" target="_blank" rel="external">Pixelate Android</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/android-pixelate.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/IsseiAoki/SimpleCropView" target="_blank" rel="external">SimpleCropView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/SimpleCropView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/lankton/android-anyshape" target="_blank" rel="external">android-anyshape</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/android-anyshape.jpg" width="49%"> <img src="/art/android-anyshape2.jpg" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/gjiazhe/PanoramaImageView" target="_blank" rel="external">PanoramaImageView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/PanoramaImageView.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="SeekBar"><a href="#SeekBar" class="headerlink" title="SeekBar"></a>SeekBar</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/AnderWeb/discreteSeekBar" target="_blank" rel="external">DiscreteSeekBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/discreteseekbar.gif" alt=""> <img src="/art/discreteseekbar2.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/ahmedrizwan/SeekBarCompat" target="_blank" rel="external">SeekBarCompat</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/seekbarcompat.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/rubensousa/PreviewSeekBar" target="_blank" rel="external">PreviewSeekBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/PreviewSeekBar.gif" alt=""></td>
</tr>
</tbody>
</table>
<h1 id="Progress"><a href="#Progress" class="headerlink" title="Progress"></a>Progress</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/castorflex/SmoothProgressBar" target="_blank" rel="external">SmoothProgressBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/SmoothProgressBar.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/NumberProgressBar" target="_blank" rel="external">NumberProgressBar</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/NumberProgressBar.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/lzyzsd/CircleProgress" target="_blank" rel="external">CircleProgress</a></td>
<td>UnKnown</td>
<td><img src="/art/CircleProgress.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/mrwonderman/android-square-progressbar" target="_blank" rel="external">android-square-progressbar</a></td>
<td>UnKnown</td>
<td><img src="/art/android-square-progressbar.png" width="49%"> <img src="/art/android-square-progressbar2.png" width="49%"> <img src="/art/android-square-progressbar3.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/jpardogo/GoogleProgressBar" target="_blank" rel="external">GoogleProgressBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/GoogleProgressBar.gif" width="32%"> <img src="/art/GoogleProgressBar2.gif" width="32%"> <img src="/art/GoogleProgressBar3.gif" width="32%"></td>
</tr>
<tr>
<td><a href="https://github.com/akexorcist/Android-RoundCornerProgressBar" target="_blank" rel="external">Android-RoundCornerProgressBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Android-RoundCornerProgressBar.png" width="100%"> <img src="/art/Android-RoundCornerProgressBar2.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/Tibolte/ElasticDownload" target="_blank" rel="external">ElasticDownload</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ElasticDownload.gif" width="49%"> <img src="/art/ElasticDownload2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/JorgeCastilloPrz/FABProgressCircle" target="_blank" rel="external">FABProgressCircle</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FABProgressCircle.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/yankai-victor/Loading" target="_blank" rel="external">Loading</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Loading.gif" width="49%"> <img src="/art/Loading2.gif" width="49%"> <img src="/art/Loading3.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/jlmd/AnimatedCircleLoadingView" target="_blank" rel="external">Animated Circle Loading View</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AnimatedCircleLoadingView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/JorgeCastilloPrz/AndroidFillableLoaders" target="_blank" rel="external">AndroidFillableLoaders</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AndroidFillableLoaders.gif" width="49%"> <img src="/art/AndroidFillableLoaders2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/d-max/spots-dialog" target="_blank" rel="external">spots-dialog</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/spots_dialog.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/81813780/AVLoadingIndicatorView" target="_blank" rel="external">AVLoadingIndicatorView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AVLoadingIndicatorView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/EyalBira/loading-dots" target="_blank" rel="external">LoadingDots</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/loading-dots.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Shinelw/ColorArcProgressBar" target="_blank" rel="external">ColorArcProgerssBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Android-ColorArcProgressBar.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/GIGAMOLE/ArcProgressStackView" target="_blank" rel="external">ArcProgressStackView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ArcProgressStackView.gif" width="49%"> <img src="/art/ArcProgressStackView2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/tangqi92/WaveLoadingView" target="_blank" rel="external">WaveLoadingView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/WaveLoadingView.jpg" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Rogero0o/CatLoadingView" target="_blank" rel="external">CatLoadingView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/CatLoadingView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/race604/WaveLoading" target="_blank" rel="external">WaveLoading</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/race604-WaveLoading.gif" width="60%"></td>
</tr>
</tbody>
</table>
<h1 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/oguzbilgener/CircularFloatingActionMenu" target="_blank" rel="external">CircularFloatingActionMenu</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/CircularFloatingActionMenu.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/SpecialCyCi/AndroidResideMenu" target="_blank" rel="external">AndroidResideMenu</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/AndroidResideMenu.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/dkmeteor/Folder-ResideMenu" target="_blank" rel="external">Folder-ResideMenu</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Folder-ResideMenu.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Yalantis/Side-Menu.Android" target="_blank" rel="external">Side-Menu.Android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Side-Menu.Android.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/Yalantis/Context-Menu.Android" target="_blank" rel="external">Context-Menu.Android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Context-Menu.Android.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/Yalantis/GuillotineMenu-Android" target="_blank" rel="external">GuillotineMenu-Android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/GuillotineMenu-Android.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/xmuSistone/android-snake-menu" target="_blank" rel="external">android-snake-menu</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-snake-menu.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Nightonke/BoomMenu" target="_blank" rel="external">BoomMenu</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/BoomMenu.gif" width="49%"> <img src="/art/BoomMenu2.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="ActionBar"><a href="#ActionBar" class="headerlink" title="ActionBar"></a>ActionBar</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/ManuelPeinado/FadingActionBar" target="_blank" rel="external">FadingActionBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FadingActionBar.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/ManuelPeinado/GlassActionBar" target="_blank" rel="external">GlassActionBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/GlassActionBar.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/flavienlaurent/NotBoringActionBar" target="_blank" rel="external">NotBoringActionBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/NotBoringActionBar.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/orhanobut/dialogplus" target="_blank" rel="external">DialogPlus</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/DialogPlus.png" width="30%"> <img src="/art/DialogPlus2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/pedant/sweet-alert-dialog" target="_blank" rel="external">Sweet Alert</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/swalert_change_type.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/H07000223/FlycoDialog_Master" target="_blank" rel="external">FlycoDialog-Matser</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/FlycoDialog-Matser.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/roomorama/Caldroid" target="_blank" rel="external">Caldroid</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/Caldroid.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/square/android-times-square" target="_blank" rel="external">android-times-square</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-times-square.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/romannurik/Android-MonthCalendarWidget" target="_blank" rel="external">Android-MonthCalendarWidget</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Android-MonthCalendarWidget.png" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/code-troopers/android-betterpickers" target="_blank" rel="external">android-betterpickers</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-betterpickers.png" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/alamkanak/Android-Week-View" target="_blank" rel="external">Android-Week-View</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Android-Week-View.png" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/NLMartian/SilkCal" target="_blank" rel="external">SilkCal</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/SilkCat.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/vikramkakkar/SublimePicker" target="_blank" rel="external">SublimePicker</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/sublimePicker_date.png" width="49%">  <img src="/art/sublimePicker_time.png" width="49%"> <img src="/art/sublimePicker_repeat.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/wdullaer/MaterialDateTimePicker" target="_blank" rel="external">MaterialDateTimePicker</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialDateTimePicker_date.png" width="49%">  <img src="/art/MaterialDateTimePicker_time.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/SundeepK/CompactCalendarView" target="_blank" rel="external">CompactCalendarView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/compact-calendar-demo.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/blackfizz/EazeGraph" target="_blank" rel="external">EazeGraph</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/EazeGraph.png" width="49%"> <img src="/art/EazeGraph2.png" width="49%"> <img src="/art/EazeGraph3.png" width="49%"> <img src="/art/EazeGraph4.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/jjoe64/GraphView" target="_blank" rel="external">GraphView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/graphview-zooming.gif" width="65%"> <img src="/art/graphview-anim.gif" width="65%"></td>
</tr>
<tr>
<td><a href="https://github.com/lecho/hellocharts-android" target="_blank" rel="external">hellocharts-android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/hellocharts-android.gif" width="49%"> <img src="/art/hellocharts-android2.png" width="49%"> <img src="/art/hellocharts-android3.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/PhilJay/MPAndroidChart" target="_blank" rel="external">MPAndroidChart</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MPAndroidChart.png" width="49%"> <img src="/art/MPAndroidChart2.png" width="49%"> <img src="/art/MPAndroidChart3.png" width="49%"> <img src="/art/MPAndroidChart4.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/diogobernardino/WilliamChart" target="_blank" rel="external">WilliamChart</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/williamchart_line.png" width="65%"> <img src="/art/williamchart_bar.png" width="65%"></td>
</tr>
</tbody>
</table>
<h1 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="external">AndroidViewAnimations</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/androidviewanimations.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/nhaarman/ListViewAnimations" target="_blank" rel="external">ListViewAnimations</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ListViewAnimations.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/AndroidImageSlider" target="_blank" rel="external">AndroidImageSlider</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/AndroidImageSlider.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/andkulikov/transitions-everywhere" target="_blank" rel="external">transitions-everywhere</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/transitions-everywhere.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/skyfishjy/android-ripple-background" target="_blank" rel="external">Android Ripple Background</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/android-ripple-background.gif" width="49%"> <img src="/art/android-ripple-background2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/openaphid/android-flip" target="_blank" rel="external">android-flip</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/android-flip.gif" width="49%"> <img src="/art/android-flip2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/DesarrolloAntonio/FragmentTransactionExtended" target="_blank" rel="external">FragmentTransactionExtended</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FragmentTransactionExtended.gif" width="49%"> <img src="/art/FragmentTransactionExtended2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/flavioarfaria/KenBurnsView" target="_blank" rel="external">KenBurnsView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/KenBurnsView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/facebook/rebound" target="_blank" rel="external">rebound</a></td>
<td><a href="http://opensource.org/licenses/BSD-2-Clause" target="_blank" rel="external">BSD 2 License</a></td>
<td><a href="http://facebook.github.io/rebound/" target="_blank" rel="external">http://facebook.github.io/rebound/</a></td>
</tr>
<tr>
<td><a href="https://github.com/sakebook/Reachability" target="_blank" rel="external">Reachability</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Reachability.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/AnimationEasingFunctions" target="_blank" rel="external">AnimationEasingFunctions</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/AnimationEasingFunctions.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/2359media/EasyAndroidAnimations" target="_blank" rel="external">EasyAndroidAnimations</a></td>
<td>UnKnown</td>
<td><img src="/art/EasyAndroidAnimations.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/geftimov/android-pathview" target="_blank" rel="external">android-pathview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-pathview.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/sephiroth74/ViewRevealAnimator" target="_blank" rel="external">ViewRevealAnimator</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ViewRevealAnimator.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/asyl/ArcAnimator" target="_blank" rel="external">ArcAnimator</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/ArcAnimator.gif" width="49%"> <img src="/art/ArcAnimator2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/kongnanlive/SearchMenuAnim" target="_blank" rel="external">SearchMenuAnim</a></td>
<td>UnKnown</td>
<td><img src="/art/SearchMenuAnim.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/cdflynn/crossview" target="_blank" rel="external">Cross View</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/crossview.gif" width="49%"> <img src="/art/crossview2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Nightonke/WoWoViewPager" target="_blank" rel="external">WoWoViewPager</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/WoWoAppIntroExample.gif" width="49%"> <img src="/art/WoWoCVExample.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Lottie for Android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/lottie-android.gif" width="100%"> <img src="/art/lottie-android2.gif" width="100%"></td>
</tr>
</tbody>
</table>
<h1 id="Parallax"><a href="#Parallax" class="headerlink" title="Parallax"></a>Parallax</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/Narfss/ParallaxEverywhere" target="_blank" rel="external">ParallaxEverywhere</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/parallax-everywhere.gif" alt=""></td>
</tr>
</tbody>
</table>
<h1 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/Manabu-GT/EtsyBlur" target="_blank" rel="external">EtsyBlur</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/EtsyBlur.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/tvbarthel/BlurDialogFragment" target="_blank" rel="external">BlurDialogFragment</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/BlurDialogFragment.png" width="49%"> <img src="/art/BlurDialogFragment2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/faradaj/BlurBehind" target="_blank" rel="external">BlurBehind</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/BlurBehind.png" width="49%"> <img src="/art/BlurBehind2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/kikoso/android-stackblur" target="_blank" rel="external">Android StackBlur</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-stackblur.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/AndroidAlliance/EdgeEffectOverride" target="_blank" rel="external">EdgeEffectOverride</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/EdgeEffectOverride.jpeg" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/tyrantgit/ExplosionField" target="_blank" rel="external">ExplosionField</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ExplosionField.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/zhanyongsheng/BrokenView" target="_blank" rel="external">BrokenView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/BrokenView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/manolovn/trianglify" target="_blank" rel="external">Trianglify</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Trianglify.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ChadCSong/ShineButton" target="_blank" rel="external">ShineButton</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/ShineButton.gif" width="100%"></td>
</tr>
</tbody>
</table>
<h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/Diolor/Swipecards" target="_blank" rel="external">Swipecards</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Swipecards.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Bearded-Hen/Android-Bootstrap" target="_blank" rel="external">Android-Bootstrap</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/Android-Bootstrap.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/JoanZapata/android-pdfview" target="_blank" rel="external">Android PDFView</a></td>
<td><a href="http://opensource.org/licenses/GPL-3.0" target="_blank" rel="external">GPL V3</a></td>
<td><img src="/art/android-pdfview.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/lucasr/dspec" target="_blank" rel="external">Dspec</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/dspec.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/OrangeGangsters/LolliPin" target="_blank" rel="external">LolliPin</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/LolliPin.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/PaNaVTEC/DrawableView" target="_blank" rel="external">DrawableView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/DrawableView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/h6ah4i/android-materialshadowninepatch" target="_blank" rel="external">Material Shadow 9-Patch</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-materialshadowninepatch.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/championswimmer/SimpleFingerGestures_Android_Library" target="_blank" rel="external">SimpleFingerGestures</a></td>
<td><a href="https://github.com/championswimmer/SimpleFingerGestures_Android_Library/blob/master/LICENSE" target="_blank" rel="external">Apache License v2</a></td>
<td><img src="/art/SimpleFingerGestures1.gif" width="49%"> <img src="/art/SimpleFingerGestures2.gif" width="49%"> <img src="/art/SimpleFingerGestures3.gif" width="49%"> <img src="/art/SimpleFingerGestures4.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/chemouna/decor" target="_blank" rel="external">Decor</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/decor.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/tyorikan/voice-recording-visualizer" target="_blank" rel="external">Voice Recording Visualizer</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><a href="https://www.youtube.com/watch?v=fJTl1bgQ3j4" target="_blank" rel="external"><img src="http://img.youtube.com/vi/fJTl1bgQ3j4/0.jpg" alt="IMAGE demo"></a></td>
</tr>
<tr>
<td><a href="https://github.com/vsvankhede/easyfonts" target="_blank" rel="external">EasyFonts</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/easyfonts.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/klinker41/android-slidingactivity" target="_blank" rel="external">Android Sliding Activity Library</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-slidingactivity.gif" width="49%"> <img src="/art/android-slidingactivity2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/txusballesteros/snake" target="_blank" rel="external">Snake View</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/snake.gif" width="60%"></td>
</tr>
<tr>
<td><a href="https://github.com/yayaa/Rotatable" target="_blank" rel="external">Rotatable</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/Rotatable.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/laobie/StatusBarUtil" target="_blank" rel="external">StatusBarUtil</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/StatusBarUtil.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/Yalantis/Horizon" target="_blank" rel="external">Horizon - Simple visual equaliser for Android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Horizon.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/DanielMartinus/Stepper-Touch" target="_blank" rel="external">Stepper Touch</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/StepperTouch.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h2 id="Other-lists"><a href="#Other-lists" class="headerlink" title="Other lists"></a>Other lists</h2><ul>
<li><em>Looking for Core Library? Check out</em> <a href="https://github.com/wasabeef/awesome-android-libraries" target="_blank" rel="external">wasabeef/awesome-android-libraries</a>.</li>
<li><em>Looking for iOS? Check out</em> <a href="https://github.com/cjwirth/awesome-ios-ui" target="_blank" rel="external">cjwirth/awesome-ios-ui</a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome-android-ui</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/1131548cf666e1150ebd2a52f44776d539f06324/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f6d61737465722f6d656469612f6c6f676f2e737667&quot; alt=&quot;Awesome&quot;&gt;&lt;/p&gt;
&lt;p&gt;A curated list of awesome Android UI/UX libraries.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="UI" scheme="http://ipcreator.me/tags/UI/"/>
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
      <category term="UX" scheme="http://ipcreator.me/tags/UX/"/>
    
  </entry>
  
  <entry>
    <title>Android Open Source Projects Organized by Trinea</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Android/3rdLib/catagory-of-open-sources-projects-of-android/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Android/3rdLib/catagory-of-open-sources-projects-of-android/</id>
    <published>2017-03-30T14:24:06.000Z</published>
    <updated>2017-03-30T15:17:56.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目前包括："><a href="#目前包括：" class="headerlink" title="目前包括："></a>目前包括：</h2><blockquote>
<p><a href="https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E4%B8%AA%E6%80%A7%E5%8C%96%E6%8E%A7%E4%BB%B6view" target="_blank" rel="external">Android 开源项目第一篇——个性化控件(View)篇</a><br><em>&nbsp;&nbsp;包括<br><a href="https://github.com/Trinea/android-open-project#%E4%B8%80listview" target="_blank" rel="external">ListView</a>、<a href="https://github.com/Trinea/android-open-project#%E4%BA%8Cactionbar" target="_blank" rel="external">ActionBar</a>、<a href="https://github.com/Trinea/android-open-project#%E4%B8%89menu" target="_blank" rel="external">Menu</a>、<a href="https://github.com/Trinea/android-open-project#%E5%9B%9Bviewpager-gallery" target="_blank" rel="external">ViewPager</a>、<a href="https://github.com/Trinea/android-open-project#%E5%9B%9Bviewpager-gallery" target="_blank" rel="external">Gallery</a>、<a href="https://github.com/Trinea/android-open-project#%E4%BA%94gridview" target="_blank" rel="external">GridView</a>、<a href="https://github.com/Trinea/android-open-project#%E5%85%ADimageview" target="_blank" rel="external">ImageView</a>、<a href="https://github.com/Trinea/android-open-project#%E4%B8%83progressbar" target="_blank" rel="external">ProgressBar</a>、<a href="https://github.com/Trinea/android-open-project#%E5%85%ABtextview" target="_blank" rel="external">TextView</a>、<a href="https://github.com/Trinea/android-open-project#%E4%B9%9Dscrollview" target="_blank" rel="external">ScrollView</a>、<a href="https://github.com/Trinea/android-open-project#%E5%8D%81timeview" target="_blank" rel="external">TimeView</a>、<a href="https://github.com/Trinea/android-open-project#%E5%8D%81%E4%B8%80tipview" target="_blank" rel="external">TipView</a>、<a href="https://github.com/Trinea/android-open-project#%E5%8D%81%E4%BA%8Cflipview" target="_blank" rel="external">FlipView</a>、<a href="https://github.com/Trinea/android-open-project#%E5%8D%81%E4%B8%89colorpickview" target="_blank" rel="external">ColorPickView</a>、<a href="https://github.com/Trinea/android-open-project#%E5%8D%81%E5%9B%9Bgraphview" target="_blank" rel="external">GraphView</a>、<a href="https://github.com/Trinea/android-open-project#%E5%8D%81%E4%BA%94ui-style" target="_blank" rel="external">UI Style</a>、<a href="https://github.com/Trinea/android-open-project#十六其他" target="_blank" rel="external">其他</a></em>  </p>
<p><a href="https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E5%B7%A5%E5%85%B7%E5%BA%93" target="_blank" rel="external">Android 开源项目第二篇——工具库篇</a><br><em>&nbsp;&nbsp;包括<a href="https://github.com/Trinea/android-open-project#一依赖注入-di" target="_blank" rel="external">依赖注入</a>、<a href="https://github.com/Trinea/android-open-project#二图片缓存" target="_blank" rel="external">图片缓存</a>、<a href="https://github.com/Trinea/android-open-project#三网络请求" target="_blank" rel="external">网络请求</a>、<a href="https://github.com/Trinea/android-open-project#四数据库-orm-工具包" target="_blank" rel="external">数据库 ORM 工具包</a>、<a href="https://github.com/Trinea/android-open-project#五android-公共库" target="_blank" rel="external">Android 公共库</a>、<a href="https://github.com/Trinea/android-open-project#六android-高版本向低版本兼容" target="_blank" rel="external">高版本向低版本兼容库</a>、<a href="https://github.com/Trinea/android-open-project#七多媒体相关" target="_blank" rel="external">多媒体</a>、<a href="https://github.com/Trinea/android-open-project#八事件总线订阅者模式" target="_blank" rel="external">事件总线</a>、<a href="https://github.com/Trinea/android-open-project#九传感器" target="_blank" rel="external">传感器</a>、<a href="https://github.com/Trinea/android-open-project#十安全" target="_blank" rel="external">安全</a>、<a href="https://github.com/Trinea/android-open-project#十一插件化" target="_blank" rel="external">插件化</a>、<a href="https://github.com/Trinea/android-open-project#十二文件" target="_blank" rel="external">文件</a>、<a href="https://github.com/Trinea/android-open-project#十三其他" target="_blank" rel="external">其他</a></em>  </p>
<p><a href="https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86-%E4%BC%98%E7%A7%80%E9%A1%B9%E7%9B%AE" target="_blank" rel="external">Android 开源项目第三篇——优秀项目篇</a><br><em>&nbsp;&nbsp;比较有意思的完整的 Android 项目</em>  </p>
<p><a href="https://github.com/Trinea/android-open-project#%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7" target="_blank" rel="external">Android 开源项目第四篇——开发及测试工具篇</a><br><em>&nbsp;&nbsp;包括<a href="https://github.com/Trinea/android-open-project#一开发效率工具" target="_blank" rel="external">开发效率工具</a>、<a href="https://github.com/Trinea/android-open-project#二开发自测相关" target="_blank" rel="external">开发自测相关</a>、<a href="https://github.com/Trinea/android-open-project#三测试工具" target="_blank" rel="external">测试工具</a>、<a href="https://github.com/Trinea/android-open-project#四开发及编译环境" target="_blank" rel="external">开发及编译环境</a>、<a href="https://github.com/Trinea/android-open-project#五其他" target="_blank" rel="external">其他</a></em>  </p>
<p><a href="https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86" target="_blank" rel="external">Android 开源项目第五篇——优秀个人和团体篇</a><br><em>&nbsp;&nbsp;乐于分享并且有一些很不错的开源项目的<a href="https://github.com/Trinea/android-open-project#一个人" target="_blank" rel="external">个人</a>和<a href="https://github.com/Trinea/android-open-project#二组织" target="_blank" rel="external">组织</a>，包括 JakeWharton、Chris Banes、Koushik Dutta 等大牛</em>  </p>
</blockquote>
<a id="more"></a>
<h1 id="Android-开源项目分类汇总-1"><a href="#Android-开源项目分类汇总-1" class="headerlink" title="Android 开源项目分类汇总[1]"></a>Android 开源项目分类汇总<sup>[1]<sup></sup></sup></h1><h2 id="第一部分-个性化控件-View"><a href="#第一部分-个性化控件-View" class="headerlink" title="第一部分 个性化控件(View)"></a>第一部分 个性化控件(View)</h2><p>主要介绍那些不错个性化的 View，包括 ListView、ActionBar、Menu、ViewPager、Gallery、GridView、ImageView、ProgressBar、TextView、ScrollView、TimeView、TipView、FlipView、ColorPickView、GraphView、UI Style 等等。  </p>
<h4 id="一、ListView"><a href="#一、ListView" class="headerlink" title="一、ListView"></a>一、ListView</h4><ol>
<li><p>android-pulltorefresh<br>一个强大的拉动刷新开源项目，支持各种控件下拉刷新，ListView、ViewPager、WebView、ExpandableListView、GridView、ScrollView、Horizontal  ScrollView、Fragment 上下左右拉动刷新，比下面 johannilsson 那个只支持 ListView 的强大的多。并且它实现的下拉刷新 ListView 在 item 不足一屏情况下也不会显示刷新提示，体验更好。<br>项目地址：<a href="https://github.com/chrisbanes/Android-PullToRefresh" target="_blank" rel="external">https://github.com/chrisbanes/Android-PullToRefresh</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true</a><br>APP 示例：新浪微博各个页面  </p>
</li>
<li><p>android-pulltorefresh-listview<br>下拉刷新 ListView，这个被很多人使用的项目实际有不少 bug，推荐使用 <a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">android-Ultra-Pull-to-Refresh</a><br>项目地址：<a href="https://github.com/johannilsson/android-pulltorefresh" target="_blank" rel="external">https://github.com/johannilsson/android-pulltorefresh</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true</a>  </p>
</li>
<li><p>android-Ultra-Pull-to-Refresh<br>下拉刷新，第一个项目已经停止维护了，并且使用起来相对复杂，定制性也差。这个是替代和改良方案。这个继承于 ViewGroup 可以包含任何 View。功能甚至比 SwipeRefreshLayout 强大。使用起来非常简单。良好的设计，如果你想定制自己的 UI 样式，非常简单，就像给 ListView 加一个 Header View 那么简单。支持 <code>API LEVEL &gt;= 8</code><br>项目地址：<a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/Grumoon/android-Ultra-Pull-To-Refresh 源码解析" target="_blank" rel="external">android-Ultra-Pull-to-Refresh</a><br>Demo 地址：<a href="https://raw.githubusercontent.com/liaohuqiu/android-Ultra-Pull-To-Refresh/master/ptr-demo.apk" target="_blank" rel="external">https://raw.githubusercontent.com/liaohuqiu/android-Ultra-Pull-To-Refresh/master/ptr-demo.apk</a><br>效果图：<img src="http://srain-github.qiniudn.com/ultra-ptr/contains-all-of-views.gif" alt="Renderings"><br><a href="http://srain-github.qiniudn.com/ultra-ptr/release-to-refresh.gif" target="_blank" rel="external">http://srain-github.qiniudn.com/ultra-ptr/release-to-refresh.gif</a><br><a href="http://srain-github.qiniudn.com/ultra-ptr/auto-refresh.gif" target="_blank" rel="external">http://srain-github.qiniudn.com/ultra-ptr/auto-refresh.gif</a><br><a href="http://srain-github.qiniudn.com/ultra-ptr/store-house-string-array.gif" target="_blank" rel="external">http://srain-github.qiniudn.com/ultra-ptr/store-house-string-array.gif</a>  </p>
</li>
<li><p>Android-PullToRefreshRecyclerView<br>支持下拉刷新的RecyclerView，同时支持滑动到底部自动加载数据、给RecyclerView添加Header。并且不更改原有RecyclerView的逻辑。<br><img src="https://github.com/HomHomLin/Android-PullToRefreshRecyclerView/blob/master/screenshot.gif" alt="Screenshot"><br>项目地址：<a href="https://github.com/HomHomLin/Android-PullToRefreshRecyclerView" target="_blank" rel="external">https://github.com/HomHomLin/Android-PullToRefreshRecyclerView</a><br>Demo地址：<a href="https://github.com/HomHomLin/Android-PullToRefreshRecyclerView/blob/master/sample.apk" target="_blank" rel="external">https://github.com/HomHomLin/Android-PullToRefreshRecyclerView/blob/master/sample.apk</a>  </p>
</li>
<li><p>DragSortListView<br>拖动排序的 ListView，同时支持 ListView 滑动 item 删除，各个 Item 高度不一、单选、复选、CursorAdapter 做为适配器、拖动背景变化等<br>项目地址：<a href="https://github.com/bauerca/drag-sort-listview" target="_blank" rel="external">https://github.com/bauerca/drag-sort-listview</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv</a><br>APP 示例：Wordpress Android  </p>
</li>
<li><p>SwipeListView<br>支持定义 ListView 左右滑动事件，支持左右滑动位移，支持定义动画时间<br>项目地址：<a href="https://github.com/47deg/android-swipelistview" target="_blank" rel="external">https://github.com/47deg/android-swipelistview</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview</a><br>APP 示例：微信</p>
</li>
<li><p>Android-SlidingLayout<br>实现类似QQ、微信ListView和WebView的上拉下拉弹跳效果和iOS的ListView的果冻效果。兼容Android自带库和兼容库的所有View组件，包括RecyclerView、ListView、ScrollView以及WebView等等。<br><img src="https://raw.githubusercontent.com/HomHomLin/SlidingLayout/master/pic/list.gif" alt="p1"><br><img src="https://raw.githubusercontent.com/HomHomLin/SlidingLayout/master/pic/webview.gif" alt="p2"><br>项目地址：<a href="https://github.com/HomHomLin/SlidingLayout/。" target="_blank" rel="external">https://github.com/HomHomLin/SlidingLayout/。</a><br>Demo地址：<a href="https://github.com/HomHomLin/SlidingLayout/tree/master/demo" target="_blank" rel="external">https://github.com/HomHomLin/SlidingLayout/tree/master/demo</a>  </p>
</li>
<li><p>SlideAndDragListView<br>支持ListView的Item的拖动排序、左右滑动事件，可自定义左右滑动显示文字、图标、位移，同时支持onItemClick、onItemLongClick等监听器，提供丰富的回调接口。<br>项目地址：<a href="https://github.com/yydcdut/SlideAndDragListView" target="_blank" rel="external">https://github.com/yydcdut/SlideAndDragListView</a><br>Demo 地址：<a href="https://github.com/yydcdut/SlideAndDragListView/blob/master/apk/sdlv.apk?raw=true" target="_blank" rel="external">https://github.com/yydcdut/SlideAndDragListView/blob/master/apk/sdlv.apk?raw=true</a><br>APP 示例：Android 手机QQ 5.0<br>效果图：<img src="https://raw.githubusercontent.com/yydcdut/SlideAndDragListView/master/gif/v1.1.gif" alt="Renderings">  </p>
</li>
<li><p>Android-SwipeToDismiss<br>滑动 Item 消失 ListView，支持 3.0 以下版本见：<a href="https://github.com/JakeWharton/SwipeToDismissNOA" target="_blank" rel="external">https://github.com/JakeWharton/SwipeToDismissNOA</a><br>项目地址：<a href="https://github.com/romannurik/Android-SwipeToDismiss" target="_blank" rel="external">https://github.com/romannurik/Android-SwipeToDismiss</a><br>Demo 地址：<a href="https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code" target="_blank" rel="external">https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code</a>  </p>
</li>
<li><p>RecyclerViewSwipeDismiss<br>轻量级支持 support-v7 中的 RecyclerView 的滑动删除(Swipe to dismiss)行为，不需要修改源代码，只要简单的绑定<code>onTouchListener</code><br>项目地址：<a href="https://github.com/CodeFalling/RecyclerViewSwipeDismiss" target="_blank" rel="external">https://github.com/CodeFalling/RecyclerViewSwipeDismiss</a><br>效果图：<img src="https://raw.githubusercontent.com/CodeFalling/RecyclerViewSwipeDismiss/master/RecyclerViewSwipeDismiss.gif" alt="Renderings">  </p>
</li>
<li><p>QuickSideBar<br>帮助快速查阅对应分组的侧边栏，可以配合任意列表，demo中给出配合RecyclerView(浮动分组使用stickyheadersrecyclerview)。<br>项目地址：<a href="https://github.com/saiwu-bigkoo/Android-QuickSideBar" target="_blank" rel="external">https://github.com/saiwu-bigkoo/Android-QuickSideBar</a><br>效果图：<img src="https://github.com/saiwu-bigkoo/Android-QuickSideBar/blob/master/preview/quicksidebardemo.gif" alt="Renderings"></p>
</li>
<li><p>async-expandable-list<br>支持异步加载子列表的 ExpandableListView，包括CollectionView可以显示小标题的列表<br>项目地址：<a href="https://github.com/Ericliu001/async-expandable-list" target="_blank" rel="external">https://github.com/Ericliu001/async-expandable-list</a></p>
</li>
</ol>
<p>效果图：</p>
<p><img src="https://cloud.githubusercontent.com/assets/3691022/19348717/0d6c98ec-919b-11e6-97c3-a8ff782a059b.gif" alt="Demo">  <img src="https://cloud.githubusercontent.com/assets/3691022/19406879/cb982648-92da-11e6-86bf-7c82e8505e6c.gif" alt="Demo"></p>
<ol>
<li><p>PinnedHeaderExpandableListView<br>首先它是一个 ExpandableListView，但是它的头部可以固定，其次，在它的上面还有一个头部可以来回伸缩<br>项目地址：<a href="https://github.com/singwhatiwanna/PinnedHeaderExpandableListView" target="_blank" rel="external">https://github.com/singwhatiwanna/PinnedHeaderExpandableListView</a><br>效果图：<img src="https://camo.githubusercontent.com/fa7f516b0b6e2921007a17cbc359b3f661f32226/687474703a2f2f696d672e626c6f672e6373646e2e6e65742f32303134303531313135313534363834333f77617465726d61726b2f322f746578742f6148523063446f764c324a736232637559334e6b626935755a58517663326c755a33646f5958527064324675626d453d2f666f6e742f3561364c354c32542f666f6e7473697a652f3430302f66696c6c2f49304a42516b46434d413d3d2f646973736f6c76652f37302f677261766974792f536f75746845617374" alt="Renderings"><br>APP 示例：百度手机卫士垃圾清理界面  </p>
</li>
<li><p>StickyListHeaders<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView，支持快速滑动，支持 Android2.3 及以上<br>项目地址：<a href="https://github.com/emilsjolander/StickyListHeaders" target="_blank" rel="external">https://github.com/emilsjolander/StickyListHeaders</a><br>效果图：<img src="https://raw.github.com/emilsjolander/StickyListHeaders/master/demo.gif" alt="Renderings"><br>APP 示例：Android 4.0 联系人  </p>
</li>
<li><p>pinned-section-listview<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView<br>项目地址：<a href="https://github.com/beworker/pinned-section-listview" target="_blank" rel="external">https://github.com/beworker/pinned-section-listview</a><br>效果图：<img src="https://raw.github.com/beworker/pinned-section-listview/master/screen1.png" alt="Renderings">  </p>
</li>
<li><p>PinnedHeaderListView<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView<br>项目地址：<a href="https://github.com/JimiSmith/PinnedHeaderListView" target="_blank" rel="external">https://github.com/JimiSmith/PinnedHeaderListView</a>  </p>
</li>
<li><p>QuickReturn<br>ListView/ScrollView 的 header 或 footer，当向下滚动时消失，向上滚动时出现<br>项目地址：<a href="https://github.com/lawloretienne/QuickReturn" target="_blank" rel="external">https://github.com/lawloretienne/QuickReturn</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn</a>  </p>
</li>
<li><p>QuickReturnHeader<br>ListView/ScrollView 的 header 或 footer，当向下滚动时消失，向上滚动时出现<br>项目地址：<a href="https://github.com/ManuelPeinado/QuickReturnHeader" target="_blank" rel="external">https://github.com/ManuelPeinado/QuickReturnHeader</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true</a><br>APP 示例：google plus  </p>
</li>
<li><p>IndexableListView<br>ListView 右侧会显示 item 首字母快捷索引，点击可快速滑动到某个 item<br>项目地址：<a href="https://github.com/woozzu/IndexableListView" target="_blank" rel="external">https://github.com/woozzu/IndexableListView</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true</a><br>APP 示例：微信通讯录、小米联系人  </p>
</li>
<li><p>CustomFastScrollView<br>ListView 快速滑动，同时屏幕中间 PopupWindows 显示滑动到的 item 内容或首字母<br>项目地址：<a href="https://github.com/nolanlawson/CustomFastScrollViewDemo" target="_blank" rel="external">https://github.com/nolanlawson/CustomFastScrollViewDemo</a><br>效果图：<img src="https://raw.github.com/nolanlawson/CustomFastScrollViewDemo/master/example.png" alt="Renderings">  </p>
</li>
<li><p>Android-ScrollBarPanel<br>ListView 滑动时固定的 Panel 指示显示在 scrollbar 旁边<br>项目地址：<a href="https://github.com/rno/Android-ScrollBarPanel" target="_blank" rel="external">https://github.com/rno/Android-ScrollBarPanel</a><br>效果图：<img src="https://github.com/rno/Android-ScrollBarPanel/raw/master/demo_capture.png" alt="Renderings">  </p>
</li>
<li><p>SlideExpandableListView<br>用户点击 listView item 滑出固定区域，其他 item 的区域收缩<br>项目地址：<a href="https://github.com/tjerkw/Android-SlideExpandableListView" target="_blank" rel="external">https://github.com/tjerkw/Android-SlideExpandableListView</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true</a>  </p>
</li>
<li><p>JazzyListView<br>ListView 及 GridView item 以特殊动画效果进入屏幕，效果包括 grow、cards、curl、wave、flip、fly 等等<br>项目地址：<a href="https://github.com/twotoasters/JazzyListView" target="_blank" rel="external">https://github.com/twotoasters/JazzyListView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample</a><br>在线演示：<a href="http://lab.hakim.se/scroll-effects/" target="_blank" rel="external">http://lab.hakim.se/scroll-effects/</a>  </p>
</li>
<li><p>ListViewAnimations<br>带 Item 显示动画的 ListView，动画包括底部飞入、其他方向斜飞入、下层飞入、渐变消失、滑动删除等<br>项目地址：<a href="https://github.com/nhaarman/ListViewAnimations" target="_blank" rel="external">https://github.com/nhaarman/ListViewAnimations</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.haarman.listviewanimations" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.haarman.listviewanimations</a><br>APP 示例：Google plus、Google Now 卡片式进入、小米系统中应用商店、联系人、游戏中心、音乐、文件管理器的 ListView、Ultimate、Light Flow Lite、TreinVerkeer、Running Coach、Pearl Jam Lyrics、Calorie Chart、Car Hire、Super BART、DK FlashCards、Counter Plus、Voorlees Verhaaltjes 2.0  </p>
</li>
<li><p>DevsmartLib-Android<br>横向 ListView<br>项目地址：<a href="https://github.com/dinocore1/DevsmartLib-Android" target="_blank" rel="external">https://github.com/dinocore1/DevsmartLib-Android</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true</a>  </p>
</li>
<li><p>TwoWayView<br>横向 ListView 的效果，继承自 AdapterView<br>项目地址：<a href="https://github.com/lucasr/twoway-view" target="_blank" rel="external">https://github.com/lucasr/twoway-view</a>  </p>
</li>
<li><p>HorizontalVariableListView<br>支持 Item 宽度不一致的 ListView<br>项目地址：<a href="https://github.com/sephiroth74/HorizontalVariableListView" target="_blank" rel="external">https://github.com/sephiroth74/HorizontalVariableListView</a>  </p>
</li>
<li><p>LinearListView<br>用 LinearLayout 实现的 ListView，可解决多个 ListView 并存等问题。目前自己也有需要，等亲自尝试过后会再具体介绍<br>项目地址：<a href="https://github.com/frankiesardo/LinearListView" target="_blank" rel="external">https://github.com/frankiesardo/LinearListView</a>  </p>
</li>
<li><p>MultiChoiceAdapter<br>支持多选的 ListView Adapter<br>项目地址：<a href="https://github.com/ManuelPeinado/MultiChoiceAdapter" target="_blank" rel="external">https://github.com/ManuelPeinado/MultiChoiceAdapter</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo</a>  </p>
</li>
<li><p>EnhancedListView<br>支持横向滑动删除列表项以及撤销删除的 ListView，该项目的前身是<a href="https://github.com/timroes/SwipeToDismissUndoList" target="_blank" rel="external">SwipeToDismissUndoList</a><br>项目地址：<a href="https://github.com/timroes/EnhancedListView" target="_blank" rel="external">https://github.com/timroes/EnhancedListView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&amp;rdid=de.timroes.android.listviewdemo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&amp;rdid=de.timroes.android.listviewdemo</a>  </p>
</li>
<li><p>ListBuddies<br>自动滚动的双列 ListView ，两个 ListView 滚动速度不一致，有视差效果<br>项目地址：<a href="https://github.com/jpardogo/ListBuddies" target="_blank" rel="external">https://github.com/jpardogo/ListBuddies</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies</a><br>效果图：<img src="https://raw.github.com/jpardogo/ListBuddies/master/art/screenshot_listbuddies_2.png" alt="Renderings">  </p>
</li>
<li><p>SwipeMenuListView<br>针对 ListView item 的侧滑菜单<br>项目地址：<a href="https://github.com/baoyongzhang/SwipeMenuListView" target="_blank" rel="external">https://github.com/baoyongzhang/SwipeMenuListView</a><br>效果图：<img src="https://raw.githubusercontent.com/baoyongzhang/SwipeMenuListView/master/demo.gif" alt="Renderings"><br>APP 示例：手机 QQV5.0  </p>
</li>
<li><p>PagingListView<br>分页加载的 ListView。当滑动到 ListView 底部最后一个元素时，显示一个进度行，然后加载下一页数据，并显示。<br>项目地址：<a href="https://github.com/nicolasjafelle/PagingListView" target="_blank" rel="external">https://github.com/nicolasjafelle/PagingListView</a>  </p>
</li>
<li><p>PullZoomView<br>支持下拉时 HeaderView 缩放的 ListView、ScrollView<br>项目地址：<a href="https://github.com/Frank-Zhu/PullZoomView" target="_blank" rel="external">https://github.com/Frank-Zhu/PullZoomView</a><br>效果图：<img src="https://raw.githubusercontent.com/Frank-Zhu/PullZoomView/master/art/pull-to-zoom.gif" alt="Renderings">  </p>
</li>
<li><p>PullToZoomInListView<br>滑动 ListView 时使其 HeaderView 跟随滑动缩放<br>项目地址：<a href="https://github.com/matrixxun/PullToZoomInListView" target="_blank" rel="external">https://github.com/matrixxun/PullToZoomInListView</a><br>效果图：<img src="https://github.com/matrixxun/PullToZoomInListView/raw/master/art/pull-to-zoom.gif" alt="Renderings">  </p>
</li>
<li><p>CalendarListview<br>实现每个月一行日历效果的 ListView<br>项目地址：<a href="https://github.com/traex/CalendarListview" target="_blank" rel="external">https://github.com/traex/CalendarListview</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/Rogary/CalendarListView%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">CalendarListview</a><br>效果图：<img src="https://github.com/traex/CalendarListview/raw/master/demo.gif" alt="Renderings">  </p>
</li>
<li><p>sticky-headers-recyclerview<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ListView，采用 support-v7 中的 RecyclerView 实现<br>项目地址：<a href="https://github.com/timehop/sticky-headers-recyclerview" target="_blank" rel="external">https://github.com/timehop/sticky-headers-recyclerview</a>  </p>
</li>
<li><p>PullSeparateListView<br>到达顶部或底部继续拉动时，实现 Item 间的相互分离，两种模式：(1) 全部分离的模式，即屏幕内所有 Item 都会分离 (2)部分分离模式，以点击位置为分界点，部分 item 分离<br>项目地址：<a href="https://github.com/chiemy/PullSeparateListView" target="_blank" rel="external">https://github.com/chiemy/PullSeparateListView</a><br>效果图：<img src="https://github.com/chiemy/PullSeparateListView/raw/master/capture.gif" alt="Renderings">  </p>
</li>
<li><p>ExpandableLayout<br>Header 和 Content Item 都可以展开的 ExpandableListview<br>项目地址：<a href="https://github.com/traex/ExpandableLayout" target="_blank" rel="external">https://github.com/traex/ExpandableLayout</a>  </p>
</li>
<li><p>PagedHeadListView<br>支持 paginated header 以及 material page indicator 的 ListView.<br>项目地址：<a href="https://github.com/JorgeCastilloPrz/PagedHeadListView" target="_blank" rel="external">https://github.com/JorgeCastilloPrz/PagedHeadListView</a><br>效果图：<img src="https://raw.githubusercontent.com/JorgeCastilloPrz/PagedHeadListView/master/app/src/main/res/raw/preview1.gif" alt="Renderings">  </p>
</li>
<li><p>CustomSwipeListView<br>支持左滑弹出自定义菜单，右滑删除且允许撤销，同时可以自定义滑动动画时间和滑动触发事件的时机等。<br>项目地址：<a href="https://github.com/xyczero/Android-CustomSwipeListView" target="_blank" rel="external">https://github.com/xyczero/Android-CustomSwipeListView</a><br>Demo 地址：<a href="http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListView.apk" target="_blank" rel="external">Download here</a><br>效果图：<img src="http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListview_Set.PNG" alt="Renderings">  </p>
</li>
<li><p>Pull-to-Refresh.Rentals-Android<br>提供一个简单可以自定义的下拉刷新实现，<a href="http://yalantis.com/" target="_blank" rel="external">Yalantis</a> 出品。<br>项目地址：<a href="https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android" target="_blank" rel="external">https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android</a><br>效果图：<img src="https://camo.githubusercontent.com/d406ac5a03a2b1fa5cf41fadc8d2408cb8709bdc/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313635303331372f7265616c6573746174652d70756c6c5f312d322d332e676966" alt="Renderings">  </p>
</li>
<li><p>ScrollerCalendar<br>实现每行显示一年的 12 个月份的 RecyclerView 年历<br>项目地址：<a href="https://github.com/guanchao/ScrollerCalendar" target="_blank" rel="external">https://github.com/guanchao/ScrollerCalendar</a><br>效果图：<img src="https://raw.githubusercontent.com/guanchao/ScrollerCalendar/master/images/sample2.gif" alt="Renderings">  </p>
</li>
<li><p>ExtractWordView<br>一个可以提取单词的 ListView,支持”放大镜”效果。<br>项目地址：<a href="https://github.com/jcodeing/ExtractWordView" target="_blank" rel="external">https://github.com/jcodeing/ExtractWordView</a><br>Demo 地址：<a href="https://raw.githubusercontent.com/jcodeing/ExtractWordView/master/ExtractWordView-demo.apk" target="_blank" rel="external">Download here</a><br>效果图：<img src="https://raw.githubusercontent.com/jcodeing/ExtractWordView/master/lookme.gif" alt="Renderings">  </p>
</li>
<li><p>FlyRefresh<br>支持 ListView, GridView, RecyclerView, ScrollView 的下拉刷新<br>项目地址：<a href="https://github.com/race604/FlyRefresh" target="_blank" rel="external">https://github.com/race604/FlyRefresh</a><br>效果图：<img src="https://raw.githubusercontent.com/race604/FlyRefresh/master/images/flyrefresh.gif" alt="Renderings">  </p>
</li>
<li><p>MVCHelper<br>实现下拉刷新，滚动底部自动加载更多，分页加载，自动切换显示网络失败布局，暂无数据布局，支持任意 view，真正的 MVC 架构<br>支持切换主流下拉刷新框架 Android-PullToRefresh-Library,android-Ultra-Pull-To-Refresh-library，SwipeRefreshLayout<br>项目地址：<a href="https://github.com/LuckyJayce/MVCHelper" target="_blank" rel="external">https://github.com/LuckyJayce/MVCHelper</a><br>Demo 地址：<a href="https://github.com/LuckyJayce/MVCHelper/blob/master/raw/MVCHelper_Demo.apk?raw=true" target="_blank" rel="external">https://github.com/LuckyJayce/MVCHelper/blob/master/raw/MVCHelper_Demo.apk?raw=true</a>  </p>
</li>
<li><p>RecyclerViewSwipeDismiss<br>支持滑动 Item 操作、点击展开、拖动排序、展开后拖动排序等特性的 RecyclerView<br>项目地址：<a href="https://play.google.com/store/apps/details?id=com.h6ah4i.android.example.advrecyclerview" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.h6ah4i.android.example.advrecyclerview</a><br>视频：<a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=S7cSwMArjUQ" target="_blank" rel="external">http://www.youtube.com/watch?feature=player_embedded&amp;v=S7cSwMArjUQ</a>  </p>
</li>
<li><p>WaterDropListView<br>模仿 iOS 下拉刷新“水滴”效果，支持下拉刷新和上拉加载<br>项目地址：<a href="https://github.com/THEONE10211024/WaterDropListView" target="_blank" rel="external">https://github.com/THEONE10211024/WaterDropListView</a><br>效果图：<img src="https://github.com/THEONE10211024/WaterDropListView/blob/master/demo/demo.gif" alt="Renderings">  </p>
</li>
<li><p>PopupListView<br>實現ListItem 點擊後置頂並可顯示客製化添加的item的內部View 的ListView<br>项目地址：<a href="https://github.com/s8871404/PopupListView" target="_blank" rel="external">https://github.com/s8871404/PopupListView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.baobomb.popuplistview_sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.baobomb.popuplistview_sample</a><br>效果图：<img src="https://github.com/s8871404/PopupListView/blob/master/example.gif" alt="Renderings">   </p>
</li>
<li><p>CircleRefreshLayout<br>一个包含有趣的动画的自定义下拉刷新布局<br>项目地址：<a href="https://github.com/tuesda/CircleRefreshLayout" target="_blank" rel="external">https://github.com/tuesda/CircleRefreshLayout</a><br>效果图：<br><img src="https://raw.githubusercontent.com/tuesda/CircleRefreshLayout/master/gif/circlerefresh.gif" alt="Renderings">   </p>
</li>
<li><p>EasyRecyclerView<br>一款简单易用的EasyRecyclerView<br>1.提供EasyRecyclerView，不需要写太多RecyclerView的配置代码<br>2.提供好一个可以适配单布局和多布局的RecyclerViewAdapter<br>3.提供了分割线的实现类，只需要传入一个DrawableId<br>项目地址：<a href="https://github.com/CaMnter/EasyRecyclerView" target="_blank" rel="external">https://github.com/CaMnter/EasyRecyclerView</a>  </p>
</li>
<li><p>CanRefresh<br>可适配所有视图的下拉刷新上拉加载，并支持各种风格<br>项目地址：<a href="https://github.com/canyinghao/CanRefresh" target="_blank" rel="external">https://github.com/canyinghao/CanRefresh</a><br>效果图：<br><img src="https://raw.githubusercontent.com/canyinghao/CanRefresh/master/pic/CanRefresh.gif" alt="Renderings">   </p>
</li>
<li><p>NestRefreshLayout<br>下拉刷新及加载更多控件，支持多种View，可以自定义Header和Footer<br>由于实现了NestedScrollingChild和NestedScrollingParent所以与Support-Design兼容，可以配合CollapsingToolbarLayout使用<br>项目地址：<a href="https://github.com/anzewei/NestRefreshLayout" target="_blank" rel="external">https://github.com/anzewei/NestRefreshLayout</a><br>Demo 地址：<a href="https://github.com/anzewei/NestRefreshLayout/blob/master/ext/sample-debug.apk?raw=true" target="_blank" rel="external">https://github.com/anzewei/NestRefreshLayout/blob/master/ext/sample-debug.apk?raw=true</a></p>
</li>
<li><p>SnappingSwipingRecyclerView<br>实现了类似微信读书首页的长按之后滑动删除的特效和动画<br><img src="https://raw.githubusercontent.com/CarlLee/SnappingSwipingRecyclerView/master/preview.gif" height="480" width="320"><br>项目地址:<a href="https://github.com/CarlLee/SnappingSwipingRecyclerView" target="_blank" rel="external">https://github.com/CarlLee/SnappingSwipingRecyclerView</a></p>
</li>
</ol>
<h4 id="二、ActionBar"><a href="#二、ActionBar" class="headerlink" title="二、ActionBar"></a>二、ActionBar</h4><ol>
<li><p>ActionBarSherlock<br>为 Android 所有版本提供统一的 ActionBar，解决 4.0 以下 ActionBar 的适配问题<br>项目地址：<a href="https://github.com/JakeWharton/ActionBarSherlock" target="_blank" rel="external">https://github.com/JakeWharton/ActionBarSherlock</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos</a><br>标签：兼容库, ActionBar  </p>
</li>
<li><p>ActionBar-PullToRefresh<br>下拉刷新，ActionBar 出现加载中提示<br>项目地址：<a href="https://github.com/chrisbanes/ActionBar-PullToRefresh" target="_blank" rel="external">https://github.com/chrisbanes/ActionBar-PullToRefresh</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock" target="_blank" rel="external">https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock</a><br>APP 示例：Gmail，Google Plus，知乎等  </p>
</li>
<li><p>FadingActionBar<br>ListView 向下滚动逐渐显现的 ActionBar<br>项目地址：<a href="https://github.com/ManuelPeinado/FadingActionBar" target="_blank" rel="external">https://github.com/ManuelPeinado/FadingActionBar</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo</a><br>APP 示例：google music，知乎  </p>
</li>
<li><p>NotBoringActionBar<br>google music 下拉收缩的 ActionBar<br>项目地址：<a href="https://github.com/flavienlaurent/NotBoringActionBar" target="_blank" rel="external">https://github.com/flavienlaurent/NotBoringActionBar</a><br>Demo 地址：<a href="http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/" target="_blank" rel="external">http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/</a><br>APP 示例：Google 音乐  </p>
</li>
<li><p>RefreshActionItem<br>带进度显示和刷新按钮的 ActionBar<br>项目地址：<a href="https://github.com/ManuelPeinado/RefreshActionItem" target="_blank" rel="external">https://github.com/ManuelPeinado/RefreshActionItem</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo</a><br>APP 示例：The New York Times，DevAppsDirect  </p>
</li>
<li><p>GlassActionBar<br>类似玻璃的有一定透明度的 ActionBar<br>项目地址：<a href="https://github.com/ManuelPeinado/GlassActionBar" target="_blank" rel="external">https://github.com/ManuelPeinado/GlassActionBar</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo</a><br>APP 示例：google music  </p>
</li>
</ol>
<h4 id="三、Menu"><a href="#三、Menu" class="headerlink" title="三、Menu"></a>三、Menu</h4><ol>
<li><p>MenuDrawer<br>滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕上下左右划出，支持当前 View 处于上下层，支持 Windows 边缘、ListView 边缘、ViewPager 变化划出菜单等。<br>项目地址：<a href="https://github.com/SimonVT/android-menudrawer" target="_blank" rel="external">https://github.com/SimonVT/android-menudrawer</a><br>Demo 地址：<a href="http://simonvt.github.io/android-menudrawer/" target="_blank" rel="external">http://simonvt.github.io/android-menudrawer/</a><br>APP 示例：Gmail、Google Music 等大部分 google app  </p>
</li>
<li><p>SlidingMenu<br>滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕左右划出，支持菜单 zoom、scale、slide up 三种动画样式出现。与 MenuDrawer 相比而言，SlidingMenu 支持菜单动画样式出现，MenuDrawer 支持菜单 view 处于内容的上下层<br>项目地址：<a href="https://github.com/jfeinstein10/SlidingMenu" target="_blank" rel="external">https://github.com/jfeinstein10/SlidingMenu</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/huxian99/SlidingMenu 源码解析" target="_blank" rel="external">SlidingMenu</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.slidingmenu.example" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.slidingmenu.example</a><br>APP 示例：Foursquare, LinkedIn, Zappos, Rdio, Evernote Food, Plume, VLC for Android, ESPN ScoreCenter, MLS MatchDay, 9GAG, Wunderlist 2, The Verge, MTG Familiar, Mantano Reader, Falcon Pro (BETA), MW3 Barracks  </p>
</li>
<li><p>ArcMenu<br>支持类似 Path 的左下角动画旋转菜单及横向划出菜单、圆心弹出菜单<br>项目地址：<a href="https://github.com/daCapricorn/ArcMenu" target="_blank" rel="external">https://github.com/daCapricorn/ArcMenu</a><br>效果图：<img src="https://dl.dropboxusercontent.com/u/11369687/preview0.png" alt="Renderings"><br><a href="https://dl.dropboxusercontent.com/u/11369687/preview1.png" target="_blank" rel="external">https://dl.dropboxusercontent.com/u/11369687/preview1.png</a><br><a href="https://dl.dropboxusercontent.com/u/11369687/raymenu.png" target="_blank" rel="external">https://dl.dropboxusercontent.com/u/11369687/raymenu.png</a><br>APP 示例：Path  </p>
</li>
<li><p>android-satellite-menu<br>类似 Path 的左下角动画旋转菜单<br>项目地址：<a href="https://github.com/siyamed/android-satellite-menu" target="_blank" rel="external">https://github.com/siyamed/android-satellite-menu</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true</a><br>APP 示例：Path  </p>
</li>
<li><p>radial-menu-widget<br>圆形菜单，支持二级菜单<br>项目地址：<a href="https://code.google.com/p/radial-menu-widget/" target="_blank" rel="external">https://code.google.com/p/radial-menu-widget/</a><br>效果图：<img src="http://farm8.staticflickr.com/7377/11621125154_d1773c2dcc_o.jpg" alt="Renderings">  </p>
</li>
<li><p>Android Wheel Menu<br>圆形旋转选取菜单<br>项目地址：<a href="https://github.com/anupcowkur/Android-Wheel-Menu" target="_blank" rel="external">https://github.com/anupcowkur/Android-Wheel-Menu</a><br>效果图：<img src="https://raw.github.com/anupcowkur/Android-Wheel-Menu/master/graphics/wheel.gif" alt="Renderings">  </p>
</li>
<li><p>FoldingNavigationDrawer<br>滑动并以折叠方式打开菜单<br>项目地址：<a href="https://github.com/tibi1712/FoldingNavigationDrawer-Android" target="_blank" rel="external">https://github.com/tibi1712/FoldingNavigationDrawer-Android</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.ptr.folding.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.ptr.folding.sample</a><br>效果图：<img src="https://lh6.ggpht.com/VnKUZenAozQ0KFAm5blFTGqMaKFjvX-BK2JH-jrX1sIXVTqciACqRhqFH48hc4pm2Q=h310-rw" alt="Renderings">  </p>
</li>
<li><p>AndroidResideMenu<br>仿 Dribbble 的边栏菜单<br>项目地址：<a href="https://github.com/SpecialCyCi/AndroidResideMenu" target="_blank" rel="external">https://github.com/SpecialCyCi/AndroidResideMenu</a><br>效果图：<img src="https://github.com/SpecialCyCi/AndroidResideMenu/raw/master/2.gif" alt="Renderings">  </p>
</li>
<li><p>CircularFloatingActionMenu<br>一个可定制的圆形的浮动菜单控件，类似于 Path 的圆形菜单。这个控件的可定制性更强，可以很容易的定制菜单出现消失时的动画，起始角度和半径。<br>项目地址：<a href="https://github.com/oguzbilgener/CircularFloatingActionMenu" target="_blank" rel="external">https://github.com/oguzbilgener/CircularFloatingActionMenu</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/cpacm/CircularFloatingActionMenu 源码解析" target="_blank" rel="external">CircularFloatingActionMenu</a><br>Demo 地址：<a href="https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples" target="_blank" rel="external">https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples</a><br>效果图：<img src="https://raw.githubusercontent.com/oguzbilgener/CircularFloatingActionMenu/master/assets/circularfab.gif" alt="Renderings">  </p>
</li>
<li><p>NavigationDrawerSI<br>Navigation Drawer 的一个简单实现，滑动并以折叠方式打开菜单<br>项目地址：<a href="https://github.com/mmBs/NavigationDrawerSI" target="_blank" rel="external">https://github.com/mmBs/NavigationDrawerSI</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi" target="_blank" rel="external">https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi</a><br>效果图：<img src="https://raw.githubusercontent.com/mmBs/NavigationDrawerSI/master/images/screens.png" alt="Renderings"><br>APP 示例：<a href="https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi" target="_blank" rel="external">https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi</a>  </p>
</li>
<li><p>DragLayout<br>使用 support.v4 包下的 ViewDragHelper 实现 QQ5.0 侧滑<br>项目地址：<a href="https://github.com/BlueMor/DragLayout" target="_blank" rel="external">https://github.com/BlueMor/DragLayout</a><br>效果图：<img src="https://github.com/BlueMor/DragLayout/raw/master/screenshots/123.gif" alt="Renderings">  </p>
</li>
<li><p>LDrawer<br>Material Design 形式的展开折叠 Icon<br>项目地址：<a href="https://github.com/ikimuhendis/LDrawer" target="_blank" rel="external">https://github.com/ikimuhendis/LDrawer</a><br>效果图：<img src="https://raw.githubusercontent.com/IkiMuhendis/LDrawer/master/images/animated.gif" alt="Renderings">  </p>
</li>
<li><p>Floating Action Button<br>悬浮的圆形菜单栏，支持组建滚动时自动隐藏及其他设置<br>项目地址：<a href="https://github.com/shamanland/floating-action-button" target="_blank" rel="external">https://github.com/shamanland/floating-action-button</a><br>效果图：<img src="https://camo.githubusercontent.com/c679cb23cf62830b0d4037e17cf2d8d4090bc3c8/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f69643d3042776830534e4c506d6a5142526b466f5a4530345646393051324d" alt="Renderings">  </p>
</li>
<li><p>Side-Menu.Android<br>分类侧滑菜单，<a href="http://yalantis.com/" target="_blank" rel="external">Yalantis</a> 出品。<br>项目地址：<a href="https://github.com/Yalantis/Side-Menu.Android" target="_blank" rel="external">https://github.com/Yalantis/Side-Menu.Android</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/cpacm/Side Menu.Android 源码解析" target="_blank" rel="external">Side-Menu.Android</a><br>效果图：<img src="https://camo.githubusercontent.com/cb6caa7a392d01d46bca9d9485c01fc173f55fac/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313638393932322f6576656e74732d6d656e755f312d312d362e676966" alt="Renderings">  </p>
</li>
<li><p>Context-Menu.Android<br>可以方便快速集成漂亮带有动画效果的上下文菜单，<a href="http://yalantis.com/" target="_blank" rel="external">Yalantis</a>出品。<br>项目地址：<a href="https://github.com/Yalantis/Context-Menu.Android" target="_blank" rel="external">https://github.com/Yalantis/Context-Menu.Android</a><br>效果图：<img src="https://camo.githubusercontent.com/46c15734b552ce3afefa7efd1518909046b4677e/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313738353237342f39396d696c65732d70726f66696c652d6c696768745f312d312d342e676966" alt="Renderings">  </p>
</li>
<li><p>Droppy<br>支持多种样式的下拉菜单<br>项目地址：<a href="https://github.com/shehabic/Droppy" target="_blank" rel="external">https://github.com/shehabic/Droppy</a>  </p>
</li>
<li><p>MaterialDrawer<br>Material Design 风格的导航抽屉，提供简便且强大的定制功能<br>项目地址：<a href="https://github.com/mikepenz/MaterialDrawer" target="_blank" rel="external">https://github.com/mikepenz/MaterialDrawer</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details？id=com.mikepenz.materialdrawer.app" target="_blank" rel="external">https://play.google.com/store/apps/details？id=com.mikepenz.materialdrawer.app</a><br>效果图：<img src="https://raw.githubusercontent.com/mikepenz/MaterialDrawer/master/DEV/screenshots/screenshot1_small.png" alt="Renderings">  </p>
</li>
<li><p>SlideBottomPanel<br>底部划出菜单，滑动时背景图透明度渐变，支持嵌套 LiewView 或 ScrollView<br>项目地址：<a href="https://github.com/kingideayou/SlideBottomPanel" target="_blank" rel="external">https://github.com/kingideayou/SlideBottomPanel</a><br>Demo 地址：<a href="https://github.com/kingideayou/SlideBottomPanel/raw/master/apk/SlideBottomPanelDemo.apk" target="_blank" rel="external">SlideBottomPanelDemo 下载</a><br>效果图：<img src="https://github.com/kingideayou/SlideBottomPanel/blob/master/imgs/demo_list_view.gif" alt="Renderings">  </p>
</li>
<li><p>FlowingDrawer<br>带手势流动效果侧滑菜单<br>项目地址：<a href="https://github.com/mxn21/FlowingDrawer" target="_blank" rel="external">https://github.com/mxn21/FlowingDrawer</a><br>效果图：<img src="https://github.com/mxn21/FlowingDrawer/raw/master/screen.gif" alt="Renderings">  </p>
</li>
<li><p>FloatingActionMenu-Animation<br>扩展FloatingActionMenu库，自定义菜单图标，动画滚动时<br>项目地址: <a href="https://github.com/toanvc/FloatingActionMenu-Animation" target="_blank" rel="external">https://github.com/toanvc/FloatingActionMenu-Animation</a><br>效果图: <img src="https://github.com/toanvc/FloatingActionMenu-Animation/raw/master/screenshots/scale.gif" alt="Renderings">    </p>
</li>
</ol>
<h4 id="四、ViewPager-、Gallery"><a href="#四、ViewPager-、Gallery" class="headerlink" title="四、ViewPager 、Gallery"></a>四、ViewPager 、Gallery</h4><ol>
<li><p>AdvancedPagerSlidingTabStrip<br>一个完美兼容ViewPager的导航栏组件；可以自定义TabView；能动态加载Tab上的Icon图片； 能显示Tab的消息数量和提示小圆点；支持自定义为微博形式的可滑动tab。<br><img src="https://raw.githubusercontent.com/HomHomLin/AdvancedPagerSlidingTabStrip/master/Pic/Screen_20160216163404.png" alt="p1"><br><img src="https://raw.githubusercontent.com/HomHomLin/AdvancedPagerSlidingTabStrip/master/Pic/Screen_20160411141706.png" alt="p2"><br>项目地址：<a href="https://github.com/HomHomLin/AdvancedPagerSlidingTabStrip。" target="_blank" rel="external">https://github.com/HomHomLin/AdvancedPagerSlidingTabStrip。</a>  </p>
</li>
<li><p>ConvenientBanner<br>通用的广告栏控件，让你轻松实现广告头效果。支持无限循环，可以设置自动翻页和时间(而且非常智能，手指触碰则暂停翻页，离开自动开始翻页。你也可以设置在界面onPause的时候不进行自动翻页，onResume之后继续自动翻页)，并且提供多种翻页特效。 对比其他广告栏控件，大多都需要对源码进行改动才能加载网络图片，或者帮你集成不是你所需要的图片缓存库。而这个库能让有代码洁癖的你欢喜，不需要对库源码进行修改你就可以使用任何你喜欢的网络图片库进行配合。<br>项目地址：<a href="https://github.com/saiwu-bigkoo/Android-ConvenientBanner" target="_blank" rel="external">https://github.com/saiwu-bigkoo/Android-ConvenientBanner</a><br>效果图：<img src="https://github.com/saiwu-bigkoo/Android-ConvenientBanner/blob/master/preview/convenientbannerdemo.gif" alt="Renderings">  </p>
</li>
<li><p>Android-ViewPagerIndicator<br>配合 ViewPager 使用的 Indicator，支持各种位置和样式<br>项目地址：<a href="https://github.com/JakeWharton/Android-ViewPagerIndicator" target="_blank" rel="external">https://github.com/JakeWharton/Android-ViewPagerIndicator</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample</a><br>APP 示例：太多了。。  </p>
</li>
<li><p>JazzyViewPager<br>支持 Fragment 切换动画的 ViewPager，动画包括转盘、淡入淡出、翻页、层叠、旋转、方块、翻转、放大缩小等，效果类似桌面左右切换的各种效果，不过桌面并非用 ViewPager 实现而已<br>项目地址：<a href="https://github.com/jfeinstein10/JazzyViewPager" target="_blank" rel="external">https://github.com/jfeinstein10/JazzyViewPager</a><br>Demo 地址：<a href="https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true" target="_blank" rel="external">https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true</a>  </p>
</li>
<li><p>JellyViewPager<br>特殊切换动画的 ViewPager<br>项目地址：<a href="https://github.com/chiemy/JellyViewPager" target="_blank" rel="external">https://github.com/chiemy/JellyViewPager</a><br>效果图：<img src="https://github.com/chiemy/JellyViewPager/raw/master/capture.gif" alt="Renderings">  </p>
</li>
<li><p>Android-DirectionalViewPager<br>支持横向和纵向(垂直)的 ViewPager<br>项目地址：<a href="https://github.com/JakeWharton/Android-DirectionalViewPager" target="_blank" rel="external">https://github.com/JakeWharton/Android-DirectionalViewPager</a><br>Demo 地址：<a href="https://market.android.com/details?id=com.directionalviewpager.sample" target="_blank" rel="external">https://market.android.com/details?id=com.directionalviewpager.sample</a>  </p>
</li>
<li><p>FancyCoverFlow<br>支持 Item 切换动画效果的类似 Gallery View<br>项目地址：<a href="https://github.com/davidschreiber/FancyCoverFlow" target="_blank" rel="external">https://github.com/davidschreiber/FancyCoverFlow</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples" target="_blank" rel="external">https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples</a><br>效果图：<img src="https://github-camo.global.ssl.fastly.net/ef5ced52b7b54652b50499521ed797c0188c7a6b/687474703a2f2f64617669647363687265696265722e6769746875622e696f2f46616e6379436f766572466c6f772f73637265656e73686f74322e706e67" alt="Renderings">  </p>
</li>
<li><p>AndroidTouchGallery<br>支持双击或双指缩放的 Gallery(用 ViewPager 实现)，相比下面的 PhotoView，在被放大后依然能滑到下一个 item，并且支持直接从 url 和文件中获取图片，<br>项目地址：<a href="https://github.com/Dreddik/AndroidTouchGallery" target="_blank" rel="external">https://github.com/Dreddik/AndroidTouchGallery</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true</a><br>APP 示例：类似微信中查看聊天记录图片时可双击放大，并且放大情况下能正常左右滑动到前后图片  </p>
</li>
<li><p>Android Auto Scroll ViewPager<br>Android 自动滚动 轮播循环的 ViewPager<br>项目地址：<a href="https://github.com/Trinea/android-auto-scroll-view-pager" target="_blank" rel="external">https://github.com/Trinea/android-auto-scroll-view-pager</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=cn.trinea.android.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href="http://www.trinea.cn/android/auto-scroll-view-pager/" target="_blank" rel="external">http://www.trinea.cn/android/auto-scroll-view-pager/</a>  </p>
</li>
<li><p>Android PagerSlidingTabStrip<br>配合 ViewPager 使用的 Indicator，支持 ViewPager Scroll 时 Indicator 联动<br>项目地址：<a href="https://github.com/astuetz/PagerSlidingTabStrip" target="_blank" rel="external">https://github.com/astuetz/PagerSlidingTabStrip</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/ayyb1988/PagerSlidingTabStrip 源码解析" target="_blank" rel="external">Android PagerSlidingTabStrip</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample</a>  </p>
</li>
<li><p>ViewPager3D<br>ViewPager3D 效果<br>项目地址：<a href="https://github.com/inovex/ViewPager3D" target="_blank" rel="external">https://github.com/inovex/ViewPager3D</a>  </p>
</li>
<li><p>AnimaTabsview<br>仿网易云音乐标签切换的动画,带透明小三角<br>项目地址：<a href="https://github.com/wuyexiong/transparent-over-animtabsview" target="_blank" rel="external">https://github.com/wuyexiong/transparent-over-animtabsview</a><br>在线演示：<a href="http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html" target="_blank" rel="external">http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html</a>  </p>
</li>
<li><p>LoopingViewPager<br>无限循环的 ViewPager<br>项目地址：<a href="https://github.com/imbryk/LoopingViewPager" target="_blank" rel="external">https://github.com/imbryk/LoopingViewPager</a>  </p>
</li>
<li><p>android_page_curl<br>翻书卷曲效果<br>项目地址：<a href="https://github.com/harism/android_page_curl" target="_blank" rel="external">https://github.com/harism/android_page_curl</a><br>在线演示：<a href="https://www.youtube.com/watch?v=iwu7P5PCpsw" target="_blank" rel="external">https://www.youtube.com/watch?v=iwu7P5PCpsw</a><br>APP 示例：iReader  </p>
</li>
<li><p>ViewPagerIndicator<br>简化并实现 android 的 TabHost 效果，顶部滑动 tab，引导页，支持自定义 tab 样式,自定义滑动块样式和位置,自定义切换 tab 的过渡动画,子界面的预加载和界面缓存,设置界面是否可滑动<br>项目地址：<a href="https://github.com/LuckyJayce/ViewPagerIndicator" target="_blank" rel="external">https://github.com/LuckyJayce/ViewPagerIndicator</a>  </p>
</li>
<li><p>ScreenSlideIndicator<br>轻量级的圆形 Indicadtor，位置可以自由调整，不会对 ViewPager 产生任何影响。<br>项目地址：<a href="https://github.com/LyndonChin/Android-ScreenSlidePager" target="_blank" rel="external">ScreenSlidePager</a><br>效果图：<img src="https://github.com/LyndonChin/AndroidScreenSlidePager/raw/master/art/sample.gif" alt="Renderings">  </p>
</li>
<li><p>SmartTabLayout<br>自定义的 Tab title strip，基于 Google Samples 中的 android-SlidingTabBasic 项目，滑动时 Indicator 可平滑过渡。<br>项目地址：<a href="https://github.com/ogaclejapan/SmartTabLayout" target="_blank" rel="external">https://github.com/ogaclejapan/SmartTabLayout</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo</a><br>效果图：<img src="https://raw.githubusercontent.com/ogaclejapan/SmartTabLayout/master/art/demo1.gif" alt="Renderings">  </p>
</li>
<li><p>AndroidImageSlider<br>Android 图片滑动<br>项目地址：<a href="https://github.com/daimajia/AndroidImageSlider" target="_blank" rel="external">https://github.com/daimajia/AndroidImageSlider</a><br>效果图：<img src="https://camo.githubusercontent.com/f64413139bbaa918131384d3597c33e39333aa7f/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a773165677a6f7236366f6a64673230393530666b6e70652e676966" alt="Renderings"><br>App<br>示例：<a href="https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk" target="_blank" rel="external">https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk</a>  </p>
</li>
<li><p>RecyclerViewPager<br>完全继承自 RecyclerView，可以自定义触发翻页的距离，可自定义翻页速度，支持垂直方向的 ViewPager，支持 Fragment。<br>项目地址：<a href="https://github.com/lsjwzh/RecyclerViewPager" target="_blank" rel="external">RecyclerViewPager</a><br>效果图：<img src="https://github.com/lsjwzh/RecyclerViewPager/blob/master/fragment.gif" alt="Renderings">  </p>
</li>
<li><p>CircleIndicator<br>轻量级ViewPager指示器,支持三种不同的模式<br>项目地址：<a href="https://github.com/THEONE10211024/CircleIndicator" target="_blank" rel="external">CircleIndicator</a><br>效果图：<img src="https://github.com/THEONE10211024/CircleIndicator/blob/master/demo/inside.gif" alt="Renderings"><br><img src="https://github.com/THEONE10211024/CircleIndicator/blob/master/demo/outside.gif" alt="Renderings"><br><img src="https://github.com/THEONE10211024/CircleIndicator/blob/master/demo/solo.gif" alt="Renderings">    </p>
</li>
<li><p>EasySlidingTabs<br>一款简单、易用的滑动标签页<br>项目地址： <a href="https://github.com/CaMnter/EasySlidingTabs" target="_blank" rel="external">https://github.com/CaMnter/EasySlidingTabs</a><br>效果图：<br><img src="https://raw.githubusercontent.com/CaMnter/EasySlidingTabs/master/readme/readme_easy_sliding_tabs_1.png" alt="Renderings">   </p>
</li>
<li><p>ParallaxViewPager<br>ViewPager页面切换视差效果<br>项目地址：<a href="https://github.com/ybq/ParallaxViewPager" target="_blank" rel="external">https://github.com/ybq/ParallaxViewPager</a><br>效果图：<br><img src="https://github.com/ybq/ParallaxViewPager/raw/master/art/screen.gif" alt="Renderings">   </p>
</li>
</ol>
<h4 id="五、GridView"><a href="#五、GridView" class="headerlink" title="五、GridView"></a>五、GridView</h4><ol>
<li><p>StaggeredGridView<br>允许非对齐行的 GridView，类似 Pinterest 的瀑布流，并且跟 ListView 一样自带 View 缓存，继承自 ViewGroup<br>项目地址：<a href="https://github.com/maurycyw/StaggeredGridView" target="_blank" rel="external">https://github.com/maurycyw/StaggeredGridView</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true</a><br>APP 示例：Pinterest 等  </p>
</li>
<li><p>AndroidStaggeredGrid<br>允许非对齐行的 GridView，类似 Pinterest 的瀑布流，继承自 AbsListView<br>项目地址：<a href="https://github.com/etsy/AndroidStaggeredGrid" target="_blank" rel="external">https://github.com/etsy/AndroidStaggeredGrid</a><br>APP 示例：Pinterest 等  </p>
</li>
<li><p>PinterestLikeAdapterView<br>允许非对齐行的 GridView，类似 Pinterest 的瀑布流，允许下拉刷新<br>项目地址：<a href="https://github.com/GDG-Korea/PinterestLikeAdapterView" target="_blank" rel="external">https://github.com/GDG-Korea/PinterestLikeAdapterView</a><br>APP 示例：Pinterest 等  </p>
</li>
<li><p>DraggableGridView<br>Item 可拖动交换位置的 GridView，实际是自己继承 ViewGroup 实现，类似桌面的单屏效果，可屏幕自动上下滚动进行 Item 移动交换，多屏效果见下面 PagedDragDropGrid<br>项目地址：<a href="https://github.com/thquinn/DraggableGridView" target="_blank" rel="external">https://github.com/thquinn/DraggableGridView</a><br>Demo 地址：<a href="https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true" target="_blank" rel="external">https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true</a><br>也可自定义item的宽高和每行的个数，同时修改了交换逻辑，当移动到另一个item时就进行交换，并删除滚动逻辑。<br>项目地址：<a href="https://github.com/andyken/DraggableGridView" target="_blank" rel="external">DraggableGridView</a><br>效果图：<br><img src="https://github.com/andyken/DraggableGridView/blob/master/sample/sample.gif" alt="Renderings"></p>
</li>
<li><p>DividedDraggableView<br>一个带有分割区域的可拖动 view ,可屏幕自动上下滚动进行 Item 移动交换。<br>项目地址：<a href="https://github.com/andyken/DividedDraggableView" target="_blank" rel="external">https://github.com/andyken/DividedDraggableView</a><br>效果图：<br><img src="https://github.com/andyken/DividedDraggableView/blob/master/app/sample.gif" alt="Renderings"></p>
</li>
<li><p>StickyGridHeaders<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 GridView<br>项目地址：<a href="https://github.com/TonicArtos/StickyGridHeaders" target="_blank" rel="external">https://github.com/TonicArtos/StickyGridHeaders</a><br>效果图：<img src="https://github-camo.global.ssl.fastly.net/90b57e9383704c400706545225d439e057c6fcc0/687474703a2f2f342e62702e626c6f6773706f742e636f6d2f2d535f4262685758367754592f55517057306377554745492f41414141414141414776552f7a7a4a586a2d50635662592f73313630302f73637265656e2d6c616e6473636170652d736d616c6c65722e706e67" alt="Renderings">  </p>
</li>
<li><p>PagedDragDropGrid<br>Item 可拖动交换位置、拖动删除的自定义控件，实际是自己继承 ViewGroup 实现，类似桌面的多屏效果，可拖动到屏幕边缘，屏幕自动左右滚动进行 Item 移动交换，可拖动进行删除，单屏效果见上面 DraggableGridView<br>项目地址：<a href="https://github.com/mrKlar/PagedDragDropGrid" target="_blank" rel="external">https://github.com/mrKlar/PagedDragDropGrid</a><br>在线演示：<a href="http://youtu.be/FYTSRfthSuQ" target="_blank" rel="external">http://youtu.be/FYTSRfthSuQ</a>  </p>
</li>
<li><p>Android-DraggableGridViewPager<br>Item 可拖动交换位置的 GridView，实际是自己继承 ViewGroup 实现，类似桌面的多屏效果，可屏幕自动左右滚动进行 Item 移动交换，单屏效果见上面 DraggableGridView<br>项目地址：<a href="https://github.com/zzhouj/Android-DraggableGridViewPager" target="_blank" rel="external">https://github.com/zzhouj/Android-DraggableGridViewPager</a><br>Demo 地址：<a href="https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true</a>  </p>
</li>
<li><p>TwoWayGridView<br>可横向滚动的 GridView<br>项目地址：<a href="https://github.com/jess-anders/two-way-gridview" target="_blank" rel="external">https://github.com/jess-anders/two-way-gridview</a>  </p>
</li>
<li><p>PagingGridView<br>分页加载的 GridView。当滑动到 GridView 底部最后一个行时，显示一个进度行，然后加载下一页数据，并显示。<br>项目地址：<a href="https://github.com/nicolasjafelle/PagingGridView" target="_blank" rel="external">https://github.com/nicolasjafelle/PagingGridView</a>  </p>
</li>
<li><p>AsymmetricGridView<br>一个支持跨行和跨列可变 Item 大小的 GridView<br>项目地址：<a href="https://github.com/felipecsl/AsymmetricGridView" target="_blank" rel="external">https://github.com/felipecsl/AsymmetricGridView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app</a><br>效果图：<img src="https://raw.githubusercontent.com/felipecsl/AsymmetricGridView/master/screenshots/ss_5_cols.png" alt="Renderings">  </p>
</li>
<li><p>GridView with Header and Footer<br>和<code>ListView</code>一样带头部和底部的<code>GridView</code>，用法和<code>ListView</code>一样<br>项目地址：<a href="https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter" target="_blank" rel="external">https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter</a><br>效果图：<img src="https://raw.githubusercontent.com/liaohuqiu/android-GridViewWithHeaderAndFooter/master/screen-shot.png" alt="Renderings">  </p>
</li>
</ol>
<h4 id="六、ImageView"><a href="#六、ImageView" class="headerlink" title="六、ImageView"></a>六、ImageView</h4><ol>
<li><p>PhotoView<br>支持双击或双指缩放的 ImageView，在 ViewPager 等 Scrolling view 中正常使用，相比上面的 AndroidTouchGallery，不仅支持 ViewPager，同时支持单个 ImageView<br>项目地址：<a href="https://github.com/chrisbanes/PhotoView" target="_blank" rel="external">https://github.com/chrisbanes/PhotoView</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/dkmeteor/PhotoView 源码解析" target="_blank" rel="external">PhotoView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample</a><br>APP 示例：photup  </p>
</li>
<li><p>Fresco-ImageView<br>Fresco-ImageView是一种Android平台的图像控件，底层是对Fresco的封装，可以异步加载网络图片、项目资源和本地图片，并且支持双指缩放、图片的基本处理以及Fresco的所有特性。<br>项目地址：<a href="https://github.com/HomHomLin/FrescoImageView" target="_blank" rel="external">https://github.com/HomHomLin/FrescoImageView</a>  </p>
</li>
<li><p>android-gif-drawable<br>支持 gif 显示的 view，用 jni 实现的，编译生成 so 库后直接 xml 定义 view 即可，而且本身不依赖于其他开源项目所以相对下面的 ImageViewEx 简单的多<br>项目地址：<a href="https://github.com/koral--/android-gif-drawable" target="_blank" rel="external">https://github.com/koral--/android-gif-drawable</a>  </p>
</li>
<li><p>ImageViewEx<br>支持 Gif 显示的 ImageView，依赖很多，编译过程很繁琐<br>项目地址：<a href="https://github.com/frapontillo/ImageViewEx" target="_blank" rel="external">https://github.com/frapontillo/ImageViewEx</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true</a>  </p>
</li>
<li><p>RoundedImageView<br>带圆角的 ImageView<br>项目地址：<a href="https://github.com/vinc3m1/RoundedImageView" target="_blank" rel="external">https://github.com/vinc3m1/RoundedImageView</a><br>效果图：<img src="https://raw.github.com/makeramen/RoundedImageView/master/screenshot.png" alt="Renderings">  </p>
</li>
<li><p>SelectableRoundedImageView<br>ImageView 允许四个角的每一个有不同的半径值。也允许椭圆形、圆形的形状或者边<br>项目地址：<a href="https://github.com/pungrue26/SelectableRoundedImageView" target="_blank" rel="external">https://github.com/pungrue26/SelectableRoundedImageView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.joooonho" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.joooonho</a><br>效果图：<img src="https://camo.githubusercontent.com/25d2e5fb8783b5dd09c00b03091172a79c69350e/687474703a2f2f692e696d6775722e636f6d2f55355653376d322e706e673f31" alt="Renderings">  </p>
</li>
<li><p>ColorArt<br>根据图片的均色设置背景色显示文字和图片，类似 itune11 中效果<br>项目地址：<a href="https://github.com/MichaelEvans/ColorArt" target="_blank" rel="external">https://github.com/MichaelEvans/ColorArt</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true</a>  </p>
</li>
<li><p>CircleImageView<br>圆形的 ImageView<br>项目地址：<a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="external">https://github.com/hdodenhof/CircleImageView</a><br>效果图：<img src="https://raw.github.com/hdodenhof/CircleImageView/master/screenshot.png" alt="Renderings">  </p>
</li>
<li><p>ImageViewZoom<br>支持放大和平移的 ImageView<br>项目地址：<a href="https://github.com/sephiroth74/ImageViewZoom" target="_blank" rel="external">https://github.com/sephiroth74/ImageViewZoom</a><br>APP 示例：<a href="https://play.google.com/store/apps/details?id=com.aviary.android.feather" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.aviary.android.feather</a>  </p>
</li>
<li><p>KenBurnsView<br>实现 Ken Burns effect 效果，达到身临其境效果的 ImageView<br>项目地址：<a href="https://github.com/flavioarfaria/KenBurnsView" target="_blank" rel="external">https://github.com/flavioarfaria/KenBurnsView</a>  </p>
</li>
<li><p>CustomShapeImageView<br>各种形状的 ImageView, 相比上面的圆形 ImageView，多了更多形状<br>项目地址：<a href="https://github.com/MostafaGazar/CustomShapeImageView" target="_blank" rel="external">https://github.com/MostafaGazar/CustomShapeImageView</a><br>效果图：<img src="https://raw.github.com/MostafaGazar/CustomShapeImageView/master/Screenshot_2013-11-05-23-08-12.png" alt="Renderings">  </p>
</li>
<li><p>Shape Image View<br>可以自定义各种形状的 ImageView, 并且支持边框<br>项目地址：<a href="https://github.com/siyamed/android-shape-imageview" target="_blank" rel="external">https://github.com/siyamed/android-shape-imageview</a><br>效果图：<img src="https://github.com/siyamed/android-shape-imageview/raw/master/images/shader-buble.png" alt="Renderings"><br><a href="https://github.com/siyamed/android-shape-imageview/raw/master/images/all-samples.png" target="_blank" rel="external">https://github.com/siyamed/android-shape-imageview/raw/master/images/all-samples.png</a>  </p>
</li>
<li><p>TextDrawable<br>一个用于生成带有文本或者字母的图片的轻量级库。扩展自 Drawable，因此可用于现有/自定义/网络等 ImageView 类，并且包含一个流接口用于创建 drawables 以及一个定制的 ColorGenerator<br>项目地址：<a href="https://github.com/amulyakhare/TextDrawable" target="_blank" rel="external">https://github.com/amulyakhare/TextDrawable</a><br>效果图：<img src="https://raw.githubusercontent.com/amulyakhare/TextDrawable/master/screens/screen7.png" alt="Renderings">  </p>
</li>
<li><p>android-smart-image-view<br>可从 URL 或 contact address book 加载图片的 ImageView，支持缓存<br>项目地址：<a href="https://github.com/loopj/android-smart-image-view" target="_blank" rel="external">https://github.com/loopj/android-smart-image-view</a>  </p>
</li>
<li><p>PhotoView<br>支持双指/双击缩放的ImageView,支持从一个PhotoView缩放到另外一个PhotoView(点击图片放大预览),相对于其他PhototView有更加平滑的缩放,平移的动画,并且支持所有的ScaleType,可以作为普通的ImageView使用<br>项目地址：<a href="https://github.com/bm-x/PhotoView" target="_blank" rel="external">https://github.com/bm-x/PhotoView</a><br>效果图：<img src="https://github.com/bm-x/PhotoView/raw/master/demo1.gif" alt="Renderings">  </p>
</li>
<li><p>TextWithImageDrawable<br>一个可以同时包含图片和文字的drawable,使用方式类似TextView和它的drawableLeft之类的方法,功能比较全面,可以代替TextView或是解决一些非得需要在ImageView中同时显示文字和图片的问题<br>项目地址：<a href="https://github.com/wuseal/TextWithImageDrawable" target="_blank" rel="external">https://github.com/wuseal/TextWithImageDrawable</a>  </p>
</li>
<li><p>AnchorImageView<br>一个可以锚点定位的ImageView(根据像素点)<br>Demo中通过AnchorImageView简单的实现了一个课本点读的功能<br>项目地址：<a href="https://github.com/jcodeing/AnchorImageView" target="_blank" rel="external">https://github.com/jcodeing/AnchorImageView</a><br>Demo 地址：<a href="https://raw.githubusercontent.com/jcodeing/AnchorImageView/master/AnchorImageView-debug.apk" target="_blank" rel="external">Download here</a><br>效果图：<img src="https://raw.githubusercontent.com/jcodeing/AnchorImageView/master/lookme.gif" alt="Renderings">  </p>
</li>
</ol>
<h4 id="七、ProgressBar"><a href="#七、ProgressBar" class="headerlink" title="七、ProgressBar"></a>七、ProgressBar</h4><ol>
<li><p>SmoothProgressBar<br>水平进度条<br>项目地址：<a href="https://github.com/castorflex/SmoothProgressBar" target="_blank" rel="external">https://github.com/castorflex/SmoothProgressBar</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample</a>  </p>
</li>
<li><p>MaterialProgessBar<br>Material Design 的进度条，支持 Android 4.0<br>项目地址：<a href="https://github.com/DreaminginCodeZH/MaterialProgressBar" target="_blank" rel="external">https://github.com/DreaminginCodeZH/MaterialProgressBar</a><br>Demo 地址：<a href="https://github.com/DreaminginCodeZH/MaterialProgressBar/blob/master/dist/sample.apk" target="_blank" rel="external">https://github.com/DreaminginCodeZH/MaterialProgressBar/blob/master/dist/sample.apk</a>  </p>
</li>
<li><p>ProgressWheel<br>支持进度显示的圆形 ProgressBar<br>项目地址：<a href="https://github.com/Todd-Davies/ProgressWheel" target="_blank" rel="external">https://github.com/Todd-Davies/ProgressWheel</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true</a>  </p>
</li>
<li><p>android-square-progressbar<br>在图片周围显示进度<br>项目地址：<a href="https://github.com/mrwonderman/android-square-progressbar" target="_blank" rel="external">https://github.com/mrwonderman/android-square-progressbar</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example" target="_blank" rel="external">https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example</a><br>效果图：<img src="https://googledrive.com/host/0BwESwPCuXtw7eExwSFVLQkR2TTg/newscreen1.png" alt="Renderings"><br>APP 示例：square  </p>
</li>
<li><p>HoloCircularProgressBar<br>Android4.1 时钟 App 样式<br>项目地址：<a href="https://github.com/passsy/android-HoloCircularProgressBar" target="_blank" rel="external">https://github.com/passsy/android-HoloCircularProgressBar</a><br>效果图：<img src="https://raw.github.com/passsy/android-HoloCircularProgressBar/master/raw/screenshot1.png" alt="Renderings"><br>APP 示例：Android4.1 时钟 App  </p>
</li>
<li><p>ProgressButton<br>通过图钉的不同状态显示进度<br>项目地址：<a href="https://github.com/f2prateek/progressbutton" target="_blank" rel="external">https://github.com/f2prateek/progressbutton</a><br>文档介绍：<a href="http://f2prateek.com/progressbutton/" target="_blank" rel="external">http://f2prateek.com/progressbutton/</a><br>效果图：<img src="http://f2prateek.com/progressbutton/static/states.png" alt="Renderings">  </p>
</li>
<li><p>GoogleProgressBar<br>类似 google 多个圆形卡片翻转的 progressBar<br>项目地址：<a href="https://github.com/jpardogo/GoogleProgressBar" target="_blank" rel="external">https://github.com/jpardogo/GoogleProgressBar</a><br>效果图：<img src="https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/master/art/GoogleProgressBar.gif" alt="Renderings">  </p>
</li>
<li><p>TH-ProgressButton<br>带圆形进度显示的按钮<br>项目地址：<a href="https://github.com/torryharris/TH-ProgressButton" target="_blank" rel="external">https://github.com/torryharris/TH-ProgressButton</a><br>效果图：<img src="https://raw.github.com/Vyshakh-K/TH-ProgressButton/master/screenshots/progressshot1.png" alt="Renderings"><br><a href="https://raw.github.com/Vyshakh-K/TH-ProgressButton/master/screenshots/progressshot2.png" target="_blank" rel="external">https://raw.github.com/Vyshakh-K/TH-ProgressButton/master/screenshots/progressshot2.png</a>  </p>
</li>
<li><p>NumberProgressBar<br>带数字进度的进度条<br>项目地址：<a href="https://github.com/daimajia/NumberProgressBar" target="_blank" rel="external">https://github.com/daimajia/NumberProgressBar</a><br>效果图：<img src="https://camo.githubusercontent.com/0c92568af7ec4e04e2e1503acdd2ca99854ab0b5/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a77316566797264386e376937673230637a30326d7135662e676966" alt="Renderings">  </p>
</li>
<li><p>CircularProgressDrawable<br>带圆形进度显示的进度条<br>项目地址：<a href="https://github.com/Sefford/CircularProgressDrawable" target="_blank" rel="external">https://github.com/Sefford/CircularProgressDrawable</a><br>效果图：<img src="https://raw.githubusercontent.com/Sefford/CircularProgressDrawable/master/overshoot.gif" alt="Renderings">  </p>
</li>
<li><p>Android-RoundCornerProgressBar<br>Android 圆角 ProgressBar，可自定义圆角颜色和半径，包括带 Icon 和不带 Icon 两种类型。<br>项目地址：<a href="https://github.com/akexorcist/Android-RoundCornerProgressBar" target="_blank" rel="external">https://github.com/akexorcist/Android-RoundCornerProgressBar</a><br>效果图：<img src="https://raw.githubusercontent.com/akexorcist/Android-RoundCornerProgressBar/master/image/screenshot_02.png" alt="Renderings">  </p>
</li>
<li><p>circular-progress-button<br>带进度显示的 Button<br>项目地址：<a href="https://github.com/dmytrodanylyk/circular-progress-button" target="_blank" rel="external">https://github.com/dmytrodanylyk/circular-progress-button</a><br>效果图：<img src="https://raw.githubusercontent.com/dmytrodanylyk/circular-progress-button/master/screenshots/intro.gif" alt="Renderings">  </p>
</li>
<li><p>WaveView<br>一个波纹效果的 View，可用来做 ProgressBar<br>项目地址：<a href="https://github.com/john990/WaveView" target="_blank" rel="external">https://github.com/john990/WaveView</a><br>Demo 地址：<a href="https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk" target="_blank" rel="external">https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk</a><br>效果图：<img src="https://camo.githubusercontent.com/60722e9d4f2d2daa78a8650cb27a32adea82bdd4/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f686e3939302f57617665566965772f6d61737465722f73637265656e73686f7425323661706b2f73637265656e73686f742e676966" alt="Renderings">  </p>
</li>
<li><p>MaterialLoadingProgressBar<br>抽取自 SwipeRefreshLayout 的 Material Design 进度指示器<br>项目地址：<a href="https://github.com/lsjwzh/MaterialLoadingProgressBar" target="_blank" rel="external">https://github.com/lsjwzh/MaterialLoadingProgressBar</a><br>效果图：<img src="https://github.com/lsjwzh/MaterialLoadingProgressBar/raw/master/screen.gif" alt="Renderings">  </p>
</li>
<li><p>MetaballLoading<br>A 2d metaball loading<br>项目地址：<a href="https://github.com/dodola/MetaballLoading" target="_blank" rel="external">https://github.com/dodola/MetaballLoading</a><br>效果图：<img src="https://github.com/dodola/MetaballLoading/blob/master/metaball.gif" alt="Renderings"><br>效果图：<img src="https://github.com/dodola/MetaballLoading/blob/master/metaball2.gif" alt="Renderings"></p>
</li>
<li><p>SectorProgressView<br>一个圆形或环形的进度显示控件，用圆中扇形的角度大小来表示进度信息<br><br>项目地址：<a href="https://github.com/timqi/SectorProgressView" target="_blank" rel="external">https://github.com/timqi/SectorProgressView</a><br><br>Demo：<a href="https://github.com/timqi/SectorProgressView/raw/master/art/example.apk" target="_blank" rel="external">apk download</a> <br><br>效果图：<br><img src="https://github.com/timqi/SectorProgressView/raw/master/art/colorfulringprogressview.demo.gif" alt="ColorfulRingProgressView"> <img src="https://github.com/timqi/SectorProgressView/raw/master/art/sectorprogressview.demo.gif" alt="SectorProgressView"></p>
</li>
<li><p>CircularFillableLoaders<br>一个可以用于闪屏或者其他地方加载的控件<br><br>项目地址：<a href="https://github.com/lopspower/CircularFillableLoaders" target="_blank" rel="external">https://github.com/lopspower/CircularFillableLoaders</a><br><br>Demo地址：(<a href="https://play.google.com/store/apps/details?id=com.mikhaellopez.circularfillableloaderssample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.mikhaellopez.circularfillableloaderssample</a>) <br><br>效果图：<br><img src="https://camo.githubusercontent.com/b8e510f51d0781c1ac41a01713d81beb93ff30a9/687474703a2f2f6936362e74696e797069632e636f6d2f357a6771776e2e706e67" alt="CircularFillableLoaders"> <img src="https://lh3.googleusercontent.com/QUzoUjzTGirHKnGSmvziRfh230FRph12TPfEqUdZs9HXAgDnB79pSP6aCDLVpU9QvRZA=h310-rw" alt="CircularFillableLoaders"></p>
</li>
<li><p>PinWheel<br>一个旋转的大风车Dialog<br>项目地址：<a href="https://github.com/codingWang/PinWheel" target="_blank" rel="external">https://github.com/codingWang/PinWheel</a><br><br>效果图：<img src="https://github.com/codingWang/PinWheel/blob/master/gif/pinwheel.gif" alt="Renderings"></p>
</li>
<li><p>ColorArcProgressBar<br>一个可定制的圆形进度条，通过xml参数配置可实现QQ健康中步数的弧形进度显示、仪盘表显示速度、最常见的下载进度条等功能。<br><br>项目地址：<a href="https://github.com/Shinelw/ColorArcProgressBar" target="_blank" rel="external">https://github.com/Shinelw/ColorArcProgressBar</a><br><br>效果图：<br><img src="https://raw.githubusercontent.com/Shinelw/ColorArcProgressBar/master/Demo.gif" alt="ColorArcProgressBar"></p>
</li>
<li><p>LoadingDrawable<br>一些酷炫的android加载动画，可以与任何组件配合使用作为加载的组件或者ProgressBar。<br><br>项目地址：<a href="https://github.com/dinuscxj/LoadingDrawable" target="_blank" rel="external">https://github.com/dinuscxj/LoadingDrawable</a><br>效果图：<br><br><img src="https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/AnimalDrawable.gif?width=300" alt="LoadingDrawable"><br><img src="https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/SceneryDrawable.gif?width=300" alt="LoadingDrawable"><br><img src="https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/CircleJumpDrawable.gif?width=300" alt="LoadingDrawable"><br><img src="https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/CircleRotateDrawable.gif?width=300" alt="LoadingDrawable"></p>
</li>
<li>Android-SpinKit<br>Android加载动画库<br>项目地址：<a href="https://github.com/ybq/Android-SpinKit" target="_blank" rel="external">https://github.com/ybq/Android-SpinKit</a><br>效果图：<br><img src="https://raw.githubusercontent.com/ybq/AndroidSpinKit/master/art/screen.gif" alt="Renderings">  </li>
</ol>
<h4 id="八、TextView"><a href="#八、TextView" class="headerlink" title="八、TextView"></a>八、TextView</h4><p>包括 TextView 及所有继承自 TextView 控件，如 EditText、Button、RadioButton  </p>
<ol>
<li><p>android-flowtextview<br>文字自动环绕其他 View 的 Layout<br>项目地址：<a href="https://github.com/deano2390/FlowTextView" target="_blank" rel="external">https://github.com/deano2390/FlowTextView</a><br>效果图：<img src="http://i949.photobucket.com/albums/ad332/vostroman1500/1.png" alt="Renderings">  </p>
</li>
<li><p>Android Form EditText<br>验证输入合法性的编辑框，支持输入、英文、ip、url 等多种正则验证<br>项目地址：<a href="https://github.com/vekexasia/android-edittext-validator" target="_blank" rel="external">https://github.com/vekexasia/android-edittext-validator</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample</a>  </p>
</li>
<li><p>Emojicon<br>支持 emojis 的 TextView 和 EditText<br>项目地址：<a href="https://github.com/rockerhieu/emojicon" target="_blank" rel="external">https://github.com/rockerhieu/emojicon</a><br>文档介绍：<a href="http://rockerhieu.com/emojicon/" target="_blank" rel="external">http://rockerhieu.com/emojicon/</a>  </p>
</li>
<li><p>android-circlebutton<br>Android 圆形按钮，实际实现是继承自 ImageView<br>项目地址：<a href="https://github.com/markushi/android-circlebutton" target="_blank" rel="external">https://github.com/markushi/android-circlebutton</a><br>Demo 地址：<a href="https://github.com/markushi/android-circlebutton/blob/master/example/example.apk" target="_blank" rel="external">https://github.com/markushi/android-circlebutton/blob/master/example/example.apk</a>  </p>
</li>
<li><p>Segmented Radio Buttons for Android<br>iOS’s segmented controls 的实现<br>项目地址：<a href="https://github.com/vinc3m1/android-segmentedradiobutton" target="_blank" rel="external">https://github.com/vinc3m1/android-segmentedradiobutton</a><br>Demo 地址：<a href="https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true" target="_blank" rel="external">https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true</a><br>效果图：<img src="https://raw.github.com/vinc3m1/android-segmentedradiobutton/master/screens/segmentedradio.png" alt="Renderings">  </p>
</li>
<li><p>Chips EditText Library<br>支持国家名字联想从而选择显示该国国旗的 EditText，实际就是通过 SpannableStringBuilder 实现<br>项目地址：<a href="https://github.com/kpbird/chips-edittext-library" target="_blank" rel="external">https://github.com/kpbird/chips-edittext-library</a><br>Demo 地址：<a href="https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin" target="_blank" rel="external">https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin</a>  </p>
</li>
<li><p>AutoFitTextView<br>可固定边界内容字体大小自适应的 TextView<br>项目地址：<a href="https://github.com/grantland/android-autofittextview" target="_blank" rel="external">https://github.com/grantland/android-autofittextview</a>  </p>
</li>
<li><p>Shimmer for Android<br>文字发淡光的 TextView<br>项目地址：<a href="https://github.com/RomainPiel/Shimmer-android" target="_blank" rel="external">https://github.com/RomainPiel/Shimmer-android</a>  </p>
</li>
<li><p>Titanic<br>可以显示水位上升下降(不知道该怎么描述 囧)的 TextView<br>项目地址：<a href="https://github.com/RomainPiel/Titanic" target="_blank" rel="external">https://github.com/RomainPiel/Titanic</a><br>效果图：<img src="https://github.com/RomainPiel/Titanic/raw/master/titanic.gif" alt="Renderings">  </p>
</li>
<li><p>android-iconify<br>提供带 Icon 的 TextView,Menu,Button 等<br>项目地址：<a href="https://github.com/JoanZapata/android-iconify" target="_blank" rel="external">https://github.com/JoanZapata/android-iconify</a>  </p>
</li>
<li><p>Calligraphy<br>让我们在 android 开发中使用自定义字体变得更加简单<br>项目地址：<a href="https://github.com/chrisjenx/Calligraphy" target="_blank" rel="external">https://github.com/chrisjenx/Calligraphy</a><br>效果图：<img src="https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png" alt="Renderings">  </p>
</li>
<li><p>CreditsRoll<br>类似星球大战字幕效果的 TextView<br>项目地址：<a href="https://github.com/frakbot/CreditsRoll" target="_blank" rel="external">https://github.com/frakbot/CreditsRoll</a>  </p>
</li>
<li><p>android-process-buton<br>带加载或提交进度的 Button<br>项目地址：<a href="https://github.com/dmytrodanylyk/android-process-buton" target="_blank" rel="external">https://github.com/dmytrodanylyk/android-process-buton</a>  </p>
</li>
<li><p>FButton<br>扁平化的 Button<br>项目地址：<a href="https://github.com/hoang8f/android-flat-button" target="_blank" rel="external">https://github.com/hoang8f/android-flat-button</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo</a>  </p>
</li>
<li><p>FloatingActionButton<br>一个类似 Android 版 Google+浮动功能按钮的控件，可以响应 ListView 的滚动事件。当列表向上滚动的时候会自动显示，向下滚动的时候自动隐藏。<br>项目地址：<a href="https://github.com/makovkastar/FloatingActionButton" target="_blank" rel="external">https://github.com/makovkastar/FloatingActionButton</a><br>Demo 地址：<a href="https://github.com/makovkastar/FloatingActionButton/tree/master/" target="_blank" rel="external">https://github.com/makovkastar/FloatingActionButton/tree/master/</a><br>效果图：<img src="https://raw.githubusercontent.com/makovkastar/FloatingActionButton/master/art/demo.gif" alt="Renderings">  </p>
</li>
<li><p>Android Saripaar<br>Android 表单验证<br>项目地址：<a href="https://github.com/ragunathjawahar/android-saripaar/" target="_blank" rel="external">https://github.com/ragunathjawahar/android-saripaar/</a>  </p>
</li>
<li><p>JumpingBeans<br>文字像 Mexican beans 一样跳动<br>项目地址：<a href="https://github.com/frakbot/JumpingBeans" target="_blank" rel="external">https://github.com/frakbot/JumpingBeans</a><br>Demo 地址：<a href="http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo" target="_blank" rel="external">http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo</a><br>效果图：<img src="https://github.com/frakbot/JumpingBeans/blob/master/art/jumpingdots.gif" alt="Renderings">  </p>
</li>
<li><p>FancyButtons<br>一个不用图片就可以帮助我们创建出漂亮按钮的库。<br>项目地址：<a href="https://github.com/medyo/fancybuttons" target="_blank" rel="external">https://github.com/medyo/fancybuttons</a><br>Demo 地址：<a href="https://github.com/medyo/fancybuttons/tree/master/samples" target="_blank" rel="external">https://github.com/medyo/fancybuttons/tree/master/samples</a><br>效果图：<img src="https://camo.githubusercontent.com/8c5800ef180f69d302237132906737bf71a52caf/68747470733a2f2f7261772e6769746875622e636f6d2f6d6564796f2f66616e6379627574746f6e732f6d61737465722f73637265656e73686f74732f66616e63792e706e67" alt="Renderings"><br><a href="https://raw.githubusercontent.com/medyo/fancybuttons/master/screenshots/fancy2.png" target="_blank" rel="external">https://raw.githubusercontent.com/medyo/fancybuttons/master/screenshots/fancy2.png</a>  </p>
</li>
<li><p>Android-RobotoTextView<br>一个实现了所有 Roboto 字体的 TextView，包括新出的 Roboto Slab 字体。<br>项目地址：<a href="https://github.com/johnkil/Android-RobotoTextView" target="_blank" rel="external">https://github.com/johnkil/Android-RobotoTextView</a><br>Demo 地址：<a href="http://play.google.com/store/apps/details?id=com.devspark.robototextview" target="_blank" rel="external">http://play.google.com/store/apps/details?id=com.devspark.robototextview</a><br>Demo 项目：<a href="https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample" target="_blank" rel="external">https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample</a><br>效果图：<img src="https://camo.githubusercontent.com/f058c810055e1ff12fa995346059ad399d9c0f95/687474703a2f2f6934362e74696e797069632e636f6d2f6239646736392e706e67" alt="Renderings">  </p>
</li>
<li><p>Android-WizardPager<br>一个表单向导库<br>项目地址：<a href="https://github.com/romannurik/android-wizardpager" target="_blank" rel="external">https://github.com/romannurik/android-wizardpager</a><br>Demo 项目：<a href="https://github.com/str4d/android-wizardpager/tree/textfield" target="_blank" rel="external">https://github.com/str4d/android-wizardpager/tree/textfield</a><br>效果图：<img src="https://camo.githubusercontent.com/685a1eee3b9b7eb6a0409061031654ea7d6b0b17/68747470733a2f2f6c68352e676f6f676c6575736572636f6e74656e742e636f6d2f2d664944555a3074514373632f554a4e4c6a6e504c5447492f41414141414141416f4f382f784b63654f61746c6a50302f773431332d683638392d6e6f2f322e706e67" alt="Renderings">  </p>
</li>
<li><p>RippleView<br>一个实现了 Android L 上才引入的点击按钮后出现水波纹效果的按钮<br>项目地址：<a href="https://github.com/siriscac/RippleView" target="_blank" rel="external">https://github.com/siriscac/RippleView</a><br>Demo 项目：<a href="https://github.com/siriscac/RippleView/tree/master/RippleViewExample" target="_blank" rel="external">https://github.com/siriscac/RippleView/tree/master/RippleViewExample</a><br>效果图：<img src="https://camo.githubusercontent.com/eec41193900aad4803dcf18bc9915fafa3f7d1cf/68747470733a2f2f7261772e6769746875622e636f6d2f73697269736361632f526970706c65566965772f6d61737465722f53637265656e732f53637265656e2e676966" alt="Renderings">  </p>
</li>
<li><p>RippleEffect<br>一个实现 Material Design Ripple 效果的库，支持 Android API 9+以上版本。<br>项目地址：<a href="https://github.com/traex/RippleEffect" target="_blank" rel="external">https://github.com/traex/RippleEffect</a><br>Demo 项目：<a href="https://github.com/traex/RippleEffect/tree/master/sample" target="_blank" rel="external">https://github.com/traex/RippleEffect/tree/master/sample</a><br>效果图：<img src="https://raw.githubusercontent.com/traex/RippleEffect/master/header.png" alt="Renderings">  </p>
</li>
<li><p>RippleCompat<br>使用易于移植的方式为UI控件实现波纹效应，可以适配控件原背景及Palette支持。api简单，可自定义效果，兼容至Android API 7+。<br>项目地址：<a href="https://github.com/desmond1121/RippleCompat" target="_blank" rel="external">https://github.com/desmond1121/RippleCompat</a><br>Demo 项目：<a href="https://github.com/desmond1121/RippleCompat/tree/master/app" target="_blank" rel="external">https://github.com/desmond1121/RippleCompat/tree/master/app</a><br>效果图：<br><img src="https://raw.githubusercontent.com/desmond1121/RippleCompat/master/demo/Demo.gif" alt="Renderings"></p>
</li>
</ol>
<p>palette效果：<br><img src="https://raw.githubusercontent.com/desmond1121/RippleCompat/master/demo/Demo1.gif" alt="Renderings"></p>
<ol>
<li><p>Android Floating Label Widgets<br>包含一系列控件，这些控件特点是：有默认值，当值不为空时默认值浮动到上面变为提示<br>项目地址：<a href="https://github.com/marvinlabs/android-floatinglabel-widgets" target="_blank" rel="external">https://github.com/marvinlabs/android-floatinglabel-widgets</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo</a><br>在线演示：<a href="http://www.youtube.com/watch?v=hpZD9gJcRg0&amp;feature=youtu.be" target="_blank" rel="external">http://www.youtube.com/watch?v=hpZD9gJcRg0&amp;feature=youtu.be</a>  </p>
</li>
<li><p>MaterialEditText<br>EditText 的 Material Design 实现。包含 <a href="http://www.google.com/design/spec/components/text-fields.html" target="_blank" rel="external">Google Material Design Spec</a>中的 UI 效果和一些新增特性。<br>项目地址：<a href="https://github.com/rengwuxian/MaterialEditText" target="_blank" rel="external">https://github.com/rengwuxian/MaterialEditText</a>  </p>
</li>
<li><p>MaterialEditText<br>实现 <a href="http://www.google.com/design/spec/components/text-fields.html" target="_blank" rel="external">Material Design</a> 中 Ripple 效果线条背景的 EditText。直接替换原生 EditText 即可集成。<br>项目地址：<a href="https://github.com/DreamingInCodeZH/MaterialEditText" target="_blank" rel="external">https://github.com/DreamingInCodeZH/MaterialEditText</a>    </p>
</li>
<li><p>MultiActionTextView<br>可以分别给 TextView 中的某几个字设置点击事件的 TextView<br>项目地址：<a href="https://github.com/ajaysahani/MultiActionTextView" target="_blank" rel="external">https://github.com/ajaysahani/MultiActionTextView</a><br>效果图：<img src="https://camo.githubusercontent.com/1223e37d084e84ec0e22a1b27e7513661d0e1b39/687474703a2f2f692e696d6775722e636f6d2f773934576f53582e706e67" alt="Renderings">  </p>
</li>
<li><p>ToggleButton<br>状态切换的 Button，类似 iOS，用 View 实现<br>项目地址：<a href="https://github.com/zcweng/ToggleButton" target="_blank" rel="external">https://github.com/zcweng/ToggleButton</a><br>效果图：<img src="https://github.com/zcweng/ToggleButton/raw/master/ToggleButtonSample/21879.gif" alt="Renderings">  </p>
</li>
<li><p>SwitchButton<br>状态切换的 Button，类似 iOS，拥有良好的用户界面<br>项目地址：<a href="https://github.com/kyleduo/SwitchButton" target="_blank" rel="external">https://github.com/kyleduo/SwitchButton</a><br>效果图：<img src="https://raw.githubusercontent.com/kyleduo/SwitchButton/master/preview/demo_131.jpg" alt="Renderings">  </p>
</li>
<li><p>SlideSwitch<br>状态切换的开关，可以设置为类似 IOS 的圆形，也可以设置为矩形，用 View 实现<br>项目地址：<a href="https://github.com/Leaking/SlideSwitch" target="_blank" rel="external">https://github.com/Leaking/SlideSwitch</a><br>效果图：<img src="https://github.com/Leaking/SlideSwitch/blob/master/Example/TestLibs/res/drawable-hdpi/slide_c.gif" alt="Renderings">  </p>
</li>
<li><p>ExpandableTextView<br>可展开和收缩内容的 TextView。<br>项目地址：<a href="https://github.com/Manabu-GT/ExpandableTextView" target="_blank" rel="external">https://github.com/Manabu-GT/ExpandableTextView</a><br>效果图：<img src="https://camo.githubusercontent.com/8bf46083b3bd152c2051ae4c234649dbbb975376/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e6162752d47542f457870616e6461626c6554657874566965772f6d61737465722f6172742f726561646d655f64656d6f2e676966" alt="Renderings">  </p>
</li>
<li><p>TagCloudView(支持 SingleLine 模式的标签云)<br>标签云效果，只需要一行代码即可设置为 SingleLine 模式，轻松实现知乎问题话题列表效果。SingleLine 模式时末尾文字及图片可自定义。<br>项目地址：<a href="https://github.com/kingideayou/TagCloudView" target="_blank" rel="external">https://github.com/kingideayou/TagCloudView</a><br>示例APK地址：<a href="https://github.com/kingideayou/TagCloudView/raw/master/apk/Demo.apk" target="_blank" rel="external">https://github.com/kingideayou/TagCloudView/raw/master/apk/Demo.apk</a><br>APP示例：知乎<br>效果图：<img src="https://raw.githubusercontent.com/kingideayou/TagCloudView/master/imgs/tagCloudView_3.gif" alt="Renderings">  </p>
</li>
<li><p>BubbleTextView<br>Android Bubble View<br>项目地址：<a href="https://github.com/dupengtao/BubbleTextView" target="_blank" rel="external">https://github.com/dupengtao/BubbleTextView</a><br>效果图：<img src="https://camo.githubusercontent.com/3b8c44089da79868cb45a4da372f2eaae0f3341b/687474703a2f2f3764397069632e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f627562626c65775f766965772e706e67" alt="Renderings">  </p>
</li>
<li><p>shadow-layout<br>Android Shadow Layout<br>解决了<code>CardView</code>：1.不能画圆的阴影。2.设置阴影的位置。3.设置阴影颜色。<br>项目地址：<a href="https://github.com/dmytrodanylyk/shadow-layout" target="_blank" rel="external">https://github.com/dmytrodanylyk/shadow-layout</a><br>效果图：<br><img src="https://raw.githubusercontent.com/dmytrodanylyk/shadow-layout/master/screenshots/intro.png" alt="Renderings">  </p>
</li>
<li><p>MoneyTextView<br>一个支持加法运算的金额输入TextView<br>项目地址：<a href="https://github.com/andyken/MoneyTextView" target="_blank" rel="external">https://github.com/andyken/MoneyTextView</a><br>效果图：<br><img src="https://github.com/andyken/MoneyTextView/blob/master/sample/sample1.gif" alt="Renderings">  </p>
</li>
</ol>
<h4 id="九、ScrollView"><a href="#九、ScrollView" class="headerlink" title="九、ScrollView"></a>九、ScrollView</h4><ol>
<li><p>Discrollview<br>支持滚动时 Item 淡入淡出，平移，缩放效果的 ScrollView<br>项目地址：<a href="https://github.com/flavienlaurent/discrollview" target="_blank" rel="external">https://github.com/flavienlaurent/discrollview</a><br>Demo 地址：<a href="https://github.com/flavienlaurent/discrollview/raw/master/sample.apk" target="_blank" rel="external">https://github.com/flavienlaurent/discrollview/raw/master/sample.apk</a>  </p>
</li>
<li><p>PullScrollView<br>仿照新浪微博 Android 客户端个人中心的 ScrollView，下拉背景伸缩回弹效果。<br>项目地址：<a href="https://github.com/MarkMjw/PullScrollView" target="_blank" rel="external">https://github.com/MarkMjw/PullScrollView</a><br>效果图：<img src="https://raw.github.com/MarkMjw/PullScrollView/master/Screenshots/1.png" alt="Renderings">  </p>
</li>
<li><p>ArcLayout<br>一个非常简单的弧布局库<br>项目地址：<a href="https://github.com/ogaclejapan/ArcLayout" target="_blank" rel="external">https://github.com/ogaclejapan/ArcLayout</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo</a><br>效果图：<img src="https://raw.githubusercontent.com/ogaclejapan/ArcLayout/master/art/demo1.gif" alt="Renderings"><br><a href="https://raw.githubusercontent.com/ogaclejapan/ArcLayout/master/art/demo2.gif" target="_blank" rel="external">https://raw.githubusercontent.com/ogaclejapan/ArcLayout/master/art/demo2.gif</a>  </p>
</li>
<li><p>ParallaxScrollView<br>支持视差滚动的 ScrollView ，背景图片的滚动速度小于 ScrollView 中子控件的滚动速度<br>项目地址：<a href="https://github.com/chrisjenx/ParallaxScrollView" target="_blank" rel="external">https://github.com/chrisjenx/ParallaxScrollView</a><br>Demo 地址：<a href="http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk" target="_blank" rel="external">http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk</a>  </p>
</li>
<li><p>AKParallax-Android<br>支持视差滚动的 ScrollView<br>项目地址：<a href="https://github.com/ideaismobile/AKParallax-Android" target="_blank" rel="external">https://github.com/ideaismobile/AKParallax-Android</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample</a>  </p>
</li>
<li><p>Android-ObservableScrollView<br>监听滚动视图滚动事件的库，帮助与 Toolbar 的交互动效处理与 Material Design 的实现<br>项目地址：<a href="https://github.com/ksoichiro/Android-ObservableScrollView" target="_blank" rel="external">https://github.com/ksoichiro/Android-ObservableScrollView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2</a>  </p>
</li>
<li><p>OverScrollView<br>有弹性的 ScrollView，实现了当手指滑动到 ScrollView 的顶部、底部时，可以继续的向上、向下拉伸。当释放手指的时候，向上、下回弹<br>项目地址：<a href="https://github.com/EverythingMe/OverScrollView" target="_blank" rel="external">https://github.com/EverythingMe/OverScrollView</a>  </p>
</li>
</ol>
<h4 id="十、TimeView"><a href="#十、TimeView" class="headerlink" title="十、TimeView"></a>十、TimeView</h4><p>包括 TimePicker、DatePicker、CalendarView、Clock 等时间相关控件  </p>
<ol>
<li><p>android-times-square<br>Android 日历时间部件，支持选取单个日期，多个日期，及日期区间段和对话框形式显示<br>项目地址：<a href="https://github.com/square/android-times-square" target="_blank" rel="external">https://github.com/square/android-times-square</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true</a>  </p>
</li>
<li><p>android-calendar-card<br>日历<br>项目地址：<a href="https://github.com/kenumir/android-calendar-card" target="_blank" rel="external">https://github.com/kenumir/android-calendar-card</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.wt.calendarcardsample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.wt.calendarcardsample</a><br>效果图：<img src="https://raw.github.com/kenumir/android-calendar-card/master/calendar-card-sample/_work/device-2013-10-12-151801.png" alt="Renderings">  </p>
</li>
<li><p>AndroidWheel<br>Android Wheel 支持城市、多种日期时间、密码、图片<br>项目地址：<a href="https://code.google.com/p/android-wheel/" target="_blank" rel="external">https://code.google.com/p/android-wheel/</a><br>效果图：<img src="http://farm6.staticflickr.com/5532/11621528786_220c040ba5_o.jpg" alt="Renderings">  </p>
</li>
<li><p>GoogleDateTimePickers<br>时间选择部件<br>项目地址：<a href="https://github.com/Mirkoddd/GoogleDateTimePickers" target="_blank" rel="external">https://github.com/Mirkoddd/GoogleDateTimePickers</a><br>文档介绍：<a href="https://play.google.com/store/apps/details?id=com.mirko.sample&amp;hl=it" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.mirko.sample&amp;hl=it</a>  </p>
</li>
<li><p>DateTimePicker<br>日期选择部件(Google Agenda 的样式风格)<br>项目地址：<a href="https://github.com/flavienlaurent/datetimepicker" target="_blank" rel="external">https://github.com/flavienlaurent/datetimepicker</a><br>Demo 地址：<a href="https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk" target="_blank" rel="external">https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk</a><br>效果图：<img src="https://camo.githubusercontent.com/493edeea3eb553ad0d0b121dbead0d7ec6a858f2/68747470733a2f2f7261772e6769746875622e636f6d2f6269626f756e652f6461746574696d657069636b65722f6d61737465722f67726170686963732f696d67312e706e67" alt="Renderings">  </p>
</li>
<li><p>android-betterpickers<br>提供日期、数字、时间（数字方式和钟表方式）、重复周期（闹钟的周期重复）、HMS（时、分、秒）的选择，支持以 DialogFragment 的弹窗选择<br>项目地址：<a href="https://github.com/derekbrameyer/android-betterpickers" target="_blank" rel="external">https://github.com/derekbrameyer/android-betterpickers</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample</a><br>效果图：<img src="https://camo.githubusercontent.com/897ae3c71b49c4366565f3480719647687b1804a/68747470733a2f2f7261772e6769746875622e636f6d2f646572656b6272616d657965722f616e64726f69642d6265747465727069636b6572732f6d61737465722f73616d706c652f696d61676572792f7765625f666561747572655f677261706869632e706e67" alt="Renderings">  </p>
</li>
<li><p>Android Week View<br>日期控件，支持周，天视图，支持自定义样式<br>项目地址：<a href="https://github.com/alamkanak/Android-Week-View" target="_blank" rel="external">https://github.com/alamkanak/Android-Week-View</a><br>效果图：<img src="https://github.com/alamkanak/Android-Week-View/blob/master/images/screen-shot.png" alt="Renderings">  </p>
</li>
<li><p>PickerView<br>仿 iOS 的 PickerView 控件，有时间选择和选项选择并支持一二三级联动效果，TimePopupWindow 时间选择器，支持年月日时分，年月日，时分等格式；OptionsPopupWindow 选项选择器，支持一，二，三级选项选择，并且可以设置是否联动<br>项目地址：<a href="https://github.com/saiwu-bigkoo/Android-PickerView" target="_blank" rel="external">https://github.com/saiwu-bigkoo/Android-PickerView</a><br>效果图：<img src="https://github.com/saiwu-bigkoo/PickerView/blob/master/preview/pickerdemo.gif" alt="Renderings">  </p>
</li>
<li><p>CountdownView<br>Android 倒计时控件，使用Canvas绘制，支持多种样式<br>项目地址：<a href="https://github.com/iwgang/CountdownView" target="_blank" rel="external">https://github.com/iwgang/CountdownView</a><br>效果图：<img src="https://raw.githubusercontent.com/iwgang/CountdownView/master/screenshot/screenshot.gif" alt="Renderings"></p>
</li>
</ol>
<h4 id="十一、TipView"><a href="#十一、TipView" class="headerlink" title="十一、TipView"></a>十一、TipView</h4><p>包括 Toast、角标、UndoBar 等提示性控件  </p>
<ol>
<li><p>SVProgressHUD<br>SVProgressHUD For Android 精仿iOS的提示库 SVProgressHUD，api也几乎一样。<br>项目地址：<a href="https://github.com/saiwu-bigkoo/Android-SVProgressHUD" target="_blank" rel="external">https://github.com/saiwu-bigkoo/Android-SVProgressHUD</a><br>效果图：<img src="https://github.com/saiwu-bigkoo/Android-SVProgressHUD/raw/master/preview/svprogresshuddemo.gif" alt="Renderings">  </p>
</li>
<li><p>Crouton<br>丰富样式的 Toast，允许 alert、comfirm、info 样式及点击消失样式，允许设置 Toast 显示时间，允许自定义 View。 本文 32. SuperToasts 为其扩展版<br>项目地址：<a href="https://github.com/keyboardsurfer/Crouton" target="_blank" rel="external">https://github.com/keyboardsurfer/Crouton</a><br>Demo 地址：<a href="http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton" target="_blank" rel="external">http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton</a>  </p>
</li>
<li><p>supertooltips<br>带动画效果的 Tips 显示<br>项目地址：<a href="https://github.com/nhaarman/supertooltips" target="_blank" rel="external">https://github.com/nhaarman/supertooltips</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.haarman.supertooltips" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.haarman.supertooltips</a>  </p>
</li>
<li><p>Android ViewBadger<br>为其他 View 添加角标（消息圆点）等<br>项目地址：<a href="https://github.com/jgilfelt/android-viewbadger" target="_blank" rel="external">https://github.com/jgilfelt/android-viewbadger</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true</a><br>效果图：<img src="http://www.jeffgilfelt.com/viewbadger/vb-1a.png" alt="Renderings">  </p>
</li>
<li><p>SuperToasts<br>更丰富样式的 toast，支持 Button、Progress、Horizontal Progress 样式、支持进入动画、支持撤销及其动画设置<br>项目地址：<a href="https://github.com/JohnPersano/SuperToasts" target="_blank" rel="external">https://github.com/JohnPersano/SuperToasts</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.supertoastsdemo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.supertoastsdemo</a><br>效果图：<img src="http://i1331.photobucket.com/albums/w597/JohnPersano/supertoasts_githubimage_zps8a5ceb7c.png" alt="Renderings">  </p>
</li>
<li><p>UndoBar<br>屏幕底部显示取消或是确认的 PopupWindows<br>项目地址：<a href="https://github.com/soarcn/UndoBar" target="_blank" rel="external">https://github.com/soarcn/UndoBar</a><br>效果图：<img src="https://github.com/soarcn/UndoBar/blob/master/art/redo.png?raw=true" alt="Renderings">  </p>
</li>
<li><p>UndoBar<br>屏幕底部显示取消或是确认某操作<br>项目地址：<a href="https://github.com/jenzz/Android-UndoBar" target="_blank" rel="external">https://github.com/jenzz/Android-UndoBar</a><br>效果图：<img src="https://raw.github.com/jenzz/Android-UndoBar/master/assets/Screenshot2.png" alt="Renderings">  </p>
</li>
<li><p>Android-ActionItemBadge<br>可以在 ActionBar 的 MenuItem 上显示一个小角标<br>项目地址：<a href="https://github.com/mikepenz/Android-ActionItemBadge" target="_blank" rel="external">https://github.com/mikepenz/Android-ActionItemBadge</a><br>效果图：<img src="https://raw.githubusercontent.com/mikepenz/Android-ActionItemBadge/master/DEV/screenshot/screenshot1_small.png" alt="Renderings">  </p>
</li>
<li><p>SnackBar<br>Material Design 风格的 Toast，类似 Google inbox 中的提示<br>项目地址：<a href="https://github.com/MrEngineer13/SnackBar" target="_blank" rel="external">https://github.com/MrEngineer13/SnackBar</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample</a><br>效果图：<img src="https://camo.githubusercontent.com/67a39af16f3d46631567c1f7bd7dcddeb3c4c9e9/687474703a2f2f6d6174657269616c2d64657369676e2e73746f726167652e676f6f676c65617069732e636f6d2f696d616765732f636f6d706f6e656e74732d746f617374732d73706563732d737065635f746f6173745f30335f315f6c617267655f6d6470692e706e67" alt="Renderings">  </p>
</li>
<li><p>HeadsUp<br>在 2.3 上使用 android  5.0 的 HeadsUp 效果<br>项目地址：<a href="https://github.com/zzz40500/HeadsUp" target="_blank" rel="external">https://github.com/zzz40500/HeadsUp</a><br>效果图：<img src="http://upload-images.jianshu.io/upload_images/166866-543a5d26ab71d0f6.gif" alt="Renderings](gif">  </p>
</li>
</ol>
<h4 id="十二、FlipView"><a href="#十二、FlipView" class="headerlink" title="十二、FlipView"></a>十二、FlipView</h4><ol>
<li><p>android-flip<br>类似 Flipboard 翻转动画的实现<br>项目地址：<a href="https://github.com/openaphid/android-flip" target="_blank" rel="external">https://github.com/openaphid/android-flip</a><br>Demo 地址：<a href="https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true" target="_blank" rel="external">https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true</a><br>APP 示例：flipboard  </p>
</li>
<li><p>FlipImageView<br>支持 x、y、z 及动画选择的翻转动画的实现<br>项目地址：<a href="https://github.com/castorflex/FlipImageView" target="_blank" rel="external">https://github.com/castorflex/FlipImageView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview" target="_blank" rel="external">https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview</a>  </p>
</li>
<li><p>FoldableLayout<br>Flip 翻转效果的 ListView，目前还不支持 ListView 缓存<br>项目地址：<a href="https://github.com/alexvasilkov/FoldableLayout" target="_blank" rel="external">https://github.com/alexvasilkov/FoldableLayout</a><br>Demo 地址：<a href="http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample" target="_blank" rel="external">http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample</a>  </p>
</li>
<li><p>FlipViewPager.Draco<br>Flip 翻转效果的 ViewPager<br>项目地址：<a href="https://github.com/Yalantis/FlipViewPager.Draco" target="_blank" rel="external">https://github.com/Yalantis/FlipViewPager.Draco</a><br>效果：<img src="https://camo.githubusercontent.com/db312e031e5f5a445b548d35986b0498caa261d3/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313735383239382f39396d696c65732d66696e642d667269656e64732d696e746572666163652d616e696d6174696f6e2e676966" alt="flip.gif">  </p>
</li>
</ol>
<h4 id="十三、ColorPickView"><a href="#十三、ColorPickView" class="headerlink" title="十三、ColorPickView"></a>十三、ColorPickView</h4><ol>
<li><p>ColorPickerView<br>颜色选择器，支持 PopupWindows 或新的 Activity 中打开<br>项目地址：<a href="https://code.google.com/p/color-picker-view/" target="_blank" rel="external">https://code.google.com/p/color-picker-view/</a><br>效果图：<img src="http://oi41.tinypic.com/33c6mm8.jpg" alt="Renderings">  </p>
</li>
<li><p>HoloColorPicker<br>颜色选择器<br>项目地址：<a href="https://github.com/LarsWerkman/HoloColorPicker" target="_blank" rel="external">https://github.com/LarsWerkman/HoloColorPicker</a><br>Demo 地址：<a href="https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit" target="_blank" rel="external">https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit</a>  </p>
</li>
<li><p>ColorPickerPreference<br>颜色选择器<br>项目地址：<a href="https://github.com/attenzione/android-ColorPickerPreference" target="_blank" rel="external">https://github.com/attenzione/android-ColorPickerPreference</a><br>效果图：<img src="https://github.com/attenzione/android-ColorPickerPreference/raw/master/screen_2.png" alt="Renderings">  </p>
</li>
<li><p>ColorPicker<br>颜色选择器（Google Agenda 中的样式风格）<br>项目地址：<a href="https://github.com/flavienlaurent/colorpicker" target="_blank" rel="external">https://github.com/flavienlaurent/colorpicker</a><br>Demo 地址：<a href="https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk" target="_blank" rel="external">https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk</a><br>效果图：<img src="https://camo.githubusercontent.com/a42581e637ca379004855d69e262d85ea966fa35/68747470733a2f2f7261772e6769746875622e636f6d2f6269626f756e652f636f6c6f727069636b65722f6d61737465722f67726170686963732f696d67312e706e67" alt="Renderings">  </p>
</li>
</ol>
<h4 id="十四、GraphView"><a href="#十四、GraphView" class="headerlink" title="十四、GraphView"></a>十四、GraphView</h4><ol>
<li><p>MPAndroidChart<br>强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、网状图等；支持图的拖拽缩放；支持 Android 2.2 以上，支持横纵轴缩放，多指缩放，展现动画、高亮、保存到 sdcard、从文件读取图表<br>项目地址：<a href="https://github.com/PhilJay/MPAndroidChart" target="_blank" rel="external">https://github.com/PhilJay/MPAndroidChart</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample</a><br>Demo 项目：<a href="https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample" target="_blank" rel="external">https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample</a><br>效果图：<img src="https://camo.githubusercontent.com/a9eaa5fc7fb6c1e70b22acd09385055e0f5c4fe7/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6c696e656368617274342e706e67" alt="Renderings"><br><a href="https://camo.githubusercontent.com/78b4bc4e50e151970961daf56e81c4c0db72d27c/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6261726368617274332e706e67" target="_blank" rel="external">https://camo.githubusercontent.com/78b4bc4e50e151970961daf56e81c4c0db72d27c/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6261726368617274332e706e67</a><br><a href="https://camo.githubusercontent.com/65f51783ec05038730b481ed614b57a94e867d86/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727432642e706e67" target="_blank" rel="external">https://camo.githubusercontent.com/65f51783ec05038730b481ed614b57a94e867d86/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727432642e706e67</a><br><a href="https://camo.githubusercontent.com/f66a35bf430b12480d3e2ed8e3bc8d7a17db950f/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727433642e706e67" target="_blank" rel="external">https://camo.githubusercontent.com/f66a35bf430b12480d3e2ed8e3bc8d7a17db950f/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727433642e706e67</a><br><a href="https://camo.githubusercontent.com/60bd0d71462ad577df775b956944b191e939728a/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f70696563686172745f686f6c657261646975735f73706163652e706e67" target="_blank" rel="external">https://camo.githubusercontent.com/60bd0d71462ad577df775b956944b191e939728a/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f70696563686172745f686f6c657261646975735f73706163652e706e67</a><br><a href="https://camo.githubusercontent.com/6b254aa699df7f9464967009129c3017de721b77/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f7363617474657263686172742e706e67" target="_blank" rel="external">https://camo.githubusercontent.com/6b254aa699df7f9464967009129c3017de721b77/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f7363617474657263686172742e706e67</a><br>在线演示：<a href="https://www.youtube.com/watch?v=ufaK_Hd6BpI" target="_blank" rel="external">https://www.youtube.com/watch?v=ufaK_Hd6BpI</a>  </p>
</li>
<li><p>achartengine<br>强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、拨号图/表、立方线图及各种图的结合<br>项目地址：<a href="https://code.google.com/p/achartengine/" target="_blank" rel="external">https://code.google.com/p/achartengine/</a><br>效果图：<img src="http://www.achartengine.org/dimages/average_temperature.png" alt="Renderings"><br><a href="http://www.achartengine.org/dimages/sales_line_and_area_chart.png" target="_blank" rel="external">http://www.achartengine.org/dimages/sales_line_and_area_chart.png</a><br><a href="http://www.achartengine.org/dimages/temperature_range_chart.png" target="_blank" rel="external">http://www.achartengine.org/dimages/temperature_range_chart.png</a><br><a href="http://www.achartengine.org/dimages/combined_chart.png" target="_blank" rel="external">http://www.achartengine.org/dimages/combined_chart.png</a><br><a href="http://www.achartengine.org/dimages/budget_chart.png" target="_blank" rel="external">http://www.achartengine.org/dimages/budget_chart.png</a><br>官网网址：<a href="http://www.achartengine.org/" target="_blank" rel="external">http://www.achartengine.org/</a><br>APP 示例：Wordpress Android，Google Analytics  </p>
</li>
<li><p>GraphView<br>绘制图表和曲线图的 View，可用于 Android 上的曲形图、柱状图、波浪图展示<br>项目地址：<a href="https://github.com/jjoe64/GraphView" target="_blank" rel="external">https://github.com/jjoe64/GraphView</a><br>Demo 项目：<a href="https://github.com/jjoe64/GraphView-Demos" target="_blank" rel="external">https://github.com/jjoe64/GraphView-Demos</a><br>APP 示例：Wordpress Android，Google Analytics  </p>
</li>
<li><p>HoloGraphLibrary<br>绘制现状图、柱状图、饼状图<br>项目地址：<a href="https://bitbucket.org/danielnadeau/holographlibrary/src" target="_blank" rel="external">https://bitbucket.org/danielnadeau/holographlibrary/src</a><br>文档介绍：<a href="https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home" target="_blank" rel="external">https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home</a>  </p>
</li>
<li><p>XCL-Charts<br>XCL-Charts 基于原生的 Canvas 来绘制各种图表,在设计时，尽量在保证开发效率的同时，给使用者提供足够多的定制化能力。因此使用简便,同时具有相当灵活的定制能力。目前支持 3D/非 3D 柱形图(Bar Chart)、3D/非 3D 饼图(Pie Chart)、堆积图(Stacked Bar Chart)、面积图(Area Chart)、 折线图(Line Chart)、曲线图(Spline Chart)、环形图(Dount Chart)、南丁格尔玫瑰图(Rose Chart)、仪表盘(Dial Chart)、刻度盘(Gauge Chart)、雷达图(Radar Chart)、圆形图(Circle Chart)等图表。其它特性还包括支持图表缩放、手势移动、动画显示效果、高密度柱形显示、图表分界定制线、多图表的混合显示及同数据源不同类型图表切换等。<br>项目地址：<a href="https://github.com/xcltapestry/XCL-Charts" target="_blank" rel="external">https://github.com/xcltapestry/XCL-Charts</a><br>Demo 地址：<a href="https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true" target="_blank" rel="external">https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true</a>  </p>
</li>
<li><p>EazeGraph<br>Android 图表库，支持柱状图、分层柱状图、饼状图、线性图<br>项目地址：<a href="https://github.com/blackfizz/EazeGraph" target="_blank" rel="external">https://github.com/blackfizz/EazeGraph</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=org.eazegraph.app" target="_blank" rel="external">https://play.google.com/store/apps/details?id=org.eazegraph.app</a>  </p>
</li>
<li><p>WilliamChart<br>绘制图表的库，支持 LineChartView、BarChartView 和 StackBarChartView 三中图表类型，并且支持 Android 2.2 及以上的系统。<br>项目地址：<a href="https://github.com/diogobernardino/WilliamChart" target="_blank" rel="external">https://github.com/diogobernardino/WilliamChart</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.db.williamchartdemo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.db.williamchartdemo</a><br>Demo 项目：<a href="https://github.com/diogobernardino/WilliamChart/tree/master/sample" target="_blank" rel="external">https://github.com/diogobernardino/WilliamChart/tree/master/sample</a><br>效果图：<img src="https://github.com/diogobernardino/WilliamChart/raw/master/art/linechart.gif" alt="Renderings"><img src="https://github.com/diogobernardino/WilliamChart/raw/master/art/barchart.gif" alt="Renderings"><img src="https://github.com/diogobernardino/WilliamChart/raw/master/art/stackbarchart.gif" alt="Renderings">  </p>
</li>
<li><p>HelloCharts for Android<br>支持折线图、柱状图、饼图、气泡图、组合图；支持预览、放大缩小，滚动，部分图表支持动画；支持 Android 2.2 以上<br>项目地址：<a href="https://github.com/lecho/hellocharts-android" target="_blank" rel="external">https://github.com/lecho/hellocharts-android</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples" target="_blank" rel="external">https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples</a><br>在线演示：<a href="https://www.youtube.com/watch?v=xbSBjyjH2SY" target="_blank" rel="external">https://www.youtube.com/watch?v=xbSBjyjH2SY</a>  </p>
</li>
<li><p>PieChartView<br>比较简单直接的饼状统计报表图，使用方便，设置相应的属性参数即可<br>项目地址：<a href="https://github.com/wuseal/PieChartView" target="_blank" rel="external">https://github.com/wuseal/PieChartView</a><br>Demo 地址：<a href="https://github.com/wuseal/PieChartView" target="_blank" rel="external">https://github.com/wuseal/PieChartView</a><br>效果图：<br><img src="https://github.com/wuseal/PieChartView/blob/master/demo.png?raw=true" alt="Renderings">  </p>
</li>
</ol>
<h4 id="十五、UI-Style"><a href="#十五、UI-Style" class="headerlink" title="十五、UI Style"></a>十五、UI Style</h4><p>不同样式的系统 UI 风格，如 IOS、Bootstrap 风格  </p>
<ol>
<li><p>UITableView<br>ios 风格控件，包括 Button、ListView、TableView<br>项目地址：<a href="https://github.com/thiagolocatelli/android-uitableview" target="_blank" rel="external">https://github.com/thiagolocatelli/android-uitableview</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true</a>  </p>
</li>
<li><p>ATableView<br>ios 风格控件<br>项目地址：<a href="https://github.com/dmacosta/ATableView" target="_blank" rel="external">https://github.com/dmacosta/ATableView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo</a>  </p>
</li>
<li><p>Cards-UI<br>卡片式 View，支持单个卡片，item 为卡片的 ListView<br>项目地址：<a href="https://github.com/afollestad/Cards-UI" target="_blank" rel="external">https://github.com/afollestad/Cards-UI</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true</a>  </p>
</li>
<li><p>cardslib<br>卡片式 View，支持单个卡片，item 为卡片的 ListView 和 GridView<br>项目地址：<a href="https://github.com/gabrielemariotti/cardslib" target="_blank" rel="external">https://github.com/gabrielemariotti/cardslib</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo</a>  </p>
</li>
<li><p>Android-Bootstrap<br>Bootstrap 风格的按钮<br>项目地址：<a href="https://github.com/Bearded-Hen/Android-Bootstrap" target="_blank" rel="external">https://github.com/Bearded-Hen/Android-Bootstrap</a><br>效果图：<img src="https://raw.github.com/Bearded-Hen/Android-Bootstrap/master/images/device_image.png" alt="Renderings">  </p>
</li>
<li><p>Material Design Android Library<br>Android L 中 Material Design 风格的组件适配到 Android 2.2+<br>项目地址：<a href="https://github.com/navasmdc/MaterialDesignLibrary" target="_blank" rel="external">https://github.com/navasmdc/MaterialDesignLibrary</a>  </p>
</li>
<li><p>Android FlatUI<br>Android 扁平化风格的组件，支持一些自定义样式<br>项目地址：<a href="https://github.com/eluleci/FlatUI" target="_blank" rel="external">https://github.com/eluleci/FlatUI</a><br>效果图：<img src="https://camo.githubusercontent.com/590d4a2ac322417b71f83223bd58b83903d58343/68747470733a2f2f7261772e6769746875622e636f6d2f656c756c6563692f466c617455492f6d61737465722f73616d706c652d696d616765732f73686f77636173652e706e67" alt="Renderings">  </p>
</li>
<li><p>cheesesquare<br>全新 Android 设计库演示 Demo，包括 Collapsing Toolbar、FloatingActionButton、View anchoring、NavigationView、Snackbar<br>项目地址：<a href="https://github.com/chrisbanes/cheesesquare" target="_blank" rel="external">https://github.com/chrisbanes/cheesesquare</a><br>效果图：<img src="http://7xikfc.com1.z0.glb.clouddn.com/Screenshot_2015-07-17-12-22-07.png" alt="Renderings">  </p>
</li>
</ol>
<h4 id="十六、其他"><a href="#十六、其他" class="headerlink" title="十六、其他"></a>十六、其他</h4><ol>
<li><p>SnappingStepper<br>一种漂亮的UI控件，能更灵活的控制数字的增减。可用于购物车商品数量控制。<br>项目地址：<a href="https://github.com/saiwu-bigkoo/Android-SnappingStepper" target="_blank" rel="external">https://github.com/saiwu-bigkoo/Android-SnappingStepper</a><br>效果图：<img src="https://github.com/saiwu-bigkoo/Android-SnappingStepper/blob/master/preview/snappingstepperdemo.gif" alt="Renderings">  </p>
</li>
<li><p>SwipeBackLayout<br>左右或向上滑动返回的 Activity<br>项目地址：<a href="https://github.com/Issacw0ng/SwipeBackLayout" target="_blank" rel="external">https://github.com/Issacw0ng/SwipeBackLayout</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo</a><br>APP 示例：知乎  </p>
</li>
<li><p>ParallaxBackLayout<br>视差滑动返回的 Activity<br>项目地址：<a href="https://github.com/anzewei/ParallaxBackLayout" target="_blank" rel="external">https://github.com/anzewei/ParallaxBackLayout</a><br>Demo 地址：<a href="https://github.com/anzewei/ParallaxBackLayout/blob/master/ext/demo.apk?raw=true" target="_blank" rel="external">https://github.com/anzewei/ParallaxBackLayout/blob/master/ext/demo.apk?raw=true</a><br>效果图：<img src="https://github.com/anzewei/ParallaxBackLayout/blob/master/ext/v0.2.gif" alt="Renderings">  </p>
</li>
<li><p>android-styled-dialogs<br>可自定义样式的 dialog，默认与 Holo 主题样式一致，在 Android2.2 以上同一样式<br>项目地址：<a href="https://github.com/inmite/android-styled-dialogs" target="_blank" rel="external">https://github.com/inmite/android-styled-dialogs</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true</a>  </p>
</li>
<li><p>Android Sliding Up Panel<br>可拖动的 View，能在当前 Activity 上扶起一个可拖动的 Panel<br>项目地址：<a href="https://github.com/umano/AndroidSlidingUpPanel" target="_blank" rel="external">https://github.com/umano/AndroidSlidingUpPanel</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.sothree.umano" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.sothree.umano</a><br>APP 示例：Google Music 精简播放栏  </p>
</li>
<li><p>TableFixHeaders<br>第一列固定的 Table<br>项目地址：<a href="https://github.com/InQBarna/TableFixHeaders" target="_blank" rel="external">https://github.com/InQBarna/TableFixHeaders</a><br>Demo 地址：<a href="http://bit.ly/13buAIq" target="_blank" rel="external">http://bit.ly/13buAIq</a>  </p>
</li>
<li><p>Inscription<br>可用于展示应用 change 和 new feature 信息<br>项目地址：<a href="https://github.com/MartinvanZ/Inscription" target="_blank" rel="external">https://github.com/MartinvanZ/Inscription</a>  </p>
</li>
<li><p>ActivityTransition<br>Activity 切换动画，包括渐变、flip、某个位置进入等等<br>项目地址：<a href="https://github.com/ophilbert/ActivityTransition" target="_blank" rel="external">https://github.com/ophilbert/ActivityTransition</a><br>文档介绍：<a href="https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true" target="_blank" rel="external">https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true</a>  </p>
</li>
<li><p>EasyAndroidAnimations<br>针对 View 的各种动画<br>项目地址：<a href="https://github.com/2359media/EasyAndroidAnimations" target="_blank" rel="external">https://github.com/2359media/EasyAndroidAnimations</a>  </p>
</li>
<li><p>ViewAnimation<br>对android view 动画进行封装,实现起更简单，自带三种常见运动路径，其他的可自定义<br>项目地址：<a href="https://github.com/guohuanwen/ViewAniamtion" target="_blank" rel="external">https://github.com/guohuanwen/ViewAniamtion</a><br>效果图：<img src="https://github.com/guohuanwen/ViewAniamtion/blob/master/sreenshots/AnimationGif.gif" alt="ViewAnimation"><br>APP 示例：QQ名片圈圈效果  </p>
</li>
<li><p>AndroidLoadingAnimation<br>多种android加载动画<br>项目地址：<a href="https://github.com/guohuanwen/AndroidLoadingAnimation" target="_blank" rel="external">https://github.com/guohuanwen/AndroidLoadingAnimation</a><br>效果图：<img src="https://github.com/guohuanwen/AndroidLoadingAnimation/blob/master/screenshots/taiji1.gif" alt="TaiJIView">  </p>
</li>
</ol>
<ol>
<li><p>android-lockpattern<br>Android 的图案密码解锁<br>项目地址：<a href="https://code.google.com/p/android-lockpattern/" target="_blank" rel="external">https://code.google.com/p/android-lockpattern/</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/爱早起/Android Lock Pattern 源码解析" target="_blank" rel="external">android-lockpattern</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo</a><br>文档介绍：<a href="https://code.google.com/p/android-lockpattern/wiki/QuickUse" target="_blank" rel="external">https://code.google.com/p/android-lockpattern/wiki/QuickUse</a><br>APP 示例：Android 开机的图案密码解锁，支付宝的密码解锁  </p>
</li>
<li><p>PatternLock<br>另一个 Android 图案解锁库<br>项目地址：<a href="https://github.com/DreaminginCodeZH/PatternLock" target="_blank" rel="external">https://github.com/DreaminginCodeZH/PatternLock</a><br>Demo 地址：<a href="https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk" target="_blank" rel="external">https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk</a><br>效果图：<img src="https://github.com/DreaminginCodeZH/PatternLock/raw/master/image/sample_small.png" alt="Renderings"><br>APP 示例：Android 开机的图案密码解锁，支付宝的密码解锁  </p>
</li>
<li><p>RangeBar<br>类似于 SeekBar，不同的是可以选择一个范围内的值而不是单个值<br>项目地址：<a href="https://github.com/edmodo/range-bar" target="_blank" rel="external">https://github.com/edmodo/range-bar</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true</a><br>效果图：<img src="http://i.imgur.com/q85GhRjl.png" alt="Renderings">  </p>
</li>
<li><p>ChromeView<br>利用 Chromium 实现的 WebView，解决各个 Android 版本 WebView 不同的问题，同时利用最新 Chrome 代码<br>项目地址：<a href="https://github.com/pwnall/chromeview" target="_blank" rel="external">https://github.com/pwnall/chromeview</a>  </p>
</li>
<li><p>android-phased-seek-bar<br>支持预先定义状态的 SeekBar<br>项目地址：<a href="https://github.com/ademar111190/android-phased-seek-bar" target="_blank" rel="external">https://github.com/ademar111190/android-phased-seek-bar</a><br>效果图：<img src="https://raw.githubusercontent.com/ademar111190/android-phased-seek-bar/master/images/sample.gif" alt="Renderings">  </p>
</li>
<li><p>Android Slider Preference Library<br>可添加到设置中的基于对话框的 RankBar 小部件<br>项目地址：<a href="https://github.com/jayschwa/AndroidSliderPreference" target="_blank" rel="external">https://github.com/jayschwa/AndroidSliderPreference</a>  </p>
</li>
<li><p>ShowcaseView library<br>用于高亮显示应用程序的特定部分，从而突出突出重点<br>项目地址：<a href="https://github.com/amlcurran/ShowcaseView" target="_blank" rel="external">https://github.com/amlcurran/ShowcaseView</a>  </p>
</li>
<li><p>android-segmented-control<br>Android 上的 Segmented Controls，相当于 RadioButton 组<br>项目地址：<a href="https://github.com/hoang8f/android-segmented-control" target="_blank" rel="external">https://github.com/hoang8f/android-segmented-control</a>  </p>
</li>
<li><p>Swipeable Cards<br>类似 Tinder 的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢<br>项目地址：<a href="https://github.com/kikoso/Swipeable-Cards" target="_blank" rel="external">https://github.com/kikoso/Swipeable-Cards</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo</a>  </p>
</li>
<li><p>EdgeEffectOverride<br>改变 ScrollView, ListView, ExpandableListView, GridView, ViewPager 等滚动控件滚动到边缘的颜色效果<br>项目地址：<a href="https://github.com/AndroidAlliance/EdgeEffectOverride" target="_blank" rel="external">https://github.com/AndroidAlliance/EdgeEffectOverride</a>  </p>
</li>
<li><p>android-pinned-header-listviews<br>使 ExpandListView 的 Group 滑动到顶端时会固定不动直到另外一个 Group 到达顶端<br>项目地址：<a href="https://github.com/rtyley/android-pinned-header-listviews" target="_blank" rel="external">https://github.com/rtyley/android-pinned-header-listviews</a>  </p>
</li>
<li><p>AndroidSwipeLayout<br>滑动 Layout，支持单个 View，ListView，GridView<br>项目地址：<a href="https://github.com/daimajia/AndroidSwipeLayout" target="_blank" rel="external">https://github.com/daimajia/AndroidSwipeLayout</a><br>Demo 地址：<a href="https://github.com/daimajia/AndroidSwipeLayout/releases/download/v1.0.0/AndroidSwipeLayout-Demo-1.0.1-snapshot.apk" target="_blank" rel="external">Download Demo</a><br>效果图：<img src="http://ww2.sinaimg.cn/mw690/610dc034jw1ejoplapwtqg208n0e74dx.gif" alt="Renderings">  </p>
</li>
<li><p>DynamicCardLayout<br>在 Android 中实现的类似 Windows8 的瓷片布局<br>项目地址：<a href="https://github.com/dodola/DynamicCardLayout" target="_blank" rel="external">https://github.com/dodola/DynamicCardLayout</a><br>效果图：<img src="https://github.com/dodola/DynamicCardLayout/blob/master/pic1.png?raw=true" alt="Renderings">  </p>
</li>
<li><p>Emoticons-Keyboard<br>带表情情符号的自定义键盘<br>项目地址：<a href="https://github.com/chiragjain/Emoticons-Keyboard" target="_blank" rel="external">https://github.com/chiragjain/Emoticons-Keyboard</a><br>效果图：<img src="https://github.com/chiragjain/Emoticons-Keyboard/raw/master/s2.png" alt="Renderings">  </p>
</li>
<li><p>Android Typeface Helper<br>可以帮你轻松实现自定义字体的库<br>项目地址：<a href="https://github.com/norbsoft/android-typeface-helper" target="_blank" rel="external">https://github.com/norbsoft/android-typeface-helper</a><br>效果图：<img src="https://camo.githubusercontent.com/b8e7d4f4ab84ff96a3919ea264e2a83aca46e04e/68747470733a2f2f7261772e6769746875622e636f6d2f6e6f7262736f66742f616e64726f69642d74797065666163652d68656c7065722f6d61737465722f726561646d655f73637265656e2e706e67" alt="Renderings">  </p>
</li>
<li><p>Android-Anim-Playground<br>几个动画效果，其中第二个基于 android-svg 的绘制效果非常好<br>项目地址：<a href="https://github.com/Tibolte/Android-Anim-Playground" target="_blank" rel="external">https://github.com/Tibolte/Android-Anim-Playground</a><br>效果图：<img src="https://raw.githubusercontent.com/Tibolte/Android-Anim-Playground/master/androiddemosvg.gif" alt="Renderings">  </p>
</li>
<li><p>AlertView<br>仿iOS的AlertViewController 几乎完美还原iOS 的 AlertViewController ，同时支持Alert和ActionSheet模式，每一个细节都是精雕细琢，并把api封装成懒到极致模式，一行代码就可以进行弹窗.<br>项目地址：<a href="https://github.com/saiwu-bigkoo/Android-AlertView" target="_blank" rel="external">https://github.com/saiwu-bigkoo/Android-AlertView</a><br>效果图：<img src="https://github.com/saiwu-bigkoo/Android-AlertView/blob/master/preview/alertviewdemo.gif" alt="Renderings">  </p>
</li>
<li><p>NiftyDialogEffects<br>支持自定义飞入动画样式的 Dialog<br>项目地址：<a href="https://github.com/sd6352051/NiftyDialogEffects" target="_blank" rel="external">https://github.com/sd6352051/NiftyDialogEffects</a><br>效果图：<img src="https://camo.githubusercontent.com/456687ac516bb07f1076928d635bfddf6b90d5ec/687474703a2f2f696d67302e70682e3132362e6e65742f69433436653162586b55316631724966555a6f3939773d3d2f363539373632303632313938343031393430382e676966" alt="Renderings"><br>在线演示：<a href="http://tympanus.net/Development/ModalWindowEffects/" target="_blank" rel="external">http://tympanus.net/Development/ModalWindowEffects/</a>  </p>
</li>
<li><p>PostOffice<br>创建 Holo 及 Material Design 样式的 Dialog<br>项目地址：<a href="https://github.com/r0adkll/PostOffice" target="_blank" rel="external">https://github.com/r0adkll/PostOffice</a><br>效果图：<img src="https://github.com/r0adkll/PostOffice/raw/master/images/po_2.png" alt="Renderings">  </p>
</li>
<li><p>Swipecards<br>类似 Tinder 的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢，根据 Kikoso’s Swipeable-Cards 改造而来<br>项目地址：<a href="https://github.com/Diolor/Swipecards" target="_blank" rel="external">https://github.com/Diolor/Swipecards</a>  </p>
</li>
<li><p>SeekArc<br>圆形的 SeekBar<br>项目地址：<a href="https://github.com/TriggerTrap/SeekArc" target="_blank" rel="external">https://github.com/TriggerTrap/SeekArc</a><br>效果图：<img src="https://camo.githubusercontent.com/6a5091cb39a50d4c49b8d2f08684cb260db55aa7/68747470733a2f2f7261772e6769746875622e636f6d2f6e65696c643030312f5365656b4172632f6d61737465722f7261772f6172635f7377656570732e706e67" alt="Renderings">  </p>
</li>
<li><p>BlurDialogFragment<br>显示  DialogFragment 时背景模糊效果<br>项目地址：<a href="https://github.com/tvbarthel/BlurDialogFragment" target="_blank" rel="external">https://github.com/tvbarthel/BlurDialogFragment</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample</a>  </p>
</li>
<li><p>range-seek-bar<br>随机值选取的 SeekBar<br>项目地址：<a href="https://github.com/yahoo/android-range-seek-bar" target="_blank" rel="external">https://github.com/yahoo/android-range-seek-bar</a><br>效果图：<img src="https://github.com/yahoo/android-range-seek-bar/raw/master/demo_screenshot.png" alt="Renderings">  </p>
</li>
<li><p>MaterialRangeBar<br>可以选择一个范围内的值而不是单个值的 SeekBar，RangeBar 的 Material Design 风格适配<br>项目地址：<a href="https://github.com/oli107/material-range-bar" target="_blank" rel="external">https://github.com/oli107/material-range-bar</a><br>效果图：<img src="https://github.com/oli107/material-range-bar/raw/master/Screenshots/pin%20expand.gif" alt="Renderings">  </p>
</li>
<li><p>MaterialList<br>Material Design 风格的 CardView<br>项目地址：<a href="https://github.com/dexafree/MaterialList" target="_blank" rel="external">https://github.com/dexafree/MaterialList</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample</a><br>效果图：<img src="https://camo.githubusercontent.com/b71bb064807465b7c9132d7f6072e2064f01fb85/687474703a2f2f692e696d6775722e636f6d2f454e78554741772e706e67" alt="Renderings">  </p>
</li>
<li><p>road-trip<br>设置 path 的各种动画效果，以及如何实现复杂路径动画，类似于 ios 中的指纹注册界面的指纹动画效果<br>项目地址：<a href="https://github.com/romainguy/road-trip" target="_blank" rel="external">https://github.com/romainguy/road-trip</a><br>效果图：<img src="https://github.com/zhangxin1989/RoadTrip/raw/master/screenshot/Road-Trip-200.gif" alt="Renderings">  </p>
</li>
<li><p>dialogplus<br>一个简单的 Android 对话框，支持不同的弹出模式<br>项目地址：<a href="https://github.com/orhanobut/dialogplus" target="_blank" rel="external">https://github.com/orhanobut/dialogplus</a><br>效果图：<img src="https://github.com/nr4bt/dialogplus/raw/master/art/dialogplus.gif" alt="Renderings">  </p>
</li>
<li><p>FlowLayout<br>一个简单的流式布局，用法类似 LinearLayout，但是能够让子元素根据宽度自动换行<br>项目地址：<a href="https://github.com/LyndonChin/AndroidFlowLayout" target="_blank" rel="external">FLowLayout</a><br>效果图：<img src="http://img02.taobaocdn.com/imgextra/i2/160310864/TB2MH8.bVXXXXa3XXXXXXXXXXXX_!!160310864.png" alt="Renderings">  </p>
</li>
<li><p>CircleSeekbar<br>一个环形Seekbar组件,支持叠加复合使用<br>项目地址：<a href="https://github.com/feeeei/CircleSeekbar" target="_blank" rel="external">CircleSeekbar</a><br>效果图：<br><img src="https://github.com/feeeei/CircleSeekbar/blob/master/gifs/withtext.gif" alt="Renderings"><br><img src="https://github.com/feeeei/CircleSeekbar/raw/master/gifs/union.gif" alt="Renderings"></p>
</li>
<li><p>FinestWebView<br>美麗的和可定制的Android的活動，顯示在一個應用程序的網頁。<br>项目地址: <a href="https://github.com/TheFinestArtist/FinestWebView-Android" target="_blank" rel="external">https://github.com/TheFinestArtist/FinestWebView-Android</a><br>Sample 地址: <a href="https://play.google.com/store/apps/details?id=com.thefinestartist.finestwebview.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.thefinestartist.finestwebview.sample</a><br>效果图: <img src="https://github.com/TheFinestArtist/FinestWebView-Android/blob/master/art/screenshots.png?raw=true" alt="Renderings"></p>
</li>
<li><p>YouTubePlayerActivity<br>只需通過一個URL來在新的活動播放YouTube視頻。它支持屏幕方向，媒體音量控制等。<br>项目地址: <a href="https://github.com/TheFinestArtist/YouTubePlayerActivity" target="_blank" rel="external">https://github.com/TheFinestArtist/YouTubePlayerActivity</a><br>Sample 地址: <a href="https://play.google.com/store/apps/details?id=com.thefinestartist.ytpa.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.thefinestartist.ytpa.sample</a><br>效果图: <img src="https://github.com/thefinestartist/YouTubePlayerActivity/blob/master/art/preview.gif" alt="Renderings">  </p>
</li>
<li><p>material-camera<br>material风格的camera。能使camera使用起来更简单的库。<br>项目地址：<a href="https://github.com/afollestad/material-camera" target="_blank" rel="external">https://github.com/afollestad/material-camera</a><br>效果图：<br><img src="https://raw.githubusercontent.com/afollestad/material-camera/master/art/deviceart.png" alt="Renderings">    </p>
</li>
<li><p>material-dialogs<br>各种material风格的dialog。<br>漂亮的的、易于使用的和可定制的Dialog API，你能够使用Material designed风格的Dialog到API 8。<br>项目地址：<a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="external">https://github.com/afollestad/material-dialogs</a><br>Sample地址：<a href="https://github.com/afollestad/material-dialogs/blob/master/sample/sample.apk" target="_blank" rel="external">https://github.com/afollestad/material-dialogs/blob/master/sample/sample.apk</a><br>效果图：<br><img src="https://raw.githubusercontent.com/afollestad/material-dialogs/master/art/mddemoshowcase.png" alt="Renderings">    </p>
</li>
<li><p>NotifyUtil<br>最常见的通知样式库<br>项目地址:<a href="https://github.com/wenmingvs/NotifyUtil" target="_blank" rel="external">https://github.com/wenmingvs/NotifyUtil</a><br>demo地址：<a href="https://github.com/wenmingvs/NotifyUtil#notifydemo" target="_blank" rel="external">https://github.com/wenmingvs/NotifyUtil#notifydemo</a>  </p>
</li>
<li><p>CanPhotos<br>使用fresco选取多张图片并可预览图片<br>项目地址：<a href="https://github.com/canyinghao/CanPhotos" target="_blank" rel="external">https://github.com/canyinghao/CanPhotos</a><br>效果图：<br><img src="https://raw.githubusercontent.com/canyinghao/CanPhotos/master/pic/CanPhotos.gif" alt="Renderings"></p>
</li>
<li><p>CanDialog<br>仿照系统Dialog所写，继承于FrameLayout，添加一些动画，一些显示类型。<br>项目地址：<a href="https://github.com/canyinghao/CanDialog" target="_blank" rel="external">https://github.com/canyinghao/CanDialog</a><br>效果图：<br><img src="https://raw.githubusercontent.com/canyinghao/CanDialog/master/pic/CanDialog.gif" alt="Renderings"></p>
</li>
<li><p>WindRoseDiagramView<br>一个风力玫瑰图的 View 组件，项目地址：<img src="https://github.com/timqi/WindRoseDiagramView/" alt="https://github.com/timqi/WindRoseDiagramView/"><br><img src="https://github.com/timqi/WindRoseDiagramView/raw/master/art/WindRoseDiagram.gif" alt="效果图"></p>
</li>
<li><p>MaterialRatingBar<br>与 Google 系应用设计相同、支持拉伸、修正原生实现诸多问题的星级评分条。可直接替换 RatingBar。<br>项目地址：<a href="https://github.com/DreaminginCodeZH/MaterialRatingBar" target="_blank" rel="external">https://github.com/DreaminginCodeZH/MaterialRatingBar</a><br>Demo 地址：<a href="https://github.com/DreaminginCodeZH/MaterialRatingBar/releases/download/v1.0.2/sample-release.apk" target="_blank" rel="external">https://github.com/DreaminginCodeZH/MaterialRatingBar/releases/download/v1.0.2/sample-release.apk</a><br><img src="https://github.com/DreaminginCodeZH/MaterialRatingBar/raw/master/screenshot/sample_app.jpg" alt="效果图">  </p>
</li>
</ol>
<h2 id="第二部分-工具库"><a href="#第二部分-工具库" class="headerlink" title="第二部分 工具库"></a>第二部分 工具库</h2><p>主要包括那些不错的开发库，包括依赖注入框架、图片缓存、网络请求、数据库 ORM 建模、Android 公共库、Android 高版本向低版本兼容、多媒体相关及其他。  </p>
<h4 id="一、依赖注入-DI"><a href="#一、依赖注入-DI" class="headerlink" title="一、依赖注入 DI"></a>一、依赖注入 DI</h4><p>通过依赖注入减少 View、服务、资源简化初始化，事件绑定等重复繁琐工作  </p>
<ol>
<li><p>AndroidAnnotations(Code Diet)<br>android 快速开发框架<br>项目地址：<a href="https://github.com/excilys/androidannotations" target="_blank" rel="external">https://github.com/excilys/androidannotations</a><br>文档介绍：<a href="https://github.com/excilys/androidannotations/wiki" target="_blank" rel="external">https://github.com/excilys/androidannotations/wiki</a><br>官网网址：<a href="http://androidannotations.org/" target="_blank" rel="external">http://androidannotations.org/</a><br>特点：(1) 依赖注入：包括 view，extras，系统服务，资源等等<br>(2) 简单的线程模型，通过 annotation 表示方法运行在 ui 线程还是后台线程<br>(3) 事件绑定：通过 annotation 表示 view 的响应事件，不用在写内部类<br>(4) REST 客户端：定义客户端接口，自动生成 REST 请求的实现<br>(5) 没有你想象的复杂：AndroidAnnotations 只是在在编译时生成相应子类<br>(6) 不影响应用性能：仅 50kb，在编译时完成，不会对运行时有性能影响。<br>其他：与 roboguice 的比较：roboguice 通过运行时读取 annotations 进行反射，所以可能影响应用性能，而 AndroidAnnotations 在编译时生成子类，所以对性能没有影响  </p>
</li>
<li><p>roboguice<br>帮你处理了很多代码异常，利用 annotation 使得更少的代码完成项目<br>项目地址：<a href="https://github.com/roboguice/roboguice" target="_blank" rel="external">https://github.com/roboguice/roboguice</a><br>文档介绍：<a href="https://github.com/roboguice/roboguice/wiki" target="_blank" rel="external">https://github.com/roboguice/roboguice/wiki</a>  </p>
</li>
<li><p>butterknife<br>利用 annotation 帮你快速完成 View 的初始化，减少代码<br>项目地址：<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">https://github.com/JakeWharton/butterknife</a><br>文档介绍：<a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="external">http://jakewharton.github.io/butterknife/</a>  </p>
</li>
<li><p>Dagger<br>依赖注入，适用于 Android 和 Java<br>项目地址：<a href="https://github.com/square/dagger" target="_blank" rel="external">https://github.com/square/dagger</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/扔物线/Dagger 源码解析" target="_blank" rel="external">Dagger</a><br>文档介绍：<a href="http://square.github.io/dagger/" target="_blank" rel="external">http://square.github.io/dagger/</a>  </p>
</li>
<li><p>AutoParcel<br>注解自动生成Parcelable实现代码的库<br>项目地址：<a href="https://github.com/frankiesardo/auto-parcel" target="_blank" rel="external">https://github.com/frankiesardo/auto-parcel</a><br>这篇文章详细介绍了它的使用方法：<a href="https://passy.svbtle.com/simpler-android-apis-with-autoparcel" target="_blank" rel="external">AutoParcel</a><br>作者认为使用AutoParcel的好处是，可以简化构造函数，方便IDE代码自动完成，方便测试，前向兼容，生成不可变的对象。<br>文档介绍：<a href="https://github.com/frankiesardo/auto-parcel" target="_blank" rel="external">https://github.com/frankiesardo/auto-parcel</a></p>
</li>
</ol>
<h4 id="二、图片缓存"><a href="#二、图片缓存" class="headerlink" title="二、图片缓存"></a>二、图片缓存</h4><ol>
<li><p>Android-Universal-Image-Loader<br>图片缓存，目前使用最广泛的图片缓存，支持主流图片缓存的绝大多数特性。<br>项目地址：<a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">https://github.com/nostra13/Android-Universal-Image-Loader</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/huxian99/Android Universal Image Loader 源码分析" target="_blank" rel="external">Android-Universal-Image-Loader</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true</a><br>文档介绍：<a href="http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html" target="_blank" rel="external">http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html</a>  </p>
</li>
<li><p>picasso<br>square 开源的图片缓存<br>项目地址：<a href="https://github.com/square/picasso" target="_blank" rel="external">https://github.com/square/picasso</a><br>文档介绍：<a href="http://square.github.io/picasso/" target="_blank" rel="external">http://square.github.io/picasso/</a><br>特点：(1)可以自动检测 adapter 的重用并取消之前的下载<br>(2)图片变换<br>(3)可以加载本地资源<br>(4)可以设置占位资源<br>(5)支持 debug 模式  </p>
</li>
<li><p>Cube ImageLoader<br>阿里巴巴一淘使用的图片加载，综合了 Android-Universal-Image-Loader 和 square 等组件优点，简单易用，良好的中文文档支持<br>项目地址：<a href="https://github.com/etao-open-source/cube-sdk" target="_blank" rel="external">https://github.com/etao-open-source/cube-sdk</a><br>Demo 地址：<a href="https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk" target="_blank" rel="external">https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk</a><br>文档介绍：<a href="http://cube-sdk.liaohuqiu.net/" target="_blank" rel="external">http://cube-sdk.liaohuqiu.net/</a><br>效果图：<img src="https://raw.githubusercontent.com/etao-open-source/cube-sdk/dev/screen-shot.png" alt="Renderings">  </p>
</li>
<li><p>fresco<br>一款强大的图片缓存工具，由 Facebook 开发<br>项目地址：<a href="https://github.com/facebook/fresco" target="_blank" rel="external">https://github.com/facebook/fresco</a><br>文档介绍：<a href="http://frescolib.org/" target="_blank" rel="external">http://frescolib.org/</a><br>特点：(1) 两个内存缓存加上磁盘缓存构成了三级缓存<br>(2) 支持流式，可以类似网页上模糊渐进式显示图片<br>(3) 对多帧动画图片支持更好，如 Gif、WebP<br>(4) 更多样的显示，如圆角、进度条、点击重试、自定义对焦点<br>(5) 更多样的加载，如支持 EXIF、全面支持 WebP<br>(6) 支持 Android 2.3+  </p>
</li>
<li><p>Glide<br>Glide 是一个 android 平台上的快速和高效的开源的多媒体资源管理库,提供 多媒体文件的压缩,内存和磁盘缓存, 资源池的接口。<br>它可以最大性能地在 Android 设备上读取、解码、显示图片和视频。Glide 可以将远程的图片、视频、动画图片等缓存在设备本地便于提高用户浏览图片的流畅体验。<br>项目地址：<a href="https://github.com/bumptech/glide" target="_blank" rel="external">https://github.com/bumptech/glide</a><br>特点：<br>(1) GIF 动画的解码<br>(2) 本地视频剧照的解码<br>(3) 支持缩略图<br>(4) Activity 生命周期的集成<br>(5) 转码的支持<br>(6) 动画的支持<br>(7) OkHttp 和 Volley 的支持  </p>
</li>
</ol>
<h4 id="三、网络请求"><a href="#三、网络请求" class="headerlink" title="三、网络请求"></a>三、网络请求</h4><ol>
<li><p>Volley<br>Google 提供的网络通信库，使得网络请求更简单、更快速<br>项目地址：<a href="https://android.googlesource.com/platform/frameworks/volley" target="_blank" rel="external">https://android.googlesource.com/platform/frameworks/volley</a><br>文档介绍：<a href="http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf" target="_blank" rel="external">http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf</a>  </p>
</li>
<li><p>Asynchronous Http Client for Android<br>Android 异步 Http 请求<br>项目地址：<a href="https://github.com/loopj/android-async-http" target="_blank" rel="external">https://github.com/loopj/android-async-http</a><br>文档介绍：<a href="http://loopj.com/android-async-http/" target="_blank" rel="external">http://loopj.com/android-async-http/</a><br>特点：(1) 在匿名回调中处理请求结果<br>(2) 在 UI 线程外进行 http 请求<br>(3) 文件断点上传<br>(4) 智能重试<br>(5) 默认 gzip 压缩<br>(6) 支持解析成 Json 格式<br>(7) 可将 Cookies 持久化到 SharedPreferences  </p>
</li>
<li><p>android-query<br>异步加载，更少代码完成 Android 加载<br>项目地址：<a href="https://github.com/androidquery/androidquery" target="_blank" rel="external">https://github.com/androidquery/androidquery</a> 或 <a href="https://code.google.com/p/android-query/" target="_blank" rel="external">https://code.google.com/p/android-query/</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.androidquery" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.androidquery</a><br>文档介绍：<a href="https://code.google.com/p/android-query/#Why_AQuery?" target="_blank" rel="external">https://code.google.com/p/android-query/#Why_AQuery?</a><br>特点：<a href="https://code.google.com/p/android-query/#Why_AQuery?" target="_blank" rel="external">https://code.google.com/p/android-query/#Why_AQuery?</a>  </p>
</li>
<li><p>Async Http Client<br>Java 异步 Http 请求<br>项目地址：<a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="external">https://github.com/AsyncHttpClient/async-http-client</a><br>文档介绍：<a href="http://sonatype.github.io/async-http-client/" target="_blank" rel="external">http://sonatype.github.io/async-http-client/</a>  </p>
</li>
<li><p>Ion<br>支持图片、json、http post 等异步请求<br>项目地址：<a href="https://github.com/koush/ion" target="_blank" rel="external">https://github.com/koush/ion</a><br>文档介绍：<a href="https://github.com/koush/ion#more-examples" target="_blank" rel="external">https://github.com/koush/ion#more-examples</a>  </p>
</li>
<li><p>Http Request<br>项目地址：<a href="https://github.com/kevinsawicki/http-request" target="_blank" rel="external">https://github.com/kevinsawicki/http-request</a><br>文档介绍：<a href="https://github.com/kevinsawicki/http-request#examples" target="_blank" rel="external">https://github.com/kevinsawicki/http-request#examples</a>  </p>
</li>
<li><p>okhttp<br>square 开源的 http 工具类<br>项目地址：<a href="https://github.com/square/okhttp" target="_blank" rel="external">https://github.com/square/okhttp</a><br>文档介绍：<a href="http://square.github.io/okhttp/" target="_blank" rel="external">http://square.github.io/okhttp/</a><br>特点：(1) 支持 SPDY( <a href="http://zh.wikipedia.org/wiki/SPDY" target="_blank" rel="external">http://zh.wikipedia.org/wiki/SPDY</a> )协议。SPDY 协议是 Google 开发的基于传输控制协议的应用层协议，通过压缩，多路复用(一个 TCP 链接传送网页和图片等资源)和优先级来缩短加载时间。<br>(2) 如果 SPDY 不可用，利用连接池减少请求延迟<br>(3) Gzip 压缩<br>(4) Response 缓存减少不必要的请求  </p>
</li>
<li><p>Retrofit<br>RESTFUL API 设计<br>项目地址：<a href="https://github.com/square/retrofit" target="_blank" rel="external">https://github.com/square/retrofit</a><br>文档介绍：<a href="http://square.github.io/retrofit/" target="_blank" rel="external">http://square.github.io/retrofit/</a>  </p>
</li>
<li><p>RoboSpice<br>Android 异步网络请求工具，支持缓存、REST 等等<br>项目地址：<a href="https://github.com/stephanenicolas/robospice" target="_blank" rel="external">https://github.com/stephanenicolas/robospice</a><br>Demo 地址：<a href="https://github.com/stephanenicolas/RoboDemo/downloads" target="_blank" rel="external">https://github.com/stephanenicolas/RoboDemo/downloads</a>  </p>
</li>
<li><p>TwistVolley<br>TwistVolley 是对 Volley 的一个封装库。提供类似 Picasso 一样的串联式 API。使得使用 Volley 更加方便。<br>项目地址：<a href="https://github.com/TwistedEquations/TwistVolley" target="_blank" rel="external">https://github.com/TwistedEquations/TwistVolley</a>  </p>
</li>
<li><p>OkHttpFinal<br>一个对OkHttp封装的简单易用型HTTP请求和文件下载管理框架<br>项目地址：<a href="https://github.com/pengjianbo/OkHttpFinal" target="_blank" rel="external">https://github.com/pengjianbo/OkHttpFinal</a><br>Demo 地址：<a href="https://github.com/pengjianbo/OkHttpFinal" target="_blank" rel="external">https://github.com/pengjianbo/OkHttpFinal</a>  </p>
</li>
</ol>
<h4 id="四、数据库-orm-工具包"><a href="#四、数据库-orm-工具包" class="headerlink" title="四、数据库 orm 工具包"></a>四、数据库 orm 工具包</h4><p>orm 的 db 工具类，简化建表、查询、更新、插入、事务、索引的操作</p>
<ol>
<li><p>greenDAO<br>Android Sqlite orm 的 db 工具类<br>项目地址：<a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">https://github.com/greenrobot/greenDAO</a><br>文档介绍：<a href="http://greendao-orm.com/documentation/" target="_blank" rel="external">http://greendao-orm.com/documentation/</a><br>官网网址：<a href="http://greendao-orm.com/" target="_blank" rel="external">http://greendao-orm.com/</a><br>特点：(1) 性能佳<br>(2) 简单易用的 API<br>(3) 内存小好小<br>(4) 库大小小  </p>
</li>
<li><p>GreenDaoUpgradeHelper<br>greenDAO的数据库升级帮助类，只需一行代码解决数据库升级<br>项目地址：<a href="https://github.com/yuweiguocn/GreenDaoUpgradeHelper" target="_blank" rel="external">https://github.com/yuweiguocn/GreenDaoUpgradeHelper</a></p>
</li>
</ol>
<ol>
<li><p>ActiveAndroid<br>Android Sqlite orm 的 db 工具类<br>项目地址：<a href="https://github.com/pardom/ActiveAndroid" target="_blank" rel="external">https://github.com/pardom/ActiveAndroid</a><br>文档介绍：<a href="https://github.com/pardom/ActiveAndroid/wiki/_pages" target="_blank" rel="external">https://github.com/pardom/ActiveAndroid/wiki/_pages</a>  </p>
</li>
<li><p>Sprinkles<br>Android Sqlite orm 的 db 工具类，比较显著的特点就是配合 <a href="https://github.com/square/retrofit" target="_blank" rel="external">https://github.com/square/retrofit</a> 能保存从服务器获取的数据<br>项目地址：<a href="https://github.com/emilsjolander/sprinkles" target="_blank" rel="external">https://github.com/emilsjolander/sprinkles</a><br>文档介绍：<a href="http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/" target="_blank" rel="external">http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/</a>  </p>
</li>
<li><p>Realm<br>移动端的数据库，适用于 Phone、Tablet、Wearable，支持 ORM，线程安全、支持连表及数据库加密，比 SQLite 性能更好<br>项目地址：<a href="https://github.com/realm/realm-java" target="_blank" rel="external">https://github.com/realm/realm-java</a><br>文档介绍：<a href="http://realm.io/docs/java/0.72.0/" target="_blank" rel="external">http://realm.io/docs/java/0.72.0/</a>  </p>
</li>
<li><p>ormlite-android<br>项目地址：<a href="https://github.com/j256/ormlite-android" target="_blank" rel="external">https://github.com/j256/ormlite-android</a><br>文档介绍：<a href="http://ormlite.com/sqlite_java_android_orm.shtml" target="_blank" rel="external">http://ormlite.com/sqlite_java_android_orm.shtml</a>  </p>
</li>
<li><p>Schematic<br>根据 SQLite 生成 ContentProvider<br>项目地址：<a href="https://github.com/SimonVT/schematic" target="_blank" rel="external">https://github.com/SimonVT/schematic</a>  </p>
</li>
<li><p>DBFlow<br>Android SQLite ORM 工具库。综合了 Active Android, Schematic, Ollie,Sprinkles 等库的优点；通过注解实现，性能好；能生成 ContentProvider。<br>项目地址：<a href="https://github.com/Raizlabs/DBFlow" target="_blank" rel="external">https://github.com/Raizlabs/DBFlow</a><br>文档介绍：<a href="https://github.com/Raizlabs/DBFlow#usage-docs" target="_blank" rel="external">https://github.com/Raizlabs/DBFlow#usage-docs</a>  </p>
</li>
<li><p>SnappyDB<br>SnappyDB是一个key-value数据库，非常流行的NoSQL数据库。<br>项目地址：<a href="https://github.com/nhachicha/SnappyDB" target="_blank" rel="external">https://github.com/nhachicha/SnappyDB</a><br>演示Demo：<a href="https://play.google.com/store/apps/details?id=com.snappydb.snippets.app" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.snappydb.snippets.app</a><br>性能对比图：<br><img src="https://camo.githubusercontent.com/0f6193a1f84aa8a77d07ac18d3566b87bc89999b/687474703a2f2f736e6170707964622e636f6d2f696d672f62656e63686d61726b5f73716c6974655f776974685f7472616e73616374696f6e2e706e67" alt="Renderings"></p>
</li>
</ol>
<h4 id="五、Android-公共库"><a href="#五、Android-公共库" class="headerlink" title="五、Android 公共库"></a>五、Android 公共库</h4><ol>
<li><p>Guava<br>Google 的基于 java1.6 的类库集合的扩展项目，包括 collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O 等等. 这些高质量的 API 可以使你的 JAVa 代码更加优雅，更加简洁<br>项目地址：<a href="https://code.google.com/p/guava-libraries/" target="_blank" rel="external">https://code.google.com/p/guava-libraries/</a><br>文档介绍：<a href="https://code.google.com/p/guava-libraries/wiki/GuavaExplained" target="_blank" rel="external">https://code.google.com/p/guava-libraries/wiki/GuavaExplained</a>  </p>
</li>
<li><p>AndroidCommon<br>Android 公共库<br>项目地址：<a href="https://github.com/Trinea/AndroidCommon" target="_blank" rel="external">https://github.com/Trinea/AndroidCommon</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=cn.trinea.android.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href="http://www.trinea.cn/android/android-common-lib/" target="_blank" rel="external">http://www.trinea.cn/android/android-common-lib/</a><br>包括：a. ImageCache 图片缓存，包含内存和 Sdcard 缓存<br><a href="http://www.trinea.cn/android/android-imagecache/" target="_blank" rel="external">http://www.trinea.cn/android/android-imagecache/</a><br>特点：(1)支持预取新图片，支持等待队列<br>(2)包含二级缓存，可自定义文件名保存规则<br>(3)可选择多种缓存算法(FIFO、LIFO、LRU、MRU、LFU、MFU 等 13 种)或自定义缓存算法<br>(4)可方便的保存及初始化恢复数据<br>(5)支持不同类型网络处理<br>(6)可根据系统配置初始化缓存等  </p>
</li>
<li><p>HttpCache Http 缓存<br>文档介绍：<a href="http://www.trinea.cn/android/android-http-cache" target="_blank" rel="external">http://www.trinea.cn/android/android-http-cache</a><br>特点是：(1) 根据 cache-control、expires 缓存 http 请求<br>(2) 支持同步、异步 Http 请求<br>(3) 在匿名回调中处理请求结果<br>(4) 在 UI 线程外进行 http 请求<br>(5) 默认 gzip 压缩<br>(2) 公共 View(下拉及底部加载更多 ListView、底部加载更多 ScrollView、滑动一页 Gallery)<br>(3) Android 常用工具类(网络、下载、Android 资源操作、shell、文件、Json、随机数、Collection 等等)  </p>
</li>
<li><p>DropDownListView 下拉刷新及滑动到底部加载更多 ListView<br>文档介绍：<a href="http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/" target="_blank" rel="external">http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/</a>  </p>
</li>
<li><p>shipfaster<br>整合了 Dagger Otto Retrofit Robolectric Picasso OkHttp，方便快速开发<br>项目地址：<a href="https://github.com/pyricau/shipfaster" target="_blank" rel="external">https://github.com/pyricau/shipfaster</a>  </p>
</li>
<li><p>CleanAndroidCode<br>整合了 Dagger Otto AndroidAnnotations，方便快速开发<br>项目地址：<a href="https://github.com/pyricau/CleanAndroidCode" target="_blank" rel="external">https://github.com/pyricau/CleanAndroidCode</a>  </p>
</li>
<li><p>xUtils<br>基于 Afinal，包含 DbUtils、ViewUtils、HttpUtils、BitmapUtils 四大模块，可用于快速开发<br>项目地址：<a href="https://github.com/wyouflf/xUtils" target="_blank" rel="external">https://github.com/wyouflf/xUtils</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/Caij/xUtils 源码解析" target="_blank" rel="external">xUtils</a>  </p>
</li>
<li><p>Afinal<br>Afinal 是一个 android 的 ioc，orm 框架，内置了四大模块功能：FinalAcitivity,FinalBitmap,FinalDb,FinalHttp。通过 finalActivity，我们可以通过注解的方式进行绑定 ui 和事件。通过 finalBitmap，我们可以方便的加载 bitmap 图片，而无需考虑 oom 等问题。通过 finalDB 模块，我们一行代码就可以对 android 的 sqlite 数据库进行增删改查。通过 FinalHttp 模块，我们可以以 ajax 形式请求 http 数据<br>项目地址：<a href="https://github.com/yangfuhai/afinal" target="_blank" rel="external">https://github.com/yangfuhai/afinal</a><br>官网网址：<a href="http://www.afinal.org" target="_blank" rel="external">http://www.afinal.org</a>  </p>
</li>
<li><p>UltimateAndroid<br>UltimateAndroid 是一个快速开发 Android 应用的框架，框架目前主要包含的功能有 View Injection,ORM,异步网络请求和图片加载，自动化脚本测试,磁盘 LRU 等功能.同时提供了类似于 TripleDes、Webview 快速设置、Md5 处理、String 处理,Https 处理等常用工具类，还有超过 100 多种 UI 控件效果。<br>项目地址：<a href="https://github.com/cymcsg/UltimateAndroid" target="_blank" rel="external">https://github.com/cymcsg/UltimateAndroid</a><br>官网网址：<a href="http://blog.marshalchen.com/UltimateAndroid/" target="_blank" rel="external">http://blog.marshalchen.com/UltimateAndroid/</a>  </p>
</li>
<li><p>SAF<br>SAF(Simple Android Framework)是一个简单的 android 框架，它为开发 Android app 提供了基础性组件。<br>项目地址：<a href="https://github.com/fengzhizi715/SAF" target="_blank" rel="external">https://github.com/fengzhizi715/SAF</a><br>官网网址：<a href="http://www.salesuite.cn/" target="_blank" rel="external">http://www.salesuite.cn/</a><br>包括：(1)Event Bus(事件总线)<br>(2) Rest Client(http 的框架)<br>(3) Image Cache(图片缓存)<br>(4) Dependency Injection(依赖注入)<br>(5) Sqlite ORM(sqlite 的 orm)<br>(6) Router(Activity、Fragment 的 Router)<br>(7) Utils(各种常用的工具类)  </p>
</li>
<li><p>Barber<br>Custom View 神器。通过简单的注解帮助你大大减少 Custom View 中的代码量。由于和 ButterKnife 一样使用了 Annotation Proccessor ，所以对程序性能没有影响。<br>项目地址：<a href="https://github.com/hzsweers/barber" target="_blank" rel="external">https://github.com/hzsweers/barber</a>  </p>
</li>
<li><p>device-year-class<br>A library that analyzes an Android device’s specifications and calculates which year the device would be considered “high end”.(facebook 开发的检测手机主流配置工具)<br>项目地址：<a href="https://github.com/facebook/device-year-class" target="_blank" rel="external">https://github.com/facebook/device-year-class</a>  </p>
</li>
<li><p>RxAndroid<br>对RxJava在Android上的扩展，使得Android上也很容易实现reactive components，简化线程操作，从而写出很漂亮的代码。<br>项目地址：<a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">https://github.com/ReactiveX/RxAndroid</a><br>文档介绍：<a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给Android 开发者的 RxJava 详解</a>  </p>
</li>
<li><p>MultiImageSelector<br>一个本地图片选择器，支持图片的单选和多选，直接返回所选图片的路径。<br>项目地址：<a href="https://github.com/lovetuzitong/MultiImageSelector.git" target="_blank" rel="external">https://github.com/lovetuzitong/MultiImageSelector.git</a></p>
</li>
</ol>
<h4 id="六、Android-高版本向低版本兼容"><a href="#六、Android-高版本向低版本兼容" class="headerlink" title="六、Android 高版本向低版本兼容"></a>六、Android 高版本向低版本兼容</h4><ol>
<li><p>Nine Old Androids<br>将 Android 3.0(Honeycomb)所有动画 API(ObjectAnimator ValueAnimator 等)兼容到 Android1.0<br>项目地址：<a href="https://github.com/JakeWharton/NineOldAndroids" target="_blank" rel="external">https://github.com/JakeWharton/NineOldAndroids</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/Mr.Simple/NineOldAnimations 源码解析" target="_blank" rel="external">Nine Old Androids</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample</a><br>文档介绍：<a href="http://nineoldandroids.com/" target="_blank" rel="external">http://nineoldandroids.com/</a>  </p>
</li>
<li><p>HoloEverywhere<br>将 Android 3.0 的 Holo 主题兼容到 Android2.1++<br>项目地址：<a href="https://github.com/Prototik/HoloEverywhere" target="_blank" rel="external">https://github.com/Prototik/HoloEverywhere</a><br>Demo 地址：<a href="https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk" target="_blank" rel="external">https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk</a><br>文档介绍：<a href="http://android-developers.blogspot.com/2012/01/holo-everywhere.html" target="_blank" rel="external">http://android-developers.blogspot.com/2012/01/holo-everywhere.html</a>  </p>
</li>
<li><p>SherlockNavigationDrawer<br>将 Android NavigationDrawer 和 ActionbarSherlock 结合，解决 4.0 以下 NavigationDrawer 的适配问题<br>项目地址：<a href="https://github.com/tobykurien/SherlockNavigationDrawer" target="_blank" rel="external">https://github.com/tobykurien/SherlockNavigationDrawer</a><br>文档介绍：<a href="http://developer.android.com/training/implementing-navigation/nav-drawer.html" target="_blank" rel="external">http://developer.android.com/training/implementing-navigation/nav-drawer.html</a>  </p>
</li>
<li><p>Notifications4EveryWhere<br>将 Android 4.1 的 Notification 兼容到 Android2.2++<br>项目地址：<a href="https://github.com/youxiachai/Notifications4EveryWhere" target="_blank" rel="external">https://github.com/youxiachai/Notifications4EveryWhere</a>  </p>
</li>
<li><p>Android Switch Widget Backport<br>将 Android Switch 和 SwitchPreference 的兼容到 Android2.1++<br>项目地址：<a href="https://github.com/BoD/android-switch-backport" target="_blank" rel="external">https://github.com/BoD/android-switch-backport</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample</a><br>文档介绍：<a href="https://github.com/BoD/android-switch-backport#using-the-switch" target="_blank" rel="external">https://github.com/BoD/android-switch-backport#using-the-switch</a>  </p>
</li>
<li><p>android-datepicker<br>将 Android 4.0 的 datepicker 兼容到 Android2.2++<br>项目地址：<a href="https://github.com/SimonVT/android-datepicker" target="_blank" rel="external">https://github.com/SimonVT/android-datepicker</a>  </p>
</li>
<li><p>Transitions Everywhere<br>Android 4.4 的 Transitions API 兼容到 Android 2.2 以上<br>项目地址：<a href="https://github.com/andkulikov/transitions-everywhere" target="_blank" rel="external">https://github.com/andkulikov/transitions-everywhere</a>  </p>
</li>
<li><p>KShareViewActivityManager<br>一个兼容Android 5.0 以下Shared Element Transition （页面间共享元素位移动画）库<br>项目地址：<a href="https://github.com/kot32go/KShareViewActivityManager" target="_blank" rel="external">https://github.com/kot32go/KShareViewActivityManager</a><br>效果图：<a href="http://i8.tietuku.com/aa5726b8302ae711.gif" target="_blank" rel="external">http://i8.tietuku.com/aa5726b8302ae711.gif</a>  </p>
</li>
</ol>
<h4 id="七、多媒体相关"><a href="#七、多媒体相关" class="headerlink" title="七、多媒体相关"></a>七、多媒体相关</h4><ol>
<li><p>cocos2d-x<br>跨平台的 2d 游戏框架，支持 Android、IOS、Linux、Windows 等众多平台<br>项目地址：<a href="https://github.com/cocos2d/cocos2d-x" target="_blank" rel="external">https://github.com/cocos2d/cocos2d-x</a><br>文档介绍：<a href="http://www.cocos2d-x.org/wiki" target="_blank" rel="external">http://www.cocos2d-x.org/wiki</a><br>官网网址：<a href="http://www.cocos2d-x.org/" target="_blank" rel="external">http://www.cocos2d-x.org/</a>  </p>
</li>
<li><p>JustWeEngine<br>Android的轻量级游戏框架，能大大缩减编写原生游戏的代码量和难度，仍在持续更新中。<br>项目地址: <a href="https://github.com/lfkdsk/JustWeEngine" target="_blank" rel="external">https://github.com/lfkdsk/JustWeEngine</a><br>Demo地址: <a href="https://github.com/lfkdsk/EngineDemo" target="_blank" rel="external">https://github.com/lfkdsk/EngineDemo</a>  </p>
</li>
<li><p>Vitamio<br>是一款 Android 与 iOS 平台上的全能多媒体开发框架<br>项目地址：<a href="https://github.com/yixia/VitamioBundle" target="_blank" rel="external">https://github.com/yixia/VitamioBundle</a><br>网站介绍：<a href="http://www.vitamio.org/docs/" target="_blank" rel="external">http://www.vitamio.org/docs/</a><br>特点：(1) 全面支持硬件解码与 GPU 渲染<br>(2) 能够流畅播放 720P 甚至 1080P 高清 MKV，FLV，MP4，MOV，TS，RMVB 等常见格式的视频<br>(3) 在 Android 与 iOS 上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议，包括点播与直播。</p>
</li>
<li><p>VDPlayerSDK<br>最容易集成的开源播放器组件，支持直播，支持软硬解切换，支持清晰度切换<br>项目地址：<a href="https://github.com/SinaVDDeveloper/" target="_blank" rel="external">https://github.com/SinaVDDeveloper/</a><br>Demo 地址：<a href="https://github.com/SinaVDDeveloper/demo" target="_blank" rel="external">https://github.com/SinaVDDeveloper/demo</a><br>文档介绍：<a href="https://github.com/SinaVDDeveloper/sinavideo_playersdk" target="_blank" rel="external">https://github.com/SinaVDDeveloper/sinavideo_playersdk</a><br>特点：<br>(1) 使用自定义控件方式提供播放器UI，不需要视频相关知识，能编写android应用就能使用<br>(2) 软硬解切换、点播直播支持<br>(3) 解码内核小于4M，更方便集成到非专业视频app中<br>(4) 修正一些vitaimio的问题，比如m3u8可以拖动等等</p>
</li>
<li><p>VideoPlayerManager<br>帮助实现VideoPlayer控制，使得它更容易使用ListView和recyclerview。它还可以跟踪滚动列表中可见的项。当列表中的新项可见域最大时，该库给出了接口来跟踪它。<br>项目地址：<a href="https://github.com/danylovolokh/VideoPlayerManager" target="_blank" rel="external">https://github.com/danylovolokh/VideoPlayerManager</a><br>文档介绍：<a href="https://medium.com/@v.danylo/implementing-video-playback-in-a-scrolled-list-listview-recyclerview-d04bc2148429#.hs5n0geqn" target="_blank" rel="external">https://medium.com/@v.danylo/implementing-video-playback-in-a-scrolled-list-listview-recyclerview-d04bc2148429#.hs5n0geqn</a>  </p>
</li>
<li><p>UniversalVideoView<br>Android上定义播放器控件,支持自定义控制UI, 全屏播放, 重力感应自动切换横竖屏.<br>项目地址：<a href="https://github.com/linsea/UniversalVideoView" target="_blank" rel="external">https://github.com/linsea/UniversalVideoView</a><br><img src="https://github.com/linsea/UniversalVideoView/raw/master/screenshot/screen1.png" alt="Sample Screenshot 1"><br><img src="https://github.com/linsea/UniversalVideoView/raw/master/screenshot/screen2.png" alt="Sample Screenshot 2"></p>
</li>
<li><p>PhotoProcessing<br>利用 ndk 处理图片库，支持 Instafix、Ansel、Testino、XPro、Retro、BW、Sepia、Cyano、Georgia、Sahara、HDR、Rotate(旋转)、Flip(翻转)等各种特效<br>项目地址：<a href="https://github.com/lightbox/PhotoProcessing" target="_blank" rel="external">https://github.com/lightbox/PhotoProcessing</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true</a>  </p>
</li>
<li><p>Android StackBlur<br>图片模糊效果工具类<br>项目地址：<a href="https://github.com/kikoso/android-stackblur" target="_blank" rel="external">https://github.com/kikoso/android-stackblur</a><br>Demo 地址：<a href="https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true" target="_blank" rel="external">https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true</a><br>文档介绍：<a href="https://github.com/kikoso/android-stackblur#usage" target="_blank" rel="external">https://github.com/kikoso/android-stackblur#usage</a>  </p>
</li>
<li><p>Bitmap Smart Clipping using OpenCV<br>图片智能裁剪保留重要部分显示<br>项目地址：<a href="https://github.com/beartung/tclip-android" target="_blank" rel="external">https://github.com/beartung/tclip-android</a><br>利用淘宝的 <a href="http://code.taobao.org/p/tclip/" target="_blank" rel="external">http://code.taobao.org/p/tclip/</a> 库完成<br>一淘玩客正在使用的图片裁剪，自动识别图片中的重要区域，并且在图片裁剪时保留重要区域<br>特点：(1). 能进行人脸识别。图片中有人脸，将自动视为人脸区域为重要区域，将不会被裁剪掉<br>(2).自动其它重要区域。如果图片中未识别出人脸，则会根据特征分布计算出重区域  </p>
</li>
<li><p>Cropper<br>图片局部剪切工具，可触摸控制选择区域或旋转<br>项目地址：<a href="https://github.com/edmodo/cropper" target="_blank" rel="external">https://github.com/edmodo/cropper</a><br>文档介绍：<a href="https://github.com/edmodo/cropper/wiki" target="_blank" rel="external">https://github.com/edmodo/cropper/wiki</a><br>效果图：<img src="https://github-camo.global.ssl.fastly.net/e4fde77bf41d4a60b234b4e268e5cfa8c17d9b6f/687474703a2f2f692e696d6775722e636f6d2f334668735467666c2e6a7067" alt="Renderings">  </p>
</li>
<li><p>uCrop<br>Yalantis 出品的强大的图片裁剪库 ，支持缩放，旋转图片，支持各种比例的裁剪框<br>项目地址：<a href="https://github.com/Yalantis/uCrop" target="_blank" rel="external">https://github.com/Yalantis/uCrop</a><br>效果图：<img src="https://camo.githubusercontent.com/8577338af603bb6046e0ff06e2530cbbedd94d85/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3232313933352f73637265656e73686f74732f323437343239352f616e696d6174696f6e2e676966" alt="Renderings"></p>
</li>
<li><p>android-crop<br>图片裁剪 Activity<br>项目地址：<a href="https://github.com/jdamcd/android-crop" target="_blank" rel="external">https://github.com/jdamcd/android-crop</a><br>效果图：<img src="https://github.com/jdamcd/android-crop/raw/master/screenshot.png" alt="Renderings">  </p>
</li>
<li><p>TileView<br>可分块显示大图，支持 2D 拖动、双击、双指放大、双指捏合<br>项目地址：<a href="https://github.com/moagrius/TileView" target="_blank" rel="external">https://github.com/moagrius/TileView</a><br>Demo 地址：<a href="http://moagrius.github.io/TileView/TileViewDemo.apk" target="_blank" rel="external">http://moagrius.github.io/TileView/TileViewDemo.apk</a>  </p>
</li>
<li><p>BlurEffectForAndroidDesign<br>图片模糊效果<br>项目地址：<a href="https://github.com/PomepuyN/BlurEffectForAndroidDesign" target="_blank" rel="external">https://github.com/PomepuyN/BlurEffectForAndroidDesign</a>  </p>
</li>
<li><p>android-eye<br>PC 端网页查看同一局域网内的手机摄像头内容，可以用来监控哦<br>项目地址：<a href="https://github.com/Teaonly/android-eye" target="_blank" rel="external">https://github.com/Teaonly/android-eye</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=teaonly.droideye" target="_blank" rel="external">https://play.google.com/store/apps/details?id=teaonly.droideye</a>  </p>
</li>
<li><p>libpng for Android<br>PNG 图片的 jni 库，支持几乎 png 的所有特性<br>项目地址：<a href="https://github.com/julienr/libpng-android" target="_blank" rel="external">https://github.com/julienr/libpng-android</a><br>文档介绍：<a href="http://www.libpng.org/pub/png/libpng.html" target="_blank" rel="external">http://www.libpng.org/pub/png/libpng.html</a>  </p>
</li>
<li><p>android-gpuimage<br>基于 GPU 的图片滤镜<br>项目地址：<a href="https://github.com/CyberAgent/android-gpuimage" target="_blank" rel="external">https://github.com/CyberAgent/android-gpuimage</a>  </p>
</li>
<li><p>AndroidFaceCropper<br>图片脸部自动识别，将识别后的局部图片返回<br>项目地址：<a href="https://github.com/lafosca/AndroidFaceCropper" target="_blank" rel="external">https://github.com/lafosca/AndroidFaceCropper</a>  </p>
</li>
<li><p>Android Video Crop<br>利用 TextureView 播放和剪切视频，类似 ImageView.setScaleType<br>项目地址：<a href="https://github.com/dmytrodanylyk/android-video-crop" target="_blank" rel="external">https://github.com/dmytrodanylyk/android-video-crop</a><br>Demo 地址：<a href="https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk" target="_blank" rel="external">https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk</a>  </p>
</li>
<li><p>svg-android<br>Android Svg 矢量图形支持<br>项目地址：<a href="https://github.com/japgolly/svg-android" target="_blank" rel="external">https://github.com/japgolly/svg-android</a> <a href="https://github.com/japgolly/svg-android" target="_blank" rel="external">https://github.com/japgolly/svg-android</a>  </p>
</li>
<li><p>Android Visualizer<br>从 Android MediaPlayer 获得音频，然后像 iTunes 及 WinAmp 一样展示音轨<br>项目地址：<a href="https://github.com/felixpalmer/android-visualizer" target="_blank" rel="external">https://github.com/felixpalmer/android-visualizer</a>  </p>
</li>
<li><p>ExoPlayer<br>包括仪表板和 SmoothStreaming 自适应回放，缓存持久化和自定义渲染器，方便自定义和扩展，并且可以通过应用商店更新<br>项目地址：<a href="https://github.com/google/ExoPlayer" target="_blank" rel="external">https://github.com/google/ExoPlayer</a>  </p>
</li>
<li><p>DanmakuFlameMaster<br>android 上开源弹幕解析绘制引擎项目<br>项目地址：<a href="https://github.com/ctiao/DanmakuFlameMaster" target="_blank" rel="external">https://github.com/ctiao/DanmakuFlameMaster</a>  </p>
</li>
<li><p>OpenDanmaku<br>android 上一个轻量级的更简单的开源弹幕控件<br>项目地址：<a href="https://github.com/linsea/OpenDanmaku" target="_blank" rel="external">https://github.com/linsea/OpenDanmaku</a>  </p>
</li>
<li><p>K-Sonic<br>一个基于Sonic的变音Demo,可调节Speed,Pitch,Rate.<br>项目地址：<a href="https://github.com/jcodeing/K-Sonic" target="_blank" rel="external">https://github.com/jcodeing/K-Sonic</a><br>Demo 地址：<a href="https://raw.githubusercontent.com/jcodeing/K-Sonic/master/K-Sonic-demo.apk" target="_blank" rel="external">Download here</a><br>效果图：<img src="https://raw.githubusercontent.com/jcodeing/K-Sonic/master/lookme.jpg" alt="Renderings">  </p>
</li>
</ol>
<h4 id="八、事件总线-订阅者模式"><a href="#八、事件总线-订阅者模式" class="headerlink" title="八、事件总线(订阅者模式)"></a>八、事件总线(订阅者模式)</h4><p>通过发布/订阅事件解耦事件发送和接受，从而简化应用程序组件(Activities, Fragments 及后台线程)之间的通信  </p>
<ol>
<li><p>EventBus<br>greenrobot 的开源项目<br>项目地址：<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">https://github.com/greenrobot/EventBus</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/Trinea/EventBus 源码解析" target="_blank" rel="external">EventBus</a><br>文档介绍：<a href="https://github.com/greenrobot/EventBus#general-usage-and-api" target="_blank" rel="external">https://github.com/greenrobot/EventBus#general-usage-and-api</a><br>特点：(1) 支持在不同类型的线程中处理订阅，包括发布所在线程，UI 线程、单一后台线程、异步线程<br>(2) 支持事件优先级定义，支持优先级高的订阅者取消事件继续传递，支持粘性事件，是不是跟系统的有序广播、粘性广播很像啊<br>(3) 不是基于 annotations<br>(4) 性能更优<br>(5) 体积小<br>(6) 支持单例创建或创建多个对象<br>(7) 支持根据事件类型订阅  </p>
</li>
<li><p>Otto<br>Square 的开源项目，基于 Guava 的 Android 优化<br>项目地址：<a href="https://github.com/square/otto" target="_blank" rel="external">https://github.com/square/otto</a><br>文档介绍：<a href="http://square.github.io/otto/" target="_blank" rel="external">http://square.github.io/otto/</a><br><a href="https://github.com/greenrobot/EventBus#comparison-with-squares-otto" target="_blank" rel="external">EventBus 与 Otto 的功能及性能对比文档</a><br><a href="https://play.google.com/store/apps/details?id=de.greenrobot.eventperf" target="_blank" rel="external">EventBus 与 Otto 性能对比 Demo Apk</a>  </p>
</li>
</ol>
<h4 id="九、传感器"><a href="#九、传感器" class="headerlink" title="九、传感器"></a>九、传感器</h4><ol>
<li><p>Great Android Sensing Toolkit<br>Android 感应器工具包，包含示例及使用过程中可能需要的算法<br>项目地址：<a href="https://github.com/gast-lib/gast-lib" target="_blank" rel="external">https://github.com/gast-lib/gast-lib</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=root.gast.playground" target="_blank" rel="external">https://play.google.com/store/apps/details?id=root.gast.playground</a><br>文档介绍：<a href="https://github.com/gast-lib/gast-lib#documentation" target="_blank" rel="external">https://github.com/gast-lib/gast-lib#documentation</a>  </p>
</li>
<li><p>SensorManager<br>Android 传感器管理<br>项目地址：<a href="https://github.com/nlathia/SensorManager" target="_blank" rel="external">https://github.com/nlathia/SensorManager</a><br>文档介绍：<a href="https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit" target="_blank" rel="external">https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit</a>  </p>
</li>
<li><p>GPSLogger<br>记录 GPS 信息<br>项目地址：<a href="https://github.com/mendhak/gpslogger" target="_blank" rel="external">https://github.com/mendhak/gpslogger</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.mendhak.gpslogger" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.mendhak.gpslogger</a><br>文档介绍：<a href="http://code.mendhak.com/gpslogger/" target="_blank" rel="external">http://code.mendhak.com/gpslogger/</a>  </p>
</li>
<li><p>Pedometer<br>计步器，使用硬件计步感应器<br>项目地址：<a href="https://github.com/j4velin/Pedometer" target="_blank" rel="external">https://github.com/j4velin/Pedometer</a>  </p>
</li>
<li><p>leapcast<br>ChromeCast 模拟器的 App<br>项目地址：<a href="https://github.com/dz0ny/leapcast" target="_blank" rel="external">https://github.com/dz0ny/leapcast</a>  </p>
</li>
<li><p>Arduino-Communicator<br>与 Arduino 通信的 App<br>项目地址：<a href="https://github.com/jeppsson/Arduino-Communicator" target="_blank" rel="external">https://github.com/jeppsson/Arduino-Communicator</a>  </p>
</li>
<li><p>android-pedometer<br>Android 计步器<br>项目地址：<a href="https://github.com/bagilevi/android-pedometer" target="_blank" rel="external">https://github.com/bagilevi/android-pedometer</a><br>Demo 地址：<a href="http://pedometer.googlecode.com/files/Pedometer-1.4.apk" target="_blank" rel="external">http://pedometer.googlecode.com/files/Pedometer-1.4.apk</a>  </p>
</li>
<li><p>OwnTracks for Android<br>自己的轨迹记录<br>项目地址：<a href="https://github.com/owntracks/android" target="_blank" rel="external">https://github.com/owntracks/android</a>  </p>
</li>
<li><p>Shake Detector library for Android<br>Android 手机震动摇晃检测库，提供供 UI 线程调用的回调接口<br>项目地址：<a href="https://github.com/tbouron/ShakeDetector" target="_blank" rel="external">https://github.com/tbouron/ShakeDetector</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example</a>  </p>
</li>
<li><p>Android heart rate monitor<br>Android 心跳检测<br>项目地址：<a href="https://github.com/phishman3579/android-heart-rate-monitor" target="_blank" rel="external">https://github.com/phishman3579/android-heart-rate-monitor</a>  </p>
</li>
<li><p>Bluetooth LE Library for Android<br>蓝牙源信息，包括宝库 Mac、更新时间、RSSI、UUID、信号源距离、影响范围等信息<br>项目地址：<a href="https://github.com/alt236/Bluetooth-LE-Library---Android" target="_blank" rel="external">https://github.com/alt236/Bluetooth-LE-Library---Android</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan" target="_blank" rel="external">https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan</a>  </p>
</li>
<li><p>farebot<br>通过 NFC 从公交卡中读取数据的一个应用<br>项目地址：<a href="https://github.com/codebutler/farebot" target="_blank" rel="external">https://github.com/codebutler/farebot</a>  </p>
</li>
</ol>
<h4 id="十、安全"><a href="#十、安全" class="headerlink" title="十、安全"></a>十、安全</h4><ol>
<li><p>SQLCipher<br>Sqlite 加密工具<br>项目地址：<a href="https://github.com/sqlcipher/sqlcipher" target="_blank" rel="external">https://github.com/sqlcipher/sqlcipher</a><br>文档介绍：<a href="http://sqlcipher.net/sqlcipher-for-android/" target="_blank" rel="external">http://sqlcipher.net/sqlcipher-for-android/</a>  </p>
</li>
<li><p>Conceal<br>快速高效的进行文件加密解密<br>项目地址：<a href="https://github.com/facebook/conceal" target="_blank" rel="external">https://github.com/facebook/conceal</a><br>文档介绍：<a href="https://github.com/facebook/conceal#usage" target="_blank" rel="external">https://github.com/facebook/conceal#usage</a>  </p>
</li>
<li><p>Android-PasscodeLock<br>应用锁，每次启动或从任何 Activity 启动应用都需要输入四位数字的密码方可进入<br>项目地址：<a href="https://github.com/wordpress-mobile/Android-PasscodeLock" target="_blank" rel="external">https://github.com/wordpress-mobile/Android-PasscodeLock</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=org.wordpress.android" target="_blank" rel="external">https://play.google.com/store/apps/details?id=org.wordpress.android</a><br>APP 示例：Wordpress Android，支付宝，挖财  </p>
</li>
<li><p>GlowPadBackport<br>将 Android4.2 的锁屏界面解锁扩展到 Android1.6 及 1.6+<br>项目地址：<a href="https://github.com/rock3r/GlowPadBackport" target="_blank" rel="external">https://github.com/rock3r/GlowPadBackport</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample</a><br>效果图：<img src="https://lh6.ggpht.com/U070b6Lh6cVsVwx4jN-5nq0xqiB1PBzrYABPeJIEe2hZQ5UWOxc-FDUG77wADelToHA=h310-rw" alt="Renderings">  </p>
</li>
<li><p>GlowPadView<br>Android 4 锁屏界面解锁<br>项目地址：<a href="https://github.com/nadavfima/GlowPadView" target="_blank" rel="external">https://github.com/nadavfima/GlowPadView</a><br>效果图：<img src="https://raw.github.com/nadavfima/GlowPadView/master/example.png" alt="Renderings">  </p>
</li>
<li><p>Android-InsecureBank<br>关于 Android 不安全性的示例<br>项目地址：<a href="https://github.com/dineshshetty/Android-InsecureBankv2" target="_blank" rel="external">https://github.com/dineshshetty/Android-InsecureBankv2</a>  </p>
</li>
</ol>
<h4 id="十一、插件化"><a href="#十一、插件化" class="headerlink" title="十一、插件化"></a>十一、插件化</h4><p>更多见：<a href="http://www.trinea.cn/android/android-plugin/" target="_blank" rel="external">Android 插件化作用、概念以及不错的资料(包括开源项目)和解决方案</a>  </p>
<ol>
<li><p>dynamic-load-apk<br>Android 动态加载 Apk，热部署，利用 ClassLoader 以及 Activity 代理的方式解决<br>项目地址：<a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">https://github.com/singwhatiwanna/dynamic-load-apk</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/FFish/DynamicLoadApk 源码解析" target="_blank" rel="external">dynamic-load-apk</a><br>文档介绍：<a href="http://blog.csdn.net/singwhatiwanna/article/details/22597587" target="_blank" rel="external">http://blog.csdn.net/singwhatiwanna/article/details/22597587</a>  </p>
</li>
<li><p>Android Dynamic Loader<br>点评的实现方式，和上面不同的是：他不是用代理 Activity 的方式实现而是用 Fragment 以及 Schema 的方式实现<br>项目地址：<a href="https://github.com/mmin18/AndroidDynamicLoader" target="_blank" rel="external">https://github.com/mmin18/AndroidDynamicLoader</a><br>Demo 地址：<a href="https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk" target="_blank" rel="external">https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk</a>  </p>
</li>
<li><p>xCombine<br>Android App 插件式插件开发，插件必须先安装，更推荐看上面两个开源项目<br>项目地址：<a href="https://github.com/wyouflf/xCombine" target="_blank" rel="external">https://github.com/wyouflf/xCombine</a><br>文档介绍：<a href="http://my.oschina.net/u/1171837/blog/155377" target="_blank" rel="external">http://my.oschina.net/u/1171837/blog/155377</a>  </p>
</li>
<li><p>Android Plugin Framework<br>Android 插件式开发，开放的源码目前不完整<br>项目地址：<a href="https://github.com/umeng/apf" target="_blank" rel="external">https://github.com/umeng/apf</a>  </p>
</li>
<li><p>Android OpenAtlas<br>Android插件框架，基于OSGI，非代理方式，组件需要在宿主中声明<br>项目地址：<a href="https://github.com/bunnyblue/OpenAtlas" target="_blank" rel="external">https://github.com/bunnyblue/OpenAtlas</a><br>Demo 地址：<a href="https://github.com/bunnyblue/OpenAtlasExtension/blob/master/Dist/OpenAtlasLauncher.apk" target="_blank" rel="external">https://github.com/bunnyblue/OpenAtlasExtension/blob/master/Dist/OpenAtlasLauncher.apk</a></p>
</li>
<li><p>multidex<br>安装多 dex 的 classloader<br>项目地址：<a href="https://github.com/casidiablo/multidex" target="_blank" rel="external">https://github.com/casidiablo/multidex</a>  </p>
</li>
<li><p>ANR-WatchDog<br>Android ANR 监听，通过监听自己的 UI Thread 是否被执行确定是否发生了 ANR，并可以设置相关事件<br>项目地址：<a href="https://github.com/SalomonBrys/ANR-WatchDog" target="_blank" rel="external">https://github.com/SalomonBrys/ANR-WatchDog</a>  </p>
</li>
</ol>
<h4 id="十二、文件"><a href="#十二、文件" class="headerlink" title="十二、文件"></a>十二、文件</h4><p>对不同文档类型的处理，包括 PDF、Word、EPub、Html、Zip 等  </p>
<ol>
<li><p>purePDF<br>允许从任何运行的 SWF 文件读取和创建 PDF 文档<br>项目地址：<a href="https://github.com/sephiroth74/purePDF" target="_blank" rel="external">https://github.com/sephiroth74/purePDF</a>  </p>
</li>
<li><p>android-pdfview<br>快速解析 pdf 的 view，默认支持手势缩放和相关动画<br>项目地址：<a href="https://github.com/JoanZapata/android-pdfview" target="_blank" rel="external">https://github.com/JoanZapata/android-pdfview</a>  </p>
</li>
<li><p>Office 365 SDK for Android Preview<br>可支持 Microsoft SharePoint Lists, Microsoft SharePoint Files, Microsoft Exchange Calendar, Microsoft Exchange Contacts, Microsoft Exchange Mail<br>项目地址：<a href="https://github.com/OfficeDev/Office-365-SDK-for-Android" target="_blank" rel="external">https://github.com/OfficeDev/Office-365-SDK-for-Android</a>  </p>
</li>
<li><p>OpenSpritz-Android<br>EPub 阅读器<br>项目地址：<a href="https://github.com/OnlyInAmerica/OpenSpritz-Android" target="_blank" rel="external">https://github.com/OnlyInAmerica/OpenSpritz-Android</a>  </p>
</li>
<li><p>jsoup<br>一个解析 html 的 java 库，可方便的提取和操作数据<br>项目地址：<a href="https://github.com/jhy/jsoup" target="_blank" rel="external">https://github.com/jhy/jsoup</a><br>官网网址：<a href="http://jsoup.org/" target="_blank" rel="external">http://jsoup.org/</a><br>作用：(1) 从一个 url、文件或 string 获得 html 并解析<br>(2) 利用 dom 遍历或 css 选择器查找、提取数据<br>(3) 操作 html 元素<br>(4) 根据白名单去除用于提交的非法数据防止 xss 攻击<br>(5) 输出整齐的 html  </p>
</li>
<li><p>ZIP<br>java 压缩和解压库<br>项目地址：<a href="https://github.com/zeroturnaround/zt-zip" target="_blank" rel="external">https://github.com/zeroturnaround/zt-zip</a><br>文档介绍：<a href="https://github.com/zeroturnaround/zt-zip#examples" target="_blank" rel="external">https://github.com/zeroturnaround/zt-zip#examples</a><br>作用：(1) 解压和压缩，并支持文件夹内递归操作<br>(2) 支持包含和排除某些元素<br>(3) 支持重命名元素<br>(4) 支持遍历 zip 包内容<br>(5) 比较两个 zip 包等功能  </p>
</li>
<li><p>Image File Selector<br>轻量级的图片文件选择器，用系统api选取，压缩和裁切图片，可以方便的得要指定尺寸的图片<br>项目地址：<a href="https://github.com/sw926/ImageFileSelector" target="_blank" rel="external">https://github.com/sw926/ImageFileSelector</a>  </p>
</li>
</ol>
<h4 id="十三、其他"><a href="#十三、其他" class="headerlink" title="十三、其他"></a>十三、其他</h4><ol>
<li><p>FragmentStack<br>一个封装了启动模式的Fragment便捷使用库,方便构建单Activity+多Fragment轻量级框架<br>项目地址：<a href="https://github.com/Mr-wangyong/FragmentStack" target="_blank" rel="external">https://github.com/Mr-wangyong/FragmentStack</a><br>效果图：<a href="https://github.com/Mr-wangyong/FragmentStack/blob/master/play.gif" target="_blank" rel="external">https://github.com/Mr-wangyong/FragmentStack/blob/master/play.gif</a><br>App示例：<a href="http://www.wandoujia.com/apps/cn.vcinema.cinema" target="_blank" rel="external">南瓜电影</a>  </p>
</li>
<li><p>CustomTabsHelper<br>快速集成 CustomTabs 的工具类<br>项目地址：<a href="https://github.com/DreaminginCodeZH/CustomTabsHelper" target="_blank" rel="external">https://github.com/DreaminginCodeZH/CustomTabsHelper</a>  </p>
</li>
<li><p>Salvage view<br>带 View 缓存的 Viewpager PagerAdapter，很方便使用<br>项目地址：<a href="https://github.com/JakeWharton/salvage" target="_blank" rel="external">https://github.com/JakeWharton/salvage</a>  </p>
</li>
<li><p>Android Priority Job Queue<br>Android 后台任务队列<br>项目地址：<a href="https://github.com/path/android-priority-jobqueue" target="_blank" rel="external">https://github.com/path/android-priority-jobqueue</a><br>文档介绍：<a href="https://github.com/path/android-priority-jobqueue#getting-started" target="_blank" rel="external">https://github.com/path/android-priority-jobqueue#getting-started</a>  </p>
</li>
<li><p>Cobub Razor<br>开源的 mobile 行为分析系统，包括 web 端、android 端，支持 ios 和 window phone<br>项目地址：<a href="https://github.com/cobub/razor" target="_blank" rel="external">https://github.com/cobub/razor</a><br>Demo 地址：<a href="http://demo.cobub.com/razor" target="_blank" rel="external">http://demo.cobub.com/razor</a><br>官网网址：<a href="http://dev.cobub.com/" target="_blank" rel="external">http://dev.cobub.com/</a>  </p>
</li>
<li><p>Countly<br>Android 移动端数据采集分析系统<br>项目地址：<a href="https://github.com/Countly/countly-sdk-android" target="_blank" rel="external">https://github.com/Countly/countly-sdk-android</a><br>官网网址：<a href="https://count.ly/" target="_blank" rel="external">https://count.ly/</a>  </p>
</li>
<li><p>aFileChooser<br>文件选择器，可内嵌到程序中，而无需使用系统或三方文件选择器。<br>项目地址：<a href="https://github.com/iPaulPro/aFileChooser" target="_blank" rel="external">https://github.com/iPaulPro/aFileChooser</a>  </p>
</li>
<li><p>androidpn<br>基于 xmpp 协议的消息推送解决方案，包括服务器端和 android 端。<br>项目地址：<a href="https://github.com/dannytiehui/androidpn" target="_blank" rel="external">https://github.com/dannytiehui/androidpn</a>  </p>
</li>
<li><p>Bolts<br>Android 的异步编程模式<br>项目地址：<a href="https://github.com/BoltsFramework/Bolts-Android/" target="_blank" rel="external">https://github.com/BoltsFramework/Bolts-Android/</a><br>与 AsyncTask 比较：(1) 使用的是无大小限制的线程池<br>(2) 任务可组合可级联，防止了代码耦合  </p>
</li>
<li><p>CastCompanionLibrary-android<br>使 Android 程序中更快的接入 Google Cast<br>项目地址：<a href="https://github.com/googlecast/CastCompanionLibrary-android" target="_blank" rel="external">https://github.com/googlecast/CastCompanionLibrary-android</a><br>文档介绍：<a href="https://developers.google.com/cast/" target="_blank" rel="external">https://developers.google.com/cast/</a>  </p>
</li>
<li><p>CastVideos-android<br>从 Android 设备分享 Video 通过 Google Cast<br>项目地址：<a href="https://github.com/googlecast/CastVideos-android" target="_blank" rel="external">https://github.com/googlecast/CastVideos-android</a><br>文档介绍：<a href="https://developers.google.com/cast/" target="_blank" rel="external">https://developers.google.com/cast/</a>  </p>
</li>
<li><p>Uninstall_Statics<br>Android 应用自身被卸载监听及打开浏览器等反馈功能实现<br>项目地址：<a href="https://github.com/sevenler/Uninstall_Statics" target="_blank" rel="external">https://github.com/sevenler/Uninstall_Statics</a><br>文档介绍：<a href="http://www.cnblogs.com/zealotrouge/p/3157126.html" target="_blank" rel="external">http://www.cnblogs.com/zealotrouge/p/3157126.html</a>  <a href="http://www.cnblogs.com/zealotrouge/p/3159772.html" target="_blank" rel="external">http://www.cnblogs.com/zealotrouge/p/3159772.html</a>  </p>
</li>
<li><p>Memento<br>保证在系统配置改变时，Activity 中的某些数据可以简单安全的保持不变<br>项目地址：<a href="https://github.com/mttkay/memento" target="_blank" rel="external">https://github.com/mttkay/memento</a><br>文档介绍：<a href="https://github.com/mttkay/memento#usage" target="_blank" rel="external">https://github.com/mttkay/memento#usage</a>  </p>
</li>
<li><p>FreeFlow<br>布局引擎，更简单的创建自定义布局，并且当数据和布局改变时更美观的过渡动画<br>项目地址：<a href="https://github.com/Comcast/FreeFlow" target="_blank" rel="external">https://github.com/Comcast/FreeFlow</a><br>Demo 地址：<a href="https://github.com/Comcast/FreeFlow/releases" target="_blank" rel="external">https://github.com/Comcast/FreeFlow/releases</a>  </p>
</li>
<li><p>Android Gesture Detectors Framework<br>Android 手势框架，支持双指旋转、移动、平移、缩放等<br>项目地址：<a href="https://github.com/Almeros/android-gesture-detectors" target="_blank" rel="external">https://github.com/Almeros/android-gesture-detectors</a>  </p>
</li>
<li><p>Mapbox Android SDK<br>Android Map 的替代版<br>项目地址：<a href="https://github.com/mapbox/mapbox-android-sdk" target="_blank" rel="external">https://github.com/mapbox/mapbox-android-sdk</a>  </p>
</li>
<li><p>Activity animation<br>Activity 跳转动画，支持各个方向波浪的效果<br>项目地址：<a href="https://github.com/flavienlaurent/activityanimation" target="_blank" rel="external">https://github.com/flavienlaurent/activityanimation</a><br>在线演示：<a href="https://www.youtube.com/watch?v=-E0sc6w_Jck" target="_blank" rel="external">https://www.youtube.com/watch?v=-E0sc6w_Jck</a>  </p>
</li>
<li><p>KryoNet<br>通过 NIO 提供客户端和服务器端 TCP/UDP 网络传输的 Java 库<br>项目地址：<a href="https://github.com/EsotericSoftware/kryonet" target="_blank" rel="external">https://github.com/EsotericSoftware/kryonet</a>  </p>
</li>
<li><p>Rebound<br>一个模仿弹簧反弹的 Java 库，可用于创建动画<br>项目地址：<a href="https://github.com/facebook/rebound" target="_blank" rel="external">https://github.com/facebook/rebound</a>  </p>
</li>
<li><p>Android Social Networks<br>社交网络接入统一管理器，可方便的从 Twitter, LinkedIn, Facebook, Google Plus 登陆、获得个人信息、发送消息、发送专篇、添加或删除好友<br>项目地址：<a href="https://github.com/antonkrasov/AndroidSocialNetworks" target="_blank" rel="external">https://github.com/antonkrasov/AndroidSocialNetworks</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos</a>  </p>
</li>
<li><p>SmartAppUpdates<br>Android App 增量升级，包含前后端方案、Demo、以及 so 库，可用于商店或大体积 App 差分升级<br>项目地址：<a href="https://github.com/cundong/SmartAppUpdates" target="_blank" rel="external">https://github.com/cundong/SmartAppUpdates</a>  </p>
</li>
<li><p>Magnet<br>创建类似 Facebook 聊天桌面悬浮窗的效果<br>项目地址：<a href="https://github.com/premnirmal/Magnet" target="_blank" rel="external">https://github.com/premnirmal/Magnet</a>  </p>
</li>
<li><p>AcDisplay<br>将 Android 的通知都集中到锁屏显示<br>项目地址：<a href="https://github.com/AChep/AcDisplay" target="_blank" rel="external">https://github.com/AChep/AcDisplay</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.achep.acdisplay" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.achep.acdisplay</a>  </p>
</li>
<li><p>QrCodeScan<br>ZXing 和 ZBar 结合的二维码扫描项目，提高了扫描效率<br>项目地址：<a href="https://github.com/SkillCollege/QrCodeScan" target="_blank" rel="external">https://github.com/SkillCollege/QrCodeScan</a><br>效果图：<img src="http://www.eoeandroid.com/data/attachment/forum/201405/09/124538vteuz4leptgg1te6.png" alt="Renderings">  </p>
</li>
<li><p>Android-ScreenShot<br>实现 android 系统截屏功能<br>项目地址：<a href="https://github.com/Android-ScreenShot/AndroidScreenShotService" target="_blank" rel="external">https://github.com/Android-ScreenShot/AndroidScreenShotService</a><br>文档介绍：<a href="http://blog.csdn.net/buptgshengod/article/details/39155979" target="_blank" rel="external">http://blog.csdn.net/buptgshengod/article/details/39155979</a>  </p>
</li>
<li><p>card.io SDK for Android<br>信用卡扫描 Android SDK<br>项目地址：<a href="https://github.com/card-io/card.io-Android-SDK" target="_blank" rel="external">https://github.com/card-io/card.io-Android-SDK</a><br>Demo 项目：<a href="https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp" target="_blank" rel="external">https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp</a>  </p>
</li>
<li><p>ASNE<br>Twitter, Facebook, Google Plus, LinkedIn, Instagram, Vkontakte, Odnoklassniki 的集成库，包括他们的大多数功能<br>项目地址：<a href="https://github.com/gorbin/ASNE" target="_blank" rel="external">https://github.com/gorbin/ASNE</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne</a>  </p>
</li>
<li><p>Android Signature Pad<br>Android 自定义的签名 View，可自定义笔颜色和大小<br>项目地址：<a href="https://github.com/gcacace/android-signaturepad" target="_blank" rel="external">https://github.com/gcacace/android-signaturepad</a><br>Demo 项目：<a href="https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example" target="_blank" rel="external">https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example</a>  </p>
</li>
<li><p>Teleport<br>Android Wear 数据同步和消息传送库<br>项目地址：<a href="https://github.com/Mariuxtheone/Teleport" target="_blank" rel="external">https://github.com/Mariuxtheone/Teleport</a>  </p>
</li>
<li><p>DebugLog<br>可以帮你创建更简单和更容易理解的调试日志，能够友好的显示调试信息所在类和函数。<br>项目地址：<a href="https://github.com/MustafaFerhan/DebugLog" target="_blank" rel="external">https://github.com/MustafaFerhan/DebugLog</a><br>效果图：<img src="https://camo.githubusercontent.com/37deffede9f9b185886da48e96a4829ebd407260/68747470733a2f2f7261772e6769746875622e636f6d2f4d75737461666146657268616e2f44656275674c6f672f6d61737465722f44656275674c6f672d44656d6f2f6173736574732f7373322e6a7067" alt="Renderings">  </p>
</li>
<li><p>Logger<br>简单、美观而且十分强大的 Android 日志工具<br>项目地址：<a href="https://github.com/orhanobut/logger" target="_blank" rel="external">https://github.com/orhanobut/logger</a><br>Demo 地址：<a href="https://github.com/orhanobut/logger/tree/master/app" target="_blank" rel="external">https://github.com/orhanobut/logger/tree/master/app</a><br>效果图：<img src="https://github.com/orhanobut/logger/blob/master/images/description.png" alt="Renderings">  </p>
</li>
<li><p>jlog<br>可以灵活配置的日志工具，支持JSON打印，日志保存到指定文件，日志显示调用位置（混淆模式下依然有效）<br>项目地址：<a href="https://github.com/JiongBull/jlog" target="_blank" rel="external">https://github.com/JiongBull/jlog</a><br>Demo 地址：<a href="https://raw.githubusercontent.com/JiongBull/jlog/master/apk/JLog_sample.apk" target="_blank" rel="external">apk地址</a><br>效果图：<img src="http://7xize8.com1.z0.glb.clouddn.com/jlog_sample.gif" alt="Renderings">  </p>
</li>
<li><p>Phrase<br>square 组开源大牛写的字符串替换类<br>项目地址：<a href="https://github.com/square/phrase" target="_blank" rel="external">https://github.com/square/phrase</a>  </p>
</li>
<li><p>ColorPhrase<br>模仿 phrase 写的对字符串个别字符颜色改变的类，高效强大！<br>项目地址：<a href="https://github.com/THEONE10211024/ColorPhrase" target="_blank" rel="external">https://github.com/THEONE10211024/ColorPhrase</a><br>效果图：<img src="https://github.com/THEONE10211024/ColorPhrase/blob/master/screenshot/Screenshot_2015-05-16-18-12-23.jpeg" alt="Renderings">  </p>
</li>
<li><p>PinyinSearch<br>一个为 T9 搜索和 Qwerty 搜索,提供数据解析与匹配等方法的拼音搜索 java 库。<br>项目地址： <a href="https://github.com/handsomezhou/PinyinSearchLibrary" target="_blank" rel="external">https://github.com/handsomezhou/PinyinSearchLibrary</a><br>Demo 地址： <a href="https://github.com/handsomezhou/PinyinSearchLibrary/blob/master/external_res/bin/ContactsSearch.apk?raw=true" target="_blank" rel="external">ContactsSearch</a>    <a href="https://github.com/handsomezhou/PinyinSearchLibrary/blob/master/external_res/bin/AppSearch.apk?raw=true" target="_blank" rel="external">AppSearch</a><br>效果图：<img src="https://github.com/handsomezhou/PinyinSearchLibrary/blob/master/external_res/image/ContactsSearch.gif" alt="Renderings"><br>APP 示例： 通讯录应用，微信电话本  </p>
</li>
<li><p>PrainView<br>PaintView 是一个画图工具:<br>可直接使用设定按钮来实现已拥有的方法，且拓展性强<br>基础功能：更换颜色、更换橡皮、以及更换橡皮和笔的粗细、清屏、倒入图片<br>特殊功能：保存画笔轨迹帧动画、帧动画导入导出、ReDo和UnDo<br>项目地址：<a href="https://github.com/lfkdsk/JustWeTools" target="_blank" rel="external">Paintview</a><br>效果图：<img src="https://github.com/lfkdsk/JustWeTools/blob/master/picture/gif.gif" alt="p1">  </p>
<pre><code>![p2](https://github.com/lfkdsk/JustWeTools/blob/master/picture/io.gif)  
</code></pre><p>demo地址：<a href="https://github.com/lfkdsk/JustWeTools/blob/master/demo/DrawAPicture.apk" target="_blank" rel="external">apk地址</a><br>原理解析：<a href="http://www.cnblogs.com/lfk-dsk/p/4768850.html" target="_blank" rel="external">PaintView 绘图控件解析</a>  </p>
</li>
<li><p>CodeView<br>CodeView代码查看／修改工具: 基于WebView制作的代码编辑器,实现代码高亮，暗色主题<br>项目地址：<a href="https://github.com/lfkdsk/JustWeTools" target="_blank" rel="external">CodeView</a><br>效果图：<img src="https://github.com/lfkdsk/JustWeTools/blob/master/picture/accomplish.png" alt="p3">  </p>
<pre><code>![p4](https://github.com/lfkdsk/JustWeTools/blob/master/picture/edit.png)  
</code></pre><p>demo地址：<a href="https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk" target="_blank" rel="external">apk地址</a>  </p>
</li>
<li><p>ExplorerView<br>文件浏览器：继承自ListView，可拓展性强，可进行文件类型分析<br>项目地址：<a href="https://github.com/lfkdsk/JustWeTools" target="_blank" rel="external">CodeView</a><br>效果图：<img src="https://github.com/lfkdsk/JustWeTools/blob/master/picture/explorer1.png" alt="p5"><br><img src="https://github.com/lfkdsk/JustWeTools/blob/master/picture/explorer2.png" alt="p6"><br>demo地址：<a href="https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk" target="_blank" rel="external">apk地址</a>  </p>
</li>
<li><p>ReadView<br>小说阅读器，支持文字字体、颜色、背景、进度等多种调整，支持一键设置。<br>项目地址：<a href="https://github.com/lfkdsk/JustWeTools" target="_blank" rel="external">ReadView</a><br>效果图：<img src="https://github.com/lfkdsk/JustWeTools/blob/master/picture/readbook.png" alt="p7"><br>demo地址：<a href="https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk" target="_blank" rel="external">apk地址</a>  </p>
</li>
<li><p>MarkDownView<br>支持MarkDown语法的渲染器,基于WebView的MarkDown渲染器,支持标准化的MarkDown语法,<br>调用接口和CodeView保持一致使用简便<br>项目地址：<a href="https://github.com/lfkdsk/JustWeTools" target="_blank" rel="external">ReadView</a><br>效果图：<img src="https://github.com/lfkdsk/JustWeTools/blob/master/picture/markdown.png" alt="markdown"><br>demo地址：<a href="https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk" target="_blank" rel="external">apk地址</a>  </p>
</li>
<li><p>VerTextView竖行排版的TextView:<br>支持竖行排版，添加了下划线功能，开启简便，下划线粗细、颜色、间距均可自定义，<br>接口调用方式与TextView相似，使用简便。<br>项目地址：<a href="https://github.com/lfkdsk/JustWeTools" target="_blank" rel="external">ReadView</a><br>效果图：<img src="https://github.com/lfkdsk/JustWeTools/blob/master/picture/VerTextView.png" alt="vertextview"><br>demo地址：<a href="https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk" target="_blank" rel="external">apk地址</a>  </p>
</li>
<li><p>GHDownload下载框架<br>支持单线程和多线程断点下载，简单易用。<br>项目地址：<a href="https://github.com/guanchao/GHDownload" target="_blank" rel="external">GHDownload</a>  </p>
</li>
</ol>
<h2 id="第三部分-优秀项目"><a href="#第三部分-优秀项目" class="headerlink" title="第三部分 优秀项目"></a>第三部分 优秀项目</h2><p>主要介绍那些 Android 还不错的完整项目，目前包含的项目主要依据是项目有意思或项目分层规范比较好。  </p>
<h4 id="一、系统及平台"><a href="#一、系统及平台" class="headerlink" title="一、系统及平台"></a>一、系统及平台</h4><ol>
<li>Linux<br>项目地址：<a href="https://github.com/torvalds/linux" target="_blank" rel="external">https://github.com/torvalds/linux</a>  </li>
<li>Android<br>项目地址：<a href="https://android.googlesource.com/" target="_blank" rel="external">https://android.googlesource.com/</a>  </li>
</ol>
<h4 id="二、项目"><a href="#二、项目" class="headerlink" title="二、项目"></a>二、项目</h4><ol>
<li><p>ZXing<br>二维码扫描工具<br>项目地址：<a href="https://github.com/zxing/zxing" target="_blank" rel="external">https://github.com/zxing/zxing</a> 或 <a href="https://code.google.com/p/zxing/" target="_blank" rel="external">https://code.google.com/p/zxing/</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=com.google.zxing.client.android" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.google.zxing.client.android</a><br>其他：现在市面上很多应用的二维码扫描功能都是从这个修改而来  </p>
</li>
<li><p>photup<br>编辑机批量上传照片到 facebook 上<br>项目地址：<a href="https://github.com/chrisbanes/photup" target="_blank" rel="external">https://github.com/chrisbanes/photup</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=uk.co.senab.photup" target="_blank" rel="external">https://play.google.com/store/apps/details?id=uk.co.senab.photup</a><br>其他：代码分包合理，很棒。不过这个项目依赖的开源项目比较多，比较难编译  </p>
</li>
<li><p>github-android<br>Github 的 Android 客户端项目<br>项目地址：<a href="https://github.com/github/android" target="_blank" rel="external">https://github.com/github/android</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=com.github.mobile" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.github.mobile</a>  </p>
</li>
<li><p>Notes<br>MIUI 便签<br>项目地址：<a href="https://github.com/MiCode/Notes" target="_blank" rel="external">https://github.com/MiCode/Notes</a><br>APK 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true</a><br>其他：项目分包比较合理，相比较 miui 的文件管理器 <a href="https://github.com/MiCode/FileExplorer" target="_blank" rel="external">https://github.com/MiCode/FileExplorer</a> 代码规范较好得多  </p>
</li>
<li><p>weicuiyuan<br>四次元-新浪微博客户端<br>项目地址：<a href="https://github.com/qii/weiciyuan" target="_blank" rel="external">https://github.com/qii/weiciyuan</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=org.qii.weiciyuan" target="_blank" rel="external">https://play.google.com/store/apps/details?id=org.qii.weiciyuan</a>  </p>
</li>
<li><p>Douya<br>豆芽——Material Design 的豆瓣客户端<br>项目地址：<a href="https://github.com/DreaminginCodeZH/Douya" target="_blank" rel="external">https://github.com/DreaminginCodeZH/Douya</a><br>效果图：<img src="https://raw.githubusercontent.com/DreaminginCodeZH/Douya/master/screenshot/00-main.png" alt="">  </p>
</li>
<li><p>gnucash-android<br>一个记账理财软件<br>项目地址：<a href="https://github.com/codinguser/gnucash-android" target="_blank" rel="external">https://github.com/codinguser/gnucash-android</a><br>APK 地址：<a href="http://play.google.com/store/apps/details?id=org.gnucash.android" target="_blank" rel="external">http://play.google.com/store/apps/details?id=org.gnucash.android</a>  </p>
</li>
<li><p>AntennaPod<br>支持 rss 订阅、音乐订阅<br>项目地址：<a href="https://github.com/danieloeh/AntennaPod" target="_blank" rel="external">https://github.com/danieloeh/AntennaPod</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=de.danoeh.antennapod" target="_blank" rel="external">https://play.google.com/store/apps/details?id=de.danoeh.antennapod</a>  </p>
</li>
<li><p>ChaseWhisplyProject<br>打鬼游戏<br>项目地址：<a href="https://github.com/tvbarthel/ChaseWhisplyProject" target="_blank" rel="external">https://github.com/tvbarthel/ChaseWhisplyProject</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply" target="_blank" rel="external">https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply</a>  </p>
</li>
<li><p>Tweet Lanes<br>功能完整的 Twitter 客户端<br>项目地址：<a href="https://github.com/chrislacy/TweetLanes" target="_blank" rel="external">https://github.com/chrislacy/TweetLanes</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=com.tweetlanes.android" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.tweetlanes.android</a>  </p>
</li>
<li><p>Financius<br>简单易用的记账程序<br>项目地址：<a href="https://github.com/mvarnagiris/Financius" target="_blank" rel="external">https://github.com/mvarnagiris/Financius</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=com.code44.finance" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.code44.finance</a>  </p>
</li>
<li><p>todo.txt-android<br>todo.txt 的官方 Android 应用<br>项目地址：<a href="https://github.com/ginatrapani/todo.txt-android" target="_blank" rel="external">https://github.com/ginatrapani/todo.txt-android</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch</a>  </p>
</li>
<li><p>simpletask<br>基于 todo.txt 官方应用的另一个客户端<br>项目地址：<a href="https://github.com/mpcjanssen/simpletask-android" target="_blank" rel="external">https://github.com/mpcjanssen/simpletask-android</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo</a>  </p>
</li>
<li><p>Muzei Live Wallpaper<br>定时更换桌面精美壁纸<br>项目地址：<a href="https://github.com/romannurik/muzei" target="_blank" rel="external">https://github.com/romannurik/muzei</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=net.nurik.roman.muzei" target="_blank" rel="external">https://play.google.com/store/apps/details?id=net.nurik.roman.muzei</a>  </p>
</li>
<li><p>Scanbook<br>扫描搜索查询图书信息<br>项目地址：<a href="https://github.com/JayFang1993/ScanBook" target="_blank" rel="external">https://github.com/JayFang1993/ScanBook</a><br>APK 地址：<a href="http://www.wandoujia.com/apps/com.scanbook" target="_blank" rel="external">http://www.wandoujia.com/apps/com.scanbook</a>  </p>
</li>
<li><p>iosched<br>The Google I/O 2014 Android App<br>项目地址：<a href="https://github.com/google/iosched" target="_blank" rel="external">https://github.com/google/iosched</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched</a>  </p>
</li>
</ol>
<h2 id="第四部分-开发工具及测试工具"><a href="#第四部分-开发工具及测试工具" class="headerlink" title="第四部分 开发工具及测试工具"></a>第四部分 开发工具及测试工具</h2><p>主要介绍和 Android 开发工具和测试工具相关的开源项目。  </p>
<h4 id="一、开发效率工具"><a href="#一、开发效率工具" class="headerlink" title="一、开发效率工具"></a>一、开发效率工具</h4><ol>
<li><p>Parceler<br>通过注解及工具类自动完成实体类 Parcelable 及值传递<br>项目地址：<a href="https://github.com/johncarl81/parceler" target="_blank" rel="external">https://github.com/johncarl81/parceler</a>  </p>
</li>
<li><p>Json2Java<br>根据 JSon 数据自动生成对应的 Java 实体类，还支持 Parcel、Gson Annotations 对应代码自动生成。期待后续的提取父类以及多 url 构建整个工程的功能<br>项目地址：<a href="https://github.com/jonfhancock/JsonToJava" target="_blank" rel="external">https://github.com/jonfhancock/JsonToJava</a><br>在线演示：<a href="http://jsontojava.appspot.com/" target="_blank" rel="external">http://jsontojava.appspot.com/</a>  </p>
</li>
<li><p>IntelliJ Plugin for Android Parcelable boilerplate code generation<br>Android studio 插件，生成 Parcelable 代码<br>项目地址：<a href="https://github.com/mcharmas/android-parcelable-intellij-plugin" target="_blank" rel="external">https://github.com/mcharmas/android-parcelable-intellij-plugin</a><br>效果图：<img src="https://github.com/mcharmas/android-parcelable-intellij-plugin/raw/master/screenshot.png" alt="Renderings">  </p>
</li>
<li><p>Android Holo Colors IntelliJ Plugin<br>Android studio 插件，生成 holo 样式 9 patch 图片<br>项目地址：<a href="https://github.com/jeromevdl/android-holo-colors-idea-plugin" target="_blank" rel="external">https://github.com/jeromevdl/android-holo-colors-idea-plugin</a><br>效果图：<img src="https://raw.github.com/jeromevdl/android-holo-colors-idea-plugin/master/other/holocolorsidea.png" alt="Renderings">  </p>
</li>
<li><p>Android Drawable Factory<br>用于生成各个分辨率的图片<br>项目地址：<a href="https://github.com/tizionario/AndroidDrawableFactory" target="_blank" rel="external">https://github.com/tizionario/AndroidDrawableFactory</a><br>效果图：<img src="https://github-camo.global.ssl.fastly.net/5c3844b345a9779296f996490070dab0bfc9dbf5/68747470733a2f2f646c2e64726f70626f7875736572636f6e74656e742e636f6d2f752f32363636343637352f416e64726f69644472617761626c65466163746f72792f312e706e67" alt="Renderings">  </p>
</li>
<li><p>SelectorChapek for Android<br>Android Studio 插件，可根据固定文件名格式资源自动生成 drawable selectors xml 文件。<br>项目地址：<a href="https://github.com/inmite/android-selector-chapek" target="_blank" rel="external">https://github.com/inmite/android-selector-chapek</a>  </p>
</li>
<li><p>Android Action Bar Style Generator<br>Android ActionBar 样式生成器，可在线选择 ActionBar 样式自动生成所需要的图片资源及 xml 文件<br>项目地址：<a href="https://github.com/jgilfelt/android-actionbarstylegenerator" target="_blank" rel="external">https://github.com/jgilfelt/android-actionbarstylegenerator</a><br>在线演示：<a href="http://jgilfelt.github.io/android-actionbarstylegenerator/" target="_blank" rel="external">http://jgilfelt.github.io/android-actionbarstylegenerator/</a>  </p>
</li>
<li><p>ButterKnifeZelezny<br>用于快速生成<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">ButterKnife</a>View 注入代码的 Android Studio/IDEA 插件<br>项目地址：<a href="https://github.com/inmite/android-butterknife-zelezny" target="_blank" rel="external">https://github.com/inmite/android-butterknife-zelezny</a>  </p>
</li>
<li><p>RoboCoP<br>利用 Gradle task 根据固定格式的 json 文件生成 ContentProvider<br>项目地址：<a href="https://github.com/mediarain/RoboCoP" target="_blank" rel="external">https://github.com/mediarain/RoboCoP</a>  </p>
</li>
<li><p>appiconsizes<br>用于生成各个分辨率的图片<br>项目地址：<a href="http://www.appiconsizes.com/" target="_blank" rel="external">http://www.appiconsizes.com/</a>  </p>
</li>
<li><p>AndroidUtiles<br>集合了所有常用的安卓工具类<br>项目地址：<a href="https://github.com/l123456789jy/Lazy" target="_blank" rel="external">https://github.com/l123456789jy/Lazy</a></p>
</li>
</ol>
<ol>
<li><p>Gradle Retrolambda Plugin<br><a href="https://github.com/orfjackal/retrolambda" target="_blank" rel="external">Retrolambda</a>是将 Java8 的 Lambdas 应用于 Java7 的工具，本项目是 Gradle 插件，通过 Retrolambda 从而使 Java 或 Android 项目用 Java8 的 Lambdas 编写，将编译后的字节码转换为 Java6 和 7 的字节码从而正常运行<br>项目地址：<a href="https://github.com/evant/gradle-retrolambda" target="_blank" rel="external">https://github.com/evant/gradle-retrolambda</a>  </p>
</li>
<li><p>Dagger IntelliJ Plugin<br>dagger 的 intellij 插件<br>项目地址：<a href="https://github.com/square/dagger-intellij-plugin" target="_blank" rel="external">https://github.com/square/dagger-intellij-plugin</a>  </p>
</li>
<li><p>Android Gen Drawable Maven plugin<br>在编译时根据 SVG 描述文件生成不同分辨率的 jpg、png 或点 9 图片<br>项目地址：<a href="https://github.com/avianey/androidgendrawable-maven-plugin" target="_blank" rel="external">https://github.com/avianey/androidgendrawable-maven-plugin</a>  </p>
</li>
<li><p>Android Asset Studio<br>各种 Android 资源自动生成器，包括启动图标、ActionBar 图标、通知栏图标、点 9 等<br>项目地址：<a href="https://github.com/romannurik/AndroidAssetStudio" target="_blank" rel="external">https://github.com/romannurik/AndroidAssetStudio</a><br>在线演示：<a href="http://romannurik.github.io/AndroidAssetStudio/" target="_blank" rel="external">http://romannurik.github.io/AndroidAssetStudio/</a>  </p>
</li>
<li><p>jsonschema2pojo<br>根据 Json 内容生成 java 对象，支持 jackjson 和 gson<br>项目地址：<a href="https://github.com/joelittlejohn/jsonschema2pojo" target="_blank" rel="external">https://github.com/joelittlejohn/jsonschema2pojo</a><br>在线演示：<a href="http://www.jsonschema2pojo.org/" target="_blank" rel="external">http://www.jsonschema2pojo.org/</a>  </p>
</li>
<li><p>GsonFormat<br>根据 JSONObject 格式的字符串,自动生成实体类参数的 Android Studio/IntelliJ IDEA 插件<br>项目地址：<a href="https://github.com/zzz40500/GsonFormat" target="_blank" rel="external">https://github.com/zzz40500/GsonFormat</a><br>效果图：<img src="https://camo.githubusercontent.com/fbf4b89e2ec64e80d351f725d11762ebd2b7a515/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f3136363836362d303766333038346262363735386566612e676966" alt="Renderings">  </p>
</li>
<li><p>Json2Class<br>根据Json生成Java文件的Android Studio/IntelliJ IDEA 插件，并且可以选择Parcelable或者Serializable<br>项目地址：<a href="https://github.com/anzewei/Json2Class" target="_blank" rel="external">https://github.com/anzewei/Json2Class</a><br>效果图：<img src="https://raw.githubusercontent.com/anzewei/Json2Class/master/screenshot/screenshot_15002.png" alt="Renderings">  </p>
</li>
<li><p>9-Patch-Resizer<br>自动生成 png 及点 9 图片的不同分辨率版本<br>项目地址：<a href="https://github.com/redwarp/9-Patch-Resizer" target="_blank" rel="external">https://github.com/redwarp/9-Patch-Resizer</a>  </p>
</li>
<li><p>AndroidLocalizationer<br>可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件<br>项目地址：<a href="https://github.com/westlinkin/AndroidLocalizationer" target="_blank" rel="external">https://github.com/westlinkin/AndroidLocalizationer</a>  </p>
</li>
<li><p>Material Palette<br>一个将现有的色彩方案组合成材料设计的调色板方案，提供下载。选取两个主要色彩后便可以提供下载，提供下载的格式可以是 android 的资源 xml 文件，以色彩的方式提供，也可以是 CSS、SVG、PNG 等常见格式文件。<br>项目地址：<a href="http://www.materialpalette.com/" target="_blank" rel="external">http://www.materialpalette.com/</a>  </p>
</li>
</ol>
<h4 id="二、开发自测相关"><a href="#二、开发自测相关" class="headerlink" title="二、开发自测相关"></a>二、开发自测相关</h4><ol>
<li><p>Quality Tools for Android<br>Android 测试及自测工具集合和示例<br>项目地址：<a href="https://github.com/stephanenicolas/Quality-Tools-for-Android" target="_blank" rel="external">https://github.com/stephanenicolas/Quality-Tools-for-Android</a>  </p>
</li>
<li><p>android-test-kit<br>Google 的 Android 测试工具<br>包括 GoogleInstrumentationTestRunner(增强版的 InstrumentationTestRunner)和 Espresso(用于快速写出可靠测试用例的 API)<br>项目地址：<a href="https://code.google.com/p/android-test-kit/" target="_blank" rel="external">https://code.google.com/p/android-test-kit/</a><br>文档介绍：<a href="https://code.google.com/p/android-test-kit/w/list" target="_blank" rel="external">https://code.google.com/p/android-test-kit/w/list</a>  </p>
</li>
<li><p>robolectric<br>测试用例编写框架<br>项目地址：<a href="https://github.com/robolectric/robolectric" target="_blank" rel="external">https://github.com/robolectric/robolectric</a><br>Demo 地址：<a href="https://github.com/robolectric/robolectricsample" target="_blank" rel="external">https://github.com/robolectric/robolectricsample</a><br>文档介绍：<a href="http://robolectric.org/" target="_blank" rel="external">http://robolectric.org/</a><br>特点：(1). 不需要模拟器在一般 JVM 就可以运行测试用例<br>(2). 能完成在真机上的大部分测试包括感应器<br>其他的测试用例及相关模块 Mock 可见：<a href="https://code.google.com/p/android-mock/" target="_blank" rel="external">android-mock</a>, <a href="https://code.google.com/p/mockito/" target="_blank" rel="external">mockito</a>, <a href="https://github.com/easymock/easymock" target="_blank" rel="external">easy-mock</a>  </p>
</li>
<li><p>Android FEST<br>提供一些列方便的断言，可用于提高编写 Android 自测代码效率<br>项目地址：<a href="https://github.com/square/fest-android" target="_blank" rel="external">https://github.com/square/fest-android</a>  </p>
</li>
<li><p>BoundBox<br>可用于测试类各种访问权限的属性、方法。实际是通过 BoundBox 这个 annotation 生成一个属性和方法都是 public 权限的中间类并对此类进行测试完成的<br>项目地址：<a href="https://github.com/stephanenicolas/boundbox" target="_blank" rel="external">https://github.com/stephanenicolas/boundbox</a>  </p>
</li>
<li><p>Hugo<br>用于打印函数信息及执行时间的工具，仅在 debug 模式生效<br>项目地址：<a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">https://github.com/JakeWharton/hugo</a>  </p>
</li>
<li><p>scalpel<br>在应用下面添加一层用于界面调试<br>项目地址：<a href="https://github.com/JakeWharton/scalpel" target="_blank" rel="external">https://github.com/JakeWharton/scalpel</a>  </p>
</li>
<li><p>Android Screenshot library<br>Android 截图工具类，用于在持续集成时截图<br>项目地址：<a href="https://github.com/rtyley/android-screenshot-lib" target="_blank" rel="external">https://github.com/rtyley/android-screenshot-lib</a>  </p>
</li>
<li><p>sonar-android-lint-plugin<br>将 android lint 的错误在 sonar 中展现<br>项目地址：<a href="https://github.com/SonarCommunity/sonar-android" target="_blank" rel="external">https://github.com/SonarCommunity/sonar-android</a>  </p>
</li>
</ol>
<h4 id="三、测试工具"><a href="#三、测试工具" class="headerlink" title="三、测试工具"></a>三、测试工具</h4><ol>
<li><p>Spoon<br>可用于 android 不同机型设备自动化测试，能将应用 apk 和测试 apk 运行在不同机器上并生成相应测试报告。<br>项目地址：<a href="https://github.com/square/spoon" target="_blank" rel="external">https://github.com/square/spoon</a>  </p>
</li>
<li><p>Tencent APT<br>APT 是腾讯开源的一个 Android 平台高效性能测试组件，提供丰富实用的功能，适用于开发自测、定位性能瓶颈；测试人员完成性能基准测试、竞品对比测试<br>项目地址：<a href="https://github.com/stormzhang/APT" target="_blank" rel="external">https://github.com/stormzhang/APT</a>  </p>
</li>
<li><p>Emmagee<br>网易开源的性能测试工具，包括 CPU、内存、网络流量、启动时间、电池状态等<br>项目地址：<a href="https://github.com/NetEase/Emmagee" target="_blank" rel="external">https://github.com/NetEase/Emmagee</a>  </p>
</li>
<li><p>Android py-uiautomator<br>py-uiautomator 是一个对 Android uiautomator 用 python 进行封装的测试框架.<br>项目地址：<a href="https://github.com/xiaocong/uiautomator" target="_blank" rel="external">https://github.com/xiaocong/uiautomator</a>  </p>
</li>
<li><p>Augmented Traffic Control<br>模拟网络状况，包括带宽、时延抖动、丢包率、错包率、包重排率<br>项目地址：<a href="https://github.com/facebook/augmented-traffic-control" target="_blank" rel="external">https://github.com/facebook/augmented-traffic-control</a>  </p>
</li>
<li><p>stetho<br>强大的 Android Debug 工具。支持网络请求监控以及数据库查看，可以和 Chrome DevTools 结合或者命令行模式。<br>项目地址：<a href="https://github.com/facebook/stetho" target="_blank" rel="external">https://github.com/facebook/stetho</a>  </p>
</li>
</ol>
<h4 id="四、开发及编译环境"><a href="#四、开发及编译环境" class="headerlink" title="四、开发及编译环境"></a>四、开发及编译环境</h4><ol>
<li><p>Buck<br>facebook 开源的 Android 编译工具，效率是 ant 的两倍。主要优点在于：<br>(1) 加快编译速度，通过并行利用多核 cpu 和跟踪不变资源减少增量编译时间实现<br>(2) 可以在编译系统中生成编译规则而无须另外的系统生成编译规则文件<br>(3) 编译同时可生成单元测试结果<br>(4) 既可用于 IDE 编译也可用于持续集成编译<br>(5) facebook 持续优化中<br>项目地址：<a href="https://github.com/facebook/buck" target="_blank" rel="external">https://github.com/facebook/buck</a>  </p>
</li>
<li><p>Android Maven Plugin<br>Android Maven 插件，可用于对 android 三方依赖进行管理。在 J2EE 开发中，maven 是非常成熟的依赖库管理工具，可统一管理依赖库。<br>项目地址：<a href="https://github.com/jayway/maven-android-plugin" target="_blank" rel="external">https://github.com/jayway/maven-android-plugin</a>  </p>
</li>
<li><p>umeng-muti-channel-build-tool<br>渠道打包工具<br>项目地址：<a href="https://github.com/umeng/umeng-muti-channel-build-tool" target="_blank" rel="external">https://github.com/umeng/umeng-muti-channel-build-tool</a><br>另可参见 Google 的构建系统 Gradle：<a href="http://tools.android.com/tech-docs/new-build-system/user-guide" target="_blank" rel="external">http://tools.android.com/tech-docs/new-build-system/user-guide</a>  </p>
</li>
<li><p>Genymotion<br>目前最好用最快的 android 模拟器<br>项目地址：<a href="http://www.genymotion.com/" target="_blank" rel="external">http://www.genymotion.com/</a><br>Android studio 集成控件： <a href="http://plugins.jetbrains.com/plugin/7269?pr=idea" target="_blank" rel="external">http://plugins.jetbrains.com/plugin/7269?pr=idea</a><br>Cyril Mottier 推荐：<a href="http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/" target="_blank" rel="external">http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/</a>  </p>
</li>
<li><p>gradle-mvn-push<br>方便的将 Gradle 的 Artifacts 上传到 Maven 仓库<br>项目地址：<a href="https://github.com/chrisbanes/gradle-mvn-push" target="_blank" rel="external">https://github.com/chrisbanes/gradle-mvn-push</a><br>文档介绍：<a href="https://github.com/chrisbanes/gradle-mvn-push#usage" target="_blank" rel="external">https://github.com/chrisbanes/gradle-mvn-push#usage</a>  </p>
</li>
<li><p>Android Emulator Plugin for Jenkins<br>Android 模拟器 jenkins 插件，用于 Jenkins 做持续集成时跑模拟器测试<br>项目地址：<a href="https://github.com/jenkinsci/android-emulator-plugin" target="_blank" rel="external">https://github.com/jenkinsci/android-emulator-plugin</a>  </p>
</li>
<li><p>Android Maven Plugin<br>管理应用所需要的依赖库。包括的构建工具有 Maven、Gradle、ant、sbt<br>项目地址：<a href="https://github.com/mosabua/maven-android-sdk-deployer" target="_blank" rel="external">https://github.com/mosabua/maven-android-sdk-deployer</a>  </p>
</li>
<li><p>SDK Manager Plugin<br>下载和管理 Android SDK 的 Gradle 插件<br>项目地址：<a href="https://github.com/JakeWharton/sdk-manager-plugin" target="_blank" rel="external">https://github.com/JakeWharton/sdk-manager-plugin</a>  </p>
</li>
<li><p>Gradle Protobuf Plugin<br>将.proto 文件转换成 Java 文件的 gradle 插件<br>项目地址：<a href="https://github.com/andrewkroh/gradle-protobuf-plugin" target="_blank" rel="external">https://github.com/andrewkroh/gradle-protobuf-plugin</a>  </p>
</li>
<li><p>ChromeADB<br>Chrome 的 Adb 插件，当登录后，能看到所有连接的设备并操作，可以看应用、进程、内存及磁盘使用情况等<br>项目地址：<a href="https://github.com/importre/chromeadb" target="_blank" rel="external">https://github.com/importre/chromeadb</a>  </p>
</li>
</ol>
<h4 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h4><ol>
<li><p>GT<br>APP的随身调试平台，它是直接运行在手机上的“集成调试环境”(IDTE, Integrated Debug Environment)。<br>项目地址：<a href="https://github.com/TencentOpen/GT" target="_blank" rel="external">https://github.com/TencentOpen/GT</a><br>文档介绍：<a href="http://gt.qq.com/docs.html" target="_blank" rel="external">http://gt.qq.com/docs.html</a>  </p>
</li>
<li><p>ViewServer<br>允许 app 运行在任何手机上都可以用 HierarchyViewer 查看<br>项目地址：<a href="https://github.com/romainguy/ViewServer" target="_blank" rel="external">https://github.com/romainguy/ViewServer</a>  </p>
</li>
<li><p>GridWichterle for Android<br>在整个系统上显示一个 grid，用来帮助查看应用布局及使得布局更美观，可设置 grid 网格大小和颜色，android 推荐 48dp 和 8dp，可见 Android Design Guidelines – Metrics and Grids，比起 hierarchyviewer 相差甚远，不过偶尔可用来作为布局查看工具。<br>项目地址：<a href="https://github.com/inmite/android-grid-wichterle" target="_blank" rel="external">https://github.com/inmite/android-grid-wichterle</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle" target="_blank" rel="external">https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle</a>  </p>
</li>
<li><p>Catlog<br>手机端 log 查看工具，支持不同颜色显示、关键字过滤、级别过滤、进程 id 过滤、录制功能等<br>项目地址：<a href="https://github.com/nolanlawson/Catlog" target="_blank" rel="external">https://github.com/nolanlawson/Catlog</a><br>在线演示：<a href="https://play.google.com/store/apps/details?id=com.nolanlawson.logcat" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.nolanlawson.logcat</a>  </p>
</li>
<li><p>PID Cat<br>根据 package 查看 logcat 日志<br>项目地址：<a href="https://github.com/JakeWharton/pidcat" target="_blank" rel="external">https://github.com/JakeWharton/pidcat</a>  </p>
</li>
<li><p>ACRA<br>应用崩溃信息日志上报到 GoogleDoc 工具，网页版展现结果三方开源地址 <a href="https://github.com/BenoitDuffez/crashreportsviewer" target="_blank" rel="external">https://github.com/BenoitDuffez/crashreportsviewer</a><br>项目地址：<a href="https://github.com/ACRA/acra" target="_blank" rel="external">https://github.com/ACRA/acra</a><br>文档介绍：<a href="https://github.com/ACRA/acra/wiki/BasicSetup" target="_blank" rel="external">https://github.com/ACRA/acra/wiki/BasicSetup</a>  </p>
</li>
<li><p>Crashlytics<br>提供丰富的应用崩溃信息日志收集<br>轻量级，丰富，可自定义应用崩溃信息收集器，附有邮件通知<br>项目地址：<a href="http://www.crashlytics.com/" target="_blank" rel="external">http://www.crashlytics.com/</a><br>集成插件：<a href="http://try.crashlytics.com/sdk-android/?utm_source=blog&amp;utm_medium=blog&amp;utm_campaign=Announcing_android_studio_wp&amp;utm_content=CTA_button" target="_blank" rel="external">Android Studio, Eclipse and IntelliJ</a>  </p>
</li>
<li><p>Android Resource Navigator<br>chrome 插件，可以方便的查看 github 上 android 源码工程的 styles.xml 和 themes.xml。主要功能：<br>(1) 快速打开 android styles.xml themes.xml<br>(2) 方便在资源间跳转。styles.xml themes.xml 文件中资源链接跳转，可以方便跳转到某个资源<br>(3) 方便查找某个 style 和 theme。chrome 地址栏输入 arn+tab+搜索内容回车即可<br>(4) 自动下载不同分辨率下的 drawable<br>(5) 通过映射查找那些不是按照固定命名规则命名的 style 和 theme<br>项目地址：<a href="https://github.com/jgilfelt/android-resource-navigator" target="_blank" rel="external">https://github.com/jgilfelt/android-resource-navigator</a><br>在线演示：<a href="https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&amp;gl=GB" target="_blank" rel="external">https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&amp;gl=GB</a>  </p>
</li>
<li><p>android-resource-remover<br>根据 lint 的提示删除项目中无用的资源，减少包的大小<br>项目地址：<a href="https://github.com/KeepSafe/android-resource-remover" target="_blank" rel="external">https://github.com/KeepSafe/android-resource-remover</a>  </p>
</li>
<li><p>Telescope<br>通过手势截图以特定主题发送到特定邮箱地址报告 Bug<br>项目地址：<a href="https://github.com/mattprecious/telescope" target="_blank" rel="external">https://github.com/mattprecious/telescope</a>  </p>
</li>
<li><p>Complete Android Fragment &amp; Activity Lifecycle<br>完整的 Android Fragment/Activity 生命周期图<br>项目地址：<a href="https://github.com/xxv/android-lifecycle" target="_blank" rel="external">https://github.com/xxv/android-lifecycle</a>  </p>
</li>
<li><p>Bugsnag Notifier for Android<br>通过<code>Thread.UncaughtExceptionHandler</code>捕获应用未处理的异常崩溃 Bug 并用 Notification 展示同时上传到后台服务器<br>项目地址：<a href="https://github.com/bugsnag/bugsnag-android" target="_blank" rel="external">https://github.com/bugsnag/bugsnag-android</a><br>文档介绍：<a href="https://github.com/bugsnag/bugsnag-android#installation--setup" target="_blank" rel="external">https://github.com/bugsnag/bugsnag-android#installation--setup</a>  </p>
</li>
<li><p>Material Design Icons<br>Google Material Design 规范中的 Icon<br>项目地址：<a href="https://github.com/google/material-design-icons" target="_blank" rel="external">https://github.com/google/material-design-icons</a>  </p>
</li>
<li><p>scrollscreenshot<br>Android 滚动屏幕自动截图 jar 包，支持纵向、横向滚动截屏拼接<br>项目地址：<a href="https://github.com/PGSSoft/scrollscreenshot" target="_blank" rel="external">https://github.com/PGSSoft/scrollscreenshot</a><br>效果图：<img src="https://github.com/PGSSoft/scrollscreenshot/raw/master/samplehorizontal.png" alt="Renderings">  </p>
</li>
<li><p>droidicon<br>1600+的海量 Icon，包括 750+的 Material Design icons<br>项目地址：<a href="https://github.com/theDazzler/droidicon" target="_blank" rel="external">https://github.com/theDazzler/droidicon</a>  </p>
</li>
<li><p>leakcanary<br>Android 内存泄露检测工具，集成方便，出现泄露后报告直观<br>项目地址：<a href="https://github.com/square/leakcanary" target="_blank" rel="external">https://github.com/square/leakcanary</a><br>效果图：<img src="https://github.com/square/leakcanary/blob/master/assets/screenshot.png" alt="Renderings">  </p>
</li>
<li><p>CacheUtilsLibrary<br>将任何Java Object类型的数据序列化后写入缓存文件，将来使用时读取缓存文件并反序列化成对应Java Object的库<br>项目地址：<a href="https://github.com/westlinkin/CacheUtilsLibrary" target="_blank" rel="external">https://github.com/westlinkin/CacheUtilsLibrary</a></p>
</li>
<li><p>BlockCanary<br>BlockCanary是一个Android平台的一个非侵入式的性能监控组件，应用只需要实现一个抽象类，提供一些该组件需要的上下文环境，就可以在平时使用应用的时候检测主线程上的各种卡慢问题，并通过组件提供的各种信息分析出原因并进行修复。<br>项目地址: <a href="https://github.com/moduth/blockcanary" target="_blank" rel="external">https://github.com/moduth/blockcanary</a>  </p>
</li>
</ol>
<h2 id="第五部分"><a href="#第五部分" class="headerlink" title="第五部分"></a>第五部分</h2><p>主要介绍那些乐于分享并且有一些很不错的开源项目的个人和组织。Follow 大神，深挖大神的项目和 following，你会发现很多。  </p>
<h4 id="一、个人"><a href="#一、个人" class="headerlink" title="一、个人"></a>一、个人</h4><ol>
<li><p>JakeWharton<br>就职于 Square，绝对牛逼的大神，项目主要集中在 Android 版本兼容，ViewPager 及开发工具上<br>Github 地址：<a href="https://github.com/JakeWharton" target="_blank" rel="external">https://github.com/JakeWharton</a><br>代表作：ActionBarSherlock，Android-ViewPagerIndicator，Nine Old Androids，SwipeToDismissNOA，hugo，butterknife，Android-DirectionalViewPager, scalpel<br>pidcat 另外对 square 及其他开源项目有很多贡献<br>主页：<a href="http://jakewharton.com/" target="_blank" rel="external">http://jakewharton.com/</a>  </p>
</li>
<li><p>Chris Banes<br>Github 地址：<a href="https://github.com/chrisbanes" target="_blank" rel="external">https://github.com/chrisbanes</a><br>代表作：ActionBar-PullToRefresh，PhotoView，Android-BitmapCache，Android-PullToRefresh<br>主页：<a href="http://chris.banes.me/" target="_blank" rel="external">http://chris.banes.me/</a>  </p>
</li>
<li><p>Koushik Dutta<br>就职于 ClockworkMod<br>Github 地址：<a href="https://github.com/koush" target="_blank" rel="external">https://github.com/koush</a><br>代表作：Superuser，AndroidAsync，UrlImageViewHelper，ion, 另外对 <a href="https://github.com/CyanogenMod" target="_blank" rel="external">https://github.com/CyanogenMod</a> 的开源项目有很多贡献<br>主页：<a href="http://koush.com/" target="_blank" rel="external">http://koush.com/</a>  </p>
</li>
<li><p>Simon Vig<br>Github 地址：<a href="https://github.com/SimonVT" target="_blank" rel="external">https://github.com/SimonVT</a><br>代表作：android-menudrawer，MessageBar<br>主页：<a href="http://simonvt.net/" target="_blank" rel="external">http://simonvt.net/</a>  </p>
</li>
<li><p>Manuel Peinado<br>Github 地址：<a href="https://github.com/ManuelPeinado" target="_blank" rel="external">https://github.com/ManuelPeinado</a><br>代表作：FadingActionBar，GlassActionBar，RefreshActionItem，QuickReturnHeader  </p>
</li>
<li><p>Emil Sj?lander<br>Github 地址：<a href="https://github.com/emilsjolander" target="_blank" rel="external">https://github.com/emilsjolander</a><br>代表作：StickyListHeaders，sprinkles，android-FlipView<br>主页：<a href="http://emilsjolander.se/" target="_blank" rel="external">http://emilsjolander.se/</a>  </p>
</li>
<li><p>greenrobot<br>Github 地址：<a href="https://github.com/greenrobot" target="_blank" rel="external">https://github.com/greenrobot</a><br>代表作：greenDAO，EventBus<br>主页：<a href="http://greenrobot.de/" target="_blank" rel="external">http://greenrobot.de/</a>  </p>
</li>
<li><p>Jeff Gilfelt<br>Github 地址：<a href="https://github.com/jgilfelt" target="_blank" rel="external">https://github.com/jgilfelt</a><br>代表作：android-mapviewballoons，android-viewbadger，android-actionbarstylegenerator，android-sqlite-asset-helper<br>主页：<a href="http://jeffgilfelt.com" target="_blank" rel="external">http://jeffgilfelt.com</a>  </p>
</li>
<li><p>Romain Guy<br>Android team 成员(2013.10 已离开 Android team，仍在 Google)<br>Github 地址：<a href="https://github.com/romainguy" target="_blank" rel="external">https://github.com/romainguy</a><br>代表作：ViewServer<br>主页：<a href="http://www.curious-creature.org/category/android/" target="_blank" rel="external">http://www.curious-creature.org/category/android/</a><br>個人攝影作品：<a href="http://www.flickr.com/photos/romainguy" target="_blank" rel="external">http://www.flickr.com/photos/romainguy</a>  </p>
</li>
<li><p>sephiroth74<br>就职于 Aviary.com<br>Github 地址：<a href="https://github.com/sephiroth74" target="_blank" rel="external">https://github.com/sephiroth74</a><br>代表作：ImageViewZoom，HorizontalVariableListView，AndroidWheel，purePDF<br>主页：<a href="http://www.sephiroth.it/" target="_blank" rel="external">http://www.sephiroth.it/</a>  </p>
</li>
<li><p>Cyril Mottier<br>Google 开发者专家认证，发布一些 Android 技巧及文章<br>Github 地址：<a href="https://github.com/cyrilmottier" target="_blank" rel="external">https://github.com/cyrilmottier</a><br>代表作：GreenDroid，Polaris<br>主页：<a href="http://cyrilmottier.com/" target="_blank" rel="external">http://cyrilmottier.com/</a>  </p>
</li>
</ol>
<h4 id="二、组织"><a href="#二、组织" class="headerlink" title="二、组织"></a>二、组织</h4><ol>
<li><p>Square<br>有态度有良心的企业，很多不错的分享<br>Github 地址：<a href="https://github.com/square" target="_blank" rel="external">https://github.com/square</a><br>代表作：okhttp、fest-android，android-times-square、picasso、dagger、spoon 等等<br>主页：<a href="http://square.github.io/" target="_blank" rel="external">http://square.github.io/</a>  </p>
</li>
<li><p>Inmite s.r.o.<br>Github 地址：<a href="https://github.com/inmite" target="_blank" rel="external">https://github.com/inmite</a><br>代表作：android-styled-dialogs，android-grid-wichterle，android-selector-chapek<br>主页：<a href="http://www.inmite.eu/" target="_blank" rel="external">http://www.inmite.eu/</a>  </p>
</li>
</ol>
<h4 id="三、博客"><a href="#三、博客" class="headerlink" title="三、博客"></a>三、博客</h4><p><a href="https://github.com/android-cn/android-dev-com" target="_blank" rel="external">部分国外著名 Android 开发者信息</a>  </p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">Android 开源项目分类汇总</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目前包括：&quot;&gt;&lt;a href=&quot;#目前包括：&quot; class=&quot;headerlink&quot; title=&quot;目前包括：&quot;&gt;&lt;/a&gt;目前包括：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E4%B8%AA%E6%80%A7%E5%8C%96%E6%8E%A7%E4%BB%B6view&quot;&gt;Android 开源项目第一篇——个性化控件(View)篇&lt;/a&gt;&lt;br&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;包括&lt;br&gt;&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E4%B8%80listview&quot;&gt;ListView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E4%BA%8Cactionbar&quot;&gt;ActionBar&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E4%B8%89menu&quot;&gt;Menu&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%9B%9Bviewpager-gallery&quot;&gt;ViewPager&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%9B%9Bviewpager-gallery&quot;&gt;Gallery&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E4%BA%94gridview&quot;&gt;GridView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%85%ADimageview&quot;&gt;ImageView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E4%B8%83progressbar&quot;&gt;ProgressBar&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%85%ABtextview&quot;&gt;TextView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E4%B9%9Dscrollview&quot;&gt;ScrollView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%8D%81timeview&quot;&gt;TimeView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%8D%81%E4%B8%80tipview&quot;&gt;TipView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%8D%81%E4%BA%8Cflipview&quot;&gt;FlipView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%8D%81%E4%B8%89colorpickview&quot;&gt;ColorPickView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%8D%81%E5%9B%9Bgraphview&quot;&gt;GraphView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%8D%81%E4%BA%94ui-style&quot;&gt;UI Style&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#十六其他&quot;&gt;其他&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E5%B7%A5%E5%85%B7%E5%BA%93&quot;&gt;Android 开源项目第二篇——工具库篇&lt;/a&gt;&lt;br&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;包括&lt;a href=&quot;https://github.com/Trinea/android-open-project#一依赖注入-di&quot;&gt;依赖注入&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#二图片缓存&quot;&gt;图片缓存&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#三网络请求&quot;&gt;网络请求&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#四数据库-orm-工具包&quot;&gt;数据库 ORM 工具包&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#五android-公共库&quot;&gt;Android 公共库&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#六android-高版本向低版本兼容&quot;&gt;高版本向低版本兼容库&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#七多媒体相关&quot;&gt;多媒体&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#八事件总线订阅者模式&quot;&gt;事件总线&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#九传感器&quot;&gt;传感器&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#十安全&quot;&gt;安全&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#十一插件化&quot;&gt;插件化&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#十二文件&quot;&gt;文件&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#十三其他&quot;&gt;其他&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86-%E4%BC%98%E7%A7%80%E9%A1%B9%E7%9B%AE&quot;&gt;Android 开源项目第三篇——优秀项目篇&lt;/a&gt;&lt;br&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;比较有意思的完整的 Android 项目&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7&quot;&gt;Android 开源项目第四篇——开发及测试工具篇&lt;/a&gt;&lt;br&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;包括&lt;a href=&quot;https://github.com/Trinea/android-open-project#一开发效率工具&quot;&gt;开发效率工具&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#二开发自测相关&quot;&gt;开发自测相关&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#三测试工具&quot;&gt;测试工具&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#四开发及编译环境&quot;&gt;开发及编译环境&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#五其他&quot;&gt;其他&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86&quot;&gt;Android 开源项目第五篇——优秀个人和团体篇&lt;/a&gt;&lt;br&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;乐于分享并且有一些很不错的开源项目的&lt;a href=&quot;https://github.com/Trinea/android-open-project#一个人&quot;&gt;个人&lt;/a&gt;和&lt;a href=&quot;https://github.com/Trinea/android-open-project#二组织&quot;&gt;组织&lt;/a&gt;，包括 JakeWharton、Chris Banes、Koushik Dutta 等大牛&lt;/em&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
      <category term="Trinea" scheme="http://ipcreator.me/tags/Trinea/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Android Libraries Top 100</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Android/3rdLib/gitHub-android-libraries-top-100/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Android/3rdLib/gitHub-android-libraries-top-100/</id>
    <published>2017-03-30T14:24:06.000Z</published>
    <updated>2017-03-30T14:40:16.127Z</updated>
    
    <content type="html"><![CDATA[<p>本项目主要对目前 GitHub 上排名前 100 的 Android 开源库进行简单的介绍, 至于排名完全是根据 GitHub 搜索 Java 语言选择 (Best Match) 得到的结果, 然后过滤了跟 Android 不相关的项目, 所以排名并不具备任何官方效力, 仅供参考学习, 方便初学者快速了解当前一些流行的 Android 开源库.</p>
<a id="more"></a>
<h1 id="GitHub-Android-Libraries-Top-100-简介-1"><a href="#GitHub-Android-Libraries-Top-100-简介-1" class="headerlink" title="GitHub Android Libraries Top 100 简介[1]"></a>GitHub Android Libraries Top 100 简介<sup>[1]<sup></sup></sup></h1><blockquote>
<p>iOS 版本的在此: <a href="https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md" target="_blank" rel="external">https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md</a></p>
</blockquote>
<table>
<thead>
<tr>
<th>项目名称</th>
<th>项目简介</th>
</tr>
</thead>
<tbody>
<tr>
<td>1. <a href="https://github.com/facebook/react-native" target="_blank" rel="external">react-native</a></td>
<td>这个是 Facebook 在 React.js Conf 2015 大会上推出的基于 JavaScript 的开源框架 React Native, 该框架结合了 Web 应用和 Native 应用的优势, 可以使用 JavaScript 来开发 iOS 和 Android 原生应用</td>
</tr>
<tr>
<td>2.<a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">Android-Universal-Image-Loader</a></td>
<td>ImageLoader 是最早开源的 Android 图片缓存库, 强大的缓存机制, 早期被广泛 Android 应用使用, 至今仍然有很多 Android 开发者在使用</td>
</tr>
<tr>
<td>3. <a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a></td>
<td>RxJava 是一个在 Java VM 上使用可观测的序列来组成异步的, 基于事件的程序的库, 简单来说它就是一个实现异步操作的库, RxJava 的优点在于一个词 “简洁”, 使用它就算你程序逻辑有多么复杂, 它依然能够保持简洁易懂</td>
</tr>
<tr>
<td>4. <a href="https://github.com/square/retrofit" target="_blank" rel="external">retrofit</a></td>
<td>Retrofit 是 Square 公司出品的 HTTP 请求库, 同时是 Square 是最早开源项目之一, Retrofit 是目前 Android 最流行的 Http Client 库之一, 目前版本是 Retrofit2.0 Beta4, 越来越多 Android 开发者开始使用这个请求库了</td>
</tr>
<tr>
<td>5. <a href="https://github.com/square/okhttp" target="_blank" rel="external">okhttp</a></td>
<td>OkHttp 是 Square 公司出品的 HTTP 另一个请求库, Google 不推荐人们使用 HttpClient, 可是 HttpURLConnection 实在是太难用了, 因此很多人使用了 OkHttp 来解决这问题, 据说 Android4.4 的源码中可以看到 HttpURLConnection 已经替换成 OkHttp 实现呢</td>
</tr>
<tr>
<td>6. <a href="https://github.com/jfeinstein10/SlidingMenu" target="_blank" rel="external">SlidingMenu(不建议使用)</a></td>
<td>一个侧滑菜单开源库, 在 Google 自己原生态的侧滑菜单 NavigationDrawer 没有出现之前, 这个库就已经被广泛使用, 可是到现在这个库已经被放弃了</td>
</tr>
<tr>
<td>7. <a href="https://github.com/square/picasso" target="_blank" rel="external">picasso</a></td>
<td>Picasso 是 Square 公司出品的一款图片缓存库, 主导者是 JakeWharton 大神</td>
</tr>
<tr>
<td>8. <a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">android-best-practices</a></td>
<td>Android 开发最佳实践, 里面所介绍的经验都是来自于 Futurice 公司 Android 开发者, 介绍内容有 Android 开发规范, 架构, 布局技巧, 以及使用一些有助于快速开发相关工具等等, 非常适合新手去学习</td>
</tr>
<tr>
<td>9. <a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a></td>
<td>EventBus 是 Android 事件管理总线, 使用它可以替带 Android BroadCast, BroadCastReceiver, Handler 在 Activity, Fragment, Service, 线程之间传递消息, 大大简化了事件传递逻辑</td>
</tr>
<tr>
<td>10. <a href="https://github.com/loopj/android-async-http" target="_blank" rel="external">android-async-http</a></td>
<td>Android-Async-Http 是 Android 一款老牌异步请求库, 专门对 Android 在 Apache 的 HttpClient 基础上构建的异步 http 连接, 该库有很多特征, 例如: 库的 size 小, 支持文件上传不需使用第三方库支持, 内部使用线程池来处理并发, 等等</td>
</tr>
<tr>
<td>11. <a href="https://github.com/facebook/fresco" target="_blank" rel="external">fresco</a></td>
<td>Fresco 是 FaceBook 公司出品的一款图片缓存库, Fresco 是一个强大的图片加载组件, 支持加载 Gif 图和 WebP 格式, 支持 Android2.3(API level 9) 及其以上系统, Fresco 中设计了 Image pipeline 和 Drawees 两个模块各施其职, 使得图片完美加载出来, 想知道更多 image pipeline 和 Drawees 有关于它的特性, 可以到它<a href="http://fresco-cn.org/" target="_blank" rel="external">官方平台</a>看介绍</td>
</tr>
<tr>
<td>12. <a href="https://github.com/zxing/zxing" target="_blank" rel="external">zxing</a></td>
<td>ZXing 是二维码领域中名气最大的开源项目, 它提供了多个平台的二维码/条形码扫描解决方案, 拥有扫描快, 识别率高, 使用简单等特点</td>
</tr>
<tr>
<td>13. <a href="https://github.com/square/leakcanary" target="_blank" rel="external">leakcanary</a></td>
<td>LeakCanary 是 Square 公司出的一款检测内存泄露工具, 该工具能帮助你在开发阶段方便的检测出内存泄露的问题, 使用起来非常简单方便</td>
</tr>
<tr>
<td>14. <a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">butterknife</a></td>
<td>由 JakeWharton 大神开发出来的, ButterKnife 是 View 注入框架, 使用它为了简写很多 findViewById 代码, 同时还支持 View 的一些事件处理函数</td>
</tr>
<tr>
<td>15. <a href="https://github.com/PhilJay/MPAndroidChart" target="_blank" rel="external">MPAndroidChart</a></td>
<td>MPAndroidChart 是一款强大的 Android 图表库, 支持各种各样图表显示, 能想到的图表样式这里几乎都有, 图表还支持选择, 拖放和缩放动画效果</td>
</tr>
<tr>
<td>16. <a href="https://github.com/JakeWharton/ActionBarSherlock" target="_blank" rel="external">ActionBarSherlock (不建议使用)</a></td>
<td>ActionBarSherlock 这个库是 JakeWharton 大神开发出来支持 Android3.0 以下版本的, 后来慢慢的 Google 也提供了 AppCompat 库来支持 Android3.0 以下版本使用 ActionBar, 因此作者不建议我们再使用这个库了</td>
</tr>
<tr>
<td>17. <a href="https://github.com/excilys/androidannotations" target="_blank" rel="external">androidannotations</a></td>
<td>AndroidAnnotations 是一个能够让你快速进行 Android 开发的开源框架, 它能让你专注于真正重要的地方, 使代码更加精简, 使项目更加容易维护, 它的目标就是 “Fast Android Development.Easy maintainance”</td>
</tr>
<tr>
<td>18. <a href="https://github.com/JakeWharton/ViewPagerIndicator" target="_blank" rel="external">ViewPagerIndicator</a></td>
<td>由 JakeWharton 大神开发出来的一个 ViewPager 指示器, 使用起来简单方便, 可高度定制, 开发出各种各样动画效果</td>
</tr>
<tr>
<td>19. <a href="https://github.com/bumptech/glide" target="_blank" rel="external">glide</a></td>
<td>Glide 是 Google 员工的开源项目, 广泛应用于 Google 一些 App 上, 在2014年 Google I/O 大会上被推荐使用, Glide 和 Picasso 被人拿来比较研究过, Glide 与 Picasso 有 90% 的相似度, 但在一些细节上还是有点区别的, 各有各优缺点看君选择</td>
</tr>
<tr>
<td>20. <a href="https://github.com/HannahMitt/HomeMirror" target="_blank" rel="external">HomeMirror</a></td>
<td>开发者是由一名程序媛 Hannah Mittelstaedt , HomeMirror 是一款 Android 镜子应用, 目前它能实现日期, 时间, 天气, 生日信息, 事件提醒器, 骑车天气的推荐, 股票信息, XKCD 漫画网站的新帖等等</td>
</tr>
<tr>
<td>21. <a href="https://github.com/chrisbanes/Android-PullToRefresh" target="_blank" rel="external">Android-PullToRefresh(不建议使用)</a></td>
<td>一个强大的拉动刷新开源项目, 支持各种控件下拉刷新, ListView, ViewPager, WebView, ExpandableListView, GridView, ScrollView, Horizontal ScrollView, Fragment 上下左右拉动刷新, 不过现在这个项目已经停止维护更新了, 推荐使用 <a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">Android-Ultra-Pull-To-Refresh</a></td>
</tr>
<tr>
<td>22. <a href="https://github.com/navasmdc/MaterialDesignLibrary" target="_blank" rel="external">MaterialDesignLibrary</a></td>
<td>这个库控件都是遵循了 Google Material Design 设计规范开发出来, 例如有: Flat Button, Rectangle Button, CheckBox, Switch, Progress bar circular indeterminate 等等</td>
</tr>
<tr>
<td>23. <a href="https://github.com/chrisbanes/PhotoView" target="_blank" rel="external">PhotoView</a></td>
<td>PhotoView 是 ImageView 的子类, 支持所有 ImageView 的源生行为, 例如: 支持 Pinch 手势自由缩放, 支持双击放大/还原, 支持平滑滚动等等, 并且非常方便的与 ImageLoader/Picasso 之类的网络图片读取库集成使用, 还方便的与 ViewPager 等同样支持滑动手势的控件集成</td>
</tr>
<tr>
<td>24. <a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">RxAndroid</a></td>
<td>由 JakeWharton 大神主导开发的项目, RxAndroid 是 RxJava 的一个针对 Android 平台的扩展, 主要用于 Android 开发</td>
</tr>
<tr>
<td>25. <a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="external">material-dialogs</a></td>
<td>Material Dialogs 是一个可高度定制易用, 符合 Material Design 风格的 Dialogs, 兼容 Android API8 以上版本, 个人使用感觉它完全可替代 Android 原生那个, 比原生那个更加简单易用</td>
</tr>
<tr>
<td>26.<a href="https://github.com/ksoichiro/Android-ObservableScrollView" target="_blank" rel="external">Android-ObservableScrollView</a></td>
<td>ObservableScrollView 是一款用于在滚动视图中观测滚动事件的 Android 库, 它能够轻而易举地与 Android 5.0 Lollipop 引进的工具栏 (Toolbar) 进行交互, 还可以帮助开发者实现拥有 Material Design 应用视觉体验的界面外观, 支持ListView, ScrollView, WebView, RecyclerView, GridView组件</td>
</tr>
<tr>
<td>27. <a href="https://github.com/Bearded-Hen/Android-Bootstrap" target="_blank" rel="external">Android-Bootstrap</a></td>
<td>Android 版的 Bootstrap, 利用这个库能够实现很多 Bootstrap 样式风格, 之前有学过 Html 的人就知道 Bootstrap 是什么玩意啦</td>
</tr>
<tr>
<td>28. <a href="https://github.com/daimajia/AndroidSwipeLayout" target="_blank" rel="external">AndroidSwipeLayout</a></td>
<td>开发者是代码家, AndroidSwipeLayout 是一个支持ListView, GridView, ViewGroup等等左右上下滑动出操作菜单, 类似 qq 消息列表向左滑动显示出多某条信息的操作菜单</td>
</tr>
<tr>
<td>29. <a href="https://github.com/square/dagger" target="_blank" rel="external">dagger</a></td>
<td>Dagger 是 Square 公司出品的一个针对 Android 和 Java 的快速依赖注入器, 能够有效减少你敲代码量</td>
</tr>
<tr>
<td>30. <a href="https://github.com/nhaarman/ListViewAnimations" target="_blank" rel="external">ListViewAnimations</a></td>
<td>一个轻轻松松给 Android ListView 添加动画效果的库, 支持的动画有: Alpha, SwingRightIn, SwingLeftIn, SwingBottomIn, SwingRightIn and ScaleIn等等, 使用它能很容易就实现帅爆的效果</td>
</tr>
<tr>
<td>31. <a href="https://github.com/astuetz/PagerSlidingTabStrip" target="_blank" rel="external">PagerSlidingTabStrip(不建议使用)</a></td>
<td>PagerSlidingTabStrip 是一个给 Android ViewPager添加上 ViewPager 滑动指示器, 从 GitHub 上面看, 这个库似乎没有人在维护了, 因此不建议使用, 可使用 <a href="https://github.com/ogaclejapan/SmartTabLayout" target="_blank" rel="external">SmartTabLayout</a> 来代替</td>
</tr>
<tr>
<td>32. <a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="external">AndroidViewAnimations</a></td>
<td>开发者是代码家, 这个库实现很多很酷炫的 Android 动画, 动画效果是借鉴 Animate.css 来实现的, 非常酷, 而且这个使用起来也是非常简单</td>
</tr>
<tr>
<td>33. <a href="https://github.com/umano/AndroidSlidingUpPanel" target="_blank" rel="external">AndroidSlidingUpPanel</a></td>
<td>AndroidSlidingUpPanel 是一个上拉面板, 就是向上滑动的时候往上飞出一个显示面板控件, 该库效果在 Google Music, Google Maps and Rdio等 App 应用到</td>
</tr>
<tr>
<td>34. <a href="https://github.com/mikepenz/MaterialDrawer" target="_blank" rel="external">MaterialDrawer</a></td>
<td>MaterialDrawer 是一个类似 Google 官方 NavigationView 侧滑显示控件, 个人认为 NavigationView 并没有 MaterialDrawer 实用, 因为 NavigationView 自由度不是很好, 很多都写死了不可以自由定义布局, 而 MaterialDrawer 能够实现跟 NavigationView 一样的效果, 同时还支持自定义效果, 自由度非常高</td>
</tr>
<tr>
<td>35. <a href="https://github.com/lgvalle/Material-Animations" target="_blank" rel="external">Material-Animations</a></td>
<td>Material-Animations 是一个很好过渡动画库, 可以应用于 Activity 与 Activity 之间的跳转, Fragment 与 Fragment 之间的跳转, 以及各个 View 变化前后的过渡动画</td>
</tr>
<tr>
<td>36. <a href="https://github.com/florent37/MaterialViewPager" target="_blank" rel="external">MaterialViewPager</a></td>
<td>一个简单易用 Material Design 风格的 ViewPager 库</td>
</tr>
<tr>
<td>37. <a href="https://github.com/koush/ion" target="_blank" rel="external">ion</a></td>
<td>ion 是一个让 Android 的网络操作变得极其简单, 支持异步获取和处理JSON, 支持 Android 文件下载 (同时支持下载进度条绑定), 支持安全链接和代理</td>
</tr>
<tr>
<td>38. <a href="https://github.com/facebook/stetho" target="_blank" rel="external">stetho</a></td>
<td>Stetho是 Facebook 出品的一个强大的 Android 调试工具,使用该工具你可以在 Chrome Developer Tools查看App的布局, 网络请求(仅限使用Volley, okhttp的网络请求库), sqlite, preference, 一切都是可视化的操作,无须自己在去使用adb, 也不需要root你的设备</td>
</tr>
<tr>
<td>39. <a href="https://github.com/alibaba/fastjson" target="_blank" rel="external">fastjson</a></td>
<td>Fastjson 是一个 Java 语言编写的高性能功能完善的 JSON 库. 它采用一种“假定有序快速匹配”的算法, 把 JSON Parse的性能提升到极致, 是目前Java语言中最快的JSON库. Fastjson接口简单易用, 已经被广泛使用在缓存序列化, 协议交互, Web输出, Android客户端等多种应用场景</td>
</tr>
<tr>
<td>40. <a href="https://github.com/gabrielemariotti/cardslib" target="_blank" rel="external">cardslib (不建议使用)</a></td>
<td>Cardslib 是早期由 Gabriele Mariotti 开发的一个为开发者方便实现各种 Card UI 的 Android 开源代码库, 后来 Google 官方提供自己封装了 CardView 在 v7 包下, 使用 Google 官方的可以完全替代了这个库, 因此这个也被弃用了</td>
</tr>
<tr>
<td>41. <a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">Android-Ultra-Pull-To-Refresh</a></td>
<td>开发者是廖祜秋, 这个是一个非常强大的下拉刷新库, 继承 ViewGroup 可以包含任何 View, 功能甚至比 SwipeRefreshLayout 强大, 使用起来也非常容易, 还可以自由定制自己的 UI 样式</td>
</tr>
<tr>
<td>42. <a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">greenDAO</a></td>
<td>greenDAO 是一个可以帮助 Android 开发者快速将 Java 对象映射到 SQLite 数据库的表单中的 ORM解决方案, 通过使用一个简单的面向对象 API, 开发者可以对 Java 对象进行存储, 更新, 删除和查询, greenDAO 相对 OrmLite, AndrORM 这两个 ORM 开源库, 性能是最高的</td>
</tr>
<tr>
<td>43. <a href="https://github.com/etsy/AndroidStaggeredGrid" target="_blank" rel="external">AndroidStaggeredGrid</a></td>
<td>AndroidStaggeredGrid 是一个支持多列并且每一行的 item 大小不一, 交错排列的 GridView, 就是实现瀑布流样式效果, 目前该库已经被弃用了, 开发者建议我们使用 Google 官方控件 RecyleView 中的 StaggeredGridLayoutManager 布局来实现瀑布流效果</td>
</tr>
<tr>
<td>44. <a href="https://github.com/square/otto" target="_blank" rel="external">otto</a></td>
<td>Otto 是 Square 公司出的一个事件库 (pub/sub 模式), 用来简化应用程序组件之间的通讯, otto 修改自 Google 的 Guava 库, 专门为 Android 平台进行了优化, 与上面介绍的 EventBus 相比, 两个库各有各的优点, 完全取决于我们自己项目的需求来选择它们哪一个</td>
</tr>
<tr>
<td>45. <a href="https://github.com/wyouflf/xUtils" target="_blank" rel="external">xUtils</a></td>
<td>xUtils 是一个快速开发框架, 里面包含 DbUtils, ViewUtils, HttpUtils, BitmapUtils 四大模块, 可用于快速开发, 支持大文件上传, 拥有更加灵活的 ORM, 最低兼容 Android 2.2</td>
</tr>
<tr>
<td>46. <a href="https://github.com/realm/realm-java" target="_blank" rel="external">realm-java</a></td>
<td>Realm 一个轻量的 Android 版本的数据存储库, 比 Android 原生系统的 SQLite 更加简洁快速对数据进行操作</td>
</tr>
<tr>
<td>47.<a href="https://github.com/android10/Android-CleanArchitecture" target="_blank" rel="external">Android-CleanArchitecture</a></td>
<td>CleanArchitecture 是一个非常典型使用 MVP 架构的项目, 大家如果还没有理解 MVP 架构的可以看看这个项目</td>
</tr>
<tr>
<td>48. <a href="https://github.com/emilsjolander/StickyListHeaders" target="_blank" rel="external">StickyListHeaders</a></td>
<td>StickyListHeaders 是一个实现能够固定在屏幕顶部的ListView Section Header库, 就是当前 section 的 header 固定在屏幕顶部, 当滑动到其他 section 时, 其他 section 的 header 会代替之前的 section 的 header, 固定到屏幕顶部, 类似于 Android4.0 的手机通讯录的效果</td>
</tr>
<tr>
<td>49. <a href="https://github.com/PaoloRotolo/AppIntro" target="_blank" rel="external">AppIntro</a></td>
<td>AppIntro 是一个让人轻松快速搭建漂亮酷炫的引导页库</td>
</tr>
<tr>
<td>50. <a href="https://github.com/pardom/ActiveAndroid" target="_blank" rel="external">ActiveAndroid</a></td>
<td>ActiveAndroid 是采用Rails中的 <a href="http://en.wikipedia.org/wiki/Object-relational_mapping" target="_blank" rel="external">Active Record</a>架构模式设计的适用于 Android 平台的轻量级 ORM 架构, 几乎可以不用写任何 SQL 代码实现快速开发</td>
</tr>
<tr>
<td>51. <a href="https://github.com/mcxiaoke/android-volley" target="_blank" rel="external">android-volley</a></td>
<td>Volley 是谷歌官方开发团队在 2013 年 Google I/O 大会推出的一个新的网络通信框架, 这个框架把 AsyncHttpClient 和 Universal-Image-Loader 的优点集于了一身,既可以像AsyncHttpClient 一样非常简单地进行 HTTP 通信,也可以像 Universal-Image-Loader 一样轻松加载网络上的图片, 这个库并不是官方的, 只是托管同步在 Maven,  官方只提供的 Jar 包</td>
</tr>
<tr>
<td>52. <a href="https://github.com/lucasr/twoway-view" target="_blank" rel="external">twoway-view</a></td>
<td>TwoWayView 是简化 RecyclerView 开发的一个库, 可以在其 Base LayoutManager 基础上构建各种各样的布局, 该库内置了几个常用布局 List, Grid, Staggered Grid,Spannable Grid</td>
</tr>
<tr>
<td>53. <a href="https://github.com/amlcurran/ShowcaseView" target="_blank" rel="external">ShowcaseView</a></td>
<td>ShowcaseView 是一个非常适合用于对用户进行第一次使用进行指导的库,使用起来非常简单还可以自定义样式</td>
</tr>
<tr>
<td>54. <a href="https://github.com/chrisjenx/Calligraphy" target="_blank" rel="external">Calligraphy</a></td>
<td>Calligraphy 是一个用来简化 Android 应用使用自定义字体的类库, 该类库会自动查找应用中的 TextView 并设置其使用的字体</td>
</tr>
<tr>
<td>55. <a href="https://github.com/JakeWharton/NineOldAndroids" target="_blank" rel="external">NineOldAndroids</a></td>
<td>NineOldAndroids 由 JakeWharton 大神开发的一个向下兼容的动画库, 主要是使低于API 11的系统也能够使用 View 的属性动画, 不过现在 JakeWharton 大神已经不推荐使用该库, 而是推荐我们使用官方封装在 Support 库里面的动画</td>
</tr>
<tr>
<td>56. <a href="https://github.com/futuresimple/android-floating-action-button" target="_blank" rel="external">android-floating-action-button</a></td>
<td>FloatingActionButton 是一个悬浮操作按钮, 官方在 Support Design 包下也有封装一个类似这个库效果的 FloatingActionButton, 值得说明的是这个库是早在官方封装之前就存在的, 个人感觉这个库比官方那个更加好用</td>
</tr>
<tr>
<td>57. <a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="external">CircleImageView</a></td>
<td>CircleImageView 是一个轻松帮你实现圆形效果 ImageView 图片库, CircleImageView 是基于 ImageView 扩展出来, 因此它拥有 ImageView 控件所有属性, 简单易用值得你使用的库</td>
</tr>
<tr>
<td>58. <a href="https://github.com/rey5137/material" target="_blank" rel="external">material</a></td>
<td>Material 是将 Material Design 风格控件封装在该库当中, 目前封装有Progress, Button, Switch, Slider, Spinner, Text Field, TabPageIndicator, SnackBar, Dialog, BottomSheetDialog, Dynamic theme</td>
</tr>
<tr>
<td>59. <a href="https://github.com/chrisbanes/ActionBar-PullToRefresh" target="_blank" rel="external">ActionBar-PullToRefresh</a></td>
<td>ActionBar-PullToRefresh 是一个下拉刷新, 下拉刷新时在 ActionBar 出现加载中提示的库</td>
</tr>
<tr>
<td>60. <a href="https://github.com/makovkastar/FloatingActionButton" target="_blank" rel="external">FloatingActionButton</a></td>
<td>又一个悬浮操作按钮库, 该库添加支持监听滑滚动事件, 当向下滑时按钮隐藏, 向上滑时按钮显示, 还有动画效果, 支持监听 ListView, ScrollView, RecylerView</td>
</tr>
<tr>
<td>61. <a href="https://github.com/koush/AndroidAsync" target="_blank" rel="external">AndroidAsync</a></td>
<td>AndroidAsync 是一款基于 NIO 的低端 Android 异步 socket, http (client+server), websocket 和 socket.io 网络通信协议类库</td>
</tr>
<tr>
<td>62. <a href="https://github.com/facebook/rebound" target="_blank" rel="external">rebound</a></td>
<td>Rebound 是 Facebook 推出的一个弹性动画库, 可以让动画看起来真实自然, 像真实世界的物理运动, 带有力的效果, 使用的参数则是 Facebook 的 origami 中使用的</td>
</tr>
<tr>
<td>63. <a href="https://github.com/Trinea/android-common" target="_blank" rel="external">android-common</a></td>
<td>android-common-lib 是 Trinea 大神收集的一些开发通用的缓存, 公共 View 以及一些常用工具类</td>
</tr>
<tr>
<td>64. <a href="https://github.com/traex/RippleEffect" target="_blank" rel="external">RippleEffect</a></td>
<td>RippleEffect 是一个实现在 Android 任何组件点击出现 Material Design 的波纹效果, 向下兼容到 Android API9</td>
</tr>
<tr>
<td>65. <a href="https://github.com/castorflex/SmoothProgressBar" target="_blank" rel="external">SmoothProgressBar</a></td>
<td>SmoothProgressBar 是一个帮你的 App 方便实现可定制, 平滑动画的水平滚动进度条库</td>
</tr>
<tr>
<td>66. <a href="https://github.com/wasabeef/recyclerview-animators" target="_blank" rel="external">recyclerview-animators</a></td>
<td>RecyclerView Animators 是一个对 Recycler 控件的 Item 添加以及删除增加动画效果, 动画效果有Scale, Fade, Flip, Slide 里面各种各样效果</td>
</tr>
<tr>
<td>67. <a href="https://github.com/dmytrodanylyk/circular-progress-button" target="_blank" rel="external">circular-progress-button</a></td>
<td>一个带进度显示的 Button, 效果和动画做的都非常赞</td>
</tr>
<tr>
<td>68. <a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">DroidPlugin</a></td>
<td>DroidPlugin 是 360 手机助手在 Android 系统上实现了一种新的插件机制: 它可以在无需安装, 修改的情况下运行APK文件, 此机制对改进大型APP的架构, 实现多团队协作开发具有一定的好处</td>
</tr>
<tr>
<td>69. <a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">dynamic-load-apk</a></td>
<td>开发者是 singwhatiwanna(任玉刚), 是《Android 开发艺术探索》书籍的作者, 这个是作者联合另两位开发者啸(时之沙)和宋思宇花了几个月时间研究出来的 Apk 动态加载框架, 想了解更多关于这框架可到作者博客看 <a href="http://blog.csdn.net/singwhatiwanna/article/details/39937639" target="_blank" rel="external">这篇文章</a> 有详细介绍</td>
</tr>
<tr>
<td>70. <a href="https://github.com/google/ExoPlayer" target="_blank" rel="external">ExoPlayer</a></td>
<td>ExoPlayer 是Google 开发团队开源出来的一个媒体播放库, 比 Android 框架原生的 MediaPlayer 拥有更多优点支持动态的自适应流 HTTP(DASH) 和 平滑流, 支持高级的HLS特性, 支持自定义和扩治你的使用场景等等</td>
</tr>
<tr>
<td>71. <a href="https://github.com/keyboardsurfer/Crouton" target="_blank" rel="external">Crouton (不建议使用)</a></td>
<td>Crouton 是一个显示提示信息的显示工具类, 可以用来代替 Toast, 默认显示在窗口的顶部, 可以按队列一个接着一个显示, 不过该库已经被弃用, 不推荐使用</td>
</tr>
<tr>
<td>72. <a href="https://github.com/stephanenicolas/robospice" target="_blank" rel="external">robospice</a></td>
<td>RoboSpice 是一个使你建立异步的长时间的运行任务异常轻松的一个网络库，在网络请求，缓存支持，和提供开箱即用的 rest 请求方面尤为强大</td>
</tr>
<tr>
<td>73. <a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">hugo</a></td>
<td>Hugo 是 JakeWharton 大神推出的一个用于打印 Log, hugo 是基于注解被调用的, 引入相关依赖后, 在方法上加上 @DebugLog 即可输出 Log, 使用非常简单</td>
</tr>
<tr>
<td>74. <a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="external">async-http-client</a></td>
<td>AsyncHttpClient 是又一款 Android 异步请求库, 该库支持 WebSocket 协议, 使用起来也比较简单易用</td>
</tr>
<tr>
<td>75. <a href="https://github.com/cymcsg/UltimateRecyclerView" target="_blank" rel="external">UltimateRecyclerView</a></td>
<td>UltimateRecyclerView 是一个功能强大的 RecyclerView(advanced and flexible version of ListView), 包括了下拉刷新, 加载更多, 多种动画, 空数据提示, 拖动排序, 视差处理, 工具栏渐变, 滑动删除, 自定义floating button, 多种刷新效果, scrollbar, sticky header, 多 layout 支持等等元素, 而且使用起来跟 RecyclerView 一样的方便</td>
</tr>
<tr>
<td>76. <a href="https://github.com/rengwuxian/MaterialEditText" target="_blank" rel="external">MaterialEditText</a></td>
<td>MaterialEditText 是就职于 Flipboard 的员工 <a href="https://www.zhihu.com/people/rengwuxian" target="_blank" rel="external">扔物线</a> 开发的, 在 AppCompat v21 中也提供了 Material Design 的控件 EditText, 可是由于比较难用, 没有提供设置颜色的 Api, 于是就产生这个第三方库</td>
</tr>
<tr>
<td>77. <a href="https://github.com/Yalantis/Side-Menu.Android" target="_blank" rel="external">Side-Menu.Android</a></td>
<td>Side Menu 是 <a href="https://yalantis.com/" target="_blank" rel="external">Yalantis</a> 组织开源出来, 该组织因开源出一些动画很棒的开源库为大家所熟知该库是其中一个, 该库是提供翻页动画效果的侧边菜单, 动画体验超赞的</td>
</tr>
<tr>
<td>78. <a href="https://github.com/bauerca/drag-sort-listview" target="_blank" rel="external">drag-sort-listview</a></td>
<td>DragSortListView 是一个可以实现拖动排序, 滑动删除的 listview 控件, 注意的是作者对该库已经放弃维护更新了, 不过感兴趣的人可以去研究一下</td>
</tr>
<tr>
<td>79. <a href="https://github.com/square/android-times-square" target="_blank" rel="external">android-times-square</a></td>
<td>TimesSquare 是 Square 公司出品的一款显示日历选择日期的控件, 可以让用户选择多个日期</td>
</tr>
<tr>
<td>80. <a href="https://github.com/cyrilmottier/GreenDroid" target="_blank" rel="external">GreenDroid(不建议使用)</a></td>
<td>GreenDroid 是一个封装好的 Android UI 界面库, 不过该库已经被弃用了, 不建议使用</td>
</tr>
<tr>
<td>81. <a href="https://github.com/orhanobut/logger" target="_blank" rel="external">logger</a></td>
<td>Logger 是一个简单, 漂亮, 强大 Android 打印日志库</td>
</tr>
<tr>
<td>82. <a href="https://github.com/ACRA/acra" target="_blank" rel="external">acra</a></td>
<td>Acra 是一个能够让 Android 应用自动将崩溃报告以谷歌文档电子表的形式进行发送的库, 旨在当应用发生崩溃或出现错误行为时, 开发者可以获取到相关数据</td>
</tr>
<tr>
<td>83. <a href="https://github.com/ManuelPeinado/FadingActionBar" target="_blank" rel="external">FadingActionBar</a></td>
<td>FadingActionBar 是一个支持 ListView, ScrollView, WebView 向下滚动时逐渐显示 ActionBar 库</td>
</tr>
<tr>
<td>84. <a href="https://github.com/daimajia/AndroidImageSlider" target="_blank" rel="external">AndroidImageSlider</a></td>
<td>AndroidImageSlider 库开发者是代码家, 该库是为 Banner 图片滑动提供多种动画效果, 还可以轻易为 Banner 加载网络图片</td>
</tr>
<tr>
<td>85. <a href="https://github.com/jgilfelt/SystemBarTint" target="_blank" rel="external">SystemBarTint</a></td>
<td>SystemBarTint 是一个实现沉浸式状态栏库, 适用于 Android 系统 4.4 其以上的版本</td>
</tr>
<tr>
<td>86. <a href="https://github.com/SimonVT/android-menudrawer" target="_blank" rel="external">android-menudrawer</a></td>
<td>MenuDrawer 是一款滑出式菜单库, 通过拖动屏幕边缘滑出菜单, 支持屏幕上下左右划出, 支持当前 View 处于上下层, 支持 Windows 边缘, ListView 边缘, ViewPager 变化划出菜单等</td>
</tr>
<tr>
<td>87. <a href="https://github.com/vinc3m1/RoundedImageView" target="_blank" rel="external">RoundedImageView</a></td>
<td>RoundedImageView 一个快速支持图片圆角显示效果的库, 该库特点是能快速加载, 为了提高加载速度, 该库不用创建原始位图的副本, 不使用 clipPath, 不使用 setXfermode 裁剪的位图等方式来实现 ImageView 圆角, 使用也非常简单</td>
</tr>
<tr>
<td>88. <a href="https://github.com/yangfuhai/afinal" target="_blank" rel="external">afinal</a></td>
<td>Afinal 是一个 android 的 sqlite orm 和 ioc 框架, 同时封装了 android 中的 http 框架, 使其更加简单易用, 使用 finalBitmap, 无需考虑 bitmap 在 android 中加载的时候 oom 的问题和快速滑动的时候图片加载位置错位等问题, Afinal 的宗旨是简洁, 快速, 约定大于配置的方式, 尽量一行代码完成所有事情</td>
</tr>
<tr>
<td>89. <a href="https://github.com/johannilsson/android-pulltorefresh" target="_blank" rel="external">android-pulltorefresh(不建议使用)</a></td>
<td>另一个下拉刷新库, 但是该库已经停止维护, 因此不建议使用, 推荐使用 <a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">Android-Ultra-Pull-To-Refresh</a></td>
</tr>
<tr>
<td>90. <a href="https://github.com/BoltsFramework/Bolts-Android" target="_blank" rel="external">Bolts-Android</a></td>
<td>Bolts 是一款底层类库集合, 在后台实现异步操作, 并提供接口反馈当前异步执行的程度 (可以通过接口实现UI进度更新), 最后反馈执行的结果给UI主线程, 与AsyncTask比较: (1)使用的是无大小限制的线程池; (2)任务可组合可级联,防止了代码耦合</td>
</tr>
<tr>
<td>91. <a href="https://github.com/daimajia/NumberProgressBar" target="_blank" rel="external">NumberProgressBar</a></td>
<td>NumberProgressBar 开发者是代码家, 这是一个带简约性感数字显示的进度条库, 使用非常简单方便</td>
</tr>
<tr>
<td>92. <a href="https://github.com/ikew0ng/SwipeBackLayout" target="_blank" rel="external">SwipeBackLayout</a></td>
<td>SwipeBackLayout 是一个支持屏幕上下左右滑动返回上层 Activity, 关闭当前 Activity, 类似简书 App</td>
</tr>
<tr>
<td>93. <a href="https://github.com/koral--/android-gif-drawable" target="_blank" rel="external">android-gif-drawable</a></td>
<td>一个支持 gif 显示的 view, 用 jni 实现的, 编译生成 so 库后直接 xml 定义 view 即可, 简单易用</td>
</tr>
<tr>
<td>94. <a href="https://github.com/yixia/VitamioBundle" target="_blank" rel="external">VitamioBundle</a></td>
<td>Vitamio 是一款 Android 与 iOS 平台上的全能多媒体开发框架, 特点：(1) 全面支持硬件解码与 GPU 渲染, (2) 能够流畅播放 720P 甚至 1080P 高清 MKV, FLV, MP4, MOV, TS, RMVB 等常见格式的视频, (3) 在 Android 与 iOS 上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议, 包括点播与直播</td>
</tr>
<tr>
<td>95. <a href="https://github.com/ogaclejapan/SmartTabLayout" target="_blank" rel="external">SmartTabLayout</a></td>
<td>SmartTabLayout 是一个自定义的 Tab title strip, 基于 Google Samples 中的 android-SlidingTabBasic 项目, 滑动时 Indicator 可平滑过渡</td>
</tr>
<tr>
<td>96. <a href="https://github.com/Yalantis/uCrop" target="_blank" rel="external">uCrop</a></td>
<td>uCrop 是<a href="https://yalantis.com/" target="_blank" rel="external">Yalantis</a> 组织开源的图片裁剪库, 支持缩放, 旋转图片, 支持各种比例的裁剪框, 非常强大的一个图片裁剪库</td>
</tr>
<tr>
<td>97. <a href="https://github.com/jdamcd/android-crop" target="_blank" rel="external">android-crop</a></td>
<td>又一个图片裁剪库, 向下兼容到 Api 10, 个人感觉这个库并没有比上面介绍的 uCrop 强大</td>
</tr>
<tr>
<td>98. <a href="https://github.com/Prototik/HoloEverywhere" target="_blank" rel="external">HoloEveryWhere</a></td>
<td>HoloEveryWhere 是一套 Android 开发库, 提供了全套 Holo Style 控件, 它的外观与功能和标准 Holo Style 控件基本相同, 唯一不同的是它可以运行在低于 4.0 版本的 Android 系统上</td>
</tr>
<tr>
<td>99. <a href="https://github.com/81813780/AVLoadingIndicatorView" target="_blank" rel="external">AVLoadingIndicatorView</a></td>
<td>AVLoadingIndicatorView 库含有各种各样漂亮的加载动画效果, 使用起来也非常简单, 和平时使用 ProgressBar 一样</td>
</tr>
<tr>
<td>00. <a href="https://github.com/pedant/sweet-alert-dialog" target="_blank" rel="external">sweet-alert-dialog</a></td>
<td>Android 版的 SweetAlert, 清新文艺, 快意灵动的甜心弹框, 灵感来源于 JS 版 <a href="http://t4t5.github.io/sweetalert/" target="_blank" rel="external">SweetAlert</a></td>
</tr>
</tbody>
</table>
<h2 id="粗计"><a href="#粗计" class="headerlink" title="粗计"></a>粗计</h2><h4 id="Square-公司占有-7-席"><a href="#Square-公司占有-7-席" class="headerlink" title="Square 公司占有 7 席"></a>Square 公司占有 7 席</h4><table>
<thead>
<tr>
<th>项目名称</th>
<th>排名</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit</a></td>
<td>4</td>
</tr>
<tr>
<td><a href="https://github.com/square/okhttp" target="_blank" rel="external">OkHttp</a></td>
<td>5</td>
</tr>
<tr>
<td><a href="https://github.com/square/picasso" target="_blank" rel="external">Picasso</a></td>
<td>7</td>
</tr>
<tr>
<td><a href="https://github.com/square/leakcanary" target="_blank" rel="external">LeakCanary</a></td>
<td>13</td>
</tr>
<tr>
<td><a href="https://github.com/square/dagger" target="_blank" rel="external">Dagger</a></td>
<td>29</td>
</tr>
<tr>
<td><a href="https://github.com/square/otto" target="_blank" rel="external">Otto</a></td>
<td>44</td>
</tr>
<tr>
<td><a href="https://github.com/square/android-times-square" target="_blank" rel="external">TimesSquare</a></td>
<td>79</td>
</tr>
</tbody>
</table>
<h4 id="FaceBook-公司占有-4-席"><a href="#FaceBook-公司占有-4-席" class="headerlink" title="FaceBook 公司占有 4 席"></a>FaceBook 公司占有 4 席</h4><table>
<thead>
<tr>
<th>项目名称</th>
<th>排名</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/facebook/react-native" target="_blank" rel="external">React Native</a></td>
<td>1</td>
</tr>
<tr>
<td><a href="https://github.com/facebook/fresco" target="_blank" rel="external">Fresco</a></td>
<td>11</td>
</tr>
<tr>
<td><a href="https://github.com/facebook/stetho" target="_blank" rel="external">Stetho</a></td>
<td>38</td>
</tr>
<tr>
<td><a href="https://github.com/facebook/rebound" target="_blank" rel="external">Rebound</a></td>
<td>62</td>
</tr>
</tbody>
</table>
<h4 id="JakeWharton-大神占有-5-席"><a href="#JakeWharton-大神占有-5-席" class="headerlink" title="JakeWharton 大神占有 5 席"></a>JakeWharton 大神占有 5 席</h4><table>
<thead>
<tr>
<th>项目名称</th>
<th>排名</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">Butter Knife</a></td>
<td>14</td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/ActionBarSherlock" target="_blank" rel="external">ActionBarSherlock</a></td>
<td>16</td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/ViewPagerIndicator" target="_blank" rel="external">ViewPagerIndicator</a></td>
<td>18</td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/NineOldAndroids" target="_blank" rel="external">NineOldAndroids</a></td>
<td>55</td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">Hugo</a></td>
<td>73</td>
</tr>
</tbody>
</table>
<h4 id="代码家大神占有-4-席"><a href="#代码家大神占有-4-席" class="headerlink" title="代码家大神占有 4 席"></a>代码家大神占有 4 席</h4><table>
<thead>
<tr>
<th>项目名称</th>
<th>排名</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/daimajia/AndroidSwipeLayout" target="_blank" rel="external">AndroidSwipeLayout</a></td>
<td>28</td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="external">AndroidViewAnimations</a></td>
<td>32</td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/AndroidImageSlider" target="_blank" rel="external">AndroidImageSlide</a></td>
<td>84</td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/NumberProgressBar" target="_blank" rel="external">NumberProgressBar</a></td>
<td>91</td>
</tr>
</tbody>
</table>
<h2 id="Android-学习资料收集-2"><a href="#Android-学习资料收集-2" class="headerlink" title="Android 学习资料收集[2]"></a>Android 学习资料收集<sup>[2]<sup></sup></sup></h2><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><table>
<thead>
<tr>
<th>书籍名称</th>
<th>推荐理由</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.amazon.cn/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3-%E5%9F%83%E5%8F%B2%E5%B0%94/dp/B0011F7WU4/ref=sr_1_1?ie=UTF8&amp;qid=1428138267&amp;sr=8-1&amp;keywords=java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3" target="_blank" rel="external">Thinking In Java 中文版</a></td>
<td>学习 Android 开发, 首先需要 Java 基础, 这里推荐 Thinking In Java, Thinking In Java 是 Java 的经典书籍, 是学习 Java 语言必备书籍</td>
</tr>
<tr>
<td><a href="http://www.amazon.cn/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81-Android-%E9%83%AD%E9%9C%96/dp/B00LVHTI9U/ref=sr_1_1?ie=UTF8&amp;qid=1428138432&amp;sr=8-1&amp;keywords=%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E2%80%94%E2%80%94android+%E9%83%AD%E9%9C%96" target="_blank" rel="external">第一行代码</a></td>
<td>郭霖大神的杰作, 郭神在CSDN中的博客文章非常不错, 书我看了, 非常适合新手, 里面的内容非常棒, 建议结合郭神博客文章一起来学习</td>
</tr>
<tr>
<td><a href="http://item.jd.com/11689014.html" target="_blank" rel="external">疯狂Android讲义第三版</a></td>
<td>作者是李刚, 这本书是基于 Android 5.0 来讲的, 我看过第二版, 这本书给我第一感觉就是很厚, 但里面内容写的还是很详细的, 代码很多, 可以跟着代码一步步敲</td>
</tr>
<tr>
<td><a href="http://www.amazon.cn/Android%E7%BE%A4%E8%8B%B1%E4%BC%A0-%E5%BE%90%E5%AE%9C%E7%94%9F/dp/B01481RAA4/ref=sr_1_1?m=A1AJ19PSB66TGU&amp;s=books&amp;ie=UTF8&amp;qid=1442198757&amp;sr=1-1&amp;keywords=android%E7%BE%A4%E8%8B%B1%E4%BC%A0" target="_blank" rel="external">Android群英传</a></td>
<td>本书作者 @Tomcat 的猫, 曾就职于上海 TCL 通讯, 从事 Alcatel(阿尔卡特) Android 手机系统的定制工作, 活跃于 CSDN, 目前就职于上海沪江网 Android 开发部RD项目组, 负责沪江 App 的功能预研</td>
</tr>
<tr>
<td><a href="http://product.china-pub.com/4806147" target="_blank" rel="external">Android开发艺术探索</a></td>
<td>由@任玉刚Coder所著, 是一本 Android 进阶类书籍, 采用理论, 源码和实践相结合的方式来阐述高水准的 Android 应用开发要点. 本书从三个方面来组织内容: 第一, 介绍 Android 开发者不容易掌握的一些知识点: 第二,结合Android源代码和应用层开发过程, 融会贯通, 介绍一些比较深入的知识点: 第三, 介绍一些核心技术和Android的性能优化思想.</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/26649050/" target="_blank" rel="external">App 研发录</a></td>
<td>本书作者是包建强, 本书是作者多年 App 开发的经验总结, 从 App 架构的角度, 重点总结了 Android 应用开发中常见的实用技巧和疑难问题解决方法, 为打造高质量 App 提供有价值的实践指导, 迅速提升应用开发能力和解决疑难问题的能力. 这本书非常有利于 Android 开发者进阶.</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/26644935/" target="_blank" rel="external">Android 设计模式源码分析</a></td>
<td>本书作者是开发技术前线创立者之一 Mr.Simple, 该书从 Android 源码的角度由浅入深地剖析设计模式的运用, 让工程师们把设计与模式重视起来, 提升自己的设计能力与代码质量</td>
</tr>
</tbody>
</table>
<h2 id="开发环境-工具"><a href="#开发环境-工具" class="headerlink" title="开发环境/工具"></a>开发环境/工具</h2><p>(附上: 由 <a href="http://weibo.com/234959219" target="_blank" rel="external">@脉脉不得语</a> 收集维护超多开发工具下载地址 <a href="https://github.com/inferjay/AndroidDevTools" target="_blank" rel="external">AndroidDevTools</a>, 后五个工具资料在 <a href="http://stormzhang.com/" target="_blank" rel="external">stormzhang</a> 博客中找到的,<a href="http://stormzhang.com/android/2015/05/26/android-tools/" target="_blank" rel="external">地址</a>)</p>
<table>
<thead>
<tr>
<th>环境/工具</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://developer.android.com/sdk/index.html" target="_blank" rel="external">Android Studio</a></td>
<td>这个开发工具上手需要一定的时间, 自从 Google 推出1.0正式版, 这个工具一直火爆, 谷歌也不停更新维护, 性能逐渐稳定提高, 目前 github 上面的绝大多数开源项目都是使用 Android Studio 工具, 这就是开发 Android 必须掌握使用的工具, 如果还在使用 Eclipse 开发 Android 的童鞋们, 赶紧换成 AS 开发吧</td>
</tr>
<tr>
<td><a href="https://www.genymotion.com/#!/download" target="_blank" rel="external">Genymotion</a></td>
<td>强大好用高性能的 Android 模拟器, 自带的那个模拟器简直不忍直视, 启动超慢的, 跟这个没法比, 无论你是用 Eclipse 还是 Android Studio 里面都有 Genymotion 插件</td>
</tr>
<tr>
<td><a href="https://github.com/skylot/jadx" target="_blank" rel="external">jadx</a></td>
<td>一个 Android 反编译神器, 不同于常见的 <a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="external">dex2jar</a>, 这个反编译器生成代码的 try/catch 次数更少, View也不再是数字 id 了, 可读性更高</td>
</tr>
<tr>
<td><a href="https://github.com/importre/android-selector-intellij-plugin" target="_blank" rel="external">android-selector</a></td>
<td>可以根据指定颜色生成 Selector Drawable 的插件</td>
</tr>
<tr>
<td><a href="https://github.com/ligi/GradleDependenciesHelperPlugin" target="_blank" rel="external">GradleDependenciesHelperPlugin</a></td>
<td>Gradle 依赖自动补全插件</td>
</tr>
<tr>
<td><a href="http://blog.avlyun.com/show/%E3%80%8Asv%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97%E3%80%8B/" target="_blank" rel="external">Smali Viewer</a></td>
<td>sv 是一款免费 APK 分析软件, 对你感兴趣的 APP 分析看看它们都用了些什么, 对你学习借鉴有一定帮助</td>
</tr>
<tr>
<td><a href="https://github.com/dmytrodanylyk/folding-plugin" target="_blank" rel="external">folding-plugin</a></td>
<td>layout 文件夹里的布局文件一般很长很长没有目录, 这个插件就可以把 layout 分好层级结构, 类似 src 下目录结构</td>
</tr>
<tr>
<td><a href="https://github.com/Vektah/CodeGlance" target="_blank" rel="external">CodeGlance</a></td>
<td>在编辑代码最右侧, 显示一块代码小地图</td>
</tr>
<tr>
<td><a href="https://plugins.jetbrains.com/plugin/?idea&amp;id=4509" target="_blank" rel="external">Statistic</a></td>
<td>统计整个项目行数的插件, 这可表示我们日日夜夜辛辛苦苦必备插件</td>
</tr>
<tr>
<td><a href="https://github.com/nicoulaj/idea-markdown" target="_blank" rel="external">idea-markdown</a></td>
<td>在 AS 中编写 Markdown 文件, 可以直接预览网页显示效果, 对于你经常编写 Markdown 文件的你值得拥有这个插件</td>
</tr>
<tr>
<td><a href="http://facebook.github.io/stetho/" target="_blank" rel="external">Stetho</a></td>
<td>Stetho 是 Facebook 出品的一个强大的 Android 调试工具,使用该工具你可以在 Chrome Developer Tools 查看 App 的布局, 网络请求(仅限使用 Volley, okhttp 的网络请求库), sqlite, preference, 一切都是可视化的操作,无须自己在去使用 adb, 也不需要 root 你的设备</td>
</tr>
<tr>
<td><a href="https://github.com/google/android-classyshark" target="_blank" rel="external">ClassyShark</a></td>
<td>ClassyShark 是 Google 发布的一款可以查看 Android 可执行文件的浏览工具, 支持.dex, .aar, .so, .apk, .jar, .class, .xml 等文件格式, 分析里面的内容包括 classes.dex 文件, 包方法数量, 类, 字符串, 使用的 NativeLibrary 等</td>
</tr>
<tr>
<td><a href="https://github.com/pedrovgs/AndroidWiFiADB" target="_blank" rel="external">AndroidWiFiADB</a></td>
<td>使用 WiFi 连接而不需要 USB 连接 Android 设备达到安装, 运行, 调试应用的目的</td>
</tr>
<tr>
<td><a href="https://github.com/jshiell/checkstyle-idea" target="_blank" rel="external">checkstyle-idea</a></td>
<td>Checkstyle-idea 是一款检查自己写的代码是否符合规范的插件, 该插件是根据 checkstyle.xml 文件来检查的, checkstyle.xml 文件可以由自己自己定义, 也可以使用一些大公司定义的规范, 如果不懂得如何定义, 可以查看 <a href="http://checkstyle.sourceforge.net/checks.html" target="_blank" rel="external">官方文档</a>, 该插件的详细介绍以及使用, 可以看一下咕咚大侠写的 <a href="http://gudong.name/2016/04/07/checkstyle.html" target="_blank" rel="external">文章</a></td>
</tr>
<tr>
<td><a href="https://github.com/Skykai521/ECTranslation" target="_blank" rel="external">ECTranslation</a></td>
<td>ECTranslation 是 Android Studio 开发工具的一个翻译插件, 可以将英文翻译为中文, 英语基础差的童鞋装上它就可以轻松阅读 Android 源码啦</td>
</tr>
<tr>
<td><a href="https://plugins.jetbrains.com/plugin/8076?pr=androidstudio" target="_blank" rel="external">Android Methods Count</a></td>
<td>统计 Android 依赖库中方法的总个数, 避免应用方法数超过 65K 问题</td>
</tr>
<tr>
<td><a href="https://github.com/westlinkin/AndroidLocalizationer" target="_blank" rel="external">AndroidLocalizationer</a></td>
<td>可用于将项目中的 string 资源自动翻译为其他语言的插件, 其翻译支持使用 Microsoft Translator 或 Google Translation</td>
</tr>
<tr>
<td><a href="https://github.com/avast/android-butterknife-zelezny" target="_blank" rel="external">ButterKnife Zelezny</a></td>
<td>ButterKnife 生成器, 使用起来非常简单方便, 为你简写了很多 findViewId 代码, 如果你不了解 ButterKnife 的可以到<a href="http://stormzhang.com/openandroid/android/2014/01/12/android-butterknife/" target="_blank" rel="external">这里</a>看看</td>
</tr>
<tr>
<td><a href="https://github.com/inmite/android-selector-chapek" target="_blank" rel="external">SelectorChapek</a></td>
<td>设计师给我们提供好了各种资源, 每个按钮都要写一个selector是不是很麻烦? 这么这个插件就为解决这个问题而生, 你只需要做的是告诉设计师们按照规范命名就好了, 其他一键搞定</td>
</tr>
<tr>
<td><a href="https://github.com/zzz40500/GsonFormat" target="_blank" rel="external">GsonFormat</a></td>
<td>现在大多数服务端 api 都以 json 数据格式返回, 而客户端需要根据 api 接口生成相应的实体类, 这个插件把这个过程自动化了, 赶紧使用起来吧</td>
</tr>
<tr>
<td><a href="https://github.com/mcharmas/android-parcelable-intellij-plugin" target="_blank" rel="external">ParcelableGenerator</a></td>
<td>Android中的序列化有两种方式, 分别是实现 Serializable 接口和 Parcelable 接口, 但在 Android 中是推荐使用 Parcelable, 只不过我们这种方式要比Serializable方式要繁琐, 那么有了这个插件一切就ok了</td>
</tr>
<tr>
<td><a href="https://github.com/square/leakcanary" target="_blank" rel="external">LeakCanary</a></td>
<td>良心企业 Square 最近刚开源的一个非常有用的工具, 强烈推荐, 帮助你在开发阶段方便的检测出内存泄露的问题, 使用起来更简单方便, 而且我们团队第一时间使用帮助我们发现了不少问题, 英文不好的这里有雷锋同志翻译的中文版 <a href="http://www.liaohuqiu.net/cn/posts/leak-canary-read-me/" target="_blank" rel="external">LeakCanary 中文使用说明</a></td>
</tr>
<tr>
<td><a href="https://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/" target="_blank" rel="external">更多</a></td>
<td>该作者收集整理了 40 个插件, 可以说是史上最全的了</td>
</tr>
</tbody>
</table>
<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><table>
<thead>
<tr>
<th>博客地址</th>
<th>博主信息</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://android-developers.blogspot.com/" target="_blank" rel="external">Android Developers Blog</a></td>
<td>Android官网博客, 在上面可以关注 Android 最新的进展与最权威的博客(需翻墙)</td>
</tr>
<tr>
<td><a href="http://stormzhang.com/" target="_blank" rel="external">stormzhang</a></td>
<td>博主是上海薄荷科技开发主管, 他的博客分享了他从编程白痴到自学 Android 一路走过的经验, 写了一篇 <a href="http://stormzhang.com/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">Android学习之路</a> 帮助了无数人, 里面还有很多好的文章非常适合新手入门, 并且是微信公众号「AndroidDeveloper」的运营者, 可以算是 Android 界最有影响力的公众号之一了, 强烈推荐关注</td>
</tr>
<tr>
<td><a href="http://hukai.me/" target="_blank" rel="external">胡凯</a></td>
<td>目前就职于腾讯上海从事 Android 开发的工作, 发起 Google Android 官方培训课程中文版翻译, 这课程是学习 Android 应用开发的绝佳资料</td>
</tr>
<tr>
<td><a href="http://www.trinea.cn/" target="_blank" rel="external">Trinea</a></td>
<td>目前在滴滴负责 Android 客户端技术, 他是开源库项目收集达人, 你想要的开源库<a href="https://github.com/Trinea" target="_blank" rel="external">上面</a>都有, 并且发起 Android 开源项目源码解析, 在使用开源库的同时也可以知道其中原理, 大家可以去关注一下, <a href="http://p.codekk.com" target="_blank" rel="external">地址</a></td>
</tr>
<tr>
<td><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">郭霖</a></td>
<td>博主郭霖是大神, 人人都称”郭神”, 是第一行代码的作者, 博主在 CSDN 上所写的文章都非常值得学习</td>
</tr>
<tr>
<td><a href="http://blog.daimajia.com/" target="_blank" rel="external">代码家</a></td>
<td>90后 Android 大神, 称作库达人, 博主收集了很多 Android 开源库, 博主自己也做了很多开源库, 非常值得学习</td>
</tr>
<tr>
<td><a href="http://www.lightskystreet.com/" target="_blank" rel="external">light_sky</a></td>
<td>Android 开发工程师, 目前在北京工作. Google big fan, 热爱开源, 热爱分享, 活跃于 GitHub, G+, Twitter, 捕捉Android最新资讯和技术, ViewPagerIndicator 开源项目分析者</td>
</tr>
<tr>
<td><a href="http://blog.csdn.net/lmj623565791/" target="_blank" rel="external">张鸿洋</a></td>
<td>张鴻洋是 CSDN 博客专家, 博主在 CSDN 所发布的每一篇文章都是干货, 都很值得大家去学习</td>
</tr>
<tr>
<td><a href="http://blog.csdn.net/xyz_lmn" target="_blank" rel="external">张兴业</a></td>
<td>张兴业同样也是 CSDN 博客专家, 博主专注移动互联网开发, 关注移动支付业务</td>
</tr>
<tr>
<td><a href="http://blog.csdn.net/lzyzsd/" target="_blank" rel="external">hi大头鬼hi</a></td>
<td>hi大头鬼hi 是阿里巴巴集团的一名 Android 工程师, 擅长 Android, RxJava, RxAndroid, ReactNative, Node.js, 大前端, 可谓是全栈工程师, 如果你对 RxJava 技术感兴趣, 不妨到他的博客看看, 他写了一系列有关 RxJava 的介绍</td>
</tr>
<tr>
<td><a href="https://github.com/android-cn/android-dev-cn" target="_blank" rel="external">更多</a></td>
<td>这里面收集了很多国内外开发者的信息, 大家可以去看看</td>
</tr>
</tbody>
</table>
<h2 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h2><table>
<thead>
<tr>
<th>名称</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://stackoverflow.com/" target="_blank" rel="external">StackOverFlow</a></td>
<td>IT 界的问答社区, 你开发当中所遇到的问题基本上都能在这里能寻找到你想要的答案</td>
</tr>
<tr>
<td><a href="https://segmentfault.com/t/android" target="_blank" rel="external">SegmentFault</a></td>
<td>SegmentFault 是一个专注于解决编程问题, 提高开发技能的社区</td>
</tr>
<tr>
<td><a href="http://blog.csdn.net/mobile/newest.html" target="_blank" rel="external">CSDN</a></td>
<td>CSDN 是全球最大中文IT技术社区</td>
</tr>
<tr>
<td><a href="http://gold.xitu.io/explore/android" target="_blank" rel="external">稀土掘金</a></td>
<td>高质量的技术分享社区</td>
</tr>
<tr>
<td><a href="http://chinagdg.org/" target="_blank" rel="external">谷歌开发者社区(GDG)</a></td>
<td>GDG 是 Google Developer Groups 的缩写, 中文名称是谷歌开发者社区</td>
</tr>
</tbody>
</table>
<h2 id="开源项目学习"><a href="#开源项目学习" class="headerlink" title="开源项目学习"></a>开源项目学习</h2><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/google/iosched" target="_blank" rel="external">Google I/O 2014</a></td>
<td>Google I/O Android App 使用了当时最新推出的 Material Design 设计</td>
</tr>
<tr>
<td><a href="https://github.com/googlesamples/android-UniversalMusicPlayer" target="_blank" rel="external">Google play music</a></td>
<td>一个跨多个平台音乐播放器</td>
</tr>
<tr>
<td><a href="https://github.com/google/santa-tracker-android?utm_source=www.race604.com" target="_blank" rel="external">Google Santa Tracker for Android</a></td>
<td>Google 开源的一个儿童教育和娱乐的 App</td>
</tr>
<tr>
<td><a href="https://github.com/pockethub/PocketHub" target="_blank" rel="external">github客户端</a></td>
<td>开源者 github 团队, 支持项目的 lssues 和 Gists 并集成了新闻 feed 以便及时获取来自组织好友和资料库的更新信息, 还提供了一个用于快速访问你创建,监控以及发布 issue 面板, 可查看并将问题加到收藏夹</td>
</tr>
<tr>
<td><a href="https://github.com/klinker24/Talon-for-Twitter" target="_blank" rel="external">Talon-for-Twitter</a></td>
<td>一个完整版 Twitter 第三方客户端, 属于顶级水平, 而且在源代码 100% 开源, 学习资源让你取之不尽</td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/AnimeTaste" target="_blank" rel="external">Anime Taste</a></td>
<td>开发者是代码家为 AnimeTaste 全球动画精选开发的 Android 客户端, 国内很少见的精彩而且开源的 APP, 获得豌豆荚110期设计奖</td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/EverMemo" target="_blank" rel="external">EverMemo</a></td>
<td>开发者是代码家, EverMemo 是一款让你快速记录与分享灵感的随身便签, 极简的界面与卡片式布局, 让你记录与查找便签更有效率</td>
</tr>
<tr>
<td><a href="https://github.com/stormzhang/9GAG" target="_blank" rel="external">9GAG</a></td>
<td>开发者是 stormzhang 博主,这个开源项目教你使用 Studio, Gradle 以及一些流行的开源库快速开发一个不错的 Android 客户端</td>
</tr>
<tr>
<td><a href="https://github.com/MiCode/Notes" target="_blank" rel="external">MIUI 便签</a></td>
<td>MiCode 便签是小米便签的社区开源版, 由 MIUI 团队（ww.miui.com）发起并贡献第一批代码, 遵循 NOTICE 文件所描述的开源协议</td>
</tr>
<tr>
<td><a href="https://github.com/drakeet/Seashell-app" target="_blank" rel="external">贝壳单词</a></td>
<td>开发者是许晓峰(Drakeet), 获得豌豆荚设计奖, 这个是初期版本, 新版没有开源, 但是在博主的博客当中将一些新版的内容都剥离出来写成了文章,可以去学习一下</td>
</tr>
<tr>
<td><a href="https://github.com/romannurik/muzei" target="_blank" rel="external">Muzei Live Wallpaper</a></td>
<td>开发者是 Ian Lake , 就职于 Google, 这款是定时更换桌面精美壁纸 App</td>
</tr>
<tr>
<td><a href="https://github.com/qii/weiciyuan" target="_blank" rel="external">四次元-新浪微博客户端</a></td>
<td>一个仿新浪微博客户端 App, 基本都含有新浪微博的功能, 开源团队写了一份 wiki 文档, 可以去学习一下该 App 是如何实现的</td>
</tr>
<tr>
<td><a href="https://github.com/bxbxbai/ZhuanLan" target="_blank" rel="external">知乎专栏</a></td>
<td>开发者是白瓦力, 项目结构清晰, 代码分包合理, 很棒. 很适合新手去学习如何搭建一个 App 结构, 熟悉开发一个完整 App 的流程</td>
</tr>
<tr>
<td><a href="https://github.com/eoecn/android-app" target="_blank" rel="external">eoe 客户端</a></td>
<td>eoe 社区Android客户端</td>
</tr>
<tr>
<td><a href="http://git.oschina.net/oschina/android-app" target="_blank" rel="external">oschina</a></td>
<td>开源中国社区 Android 客户端, 此开源的是 v1 版本, v2 版本将在 2015 年年中开源</td>
</tr>
<tr>
<td><a href="https://github.com/kyze8439690/v2ex-daily-android" target="_blank" rel="external">v2ex</a></td>
<td>开发者是<a href="http://yanghui.name/about/" target="_blank" rel="external">杨辉</a>, 这个是 v2ex Android 第三方客户端</td>
</tr>
<tr>
<td><a href="https://github.com/chrislacy/TweetLanes" target="_blank" rel="external">Tweet Lanes</a></td>
<td>功能比较完整的 Twitter 客户端</td>
</tr>
<tr>
<td><a href="https://github.com/mvarnagiris/financius-public" target="_blank" rel="external">Financius</a></td>
<td>一款简单易用个人理财 Android 程序</td>
</tr>
<tr>
<td><a href="https://coding.net/u/coding/p/Coding-Android/git" target="_blank" rel="external">Coding</a></td>
<td>Coding 类似于 github 一个代码托管平台, 这个是 Coding 的 Android 版客户端</td>
</tr>
<tr>
<td><a href="https://github.com/zxing/zxing" target="_blank" rel="external">ZXing</a></td>
<td>二维码扫描工具,市场上许多应用的二维码扫描工具都是从这个修改得到的</td>
</tr>
<tr>
<td><a href="https://github.com/chrisbanes/photup" target="_blank" rel="external">photup</a></td>
<td>编辑机批量上传照片到 facebook 上,代码分包合理,很棒,不过这个项目依赖的开源项目比较多, 比较难编译</td>
</tr>
<tr>
<td><a href="https://github.com/ginatrapani/todo.txt-android" target="_blank" rel="external">todo.txt-android</a></td>
<td>todo.txt 官方 Android 应用, 一个极简的将待办事件记录在 .txt 文件中</td>
</tr>
<tr>
<td><a href="https://github.com/JayFang1993/ScanBook" target="_blank" rel="external">扫扫图书</a></td>
<td>一个让你懂得如何去选择一本书的 APP, 具有扫描搜索查询图书的信息功能</td>
</tr>
<tr>
<td><a href="https://github.com/tvbarthel/ChaseWhisplyProject" target="_blank" rel="external">ChaseWhisplyProject</a></td>
<td>开启摄像头在你所在位置寻找鬼魂, 进行打鬼游戏</td>
</tr>
<tr>
<td><a href="https://github.com/AntennaPod/AntennaPod" target="_blank" rel="external">AntennaPod</a></td>
<td>AntennaPod 是一个自由, 开源的播客客户端, 支持 Atom 和 RSS Feed</td>
</tr>
<tr>
<td><a href="https://github.com/openproject/AndroidDigest" target="_blank" rel="external">干柴</a></td>
<td>开发者是冯建, 一个专注收集 android 相关干货(文摘,名博,github等等)资源 App</td>
</tr>
<tr>
<td><a href="https://github.com/manmal/hn-android" target="_blank" rel="external">Hacker News</a></td>
<td>一个查看黑客新闻报道和评论的 App</td>
</tr>
<tr>
<td><a href="https://github.com/madeye/proxydroid" target="_blank" rel="external">proxydroid</a></td>
<td>ProxyDroid 是一个帮助你在你的 Android 设备上设置代理 (HTTP / SOCKS4 / SOCKS5)</td>
</tr>
<tr>
<td><a href="https://git.oschina.net/way/AliGesture" target="_blank" rel="external">AliGesture</a></td>
<td>Android平台手势识别应用, 简单的手势就可以进入预置的应用, 方便快捷</td>
</tr>
<tr>
<td><a href="https://coding.net/u/youzi/p/Zhidu-Android/git/tree/master" target="_blank" rel="external">指读</a></td>
<td>指读顾名思义就是用手指去阅读浩瀚的书海</td>
</tr>
<tr>
<td><a href="https://github.com/KJFrame/KJMusic" target="_blank" rel="external">KJ 音乐</a></td>
<td>开发者是<a href="http://blog.kymjs.com/about/" target="_blank" rel="external">张涛</a>, 快捷音乐使用到<a href="https://github.com/kymjs/KJFrameForAndroid" target="_blank" rel="external">KJFrameForAndroid</a>开发框架, 拥有界面绚丽, 操作简单, 播放手机本地音乐, 在线收听音乐等功能, 还支持: 新浪微博, 百度账号, QQ 账号的一键登录</td>
</tr>
<tr>
<td><a href="http://git.oschina.net/tonlin/android-app" target="_blank" rel="external">哎嘛</a></td>
<td>OSCHINA 第三方客户端, 这个版本界面比官方版本界面好看多了, 使用的是 Material Design, 界面看上去非常清爽舒服</td>
</tr>
<tr>
<td><a href="http://git.oschina.net/wlemuel/Cotable/tree/master/" target="_blank" rel="external">码厩</a></td>
<td>博客园第三方客户端, 使用到缓存技术, 当你打开一次之后的博客内容, 会自动保存到设备中, 下次打开阅读同一文章时不需要再利用网络加载, 大家如果想为自己 App 搞缓存的, 可以研究一下该 App 是如何实现的喔</td>
</tr>
<tr>
<td><a href="http://git.oschina.net/ywwxhz/cnBeta-reader" target="_blank" rel="external">cnBeta 第三方阅读器</a></td>
<td>该 App 是 cnBeta(中文业界资讯站) 第三方阅读客户端, 界面也是使用 Material Design, 还加上一些动画效果, 让人阅读文章起来不会感觉枯燥, 值得去研究学习一下</td>
</tr>
<tr>
<td><a href="https://github.com/PaperAirplane-Dev-Team/BlackLight" target="_blank" rel="external">BlackLight</a></td>
<td>BlackLight是由纸飞机开发团队开发的一款Android上的新浪微博第三方轻量级客户端</td>
</tr>
<tr>
<td><a href="https://github.com/actorapp/actor-platform" target="_blank" rel="external">Actor</a></td>
<td>Actor(优聆) 是一款即时通讯 App, 解决网络通讯差的情况, 支持离线消息和文件存储, 自动与手机联系人建立联系等等</td>
</tr>
<tr>
<td><a href="https://github.com/nickbutcher/plaid" target="_blank" rel="external">Plaid</a></td>
<td>一个遵循 Material Design 的一个设计新闻客户端，里面的一些完全MD的一些特效很棒，同时整个客户端的框架设计也很有参考意义</td>
</tr>
<tr>
<td><a href="https://github.com/SkillCollege/SimplifyReader" target="_blank" rel="external">SimplifyReader</a></td>
<td>一款基于 Google Material Design 设计开发的 Android 客户端, 包括新闻简读, 图片浏览, 视频爽看, 音乐轻听以及二维码扫描五个子模块, 项目采取的是MVP架构开发</td>
</tr>
<tr>
<td><a href="https://github.com/CycloneAxe/phphub-android" target="_blank" rel="external">PHPHub-Android</a></td>
<td>PHPHub Android 客户端, 项目架构使用 nucleus 简化 MVP 架构, API 请求返回数据使用 RxJava 进行处理, 客户端使用了独特的二维码扫码登录, 有兴趣的可以去研究一下</td>
</tr>
<tr>
<td><a href="https://github.com/MummyDing/Leisure" target="_blank" rel="external">Leisure</a></td>
<td>闲暇(Leisure)是一款集”知乎日报”, “果壳科学人”, “新华网新闻”以及”豆瓣图书”于一体的阅读类 Android 应用, 项目里面有多语言切换、夜间模式以及无图模式, 如果你还不知道这些技术怎么实现, 不妨参考一下这个项目</td>
</tr>
<tr>
<td><a href="https://github.com/drakeet/Meizhi" target="_blank" rel="external">Meizhi</a></td>
<td>开发者是许晓峰(Drakeet), 该 app 是数据来自代码家干货网站 <a href="http://gank.io" target="_blank" rel="external">gank.io</a>, 有很多开发者都纷纷为这网站做客户端 app, 因为代码家大神开放该网站的 Api, 更重要的是该网站每天除了有干货还有漂亮妹子看呢, 该 App 使用到的技术有 RxJava + Retrofit, 代码结构非常清晰, 值得一看的开源 App.</td>
</tr>
<tr>
<td><a href="https://github.com/sfsheng0322/Bingo" target="_blank" rel="external">Bingo</a></td>
<td>开发者是<a href="http://weibo.com/u/3852192525" target="_blank" rel="external">孙福生</a>, Bingo 是一款 IT 阅读学习类的开源软件, 作者收集一些干货学习内容, 你也可以在 App 上分享你的认为干货文章, 该项目使用动态代理 AOP 编程框架, 使开发起来更简洁, 更高效. 里面有一个功能就是多种主题切换, 感兴趣的可以看看怎么实现</td>
</tr>
</tbody>
</table>
<h2 id="Android-开发者杂志周刊"><a href="#Android-开发者杂志周刊" class="headerlink" title="Android 开发者杂志周刊"></a>Android 开发者杂志周刊</h2><p>( 前五个资料来自 <a href="http://drakeet.me/" target="_blank" rel="external">Drakeet</a> 收集整理的, 资料原链接 <a href="http://www.jianshu.com/p/54c4a19ffa68" target="_blank" rel="external">地址</a> )</p>
<table>
<thead>
<tr>
<th>周刊名</th>
<th>周刊简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://androidweekly.net/" target="_blank" rel="external">Android Weekly</a></td>
<td>Android Weekly 是由Android 团队的成员和国外知名的 Android 开发者维护, 分享的内容不仅仅只有干货, 而且还有最新的技术分享, 也是Android 开发圈子最早, 最有名的周报</td>
</tr>
<tr>
<td><a href="http://www.androidweekly.cn/" target="_blank" rel="external">Android 开发技术周报</a></td>
<td>Android 开发技术周报是由<a href="http://weibo.com/234959219" target="_blank" rel="external">@脉脉不嘚語</a> 维护更新, 截止到现在, 已经发布了28 期, 分享的都是高质量的文章教程, 代码库, 工具, 新闻视频, 设计等</td>
</tr>
<tr>
<td><a href="http://zhuanlan.zhihu.com/andlib" target="_blank" rel="external">Android 科学院</a></td>
<td>由 <a href="http://weibo.com/duguguiyu?from=feed&amp;loc=at&amp;nick=duguguiyu" target="_blank" rel="external">@duguguiyu</a>和豌豆荚一小撮工程师组成, 分享的都是最新的 Android 技术: 虽然更新频率不是很高, 但是质量确是很高的, 值得一看的</td>
</tr>
<tr>
<td><a href="http://www.devtf.cn/?cat=2" target="_blank" rel="external">开发技术前线</a></td>
<td>开发技术前线是一个高质量技术文章的聚合网站, 主要分享 Android, iOS, 以及招聘等内容</td>
</tr>
<tr>
<td><a href="http://app.memect.com/" target="_blank" rel="external">App 开发日报</a></td>
<td>App 开发日报主要关注移动应用的开发, 它每天一刊, 分享的内容主要来自微博上知名的开发者推荐的内容, 因此质量基本上是有保证的</td>
</tr>
<tr>
<td><a href="http://www.infoq.com/cn/author/%E9%83%AD%E4%BA%AE" target="_blank" rel="external">Android 开发周报</a></td>
<td>Android 开发周报是郭亮在连载更新在 Infoq 的周刊, 它不仅分享 Android 的相关新闻, 新工具, 而且还有更加深入的, 所以对于新生老人都很适合</td>
</tr>
<tr>
<td><a href="http://gank.io/" target="_blank" rel="external">干货集中营</a></td>
<td>由 <a href="http://blog.daimajia.com/" target="_blank" rel="external">代码家</a> 维护更新, 周一到周五每天中午分享, 分享内容有漂亮妹子, Android 干货, iOS 干货, App, 技术以外推荐, 还有休息视频</td>
</tr>
<tr>
<td><a href="http://www.androidblog.cn/" target="_blank" rel="external">Android Blog 周刊</a></td>
<td>AndroidBlog 是由 <a href="http://weibo.com/u/2106134235?refer_flag=1001030201_&amp;is_hot=1" target="_blank" rel="external">Jomeslu</a> 收录的, 目前就职于搜狐, 该周刊分享内容主要有一周国内外热门技术博客, 优秀的类库, 以及一些有趣的新闻, 看了前几期分享的内容质量都是很高的, 因此值得推荐给大家</td>
</tr>
</tbody>
</table>
<h2 id="Awesome-系列"><a href="#Awesome-系列" class="headerlink" title="Awesome 系列"></a>Awesome 系列</h2><ul>
<li><a href="https://github.com/snowdream/awesome-android" target="_blank" rel="external">awesome android(1)</a></li>
<li><a href="https://github.com/JStumpp/awesome-android" target="_blank" rel="external">awesome_android(2)</a></li>
<li><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome_android_UI</a></li>
<li><a href="https://github.com/wasabeef/awesome-android-libraries" target="_blank" rel="external">awesome_android_libraries</a></li>
<li><a href="https://github.com/akullpp/awesome-java" target="_blank" rel="external">awesome_java</a></li>
<li><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">awesome_materialdesign</a></li>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">awesome 系列之终极版</a></li>
<li><a href="https://github.com/liaohuqiu/android-dynamic-load-awesome" target="_blank" rel="external">android-dynamic-load-awesome</a></li>
<li><a href="https://github.com/mzlogin/awesome-adb" target="_blank" rel="external">awesome-adb</a></li>
</ul>
<h2 id="动画系列"><a href="#动画系列" class="headerlink" title="动画系列"></a>动画系列</h2><ul>
<li><a href="https://github.com/hitherejoe/animate" target="_blank" rel="external">animate</a></li>
<li><a href="https://github.com/Animatious/awesome-animation" target="_blank" rel="external">awesome-animation</a></li>
<li><a href="https://github.com/lgvalle/Material-Animations" target="_blank" rel="external">Material-Animations</a></li>
<li><a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="external">AndroidViewAnimations</a></li>
</ul>
<h2 id="Material-Design-设计"><a href="#Material-Design-设计" class="headerlink" title="Material Design 设计"></a>Material Design 设计</h2><ul>
<li><a href="https://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="external">Material Design 教程</a></li>
<li><a href="https://github.com/1sters/material_design_zh_2" target="_blank" rel="external">Material Design 教程(中文版)</a></li>
<li><a href="https://github.com/navasmdc/MaterialDesignLibrary" target="_blank" rel="external">Material Design Android Library </a>(Material Design 开源库, 很多效果可以直接拿来用)</li>
<li><a href="http://www.aplesson.com/?p=650" target="_blank" rel="external">十大Material Design开源项目</a></li>
</ul>
<h2 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h2><ul>
<li><a href="http://tool.c7sky.com/webcolor/" target="_blank" rel="external">常用色彩搭配表</a></li>
<li><a href="http://www.colorhunt.co/" target="_blank" rel="external">ColorHunt-色彩搭配</a></li>
<li><a href="http://www.materialpalette.com/" target="_blank" rel="external">在线 Material Design 界面调色板</a></li>
<li><a href="http://www.materialup.com/" target="_blank" rel="external">Material Design设计模板与素材</a></li>
<li><a href="https://icons8.com/" target="_blank" rel="external">Icons8</a></li>
<li><a href="https://iconstore.co/" target="_blank" rel="external">Icon Store</a></li>
<li><a href="https://design.google.com/icons/" target="_blank" rel="external">Material icons</a></li>
<li><a href="http://iconfont.cn/" target="_blank" rel="external">Iconfont</a></li>
<li><a href="https://github.com/gztchan/awesome-design/" target="_blank" rel="external">awesome-design</a></li>
</ul>
<h2 id="开源库收集"><a href="#开源库收集" class="headerlink" title="开源库收集"></a>开源库收集</h2><ul>
<li><a href="http://alamkanak.github.io/android-libraries-and-resources/" target="_blank" rel="external">Android Libraries and Resources </a></li>
<li><a href="http://android-arsenal.com/" target="_blank" rel="external">Android Arsenal </a>(一个专门收集 android 开源库的网站, 网站经常更新)</li>
<li><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">Android 开源项目汇总 </a>(Trinea 大神收集的)</li>
<li><a href="http://codekk.com/open-source-project-analysis" target="_blank" rel="external">Android 开源项目源码分析 </a>(在懂得使用这些开源项目同时, 也应该了解当中的原理)</li>
<li><a href="http://www.jcodecraeer.com/plus/list.php?tid=31" target="_blank" rel="external">泡在网上的日子</a></li>
<li><a href="http://www.android-gems.com/" target="_blank" rel="external">android-gems</a>(国内外很多开发者都在这里上传他们最新的项目, 还带有 apk 下载)</li>
</ul>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul>
<li><a href="https://github.com/iluwatar/java-design-patterns#model-view-presenter" target="_blank" rel="external">java-design-patterns</a></li>
<li><a href="https://github.com/simple-android-framework-exchange/android_design_patterns_analysis" target="_blank" rel="external">Android源码设计模式分析项目</a></li>
<li><a href="http://blog.csdn.net/zhangerqing/article/details/8194653" target="_blank" rel="external">Java之美[从菜鸟到高手演变]之设计模式</a></li>
</ul>
<h2 id="实践篇"><a href="#实践篇" class="headerlink" title="实践篇"></a>实践篇</h2><ul>
<li><a href="http://jaeger.itscoder.com/android/2016/02/14/android-studio-tips.html" target="_blank" rel="external">Android Studio 小技巧合集</a></li>
<li><a href="https://github.com/futurice/android-best-practices/blob/master/translations/Chinese/README.cn.md" target="_blank" rel="external">Android 开发最佳实践</a></li>
<li><a href="http://hukai.me/android-dev-patterns/" target="_blank" rel="external">Android 开发最佳实践 </a>(来自<a href="http://hukai.me/" target="_blank" rel="external">胡凯</a>总结)</li>
<li><a href="http://sr1.me/way-to-explore/2015/03/25/best-practice-for-android-ui.html" target="_blank" rel="external">Android 最佳实践之 UI 篇</a></li>
<li><a href="http://blog.csdn.net/zhaokaiqiang1992/article/details/45419023" target="_blank" rel="external">Android 屏幕适配全攻略</a></li>
<li><a href="http://www.hamberluo.cn/2015/04/27/semi-android-newer" target="_blank" rel="external">给半新人的app开发指南</a></li>
<li><a href="https://github.com/FX-Max/Point-of-Android" target="_blank" rel="external">Android 一些重要知识点解析整理</a></li>
<li><a href="http://www.imooc.com/article/1287" target="_blank" rel="external">Android 开发人员应避免的 10 个误区</a></li>
<li><a href="https://github.com/tianzhijiexian/Android-Best-Practices/blob/master/2015.9/reflect/reflect.md" target="_blank" rel="external">Java 反射最佳实践</a></li>
<li><a href="http://www.csdn.net/article/2015-09-18/2825737/1" target="_blank" rel="external">Android 内存优化之 OOM</a></li>
<li><a href="http://blog.csdn.net/vipzjyno1/article/details/23542617" target="_blank" rel="external">Android 命名规范</a></li>
<li><a href="https://github.com/tianzhijiexian/Android-Best-Practices/blob/master/2015.10/adapter/adapter.md" target="_blank" rel="external">Adapter 优化方案的探索</a></li>
<li><a href="https://github.com/tangqi92/Android-Tips" target="_blank" rel="external">Android-Tips</a></li>
<li><a href="http://adbshell.com/" target="_blank" rel="external">最全 Android ADB Shell</a></li>
<li><a href="https://github.com/CharonChui/AndroidNote" target="_blank" rel="external">AndroidNote</a></li>
<li><a href="https://github.com/l123456789jy/Lazy" target="_blank" rel="external">Android 常用工具类</a></li>
<li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0218/3978.html" target="_blank" rel="external">创建安卓 app 的 30 个经验教训</a></li>
<li><a href="http://www.trinea.cn/android/android-image-cache-compare/" target="_blank" rel="external">Android 三大图片缓存原理、特性对比</a></li>
<li><a href="http://www.trinea.cn/android/performance/" target="_blank" rel="external">Android 性能优化总结</a></li>
<li><a href="http://www.eoeandroid.com/thread-570919-1-1.html" target="_blank" rel="external">Android 实用代码片段整合 </a></li>
<li><a href="http://www.phpxs.com/code/1001775" target="_blank" rel="external">36 个 Android 开发常用代码片段</a></li>
<li><a href="https://github.com/jiang111/awesome-android-tips" target="_blank" rel="external">收集了大家常用的一些 Android 的模板代码</a></li>
<li><a href="http://keeganlee.me/post/android/20150709" target="_blank" rel="external">Android 技术积累: 开发规范</a></li>
<li><a href="http://keeganlee.me/post/architecture/20160114" target="_blank" rel="external">App 架构设计经验谈</a></li>
<li><a href="http://blog.csdn.net/yyh352091626/article/details/50957851" target="_blank" rel="external">关于 Android 开发的 40 条优化建议</a></li>
<li><a href="http://gold.xitu.io/entry/56cd6ebb99a6ce005a2887e3" target="_blank" rel="external">如何提高安卓代码的质量和语法</a></li>
<li><a href="http://www.jianshu.com/p/4f152bc8f4f3" target="_blank" rel="external">我的 Android 开发实战经验总结</a></li>
<li><a href="http://www.wangchenlong.org/2016/02/23/tips/1603/231-android-tips-1/" target="_blank" rel="external">Android Tips 系列</a></li>
<li><a href="http://www.jianshu.com/p/28111d29eee4" target="_blank" rel="external">如何自学 Android</a></li>
<li><a href="http://www.jianshu.com/p/011eb88f4e0d" target="_blank" rel="external">你所不知道的Android Studio调试技巧</a></li>
</ul>
<h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><ul>
<li><a href="http://j.codekk.com/blogs/detail/5705bcdf4a38205862ef4770" target="_blank" rel="external">80% 以上简历都是不合格的</a></li>
<li><a href="http://j.codekk.com/blogs/detail/5705bcdf4a38205862ef476f" target="_blank" rel="external">推荐两个技术简历模板</a></li>
<li><a href="https://mdluo.github.io/blog/about-resume/" target="_blank" rel="external">关于程序员求职简历</a></li>
<li><a href="https://github.com/JackyAndroid/AndroidInterview-Q-A" target="_blank" rel="external">国内一线互联网公司内部面试题库</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes" target="_blank" rel="external">LearningNotes</a> (非常详细的面试资料, 涉及 Android, Java, 设计模式, 算法等)</li>
<li><a href="https://zhuanlan.zhihu.com/p/21565914" target="_blank" rel="external">Android 面试那些事儿</a></li>
<li><a href="http://lucida.me/blog/lean-technical-resume/" target="_blank" rel="external">精益技术简历之道——改善技术简历的47条原则</a></li>
<li><a href="http://www.jianshu.com/p/d1efe2f31b6d" target="_blank" rel="external">史上最全 Android 面试资料集合</a></li>
</ul>
<h2 id="Git-教程"><a href="#Git-教程" class="headerlink" title="Git 教程"></a>Git 教程</h2><p>新手看完这几份教程基本上知道怎么使用 Git 了</p>
<ul>
<li><a href="http://jlord.us/git-it/challenges/get_git.html" target="_blank" rel="external">GitHub 团队美女写的一套 Git 使用教程</a></li>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">ProGit 中文版</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的 Git 教程</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">Git 简易指南</a></li>
<li><a href="https://github.com/git-tips/tips" target="_blank" rel="external">git-tips</a>(Git 命令集合)</li>
</ul>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul>
<li><a href="http://developer.android.com/reference/android/package-summary.html" target="_blank" rel="external">Android 官方 API 文档</a>(网站需要翻墙，不翻墙可以<a href="http://pan.baidu.com/s/1dDu3LVb" target="_blank" rel="external">下载</a>离线文件)</li>
<li><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">Android 官方培训课程中文版</a>(由胡凯发起对 Google Android 官方培训课程翻译的中文版)</li>
</ul>
<h2 id="其它资料收集"><a href="#其它资料收集" class="headerlink" title="其它资料收集"></a>其它资料收集</h2><ul>
<li><a href="http://www.eoeandroid.com/forum.php?mod=viewthread&amp;tid=571335&amp;highlight=10%E4%B8%AA%E5%BE%88%E6%A3%92" target="_blank" rel="external">10 个很棒的学习 Android 开发的网站</a></li>
<li><a href="http://android.jobbole.com/80815/" target="_blank" rel="external">Android 开发, 你应该知道的学习资源</a></li>
<li><a href="https://github.com/ColorfulCat/AndroidGuide" target="_blank" rel="external">AndroidCat 安卓书签网</a></li>
<li><a href="http://www.jianshu.com/p/e961f1633d7a" target="_blank" rel="external">每个 Android 开发者都应该了解的资源列表</a></li>
<li><a href="http://www.jianshu.com/p/54902270249d" target="_blank" rel="external">Android 开发者网址导航</a></li>
<li><a href="https://github.com/ruijun/Android-Dev-Favorites" target="_blank" rel="external">Android 开发收藏夹</a></li>
<li><a href="https://github.com/Tim9Liu9/TimLiu-Android" target="_blank" rel="external">TimLiu-Android</a>(TimLiu 总结的 Android 开源项目及库)</li>
<li><a href="https://github.com/JohnTsaiAndroid/AndroidTips" target="_blank" rel="external">AndroidTips</a></li>
<li><a href="https://github.com/Blankj/AndroidUtilCode" target="_blank" rel="external">Android 开发人员不得不收集的代码</a></li>
<li><a href="https://github.com/Juude/Awesome-Android-Architecture" target="_blank" rel="external">Android 架构合集</a></li>
<li><a href="https://github.com/CameloeAnthony/AndroidArchitectureCollection" target="_blank" rel="external">AndroidArchitectureCollection</a></li>
<li><a href="https://github.com/lizhangqu/CoreLink" target="_blank" rel="external">Android 开发中的日常积累</a></li>
<li><a href="http://blog.chengyunfeng.com/?p=1020" target="_blank" rel="external">2016安卓开发资料大全</a></li>
</ul>
<h2 id="知乎上的讨论"><a href="#知乎上的讨论" class="headerlink" title="知乎上的讨论"></a>知乎上的讨论</h2><ul>
<li><a href="http://www.zhihu.com/question/19775981" target="_blank" rel="external">有哪些 Android 大牛的 blog 值得推荐?</a></li>
<li><a href="http://www.zhihu.com/question/23804819" target="_blank" rel="external">GitHub 上都有哪些值得关注学习的 Android项目?</a></li>
<li><a href="https://www.zhihu.com/question/28481864" target="_blank" rel="external">GitHub 上有哪些适合新人围观的 Android 项目?</a></li>
<li><a href="http://www.zhihu.com/question/28841081" target="_blank" rel="external">2015 年移动设备界面设计有哪些趋势?</a></li>
<li><a href="http://www.zhihu.com/question/33636939" target="_blank" rel="external">Android开发中, 有哪些让你觉得相见恨晚的方法,类或接口?</a></li>
<li><a href="https://www.zhihu.com/question/28527388" target="_blank" rel="external">Android Studio有哪些非常好用的插件?</a></li>
<li><a href="https://www.zhihu.com/question/32037895" target="_blank" rel="external">Android 开发有哪些新技术出现?</a></li>
<li><a href="https://www.zhihu.com/question/19804692" target="_blank" rel="external">有哪些优秀的 Android 应用开源项目, 特效, 设计资料推荐?</a></li>
<li><a href="https://www.zhihu.com/question/26687642" target="_blank" rel="external">有没有适合 Android 开发初学者的 App 源码推荐?</a></li>
<li><a href="https://www.zhihu.com/question/29939631" target="_blank" rel="external">Android有什么好的技术点适合进行技术分享?</a></li>
<li><a href="https://www.zhihu.com/question/27482725" target="_blank" rel="external">Android Studio有什么奇技淫巧?</a></li>
<li><a href="https://www.zhihu.com/question/37433825" target="_blank" rel="external">Android 开发: 开始一个项目前, 做好哪些准备可以事半功倍?</a></li>
<li><a href="https://www.zhihu.com/question/27227425" target="_blank" rel="external">大家有哪些好的 Android 开发习惯?</a></li>
<li><a href="https://www.zhihu.com/question/21406685" target="_blank" rel="external">Android 开发有什么好的架构么?</a></li>
</ul>
<h1 id="List-of-Android-Libraries-3"><a href="#List-of-Android-Libraries-3" class="headerlink" title="List of Android Libraries[3]"></a>List of Android Libraries<sup>[3]</sup></h1><p>This is an alphabetical list of libraries for Android development, the majority being actively maintained.</p>
<p><strong>UI/UX Library is <a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">here</a>.</strong></p>
<h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><ul>
<li><a href="#networking">Networking</a></li>
<li><a href="#image-loader">Image Loader</a></li>
<li><a href="#drawable">Drawable</a></li>
<li><a href="#dependency-injections">Dependency Injections</a></li>
<li><a href="#json">JSON</a></li>
<li><a href="#or-mapping">O/R Mapping</a></li>
<li><a href="#nosql">NoSQL</a></li>
<li><a href="#pubsub">Pub/Sub</a></li>
<li><a href="#logger">Logger</a></li>
<li><a href="#background-processing">Background Processing</a></li>
<li><a href="#fonts">Fonts</a></li>
<li><a href="#video">Video</a></li>
<li><a href="#parcelables">Parcelables</a></li>
<li><a href="#functional-programming">Functional Programming</a><ul>
<li><a href="#adding-java-8-functional-programming-features">Adding Java-8 Functional Programming Features</a></li>
<li><a href="#functional-reactive-programming">Functional Reactive Programming</a></li>
</ul>
</li>
<li><a href="#social-networks">Social Networks</a></li>
<li><a href="#webrtc">WebRTC</a></li>
<li><a href="#image-processing">Image Processing</a></li>
<li><a href="#camera">Camera</a></li>
<li><a href="#security">Security</a></li>
<li><a href="#media">Media</a></li>
<li><a href="#showcases">Showcases</a></li>
<li><a href="#maps">Maps</a></li>
<li><a href="#other">Other</a></li>
</ul>
<h2 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://loopj.com/android-async-http" target="_blank" rel="external">Android Asynchronous Http Client</a></td>
<td><a href="https://github.com/loopj/android-async-http" target="_blank" rel="external">https://github.com/loopj/android-async-http</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="external">Async Http Client</a></td>
<td><a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="external">https://github.com/AsyncHttpClient/async-http-client</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/koush/ion" target="_blank" rel="external">ion</a></td>
<td><a href="https://github.com/koush/ion" target="_blank" rel="external">https://github.com/koush/ion</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp</a></td>
<td><a href="https://github.com/square/okhttp" target="_blank" rel="external">https://github.com/square/okhttp</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://square.github.io/retrofit/" target="_blank" rel="external">Retrofit</a></td>
<td><a href="https://github.com/square/retrofit" target="_blank" rel="external">https://github.com/square/retrofit</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/ReactiveX/RxNetty" target="_blank" rel="external">RxNetty</a></td>
<td><a href="https://github.com/ReactiveX/RxNetty" target="_blank" rel="external">https://github.com/ReactiveX/RxNetty</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://code.google.com/p/basic-http-client/" target="_blank" rel="external">Basic HTTP Client for Java</a></td>
<td><a href="https://code.google.com/p/basic-http-client/" target="_blank" rel="external">https://code.google.com/p/basic-http-client/</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Image-Loader"><a href="#Image-Loader" class="headerlink" title="Image Loader"></a>Image Loader</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/bumptech/glide" target="_blank" rel="external">Glide</a></td>
<td><a href="https://github.com/bumptech/glide" target="_blank" rel="external">https://github.com/bumptech/glide</a></td>
<td><a href="https://github.com/bumptech/glide/blob/master/LICENSE" target="_blank" rel="external"> License</a></td>
</tr>
<tr>
<td><a href="https://github.com/koush/ion" target="_blank" rel="external">ion</a></td>
<td><a href="https://github.com/koush/ion" target="_blank" rel="external">https://github.com/koush/ion</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://square.github.io/picasso" target="_blank" rel="external">Picasso</a></td>
<td><a href="https://github.com/square/picasso" target="_blank" rel="external">https://github.com/square/picasso</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">Universal Image Loader</a></td>
<td><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">https://github.com/nostra13/Android-Universal-Image-Loader</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://frescolib.org" target="_blank" rel="external">Fresco</a></td>
<td><a href="https://github.com/facebook/fresco" target="_blank" rel="external">https://github.com/facebook/fresco</a></td>
<td><a href="https://github.com/facebook/fresco/blob/master/LICENSE" target="_blank" rel="external">BSD License</a></td>
</tr>
</tbody>
</table>
<h2 id="Drawable"><a href="#Drawable" class="headerlink" title="Drawable"></a>Drawable</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/telly/MrVector" target="_blank" rel="external">MrVector</a></td>
<td><a href="https://github.com/telly/MrVector" target="_blank" rel="external">https://github.com/telly/MrVector</a></td>
<td><a href="https://github.com/telly/MrVector/blob/master/LICENSE" target="_blank" rel="external">License</a></td>
</tr>
</tbody>
</table>
<h2 id="Dependency-Injections"><a href="#Dependency-Injections" class="headerlink" title="Dependency Injections"></a>Dependency Injections</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://androidannotations.org/" target="_blank" rel="external">AndroidAnnotations</a></td>
<td><a href="https://github.com/excilys/androidannotations" target="_blank" rel="external">https://github.com/excilys/androidannotations</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="external">Butter Knife</a></td>
<td><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">https://github.com/JakeWharton/butterknife</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://square.github.io/dagger/" target="_blank" rel="external">Dagger(Square)</a></td>
<td><a href="https://github.com/square/dagger" target="_blank" rel="external">https://github.com/square/dagger</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/google/dagger" target="_blank" rel="external">Dagger(Google)</a></td>
<td><a href="https://github.com/google/dagger" target="_blank" rel="external">https://github.com/google/dagger</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/roboguice/roboguice" target="_blank" rel="external">RoboGuice</a></td>
<td><a href="https://github.com/roboguice/roboguice" target="_blank" rel="external">https://github.com/roboguice/roboguice</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/emmano/Scopes" target="_blank" rel="external">Scopes</a></td>
<td><a href="https://github.com/emmano/Scopes" target="_blank" rel="external">https://github.com/emmano/Scopes</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
</tr>
</tbody>
</table>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://code.google.com/p/google-gson/" target="_blank" rel="external">Gson</a></td>
<td><a href="http://google-gson.googlecode.com/svn/trunk/" target="_blank" rel="external">http://google-gson.googlecode.com/svn/trunk/</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/Instagram/ig-json-parser" target="_blank" rel="external">ig-json-parser</a></td>
<td><a href="https://github.com/Instagram/ig-json-parser" target="_blank" rel="external">https://github.com/Instagram/ig-json-parser</a></td>
<td><a href="https://en.wikipedia.org/wiki/BSD_licenses" target="_blank" rel="external">BSD</a></td>
</tr>
<tr>
<td><a href="http://jackson.codehaus.org/" target="_blank" rel="external">Jackson</a></td>
<td><a href="https://github.com/FasterXML/jackson" target="_blank" rel="external">https://github.com/FasterXML/jackson</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="O-R-Mapping"><a href="#O-R-Mapping" class="headerlink" title="O/R Mapping"></a>O/R Mapping</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.activeandroid.com/" target="_blank" rel="external">ActiveAndroid</a></td>
<td><a href="https://github.com/pardom/ActiveAndroid" target="_blank" rel="external">https://github.com/pardom/ActiveAndroid</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://bitbucket.org/littlerobots/cupboard" target="_blank" rel="external">Cupboard for Android</a></td>
<td><a href="https://bitbucket.org/littlerobots/cupboard" target="_blank" rel="external">https://bitbucket.org/littlerobots/cupboard</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/Raizlabs/DBFlow" target="_blank" rel="external">DBFlow</a></td>
<td><a href="https://github.com/Raizlabs/DBFlow" target="_blank" rel="external">https://github.com/Raizlabs/DBFlow</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
</tr>
<tr>
<td><a href="http://greendao-orm.com/" target="_blank" rel="external">greenDAO</a></td>
<td><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">https://github.com/greenrobot/greenDAO</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://www.rushorm.com/" target="_blank" rel="external">RushOrm</a></td>
<td><a href="https://github.com/Stuart-campbell/RushOrm" target="_blank" rel="external">https://github.com/Stuart-campbell/RushOrm</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://satyan.github.io/sugar/" target="_blank" rel="external">Sugar ORM</a></td>
<td><a href="https://github.com/satyan/sugar" target="_blank" rel="external">https://github.com/satyan/sugar</a></td>
<td><a href="https://github.com/satyan/sugar/blob/master/LICENSE" target="_blank" rel="external">Satya Narayan</a></td>
</tr>
<tr>
<td><a href="https://github.com/pieces029/shillelagh" target="_blank" rel="external">Shillelagh</a></td>
<td><a href="https://github.com/pieces029/shillelagh" target="_blank" rel="external">https://github.com/pieces029/shillelagh</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/square/sqlbrite" target="_blank" rel="external">SQLBrite</a></td>
<td><a href="https://github.com/square/sqlbrite" target="_blank" rel="external">https://github.com/square/sqlbrite</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/pardom/Ollie" target="_blank" rel="external">Ollie</a></td>
<td><a href="https://github.com/pardom/Ollie" target="_blank" rel="external">https://github.com/pardom/Ollie</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/HendrixString/Android-TriOrm" target="_blank" rel="external">TriOrm</a></td>
<td><a href="https://github.com/HendrixString/Android-TriOrm" target="_blank" rel="external">https://github.com/HendrixString/Android-TriOrm</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://developer.couchbase.com/mobile/" target="_blank" rel="external">Couchbase-Lite-Android</a></td>
<td><a href="https://github.com/couchbase/couchbase-lite-android" target="_blank" rel="external">https://github.com/couchbase/couchbase-lite-android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://realm.io/" target="_blank" rel="external">Realm</a></td>
<td><a href="https://github.com/realm/realm-java" target="_blank" rel="external">https://github.com/realm/realm-java</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/Jearil/SimpleNoSQL" target="_blank" rel="external">SimpleNoSQL</a></td>
<td><a href="https://github.com/Jearil/SimpleNoSQL" target="_blank" rel="external">https://github.com/Jearil/SimpleNoSQL</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/xmartlabs/RxSimpleNoSQL" target="_blank" rel="external">RxSimpleNoSQL</a></td>
<td><a href="https://github.com/xmartlabs/RxSimpleNoSQL" target="_blank" rel="external">https://github.com/xmartlabs/RxSimpleNoSQL</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://www.snappydb.com/" target="_blank" rel="external">SnappyDB</a></td>
<td><a href="https://github.com/nhachicha/SnappyDB" target="_blank" rel="external">https://github.com/nhachicha/SnappyDB</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Pub-Sub"><a href="#Pub-Sub" class="headerlink" title="Pub/Sub"></a>Pub/Sub</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a></td>
<td><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">https://github.com/greenrobot/EventBus</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://square.github.io/otto/" target="_blank" rel="external">Otto</a></td>
<td><a href="https://github.com/square/otto" target="_blank" rel="external">https://github.com/square/otto</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/bennidi/mbassador" target="_blank" rel="external">MBassador</a></td>
<td><a href="https://github.com/bennidi/mbassador" target="_blank" rel="external">https://github.com/bennidi/mbassador</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
</tr>
</tbody>
</table>
<h2 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">Hugo</a></td>
<td><a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">https://github.com/JakeWharton/hugo</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/timber" target="_blank" rel="external">Timber</a></td>
<td><a href="https://github.com/JakeWharton/timber" target="_blank" rel="external">https://github.com/JakeWharton/timber</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/ihsanbal/LoggingInterceptor" target="_blank" rel="external">LoggingInterceptor</a></td>
<td><a href="https://github.com/ihsanbal/LoggingInterceptor" target="_blank" rel="external">https://github.com/ihsanbal/LoggingInterceptor</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
</tr>
</tbody>
</table>
<h2 id="Background-Processing"><a href="#Background-Processing" class="headerlink" title="Background Processing"></a>Background Processing</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/path/android-priority-jobqueue" target="_blank" rel="external">Android Priority Job Queue</a></td>
<td><a href="https://github.com/path/android-priority-jobqueue" target="_blank" rel="external">https://github.com/path/android-priority-jobqueue</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
</tr>
<tr>
<td><a href="http://square.github.io/tape/" target="_blank" rel="external">Tape</a></td>
<td><a href="https://github.com/square/tape" target="_blank" rel="external">https://github.com/square/tape</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/HendrixString/Android-Zorn" target="_blank" rel="external">Zorn</a></td>
<td><a href="https://github.com/HendrixString/Android-Zorn" target="_blank" rel="external">https://github.com/HendrixString/Android-Zorn</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Fonts"><a href="#Fonts" class="headerlink" title="Fonts"></a>Fonts</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/chrisjenx/Calligraphy" target="_blank" rel="external">Calligraphy</a></td>
<td><a href="https://github.com/chrisjenx/Calligraphy" target="_blank" rel="external">https://github.com/chrisjenx/Calligraphy</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/google/ExoPlayer" target="_blank" rel="external">ExoPlayer</a></td>
<td><a href="https://github.com/google/ExoPlayer" target="_blank" rel="external">https://github.com/google/ExoPlayer</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/bbcallen/ijkplayer" target="_blank" rel="external">ijkplayer</a></td>
<td><a href="https://github.com/bbcallen/ijkplayer" target="_blank" rel="external">https://github.com/bbcallen/ijkplayer</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://code.google.com/p/mp4parser/" target="_blank" rel="external">mp4parser</a></td>
<td><a href="https://github.com/sannies/mp4parser" target="_blank" rel="external">https://github.com/sannies/mp4parser</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Parcelables"><a href="#Parcelables" class="headerlink" title="Parcelables"></a>Parcelables</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/frankiesardo/auto-parcel" target="_blank" rel="external">AutoParcel</a></td>
<td><a href="https://github.com/frankiesardo/auto-parcel" target="_blank" rel="external">https://github.com/frankiesardo/auto-parcel</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/tom91136/Akatsuki" target="_blank" rel="external">Akatsuki</a></td>
<td><a href="https://github.com/tom91136/Akatsuki" target="_blank" rel="external">https://github.com/tom91136/Akatsuki</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/frankiesardo/icepick" target="_blank" rel="external">Icepick</a></td>
<td><a href="https://github.com/frankiesardo/icepick" target="_blank" rel="external">https://github.com/frankiesardo/icepick</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/johncarl81/parceler" target="_blank" rel="external">Parceler</a></td>
<td><a href="https://github.com/johncarl81/parceler" target="_blank" rel="external">https://github.com/johncarl81/parceler</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h2><h4 id="Adding-Java-8-Functional-Programming-Features"><a href="#Adding-Java-8-Functional-Programming-Features" class="headerlink" title="Adding Java-8 Functional Programming Features"></a>Adding Java-8 Functional Programming Features</h4><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/orfjackal/retrolambda" target="_blank" rel="external">Retrolambda</a></td>
<td><a href="https://github.com/orfjackal/retrolambda" target="_blank" rel="external">https://github.com/orfjackal/retrolambda</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h4 id="Functional-Reactive-Programming"><a href="#Functional-Reactive-Programming" class="headerlink" title="Functional Reactive Programming"></a>Functional Reactive Programming</h4><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">RxAndroid</a></td>
<td><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">https://github.com/ReactiveX/RxAndroid</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a></td>
<td><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">https://github.com/ReactiveX/RxJava</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Social-Networks"><a href="#Social-Networks" class="headerlink" title="Social Networks"></a>Social Networks</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/gorbin/ASNE" target="_blank" rel="external">ASNE</a></td>
<td><a href="https://github.com/gorbin/ASNE" target="_blank" rel="external">https://github.com/gorbin/ASNE</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
</tr>
<tr>
<td><a href="https://developers.facebook.com/docs/android" target="_blank" rel="external">Facebook SDK</a></td>
<td><a href="https://github.com/facebook/facebook-android-sdk" target="_blank" rel="external">https://github.com/facebook/facebook-android-sdk</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://dev.twitter.com/products/fabric" target="_blank" rel="external">Twitter Fabric</a></td>
<td>Unknown</td>
<td>Unknown</td>
</tr>
</tbody>
</table>
<h2 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/pchab/AndroidRTC" target="_blank" rel="external">AndroidRTC</a></td>
<td><a href="https://github.com/pchab/AndroidRTC" target="_blank" rel="external">https://github.com/pchab/AndroidRTC</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Image-Processing"><a href="#Image-Processing" class="headerlink" title="Image Processing"></a>Image Processing</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/CyberAgent/android-gpuimage" target="_blank" rel="external">GPUImage for Android</a></td>
<td><a href="https://github.com/CyberAgent/android-gpuimage" target="_blank" rel="external">https://github.com/CyberAgent/android-gpuimage</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Camera"><a href="#Camera" class="headerlink" title="Camera"></a>Camera</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/jmolsmobile/LandscapeVideoCamera" target="_blank" rel="external">Landscape video camera</a></td>
<td><a href="https://github.com/jmolsmobile/LandscapeVideoCamera" target="_blank" rel="external">https://github.com/jmolsmobile/LandscapeVideoCamera</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/Glamdring/EasyCamera" target="_blank" rel="external">EasyCamera</a></td>
<td><a href="https://github.com/Glamdring/EasyCamera" target="_blank" rel="external">https://github.com/Glamdring/EasyCamera</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/facebook/buck" target="_blank" rel="external">Buck</a></td>
<td><a href="https://github.com/facebook/buck" target="_blank" rel="external">https://github.com/facebook/buck</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/lukeFalsina/Grab-n-Run" target="_blank" rel="external">Grab’n Run</a></td>
<td><a href="https://github.com/lukeFalsina/Grab-n-Run" target="_blank" rel="external">https://github.com/lukeFalsina/Grab-n-Run</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Media"><a href="#Media" class="headerlink" title="Media"></a>Media</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/HendrixString/Android-PdfMyXml" target="_blank" rel="external">PdfMyXml</a></td>
<td><a href="https://github.com/HendrixString/Android-PdfMyXml" target="_blank" rel="external">https://github.com/HendrixString/Android-PdfMyXml</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Showcases"><a href="#Showcases" class="headerlink" title="Showcases"></a>Showcases</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">android-best-practices</a></td>
<td><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">https://github.com/futurice/android-best-practices</a></td>
<td><a href="https://creativecommons.org/licenses/by/4.0/legalcode" target="_blank" rel="external">CC BY 4.0</a></td>
</tr>
<tr>
<td><a href="https://github.com/patrickfav/BlurTestAndroid" target="_blank" rel="external">BlurTestAndroid</a></td>
<td><a href="https://github.com/patrickfav/BlurTestAndroid" target="_blank" rel="external">https://github.com/patrickfav/BlurTestAndroid</a></td>
<td>Unknown</td>
</tr>
<tr>
<td><a href="https://github.com/card-io/card.io-Android-source" target="_blank" rel="external">card.io-Android-source</a></td>
<td><a href="https://github.com/card-io/card.io-Android-source" target="_blank" rel="external">https://github.com/card-io/card.io-Android-source</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
</tr>
<tr>
<td><a href="https://github.com/google/iosched" target="_blank" rel="external">iosched</a></td>
<td><a href="https://github.com/google/iosched" target="_blank" rel="external">https://github.com/google/iosched</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/psaravan/JamsMusicPlayer" target="_blank" rel="external">JamsMusicPlayer</a></td>
<td><a href="https://github.com/psaravan/JamsMusicPlayer" target="_blank" rel="external">https://github.com/psaravan/JamsMusicPlayer</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/stephanenicolas/reflection-no-reflection" target="_blank" rel="external">Reflection No Reflection</a></td>
<td><a href="https://github.com/stephanenicolas/reflection-no-reflection" target="_blank" rel="external">https://github.com/stephanenicolas/reflection-no-reflection</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://mizuu.tv/" target="_blank" rel="external">Mizuu</a></td>
<td><a href="https://github.com/MizzleDK/Mizuu" target="_blank" rel="external">https://github.com/MizzleDK/Mizuu</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://mover.uz" target="_blank" rel="external">Mover</a></td>
<td><a href="https://github.com/Codetail/Mover" target="_blank" rel="external">https://github.com/Codetail/Mover</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/klinker24/Talon-for-Twitter" target="_blank" rel="external">Talon-for-Twitter</a></td>
<td><a href="https://github.com/klinker24/Talon-for-Twitter" target="_blank" rel="external">https://github.com/klinker24/Talon-for-Twitter</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/Telecine" target="_blank" rel="external">Telecine</a></td>
<td><a href="https://github.com/JakeWharton/Telecine" target="_blank" rel="external">https://github.com/JakeWharton/Telecine</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/u2020" target="_blank" rel="external">u2020</a></td>
<td><a href="https://github.com/JakeWharton/u2020" target="_blank" rel="external">https://github.com/JakeWharton/u2020</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://graphhopper.com" target="_blank" rel="external">GraphHopper</a></td>
<td><a href="https://github.com/graphhopper/graphhopper" target="_blank" rel="external">https://github.com/graphhopper/graphhopper</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/mapsforge/mapsforge" target="_blank" rel="external">Mapsforge</a></td>
<td><a href="https://github.com/mapsforge/mapsforge" target="_blank" rel="external">https://github.com/mapsforge/mapsforge</a></td>
<td><a href="https://www.gnu.org/licenses/lgpl.html" target="_blank" rel="external">LGPL</a></td>
</tr>
</tbody>
</table>
<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/dlew/joda-time-android" target="_blank" rel="external">Joda Time Android</a></td>
<td><a href="https://github.com/dlew/joda-time-android" target="_blank" rel="external">https://github.com/dlew/joda-time-android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/BoltsFramework/Bolts-Android" target="_blank" rel="external">Bolts</a></td>
<td><a href="https://github.com/BoltsFramework/Bolts-Android" target="_blank" rel="external">https://github.com/BoltsFramework/Bolts-Android</a></td>
<td><a href="https://en.wikipedia.org/wiki/BSD_licenses" target="_blank" rel="external">BSD</a></td>
</tr>
<tr>
<td><a href="http://prashantsolanki3.github.io/Secure-Pref-Manager/" target="_blank" rel="external">Secure Preference Manager</a></td>
<td><a href="http://prashantsolanki3.github.io/Secure-Pref-Manager/" target="_blank" rel="external">http://prashantsolanki3.github.io/Secure-Pref-Manager/</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md" target="_blank" rel="external">GitHub Android Libraries Top 100 简介</a><br>[2]<a href="https://github.com/Freelander/Android_Data" target="_blank" rel="external">Android 学习资料收集</a><br>[3]<a href="https://github.com/wasabeef/awesome-android-libraries" target="_blank" rel="external">List of Android Libraries</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本项目主要对目前 GitHub 上排名前 100 的 Android 开源库进行简单的介绍, 至于排名完全是根据 GitHub 搜索 Java 语言选择 (Best Match) 得到的结果, 然后过滤了跟 Android 不相关的项目, 所以排名并不具备任何官方效力, 仅供参考学习, 方便初学者快速了解当前一些流行的 Android 开源库.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="GitHub" scheme="http://ipcreator.me/tags/GitHub/"/>
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
  </entry>
  
  <entry>
    <title>Less Code——For the Best Android Tools Library</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Android/3rdLib/less-code/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Android/3rdLib/less-code/</id>
    <published>2017-03-30T14:18:06.000Z</published>
    <updated>2017-03-30T14:18:17.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><blockquote>
<ul>
<li>support more effective methods than android</li>
<li>high performence</li>
<li>easy integration</li>
<li>small size (only 45k~ by proguard)</li>
<li>open source</li>
</ul>
</blockquote>
<a id="more"></a>
<h1 id="LessCode"><a href="#LessCode" class="headerlink" title="LessCode"></a>LessCode</h1><p>less code, more efficient for android, for the best android tools library!</p>
<h2 id="中文版文档"><a href="#中文版文档" class="headerlink" title="中文版文档"></a><a href="https://github.com/openproject/LessCode/blob/master/README-cn.md" target="_blank" rel="external">中文版文档</a></h2><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile(<span class="string">'com.jayfeng:lesscode-core:2.1'</span>)</div></pre></td></tr></table></figure>
<h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><table>
<thead>
<tr>
<th>源码</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>ActivityLess</td>
<td>Activity相关辅助类：去标题，全屏，两次退出提示，优化Overdraw背景等</td>
</tr>
<tr>
<td>AdapterLess</td>
<td>打造通用的BaseAdapter，PagerAdapter，RecyclerView.Adapter等</td>
</tr>
<tr>
<td>AlarmLess</td>
<td>定时器相关</td>
</tr>
<tr>
<td>AppLess</td>
<td>获取应用版本，名称，签名，清理缓存等</td>
</tr>
<tr>
<td>BitmapLess</td>
<td>Bitmap处理相关</td>
</tr>
<tr>
<td>CacheLess</td>
<td>缓存网络请求返回的json</td>
</tr>
<tr>
<td>DeviceLess</td>
<td>获取设备信息，比如mac</td>
</tr>
<tr>
<td>DisplayLess</td>
<td>屏幕相关，比如dp和px的转换，状态栏或者标题栏的高度，dpi判断</td>
</tr>
<tr>
<td>DrawableLess</td>
<td>通用的着色方案</td>
</tr>
<tr>
<td>EncodeLess</td>
<td>md5加密</td>
</tr>
<tr>
<td>FileLess</td>
<td>文件处理相关</td>
</tr>
<tr>
<td>HttpLess</td>
<td>简单的Http工具类，如果是专业用途还是用其他更强大的第三方库吧</td>
</tr>
<tr>
<td>ImageLess</td>
<td>图片相关</td>
</tr>
<tr>
<td>KeyBoardLess</td>
<td>输入法的弹出或隐藏</td>
</tr>
<tr>
<td>LogLess</td>
<td>强大的Log库</td>
</tr>
<tr>
<td>NetworkLess</td>
<td>网络判断</td>
</tr>
<tr>
<td>ResourceLess</td>
<td>根据资源名获取ID</td>
</tr>
<tr>
<td>SerializeLess</td>
<td>序列化和反序列化</td>
</tr>
<tr>
<td>SharedPreferenceLess</td>
<td>简化和增强SharedPreference的操作</td>
</tr>
<tr>
<td>StorageLess</td>
<td>手机存储相关,包括:手机内存,内置存储卡(Sdcard),外置存储卡(ExtSdcard)</td>
</tr>
<tr>
<td>ToastLess</td>
<td>简化Toast的使用</td>
</tr>
<tr>
<td>UpdateLess/UpdateService</td>
<td>简单但完整的自动更新实现，无缝对接(已分离到LessCode-Update项目)</td>
</tr>
<tr>
<td>ViewLess</td>
<td>简化繁琐的findViewById和强制转换</td>
</tr>
</tbody>
</table>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>####Config</p>
<ul>
<li><p>Required</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.getInstance()</div><div class="line"> .context(getApplicationContext())</div><div class="line"> .build();</div></pre></td></tr></table></figure>
</li>
<li><p>Optional</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$.getInstance()</div><div class="line"> .context(getApplicationContext())</div><div class="line"> .log(BuildConfig.DEBUG, <span class="string">"LESSCODE"</span>) <span class="comment">// LogLess - debug, tag</span></div><div class="line"> .update(<span class="keyword">null</span>, <span class="number">5</span>) <span class="comment">// UpdateLess - null means the default value, 5 is the notification frequent, default is 5</span></div><div class="line"> .http(<span class="number">5000</span>, <span class="number">5000</span>) <span class="comment">// HttpLess - default connect and read timeout</span></div><div class="line"> .build();</div></pre></td></tr></table></figure>
</li>
</ul>
<p>####Android VS LessCode</p>
<ul>
<li><p>ViewLess</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 强制转化View类型</span></div><div class="line"><span class="comment">// Before</span></div><div class="line">ListView listView = (ListView) findViewById(R.id.list);</div><div class="line"><span class="comment">// After</span></div><div class="line">ListView listView = ViewLess.$(<span class="keyword">this</span>, R.id.list);</div></pre></td></tr></table></figure>
</li>
<li><p>ActivityLess</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 无标题全屏</span></div><div class="line"><span class="comment">// Before</span></div><div class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line">getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);</div><div class="line">            activity.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,</div><div class="line">                    WindowManager.LayoutParams.FLAG_FULLSCREEN);</div><div class="line"><span class="comment">// After</span></div><div class="line">ActivityLess.$noTitle(<span class="keyword">this</span>);</div><div class="line">ActivityLess.$fullScreen(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Proguard"><a href="#Proguard" class="headerlink" title="Proguard"></a>Proguard</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-dontwarn com.jayfeng.lesscode.**</div></pre></td></tr></table></figure>
<p>See more details on the <a href="https://github.com/openproject/LessCode/wiki" target="_blank" rel="external">Wiki</a></p>
<h2 id="Alternative-libraries"><a href="#Alternative-libraries" class="headerlink" title="Alternative libraries"></a>Alternative libraries</h2><ul>
<li><a href="https://github.com/wyouflf/xUtils3" target="_blank" rel="external">xUtils3</a></li>
<li><a href="https://github.com/litesuits/android-common" target="_blank" rel="external">LiteCommon</a></li>
<li><a href="https://github.com/Trinea/android-common" target="_blank" rel="external">TrineaAndroidCommon</a></li>
<li><a href="https://github.com/jingle1267/android-utils" target="_blank" rel="external">AndroidUtils</a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/openproject/LessCode" target="_blank" rel="external">LessCode</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;support more effective methods than android&lt;/li&gt;
&lt;li&gt;high performence&lt;/li&gt;
&lt;li&gt;easy integration&lt;/li&gt;
&lt;li&gt;small size (only 45k~ by proguard)&lt;/li&gt;
&lt;li&gt;open source&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
      <category term="Less Code" scheme="http://ipcreator.me/tags/Less-Code/"/>
    
  </entry>
  
  <entry>
    <title>Quality Tools for Android</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Android/3rdLib/quality-tools-for-Android/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Android/3rdLib/quality-tools-for-Android/</id>
    <published>2017-03-30T12:18:06.000Z</published>
    <updated>2017-03-30T13:36:05.356Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/19ac85515150735e28bd312043339ca20bbc3462/68747470733a2f2f7261772e6769746875622e636f6d2f7374657068616e656e69636f6c61732f5175616c6974792d546f6f6c732d666f722d416e64726f69642f6d61737465722f6766782f62756764726f69642d64756b652d61726d6f722e6a7067" alt=""></p>
<p>This is an Android sample app + tests that will be used to work on various project to increase the quality of the Android platform.</p>
<p>The idea is that Android programming is still in its infancy compared to the Java world. The Android community needs more robustness in Android apps and it looks like a good idea to build on the Java world experience and use its best tools for Quality Analysis.</p>
<p>We want to provide a full featured industrial development environment that can be used to create more robust projects on Android, by using any of the most interesting and popular technologies.</p>
<p>Here are <a href="https://speakerdeck.com/stephanenicolas/devoxx-2013-fr-beef-you-android-apps-using-java-tools" target="_blank" rel="external">some slides</a> to present Quality Tools for Android.</p>
<a id="more"></a>
<h1 id="Already-integrated"><a href="#Already-integrated" class="headerlink" title="Already integrated :"></a>Already integrated :</h1><ul>
<li>Standard Android testing framework and code coverage using emma, reported in Sonar. That also covers robotium, easy mock and mockito technologies.</li>
<li>Robolectric testing framework and code coverage using Cobertura, reported in Sonar. Now in same eclipse project / maven module as app under test <a href="https://github.com/rgladwell/m2e-android/issues/52" target="_blank" rel="external">thanks to this thread</a>.</li>
<li>UI Automator testing through a new android maven plugin goal (to be released in android-maven-plugin-3.5.2) and result in sonar.</li>
<li>Espresso / Android test kit</li>
<li>Configuration works out of the box in eclipse</li>
<li>Lint integration via Maven.</li>
<li>PMD, findbugs, checkstyle integration via Maven, reported in Sonar.</li>
<li><a href="https://github.com/lewisd32/lint-maven-plugin" target="_blank" rel="external">lint android maven lint</a> integration (pom checker)</li>
<li>Monkey testing is now automated and reported in Sonar.</li>
<li>Add <a href="http://classycle.sourceforge.net/" target="_blank" rel="external">classycle</a> support, to enforce architectural constraints, through <a href="https://github.com/hcoles/classycle-maven-plugin" target="_blank" rel="external">classycle maven plugin</a></li>
<li><a href="https://github.com/square/spoon" target="_blank" rel="external">Spoon from square</a>, including screenshots during tests.<br>*</li>
<li><a href="https://github.com/mosabua/maven-android-sdk-deployer" target="_blank" rel="external">maven-android-sdk-deployer</a> to deliver android jars (including uiautomator)</li>
<li><a href="https://github.com/jeromevdl/sonar-android-lint-plugin" target="_blank" rel="external">sonar android lint plugin</a></li>
<li><a href="https://github.com/square/fest-android" target="_blank" rel="external">FEST Android</a>.</li>
<li>Jacoco <a href="https://github.com/jacoco/jacoco/pull/64#issuecomment-12150910" target="_blank" rel="external">offline instrumentation</a> for both robolectric and standard junit tests.</li>
<li>Testing  technologies integrated :<ul>
<li>Standard Android tests   <ul>
<li>easymock</li>
<li>mockito</li>
<li>mockwebserver</li>
<li>robotium</li>
<li>fest-android</li>
</ul>
</li>
<li>robolectric tests<ul>
<li>hamcrest</li>
<li>easymock</li>
<li>mockito</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/rtyley/android-screenshot-lib" target="_blank" rel="external">Screenshot lib</a> works during UIAutomator tests.</li>
<li><a href="https://github.com/stephanenicolas/boundbox" target="_blank" rel="external">BoundBox</a> is used in some StandardAndroid tests and Robolectric tests.</li>
<li>support for <a href="https://travis-ci.org/stephanenicolas/Quality-Tools-for-Android" target="_blank" rel="external">Travis CI</a>.</li>
<li>Build Status on Travis: <a href="https://api.travis-ci.org/stephanenicolas/Quality-Tools-for-Android" target="_blank" rel="external"><img src="https://api.travis-ci.org/stephanenicolas/Quality-Tools-for-Android.png" alt="Build Status on Travis:"></a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://blog.csdn.net/guijiaoba/article/details/54970658" target="_blank" rel="external">Android静态代码分析</a><br>[2]<a href="http://www.open-open.com/lib/view/open1436497439973.html" target="_blank" rel="external">如何利用工具提高你的 Android 代码质量</a><br>[3]<a href="https://github.com/vincentbrison/vb-android-app-quality" target="_blank" rel="external">vb-android-app-quality</a><br>[4]<a href="http://blog.csdn.net/guijiaoba/article/details/54970658" target="_blank" rel="external">Android静态代码分析</a><br>[5]<a href="http://www.open-open.com/lib/view/open1436497439973.html" target="_blank" rel="external">如何利用工具提高你的 Android 代码质量</a><br>[6]<a href="https://github.com/stephanenicolas/Quality-Tools-for-Android" target="_blank" rel="external">Quality-Tools-for-Android</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/19ac85515150735e28bd312043339ca20bbc3462/68747470733a2f2f7261772e6769746875622e636f6d2f7374657068616e656e69636f6c61732f5175616c6974792d546f6f6c732d666f722d416e64726f69642f6d61737465722f6766782f62756764726f69642d64756b652d61726d6f722e6a7067&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is an Android sample app + tests that will be used to work on various project to increase the quality of the Android platform.&lt;/p&gt;
&lt;p&gt;The idea is that Android programming is still in its infancy compared to the Java world. The Android community needs more robustness in Android apps and it looks like a good idea to build on the Java world experience and use its best tools for Quality Analysis.&lt;/p&gt;
&lt;p&gt;We want to provide a full featured industrial development environment that can be used to create more robust projects on Android, by using any of the most interesting and popular technologies.&lt;/p&gt;
&lt;p&gt;Here are &lt;a href=&quot;https://speakerdeck.com/stephanenicolas/devoxx-2013-fr-beef-you-android-apps-using-java-tools&quot;&gt;some slides&lt;/a&gt; to present Quality Tools for Android.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Findbugs" scheme="http://ipcreator.me/tags/Findbugs/"/>
    
      <category term="Checkstyle" scheme="http://ipcreator.me/tags/Checkstyle/"/>
    
      <category term="PMD" scheme="http://ipcreator.me/tags/PMD/"/>
    
      <category term="Lint" scheme="http://ipcreator.me/tags/Lint/"/>
    
  </entry>
  
  <entry>
    <title>Design Pattern in Android</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Java/design-pattern-in-android/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Java/design-pattern-in-android/</id>
    <published>2017-03-30T12:17:06.000Z</published>
    <updated>2017-03-30T14:57:24.688Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/SimpleFactory.jpg" alt=""></p>
<p>在系统的学习设计模式之后，我们需要达到3个层次：</p>
<ol>
<li>能在白纸上画出所有的模式结构和时序图；</li>
<li>能用代码实现；如果模式的代码都没有实现过，是用不出来的；即所谓，看得懂，不会用；</li>
<li>灵活应用到工作中的项目中；</li>
</ol>
<a id="more"></a>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://blog.csdn.net/zhao_zepeng/article/category/6200162" target="_blank" rel="external"> java/android 设计模式学习笔记</a><br>[2]<a href="https://github.com/zhaozepeng/Design-Patterns" target="_blank" rel="external">Design-Patterns</a><br>[3]<a href="www.douban.com">Android源码设计模式解析与实战</a><br>[4]<a href="http://design-patterns.readthedocs.io/zh_CN/latest/index.html#" target="_blank" rel="external">图说设计模式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://design-patterns.readthedocs.io/zh_CN/latest/_images/SimpleFactory.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在系统的学习设计模式之后，我们需要达到3个层次：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;能在白纸上画出所有的模式结构和时序图；&lt;/li&gt;
&lt;li&gt;能用代码实现；如果模式的代码都没有实现过，是用不出来的；即所谓，看得懂，不会用；&lt;/li&gt;
&lt;li&gt;灵活应用到工作中的项目中；&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Design Pattern" scheme="http://ipcreator.me/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Why I Insist on Practicing Deliberately Everyday</title>
    <link href="http://ipcreator.me/2017/03/30/MyView/Original/why-i-insist-on-practicing-deliberately-eveyday/"/>
    <id>http://ipcreator.me/2017/03/30/MyView/Original/why-i-insist-on-practicing-deliberately-eveyday/</id>
    <published>2017-03-30T12:17:06.000Z</published>
    <updated>2017-03-30T15:13:07.180Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>I can feel and see my growth everyday.<br>Accumulation is powerful. <strong>Big Bang</strong></p>
</blockquote>
<a id="more"></a>
<h2 id="Reading"><a href="#Reading" class="headerlink" title="Reading"></a>Reading</h2><pre><code>+ Stackflow
+ CSDN
+ Github
+ iGet
+ Duokan
+ Douban
+ Zhihu
</code></pre><h2 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h2><pre><code>+ Blog
</code></pre><h2 id="Deep-Thinking"><a href="#Deep-Thinking" class="headerlink" title="Deep Thinking"></a>Deep Thinking</h2><pre><code>+ Sixty Three Game
</code></pre><h2 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h2><pre><code>+ Professional
+ Life
</code></pre><h2 id="Steps-you-move-everyday"><a href="#Steps-you-move-everyday" class="headerlink" title="Steps you move everyday"></a>Steps you move everyday</h2><p>One–&gt;Ten–&gt;Hundred–&gt;Thousand–&gt;Ten Thousand–&gt;One Hundred Thousand<br>–&gt;Million–&gt;Ten Million–&gt;One Hundred Million–&gt;Billion–&gt;…</p>
<h2 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h2><pre><code>+ Code snippet
+ Design Pattern
+ Search Skill
</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="">万维钢</a><br>[2]<a href="">李笑来</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;I can feel and see my growth everyday.&lt;br&gt;Accumulation is powerful. &lt;strong&gt;Big Bang&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Useful Android Resources</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Android/android-knowledge-base/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Android/android-knowledge-base/</id>
    <published>2017-03-30T12:13:06.000Z</published>
    <updated>2017-03-30T15:14:04.922Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Useful Android Resources</p>
</blockquote>
<h2 id="Android-开发中值得看的优秀内容和工具-1"><a href="#Android-开发中值得看的优秀内容和工具-1" class="headerlink" title="Android 开发中值得看的优秀内容和工具[1]"></a>Android 开发中值得看的优秀内容和工具<sup>[1]</sup></h2><h3 id="Android-性能优化"><a href="#Android-性能优化" class="headerlink" title="Android 性能优化"></a>Android 性能优化</h3><ul>
<li><a href="https://github.com/Juude/awesome-android-performance" target="_blank" rel="external">Android性能优化视频，文档以及工具</a></li>
<li><a href="http://hukai.me/blog/archives/" target="_blank" rel="external">胡凯-性能优化</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/42238627" target="_blank" rel="external">Android最佳性能实践(1)：合理管理内存</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/42238633" target="_blank" rel="external">Android最佳性能实践(2)：分析内存的使用情况</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/42318689" target="_blank" rel="external">Android最佳性能实践(3)：高性能编码优化</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/43376527" target="_blank" rel="external">Android最佳性能实践(4)：布局优化技巧</a></li>
<li><a href="https://github.com/moduth/blockcanary" target="_blank" rel="external">blockcanary-轻松找出Android App界面卡顿元凶</a></li>
<li><a href="http://blog.csdn.net/yanzhenjie1003/article/details/52201896" target="_blank" rel="external">Android Splash页秒开 Activity白屏 Activity黑屏</a></li>
</ul>
<a id="more"></a>
<h3 id="Android插件化开发与动态加载"><a href="#Android插件化开发与动态加载" class="headerlink" title="Android插件化开发与动态加载"></a>Android插件化开发与动态加载</h3><ul>
<li><a href="https://github.com/bunnyblue/ACDD" target="_blank" rel="external">OpenAtlas，已改名为ACDD，可以在手机淘宝中见到踪影</a></li>
<li><a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">360的DroidPlugin</a></li>
<li><a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">dynamic-load-apk</a></li>
<li><a href="https://github.com/CtripMobile/DynamicAPK" target="_blank" rel="external">携程DynamicAPK</a></li>
<li><a href="http://tech.meituan.com/mt-android-auto-split-dex.html" target="_blank" rel="external">美团分包</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207151651&amp;idx=1&amp;sn=9eab282711f4eb2b4daf2fbae5a5ca9a&amp;3rd=MzA3MDU4NTYzMw==&amp;scene=6#rd" target="_blank" rel="external">微信/手Q加载方案</a></li>
<li><a href="https://github.com/wequick/Small" target="_blank" rel="external">Small</a></li>
<li><a href="http://www.androidblog.cn/index.php/Index/detail/id/16" target="_blank" rel="external">Android博客周刊专题之《插件化开发》</a></li>
<li><a href="https://github.com/asLody/TurboDex" target="_blank" rel="external">Fast load dex in memory</a></li>
<li><a href="https://github.com/limpoxe/Android-Plugin-Framework" target="_blank" rel="external">Android Plugin Framework 插件开发框架及示例程序，原理介绍等</a></li>
<li><a href="https://github.com/lizhangqu/MainDex" target="_blank" rel="external">获取主dex</a></li>
<li><a href="https://github.com/asLody/VirtualApp" target="_blank" rel="external">应用双开VirtualApp</a></li>
<li><a href="http://yydcdut.com/2016/03/20/split-dex/" target="_blank" rel="external">Android Dex分包之旅</a></li>
<li><a href="https://github.com/iReaderAndroid/ZeusPlugin" target="_blank" rel="external">掌阅-最简单易懂的Android插件补丁框架</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20515113" target="_blank" rel="external">ANROID动态加载技术 系列索引</a></li>
</ul>
<h3 id="Android-热更新"><a href="#Android-热更新" class="headerlink" title="Android 热更新"></a>Android 热更新</h3><ul>
<li><a href="https://github.com/alibaba/dexposed" target="_blank" rel="external">dexposed</a></li>
<li><a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">AndFix</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=0#wechat_redirect" target="_blank" rel="external">QQ空间热修复</a></li>
<li><a href="https://github.com/dodola/HotFix" target="_blank" rel="external">QQ空间热修复实现方案</a></li>
<li><a href="https://github.com/jasonross/Nuwa" target="_blank" rel="external">Nuwa 女娲</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIzMDEyNzM4NQ==&amp;mid=2650956297&amp;idx=1&amp;sn=f4bfdd7b16f95b6d34c6f34d8ce392e0&amp;scene=0&amp;uin=MTY4NDEwODc2Mg%3D%3D&amp;key=cf237d7ae24775e8a8b56c7ea2bb2868382d9036f67165867c202e363b23bb4e596335de9da22825b530281867b47449&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.6+build(15G31" target="_blank" rel="external">Android HotPatch从入门到“放弃”</a>&amp;version=12000006&amp;lang=zh_CN&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=95LpBT0hMvr3CsOzDCiFvaRxltvzQUdRKYWgyVX2qwUNRC1PW%2Bmf8ebbmyh6bwrH)</li>
<li><a href="http://wereadteam.github.io/2016/07/26/AndroidPatch/?from=timeline&amp;isappinstalled=0" target="_blank" rel="external">Android Patch 方案与持续交付</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286341&amp;idx=1&amp;sn=054d595af6e824cbe4edd79427fc2706&amp;scene=2&amp;srcid=0804Rg6BqGmPSPyeUOOLXds3&amp;from=timeline&amp;isappinstalled=0&amp;uin=MTY4NDEwODc2Mg%3D%3D&amp;key=cf237d7ae24775e86d7c5f57902ee2b81f05b64d1b6baf39ba9ad8115ea453e72d5d9f36a58c506d01f2a84e9b6c2eca&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.6+build(15G31" target="_blank" rel="external">Android N混合编译与对热补丁影响解析</a>&amp;version=12000006&amp;lang=zh_CN&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=95LpBT0hMvr3CsOzDCiFvaRxltvzQUdRKYWgyVX2qwUNRC1PW%2Bmf8ebbmyh6bwrH)</li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286306&amp;idx=1&amp;sn=d6b2865e033a99de60b2d4314c6e0a25&amp;scene=0&amp;uin=MTY4NDEwODc2Mg%3D%3D&amp;key=cf237d7ae24775e8857eb5c8144bf27076228deefafb6a0afd4416d54ed479daa6a67f0363c96df893d5cf4e4d3db423&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.6+build(15G31" target="_blank" rel="external">微信Android热补丁实践演进之路</a>&amp;version=12000006&amp;lang=zh_CN&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=95LpBT0hMvr3CsOzDCiFvaRxltvzQUdRKYWgyVX2qwUNRC1PW%2Bmf8ebbmyh6bwrH)</li>
<li><a href="http://blog.csdn.net/sbsujjbcy/article/details/51475499" target="_blank" rel="external">Android热更新之so库的热更新</a></li>
<li><a href="http://blog.csdn.net/sbsujjbcy/article/details/51405207" target="_blank" rel="external">Android aapt实现资源分区（补充携程aapt源码）</a></li>
<li><a href="http://blog.csdn.net/sbsujjbcy/article/details/50839263" target="_blank" rel="external">Android 热修复使用Gradle Plugin1.5改造Nuwa插件</a></li>
<li><a href="http://blog.csdn.net/sbsujjbcy/article/details/50812674" target="_blank" rel="external">Android 热修复Nuwa的原理及Gradle插件源码解析</a></li>
<li><a href="https://github.com/zzz40500/Tinker_imitator" target="_blank" rel="external">Tinker_imitator</a></li>
<li><a href="https://github.com/iReaderAndroid/PatchPluginForZeus" target="_blank" rel="external">ZeusPlugin插件框架热修复gradle插件源码</a></li>
<li><a href="https://github.com/dodola/RocooFix" target="_blank" rel="external">RocooFix</a></li>
<li><a href="http://blog.csdn.net/sbsujjbcy/article/details/51760578" target="_blank" rel="external"> Android Classloader热修复技术之百家齐放</a></li>
<li><a href="http://zjutkz.net/2016/05/10/%E4%BB%8EInstant-Run%E5%87%BA%E5%8F%91%EF%BC%8C%E8%B0%88%E8%B0%88Android%E4%B8%8A%E7%9A%84%E7%83%AD%E4%BF%AE%E5%A4%8D/" target="_blank" rel="external">从Instant-Run出发，谈谈Android上的热修复</a></li>
<li><a href="https://github.com/byteam/delta" target="_blank" rel="external">Android热修复与增量升级，基于微信Tinker原理</a></li>
<li><a href="http://tech.meituan.com/android_robust.html" target="_blank" rel="external">美团Android热更新方案Robust</a></li>
<li><a href="https://github.com/Tencent/tinker" target="_blank" rel="external">腾讯Tinker</a></li>
</ul>
<h3 id="Android-加固与反编译"><a href="#Android-加固与反编译" class="headerlink" title="Android 加固与反编译"></a>Android 加固与反编译</h3><ul>
<li><a href="https://github.com/Juude/droidReverse" target="_blank" rel="external">android反编译工具的合集</a></li>
<li><a href="http://ibotpeaches.github.io/Apktool/" target="_blank" rel="external">Apktool</a></li>
<li><a href="http://sourceforge.net/projects/dex2jar/" target="_blank" rel="external">dex2jar</a></li>
<li><a href="https://github.com/MasonLiuChn/DecompileApk" target="_blank" rel="external">DecompileApk</a></li>
<li><a href="http://www.jianshu.com/p/856bf5b437aa" target="_blank" rel="external">Android APK加固技术方案调研</a></li>
<li><a href="https://github.com/joker535/Baffle" target="_blank" rel="external">Android apk包res 资源混淆工具</a></li>
<li><a href="https://github.com/shwenzhang/AndResGuard" target="_blank" rel="external">微信资源混淆</a></li>
<li><a href="http://tech.meituan.com/mt-android-resource-obfuscation.html" target="_blank" rel="external">美团Android资源混淆保护实践</a></li>
<li><a href="https://github.com/JohnnyYin/ResProguard" target="_blank" rel="external">美团Android资源混淆实现方案</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIzNDA3MDgwNA==&amp;mid=2649229991&amp;idx=1&amp;sn=0fc62c65609143936d10849de6eb8069&amp;scene=2&amp;srcid=0629LJbsgjl7ctiSLYjRYXf5&amp;from=timeline&amp;isappinstalled=0&amp;uin=MTY4NDEwODc2Mg%3D%3D&amp;key=cf237d7ae24775e8a22350257773584f0e2dc2ae515c3e0b8779155f7a039c04e16a736510fe4d44b761a3f2b651a43b&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.6+build(15G31" target="_blank" rel="external">Apk脱壳圣战之—如何脱掉“360加固”的壳</a>&amp;version=12000006&amp;lang=zh_CN&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=95LpBT0hMvr3CsOzDCiFvaRxltvzQUdRKYWgyVX2qwUNRC1PW%2Bmf8ebbmyh6bwrH)</li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzIzNDA3MDgwNA==&amp;mid=2649229983&amp;idx=1&amp;sn=de2bd1a408d74e102ecd13a05512d1fa&amp;scene=21#wechat_redirect" target="_blank" rel="external">Android脱壳圣战之—如何脱掉”爱加密”家的保护壳</a></li>
<li><a href="https://github.com/zhonghanwen/AndroidProguardPlugin" target="_blank" rel="external">一键生成项目混淆代码插件</a></li>
<li><a href="http://blog.csdn.net/jiangwei0910410003/article/details/49336613" target="_blank" rel="external">Android逆向之旅—SO(ELF)文件格式详解</a></li>
<li><a href="http://blog.csdn.net/jiangwei0910410003/article/details/50568487" target="_blank" rel="external">Android逆向之旅—解析编译之后的AndroidManifest文件格式</a></li>
<li><a href="http://blog.csdn.net/jiangwei0910410003/article/details/50628894" target="_blank" rel="external">Android逆向之旅—解析编译之后的Resource.arsc文件格式</a></li>
<li><a href="http://blog.csdn.net/jiangwei0910410003/article/details/50668549" target="_blank" rel="external">Android逆向之旅—解析编译之后的Dex文件格式</a></li>
</ul>
<h3 id="Android-Studio专题"><a href="#Android-Studio专题" class="headerlink" title="Android Studio专题"></a>Android Studio专题</h3><ul>
<li><a href="https://github.com/rholder/gradle-view" target="_blank" rel="external">查看依赖关系的插件</a></li>
<li><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="external">IntelliJ IDEA 简体中文专题教程</a></li>
<li><a href="http://tianweishu.com/2015/12/21/android-studio-debug-tips-you-may-not-know/" target="_blank" rel="external">Android Studio 你不知道的调试技巧</a></li>
<li><a href="http://www.jayfeng.com/2015/11/07/Android%E6%89%93%E5%8C%85%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/" target="_blank" rel="external">Android打包的那些事</a></li>
<li><a href="https://github.com/keyboardsurfer/idea-live-templates" target="_blank" rel="external">idea-live-templates 模板</a></li>
<li><a href="https://github.com/KeepSafe/dexcount-gradle-plugin" target="_blank" rel="external">方法数统计插件，可用于统计是否达到65536个方法</a></li>
<li><a href="https://github.com/winterDroid/android-drawable-importer-intellij-plugin" target="_blank" rel="external">Android-Drawable-Importer插件</a></li>
<li><a href="https://github.com/zzz40500/GsonFormat" target="_blank" rel="external">GsonFormat Json对应的Bean快速生成插件</a></li>
<li><a href="https://github.com/inmite/android-selector-chapek" target="_blank" rel="external">android-selector-chapek Selector生成插件</a></li>
<li><a href="https://github.com/avast/android-butterknife-zelezny" target="_blank" rel="external">快速生成butterknife注解插件</a></li>
<li><a href="https://github.com/konifar/android-material-design-icon-generator-plugin" target="_blank" rel="external">android-material-design-icon-generator图标插件</a></li>
<li><a href="https://github.com/evant/gradle-retrolambda" target="_blank" rel="external">Retrolambda 在java 6 7中使用 lambda表达式插件</a></li>
<li><a href="https://github.com/ligi/GradleDependenciesHelperPlugin" target="_blank" rel="external">Gradle依赖自动补齐插件</a></li>
<li><a href="https://github.com/nicoulaj/idea-markdown" target="_blank" rel="external">idea-markdown编辑器插件</a></li>
<li><a href="https://github.com/Haehnchen/idea-android-studio-plugin" target="_blank" rel="external">从布局中生成View的声明插件</a></li>
<li><a href="https://www.codota.com/" target="_blank" rel="external">codota代码片段搜索，支持Chrome和Android Studio</a></li>
<li><a href="https://github.com/dmytrodanylyk/folding-plugin" target="_blank" rel="external">布局文件分组插件</a></li>
<li><a href="https://github.com/JerzyPuchalski/Android-DPI-Calculator" target="_blank" rel="external">DPI计算插件</a></li>
<li><a href="https://github.com/msdx/gradle-publish" target="_blank" rel="external">gradle-publish 发布库插件</a></li>
<li><a href="https://github.com/andforce/release-android-lib-to-jcenter" target="_blank" rel="external">发布lib到jcenter</a></li>
<li><a href="https://chrome.google.com/webstore/detail/vysor-beta/gidgenkbbabolejbgbpnhbimgjbffefm" target="_blank" rel="external">vysor 这个是Chrome的插件，电脑操作手机</a></li>
<li><a href="http://www.developerphil.com/android-studio-tips-tricks-moving-around/" target="_blank" rel="external">android-studio-tips-tricks-moving-around/</a></li>
<li><a href="http://www.developerphil.com/android-studio-tips-of-the-day-roundup-1/" target="_blank" rel="external">http://www.developerphil.com/android-studio-tips-of-the-day-roundup-1/</a></li>
<li><a href="http://www.developerphil.com/android-studio-tips-of-the-day-roundup-2/" target="_blank" rel="external">http://www.developerphil.com/android-studio-tips-of-the-day-roundup-2/</a></li>
<li><a href="http://www.developerphil.com/android-studio-tips-of-the-day-roundup-3/" target="_blank" rel="external">http://www.developerphil.com/android-studio-tips-of-the-day-roundup-3/</a></li>
<li><a href="http://www.developerphil.com/android-studio-tips-of-the-day-roundup-4/" target="_blank" rel="external">http://www.developerphil.com/android-studio-tips-of-the-day-roundup-4/</a></li>
<li><a href="http://www.developerphil.com/android-studio-tips-of-the-day-roundup-5/" target="_blank" rel="external">http://www.developerphil.com/android-studio-tips-of-the-day-roundup-5/</a></li>
<li><a href="http://www.developerphil.com/android-studio-tips-of-the-day-roundup-6/" target="_blank" rel="external">http://www.developerphil.com/android-studio-tips-of-the-day-roundup-6/</a></li>
<li><a href="http://jiajixin.cn/2015/10/11/android-studio-plugin-dev/" target="_blank" rel="external">Android Studio插件开发</a></li>
<li><a href="http://jiajixin.cn/2015/10/11/android-sdk-mirror/" target="_blank" rel="external">Android SDK镜像服务器搭建</a></li>
<li><p><a href="https://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/" target="_blank" rel="external">Android Studio 插件整理 48 个</a></p>
<h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><ul>
<li><a href="https://segmentfault.com/a/1190000004229002" target="_blank" rel="external">Gradle for Android</a></li>
<li><a href="http://google.github.io/android-gradle-dsl/current/" target="_blank" rel="external">谷歌Gradle官方文档</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIzNTA3MjQwNw==&amp;mid=2650672318&amp;idx=1&amp;sn=74fb2afc4e409be3014ea83aa623a792&amp;scene=2&amp;srcid=0814iBs3jyLcRldTGb3oqFIT&amp;from=timeline&amp;isappinstalled=0&amp;uin=MTY4NDEwODc2Mg%3D%3D&amp;key=cf237d7ae24775e8ab813a673c218977220f758d689261e1700639f2be2698a142186e9c68a3727f6e55683cee9ee94e&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.6+build(15G31" target="_blank" rel="external">Android Gradle 构建系统·初探</a>&amp;version=12000006&amp;lang=zh_CN&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=95LpBT0hMvr3CsOzDCiFvaRxltvzQUdRKYWgyVX2qwUNRC1PW%2Bmf8ebbmyh6bwrH)</li>
<li><a href="http://blog.csdn.net/sbsujjbcy/article/details/52079413" target="_blank" rel="external">Gradle系列之从init.gradle说起</a></li>
<li><a href="http://blog.csdn.net/innost/article/details/48228651" target="_blank" rel="external">深入理解Android之Gradle</a></li>
</ul>
<h3 id="Android-开发中值得看的优秀内容和工具"><a href="#Android-开发中值得看的优秀内容和工具" class="headerlink" title="Android 开发中值得看的优秀内容和工具"></a>Android 开发中值得看的优秀内容和工具</h3><ul>
<li><a href="http://androidcat.com/?step=1&amp;view=CatFragment" target="_blank" rel="external">androidcat</a></li>
<li><a href="https://github.com/mzlogin/awesome-adb" target="_blank" rel="external">ADB 用法大全</a></li>
<li><a href="http://gudong.name/2016/04/07/checkstyle.html" target="_blank" rel="external">使用 CheckStyle 检查代码</a></li>
<li><a href="http://www.jianshu.com/p/3518cf8c6e4c" target="_blank" rel="external">图解 Retrofit - ServiceMethod</a></li>
<li><a href="http://www.jianshu.com/p/aad5aacd79bf" target="_blank" rel="external">OkHttp3源码分析-综述</a></li>
<li><a href="http://dev.qq.com/topic/57ac4a0ea374c75371c08ce8" target="_blank" rel="external">Android进程保活招式大全</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzA5MDg3MjczMg==&amp;mid=2652003543&amp;idx=1&amp;sn=849c06ac198cbfe9cdcfae90b2a17021&amp;scene=1&amp;srcid=0815jxyNu3OlM7PEE8PGhNYa&amp;key=305bc10ec50ec19b21a47f33276f15cf9aee4503429d7392ce9c57f25fe26abae9fb7cffaa188ed67fd7057f3bbdd764&amp;ascene=0&amp;uin=MTM5ODYyMTY4Mg%3D%3D" target="_blank" rel="external">08/07 北京 GDG Android Meetup 活动回顾，讲义，照片</a></li>
<li><a href="https://github.com/square/javapoet" target="_blank" rel="external">Java源码生成（Square JavaWriter）</a></li>
<li><a href="https://github.com/CameloeAnthony/AndroidArchitectureCollection/blob/master/README.md" target="_blank" rel="external">安卓架构文章合集（a collection of android Architecture）</a></li>
<li><a href="http://www.eyrefree.org/2016/03/23/2016-03-23-Hexo-Coding-Pages/" target="_blank" rel="external">OS X 下使用 Hexo 和 Coding Pages 搭建静态博客</a></li>
<li><a href="http://androidxref.com" target="_blank" rel="external">Android系统源码查看，支持在线跟踪引用</a></li>
<li><a href="http://jiajixin.cn" target="_blank" rel="external">贾吉鑫</a></li>
<li><a href="http://wangxinghe.me/blog/2016-02-25/android-tools-traceview/" target="_blank" rel="external">TraceView性能优化工具使用</a></li>
<li><a href="https://github.com/facebook/network-connection-class" target="_blank" rel="external">network-connection-class</a></li>
<li><a href="https://github.com/amfe/article" target="_blank" rel="external">阿里巴巴技术文章</a></li>
<li><a href="http://www.jayfeng.com/2015/11/07/Android%E6%89%93%E5%8C%85%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/" target="_blank" rel="external">Android打包的那些事</a></li>
<li><a href="http://www.infoq.com/cn/android-weekly/" target="_blank" rel="external">InfoQAndroid周报</a></li>
<li><a href="http://www.devtf.cn/" target="_blank" rel="external">开发技术前线</a></li>
<li><a href="http://tech.meituan.com/mt-android-auto-split-dex.html" target="_blank" rel="external">美团Android DEX自动拆包及动态加载简介</a></li>
<li><a href="https://github.com/kesenhoo/android-training-course-in-chinese" target="_blank" rel="external">Android官方培训课程中文版</a></li>
<li><a href="https://github.com/bboyfeiyu/android-tech-frontier" target="_blank" rel="external">一个定期翻译国外Android优质的技术、开源库、软件架构设计、测试等文章的开源项目</a></li>
<li><a href="https://github.com/codepath/android_guides" target="_blank" rel="external">Android Guides</a></li>
<li><a href="https://github.com/android-cn/android-open-project-analysis" target="_blank" rel="external">Android 开源项目源码解析</a></li>
<li><a href="http://chiuki.github.io/android-shaders-filters" target="_blank" rel="external">Android 图像处理教学</a></li>
<li><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">Android 开源项目分类汇总</a></li>
<li><a href="https://github.com/simple-android-framework-exchange/the-fucking-traps-in-android-dev" target="_blank" rel="external">开发过程中遇到的坑</a></li>
<li><a href="https://github.com/aosp-exchange-group/share" target="_blank" rel="external">Android 开源交流</a></li>
<li><a href="https://github.com/simple-android-framework-exchange/simple-android-opensource-framework" target="_blank" rel="external">Android 著名开源库的简版实现</a></li>
<li><a href="https://github.com/android-cn/android-discuss" target="_blank" rel="external">Android 问题交流讨论，大部分是面试题</a></li>
<li><a href="https://github.com/simple-android-framework-exchange/android_design_patterns_analysis" target="_blank" rel="external">android 设计模式</a></li>
<li><a href="https://github.com/android-cn/android-jobs" target="_blank" rel="external">Android 全国职位列表</a></li>
<li><a href="https://github.com/aosp-exchange-group/fuck-2014-flirt-2015" target="_blank" rel="external">fuck-2014-flirt-2015</a></li>
<li><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">AndroidDevTools开发相关资料下载</a></li>
<li><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">android-best-practices最佳实践</a></li>
<li><a href="https://github.com/iluwatar/java-design-patterns" target="_blank" rel="external">java设计模式</a></li>
<li><a href="https://github.com/tianzhijiexian/Android-Best-Practices" target="_blank" rel="external">Android最佳实践示例</a></li>
<li><a href="http://droidyue.com/blog/2014/09/20/interaction-between-java-and-javascript-in-android/?comefrom=http://blogread.cn/news/" target="_blank" rel="external">Android 中 Java 与JavaScript 交互最详尽的总结</a></li>
<li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0824/3356.html" target="_blank" rel="external">如何为drawable着色</a></li>
<li><a href="http://www.race604.com/tint-drawable/" target="_blank" rel="external">Drawable 着色的后向兼容方案</a></li>
<li><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">Awesome-MaterialDesign</a></li>
<li><a href="https://github.com/lizhangqu/InterviewQuestion" target="_blank" rel="external">Android 面试题InterviewQuestion</a></li>
<li><a href="https://github.com/JStumpp/awesome-android" target="_blank" rel="external">awesome-android</a></li>
<li><a href="https://futurestud.io/blog/retrofit-getting-started-and-android-client/" target="_blank" rel="external">Retrofit相关文章</a></li>
<li><a href="http://litesuits.com/" target="_blank" rel="external">Lite Android</a></li>
<li><a href="http://bugly.qq.com/blog/" target="_blank" rel="external">Bugly Blog</a></li>
<li><a href="http://gold.xitu.io/#/tag/Android" target="_blank" rel="external">掘金</a></li>
</ul>
<h3 id="安卓网络层-包含图片"><a href="#安卓网络层-包含图片" class="headerlink" title="安卓网络层(包含图片)"></a>安卓网络层(包含图片)</h3><ul>
<li><a href="https://github.com/square/okhttp" target="_blank" rel="external">okhttp</a></li>
<li><a href="https://github.com/square/retrofit" target="_blank" rel="external">retrofit</a></li>
<li><a href="http://square.github.io/picasso/" target="_blank" rel="external">picasso</a></li>
<li><a href="https://android.googlesource.com/platform/frameworks/volley" target="_blank" rel="external">Volley</a></li>
<li><a href="https://github.com/facebook/fresco" target="_blank" rel="external">fresco</a></li>
<li><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">Android-Universal-Image-Loader</a></li>
<li><a href="https://github.com/stephanenicolas/robospice" target="_blank" rel="external">robospice</a></li>
<li><a href="http://loopj.com/android-async-http/" target="_blank" rel="external">android-async-http</a></li>
<li><a href="https://github.com/amitshekhariitbhu/Fast-Android-Networking" target="_blank" rel="external">Fast-Android-Networking</a></li>
</ul>
</li>
</ul>
<h3 id="安卓orm框架，用得比较多的就GreenDao，Ormlite"><a href="#安卓orm框架，用得比较多的就GreenDao，Ormlite" class="headerlink" title="安卓orm框架，用得比较多的就GreenDao，Ormlite"></a>安卓orm框架，用得比较多的就GreenDao，Ormlite</h3><ul>
<li><a href="http://greendao-orm.com/" target="_blank" rel="external">greenDAO</a></li>
<li><a href="http://ormlite.com/sqlite_java_android_orm.shtml" target="_blank" rel="external">ORMLite</a></li>
<li><a href="https://github.com/pardom/ActiveAndroid/wiki/Getting-started" target="_blank" rel="external">ActiveAndroid</a></li>
<li><a href="http://satyan.github.io/sugar/index.html" target="_blank" rel="external">SugarORM</a></li>
<li><a href="http://siminov.github.io/android-orm/" target="_blank" rel="external">Siminov</a></li>
<li><a href="http://www.androrm.net/" target="_blank" rel="external">androrm</a></li>
<li><p><a href="https://bitbucket.org/qbusict/cupboard/wiki/GettingStarted" target="_blank" rel="external">cupboard</a></p>
<h3 id="安卓Json解析"><a href="#安卓Json解析" class="headerlink" title="安卓Json解析"></a>安卓Json解析</h3></li>
<li><a href="https://github.com/google/gson" target="_blank" rel="external">Gson,用法简单，速度慢</a></li>
<li><a href="https://github.com/alibaba/fastjson" target="_blank" rel="external">fastjson，号称最快</a></li>
<li><p><a href="https://github.com/FasterXML/jackson" target="_blank" rel="external">jackson</a></p>
<h3 id="Android-单元测试"><a href="#Android-单元测试" class="headerlink" title="Android 单元测试"></a>Android 单元测试</h3></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzIwOTQ1MjAwMg==&amp;mid=2247483744&amp;idx=1&amp;sn=e322c5dc19952c563e00a24815399300&amp;scene=0#wechat_redirect" target="_blank" rel="external">使用Mockito和Roboletric进行Android单元测试</a></li>
<li><p><a href="http://robolectric.org/" target="_blank" rel="external">Robolectric</a></p>
<h3 id="Android-开源软件"><a href="#Android-开源软件" class="headerlink" title="Android 开源软件"></a>Android 开源软件</h3></li>
<li><a href="https://github.com/wangdan/AisenWeiBo" target="_blank" rel="external">一个第三方开源微博</a></li>
<li><a href="https://github.com/openproject/AndroidDigest" target="_blank" rel="external">android相关的干货(文摘，名博，github等等)</a></li>
<li><a href="https://github.com/Leaking/WeGit" target="_blank" rel="external">第三方github客户端</a></li>
<li><a href="http://git.oschina.net/oschina/" target="_blank" rel="external">开源中国的系列软件</a></li>
<li><a href="https://github.com/Jhuster/EWeightScale" target="_blank" rel="external">体重档案</a></li>
<li><a href="http://skillcollege.github.io/SimplifyReader/" target="_blank" rel="external">Simplifyreader</a></li>
<li><a href="https://github.com/lzjun567/XiYuanFangApp" target="_blank" rel="external">西源坊</a></li>
</ul>
<h3 id="Android-开发辅助工具"><a href="#Android-开发辅助工具" class="headerlink" title="Android 开发辅助工具"></a>Android 开发辅助工具</h3><ul>
<li><a href="http://gold.xitu.io/entry/56488b7660b20fc9b9c2f0be" target="_blank" rel="external">Charles 从入门到精通</a></li>
<li><a href="http://apps.evozi.com/apk-downloader/" target="_blank" rel="external">Google Play APK下载器</a></li>
<li><a href="http://www.slideshare.net/" target="_blank" rel="external">slideshare</a></li>
<li><a href="https://www.codota.com/" target="_blank" rel="external">codota代码片段搜索，支持Chrome和Android Studio</a></li>
<li><a href="https://chrome.google.com/webstore/detail/vysor-beta/gidgenkbbabolejbgbpnhbimgjbffefm" target="_blank" rel="external">vysor 这个是Chrome的插件，电脑操作手机</a></li>
<li><a href="https://github.com/buunguyen/octotree" target="_blank" rel="external">Browser extension to display GitHub code in tree format</a></li>
<li><a href="http://laod.cn/hosts/2015-google-hosts.html" target="_blank" rel="external">google hosts翻墙，有vpn的忽略</a></li>
<li><a href="http://tool.oschina.net/" target="_blank" rel="external">开源中国在线工具</a></li>
<li><a href="http://apistore.baidu.com/" target="_blank" rel="external">百度ApiStore</a></li>
<li><a href="https://github.com/vim-scripts/Auto-Pairs" target="_blank" rel="external">Vim插件</a></li>
<li><a href="https://github.com/macdao/ocds-guide-to-setting-up-mac" target="_blank" rel="external">强迫症的 Mac 设置指南</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial" target="_blank" rel="external">Linux-Tutorial</a></li>
<li><a href="https://github.com/judasn/Markdown-Syntax-CN" target="_blank" rel="external">Markdown-Syntax-CN</a></li>
</ul>
<h3 id="Android-推送（含IM）"><a href="#Android-推送（含IM）" class="headerlink" title="Android 推送（含IM）"></a>Android 推送（含IM）</h3><ul>
<li><a href="http://www.easemob.com/" target="_blank" rel="external">环信，支持即时音视频</a></li>
<li><a href="http://www.qcloud.com/product/avc.html" target="_blank" rel="external">腾讯云通讯，支持即时音视频</a></li>
<li><a href="https://www.jpush.cn/" target="_blank" rel="external">极光推送和IM</a></li>
<li><a href="http://www.getui.com/" target="_blank" rel="external">个推</a></li>
<li><a href="http://dev.xiaomi.com/doc/?page_id=1670" target="_blank" rel="external">小米推送，在MIUI上属于系统服务框架，共享系统级长连接</a></li>
<li><a href="http://push.baidu.com/" target="_blank" rel="external">百度云推送,部分机型收不到推送，如小米，Bug是否修复未知</a></li>
<li><a href="http://xg.qq.com/xg/" target="_blank" rel="external">腾讯信鸽推送</a></li>
<li><a href="https://www.umeng.com/push" target="_blank" rel="external">友盟推送</a></li>
<li><a href="https://leancloud.cn/" target="_blank" rel="external">leancloud</a></li>
<li><a href="http://www.bmob.cn/products" target="_blank" rel="external">bmob云推送，含IM</a></li>
<li><a href="https://github.com/mogujie/TeamTalk" target="_blank" rel="external">蘑菇街TeamTalk</a></li>
<li><a href="http://www.igniterealtime.org/downloads/index.jsp" target="_blank" rel="external">Openfire+Smack开源Xmpp解决方案</a></li>
</ul>
<h3 id="Android后端等服务"><a href="#Android后端等服务" class="headerlink" title="Android后端等服务"></a>Android后端等服务</h3><ul>
<li><a href="https://parse.com/" target="_blank" rel="external">parse，缺点是服务器在国外，速度慢</a></li>
<li><a href="https://leancloud.cn/" target="_blank" rel="external">leancloud，国内的，仿parse</a></li>
<li><a href="http://www.bmob.cn/" target="_blank" rel="external">Bmob后端云</a></li>
<li><a href="http://www.qiniu.com/" target="_blank" rel="external">七牛云存储</a></li>
<li><p><a href="http://www.apicloud.com/" target="_blank" rel="external">apicloud</a></p>
<h3 id="Android-应用内测平台"><a href="#Android-应用内测平台" class="headerlink" title="Android 应用内测平台"></a>Android 应用内测平台</h3></li>
<li><a href="http://www.pgyer.com/" target="_blank" rel="external">蒲公英，内测应用</a></li>
<li><p><a href="http://fir.im/" target="_blank" rel="external">Fir.im，内测应用</a></p>
<h3 id="Android社会化分享，短信验证，意见反馈，支付等相关"><a href="#Android社会化分享，短信验证，意见反馈，支付等相关" class="headerlink" title="Android社会化分享，短信验证，意见反馈，支付等相关"></a>Android社会化分享，短信验证，意见反馈，支付等相关</h3></li>
<li><p><a href="http://www.umeng.com/" target="_blank" rel="external">友盟,社会化分析，意见反馈</a></p>
</li>
<li><a href="http://mob.com/" target="_blank" rel="external">Sharesdk，社会化分析</a></li>
<li><a href="https://pingxx.com" target="_blank" rel="external">Ping++，支付</a></li>
<li><a href="http://docs.bmob.cn/androidpay/index.html?menukey=fast_start&amp;key=start_android_pay" target="_blank" rel="external">bmob支付，Bmob为广大开发人员提供的统一、正规的收费手段，让没有企业认证的个人开发者，也能通过支付宝和微信向用户收费</a></li>
<li><a href="http://www.yuntongxun.com/ability/toPriceTariff" target="_blank" rel="external">容联云通讯</a></li>
</ul>
<h3 id="安卓开发值得关注的库"><a href="#安卓开发值得关注的库" class="headerlink" title="安卓开发值得关注的库"></a>安卓开发值得关注的库</h3><ul>
<li><a href="https://github.com/JZ-Darkal/AndroidHttpCapture" target="_blank" rel="external">AndroidHttpCapture 手机上抓包</a></li>
<li><a href="https://projectlombok.org/" target="_blank" rel="external">方法自动生成</a></li>
<li><a href="https://github.com/xiaopansky/SpiderWebScoreView" target="_blank" rel="external">Android上的一个蛛网评分控件</a></li>
<li><a href="https://github.com/KeepSafe/ReLinker" target="_blank" rel="external">ReLinker 安全加载so库的方式</a></li>
<li><a href="https://github.com/mthli/SugarTask" target="_blank" rel="external">SugarTask</a></li>
<li><a href="https://github.com/taoliuh/v2ex" target="_blank" rel="external">sync adapter</a></li>
<li><a href="https://github.com/badoo/android-weak-handler" target="_blank" rel="external">Android Weak Handler防止内存泄露</a></li>
<li><a href="https://github.com/path/android-priority-jobqueue" target="_blank" rel="external">Android Priority Job Queue 异步任务调度</a></li>
<li><a href="https://github.com/yigit/android-priority-jobqueue" target="_blank" rel="external">android-priority-jobqueue</a></li>
<li><a href="https://github.com/H07000223/FlycoDialog_Master" target="_blank" rel="external">Android对话框</a></li>
<li><a href="https://github.com/tianzhijiexian/ExRecyclerView/" target="_blank" rel="external">扩展的RecyclerView，拥有添加头、底等多种操作</a></li>
<li><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">MaterialDesign相关库</a></li>
<li><a href="https://github.com/ikew0ng/SwipeBackLayout" target="_blank" rel="external">右滑返回SwipeBackLayout</a></li>
<li><a href="https://github.com/JulienGenoud/android-percent-support-lib-sample" target="_blank" rel="external">百分比布局</a></li>
<li><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a></li>
<li><a href="https://github.com/ksoichiro/Android-ObservableScrollView/" target="_blank" rel="external">ObservableScrollView</a></li>
<li><a href="https://github.com/openproject/LessCode" target="_blank" rel="external">工具库less code, more efficient for android</a></li>
<li><a href="https://github.com/JoanZapata/base-adapter-helper" target="_blank" rel="external">通用适配器</a></li>
<li><a href="https://github.com/SnowdreamFramework/android-log" target="_blank" rel="external">android-log</a></li>
<li><a href="http://nineoldandroids.com/" target="_blank" rel="external">NineOldAndroids</a></li>
<li><a href="https://github.com/jgilfelt/android-viewbadger" target="_blank" rel="external">BadgeView </a></li>
<li><a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="external">CircleImageView</a></li>
<li><a href="https://github.com/MostafaGazar/CustomShapeImageView" target="_blank" rel="external">CustomShapeImageView</a></li>
<li><a href="https://github.com/pedant/sweet-alert-dialog" target="_blank" rel="external">SweetAlert for Android, a beautiful and clever alert dialog</a></li>
<li><a href="https://github.com/johannilsson/android-pulltorefresh" target="_blank" rel="external">android-pulltorefresh</a></li>
<li><a href="https://github.com/jfeinstein10/SlidingMenu" target="_blank" rel="external">SlidingMenu</a></li>
<li><a href="https://github.com/JakeWharton/ViewPagerIndicator" target="_blank" rel="external">ViewPagerIndicator</a></li>
<li><a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="external">一个动画集合库</a></li>
<li><a href="https://github.com/JoanZapata/android-iconify" target="_blank" rel="external">FontAwesome for Android</a></li>
<li><a href="https://github.com/lucasr/twoway-view" target="_blank" rel="external">RecyclerView made simple</a></li>
<li><a href="http://jsoup.org/" target="_blank" rel="external">jsoup库(java)</a></li>
<li><a href="https://github.com/maarek/android-wheel" target="_blank" rel="external">android-wheel</a></li>
<li><a href="https://github.com/wyouflf/xUtils" target="_blank" rel="external">xUtils</a></li>
<li><a href="https://github.com/Trinea/android-common" target="_blank" rel="external">android-common</a></li>
<li><a href="https://github.com/zxing/zxing" target="_blank" rel="external">zxing</a></li>
<li><a href="https://github.com/wangjiegulu/AndroidBucket" target="_blank" rel="external">Android开发常用整理</a></li>
<li><a href="https://github.com/ZhaoKaiQiang/ParticleLayout" target="_blank" rel="external">左滑粒子删除效果</a></li>
<li><a href="https://github.com/typicode/json-server" target="_blank" rel="external">JSON Server：零编码快速“伪造” REST API</a></li>
<li><a href="https://github.com/owncloud/" target="_blank" rel="external">owncloud</a></li>
<li><a href="https://github.com/Freelander/Android_Data" target="_blank" rel="external">Android_Data (Android 学习资料收集)</a></li>
</ul>
<h3 id="安卓资源相关"><a href="#安卓资源相关" class="headerlink" title="安卓资源相关"></a>安卓资源相关</h3><ul>
<li><a href="http://androiddrawables.com/" target="_blank" rel="external">安卓每个版本的Drawable图标</a></li>
<li><a href="https://github.com/liltof/font-awsome-for-android" target="_blank" rel="external">FontAwesome字体图标安卓字符串</a></li>
<li><a href="http://www.google.com/design/spec/style/color.html" target="_blank" rel="external">色系</a></li>
<li><a href="https://github.com/MatthewYork/Colours" target="_blank" rel="external">颜色库</a></li>
<li><a href="https://www.iconfinder.com/" target="_blank" rel="external">IconFinder图标资源</a></li>
<li><a href="http://www.iconfont.cn/" target="_blank" rel="external">阿里巴巴矢量图</a></li>
<li><a href="https://icomoon.io/app/#/select" target="_blank" rel="external">icomoon</a></li>
<li><a href="http://romannurik.github.io/AndroidAssetStudio/" target="_blank" rel="external">AndroidAssetStudio</a></li>
<li><a href="http://android-holo-colors.com/" target="_blank" rel="external">Android Holo颜色生成器</a></li>
<li><a href="http://jgilfelt.github.io/android-actionbarstylegenerator/" target="_blank" rel="external">Android Action Bar Style Generator</a></li>
<li><a href="http://romannurik.github.io/AndroidAssetStudio/nine-patches.html" target="_blank" rel="external">在线.9.png图片生成器</a></li>
<li><a href="http://angrytools.com/android/button/" target="_blank" rel="external">安卓button在线制作工具</a></li>
<li><a href="http://omapzoom.org/?p=platform/frameworks/base.git;a=blob;f=core/res/res/values/themes.xml;hb=master" target="_blank" rel="external">Theme.xml属性</a></li>
<li><p><a href="https://www.parse.com/" target="_blank" rel="external">移动APP云计算平台Parse</a></p>
<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a></li>
<li><a href="http://segmentfault.com/a/1190000003836345?utm_source=Weibo&amp;utm_medium=shareLink&amp;utm_campaign=socialShare" target="_blank" rel="external">用 Git Hooks 进行自动部署</a></li>
<li><a href="http://blog.jobbole.com/76861/" target="_blank" rel="external">Git工作流指南：Forking工作流</a></li>
</ul>
<h3 id="Android-NoSql"><a href="#Android-NoSql" class="headerlink" title="Android NoSql"></a>Android NoSql</h3><ul>
<li><a href="https://github.com/realm/realm-java" target="_blank" rel="external">realm-java</a></li>
<li><a href="https://github.com/couchbase/couchbase-lite-android" target="_blank" rel="external">couchbase-lite-android</a></li>
<li><a href="https://github.com/Jearil/SimpleNoSQL" target="_blank" rel="external">SimpleNoSQL</a></li>
<li><p><a href="https://github.com/nhachicha/SnappyDB/" target="_blank" rel="external">SnappyDB</a></p>
<h3 id="设计网站，可以寻找一些酷炫的设计稿"><a href="#设计网站，可以寻找一些酷炫的设计稿" class="headerlink" title="设计网站，可以寻找一些酷炫的设计稿"></a>设计网站，可以寻找一些酷炫的设计稿</h3></li>
<li><p><a href="https://dribbble.com/" target="_blank" rel="external">https://dribbble.com/</a></p>
</li>
<li><a href="http://pttrns.com/" target="_blank" rel="external">http://pttrns.com/</a></li>
<li><p><a href="http://capptivate.co/" target="_blank" rel="external">http://capptivate.co/</a></p>
<h3 id="国外个人博客"><a href="#国外个人博客" class="headerlink" title="国外个人博客"></a>国外个人博客</h3></li>
<li><a href="http://jakewharton.com/blog" target="_blank" rel="external">Jakewharton</a></li>
<li><a href="http://www.curious-creature.com/" target="_blank" rel="external">Romain Guy</a></li>
<li><a href="http://cyrilmottier.com/" target="_blank" rel="external">Cyril Mottier</a></li>
<li><a href="http://blog.stylingandroid.com/" target="_blank" rel="external">Mark Allison</a></li>
<li><a href="http://blog.danlew.net/" target="_blank" rel="external">Daniel Lew</a></li>
<li><a href="http://www.androidhive.info/" target="_blank" rel="external">Ravi Tamada</a></li>
<li><a href="http://loseyourmarbles.co/about-me/" target="_blank" rel="external">Chris Nash</a></li>
<li><a href="http://www.androiduipatterns.com/" target="_blank" rel="external">juhani@fatrobot.io</a></li>
<li><a href="http://www.grokkingandroid.com/" target="_blank" rel="external">Wolfram Rittmeyer</a></li>
<li><a href="http://geekyouup.blogspot.com/" target="_blank" rel="external">Rich Hyndman</a></li>
</ul>
<h3 id="国外的一些优秀网站"><a href="#国外的一些优秀网站" class="headerlink" title="国外的一些优秀网站"></a>国外的一些优秀网站</h3><ul>
<li><a href="http://androidweekly.net/" target="_blank" rel="external">androidweekly.net</a></li>
<li><a href="http://android-developers.blogspot.ca/" target="_blank" rel="external">Android Developers Blog</a></li>
<li><a href="http://www.vogella.com/tutorials/android.html" target="_blank" rel="external">vogella</a></li>
<li><a href="http://www.tutorialspoint.com/android/" target="_blank" rel="external">tutorialspoint</a></li>
<li><a href="http://code.tutsplus.com/categories/android-sdk" target="_blank" rel="external">tutsplus</a></li>
<li><a href="http://www.coderzheaven.com/android-tutorials/" target="_blank" rel="external">oderzheaven</a></li>
<li><a href="https://thenewcircle.com/training/android/" target="_blank" rel="external">thenewcircle</a></li>
<li><a href="http://www.coreservlets.com/android-tutorial/" target="_blank" rel="external">coreservlets</a></li>
<li><a href="http://droid-blog.net/" target="_blank" rel="external">Droid-Blog</a></li>
<li><a href="https://www.coursera.org/" target="_blank" rel="external">coursera.org</a></li>
<li><a href="http://commonsware.com/blog/archive.html" target="_blank" rel="external">commonsware.com</a></li>
<li><a href="http://android.amberfog.com/" target="_blank" rel="external">http://android.amberfog.com/</a></li>
<li><a href="http://www.anddev.org/" target="_blank" rel="external">anddev</a></li>
</ul>
<h2 id="Android-Knowledge-Base-2"><a href="#Android-Knowledge-Base-2" class="headerlink" title="Android-Knowledge-Base[2]"></a>Android-Knowledge-Base<sup>[2]<sup></sup></sup></h2><h3 id="android不同版本适配"><a href="#android不同版本适配" class="headerlink" title="android不同版本适配"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E9%80%82%E9%85%8D.md" target="_blank" rel="external">android不同版本适配</a></strong></h3><h3 id="android布局适配"><a href="#android布局适配" class="headerlink" title="android布局适配"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%E5%B8%83%E5%B1%80%E9%80%82%E9%85%8D.md" target="_blank" rel="external">android布局适配</a></strong></h3><h3 id="android单元测试"><a href="#android单元测试" class="headerlink" title="android单元测试"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.md" target="_blank" rel="external">android单元测试</a></strong></h3><h3 id="android混淆打包发布"><a href="#android混淆打包发布" class="headerlink" title="android混淆打包发布"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%E6%B7%B7%E6%B7%86%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83.md" target="_blank" rel="external">android混淆打包发布</a></strong></h3><h3 id="Android-Matrix"><a href="#Android-Matrix" class="headerlink" title="Android Matrix"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/Android%20Matrix.md" target="_blank" rel="external">Android Matrix</a></strong></h3><h3 id="Android-studio-配置详细介绍"><a href="#Android-studio-配置详细介绍" class="headerlink" title="Android studio 配置详细介绍"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%20studio.md" target="_blank" rel="external">Android studio 配置详细介绍</a></strong></h3><h3 id="Android-项目重构"><a href="#Android-项目重构" class="headerlink" title="Android 项目重构"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%E9%A1%B9%E7%9B%AE%E9%87%8D%E6%9E%84.md" target="_blank" rel="external">Android 项目重构</a></strong></h3><h3 id="Android-内存分析"><a href="#Android-内存分析" class="headerlink" title="Android 内存分析"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%20%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90.md" target="_blank" rel="external">Android 内存分析</a></strong></h3><h3 id="Android-进程保活"><a href="#Android-进程保活" class="headerlink" title="Android 进程保活"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%E8%BF%9B%E7%A8%8B%E4%BF%9D%E6%B4%BB.md" target="_blank" rel="external">Android 进程保活</a></strong></h3><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="external">设计模式</a></strong></h3><h3 id="java-相关知识"><a href="#java-相关知识" class="headerlink" title="java 相关知识"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/java%20%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86.md" target="_blank" rel="external">java 相关知识</a></strong></h3><h2 id="最全面的-Material-Design-学习资料-3"><a href="#最全面的-Material-Design-学习资料-3" class="headerlink" title="最全面的 Material Design 学习资料[3]"></a>最全面的 Material Design 学习资料<sup>[3]</sup></h2><h2 id="Material-Design-使用教程"><a href="#Material-Design-使用教程" class="headerlink" title="Material Design 使用教程"></a>Material Design 使用教程</h2><ul>
<li><a href="https://material.google.com/" target="_blank" rel="external">Material Design 官网</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="external">Material Design 中文版(极客学院)</a></li>
<li><a href="https://github.com/zdhxiong/Material-Design-Chinese" target="_blank" rel="external">Material Design 最新中文版</a></li>
<li><a href="https://developer.android.com/training/material/index.html" target="_blank" rel="external">Android 5.0 文档</a></li>
<li><a href="https://bboyfeiyu.gitbooks.io/android-tech-frontier/content/issue-8/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0Material%20Design.html" target="_blank" rel="external">开始学习 Materila Design</a></li>
<li><a href="http://blog.csdn.net/growth58/article/details/47972467" target="_blank" rel="external">Android Design Support Library 概览</a> 一系列教程对 Material Design 的常用控件都做了很详细的讲解</li>
<li><a href="http://www.jianshu.com/p/107a2529a56f" target="_blank" rel="external">Android Material Design 简单使用</a></li>
<li><a href="http://www.jianshu.com/p/40efd44802ef" target="_blank" rel="external">Material Design Library 使用汇总</a></li>
<li><a href="http://www.jianshu.com/p/1078568e859f" target="_blank" rel="external">Android Design Support Library 的 代码实验</a></li>
<li><a href="http://www.jianshu.com/p/378ea4ee5a54" target="_blank" rel="external">Material Design 资料收集</a> 这个不得不推荐，向前辈致敬</li>
<li><a href="http://blog.csdn.net/qibin0506/article/details/49069089" target="_blank" rel="external">Android Material Design 动画</a></li>
<li><a href="http://blog.csdn.net/a396901990/article/details/40187203" target="_blank" rel="external">Material Design 详解（动画篇)</a></li>
</ul>
<h2 id="Awesome-系列"><a href="#Awesome-系列" class="headerlink" title="Awesome 系列"></a>Awesome 系列</h2><ul>
<li><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">Awesome-MaterialDesign</a></li>
<li><a href="https://github.com/sachin1092/awesome-material" target="_blank" rel="external">awesome-material</a></li>
<li><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome-android-ui</a></li>
</ul>
<h2 id="开源库"><a href="#开源库" class="headerlink" title="开源库"></a>开源库</h2><ul>
<li><a href="https://github.com/soyoungboy/android-material-design-Open-source-projects" target="_blank" rel="external">android-material-design-Open-source-projects</a> Material Design 开源库集合</li>
<li><a href="https://github.com/navasmdc/MaterialDesignLibrary" target="_blank" rel="external">MaterialDesignLibrary</a> Material Design 风格的各种控件</li>
<li><a href="https://github.com/rey5137/material" target="_blank" rel="external">Material</a> 同上面那个库差不多，也是各种控件</li>
<li><a href="https://github.com/DenisMondon/material-design-library" target="_blank" rel="external">Material Design Library</a> 第三方的 Material Design</li>
<li><a href="https://github.com/florent37/MaterialViewPager" target="_blank" rel="external">MaterialViewPager</a> Material Design 风格的 ViewPager</li>
<li><a href="https://github.com/prolificinteractive/material-calendarview" target="_blank" rel="external">material-calendarview</a> Material Design 风格的日历</li>
<li><a href="https://github.com/jpardogo/PagerSlidingTabStrip" target="_blank" rel="external">PagerSlidingTabStrip</a> Material Design 风格的 TabLayout</li>
<li><a href="https://github.com/rengwuxian/MaterialEditText" target="_blank" rel="external">MaterialEditText</a> Material Design 风格的输入框</li>
<li><a href="https://github.com/MiguelCatalan/MaterialSearchView" target="_blank" rel="external">MaterialSearchView</a> Material Design 风格的搜索框</li>
<li><a href="https://github.com/lsjwzh/MaterialLoadingProgressBar" target="_blank" rel="external">MaterialLoadingProgressBar</a> Material Design 风格的进度指示器</li>
<li><a href="https://github.com/oli107/material-range-bar" target="_blank" rel="external">material-range-bar</a> Material Design 风格的 RangeBar</li>
<li><a href="https://github.com/afollestad/material-camera" target="_blank" rel="external">material-camera</a> Material Design 风格的 Camera</li>
<li><a href="https://github.com/lgvalle/Material-Animations" target="_blank" rel="external">Material-Animations</a> Material Design 动画效果</li>
<li><a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="external">material-dialogs</a> MD 风格的弹框</li>
<li><a href="https://github.com/balysv/material-ripple" target="_blank" rel="external">material-ripple</a> 支持 api 14 以上的水波纹效果</li>
<li><a href="https://github.com/deano2390/MaterialShowcaseView" target="_blank" rel="external">MaterialShowcaseView</a> MD 风格的透明指示层</li>
<li><a href="https://github.com/iammert/MaterialIntroView" target="_blank" rel="external">MaterialIntroView</a> 类似 <a href="http://www.thefabulous.co/" target="_blank" rel="external">Fabulous App</a> MD 风格的功能引导库</li>
<li><a href="https://github.com/material-components/material-components-android" target="_blank" rel="external">material-components-android</a> MD 风格的组件集合</li>
</ul>
<h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><ul>
<li><a href="http://weibo.com/ttarticle/p/show?id=2309404021772117763644" target="_blank" rel="external">十款 Material Design 风格的 Android 开源项目</a></li>
<li><a href="https://github.com/googlesamples/android-UniversalMusicPlayer#universal-android-music-player-sample" target="_blank" rel="external">Universal Android Music Player</a> 谷歌的一款 Material Design 风格的音乐播放器播放器，非常的漂亮</li>
<li><a href="https://github.com/nickbutcher/plaid" target="_blank" rel="external">plaid</a> 非常给力的一个项目，有着很酷炫的动画效果</li>
<li><a href="https://github.com/saulmm/Material-Movies" target="_blank" rel="external">Material-Movies</a> Material Design 风格的视频播放器</li>
<li><a href="https://github.com/chentao0707/SimplifyReader" target="_blank" rel="external">Simplifyreader</a></li>
<li><a href="https://github.com/xcc3641/" target="_blank" rel="external">SeeWeather</a></li>
<li><a href="https://github.com/Qixingchen/MD-BiliBili" target="_blank" rel="external">MD-BiliBili</a> 基于 Material Design 的 BiliBili 第三方 Android 客户端</li>
<li><a href="https://github.com/drakeet/meizhi" target="_blank" rel="external">meizhi</a> 妹纸，满满的福利</li>
<li><a href="https://github.com/Freelander/Elephant" target="_blank" rel="external">Elephant</a> PHPHub 第三方客户端</li>
<li><a href="https://github.com/chenyangcun/MaterialDesignExample" target="_blank" rel="external">MaterialDesignExample</a> 最早出现的 Material Design 风格的app之一，用来演示 Material Design 控件的使用</li>
<li><a href="https://github.com/hymanme/MaterialHome" target="_blank" rel="external">MaterialHome</a> 一款图书展示类 app</li>
<li><a href="https://github.com/hefuyicoder/ListenerMusicPlayer" target="_blank" rel="external">ListenerMusicPlayer</a> 一款优雅的遵循 Material Design 的开源音乐播放器</li>
<li><a href="https://github.com/frogermcs/InstaMaterial" target="_blank" rel="external">InstaMaterial</a> Material Design 设计风格的 Instagram</li>
<li><a href="https://github.com/harjot-oberai/MusicDNA" target="_blank" rel="external">MusicDNA</a> 这款播放器真是炫瞎眼了</li>
</ul>
<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><ul>
<li><a href="http://www.jikexueyuan.com/course/124.html?Hmsr=p_w" target="_blank" rel="external">谷歌 Material Design 设计语言详解</a> 极客学院的 Material Design 视频教程</li>
<li><a href="http://www.imooc.com/learn/215" target="_blank" rel="external">Android 5.0新特性-Material Design</a> 慕课网上的视频教程</li>
<li><a href="https://www.youtube.com/watch?v=fuSx8J6xLho&amp;list=PLshdtb5UWjSoLy2LPP1FsHi1hwoAS4SBi" target="_blank" rel="external">Android Material Design Tutorial</a> YouTobe 上的视频教程</li>
</ul>
<h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><ul>
<li><a href="https://www.materialui.co/icons" target="_blank" rel="external">Material UI Icons</a></li>
<li><a href="https://material.io/icons/" target="_blank" rel="external">Material icons</a></li>
<li><a href="https://github.com/google/material-design-icons" target="_blank" rel="external">material-design-icons</a></li>
<li><a href="http://jaqen.me/mdpub/" target="_blank" rel="external">Android Material 材料风格图标LOGO生成器</a></li>
<li><a href="https://github.com/LPZilva/Google-Material-Icons-for-Sketch" target="_blank" rel="external">Google-Material-Icons-for-Sketch</a></li>
</ul>
<h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><ul>
<li><a href="https://www.materialpalette.com/" target="_blank" rel="external">material palette</a> Material Design 调色板</li>
<li><a href="https://material.uplabs.com/" target="_blank" rel="external">MaterialUp</a> 如果你不知道怎样设计一款漂亮的 Material Design 风格的 APP，那你可以参考它，上面有很多漂亮的模板</li>
<li><a href="http://next.36kr.com/posts/collections/200" target="_blank" rel="external">优秀的 Material Design 产品</a> 收集的都是 Material Desing 风格的应用</li>
</ul>
<h2 id="知乎讨论"><a href="#知乎讨论" class="headerlink" title="知乎讨论"></a>知乎讨论</h2><ul>
<li><a href="https://www.zhihu.com/question/24276657" target="_blank" rel="external">如何理解 Google 的 Material Design 设计语言?</a></li>
<li><a href="https://www.zhihu.com/question/37376355" target="_blank" rel="external">哪些因素阻碍国内 BAT 的移动应用采用 Material Design?</a></li>
<li><a href="https://www.zhihu.com/question/36992060" target="_blank" rel="external">Material Design 设计规范是否不太适合像淘宝这样大而全的厚重的应用程序？</a></li>
<li><a href="https://www.zhihu.com/question/24431206" target="_blank" rel="external">Material Design 有什么缺点？</a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/lizhangqu/CoreLink" target="_blank" rel="external">Android 开发中的日常积累</a><br>[2]<a href="https://github.com/zhaozepeng/Android-Knowledge-Base" target="_blank" rel="external">Android-Knowledge-Base</a><br>[3]<a href="https://github.com/Luosunce/material-design-data" target="_blank" rel="external">最全面的 Material Design 学习资料</a><br>[4]<a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">Curated list of awesome lists</a><br>[5]<a href="https://github.com/vhf/free-programming-books" target="_blank" rel="external">Freely available programming books</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Useful Android Resources&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Android-开发中值得看的优秀内容和工具-1&quot;&gt;&lt;a href=&quot;#Android-开发中值得看的优秀内容和工具-1&quot; class=&quot;headerlink&quot; title=&quot;Android 开发中值得看的优秀内容和工具[1]&quot;&gt;&lt;/a&gt;Android 开发中值得看的优秀内容和工具&lt;sup&gt;[1]&lt;/sup&gt;&lt;/h2&gt;&lt;h3 id=&quot;Android-性能优化&quot;&gt;&lt;a href=&quot;#Android-性能优化&quot; class=&quot;headerlink&quot; title=&quot;Android 性能优化&quot;&gt;&lt;/a&gt;Android 性能优化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Juude/awesome-android-performance&quot;&gt;Android性能优化视频，文档以及工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hukai.me/blog/archives/&quot;&gt;胡凯-性能优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/42238627&quot;&gt;Android最佳性能实践(1)：合理管理内存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/42238633&quot;&gt;Android最佳性能实践(2)：分析内存的使用情况&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/42318689&quot;&gt;Android最佳性能实践(3)：高性能编码优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/43376527&quot;&gt;Android最佳性能实践(4)：布局优化技巧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/moduth/blockcanary&quot;&gt;blockcanary-轻松找出Android App界面卡顿元凶&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/yanzhenjie1003/article/details/52201896&quot;&gt;Android Splash页秒开 Activity白屏 Activity黑屏&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Resource" scheme="http://ipcreator.me/tags/Resource/"/>
    
  </entry>
  
  <entry>
    <title>Leak Canary——A memory leak detection library for Android and Java</title>
    <link href="http://ipcreator.me/2017/03/29/Program/Android/3rdLib/leak-canary/"/>
    <id>http://ipcreator.me/2017/03/29/Program/Android/3rdLib/leak-canary/</id>
    <published>2017-03-29T09:47:06.000Z</published>
    <updated>2017-03-29T10:59:51.627Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/square/leakcanary/raw/master/assets/screenshot.png" alt=""></p>
<p>A memory leak detection library for Android and Java.</p>
<p>“A small leak will sink a great ship.” - Benjamin Franklin</p>
<a id="more"></a>
<h1 id="LeakCanary"><a href="#LeakCanary" class="headerlink" title="LeakCanary"></a>LeakCanary</h1><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>In your <code>build.gradle</code>:</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">  debugCompile <span class="string">'com.squareup.leakcanary:leakcanary-android:1.5'</span></div><div class="line">  releaseCompile <span class="string">'com.squareup.leakcanary:leakcanary-android-no-op:1.5'</span></div><div class="line">  testCompile <span class="string">'com.squareup.leakcanary:leakcanary-android-no-op:1.5'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In your <code>Application</code> class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    <span class="keyword">if</span> (LeakCanary.isInAnalyzerProcess(<span class="keyword">this</span>)) &#123;</div><div class="line">      <span class="comment">// This process is dedicated to LeakCanary for heap analysis.</span></div><div class="line">      <span class="comment">// You should not init your app in this process.</span></div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    LeakCanary.install(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">// Normal app init code...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>You’re good to go!</strong> LeakCanary will automatically show a notification when an activity memory leak is detected in your debug build.</p>
<p>Questions? Check out <a href="https://github.com/square/leakcanary/wiki/FAQ" target="_blank" rel="external">the FAQ</a>!</p>
<p><img src="https://github.com/square/leakcanary/raw/master/assets/icon_512.png" alt="icon_512.png"></p>
<h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理[2]"></a>原理<sup>[2]<sup></sup></sup></h2><p>LeakCanary通过square自家的HAHA来自动化分析Android heap dumps，内部基于MAT, vshor/mat，AndroMAT来做Java和Android特定的heap分析，亮点则是其将需要人工分析的事情做到了完全自动化，并给出能帮助快速定位修复内存泄露的信息。</p>
<p>在Application中使用LeakCanary.install(this)后，LeakCanary就会自动install一个ActivityRefWatcher来自动化检测activity是否在onDestroy后有泄露。具体步骤大致是</p>
<ol>
<li>自动把activity加入到KeyedWeakReference</li>
<li>在background线程中，检查onDestroy后reference是否被清除，且没有触发gc</li>
<li>如果reference没有被清除，则dump heap到一个hprof文件并保存到app文件系统中</li>
<li>在一个单独进程中启动HeapAnalyzerService，HeapAnalyzer使用HAHA来分析heap dump。</li>
<li>HeapAnalyzer在heap dump中根据reference key找到KeyedWeakReference。</li>
<li>HeapAnalyzer计算出到GC Roots的最短强引用路径来判断是否存在泄露，然后build出造成这个泄露的引用链。</li>
<li>结果被传回来app进程的DisplayLeakService，并展示一个泄露的notification。</li>
<li>square称从用了LeakCanary后，发现并修复了很多他们app中的内存泄露，而且找到了一些Android SDK中的泄露，最终减少了94%因为OOM错误导致的crash。</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/square/leakcanary" target="_blank" rel="external">LeakCanary</a><br>[2]<a href="http://blog.zhaiyifan.cn/2015/05/21/import-leakcanary/" target="_blank" rel="external">接入LeakCanary检测内存泄露</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/square/leakcanary/raw/master/assets/screenshot.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;A memory leak detection library for Android and Java.&lt;/p&gt;
&lt;p&gt;“A small leak will sink a great ship.” - Benjamin Franklin&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
      <category term="Leak Canary" scheme="http://ipcreator.me/tags/Leak-Canary/"/>
    
  </entry>
  
  <entry>
    <title>Block Canary——Android Performance Monitor</title>
    <link href="http://ipcreator.me/2017/03/29/Program/Android/3rdLib/block-canary/"/>
    <id>http://ipcreator.me/2017/03/29/Program/Android/3rdLib/block-canary/</id>
    <published>2017-03-29T08:48:06.000Z</published>
    <updated>2017-03-29T08:59:32.625Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/markzhai/AndroidPerformanceMonitor/raw/master/art/flow.png" alt=""></p>
<p>A transparent ui-block detection library for Android, app only needs one-line-code to setup.</p>
<a id="more"></a>
<p><a href="https://github.com/markzhai/AndroidPerformanceMonitor/blob/master/README_CN.md" target="_blank" rel="external">Chinese README</a></p>
<h1 id="Android-Performance-Monitor"><a href="#Android-Performance-Monitor" class="headerlink" title="Android Performance Monitor "></a>Android Performance Monitor <a href="https://maven-badges.herokuapp.com/maven-central/com.github.markzhai/blockcanary-android" target="_blank" rel="external"><img src="https://maven-badges.herokuapp.com/maven-central/com.github.markzhai/blockcanary-android/badge.svg?style=flat" alt="Maven Central"></a></h1><p>A transparent ui-block detection library for Android, app only needs one-line-code to setup.</p>
<p>The naming is to pay respect to the great library <a href="https://github.com/square/leakcanary" target="_blank" rel="external">LeakCanary</a>, ui-related codes are modified from leakcanary’s ui part.</p>
<h1 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h1><p>You may choose how to assemble them as you like.</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="comment">// most often used way, enable notification to notify block event</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.github.markzhai:blockcanary-android:1.5.0'</span></div><div class="line"></div><div class="line">    <span class="comment">// this way you only enable BlockCanary in debug package</span></div><div class="line">    <span class="comment">// debugCompile 'com.github.markzhai:blockcanary-android:1.5.0'</span></div><div class="line">    <span class="comment">// releaseCompile 'com.github.markzhai:blockcanary-no-op:1.5.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>As this library uses <code>getMainLooper().setMessageLogging()</code>, please check if you set it in your app (related issue <a href="https://github.com/moduth/blockcanary/issues/27" target="_blank" rel="external">https://github.com/moduth/blockcanary/issues/27</a>)</p>
<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>Maximum log count is set to 500, you can rewrite it in your app <code>int.xml</code>.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">integer</span> <span class="attr">name</span>=<span class="string">"block_canary_max_stored_count"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Monitor app’s label and icon can be configured by placing a <code>block_canary_icon</code> drawable in your xhdpi drawable directory and in <code>strings.xml</code>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"block_canary_display_activity_label"</span>&gt;</span>Blocks<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="comment">// Do it on main process</span></div><div class="line">        BlockCanary.install(<span class="keyword">this</span>, <span class="keyword">new</span> AppBlockCanaryContext()).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Implement your application <code>BlockCanaryContext</code> context (strongly recommend you to check all these configs)：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppBlockCanaryContext</span> <span class="keyword">extends</span> <span class="title">BlockCanaryContext</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Implement in your project.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Qualifier which can specify this installation, like version + flavor.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">provideQualifier</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"unknown"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Implement in your project.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> user id</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">provideUid</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"uid"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Network type</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125; like 2G, 3G, 4G, wifi, etc.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">provideNetworkType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"unknown"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Config monitor duration, after this time BlockCanary will stop, use</div><div class="line">     * with &#123;<span class="doctag">@code</span> BlockCanary&#125;'s isMonitorDurationEnd</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> monitor last duration (in hour)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">provideMonitorDuration</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Config block threshold (in millis), dispatch over this duration is regarded as a BLOCK. You may set it</div><div class="line">     * from performance of device.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> threshold in mills</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">provideBlockThreshold</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1000</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Thread stack dump interval, use when block happens, BlockCanary will dump on main thread</div><div class="line">     * stack according to current sample cycle.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Because the implementation mechanism of Looper, real dump interval would be longer than</div><div class="line">     * the period specified here (especially when cpu is busier).</div><div class="line">     * &lt;/p&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> dump interval (in millis)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">provideDumpInterval</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> provideBlockThreshold();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Path to save log, like "/blockcanary/", will save to sdcard if can.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> path of log files</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">providePath</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"/blockcanary/"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * If need notification to notice block.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> true if need, else if not need.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">displayNotification</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Implement in your project, bundle files into a zip file.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> src  files before compress</div><div class="line">     * <span class="doctag">@param</span> dest files compressed</div><div class="line">     * <span class="doctag">@return</span> true if compression is successful</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">zip</span><span class="params">(File[] src, File dest)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Implement in your project, bundled log files.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> zippedFile zipped file</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">(File zippedFile)</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Packages that developer concern, by default it uses process name,</div><div class="line">     * put high priority one in pre-order.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> null if simply concern only package with process name.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">concernPackages</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Filter stack without any in concern package, used with @&#123;code concernPackages&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> true if filter, false it not.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filterNonConcernStack</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Provide white list, entry in white list will not be shown in ui list.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> return null if you don't need white-list filter.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">provideWhiteList</span><span class="params">()</span> </span>&#123;</div><div class="line">        LinkedList&lt;String&gt; whiteList = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        whiteList.add(<span class="string">"org.chromium"</span>);</div><div class="line">        <span class="keyword">return</span> whiteList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Whether to delete files whose stack is in white list, used with white-list.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> true if delete, false it not.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteFilesInWhiteList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Block interceptor, developer may provide their own actions.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBlock</span><span class="params">(Context context, BlockInfo blockInfo)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h1><p>Blog in Chinese: <a href="http://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/" target="_blank" rel="external">BlockCanary</a>.</p>
<p>Principle flow picture:</p>
<p><img src="https://github.com/markzhai/AndroidPerformanceMonitor/raw/master/art/flow.png" alt="flow"></p>
<h1 id="Screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h1><p><img src="https://github.com/markzhai/AndroidPerformanceMonitor/raw/master/art/shot1.png" alt=""><br><img src="https://github.com/markzhai/AndroidPerformanceMonitor/raw/master/art/shot2.png" alt=""></p>
<h1 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h1><p>This library is initially created by <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a>, and maintained under the organization <a href="https://github.com/moduth" target="_blank" rel="external">moduth</a> with <a href="https://github.com/nimengbo" target="_blank" rel="external">nimengbo</a> and <a href="https://github.com/zzz40500" target="_blank" rel="external">zzz40500</a>.</p>
<p>Special thanks to <a href="https://github.com/android-cjj" target="_blank" rel="external">android-cjj</a>, <a href="https://github.com/baoyongzhang" target="_blank" rel="external">Mr.Bao</a>, <a href="https://github.com/chiahaolu" target="_blank" rel="external">chiahaolu</a> to contribute.</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>熟悉Message/Looper/Handler系列的同学们一定知道Looper.java中这么一段:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">private static Looper sMainLooper;  // guarded by Looper.class</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">/**</div><div class="line"> * Initialize the current thread as a looper, marking it as an</div><div class="line"> * application&apos;s main looper. The main looper for your application</div><div class="line"> * is created by the Android environment, so you should never need</div><div class="line"> * to call this function yourself.  See also: &#123;@link #prepare()&#125;</div><div class="line"> */</div><div class="line">public static void prepareMainLooper() &#123;</div><div class="line">    prepare(false);</div><div class="line">    synchronized (Looper.class) &#123;</div><div class="line">        if (sMainLooper != null) &#123;</div><div class="line">            throw new IllegalStateException(&quot;The main Looper has already been prepared.&quot;);</div><div class="line">        &#125;</div><div class="line">        sMainLooper = myLooper();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/** Returns the application&apos;s main looper, which lives in the main thread of the application.</div><div class="line"> */</div><div class="line">public static Looper getMainLooper() &#123;</div><div class="line">    synchronized (Looper.class) &#123;</div><div class="line">        return sMainLooper;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是的，就是这个Printer - mLogging，它在每个message处理的前后被调用，而如果<strong>主线程卡住了，不就是在dispatchMessage里卡住了吗？</strong></p>
<p>核心流程图：<br><img src="http://blog.zhaiyifan.cn/images/blockcanary_flow.png" alt=""></p>
<p>该组件利用了主线程的消息队列处理机制，通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Looper.getMainLooper().setMessageLogging(mainLooperPrinter);</div></pre></td></tr></table></figure></p>
<p>并在mainLooperPrinter中判断start和end，来获取主线程dispatch该message的开始和结束时间，并判定该时间超过阈值(如2000毫秒)为主线程卡慢发生，并dump出各种信息，提供开发者分析性能瓶颈。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void println(String x) &#123;</div><div class="line">    if (!mStartedPrinting) &#123;</div><div class="line">        mStartTimeMillis = System.currentTimeMillis();</div><div class="line">        mStartThreadTimeMillis = SystemClock.currentThreadTimeMillis();</div><div class="line">        mStartedPrinting = true;</div><div class="line">    &#125; else &#123;</div><div class="line">        final long endTime = System.currentTimeMillis();</div><div class="line">        mStartedPrinting = false;</div><div class="line">        if (isBlock(endTime)) &#123;</div><div class="line">            notifyBlockEvent(endTime);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private boolean isBlock(long endTime) &#123;</div><div class="line">    return endTime - mStartTimeMillis &gt; mBlockThresholdMillis;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说到此处，想到是不是可以用mainLooperPrinter来做更多事情呢？既然主线程都在这里，那只要parse出app包名的第一行，每次打印出来，是不是就不需要打点也能记录出用户操作路径？ 再者，比如想做onClick到页面创建后的耗时统计，是不是也能用这个原理呢？ 之后可以试试看这个思路（目前存在问题是获取线程堆栈是定时3秒取一次的，很可能一些比较快的方法操作一下子完成了没法在stacktrace里面反映出来）。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>BlockCanary作为一个Android组件，目前还有局限性，因为其在一个完整的监控系统中只是一个生产者，还需要对应的消费者去分析日志，比如归类排序，以便看出哪些卡慢更有修复价值，需要优先处理；又比如需要过滤机型，有些奇葩机型的问题造成的卡慢，到底要不要去修复是要斟酌的。扯远一点的话，像是埋点除了统计外，完全还能用来做链路监控，比如一个完整的流程是A -&gt; B -&gt; D -&gt; E, 但是某个时间节点突然A -&gt; B -&gt; D后没有到达E，这时候监控平台就可以发出预警，让开发人员及时定位。很多监控方案都需要C/S两端的配合。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/markzhai/AndroidPerformanceMonitor" target="_blank" rel="external">AndroidPerformanceMonitor</a><br>[2]<a href="http://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/" target="_blank" rel="external">BlockCanary — 轻松找出Android App界面卡顿元凶</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/markzhai/AndroidPerformanceMonitor/raw/master/art/flow.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;A transparent ui-block detection library for Android, app only needs one-line-code to setup.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
      <category term="Block Canary" scheme="http://ipcreator.me/tags/Block-Canary/"/>
    
  </entry>
  
  <entry>
    <title>EventBus——the  No.1 Open Source Event Library for Android</title>
    <link href="http://ipcreator.me/2017/03/29/Program/Android/3rdLib/event-bus/"/>
    <id>http://ipcreator.me/2017/03/29/Program/Android/3rdLib/event-bus/</id>
    <published>2017-03-29T07:26:06.000Z</published>
    <updated>2017-03-29T15:30:37.405Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/greenrobot/EventBus/raw/master/EventBus-Publish-Subscribe.png" alt=""></p>
<p>EventBus is an open-source library for Android using the publisher/subscriber pattern for loose coupling. EventBus enables central communication to decoupled classes with just a few lines of code – simplifying the code, removing dependencies, and speeding up app development.</p>
<a id="more"></a>
<h2 id="EventBus…"><a href="#EventBus…" class="headerlink" title="EventBus…"></a>EventBus…</h2><ul>
<li>simplifies the communication between components<ul>
<li>decouples event senders and receivers</li>
<li>performs well with Activities, Fragments, and background threads</li>
<li>avoids complex and error-prone dependencies and life cycle issues</li>
</ul>
</li>
<li>makes your code simpler</li>
<li>is fast</li>
<li>is tiny (~50k jar)</li>
<li>is proven in practice by apps with 100,000,000+ installs</li>
<li>has advanced features like delivery threads, subscriber priorities, etc.</li>
</ul>
<h2 id="EventBus-in-3-steps"><a href="#EventBus-in-3-steps" class="headerlink" title="EventBus in 3 steps"></a>EventBus in 3 steps</h2><h3 id="Step-1-Define-events"><a href="#Step-1-Define-events" class="headerlink" title="Step 1: Define events"></a>Step 1: Define events</h3><p> Events are POJO (plain old Java object) without any specific requirements.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class MessageEvent &#123;</div><div class="line"></div><div class="line">    public final String message;</div><div class="line"></div><div class="line">    public MessageEvent(String message) &#123;</div><div class="line">        this.message = message;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Step-2-Prepare-subscribers"><a href="#Step-2-Prepare-subscribers" class="headerlink" title="Step 2: Prepare subscribers"></a>Step 2: Prepare subscribers</h3><p> Subscribers implement event handling methods (also called “subscriber methods”) that will be called when an event is posted. These are defined with the @Subscribe annotation.</p>
<p> Note that with EventBus 3 the method name can be chosen freely (no naming conventions like in EventBus 2).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// This method will be called when a MessageEvent is posted (in the UI thread for Toast)</div><div class="line">@Subscribe(threadMode = ThreadMode.MAIN)</div><div class="line">public void onMessageEvent(MessageEvent event) &#123;</div><div class="line">    Toast.makeText(getActivity(), event.message, Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// This method will be called when a SomeOtherEvent is posted</div><div class="line">@Subscribe</div><div class="line">public void handleSomethingElse(SomeOtherEvent event) &#123;</div><div class="line">    doSomethingWith(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> Subscribers also need to register themselves to and unregister from the bus. Only while subscribers are registered, they will receive events. In Android, in activities and fragments you should usually register according to their life cycle. For most cases onStart/onStop works fine:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onStart() &#123;</div><div class="line">    super.onStart();</div><div class="line">    EventBus.getDefault().register(this);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void onStop() &#123;</div><div class="line">    EventBus.getDefault().unregister(this);</div><div class="line">    super.onStop();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Step-3-Post-events"><a href="#Step-3-Post-events" class="headerlink" title="Step 3: Post events"></a>Step 3: Post events</h3><p> Post an event from any part of your code. All currently registered subscribers matching the event type will receive it.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().post(new MessageEvent(&quot;Hello everyone!&quot;));</div></pre></td></tr></table></figure>
<p><strong>Read the full <a href="http://greenrobot.org/eventbus/documentation/how-to-get-started/" target="_blank" rel="external">getting started guide</a>.</strong></p>
<h2 id="Add-EventBus-to-your-project"><a href="#Add-EventBus-to-your-project" class="headerlink" title="Add EventBus to your project"></a>Add EventBus to your project</h2><p>Please ensure that you are using the latest version by <a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.greenrobot%22%20AND%20a%3A%22eventbus%22" target="_blank" rel="external">checking here</a></p>
<p>Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'org.greenrobot:eventbus:3.0.0'</span></div></pre></td></tr></table></figure></p>
<p>Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.greenrobot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eventbus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.greenrobot%22%20AND%20a%3A%22eventbus%22" target="_blank" rel="external">Or download EventBus from Maven Central</a></p>
<h2 id="Homepage-Documentation-Links"><a href="#Homepage-Documentation-Links" class="headerlink" title="Homepage, Documentation, Links"></a>Homepage, Documentation, Links</h2><p>For more details on EventBus please check <a href="http://greenrobot.org/eventbus" target="_blank" rel="external">EventBus’ website</a>. Here are some direct links you may find useful:</p>
<p><a href="http://greenrobot.org/eventbus/features/" target="_blank" rel="external">Features</a></p>
<p><a href="http://greenrobot.org/eventbus/documentation/" target="_blank" rel="external">Documentation</a></p>
<p><a href="http://greenrobot.org/eventbus/changelog/" target="_blank" rel="external">Changelog</a></p>
<p><a href="http://greenrobot.org/eventbus/documentation/faq/" target="_blank" rel="external">FAQ</a></p>
<p>How does EventBus compare to other solutions, like Otto from Square? Check this <a href="COMPARISON.md">comparison</a>.</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Copyright (C) 2012-2016 Markus Junginger, greenrobot (<a href="http://greenrobot.org" target="_blank" rel="external">http://greenrobot.org</a>)</p>
<p>EventBus binaries and source code can be used according to the <a href="LICENSE">Apache License, Version 2.0</a>.</p>
<h2 id="More-Open-Source-by-greenrobot"><a href="#More-Open-Source-by-greenrobot" class="headerlink" title="More Open Source by greenrobot"></a>More Open Source by greenrobot</h2><p><a href="https://github.com/greenrobot/greenrobot-common" target="_blank" rel="external"><strong>greenrobot-common</strong></a> is a set of utility classes and hash functions for Android &amp; Java projects.</p>
<p><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external"><strong>greenDAO</strong></a> is an ORM optimized for Android: it maps database tables to Java objects and uses code generation for optimal speed.</p>
<p><a href="https://plus.google.com/b/114381455741141514652/+GreenrobotDe/posts" target="_blank" rel="external">Follow us on Google+</a> or check our <a href="http://greenrobot.org/" target="_blank" rel="external">homepage</a> to stay up to date.</p>
<h2 id="EventBus源码分析-3"><a href="#EventBus源码分析-3" class="headerlink" title="EventBus源码分析[3]"></a>EventBus源码分析<sup>[3]</sup></h2><p>EventBus的好处是显而易见的，完全解耦了请求链之间的关系，避免了请求者被长持有，又比广播更轻量，比LocalBroadcast则更强大，接口也简单实用。缺点的话，像是各种Event的定义是一个工作量。</p>
<h2 id="EventBus-otto-LocalBroadcast的选择-4"><a href="#EventBus-otto-LocalBroadcast的选择-4" class="headerlink" title="EventBus, otto, LocalBroadcast的选择[4]"></a>EventBus, otto, LocalBroadcast的选择<sup>[4]</sup></h2><ol>
<li>greenrobot的EventBus</li>
<li>square的otto</li>
<li>android support包里提供的LocalBroadcast</li>
</ol>
<p>三者都是类似订阅/发布的模式，降低了耦合度。与callback比起来，这种事件总线的模式使得两个类没有直接的依赖关系，对架构来说进行了解耦，把双向依赖变成了单向依赖，在大型项目中尤其显得重要。</p>
<h3 id="Why-publish-subscribe"><a href="#Why-publish-subscribe" class="headerlink" title="Why publish/subscribe"></a>Why publish/subscribe</h3><p>一方面，callback很容易产生内存泄露，如I/O、网络操作持有了Activity/Fragment的引用，导致不能及时释放，而团队中也很难保证每个成员都足够优秀在写callback的时候能使用弱引用或静态变量。相比起来订阅/发布者模式则比较简单，直接在BaseActivity的onDestroy释放掉，避免了可能的坑。</p>
<p>另外，从可扩展性、可维护性的角度来说，callback也更局限，比如以前某个接口是告诉上层网络数据拉回来了，现在我们希望扩展，这个接口也支持直接告诉上层数据库拉回来了，向上层屏蔽数据来源，如果用callback，则在一次回调结束后，没有办法再次进行回调了。页面必须自己去处理数据来源和拉数据的逻辑。</p>
<p>虽然有些over-architect的嫌疑，但是<a href="https://github.com/android10/Android-CleanArchitecture" target="_blank" rel="external">Android-CleanArchitecture</a> 确实是一种很clean的architecture，而其也正是通过观察者/订阅者模式来实现了单向依赖。</p>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>EventBus的github上就有其和otto的比较： <a href="https://github.com/greenrobot/EventBus/blob/master/COMPARISON.md" target="_blank" rel="external">EventBus vs Otto</a></p>
<p>总的来说，两者功能差的不多，otto多了Event producers (e.g. for coding cached events)，而EventBus则多了各种线程的处理、订阅者继承、sticky event等。</p>
<p>但从性能来说，由于otto使用了基于反射的annotation，而和EventBus产生了一定的差距（内部应该还有一些其他问题导致的性能差异，待研究）</p>
<p><strong>三者都不支持跨进程，LocalBroadcast内部其实使用的是Handler，所以其实更像是一个utils类。</strong></p>
<p>如果要做选择的话，LocalBroadcast更轻量，otto相比起api更好用，而EventBus则拥有很棒的线程模型，我投EventBus一票，因为onEvent的各种线程回调真的很方便。</p>
<h2 id="Android-Clean-Architecture-5"><a href="#Android-Clean-Architecture-5" class="headerlink" title="Android Clean Architecture[5]"></a>Android Clean Architecture<sup>[5]</sup></h2><h3 id="Clean-architecture"><a href="#Clean-architecture" class="headerlink" title="Clean architecture"></a>Clean architecture</h3><p><img src="https://github.com/android10/Sample-Data/raw/master/Android-CleanArchitecture/clean_architecture.png" alt=""></p>
<h3 id="Architectural-approach"><a href="#Architectural-approach" class="headerlink" title="Architectural approach"></a>Architectural approach</h3><p><img src="https://github.com/android10/Sample-Data/raw/master/Android-CleanArchitecture/clean_architecture_layers.png" alt=""></p>
<h3 id="Architectural-reactive-approach"><a href="#Architectural-reactive-approach" class="headerlink" title="Architectural reactive approach"></a>Architectural reactive approach</h3><p><img src="https://github.com/android10/Sample-Data/raw/master/Android-CleanArchitecture/clean_architecture_layers_details.png" alt=""></p>
<h2 id="应用MVP模式写出可维护的优美Android应用-6"><a href="#应用MVP模式写出可维护的优美Android应用-6" class="headerlink" title="应用MVP模式写出可维护的优美Android应用[6]"></a>应用MVP模式写出可维护的优美Android应用<sup>[6]</sup></h2><h3 id="MVP是什么"><a href="#MVP是什么" class="headerlink" title="MVP是什么"></a>MVP是什么</h3><p>MVP是MVC模式的一个衍生物，可以简单看下图。在MVP模式中，V层完全和M层（在Android中可能是Model、DAO、或者通用的business logic）分开。在中间用P层分隔，从而把数据有关和UI有关完全分离开。</p>
<p><img src="http://img.blog.csdn.net/20150627173920530" alt=""></p>
<h3 id="主流的MVP又有两种实现方式"><a href="#主流的MVP又有两种实现方式" class="headerlink" title="主流的MVP又有两种实现方式"></a>主流的MVP又有两种实现方式</h3><p>１）Activity、Fragment、View直接作为V层。Presenter通过继承被视图层实例化或者通过注入得到。这样Presenter在理想状态下可以完全和Android分离，也剥离了activity的那些生命周期。</p>
<p>2）Activity和Fragment作为P层，另外单独创建一个V层类，持有Activity里面的各种view，并提供接口让Activity调用来更新界面。</p>
<p>为了让V层和P层解耦，通常P层对V层的持有是通过interface的。</p>
<p>一个完整的mvp事件流可以是<br><img src="http://img.blog.csdn.net/20150627174025122" alt=""></p>
<h3 id="个人心得"><a href="#个人心得" class="headerlink" title="个人心得"></a>个人心得</h3><p>不要把presenter当做OnClickListener，View才是来处理用户输入和给予反馈的，presenter不应该知道view内部的逻辑来判断点击某个按钮后做出什么相应。一个简单的判断某个逻辑是否属于presenter的方法是，如果view层不是android，而是java桌面应用，那你的presenter层是不是还能不做更改地work。</p>
<p>view层只做presenter层让你做的，比如上图view层用户点了一个按钮，View调用了presenter.loadUsers，presenter一边在background thread去getUsers，一边调用了view.showLoading()，view层不该自说自话地showLoading。不过如何showLoading，比如展示怎么样的动画，那就是view层的内部矛盾了。</p>
<p>一个很大的好处，就是通过MVP，异步变得很清晰，view层的东西完全是主线程的，只需要等着presenter调就行了。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a><br>[2]<a href="http://greenrobot.org/eventbus/documentation/how-to-get-started/" target="_blank" rel="external">How to get started with EventBus in 3 steps</a><br>[3]<a href="http://blog.zhaiyifan.cn/2015/08/20/EventBus-source/" target="_blank" rel="external">EventBus源码分析</a><br>[4]<a href="http://blog.zhaiyifan.cn/2015/08/17/EventBus:otto:LocalBroadcast%E7%9A%84%E9%80%89%E6%8B%A9/" target="_blank" rel="external">EventBus, otto, LocalBroadcast的选择</a><br>[5]<a href="https://github.com/android10/Android-CleanArchitecture" target="_blank" rel="external">Android-CleanArchitecture</a><br>[6]<a href="http://blog.zhaiyifan.cn/2015/06/01/use-mvp-to-write-nice-code/" target="_blank" rel="external">应用MVP模式写出可维护的优美Android应用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/greenrobot/EventBus/raw/master/EventBus-Publish-Subscribe.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;EventBus is an open-source library for Android using the publisher/subscriber pattern for loose coupling. EventBus enables central communication to decoupled classes with just a few lines of code – simplifying the code, removing dependencies, and speeding up app development.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
      <category term="Event Bus" scheme="http://ipcreator.me/tags/Event-Bus/"/>
    
  </entry>
  
  <entry>
    <title>Butter Knife——Field and method binding for Android views</title>
    <link href="http://ipcreator.me/2017/03/29/Program/Android/3rdLib/butterknife/"/>
    <id>http://ipcreator.me/2017/03/29/Program/Android/3rdLib/butterknife/</id>
    <published>2017-03-29T03:16:06.000Z</published>
    <updated>2017-03-29T03:43:15.424Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/butter%20knife%20logo.png" alt=""></p>
<p>Bind Android views and callbacks to fields and methods.</p>
<a id="more"></a>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Annotate fields with @BindView and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class ExampleActivity extends Activity &#123;</div><div class="line">  @BindView(R.id.title) TextView title;</div><div class="line">  @BindView(R.id.subtitle) TextView subtitle;</div><div class="line">  @BindView(R.id.footer) TextView footer;</div><div class="line"></div><div class="line">  @Override public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.simple_activity);</div><div class="line">    ButterKnife.bind(this);</div><div class="line">    // TODO Use fields...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Instead of slow reflection, code is generated to perform the view look-ups. Calling bind delegates to this generated code that you can see and debug.</p>
<p>The generated code for the above example is roughly equivalent to the following:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void bind(ExampleActivity activity) &#123;</div><div class="line">  activity.subtitle = (android.widget.TextView) activity.findViewById(2130968578);</div><div class="line">  activity.footer = (android.widget.TextView) activity.findViewById(2130968579);</div><div class="line">  activity.title = (android.widget.TextView) activity.findViewById(2130968577);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="RESOURCE-BINDING"><a href="#RESOURCE-BINDING" class="headerlink" title="RESOURCE BINDING"></a>RESOURCE BINDING</h2><p>Bind pre-defined resources with @BindBool, @BindColor, @BindDimen, @BindDrawable, @BindInt, @BindString, which binds an R.bool ID (or your specified type) to its corresponding field.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class ExampleActivity extends Activity &#123;</div><div class="line">  @BindString(R.string.title) String title;</div><div class="line">  @BindDrawable(R.drawable.graphic) Drawable graphic;</div><div class="line">  @BindColor(R.color.red) int red; // int or ColorStateList field</div><div class="line">  @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="NON-ACTIVITY-BINDING"><a href="#NON-ACTIVITY-BINDING" class="headerlink" title="NON-ACTIVITY BINDING"></a>NON-ACTIVITY BINDING</h2><p>You can also perform binding on arbitrary objects by supplying your own view root.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class FancyFragment extends Fragment &#123;</div><div class="line">  @BindView(R.id.button1) Button button1;</div><div class="line">  @BindView(R.id.button2) Button button2;</div><div class="line"></div><div class="line">  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</div><div class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, false);</div><div class="line">    ButterKnife.bind(this, view);</div><div class="line">    // TODO Use fields...</div><div class="line">    return view;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Another use is simplifying the view holder pattern inside of a list adapter.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class MyAdapter extends BaseAdapter &#123;</div><div class="line">  @Override public View getView(int position, View view, ViewGroup parent) &#123;</div><div class="line">    ViewHolder holder;</div><div class="line">    if (view != null) &#123;</div><div class="line">      holder = (ViewHolder) view.getTag();</div><div class="line">    &#125; else &#123;</div><div class="line">      view = inflater.inflate(R.layout.whatever, parent, false);</div><div class="line">      holder = new ViewHolder(view);</div><div class="line">      view.setTag(holder);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    holder.name.setText(&quot;John Doe&quot;);</div><div class="line">    // etc...</div><div class="line"></div><div class="line">    return view;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  static class ViewHolder &#123;</div><div class="line">    @BindView(R.id.title) TextView name;</div><div class="line">    @BindView(R.id.job_title) TextView jobTitle;</div><div class="line"></div><div class="line">    public ViewHolder(View view) &#123;</div><div class="line">      ButterKnife.bind(this, view);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can see this implementation in action in the provided sample.</p>
<p>Calls to ButterKnife.bind can be made anywhere you would otherwise put findViewById calls.</p>
<h2 id="Other-provided-binding-APIs"><a href="#Other-provided-binding-APIs" class="headerlink" title="Other provided binding APIs:"></a>Other provided binding APIs:</h2><p>Bind arbitrary objects using an activity as the view root. If you use a pattern like MVC you can bind the controller using its activity with ButterKnife.bind(this, activity).</p>
<p>Bind a view’s children into fields using ButterKnife.bind(this). If you use <merge> tags in a layout and inflate in a custom view constructor you can call this immediately after. Alternatively, custom view types inflated from XML can use it in the onFinishInflate() callback.</merge></p>
<h2 id="VIEW-LISTS"><a href="#VIEW-LISTS" class="headerlink" title="VIEW LISTS"></a>VIEW LISTS</h2><p>You can group multiple views into a List or array.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@BindViews(&#123; R.id.first_name, R.id.middle_name, R.id.last_name &#125;)</div><div class="line">List&lt;EditText&gt; nameViews;</div></pre></td></tr></table></figure>
<p>The apply method allows you to act on all the views in a list at once.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ButterKnife.apply(nameViews, DISABLE);</div><div class="line">ButterKnife.apply(nameViews, ENABLED, false);</div></pre></td></tr></table></figure>
<p>Action and Setter interfaces allow specifying simple behavior.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">static final ButterKnife.Action&lt;View&gt; DISABLE = new ButterKnife.Action&lt;View&gt;() &#123;</div><div class="line">  @Override public void apply(View view, int index) &#123;</div><div class="line">    view.setEnabled(false);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">static final ButterKnife.Setter&lt;View, Boolean&gt; ENABLED = new ButterKnife.Setter&lt;View, Boolean&gt;() &#123;</div><div class="line">  @Override public void set(View view, Boolean value, int index) &#123;</div><div class="line">    view.setEnabled(value);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>An Android Property can also be used with the apply method.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ButterKnife.apply(nameViews, View.ALPHA, 0.0f);</div></pre></td></tr></table></figure></p>
<h2 id="LISTENER-BINDING"><a href="#LISTENER-BINDING" class="headerlink" title="LISTENER BINDING"></a>LISTENER BINDING</h2><p>Listeners can also automatically be configured onto methods.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@OnClick(R.id.submit)</div><div class="line">public void submit(View view) &#123;</div><div class="line">  // TODO submit data to server...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>All arguments to the listener method are optional.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@OnClick(R.id.submit)</div><div class="line">public void submit() &#123;</div><div class="line">  // TODO submit data to server...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Define a specific type and it will automatically be cast.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@OnClick(R.id.submit)</div><div class="line">public void sayHi(Button button) &#123;</div><div class="line">  button.setText(&quot;Hello!&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Specify multiple IDs in a single binding for common event handling.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@OnClick(&#123; R.id.door1, R.id.door2, R.id.door3 &#125;)</div><div class="line">public void pickDoor(DoorView door) &#123;</div><div class="line">  if (door.hasPrizeBehind()) &#123;</div><div class="line">    Toast.makeText(this, &quot;You win!&quot;, LENGTH_SHORT).show();</div><div class="line">  &#125; else &#123;</div><div class="line">    Toast.makeText(this, &quot;Try again&quot;, LENGTH_SHORT).show();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Custom views can bind to their own listeners by not specifying an ID.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class FancyButton extends Button &#123;</div><div class="line">  @OnClick</div><div class="line">  public void onClick() &#123;</div><div class="line">    // TODO do something!</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="BINDING-RESET"><a href="#BINDING-RESET" class="headerlink" title="BINDING RESET"></a>BINDING RESET</h2><p>Fragments have a different view lifecycle than activities. When binding a fragment in onCreateView, set the views to null in onDestroyView.</p>
<p>Butter Knife returns an Unbinder instance when you call bind to do this for you. Call its unbind method in the appropriate lifecycle callback.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class FancyFragment extends Fragment &#123;</div><div class="line">  @BindView(R.id.button1) Button button1;</div><div class="line">  @BindView(R.id.button2) Button button2;</div><div class="line">  private Unbinder unbinder;</div><div class="line"></div><div class="line">  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</div><div class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, false);</div><div class="line">    unbinder = ButterKnife.bind(this, view);</div><div class="line">    // TODO Use fields...</div><div class="line">    return view;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override public void onDestroyView() &#123;</div><div class="line">    super.onDestroyView();</div><div class="line">    unbinder.unbind();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="OPTIONAL-BINDINGS"><a href="#OPTIONAL-BINDINGS" class="headerlink" title="OPTIONAL BINDINGS"></a>OPTIONAL BINDINGS</h2><p>By default, both @Bind and listener bindings are required. An exception will be thrown if the target view cannot be found.</p>
<p>To suppress this behavior and create an optional binding, add a @Nullable annotation to fields or the @Optional annotation to methods.</p>
<p>Note: Any annotation named @Nullable can be used for fields. It is encouraged to use the @Nullable annotation from Android’s “support-annotations” library.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Nullable @BindView(R.id.might_not_be_there) TextView mightNotBeThere;</div><div class="line"></div><div class="line">@Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() &#123;</div><div class="line">  // TODO ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="MULTI-METHOD-LISTENERS"><a href="#MULTI-METHOD-LISTENERS" class="headerlink" title="MULTI-METHOD LISTENERS"></a>MULTI-METHOD LISTENERS</h2><p>Method annotations whose corresponding listener has multiple callbacks can be used to bind to any one of them. Each annotation has a default callback that it binds to. Specify an alternate using the callback parameter.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@OnItemSelected(R.id.list_view)</div><div class="line">void onItemSelected(int position) &#123;</div><div class="line">  // TODO ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">@OnItemSelected(value = R.id.maybe_missing, callback = NOTHING_SELECTED)</div><div class="line">void onNothingSelected() &#123;</div><div class="line">  // TODO ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="BONUS"><a href="#BONUS" class="headerlink" title="BONUS"></a>BONUS</h2><p>Also included are findById methods which simplify code that still has to find views on a View, Activity, or Dialog. It uses generics to infer the return type and automatically performs the cast.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">View view = LayoutInflater.from(context).inflate(R.layout.thing, null);</div><div class="line">TextView firstName = ButterKnife.findById(view, R.id.first_name);</div><div class="line">TextView lastName = ButterKnife.findById(view, R.id.last_name);</div><div class="line">ImageView photo = ButterKnife.findById(view, R.id.photo);</div><div class="line">Add a static import for ButterKnife.findById and enjoy even more fun.</div></pre></td></tr></table></figure>
<h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p><strong>GRADLE</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.jakewharton:butterknife:(insert latest version)&apos;</div><div class="line">annotationProcessor &apos;com.jakewharton:butterknife-compiler:(insert latest version)&apos;</div></pre></td></tr></table></figure>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Copyright 2013 Jake Wharton</div><div class="line"></div><div class="line">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</div><div class="line">you may not use this file except in compliance with the License.</div><div class="line">You may obtain a copy of the License at</div><div class="line"></div><div class="line">   http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"></div><div class="line">Unless required by applicable law or agreed to in writing, software</div><div class="line">distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</div><div class="line">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">See the License for the specific language governing permissions and</div><div class="line">limitations under the License.</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/butter%20knife%20logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Bind Android views and callbacks to fields and methods.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Jake Wharton" scheme="http://ipcreator.me/tags/Jake-Wharton/"/>
    
      <category term="Butter Knife" scheme="http://ipcreator.me/tags/Butter-Knife/"/>
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
  </entry>
  
  <entry>
    <title>Why I Insist on Using English</title>
    <link href="http://ipcreator.me/2017/03/29/MyView/English/why-i-insist-on-using-english/"/>
    <id>http://ipcreator.me/2017/03/29/MyView/English/why-i-insist-on-using-english/</id>
    <published>2017-03-29T01:19:06.000Z</published>
    <updated>2017-03-29T05:27:10.883Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/Learn-English.jpg" alt=""></p>
<blockquote>
<p>Using  is the only and the best way of learning English.<br>Program skills depend  on English.<br>You can appreciate and taste more precious beauty things , such as great mind, good books, fabulous music, touching movies…</p>
</blockquote>
<a id="more"></a>
<h2 id="Sentence-5"><a href="#Sentence-5" class="headerlink" title="Sentence[5]"></a>Sentence<sup>[5]<sup></sup></sup></h2><p>He who knows others is learned, and he who knows himself is wise.</p>
<p>To conquer yourself is more powerful than to defeat other people.</p>
<p>Study serve the practical purpose.</p>
<p>Knowledge is action, action is knowledge.</p>
<p>Don’t forget why start off, otherwise it is difficult to achieve the ultimate goal.</p>
<p>Many people start a career with a dream, then get busy forgetting it.</p>
<p>Without purpose, the days would have ended, as such days always end, in disintegration.</p>
<p>If you set your goals ridiculously high and it’s a failure, you will fail above everyone else’s success.</p>
<p><strong>Our plans miscarry because they have no aim. If one does not know to which port one is sailing, no wind is favorable.</strong></p>
<h2 id="Article-4"><a href="#Article-4" class="headerlink" title="Article[4]"></a>Article<sup>[4]<sup></sup></sup></h2><h3 id="Youth"><a href="#Youth" class="headerlink" title="Youth"></a>Youth</h3><p>Youth is not a time of life; it is a state of mind; it is not a matter of rosy cheeks, red lips and supple knees; it is a matter of the will, a quality of the imagination, a vigor of the emotions; it is the freshness of the deep springs of life.</p>
<p>Youth means a temperamental predominance of courage over timidity, of the appetite for adventure over the love of ease. This often exists in a man of 60 more than a boy of 20. Nobody grows old merely by a number of years. We grow old by deserting our ideals.</p>
<p><strong>Years may wrinkle the skin, but to give up enthusiasm wrinkles the soul. Worry, fear, self-distrust bows the heart and turns the spirit back to dust.</strong></p>
<p>Whether 60 or 16, there is in every human being’s heart the lure of wonders, the unfailing child appetite for what’s next and the joy of the game of living. In the center of your heart and my heart, there is a wireless station; so long as it receives messages of beauty, hope, cheer, courage and power from man and from the infinite, so long as you are young.</p>
<p>When your aerials are down, and your spirit is covered with snows of cynicism and the ice of pessimism, then you’ve grown old, even at 20; but as long as your aerials are up, to catch waves of optimism, there’s hope you may die young at 80.</p>
<h2 id="Music-8"><a href="#Music-8" class="headerlink" title="Music[8]"></a>Music<sup>[8]<sup></sup></sup></h2><p>Santana——Smooth</p>
<h2 id="Movie-9"><a href="#Movie-9" class="headerlink" title="Movie[9]"></a>Movie<sup>[9]<sup></sup></sup></h2><p>Billy Lynn’s Long Halftime Walk</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="/2017/01/20/MyView/English/how-to-use-english/">How to Use English</a><br>[2]<a href="/2017/01/13/MyView/English/english-is-a-friend-for-everybody/">English is a Friend for Everyone</a><br>[3]<a href="/2017/02/22/MyView/English/my-translations/">Quotes by Famous People</a><br>[4]<a href="/2017/02/21/MyView/English/beautiful-article-of-english/">Beautiful Articles of English</a><br>[5]<a href="/2016/12/31/MyView/English/view-of-english/">Beauty of English</a><br>[6]<a href="/2017/03/26/MyView/English/computer-english-words/">Professional Words of Computer</a><br>[7]<a href="/2017/02/22/MyView/English/love-words/">Love English Words</a><br>[8]<a href="/2017/03/27/MyView/Music/santana-smooth/">Santana——Smooth</a><br>[9]<a href="/2017/03/08/MyView/Movie/billy-lynn&#39;s-long-halftime-walk/">Billy Lynn’s Long Halftime Walk</a><br>[10]<a href="https://movie.douban.com/top250" target="_blank" rel="external">Douban Movie Top250</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/Learn-English.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using  is the only and the best way of learning English.&lt;br&gt;Program skills depend  on English.&lt;br&gt;You can appreciate and taste more precious beauty things , such as great mind, good books, fabulous music, touching movies…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Why I Insist on Writing Blog</title>
    <link href="http://ipcreator.me/2017/03/29/MyView/Original/why-i-write-blog/"/>
    <id>http://ipcreator.me/2017/03/29/MyView/Original/why-i-write-blog/</id>
    <published>2017-03-29T01:19:06.000Z</published>
    <updated>2017-03-30T15:12:48.726Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/blog.jpg" alt=""></p>
<blockquote>
<p>Improving your  ability of deep thinking by writing<br>Record your  learning and growing up<br>Gain new insights through reviewing old materials<br>Force myself to Using English</p>
</blockquote>
<a id="more"></a>
<h2 id="For-Yourself"><a href="#For-Yourself" class="headerlink" title="For Yourself"></a>For Yourself</h2><h2 id="Share-for-Others"><a href="#Share-for-Others" class="headerlink" title="Share for Others"></a>Share for Others</h2><h2 id="Other-people"><a href="#Other-people" class="headerlink" title="Other people"></a>Other people</h2><h3 id="计算机从业者的技术成长学习之路-1"><a href="#计算机从业者的技术成长学习之路-1" class="headerlink" title="计算机从业者的技术成长学习之路[1]"></a><a href="http://blog.zhaiyifan.cn/2016/04/28/about-learning/" target="_blank" rel="external">计算机从业者的技术成长学习之路</a><sup>[1]</sup></h3><blockquote>
<p>写博客是为了什么？<br>至少对我来说，写下的东西更多是对自己的一个总结和交待。如果我能写下来，至少能证明我有信心自己确实是这么去理解的，没有去坑人。另外，姑且也算是一种成长的足迹吧，偶尔自己还会去看看笔记。<br>分享也是目的之一，希望大家能互相进步，这样才能促进发展。<br>写博客也好，写一些笔记也好，点点滴滴也是对自己的一种整理。</p>
</blockquote>
<h3 id="我为什么坚持写博客-2"><a href="#我为什么坚持写博客-2" class="headerlink" title="我为什么坚持写博客[2]"></a><a href="http://raychase.iteye.com/blog/1508053" target="_blank" rel="external">我为什么坚持写博客</a><sup>[2]</sup></h3><blockquote>
<p>写博客可以保持思考的习惯。<br>写博客可以帮助其他的程序员。<br>写博客可以记录自己的故事。<br>写博客可以保持前沿技术敏感性，督促自己不断学习。<br>写博客可以认识一些让我尊敬的人。</p>
</blockquote>
<h3 id="我为什么坚持写博客？-3"><a href="#我为什么坚持写博客？-3" class="headerlink" title="我为什么坚持写博客？[3]"></a><a href="http://geek.csdn.net/news/detail/58708" target="_blank" rel="external">我为什么坚持写博客？</a><sup>[3]</sup></h3><blockquote>
<p><strong>知识的总结</strong><br>项目开发中也许学到了一个技能，或者一个知识点，但是通过写博客会加深巩固自己学习的东西，自己写不出来可能说明你对这个知识点理解还不够深入。</p>
<p><strong>表达能力的提升</strong><br>程序员大都不善于沟通，是因为表达能力不行，但是通过坚持写博客，自己的表达能力与表达逻辑会慢慢锻炼出来，逐渐的就会影响自己的沟通交流能力，这点我深有体会。</p>
<p><strong>面试加分</strong><br>假设我们同时面试了两个人，两人各方面能力差不多，但是一个写博客，一个不写，我想我肯定优先选择坚持写博客的人。他能坚持写博客，起码知道他善于经验总结，很勤快，因为大部分人不写博客很大原因是因为懒。</p>
<p><strong>提升写作能力</strong><br>写的多了，写作能力也就提升了，比如我，相信我的写作能力应该比大部分程序员要优秀，你们认同么？</p>
<p><strong>提升名气</strong><br>如果持续产出高质量的博客，被越来越多的人知道，那名气就会上升了，有了名气自身的价值一下就提升了，我深有感受，自从有了名气之后，每天都能收到各大猎头、CEO等的各种优越条件的邀请，选择接受或拒绝是一回事，但是有没有收到邀请就是另一回事了。</p>
<p><strong>赚取外快</strong><br>这个容易理解，有了名气之后就可以有办法赚取各种外快，而且本身也并不可耻，不偷不抢，靠自身技术赚点零花钱有何不可？比如我，如果哪一天我很缺钱了（虽然现在也缺），我可以立刻想办法花点精力去赚更多的钱，只不过现在我选择了我最喜欢，最不受约束的方式而已。</p>
</blockquote>
<h2 id="Good-blogs"><a href="#Good-blogs" class="headerlink" title="Good blogs"></a>Good blogs</h2><h3 id="郭霖的专栏"><a href="#郭霖的专栏" class="headerlink" title="郭霖的专栏"></a><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">郭霖的专栏</a></h3><h3 id="酷壳-–-CoolShell-cn"><a href="#酷壳-–-CoolShell-cn" class="headerlink" title="酷壳 – CoolShell.cn"></a><a href="http://coolshell.cn/" target="_blank" rel="external">酷壳 – CoolShell.cn</a></h3><h3 id="stormzhang"><a href="#stormzhang" class="headerlink" title="stormzhang"></a><a href="http://stormzhang.com/" target="_blank" rel="external">stormzhang</a></h3><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://blog.zhaiyifan.cn/2016/04/28/about-learning/" target="_blank" rel="external">计算机从业者的技术成长学习之路</a><br>[2]<a href="http://raychase.iteye.com/blog/1508053" target="_blank" rel="external">我为什么坚持写博客</a><br>[3]<a href="http://geek.csdn.net/news/detail/58708" target="_blank" rel="external">我为什么坚持写博客？</a><br>[4]<a href="https://www.forbes.com/sites/williamvanderbloemen/2016/01/11/why-i-require-everyone-at-my-company-to-blog/2/#34b8c3a83061" target="_blank" rel="external">Why I Require Everyone At My Company To Blog</a><br>[5]<a href="https://www.theatlantic.com/magazine/archive/2008/11/why-i-blog/307060/" target="_blank" rel="external">Why I Blog</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/blog.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Improving your  ability of deep thinking by writing&lt;br&gt;Record your  learning and growing up&lt;br&gt;Gain new insights through reviewing old materials&lt;br&gt;Force myself to Using English&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Jiang Tao——Only 2% Persons Can be Winner of AI</title>
    <link href="http://ipcreator.me/2017/03/29/BusinessAI/Jiang-tao--only-2%25-persons-can-be-winner-of-AI/"/>
    <id>http://ipcreator.me/2017/03/29/BusinessAI/Jiang-tao--only-2%-persons-can-be-winner-of-AI/</id>
    <published>2017-03-28T23:54:06.000Z</published>
    <updated>2017-03-29T01:13:16.967Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20170328163055792" alt=""></p>
<p>现在去xxx创业大街向天上扔一沓美金，砸到10个路人，有9个都自称投资人，其中8个投人工智能。</p>
<p>满嘴的Artificial Intelligence、摩尔定律、大数据、新算法、认知技术、计算机视觉、机器学习、自然语言处理、机器人技术、语音识别……要是不懂点Deep Learning基本原理，没看过雷·库兹韦尔的《奇点临近》都不好意思和别人打招呼。</p>
<p>事实真的是这样吗？23年后人工智能会统治地球吗？说实话，这些暂时和你没有太大关系，你只需要知道，</p>
<blockquote>
<p>人工智能的第一波红利已来临！</p>
</blockquote>
<a id="more"></a>
<p>在2016 Techcrunch论坛上，李开复曾经说过：“当人工智能识别人脸，超过人的时候，保安的工作至少一部分就没有了；当人工智能能够听懂语音的时候，客服和打电话卖东西人的工作就没有了；当人工智能能够更聪明的炒股的时候，很多人的工作就没有了。”</p>
<p>今年是人工智能发展的第61个年头，所有的投资机构都在谈论和布局该领域，但人工智能将在哪些产业爆发？传统企业又该如何挖掘第一桶金？要知道，<strong>每个风口都只有2%的人能够成为赢家。</strong></p>
<p>黑马学院特邀CSDN&amp;极客帮基金创始人蒋涛（黑马连营第5期连长），今晚9点-10点，将在103个黑马社群同步直播，讲讲人工智能的第一波红利！</p>
<h2 id="WHY-人工智能为什么会火？"><a href="#WHY-人工智能为什么会火？" class="headerlink" title="WHY 人工智能为什么会火？"></a>WHY 人工智能为什么会火？</h2><p>谈到科技革命，时下最火的莫过于人工智能。</p>
<p>我自己做技术社区，做了十几年，看到过一波一波的技术浪潮过来。当年移动互联网大潮过来的时候，我们原来在PC端做的事情，都可以用移动互联网的理念把它重新做一遍。简单来说，<strong>现在的人工智能就相当于原来移动互联网的概念，原来移动端做过的事情，现在又可以结合人工智能的方式再做一遍，而且会比之前更具颠覆性的效果。</strong> 毫不夸张地说，我认为人工智能所带给我们的冲击，将会像工业革命一样。</p>
<p>今年是「人工智能」诞生的61周年（注：1956年夏“人工智能之父”麦卡锡首次提出这个概念），同时也是它的第三次浪潮。这次浪潮和以往的前两次都不一样，这次有了实质性的突破。以前，相当于你想到对面去，但是面前有一堵墙；现在这堵墙被凿开了，之所以这么讲，是因为我有以下三点的观察思考：</p>
<p><strong>第一点：人工智能虽然还处于技术创新期，但到人工智能的普及期，我认为也就需要十到二十年的时间。</strong> 现在相当于移动时代的2005年，虽然第一部3G手机2007年才出现，但2005年我们已经很清楚2G是要到3G的。虽然<strong>人工智能还没有找到突破口，不知道会怎么商业化</strong>，但是大方向是有的。所以，现在只要你在这个领域冲到第一名，就会持续得到投资。</p>
<p>第二点：人工智能的基础已经充实，它是一个逻辑上的发展，这个发展可以分为三个阶段。</p>
<p>1）<strong>云计算</strong>，把信息基础云化，云计算基础设施的完善使得人工智能响应速度更快。</p>
<p>2）<strong>大数据</strong>，计算的过程中累积了数据，数据的极大丰富，使得基于大数据做出行为分析及短期预判成为可能，各个行业的信息化也为此奠定了良好的基础。</p>
<p>3）<strong>判断决策</strong>，对大数据的判断从而产生了更好的决策，决策实际上就是人工智能的进展。</p>
<p>现在我们的生活中就有很多计算机技术在做决定，坐车是滴滴在帮你调度；去餐馆是大众点评用算法把离你最近、人气最高的餐馆选出来等等，所以你的生活已经和人工智能相关了。</p>
<p>第三点：人工智能之所以取得重大的突破，除了前两个阶段的铺垫外，深度学习的发展也贡献了非常重要的力量。</p>
<h2 id="未来是“AIR”的世界"><a href="#未来是“AIR”的世界" class="headerlink" title="未来是“AIR”的世界"></a>未来是“AIR”的世界</h2><blockquote>
<p>未来你看到的是物理世界和虚拟世界的叠加，这就是VR和AR，也就是R时代；I时代是物联网时代；A时代也就是人工智能时代。</p>
</blockquote>
<p>其实你看到的世界很可能不是真的。为什么这么说？因为这是从视神经系统处理出来的。现在我们可以用计算机处理掉，叠加到视网膜上。比如：我不用递名片，只要念头一转，你的名片就应该自动出来了。那怎么能做到这样呢？就是把所有的信息都连接到网络上，这样物理世界和虚拟世界才能叠加在一起。人之所以和其他生物不一样是因为人会做思考、决策，比动物要高一个级别，具有抽象的能力，这是未来20年的大趋势。</p>
<p>AI技术体现在图像识别的突破上，更重要的可能是智能语言的突破，他能理解你讲的话，写出来的文字，甚至能理解照片，当做到这些的时候，行业就会产生变革。</p>
<blockquote>
<p>各个行业基本可分为4个阶段：数字化、数据化、自动化和智能化。越到后面它的武器越强。原来是长枪、大矛，练的是武功，后面就变成机关枪了，扫射的时候你会发现不一样。</p>
</blockquote>
<p>今年我们做了AI100，也叫人工智能100年。今年是人工智能的第61年，可能再过20年到40年，这个世界90%的人就不用工作了。在未来，我们要培养200万名数据分析师，因为决策和运营都是用数据驱动的。同时我们也会与投资相结合，帮助中国30万家企业走向智能化阶段。</p>
<h2 id="Where-第一波红利的三个产业"><a href="#Where-第一波红利的三个产业" class="headerlink" title="Where 第一波红利的三个产业"></a>Where 第一波红利的三个产业</h2><p>人工智能究竟会改变哪些领域？如何改变呢？</p>
<h3 id="自动驾驶"><a href="#自动驾驶" class="headerlink" title="自动驾驶"></a>自动驾驶</h3><p>任何领域有非常大的数据量，人工智能都可以用上。全世界和运输价值相关的公司，都已经相信无人驾驶的发展是必然的。所以在无人驾驶、电动车的框架之下，未来的司机基本上会被无人驾驶取代。</p>
<p>单车智能与智慧交通是无人驾驶技术发展的两个阶段。其中，单车智能是无人驾驶技术的基础，是实现无人驾驶终极形态的根本路径；车联网与智能交通则是推进无人驾驶技术发展的强力催化剂，将助力无人驾驶技术的普及。无人驾驶技术的成熟将最终构建城市智能驾驶生态圈，为未来出行提供新的解决方案。</p>
<h3 id="客服行业"><a href="#客服行业" class="headerlink" title="客服行业"></a>客服行业</h3><p>做金融服务的宜信，有1万多个客服，携程大概有7、8千个客服，每天负责就接各种投诉电话，每次都是被用户狂骂、抱怨，未来将有更多工业机器人替代这些低效率的人力。 人工智能客服系统主要是整合邮件、电话、微博、微信、网页、API接口、移动SDK等渠道在内的服务渠道，并统一自动分配工单，同时留存用户信息便于下次咨询时识别。</p>
<p>基本能做到：<br>1）24小时机器人客服在线，随时响应客户的相关资讯和需求；<br>2）建立客服机器人的内容库，用深度学习的方式自动回复重复问题；<br>3）接入人工时机器人给予部分回复建议，加快反馈速度；<br>4）接入内部办公系统，推动多部门协作反馈以及用户精准营销；<br>5）后台实时数据统计汇总，管理用户评价，进行数据挖掘和数据分析；</p>
<h3 id="医疗领域"><a href="#医疗领域" class="headerlink" title="医疗领域"></a>医疗领域</h3><p>医疗人员医院里有大量的临床病历数据，而且不断的产出数据。医疗方面的人工智能主要分为两部分：一是图像识别，应用于感知环节，其主要目的是将影像这类非结构化数据进行分析，获取一些有意义的信息；二是深度学习，应用于学习和分析环节，是AI应用的最核心环节，通过大量的影像数据和诊断数据，不断对神经元网络进行深度学习训练，促使其掌握“诊断”的能力。不管是什么病，图像只是其中一个参数，而治疗疾病则需要多个参数。此外，80%的数据属于非结构化数据，亦即报告+影像。未来，人工智能的使用将大大提高治疗效率。</p>
<h2 id="How-传统企业如何获得红利？"><a href="#How-传统企业如何获得红利？" class="headerlink" title="How 传统企业如何获得红利？"></a>How 传统企业如何获得红利？</h2><p>简单来说，现在的人工智能就相当于原来移动互联网的概念，原来移动端做过的事情，现在又可以结合人工智能的方式再做一遍，而且会比之前更具颠覆性的效果。毫不夸张地说，我认为人工智能所带给我们的冲击，将会像工业革命一样。</p>
<h3 id="传统制造业智能化设想"><a href="#传统制造业智能化设想" class="headerlink" title="传统制造业智能化设想"></a>传统制造业智能化设想</h3><p>传统企业的未来有两个方向：<br>第一，你有没有用户的服务和连接。<br>第二，在这个基础上，有没有做智能化决策和分析。<br>后来就是本身在生产线上的提升，生产线也面临着一个问题，你的控制有没有数据化。</p>
<p>在一些制造业工厂，升级之后有没有更好的成本上的控制。极客帮有个合作的LP，专门给小米做代工，他就给我看传统的生产线，就是一条生产线，都是自动化的设备。所以它能够做到手环40元钱，还有利润挣。就卖40元钱还能挣钱，而且挣得还不少。总的来说，我们看到的一个方向的趋势。</p>
<p><strong>对制造业来说，意义最大的是把它的制造过程，原来的控制系统做成一定的数据化，再看看能不能做规划。那些大规模生产的时代已经结束，一定要往前端走，差异化可能在产品设计上、包装上、服务上，从大生产时代到个性化时代，未来到一个智能化时代。</strong></p>
<p>“创业者埋头苦干的同时也要抬头看天。欢迎加入我的黑马连营战队，和我一起探寻人工智能趋势背后的行业商机！”</p>
<p>尽管人类是科技的创造者，却无法掌控其发展。我们所能做的就是掌握科技的发展趋势。人工智能浪潮来临，它将如何颠覆我们的工作和生活呢？</p>
<p>近日，黑马营7期营员、黑马连营第5期连长蒋涛与我们分享了他的看法。他认为，未来是AIR的世界，各个行业将会进入数字化、数据化、自动化和智能化4个阶段。</p>
<p>嘉宾介绍：<br>蒋涛：CSDN创始人，极客帮基金创始合伙人；黑马营7期营员，黑马连营第5期连长；有24年软件开发经验，其创立的CSDN是全球最大的开发者社区；同时具备投资人身份，先后投资了聚合数据、IT桔子等90余家高科技创业公司。<br>行业：人工智能<br>关键词：趋势洞察家、技术达人、极客范儿</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://geek.csdn.net/news/detail/189314" target="_blank" rel="external">人工智能风口只有2%的人能够成为赢家！——CSDN蒋涛</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170328163055792&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在去xxx创业大街向天上扔一沓美金，砸到10个路人，有9个都自称投资人，其中8个投人工智能。&lt;/p&gt;
&lt;p&gt;满嘴的Artificial Intelligence、摩尔定律、大数据、新算法、认知技术、计算机视觉、机器学习、自然语言处理、机器人技术、语音识别……要是不懂点Deep Learning基本原理，没看过雷·库兹韦尔的《奇点临近》都不好意思和别人打招呼。&lt;/p&gt;
&lt;p&gt;事实真的是这样吗？23年后人工智能会统治地球吗？说实话，这些暂时和你没有太大关系，你只需要知道，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人工智能的第一波红利已来临！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Jiang Tao" scheme="http://ipcreator.me/tags/Jiang-Tao/"/>
    
      <category term="Winner" scheme="http://ipcreator.me/tags/Winner/"/>
    
  </entry>
  
  <entry>
    <title>Yann LeCun——Prediction Learning is the Future of AI</title>
    <link href="http://ipcreator.me/2017/03/29/BusinessAI/yann-leCun-predict-learning-is-the-future-of-AI/"/>
    <id>http://ipcreator.me/2017/03/29/BusinessAI/yann-leCun-predict-learning-is-the-future-of-AI/</id>
    <published>2017-03-28T23:36:06.000Z</published>
    <updated>2017-03-29T01:13:18.861Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20170323205555509" alt=""></p>
<p>在一票难求的Yann LeCun清华演讲当天上午，LeCun本人现身中国科学院自动化研究所，参与了一个“限制级”的高端私享会，CSDN记者整理了以下三条重要摘要。</p>
<ol>
<li>我对什么感兴趣</li>
<li>我怎样看Human-like learning</li>
<li>请把自己当做一名科学家</li>
</ol>
<a id="more"></a>
<h2 id="我对什么感兴趣"><a href="#我对什么感兴趣" class="headerlink" title="我对什么感兴趣"></a>我对什么感兴趣</h2><blockquote>
<p>非监督学习以及预测学习</p>
</blockquote>
<p>迄今为止，在机器学习以及深度学习领域，我们已经取得了一些成功，这些成功都依赖于监督学习。监督学习有它本身的局限性，因为需要很多数据，并且这些数据需要经过人工标注，数据的背后需要很多的知识作为支撑。所以问题就转化成了我们如何让机器像动物和人类一样能够从现实世界自动学习，这样一来我们就需要搞清楚动物和人类学习背后的原理。</p>
<p>有些人认为，人类的学习方式是增强学习。而我个人认为，人类的学习方式是<strong>非监督学习，且是以预测为驱动的。</strong> 所以我们的大脑其实是一个预测引擎，从一定程度上说，能够预测是机器通往智能道路上的一道关卡。如果我们知道如何用深度学习或者其他的算法使得机器能够通过预测来解决问题的话，那么我们在制造更智能的机器的路上就取得了一个非常大的进步。</p>
<p>以科学家的视角来看，我对智能的本质，不论是人类智能还是人工智能都很感兴趣。从实用的角度来说，这也并不冲突，在很多的人工智能应用中，机器需要对这个世界有广泛的知识储备，甚至机器需要能够理解他们自己。举例来说，如果你想要开发一个对话系统或者虚拟助手，这种很有趣且很实用的系统。这种时候，机器就需要如前面所说的，对世界有的广泛的知识储备。据我所知，这种量级的知识储备不能够通过监督学习或者增强学习来达到。这也是我对非监督学习以及预测学习感兴趣的原因。</p>
<h2 id="我怎样看Human-like-learning"><a href="#我怎样看Human-like-learning" class="headerlink" title="我怎样看Human-like learning"></a>我怎样看Human-like learning</h2><blockquote>
<p>如果你说你现在就能做出这样的机器…<br>Come on！别骗自己了</p>
</blockquote>
<p>因为现在我们还不知道如何让机器像人类一样思考，所以当我们讨论Human-like machine的时候，我们是在讨论一个还不存在的东西。所以就出现了正反两派。但是在我看来，那些现在就声称他们能够或者已经做出Human-like learning的人是夸大其词了。但Human-like learning确实是一个重要的研究方向。</p>
<p>要达到Human-like learning，或许需要监督、非监督以及增强学习的结合。拿预测做例子，比如说我放一个苹果在桌子上，然后我离开了，苹果可能会呆在桌子上也可能会滚下来，除非我们有一个预测模型，否则到底会发生什么是很难预测的。对于我们人类来说，如果我们知道这个桌子承不住这个苹果的话，苹果就会掉下来。所以说我们到底要如何教会机器理解这个世界，不仅要考虑到这个世界很大，还要考虑到这个世界充满了巧合和外力作用。</p>
<p>我们用力推一个东西它会动，推另一个东西它可能不会动。所以说对事物的区分和预测是我们人类对世界认知的一个体现。问题在于，这种预测不是任务导向型的（Task oriented ），而是任务独立型的（Task independent），所以有很多时候机器学到的事情可能对我们没有用，这就是为什么我们需要监督学习和增强学习来让机器学习对我们有用的事情。</p>
<p>现在经典的人工智能系统都是监督学习与增强学习的结合，这是很多研究人员、很多后起之秀正在从事的领域，是现在很多AI系统的一个共性。相信在座的很多人都从事过人工智能在感知层面的工作，我们从现实世界中提取信号以供机器学习，这是人工智能的第一步，还有第二步就是让机器能够对现实世界中将要发生的事情进行预测，以及对事物将会保留在何种状态进行预测。</p>
<p>所以近期大家越来越强调AI系统的整体性，即perception、prediction、reasoning、planning以及底层的监督、非监督、强化学习算法。AI一直以来在游戏方面表现得非常活跃，现在AI也能参与到一些实时的策略类游戏中了，例如星球大战这类游戏。这是对AI系统的一个很好的测试，因为接下来这些系统将会被用到现实世界中，这是一个非常令人激动的研究方向。</p>
<h2 id="请把自己当做一名科学家"><a href="#请把自己当做一名科学家" class="headerlink" title="请把自己当做一名科学家"></a>请把自己当做一名科学家</h2><blockquote>
<p>首批造飞机的工程师一定懂仿生学</p>
</blockquote>
<p>对于深度学习的研究者来说，你们很幸运处于最好的时代。我相信，几年之后，人工智能将会对交通、医疗、生物、科学等诸多领域产生革命性的改变，而你们将要参与其中。</p>
<p>当代科学有三大未解问题：宇宙由什么组成、生命的本质是什么、人脑是如何工作的。我们正在从事的，正是这个探寻本质的过程。人工智能表面看起来是计算机科学相关的问题，但其实它关系到更多更广泛的科学研究。就像多年以前工程师们试图造飞机时一样，在一切都还未知的情况下，工程师需要考虑很多与工程制造看似不相关的问题，例如生物学的理论等。</p>
<p>我们虽说是计算机科学研究人员，但由于人工智能涉及到的范围之广，研究者对其他相关领域的涉猎也非常重要。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://geek.csdn.net/news/detail/188777" target="_blank" rel="external">CNN之父Yann LeCun：预测学习才是AI的未来</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170323205555509&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在一票难求的Yann LeCun清华演讲当天上午，LeCun本人现身中国科学院自动化研究所，参与了一个“限制级”的高端私享会，CSDN记者整理了以下三条重要摘要。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我对什么感兴趣&lt;/li&gt;
&lt;li&gt;我怎样看Human-like learning&lt;/li&gt;
&lt;li&gt;请把自己当做一名科学家&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Yann LeCun" scheme="http://ipcreator.me/tags/Yann-LeCun/"/>
    
      <category term="Prediction Learning" scheme="http://ipcreator.me/tags/Prediction-Learning/"/>
    
  </entry>
  
  <entry>
    <title>The Legend of 1900</title>
    <link href="http://ipcreator.me/2017/03/28/MyView/Movie/the-legend-of-1900/"/>
    <id>http://ipcreator.me/2017/03/28/MyView/Movie/the-legend-of-1900/</id>
    <published>2017-03-28T11:38:18.000Z</published>
    <updated>2017-03-29T04:18:01.307Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>Make you cry，laugh  touching and thinking</strong><br>Crying for  his loneliness and ending of  the story.<br>Touching by the wonderful melody.<br>Laughing for those humor lines.<br>Deep thinking: In the big city, What’s your piano ? Where is your Virginia ?</p>
</blockquote>
<p><img src="https://img1.doubanio.com/view/movie_poster_cover/lpst/public/p511146957.webp" alt=""></p>
<a id="more"></a>
<p>导演: 朱塞佩·托纳多雷<br>编剧: 亚利桑德罗·巴里克 / 朱塞佩·托纳多雷<br>主演: 蒂姆·罗斯 / 普路特·泰勒·文斯 / 比尔·努恩 / 梅兰尼·蒂埃里 / 阿尔贝托·巴斯克斯<br>类型: 剧情 / 音乐<br>制片国家/地区: 意大利<br>语言: 英语 / 法语<br>上映日期: 1998-10-28(意大利)<br>片长: 165分钟 / 120分钟(法国版) / 169分钟(加长版)<br>又名: 声光伴我飞(港) / 一九零零的传奇 / 1900海上钢琴师 / 传奇1900 / The Legend of 1900<br>IMDb链接: <a href="http://www.imdb.com/title/tt0120731" target="_blank" rel="external">tt0120731</a></p>
<p>本片讲述了一个钢琴天才传奇的一生。</p>
<p>　　1900年，Virginian号豪华邮轮上，一个孤儿被遗弃在头等舱，由船上的水手抚养长大，取名1900（蒂姆•罗斯 饰）。1900慢慢长大，显示出了无师自通的非凡钢琴天赋，在船上的乐队表演钢琴，每个听过他演奏的人，都被深深打动。爵士 乐鼻祖杰尼听说了1900的高超技艺，专门上船和他比赛，最后自叹弗如，黯然离去。<br>　　可惜，这一切的事情都发生在海上，1900从来不愿踏上陆地，直到有一天，他爱上了一个女孩，情愫在琴键上流淌。他会不会为了爱情，踏上陆地开始新的生活，用他的琴声惊艳世界？他将怎样谱写自己非凡的人生。 ©豆瓣</p>
<h2 id="大人者，不失其赤子之心者也"><a href="#大人者，不失其赤子之心者也" class="headerlink" title="大人者，不失其赤子之心者也"></a><a href="https://movie.douban.com/subject/1292001/" target="_blank" rel="external">大人者，不失其赤子之心者也</a></h2><p>市侩们总是抱着捧杀的态度来看待天才的，这也无足多怪。重要的是，天才如何看待自己的选择。</p>
<p>许多人把实现自我价值同“功成名就”和“飞黄腾达”联系在一起，其中不乏某些天才。他们为此奋斗一生，也许终能得偿所愿。然而，功成名就之后呢？罗马帝国的战胜者凯旋时，一个奴隶会在他耳边轻轻私语：“一切荣华富贵，都是过眼烟云！”这道出了所有成功者风光无限的背后那不为人知的空虚——曾经追求的，固然已经得到，现在拥有的，也将归于破灭。其中的幸运者，还能像张翰那样“人生贵得适意尔，何能羁宦数千里以要名爵!”全身而退；不幸者，恐怕只能哀叹“吾欲与若复牵黄犬俱出上蔡东门逐狡兔，岂可得乎！”人生的荣辱，不过是一个围城。城里的人想冲出去，城外的人想冲进来。待到一切荣光都已失去，他们还会为当初的选择而感到骄傲，抑或后悔吗？</p>
<blockquote>
<p>“你知道琴上88个键一个不多一个也不少，琴键是有限的，但你是无限的，在这些键上所能创造出来的音乐，那才是无限的，这个我喜欢，也是我愿意做的，但是在舷梯上，摆在我面前的琴键有成千上万，永远也数不完的琴键”，“而在这个无限大的键盘上，你根本就无法去演奏”，“天呐，你没有看见那些街道吗？有上千条！你怎么去选择那一个？”。窝囊废似的一番话，彻底关死了1900通往成功与显赫的道路。似乎很难想象这样一个才华横溢的人会选择一条破船作为归宿，甚至宁愿最终被几吨炸药所终结。其实，1900是幸运的，他不入围城，自觉放弃未来的诱惑与烦嚣，换来对已经拥有的执着与坚守。也就无怨无悔，虽死何憾？老子云：知其雄 ，守其雌 ，为天下溪。为天下溪 常德不离 复归於婴儿。想必直到生命终结的那一刻，1900依然可以骄傲地宣称：“大人者，不失其赤子之心者也。”</p>
</blockquote>
<h2 id="俗人理解不了的幸福"><a href="#俗人理解不了的幸福" class="headerlink" title="俗人理解不了的幸福"></a><a href="https://movie.douban.com/subject/1292001/" target="_blank" rel="external">俗人理解不了的幸福</a></h2><p>大概只有小号手是愿意聆听1900的内心而非琴声的人，他不理解他，但是他尊重他。他用尊重成全了1900完整的独立。我看到有人说如果他是那胖子他就会把1900敲昏然后拖下船。我想这样的想法也就注定他成不了那个胖子，成不了1900唯一的真正的朋友。</p>
<p>如果我们较真一点，假设小号手真的把1900弄下船了，故事将怎样延伸？我们都知道，落魄的小号手没有能力去为朋友找一艘新的船，找88个琴键和尽头。1900将无可避免被磨去棱角和平庸，落入红尘变成一个凡人。</p>
<p>活着，还是活得安心。这也是个问题。凡人的选择是无论如何先活下去再说，”活着”这件事情本身比什么都重要。而天才则把心灵的舒适看得更重，生死则次之。所以凡人可以忍辱，天才却情愿玉碎。每一种人都获得了他最看重的东西，说起来谁也不比谁亏。</p>
<p>差异导致孤独。葆存了差异性的ET在承受异样目光的同时也承受着巨大的孤独，远超出凡人的孤独。凡人们如我们虽然也还都残留一些差异，但大致面貌八九不离十。我们失恋了后觉得痛苦比谁的都大，我们拥抱心爱的人自认比谁都幸福。但一个残酷的事实是：每个人的痛苦和幸福都没什么区别。我们在不断重复，千篇一律。</p>
<p>我们丢了个性却换来了共鸣。我们借助艺术寻找通感，在人性中相交叉的部分，抹着眼泪互相慰藉，或者说，互相平衡（原来有人比我还惨啊，这下心里舒坦多了）。而被称为天才的人站在人群之外，忧郁地注视这群有些像他又不是他的物种。用他们ET的本能将那些交叉部分，提炼、放大、直抵内心。那些永远无法交叉的部分，则作为孤独的源头，令他们永远无法融入人群。他们只有躲在自己的轮船里，躲在自己的内心世界里，孤独地活着，然后死去。</p>
<h2 id="我们无处安放的孤独"><a href="#我们无处安放的孤独" class="headerlink" title="我们无处安放的孤独"></a><a href="https://movie.douban.com/review/1316127/" target="_blank" rel="external">我们无处安放的孤独</a></h2><p>我一直觉得1900的一生是存在主义思想的体现，他藐视规则，藐视这个社会认可的规则，他害怕上岸其实是拒绝上岸，藐视上岸。他重自身的存在大于外界对自身的认可，他可以轻易打败爵士乐的开山祖师并对他表示鄙夷，他可以靠他的才华赚取无数的名利但是他拒绝音乐与自身的分离，他可以用音乐去探究所有人的心灵，可以在音乐里去旅行，可以寻觅到自己的爱情，但是他没有常人那样去要去追，他轻轻地将这些丢进了大海，他将迈向陆地的脚收回。</p>
<p>在存在主义者看来，人生活在一个与自己对立的、失望的世界之中，人在世界上的地位是不确定的。绝对自由的人也是烦恼和无所依靠的孤独者。人虽然有选择的自由，但他面对的未来的生活却是混沌而没有目标的。他只是盲目地走向未来，他只知道人生的真实的终结就是死亡。死亡作为人生的最后归宿，对于个人的存在具有非常重要的意义。 所以存在主义者都是悲观者，在他们眼里，人生是一场悲剧。</p>
<blockquote>
<p>“城市那么大，看不到尽头，我停下来不是因为所见是因为所不见，是因为看不见的东西。连绵不绝的城市什么都有，就是没有尽头，我需要看见世界的尽头。上了岸，何去何从？爱一个女人，住一间屋，买一块地，望一个景，走一条死路，太多的选择我无所适从。漫漫无尽，思前想后你不怕精神崩溃？那样的日子怎样过？我无法遗弃这艘船，宁可遗弃自己的生命。”</p>
</blockquote>
<p>后来我才知道生活的大多数时候其实是孤独的，是我们心里无处安放的孤独，不被这个世界所认可的孤独。1900是孤独的，所以他选择一辈子不上岸，和那座海上浮城共生共死，而我们呢？我们没有一座属于自己的城，让我们来安放我们的孤独，让我们来逃避自己不喜欢的一切，所以我们比1900更孤独更可怜。</p>
<h2 id="微尘世界，我们都已是最好的钢琴手。"><a href="#微尘世界，我们都已是最好的钢琴手。" class="headerlink" title="微尘世界，我们都已是最好的钢琴手。"></a><a href="https://movie.douban.com/review/1971957/" target="_blank" rel="external">微尘世界，我们都已是最好的钢琴手。</a></h2><p>1900代表着一种理想，代表着这个尘世中的多数人，注定不会付诸行动，却会始终心怀向往的理想。矗立在那里，自由，决绝，而悲伤。</p>
<p>我们是生活在“外面的世界”里的人。这个世界的意义在于“传承”。就像一个游戏，每个人都是其中的玩家，然而获得的任务，却是如何使这个游戏永远存在。赡养父母，繁衍后代，诸多必须背负的责任令前行显得缓慢而艰难。然而我们的人生对于整个游戏而言，存在的时间或许只有一秒，或者更短。也唯有越短暂，这个游戏的运行时间才会越长，才有可能，“永不结束”。<br>这样一想会不会又心有不甘呢？辛苦奋斗的一生，其实不过一粒微尘，轻得仿佛随时都会消失。<br>然而在闭上眼的那一瞬还会不会含笑着想起，自己的孩子在不久前，正带领他们的孩子在绿草地上放起风筝；会不会含笑着想起，自己曾拥有良人在侧，从此不再无枝可依；会不会含笑着想起更久远的从前，父母曾令你无忧无虑，而那些萌生的小情绪，或许唯有感慨地大笑出声，无奈地摇摇头，道一句，那时真小。<br>会不会想起那些温暖的片段，想起自己曾经的付出与所得，带着回望的沧桑，感怀，和崭新的希望。<br>　　　　<br>我们为什么不会像1900一样，选择在漫天火光中永沉海底。这样壮烈，却获得永生的自由？</p>
<blockquote>
<p>因为，因为我们一直生活在这个“外面的世界”，清楚地看见它的混乱，却因为某一瞬间体验到的那些温情，那些无以伦比的美好，而心甘情愿地忍受着它所给予的伤害，努力弹奏出最华美的人生乐章。</p>
</blockquote>
<p>我们或许从来都不是天才，但是我们至少能做到勤恳、踏实。我们从坚硬和纯白开始，学会圆滑，学会世故，但内心深处，终究会一直记得，这一生所做的种种妥协，不过是为了在这个微尘世界，在这架上帝给予的钢琴上，创作出独属于自己的旋律与琴音。</p>
<h2 id="我们都是宅男"><a href="#我们都是宅男" class="headerlink" title="我们都是宅男"></a><a href="https://movie.douban.com/review/1238757/" target="_blank" rel="external">我们都是宅男</a></h2><p>我们或许没有《海上钢琴师》中的1900看的更加清楚，他一生生活在邮轮上，他不愿离开一个让他感到安定自由、无忧无虑的空间，他永远没有踏上陆地，开启他的“远大前程”，在我们看来，他是自闭的，但是，他也是最清醒的，在最后无比绚烂的死亡中，他走的孤独而坦然。</p>
<p>和1900对无限的恐惧相反，现代人正是在追逐着无限，我们贪大，贪全，贪广，房子要住大的，哪怕被每月的房贷压的生活质量下降；交际圈要交广些，哪怕每天疲于奔命于并不让自己愉快的应酬；旅游要走遍世界，哪怕其实只是疲惫的赶着在一个又一个景点的人群中拍照；炒股也有“不涨到翻倍不痛快”，哪怕每天被指数折磨的大喜大悲。还是看看这个“宅男”1900，反观自己，其实我们都是宅男，我们都是在自己营造的世界里生活，我们总有个无形或有形的圈子，但是似乎“开疆扩土”是人的本能，我们总是希望这个世界更大些，更广些。其实，并不是因为你走遍了这个城市的大街小巷，你的世界便扩展到了整个城市，哪怕真的这样，你也只是有了个城市这样一个更大的宅子。所以，1900不贪求太多，他一生都在一艘船上生活，这是有限的；但是他一生都有音乐相伴快乐的生活，这是无限的，快乐而自在的生活才是无限的。正如我们拼命拓展的交际网永远是有限的，但是和其中几个真正的知己在一起的快乐才是无限的。</p>
<p>1900在邮轮上有自己的快乐，也伴随着一些悲伤，但是，快乐从来不是仅仅以空间的广度来评判的，就如你有一笔钱，可以买大房子简装修，也可以买小房子按照自己的意愿精装修（当然，精装修的意义不是买一堆豪华家俱的堆砌）。1900选择在一个相对狭小的世界里精心构筑他的世界，安逸而愉快。而在我们看来，这样的小小的快乐永远是“有病”的，就如我们如果看到一个人沉溺于数学而废寝忘食，会认为他是一个科学怪人，为他随时可能的英年早逝而悲哀；如果看到一个人长期执着的在农村搞什么社会试验而履受挫折，会认为他是一个理想主义者，为他干些“不实际”的事情而悲哀。诸如此类的事情还有很多，我们总是很自恋，常常看到他人沉浸于一些比较“独特”的事物而不问世事而感到“悲哀”，而对他们表示不解和“同情”，特别当这些人甚至为之折寿或是如1900那样“找死”后，更是如此。其实，生活方式本来没有定义，其实想想，1900在一艘船上就活的那么滋润，一些人一天到晚在屋子里闷头看武侠小说、漫画书就那么快活，我们这些号称精神健康，性格乐观的人却常常无名的不停唠叨“真郁闷”，这时的我们是不是会突然感到一丝沮丧，而对宅男们有些羡慕，同时意识到，其实我们都不过是在自己的世界里有喜有乐的宅男。</p>
<h2 id="漂流在大海上的音乐浮城"><a href="#漂流在大海上的音乐浮城" class="headerlink" title="漂流在大海上的音乐浮城"></a><a href="https://movie.douban.com/review/1000830/" target="_blank" rel="external">漂流在大海上的音乐浮城</a></h2><p>对于1900而言，音乐，是用来娱乐自己的——他永远为了自己而弹奏着，永远不让自己的音乐和自己分离。</p>
<p>1900的存在很特别么？未必，他的生命因为没有踏足过真实世界而显得尤为纯净和清澈，甚至纯净和清澈得不能够生活在这个真实的现实世界里。最适宜他生活的地方，是Virginian，一个漂浮在海上的乌托邦，一个能够让1900这样纯粹且单纯的音乐圣徒栖息的地方。他不能，也不应该走进我们的世界，我们的世界对于1900而言，太肮脏，太复杂了。</p>
<p>究竟是1900把自己禁锢在狭小的空间里了，还是我们让陆地桎梏了我们自身？城市里有着成千的街道，我们迷失于其中，看不到天的尽头，而大海以其广博的胸襟，容忍并珍藏了1900这个特异的存在，也甚至是因为大海的广博，1900看到了世界的尽头。</p>
<blockquote>
<p>当影片行进到最后，Max问及1900为何不愿意离开Virginian的那一瞬间，我们就不难理解1900的答案了——琴键太大，音乐无从而生；城市太大，我们无从而生……</p>
</blockquote>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1]<a href="https://movie.douban.com/subject/1292001/" target="_blank" rel="external">海上钢琴师 La leggenda del pianista sull’oceano (1998)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Make you cry，laugh  touching and thinking&lt;/strong&gt;&lt;br&gt;Crying for  his loneliness and ending of  the story.&lt;br&gt;Touching by the wonderful melody.&lt;br&gt;Laughing for those humor lines.&lt;br&gt;Deep thinking: In the big city, What’s your piano ? Where is your Virginia ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img1.doubanio.com/view/movie_poster_cover/lpst/public/p511146957.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="English" scheme="http://ipcreator.me/tags/English/"/>
    
      <category term="Movie" scheme="http://ipcreator.me/tags/Movie/"/>
    
  </entry>
  
  <entry>
    <title>The Beauty of Life</title>
    <link href="http://ipcreator.me/2017/03/28/MyView/Original/beauty-of-life/"/>
    <id>http://ipcreator.me/2017/03/28/MyView/Original/beauty-of-life/</id>
    <published>2017-03-28T11:38:18.000Z</published>
    <updated>2017-03-28T15:33:10.225Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/beautiful-switzerland-43.jpg" alt=""></p>
<blockquote>
<p>训练美感，先学会欣赏，与其寻找或等待，不如自己创造。</p>
<p>人生如歌，有高潮也有低潮，高潮有高潮时的快感，低潮有低潮时的风景，美好的事物太多，时光太短暂，注意力太宝贵，聚焦并追逐梦想，享受人生过程，无暇也无需他顾。</p>
<p>Programmer Vs Pianist，都需要创造力，都需要持久的刻意练习以升级到更高水准，都属于超级个体类别，哦，对了，还都需要一个好的Keyboard还都喜欢Music:)</p>
</blockquote>
<a id="more"></a>
<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p><img src="https://img1.doubanio.com/lpic/s27653128.jpg" alt=""></p>
<h3 id="数学之美"><a href="#数学之美" class="headerlink" title="数学之美"></a><a href="https://book.douban.com/subject/26163454/" target="_blank" rel="external">数学之美</a></h3><blockquote>
<p>读了“数学之美”，才发现大学时学的数学知识，比如马尔可夫链、矩阵计算，甚至余弦函数原来都如此亲切，并且栩栩如生，才发现自然语言和信息处理这么有趣。</p>
<p>把高深的数学原理讲得更加通俗易懂，让非专业读者也能领略数学的魅力。读者通过具体的例子学到的是思考问题的方式 —— 如何化繁为简，如何用数学去解决工程问题，如何跳出固有思维不断去思考创新。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s7019271.jpg" alt=""><br><a href="https://book.douban.com/subject/7064456/" target="_blank" rel="external">研究之美</a></p>
<blockquote>
<p>《研究之美》是计算机科学大师、“算法分析之父”高德纳（Donald E.Knuth）在20世纪70年代旅居挪威时撰写的适用于计算机科学的一种全新基础数学结构的情景小品。全书以一对追求自由精神生活的青年男女为主人公，展开了一段对于该种全新结构的发现和构造的对白。在此过程中，本书充分展示了计算机科学的从业人员进行全新领域探索时所必备的怀疑、立论、构造、证明、归纳、演绎等逻辑推理和深入反思的能力。《研究之美》可以看作是读懂高德纳的艰深著作《计算机程序设计艺术》和《具体数学》的钥匙。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s27881184.jpg" alt=""></p>
<h3 id="科学之美——从大爆炸到数字时代"><a href="#科学之美——从大爆炸到数字时代" class="headerlink" title="科学之美——从大爆炸到数字时代"></a><a href="https://book.douban.com/subject/26270565/" target="_blank" rel="external">科学之美——从大爆炸到数字时代</a></h3><blockquote>
<p>欧瑞尔为我们讲述了古希腊人如何基于音乐和谐与完美几何的理念为这个世界建立物理模型；这一理想模型随后被另一同样美丽的建模项目所取代，而该项目的基础正是牛顿的“理性力学”，该理论将宇宙规律简化为一些优雅的方程。欧瑞尔进而开始转向介绍当代前沿物理学理论，诸如超对称弦理论。与之前的众多理论一样，这一理论的提出与流行也再次受到了人们深层审美观的影响。他清晰地为我们阐明了物理学家们在历史上的考察结果，以及近期的研究成果，包括希格斯玻色子的发现。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s6882903.jpg" alt=""></p>
<h3 id="物理学之美"><a href="#物理学之美" class="headerlink" title="物理学之美"></a><a href="https://book.douban.com/subject/6782542/" target="_blank" rel="external">物理学之美</a></h3><blockquote>
<p>《物理学之美》从浩淼的物理学历史中，寻找最有典型意义的物理学理论发现的过程，深入浅出地分析在不同时代，物理学家对物理学之美的观点，探讨他们如何利用自己的审美判断来建构物理理论，以及他们的困惑和成功。作者综合分析不同时代物理学之美的演变和进化，最后得到物理学之美的最高层次：数学结构美。《物理学之美》史料丰富，行文自然流畅，整体归纳性强，加上数百幅珍贵图片，给读者以美的享受和智慧的启迪。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s27316094.jpg" alt=""></p>
<h3 id="宇宙之美"><a href="#宇宙之美" class="headerlink" title="宇宙之美"></a><a href="https://book.douban.com/subject/25919532/" target="_blank" rel="external">宇宙之美</a></h3><blockquote>
<p>从宇宙诞生到宇宙未来，以全彩大开本的精美装帧，讲述浩瀚宇宙的神秘之美。每一个天体都在多维空间中书写自己的故事。<br>从太阳到太阳系的其他成员，再到恒星、星团、银河系和其他星系，7个章节全方位介绍宇宙天体的基础数据、形态特征、运行规律等知识。</p>
</blockquote>
<h2 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h2><p><img src="https://img5.doubanio.com/lpic/s9233126.jpg" alt=""><br><a href="https://book.douban.com/subject/3004255/" target="_blank" rel="external">编程之美</a></p>
<blockquote>
<p>这本书收集了约60道算法和程序设计题目，这些题目大部分在近年的笔试、面试中出现过，或者是被微软员工热烈讨论过。作者试图从书中各种有趣的问题出发，引导读者发现问题，分析问题，解决问题，寻找更优的解法。本书的内容分为下面几个部分：<br>（1）游戏之乐：从游戏和其他有趣问题出发，化繁为简，分析总结。<br>（2）数字之魅：编程的过程实际上就是和数字及字符打交道的过程。这一部分收集了一些好玩的对数字进行处理的题目。<br>（3）结构之法：汇集了常见的对字符串、链表、队列，以及树等进行操作的题目。<br>（4）数学之趣：列举了一些不需要写具体程序的数学问题，锻炼读者的抽象思维能力。<br>书中绝大部分题目都提供了详细的解说。 每道题目后面还有一至两道扩展问题，供读者进一步钻研。<br>书中还讲述了面试的各种小故事，告诉读者微软需要什么样的技术人才，重视什么样的能力，如何甄别人才。回答读者关于IT业面试，招聘，职业发展的疑问。这本书的很多题目会出现在IT 行业的各种笔试、面试中，但这本书更深层的意义在于引导读者思考，和读者共享思考之乐，编程之美。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s3337523.jpg" alt=""></p>
<h3 id="代码之美"><a href="#代码之美" class="headerlink" title="代码之美"></a><a href="https://book.douban.com/subject/3224524/" target="_blank" rel="external">代码之美</a></h3><blockquote>
<p>《代码之美》33章，有38位作者，每位作者贡献一章。每位作者都将自己心目中对于“美丽的代码”的认识浓缩在一章当中，张力十足。38位大牛，每个人对代码之美都有自己独特的认识，现在一览无余的放在一起，对于热爱程序的每个人都不啻一场盛宴。虽然本书的涉猎范围很广，但也只能代表一小部分在这个软件开发这个最令人兴奋领域所发生的事情。</p>
</blockquote>
<p><img src="https://img5.doubanio.com/lpic/s6509546.jpg" alt=""><br><a href="https://book.douban.com/subject/6439420/" target="_blank" rel="external">数据可视化之美</a></p>
<blockquote>
<p>在《数据可视化之美》中，20多位可视化专家包括艺术家、设计师、评论家、科学家、分析师、统计学家等，展示了他们如何在各自的学科领域内开展项目。他们共同展示了可视化所能实现的功能以及如何使用它来改变世界。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s4476325.jpg" alt=""><br><a href="https://book.douban.com/subject/5269219/" target="_blank" rel="external">数据之美</a></p>
<blockquote>
<p>“数据被证实好比下一代计算机应用的‘因特尔内核’。在本书中，各业界领袖描述了他们的项目如何通过新的方式来驾驭数据的力量。对于任何对未来关于数据和问题解决感兴趣的读者来说，本书是必读的佳作。”<br>——Tim O’Reilly, O’Reilly Media公司创始人兼CEO<br>探索数据的范围可以多么广泛，其工作可以多么美丽！通过这部个人故事集合，在这个领域的39个最佳数据实践者阐释了他们如何为各种项目开发简单优雅的解决方案，包括从火星着陆探测器到Radiohead视频的制作……</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s4018061.jpg" alt=""></p>
<h3 id="架构之美"><a href="#架构之美" class="headerlink" title="架构之美"></a><a href="https://book.douban.com/subject/4086029/" target="_blank" rel="external">架构之美</a></h3><blockquote>
<p>本书围绕5个主题领域来组织本书的内容：概述、企业应用、系统、最终用户应用和编程语言。本书让最优秀的设计师和架构师来描述他们选择的软件架构，剥开架构的各层，展示他们如何让软件做到实现功能、可靠、易用、高效率、可维护、可移植和优雅。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s4329171.jpg" alt=""></p>
<h3 id="团队之美"><a href="#团队之美" class="headerlink" title="团队之美"></a><a href="https://book.douban.com/subject/4803982/" target="_blank" rel="external">团队之美</a></h3><blockquote>
<p>一个优秀的软件开发团队面临一个棘手的问题，在这样的团队中工作是一种什么情形呢？如何才能打造一个富有战斗力的团队？一组不能融洽相处的人也能够开发出好的软件吗？当项目关系重大、进度又很紧张的时候，团队领导如何让每个人都能符合既定的要求和日程安排？<br>本书带你到幕后看一看软件工程历史上最引人关注的团队。通过最杰出的程序员、架构师、项目经理和思想领袖的一系列引人入胜的故事和访谈，你将从资深团队领导的成功与失败中学到经验。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s3833845.jpg" alt=""><br><a href="https://book.douban.com/subject/3668161/" target="_blank" rel="external">项目管理之美</a></p>
<blockquote>
<p>通过本书，你可以从一位经验丰富、从事多年软件开发和Web开发的经理那里学习如何计划、管理和领导项目。书中的那些宝贵而有用的建议，是作者十多年经验的积累，从很多复杂的概念和挑战中提炼而来。本书引人思考、生动有趣、坦诚直率、引人注目，是你和你的团队在当前和未来的项目中所必备的参考。.<br>包括如下主题：..<br>·如何制定好的决策<br>·想法以及如何处理<br>·领导力和信任<br>·当事情出错时该怎么办</p>
</blockquote>
<p><img src="https://img1.doubanio.com/lpic/s4416878.jpg" alt=""><br><a href="https://book.douban.com/subject/4805950/" target="_blank" rel="external">测试之美</a></p>
<blockquote>
<p>本书主要介绍各种优美的测试方法、测试工具、测试案例，以及杰出的测试人员和结构良好的测试群体。各种从业人员通过了解本书提供的不同场景并借鉴以往成功的经验可以提高测试能力和水平。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s4702850.jpg" alt=""><br><a href="https://book.douban.com/subject/6039240/" target="_blank" rel="external">安全之美</a></p>
<blockquote>
<p>《安全之美》包含以下内容：<br>个人信息背后的经济：它的运作方式、犯罪分子之间的关系以及他们攻击猎物的新方法。<br>社交网络、云计算及其他流行的趋势如何帮助或损害在线安全。<br>度量指标、需求收集、设计和法律如何将安全提高到一个新水平。<br>PGP不为人所知的真实历史。</p>
</blockquote>
<p><img src="https://img1.doubanio.com/lpic/s27280759.jpg" alt=""></p>
<h3 id="数据之美"><a href="#数据之美" class="headerlink" title="数据之美"></a><a href="https://book.douban.com/subject/25833225/" target="_blank" rel="external">数据之美</a></h3><blockquote>
<p>这是一本教我们如何制作完美可视化图表，挖掘大数据背后意义的书。作者认为，可视化是一种媒介，向我们揭示了数据背后的故事。他循序渐进、深入浅出地道出了数据可视化的步骤和思想。本书让我们知道了如何理解数据可视化，如何探索数据的模式和寻找数据间的关联，如何选择适合自己的数据和目的的可视化方式，有哪些我们可以利用的可视化工具以及这些工具各有怎样的利弊。<br>作者给我们提供了丰富的可视化信息以及查看、探索数据的多元视角，丰富了我们对于数据、对于可视化的认知。对那些对设计和分析过程感兴趣的人，本书无疑就是一本必读书。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s4577092.jpg" alt=""></p>
<h3 id="短码之美"><a href="#短码之美" class="headerlink" title="短码之美"></a><a href="https://book.douban.com/subject/5416095/" target="_blank" rel="external">短码之美</a></h3><blockquote>
<p>本书主要介绍短码编程，首先介绍了短码编程的三要素：数据结构和算法、执行环境以及短码编程的精神。书中以北京大学的PKU Judge Online 在线评分系统为编程环境，选取了该系统中比较典型的问题，如海狸啃木头、旋转拼图、葡萄酒买卖，利用数据结构和算法的知识加以分析，最 后编程实现，并尝试使用各种编程语言，不断地将源代码缩短。同时还介绍并分析了一些钻安全漏洞的代码，旨在通过短码编程帮助程序员集中注意力，锻炼忍耐力，开拓视野。</p>
</blockquote>
<h2 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h2><p><img src="https://img3.doubanio.com/lpic/s27095600.jpg" alt=""></p>
<h3 id="互联网产品之美"><a href="#互联网产品之美" class="headerlink" title="互联网产品之美"></a><a href="https://book.douban.com/subject/25748470/" target="_blank" rel="external">互联网产品之美</a></h3><blockquote>
<p>《互联网产品之美》为读者展示了产品人的现状、窘境以及喜悦，语言生动活泼、一气呵成。作为产品经理，如何磨砺你的眼光，用敏锐的嗅觉来发现产品的价值之美、设计之美、运营之美、营销之美，完成从优秀到卓越的涅槃？作为项目管理者，如何深入洞察并快速响应客户需求，突破固化思维模式，在跨团队、多项目压力下快速推进业务合作，通过产品创新不断引领运营的发展？本书从人文情感与体验式服务的角度，致力于构筑一个科学的产品经理成长体系。通过产品的价值与机会、更新改版、运营服务、数据挖掘等方面的讲解，让你身临其境体验产品人的美妙之旅，快速找到产品创意的“杀手锏”，拥有自己的核心竞争力。</p>
</blockquote>
<h2 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h2><p><img src="https://img3.doubanio.com/lpic/s4336091.jpg" alt=""></p>
<h3 id="设计之美"><a href="#设计之美" class="headerlink" title="设计之美"></a><a href="https://book.douban.com/subject/4263899/" target="_blank" rel="external">设计之美</a></h3><blockquote>
<p>设计中历史的、背景的、哲学的、技术的、视觉的以及实践的方法经常单独地出现在设计者面前。但是，每种方法又影响到其它方法，它们共同作用着我们对设计的全面理解。《设计之美》一书将这些方法作为一个整体系统地呈现出来，详尽讲解了各种基本概念，引领读者把设计中不同的元素联系起来。<br>本书在本质上并不是讲述美的哲学，而是通过融入实用、历史、文本问题介绍设计，这些问题通常被当作分离的实体教授，但全都是成为优秀的设计师所必需具备的知识。一名优秀的设计师应该能够面对众多新问题，提出美妙的整体的解决方案。<br>全书生动易读，一步一步带领读者领略设计中的品位、设计演变、构图、色彩、绘图、传播以及表达等主要话题；此外，还概括地讲解了书中复杂但又十分必要的概念。书中大量精美的插图展示了各种精美的设计案例。<br>“我们有证据证明极具美感的物品能使人工作更加出色……让我们感觉良好的物品和体系能更容易相处，并能创造出更和谐的氛围。”<br>——唐纳德•诺曼(Donald Norman)，美国西北大学教授、情感设计大师</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s24642460.jpg" alt=""></p>
<h3 id="简约之美"><a href="#简约之美" class="headerlink" title="简约之美"></a><a href="https://book.douban.com/subject/20445258/" target="_blank" rel="external">简约之美</a></h3><blockquote>
<p>《简约之美:软件设计之道》将软件设计作为一门严谨的科学，阐述了开发出优雅简洁的代码所应该遵循的基本原则。作者从为什么以前软件设计没有像数学等学科一样成为一门科学开始入手，道出了软件以及优秀的软件设计的终极目标，并给出了具体的指导规则。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s27829295.jpg" alt=""></p>
<h3 id="简单之美"><a href="#简单之美" class="headerlink" title="简单之美"></a><a href="https://book.douban.com/subject/4714092/" target="_blank" rel="external">简单之美</a></h3><blockquote>
<p>本书以软件开发的基本顺序为主线，以简单、想象和文化的开发思想为线索，以为软件开发实践提供指导价值为目标。本书力图做到传递经过组织的、可操作的软件开发经验，使软件开发领域的新手在知识（软件开发思想）积累过程中少走弯路，也使软件开发领域的老手可以对照自己的经验把可能的困惑降到最低。有一些有趣例子为那些有价值的思考提供支持。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s6508251.jpg" alt=""></p>
<h3 id="秩序之美"><a href="#秩序之美" class="headerlink" title="秩序之美"></a><a href="https://book.douban.com/subject/6393626/" target="_blank" rel="external">秩序之美</a></h3><blockquote>
<p>怎样才能设计出简洁大方而不落于俗套的超人气网站？纽约时报网站的资深设计师Khoi Vinh在这《秩序之美——网页中的网格设计》一书中将为你揭示其中的奥秘。<br>　　《秩序之美——网页中的网格设计》将源自传统平面设计、被众多平面设计大师推崇的网格设计方法应用于网页设计，向读者详细介绍了网格设计成熟而经典的设计模式，并以整个网站的设计为例，对工作流程、设计工具和方法进行了系统而全面的介绍，手把手教读者从零开始，完成网站主要页面的设计。<br>　　《秩序之美——网页中的网格设计》为所有网站设计人员提供了一个完美的设计参考。在阅读并实践本书的内容后，读者不但可以开拓眼界，更能提升自己的设计水平。</p>
</blockquote>
<p><img src="https://img1.doubanio.com/lpic/s11344578.jpg" alt=""></p>
<h3 id="信息之美"><a href="#信息之美" class="headerlink" title="信息之美"></a><a href="https://book.douban.com/subject/10749405/" target="_blank" rel="external">信息之美</a></h3><blockquote>
<p>《信息之美》告诉读者信息视觉效果的显示和信息如何关联，以及和这些信息相关的事实，让信息设计更有意思，信息决策更高效。我们生活在一个信息爆炸的时代，每一分钟、每一秒钟都会从电视、报纸或互联网获得信息，我们甚至都来不及思索，就已经被这些信息淹没。所以，我们需要一种新的方法，来发现信息的美和乐趣。《信息之美》作者花了一年的时间，收集了200多个新的图像信息设计案例，并探索出一系列视觉主题。</p>
</blockquote>
<h2 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h2><p><img src="https://img3.doubanio.com/lpic/s11430191.jpg" alt=""></p>
<h3 id="系统之美"><a href="#系统之美" class="headerlink" title="系统之美"></a><a href="https://book.douban.com/subject/11528220/" target="_blank" rel="external">系统之美</a></h3><blockquote>
<p>作为一本实用的入门指南，本书不仅讲解了系统动力学的基本概念、列举了常见的系统结构，还详细陈述了复杂系统的3大特征、8大陷阱与对策、12大变革方式以及15大生存法则。作者把系统思考从计算机和方程式的世界中解脱出来，以各种真实的案例，阐述了系统思考如何应用于各种现实问题，向读者展示了如何提升和应用系统思考技能——这一项普遍被认为是21世纪全球领导力的核心技能。</p>
</blockquote>
<h2 id="Nature"><a href="#Nature" class="headerlink" title="Nature"></a>Nature</h2><p><img src="https://img3.doubanio.com/lpic/s28033535.jpg" alt=""></p>
<h3 id="自然之美"><a href="#自然之美" class="headerlink" title="自然之美"></a><a href="https://book.douban.com/subject/26345725/" target="_blank" rel="external">自然之美</a></h3><blockquote>
<p>中国国家地理与一群优秀的自然记录者合作，一本有关自然的珍藏之书！<br>• 中国第一本自然影像志，以影像、图说的方式带你认识了解中国的自然、物种；<br>• 国内33位最前沿的自然摄影师的精彩作品；<br>• 中国多个人迹罕至的自然保护区和野外生境中的珍贵图片；<br>• 多种生活在未知荒野的珍稀物种，在书里首次介绍 ；</p>
</blockquote>
<p><img src="https://img1.doubanio.com/lpic/s3920239.jpg" alt=""></p>
<h3 id="自然之美-1"><a href="#自然之美-1" class="headerlink" title="自然之美"></a><a href="https://book.douban.com/subject/3628453/" target="_blank" rel="external">自然之美</a></h3><blockquote>
<p>《自然之美》主要内容：天地有大美而不言，所幸的是人类有一双发现美的眼睛。当我们把镜头对准包蕴万千、鬼斧神工的大自然时，会发现美丽就在我们身边。世外桃源般的香格里拉，人间的梦幻天堂，被多少人引为终老之地；古朴沧桑的科罗拉多大峡谷，造化之笔造就的粗犷与壮观，让人以为站到了地球的边缘；欧洲最后的净土。圣诞老人的故乡——拉普兰的皑皑白雪、驯鹿雪橇，带你进入童话世界；远方的安赫尔瀑布，九天之水倾泻而下，涤荡心胸，让你无比震撼……人类在时间长河中是何等的渺小，历史在自然面前变得寂静无声。<br>真正的天堂就是生活在美的自然中间，于是我们去美洲，让飞泻的雷霆之水涤荡坠入凡尘的心灵；于是我们去非洲，让那种原始的未被任何人类行为干涉过的粗犷打动灵魂；于是我们去大洋洲，让心灵因与世无争而纯洁美丽。<br>徜徉于自然之中，得失之心、凡尘俗事俱烟消云散，透过炫目的光圈，都化作浓浓淡淡的幸福。</p>
</blockquote>
<h3 id="极致之美"><a href="#极致之美" class="headerlink" title="极致之美"></a><a href="https://book.douban.com/subject/25831306/" target="_blank" rel="external">极致之美</a></h3><blockquote>
<p>精选《中国国家地理》10余年600余期杂志的经典摄影作品。<br>•汇集67位中国顶尖风光、地理、生态摄影师的162幅优秀作品。<br>•《中国国家地理》推出的第一本综合题材精装画册，李栓科社长主编并撰写序言。<br>•以“大地理”的分类形式，重新汇总、梳理中国极致生态和风光景观，详细展示《中国国家地理》的审美视角和观察方法。<br>•封面由获第50届台湾“金马奖”最佳纪录片导演齐柏林拍摄。<br>这是《中国国家地理》推出的第一本、由中国摄影师的作品精选而成的精装画册。编辑团队历时7个月，从山到海，从荒野到沙漠，从过去到现在，从成千上万张作品中，精选了162张表现中国风光、自然、生态的图片。这些图片展示的是摄影师们在中国各个极致之地，探索到的隐藏其中的绝美景色。<br>除视觉享受之外，此画册还为探索中国的自然、历史、景观带来一种观看方式的参考。</p>
</blockquote>
<h2 id="Literature"><a href="#Literature" class="headerlink" title="Literature"></a>Literature</h2><p><img src="https://img1.doubanio.com/lpic/s1171759.jpg" alt=""></p>
<h3 id="无言之美"><a href="#无言之美" class="headerlink" title="无言之美"></a><a href="https://book.douban.com/subject/1226353/" target="_blank" rel="external">无言之美</a></h3><blockquote>
<p>《无言之美》选取了朱先生围绕这些问题所写的一些短文，分“星光”、“化境”、“妙悟”和“生趣”四编，配以美图，展现了美学大师的穆然深思和悠然遐想。朱光潜先生的美学体系涉及美、艺术作品、审美经验和审美人生等基本问题。</p>
</blockquote>
<h2 id="IPCreator"><a href="#IPCreator" class="headerlink" title="IPCreator"></a>IPCreator</h2><h3 id="英语之美"><a href="#英语之美" class="headerlink" title="英语之美"></a>英语之美</h3><p>单词之美<br>句子之美<br>文章之美</p>
<h3 id="成长之美"><a href="#成长之美" class="headerlink" title="成长之美"></a>成长之美</h3><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1]<a href="https://book.douban.com/subject/26163454/" target="_blank" rel="external">数学之美 （第二版）</a><br>[2]<a href="https://book.douban.com/subject/7064456/" target="_blank" rel="external">研究之美</a><br>[3]<a href="https://book.douban.com/subject/3004255/" target="_blank" rel="external">编程之美</a><br>[4]<a href="https://book.douban.com/subject/11528220/" target="_blank" rel="external">系统之美</a><br>[5]<a href="https://book.douban.com/subject/3224524/" target="_blank" rel="external">代码之美</a><br>[6]<a href="https://book.douban.com/subject/4263899/" target="_blank" rel="external">设计之美</a><br>[7]<a href="https://book.douban.com/subject/6439420/" target="_blank" rel="external">数据可视化之美</a><br>[8]<a href="https://book.douban.com/subject/5269219/" target="_blank" rel="external">数据之美</a><br>[9]<a href="https://book.douban.com/subject/4086029/" target="_blank" rel="external">架构之美</a><br>[10]<a href="https://book.douban.com/subject/4803982/" target="_blank" rel="external">团队之美</a><br>[11]<a href="https://book.douban.com/subject/3668161/" target="_blank" rel="external">项目管理之美</a><br>[12]<a href="https://book.douban.com/subject/4805950/" target="_blank" rel="external">测试之美</a><br>[13]<a href="https://book.douban.com/subject/6039240/" target="_blank" rel="external">安全之美</a><br>[14]<a href="https://book.douban.com/subject/26345725/" target="_blank" rel="external">自然之美</a><br>[15]<a href="https://book.douban.com/subject/10749405/" target="_blank" rel="external">信息之美</a><br>[16]<a href="https://book.douban.com/subject/25831306/" target="_blank" rel="external">极致之美</a><br>[17]<a href="https://book.douban.com/subject/1226353/" target="_blank" rel="external">无言之美</a><br>[18]<a href="https://book.douban.com/subject/6393626/" target="_blank" rel="external">秩序之美</a><br>[19]<a href="https://book.douban.com/subject/25833225/" target="_blank" rel="external">数据之美</a><br>[20]<a href="https://book.douban.com/subject/5416095/" target="_blank" rel="external">短码之美</a><br>[21]<a href="https://book.douban.com/subject/20445258/" target="_blank" rel="external">简约之美</a><br>[22]<a href="https://book.douban.com/subject/4714092/" target="_blank" rel="external">简单之美</a><br>[23]<a href="https://book.douban.com/subject/26270565/" target="_blank" rel="external">科学之美——从大爆炸到数字时代</a><br>[24]<a href="https://book.douban.com/subject/6782542/" target="_blank" rel="external">物理学之美</a><br>[25]<a href="https://book.douban.com/subject/25748470/" target="_blank" rel="external">互联网产品之美</a><br>[26]<a href="https://book.douban.com/subject/25919532/" target="_blank" rel="external">宇宙之美</a><br>[27]<a href="https://book.douban.com/subject/3628453/" target="_blank" rel="external">自然之美</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/beautiful-switzerland-43.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;训练美感，先学会欣赏，与其寻找或等待，不如自己创造。&lt;/p&gt;
&lt;p&gt;人生如歌，有高潮也有低潮，高潮有高潮时的快感，低潮有低潮时的风景，美好的事物太多，时光太短暂，注意力太宝贵，聚焦并追逐梦想，享受人生过程，无暇也无需他顾。&lt;/p&gt;
&lt;p&gt;Programmer Vs Pianist，都需要创造力，都需要持久的刻意练习以升级到更高水准，都属于超级个体类别，哦，对了，还都需要一个好的Keyboard还都喜欢Music:)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Error Concepts in My Past Brain OS</title>
    <link href="http://ipcreator.me/2017/03/28/MyView/Original/error-concept-in-my-past-brain-os/"/>
    <id>http://ipcreator.me/2017/03/28/MyView/Original/error-concept-in-my-past-brain-os/</id>
    <published>2017-03-27T22:59:18.000Z</published>
    <updated>2017-03-28T06:16:06.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>IPCreator：观念的落后就是最大的落后</p>
</blockquote>
<p><a href="https://h5.sao.cn/product/detail?alias=onhnfsdtybxb" target="_blank" rel="external">通往财富自由之路</a></p>
<p><img src="http://ong8f1obl.bkt.clouddn.com/basic%20brain%20concept.jpg" alt=""></p>
<p>复利效应的公式：（1+r）<sup>n</sup> ，其中1是你的起点，r代表每天的进步。它可以很小，但是你要保证，它一定得是正的。</p>
<p>如果我们脑子里没有一个概念的话，我们的脑子就倾向于不去想那个事情。</p>
<p><u>如果脑子里的一个概念不准确、或者没有准确、正确的定义，那么我们必然没有办法准确、正确地继续思考下去。</u><sup>[1]</sup> 进而产生的连锁反应是，因为定义不准确，所以思考范围模糊，选择依据缺失，进而行动错误…进而影响整个生活。</p>
<p>清晰且正确的概念是一切思考的基石。而衡量一个人是否聪明，几乎可以凝练这两个条件：</p>
<ol>
<li>有没有足够多清晰、准确、正确的概念；</li>
<li>概念之间有没有清晰、准确、正确的练习。靠着主动给自己清晰大脑，人是可以变得更聪明的。</li>
</ol>
<p>学一门课程的时候，最开始的“概论”最难学，因为你关于这门课的<strong>知识体系</strong>几乎等于0，概论里提到的每一个新概念对你来说都要从0学起，也都有可能分散你最初学习的注意力。每当你对一个<strong>领域的理解</strong>上了一个新台阶，你都会发现自己提升这个领域的能力的速度也在加快。</p>
  <a id="more"></a>
<h2 id="什么是“财富自由”"><a href="#什么是“财富自由”" class="headerlink" title="什么是“财富自由”"></a>什么是“财富自由”</h2><blockquote>
<p>所谓的个人财富自由，指的是某个人再也不用为了满足生活必需而出售自己的时间了。</p>
<p>我们每个人做得所有奋斗的本质，都是让自己出售的时间单价更高。</p>
</blockquote>
<p>你做得事情终将成为你生命中的一部分。在你获得财富自由之后，还是会不断做得事情，比如，专注成长而不是专注成功，很多人没有意识到的是，不管你获得了怎样的成功，你依然需要成长，财富自由不是终点，那只是通往终点过程中的一个里程碑而已。</p>
<h2 id="成长才是根本关键"><a href="#成长才是根本关键" class="headerlink" title="成长才是根本关键"></a>成长才是根本关键</h2><p>为了成长，你必需选择。</p>
<p>最终的一切，都是自己选的。很多人完全没有意识到，自己总是可以有所选择的，当然也就更不知道有了选择的时候应该如何判断。</p>
<blockquote>
<p>选择的判断标准有一个就足够了：我选择的事能不能让我积累更多的能力？没有能力积累的努力，就是原地踏步呀。</p>
</blockquote>
<p><strong>陷阱</strong></p>
<p>很多人在做选择的时候，考虑的是，在这个选择之后，我过往的能力能否用得上？</p>
<p>这还是<u>“终点式思维”，不是“里程碑式思维”。</u>正是因为这样想了，所以大多数人习得新能力的可能性越来越低。因为他们不知不觉已被自己的已有能力禁锢了。</p>
<p>真正正确的思考方式应该是：在这个选择之后，能帮我完善那个已有能力，能让我获得什么新能力。</p>
<h2 id="重视价值忽略估值"><a href="#重视价值忽略估值" class="headerlink" title="重视价值忽略估值"></a>重视价值忽略估值</h2><p>就像股票一样，每个人也存在一个市场给你的“估值”和真实的“价值”，通过简单的类比你就能知道，外人很难准确知道你的价值。</p>
<p>当你在意估值的时候，你就会忘记你的价值，你就会不由自主做那些提高你估值的事，而不是去想办法提高你的价值。<u>长期来看，估值是虚幻的，虽有波动，却实际上锚定在价值上，价值不增长，长期来看估值一定长不上去，而且既然有极度高估，那么就不但随时有低估，还随时会有极度低估。</u></p>
<h2 id="耐心比什么都重要"><a href="#耐心比什么都重要" class="headerlink" title="耐心比什么都重要"></a>耐心比什么都重要</h2><blockquote>
<p>耐心的力量，相当于交易中的复利效应，并且一定会通过复利效应展现出来。</p>
</blockquote>
<p>用心智的力量去时刻告诉自己，觉得困难的阶段不过是必经之路——而这正是耐心的真谛。<br>很多人最终失去对事情的耐心，都是因为先失去了对“低效率的自己”的耐心。</p>
<p><u>没有耐心的人，更容易选择“终点式思维”</u>，他们希望快一点完事儿，快一点看到结果，然后就能去他们意想出来的那个世界了。<u>没耐心的人不会有好的积累，他们不会把每件事都当做自己的事来做；没耐心的人当然也更注重估值，甚至愿意为之而自欺和欺人，因为他们只能想到短期效益；没耐心的人甚至都不会思考真正重要的事——价值。</u></p>
<p><strong>陷阱</strong><br>有很多人会为自己的缺乏耐心找一个看似站得住脚的借口：我现在做得事情不喜欢，才会出现这样那样的问题，等我做到那件真正喜欢的事情的时候，我就可以……</p>
<p>就算你以极高的成本最终进入了所谓你喜欢的领域，你也永远不可能达到你所意想的那种效率状态的。</p>
<p>但是无论用经验还是纯理性去想，你会发现，做不到当下自己喜欢的那件事，是几乎所有人的常态。越是这种时候越需要耐心，耐心之所以宝贵也体现于此。</p>
<h2 id="“绝大多数人就是做不到只字不差地阅读”"><a href="#“绝大多数人就是做不到只字不差地阅读”" class="headerlink" title="“绝大多数人就是做不到只字不差地阅读”"></a>“绝大多数人就是做不到只字不差地阅读”</h2><p>在过去的那么多年里，我最仰仗的是自己的学习能力——“需要什么，就能学会什么”，这实在是幸运的源泉。我的信条是“一生只有一个职业——学生”。这么多年的观察和思考，你知道我认为大多数人学习能力差的最根本原因是什么吗？</p>
<blockquote>
<p>“绝大多数人就是做不到只字不差地阅读”</p>
</blockquote>
<p><u>只字不差地阅读，要多简单有多简单，与此同时，要多重要就有多重要。</u></p>
<blockquote>
<p>1.阅读本身，几乎没有任何价值；<br>2.阅读之后的思考，思考之后的选择，<strong>选择之后的行动才有价值</strong>；<br>3.通往财富自由之路很长很长，弄不好要走一辈子（七年就是一辈子）以上，所以仅仅行动本身都不够……<br>4.<strong>只有持续正确的行动才可能有积累效果，才可能引发真正有意义的变化</strong>；<br>5.又，财富自由只不过是个里程碑；路过它之后，你依然有很长很长的路要走，否则那之前的路也没有什么意义……</p>
</blockquote>
<p><strong>陷阱</strong><br>所以，他们自己总也读不明白，甚至竟然在没有读明白的情况下认为自己读明白了；到了用的时候，才发现自己不会，然后竟然“坚决不去认真只字不差地读书”，非要花钱报个班，听别人的“解读”……</p>
<p>都吃了那么多年的亏了，还不自知，整天速读、跳读、扫读，还以为自己多有效率呢，你说那些人能不注定吃亏吗？吃亏不可怕，可怕的是吃着亏还以为占了便宜，这可是双重负载，还是可能引发无数负循坏的双重负载。</p>
<h2 id="你拥有的最重要、却被人忽视了的最宝贵财富是什么？"><a href="#你拥有的最重要、却被人忽视了的最宝贵财富是什么？" class="headerlink" title="你拥有的最重要、却被人忽视了的最宝贵财富是什么？"></a>你拥有的最重要、却被人忽视了的最宝贵财富是什么？</h2><blockquote>
<p><strong>注意力</strong></p>
</blockquote>
<p>钱不是最重要的，因为它可以再生；时间也不是最重要的，因为它本质上不属于你，你只能试着与它做朋友，让它为你所用。你的注意力才是你所拥有的最重要、最高贵的资源——从这个角度望过去，人生其实是公平的，<u>因为你的注意力确实是你自己可以做主的，除非你自己放弃。</u>所以，那结局是好是坏，其实真的是你自己选的。</p>
<p>必须<u>把最宝贵的注意力全部放在你自己身上</u>。因为，最终，你的一切价值，都是你的注意力的产出。</p>
<p>那放在自己的哪儿上？答案明确而又唯一：<u>放在“成长”上</u>。</p>
<p><u>真正的安全感、归属感、成就感，应该来自自我的成长积淀，而不是通过透支自己宝贵的注意力来获得的一些短期的错觉。</u></p>
<p>把注意力放在自己的成长上。放在一切可以有积累效应的技能上，然后给予充分的学习、思考和磨练。有些技能在初期不会显现出特别像一个“技能”的模样，但是<u>随着积累的加深，它对你能力提升曲线的影响会变为指数式</u>。升级升级再升级，真的没空折腾别的乱七八糟的事情。</p>
<p>害怕孤独和真爱是有本质区别的，这种区别我们可以视作是“弱”与“强”的区别。因为<u>真爱的意思是，你甚至愿意把自己最宝贵的财富“浪费”在他们身上，这恰恰是掌握资源的体现，但是害怕孤独的人，会假借爱的名义疯狂索取</u>。</p>
<p><strong>三个大坑</strong></p>
<blockquote>
<p>第一个大坑，叫“莫名其妙地凑热闹”</p>
</blockquote>
<p>那么多的人其实没什么正事儿可做，连读书都不会，闲得要死；大量闲置的时间需要被杀掉，大量闲置的精力需要被发泄，大量的好奇心需要个喷射的出口……</p>
<blockquote>
<p>第二个大坑，叫“心急火燎地随大流”</p>
</blockquote>
<p>若是内容创业真的是大趋势，大潮流，那么，在此之前已经写了十年字的那票人显然是“虽然不故意却必然准备最充分”的呀，这才开始心急火燎的人，哪儿是另外一票人的对手呢？</p>
<p>平日里整天挂在嘴边的那句话“机会属于有准备的人”到了这个时候就好像完全没听说过似的，究竟是为什么呢？只因为平日里从无积累。</p>
<p>可惜，<u>平日里只有一颗上进的心，一样滚烫，却从未有过积累的行动</u>。</p>
<blockquote>
<p>第三个大坑，叫“操碎了别人的心肝”</p>
</blockquote>
<p>失败乃成功之母，这不是每个人都知道的正确道理吗？别人失败了，你怎么就知道人家不会在失败中总结经验呢？你怎么就那么笃定人家失败了就从此一蹶不振呢？你就没听过那首歌吗？那些弄不死我的只能让我更强？谁说失败不是正常生活的必需构成部分？</p>
<p><u>两个字：闲的。</u></p>
<p>一句话：自己是泥菩萨，一条小河都过不去，却要操碎了别人的心肝，真不知道图个啥。人家创业失败了，你也不会有损失，可若是人家创业成功了，你害怕，是不？</p>
<h2 id="凡是能用钱买的其实都是便宜的。"><a href="#凡是能用钱买的其实都是便宜的。" class="headerlink" title="凡是能用钱买的其实都是便宜的。"></a>凡是能用钱买的其实都是便宜的。</h2><p>绝大多数人的基础观念就是错的——绝大多数人骨子里就是认为钱是最重要的。这也很容易理解，因为他们在生活里时时刻刻都能感受到赚钱的困难。因为困难，所以难得，因为难得，所以重要……看似逻辑相当严谨。</p>
<blockquote>
<p>注意力&gt;时间&gt;金钱，凡是能用钱买来的时间就是便宜的；凡是能用时间换来的注意力持续就是有价值的。</p>
</blockquote>
<p>许多家庭不幸福的根本原因就是相互之间时间投资太少——就这么简单。</p>
<p><strong>麻烦守恒定律</strong><br>麻烦总量一定，解决麻烦只是一个分配问题。人承担一部分，工具承担一部分，人需要投入的是时间和注意力，工具需要投入的更多的是金钱。</p>
<p>拿钱换时间，换注意力不是我们的根本目的。我们的目的是为了每天有所积累，有所成长。用钱买时间和注意力只是手段，目的是为了更有效地提升自我。旅游也只是手段，目的是为了放松自我。不要沉迷于手段，而忘记了最初的目的。</p>
<p>最吃亏的则是事事都一知半解，总希望找捷径和免费教材的人，绕了一圈下来，感觉金钱上没有付出太多，但实际上已经浪费了太多的精力和时间，最终也没有收获好的结果。</p>
<h2 id="IPCreator践行录"><a href="#IPCreator践行录" class="headerlink" title="IPCreator践行录"></a>IPCreator践行录</h2><p>一切都靠积累——《把时间当做朋友》<br>《人人都能学英语》是《把时间当做朋友》的践行版<br>英语这种技能，只有用起来才有积累——《人人都能学英语》<br>《通往财富自由之路》是《新生——七年就是一辈子》的践行版</p>
<h3 id="元技能-Meta-Skills"><a href="#元技能-Meta-Skills" class="headerlink" title="元技能 Meta Skills"></a>元技能 Meta Skills</h3><p>Google、English、Innovation Thinking</p>
<h3 id="元习惯-Meta-Habits"><a href="#元习惯-Meta-Habits" class="headerlink" title="元习惯 Meta Habits"></a>元习惯 Meta Habits</h3><p>Basic ConceptPatience、Focus Attention、<br>Reading Word by Word、Writing method</p>
<h3 id="英语怎么用？"><a href="#英语怎么用？" class="headerlink" title="英语怎么用？"></a>英语怎么用？</h3><p>将其作为一种语言工具，获取对自己有用的信息或提升生活品质的工具<br>而不是为了学而学，为了记单词而记单词……</p>
<ol>
<li>Blog</li>
<li>Goolge</li>
<li>Wikipedia</li>
<li>Program</li>
<li>Music/Movie</li>
</ol>
<h3 id="编程怎么用？"><a href="#编程怎么用？" class="headerlink" title="编程怎么用？"></a>编程怎么用？</h3><p>同样，不为了学而学，为了解决生活中的实际痛点<br>化整为零，各个击破，把握好成就感和节奏感<br>学会利用English、Google和OpenSource等相关工具及资源<br>阅读整合、搜集整理代码片段、动手实践实用项目<br>实战中整理、完善知识框架及各个技能点</p>
<h3 id="专利怎么用？"><a href="#专利怎么用？" class="headerlink" title="专利怎么用？"></a>专利怎么用？</h3><p>技术/产品专利化，专利技术/产品化<br>专利信息是一座宝库，可以充分利用<br>复用English、Google、Program等相关知识和技能</p>
<h3 id="AI潮流怎么抓住？"><a href="#AI潮流怎么抓住？" class="headerlink" title="AI潮流怎么抓住？"></a>AI潮流怎么抓住？</h3><p>基于TensorFlow和Android平台，聚焦UI和IPR两个领域，<br>基于日常操作行为和习惯，给用户带来智能、高效的创新体验。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]<a href="/2017/01/02/MyShare/iGet/lixiaolai-lead-to-freedom-of-wealth/">通往财富自由之路</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;IPCreator：观念的落后就是最大的落后&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://h5.sao.cn/product/detail?alias=onhnfsdtybxb&quot;&gt;通往财富自由之路&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/basic%20brain%20concept.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;复利效应的公式：（1+r）&lt;sup&gt;n&lt;/sup&gt; ，其中1是你的起点，r代表每天的进步。它可以很小，但是你要保证，它一定得是正的。&lt;/p&gt;
&lt;p&gt;如果我们脑子里没有一个概念的话，我们的脑子就倾向于不去想那个事情。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;如果脑子里的一个概念不准确、或者没有准确、正确的定义，那么我们必然没有办法准确、正确地继续思考下去。&lt;/u&gt;&lt;sup&gt;[1]&lt;/sup&gt; 进而产生的连锁反应是，因为定义不准确，所以思考范围模糊，选择依据缺失，进而行动错误…进而影响整个生活。&lt;/p&gt;
&lt;p&gt;清晰且正确的概念是一切思考的基石。而衡量一个人是否聪明，几乎可以凝练这两个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有没有足够多清晰、准确、正确的概念；&lt;/li&gt;
&lt;li&gt;概念之间有没有清晰、准确、正确的练习。靠着主动给自己清晰大脑，人是可以变得更聪明的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;学一门课程的时候，最开始的“概论”最难学，因为你关于这门课的&lt;strong&gt;知识体系&lt;/strong&gt;几乎等于0，概论里提到的每一个新概念对你来说都要从0学起，也都有可能分散你最初学习的注意力。每当你对一个&lt;strong&gt;领域的理解&lt;/strong&gt;上了一个新台阶，你都会发现自己提升这个领域的能力的速度也在加快。&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
  </entry>
  
  <entry>
    <title>Why</title>
    <link href="http://ipcreator.me/2017/03/27/MyView/Original/why/"/>
    <id>http://ipcreator.me/2017/03/27/MyView/Original/why/</id>
    <published>2017-03-27T14:04:06.000Z</published>
    <updated>2017-03-27T14:51:30.917Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/5why.jpg" alt=""></p>
<blockquote>
<p>无论是学习研究，还是个人成长，多问为什么？</p>
</blockquote>
<p>所谓5why分析法，又称“5问法”，也就是对一个问题点连续以5个“为什么”来自问，以追究其根本原因。虽为5个为什么，但使用时不限定只做“5次为什么的探讨”，主要是必须找到根本原因为止，有时可能只要3次，有时也许要10次，如古话所言：打破砂锅问到底。</p>
<p>5why法的关键所在：鼓励解决问题的人要努力避开主观或自负的假设和逻辑陷阱，<u><strong>从结果着手，沿着因果关系链条，顺藤摸瓜，直至找出原有问题的根本原因</strong></u>。<sup>[1]</sup></p>
<a id="more"></a>
<h2 id="5Whys"><a href="#5Whys" class="headerlink" title="5Whys"></a>5Whys</h2><p>Rules of performing 5Whys <sup>[2]<sup></sup></sup></p>
<p>In order to carry out the 5-Why analysis properly, the following advice should be followed:</p>
<ol>
<li><p>It is necessary to engage the management in the 5Whys process in the company. For the analysis itself, consider what is the right working group. Also consider bringing in a facilitator for more difficult topics.</p>
</li>
<li><p>Use paper or whiteboard instead of computers.</p>
</li>
<li><p>Write down the problem and make sure that all people understand it.</p>
</li>
<li><p>Distinguish causes from symptoms.</p>
</li>
<li><p>Pay attention to the logic of cause-and-effect relationship.</p>
</li>
<li><p>Make sure that root causes certainly lead to the mistake by reversing the sentences created as a result of the analysis with the use of the expression “and therefore”.</p>
</li>
<li><p>Try to make our answers more precise.</p>
</li>
<li><p>Look for the cause step by step. Don’t jump to conclusions.</p>
</li>
<li><p>Base our statements on facts and knowledge.</p>
</li>
<li><p>Assess the process, not people.</p>
</li>
<li><p>Never leave “human error”, “worker’s inattention”, etc., as the root cause.</p>
</li>
<li><p>Foster an atmosphere of trust and sincerity.</p>
</li>
<li><p>Ask the question “Why” until the root cause is determined, i.e. the cause the elimination of which will prevent the error from occurring again.</p>
</li>
<li><p>When you form the answer for question “Why” - it should happen from the customer’s point of view.</p>
</li>
</ol>
<h2 id="分析示例"><a href="#分析示例" class="headerlink" title="分析示例"></a>分析示例</h2><p>Why 1：为什么不能行动/聚焦/刻意练习/坚持…<br>Why 2：为什么急于求成/追求及时反馈…<br>Why 3： 别人为什么能够做到及时行动/聚焦/刻意练习/坚持？<br>Why 4：别人为什么有耐心？<br>Why 5：根本性的差异在哪里，包括客观和主观上的？<br>Why 6：为什么会产生这样的差异？<br>Why 7：别人是怎样成长到今天的？为什么？<br>Why 8：自己的成长策略又是什么？如何落实？为什么？<br>Why 9：回到Why1，形成一个正向循环。</p>
<h2 id="Kaifu-Lee"><a href="#Kaifu-Lee" class="headerlink" title="Kaifu Lee"></a>Kaifu Lee</h2><p>生病之前，我被美国《时代周刊》评选为“影响世界百大人物”之一，我意气风发地赴美受奖，自认实至名归、当之无愧。然而，吊诡的是，领奖回来没几个月，我就发现自己生病了。病中赤裸裸地暴露在病痛的风暴中，再大的影响力、再高的知名度都帮不了忙；在诊疗间、在病床上，我什么都不是，就是一个随时可能在呼吸之间顿失所有的病人。<sup>[3]</sup></p>
<p>那时候，我<strong>常常怨天怨地、责怪老天爷对我不公平，我从内心深处发出呼喊：“为什么是我？我做错了什么？这是因果报应吗？”</strong> 我是天之骄子啊！我有能力改变世界、造福人类，老天爷应该特别眷顾我，怎么可能会把我抛在癌症的烂泥地里，跟一群凡夫俗子一样在这里挣扎求生？</p>
<p>大师重重点醒了我：“追求最大化影响力，最后就会用影响力当借口，去追求名利。不承认的人，只是在骗自己。”为了追求更大的影响力，我像机器一样盲目地快速运转，我心中那只贪婪的野兽霸占了我的灵魂，各种堂而皇之的借口， 遮蔽了心中的明灯，让我失去准确的判断力。我告诉自己，有了影响力，我就可以伸张正义、做更多有意义的事，我的<strong>身体很诚实，我长期睡不好、痛风、便秘，还患了几次带状疱疹。这些警示都太微弱了，无法撼动我那越来越强大的信念；人说“不到黄河心不死”，狂心难歇，最后身体只好用一场大病来警告我，把我逼到生命的最底层，让我看看自己的无知、脆弱、渺小；也让我从身体小宇宙的复杂多变，体会宇宙人生的深邃和奥妙。</strong></p>
<p>身体病了，我才发现，其实我的心病得更严重！当我<strong>被迫将不停运转的机器停下来，不必再依赖咖啡提神，我的头脑才终于可以保持清醒，并清楚地看到，追逐名利的人生是肤浅的，为了改变世界的人生是充满压力的。珍贵的生命旅程，应该抱着初学者的心态，对世界保持儿童般的好奇心，好好体验人生；让自己每天都比前一天有进步、有成长，不必改变别人，只要做事问心无愧、对人真诚平等，这就足够了。如果世界上每个人都能如此，世界就会更美好，不必等待任何一个救世主来拯救。</strong></p>
<h2 id="Yu-Juan"><a href="#Yu-Juan" class="headerlink" title="Yu Juan"></a>Yu Juan</h2><p>《此生未完成》<sup>[4]</sup>在确诊得癌症之后，于娟没有大哭大闹，或者凄凄切切，而是冷静思考自己为什么得癌症？因为病患在身，恶毒诅咒也好，悔过自新也罢，都改变不了患癌事实。</p>
<h3 id="一、饮食习惯"><a href="#一、饮食习惯" class="headerlink" title="一、饮食习惯"></a>一、饮食习惯</h3><blockquote>
<p>瞎吃乱喝</p>
</blockquote>
<p>于娟吃了一些很多不该吃的东西：孔雀、海鸥、鲸鱼、河豚、梅花鹿、熊、麋鹿等，诸如此类不胜枚举。这些动物十分珍贵，且不说破坏自然和谐，暴虐地去吃受保护的动物。于娟还说到，所谓天物珍馐，一点都不好吃。那些动物，经过高压锅长时间煮炖，还是硬邦邦，咬下去就像啃森林里的千年老藤，好干好硬。想一下我们以前的老祖宗流传下来的食谱，经过那么多年的筛选，才锁定了现在的食材，如果孔雀比鸡好吃，那么现在孔雀就是鸡，鸡就是孔雀。</p>
<blockquote>
<p>暴饮暴食</p>
</blockquote>
<p>吃东西是大碗喝酒大口吃肉。吃的东西比男生还多，贪吃蛇的越吃越多越迟钝，无论你在灵巧灵敏，贪吃的后果是自食其果。</p>
<blockquote>
<p>嗜荤如命</p>
</blockquote>
<p>只吃荤，不吃素。身为山东西北的土孩子，吃不了海边长大的海鲜，但还是顿顿吃海鲜。一方水土养一方人，没有海边渔民的体质就不要吃那么多海鲜。以动物为主的膳食会导致慢性疾病的发生；以植物为主的膳食最有利健康，也能有效地预防和控制慢性疾病。所以少吃蔬菜和水果，少吃鸡、鸭、鱼、蛋、奶等。</p>
<h3 id="二、睡眠习惯"><a href="#二、睡眠习惯" class="headerlink" title="二、睡眠习惯"></a>二、睡眠习惯</h3><p>晚睡，以及长久的熬夜对身体很不好。熬夜直接危害肝脏，23时到次日3时是肝脏最佳的排毒时期，如果肝脏得不到休息，会导致肝脏血流相对不足，已受损害的肝细胞难以修复并加剧恶化。而肝脏是人体最大的代谢器官，肝脏受损，足以损害全身。所以，长期熬夜等于慢性自杀啊。</p>
<h3 id="三、突击作业"><a href="#三、突击作业" class="headerlink" title="三、突击作业"></a>三、突击作业</h3><p>现在很多人都有拖延症，喜欢把学习、作业、功课、考试、工作、拖到deadline前几天，然后通宵达旦地赶出来，去复习，赶论文，赶项目。于娟是2w女，所谓2W女就是在考前2周才认真复习的女生：2weeks，考出来的成绩也是too weak。</p>
<p>在考前2周埋头苦学、下死本折腾自己、快马加鞭、马不停蹄、呕心沥血看书……</p>
<p>拼心血、拼精力、拼死拼命去学习，还经常搞突击，搞高强度的学习、工作，即使你拥有硬朗的身体，健硕的体魄，也会报废的。</p>
<p>有些人熬夜是学习工作，有些人熬夜是玩、唱k、蹦迪、想想如果是去娱乐场所high到死，那好可怜，也很不值得。</p>
<h3 id="四、环境问题"><a href="#四、环境问题" class="headerlink" title="四、环境问题"></a>四、环境问题</h3><p>大环境问题，我国空气质量不如从前，污染严重。于娟在挪威留学回到上海，喉咙干、空气呛、不是感冒，就是发烧等等一些小病痛、小手术。现在的癌症发病率是多少？我不知道，总之比于娟前几年查到的数据高，环境污染严重，这是一个大前提。</p>
<p>在一个周边空气污染、水污染和食品安全危机的大环境下，还玩命地熬夜，往往用力过猛，反而伤了自己。</p>
<p>因为于娟的丈夫是化学材料的博士，有一次在家里打开甲醛测试仪，发现家具的甲醛指数严重超标，才把那些不合格的家具一个个丢掉。从使用甲醛超标的家具到发现家具甲醛超标，中间已经有2年已久了。</p>
<p>肿瘤的肿块不是容易形成的，癌症的发生需要一个长期的、渐进的过程，要经历多个阶段。从正常的细胞到演变成癌细胞，再到形成形成肿瘤，需要10-20年，甚至更长。</p>
<p>一个终年在实验室发明除甲醛新材料的人，从来没有意识到自己的爱人（于娟）却经年累月浸泡在甲醛超标的环境里，最终得了绝症。</p>
<h3 id="五、穿着问题"><a href="#五、穿着问题" class="headerlink" title="五、穿着问题"></a>五、穿着问题</h3><p>于娟在选择Bra的时候总在纠结一番，大一码的有点大，小一码的有点小，不喜欢罩杯有点空，就选择了小一码的Bra，也许爱美的女生都喜欢缸满钵满的：女人的Bra犹如男人的钱包，男人谁也不会嫌钱包厚。但是男人的钱包扑出来顶多就挤出几张钞票，而女人选小点的Bra让乳房扑出来，却很有可能因为气血不畅积淤成乳腺癌、纤维癌。</p>
<h3 id="六、性格"><a href="#六、性格" class="headerlink" title="六、性格"></a>六、性格</h3><p>乳腺癌病人里性格内向阴郁的太少太少，相反太多的人都有重控制、重权欲，争强好胜、急躁、外向的性格倾向。</p>
<p>于娟太过喜欢争抢好胜，太过喜欢凡事做到最好，太过喜欢统领大局，太过喜欢操心，太过不甘心碌碌无为。</p>
<p>这样的性格会让自己忙碌，匆忙，凡事亲为，使自己的不容得休息，哪会有时间休息。长时间工作的机器偶尔也会短路会烧掉整个电板。更何况人呢？</p>
<p>拼死累活赶着提前博士毕业，毕业后，想在3年内搞个副教授来做做，又玩命开课题，发文章。得了病才知道，那么名利权情，到死了，也带不走。</p>
<blockquote>
<p>世间的一切，隔岸看花、云淡风轻。</p>
</blockquote>
<p>人之一生，犹如赶路，背负行囊马不停蹄，从起点到终点，从生到死。<br>以上的道理我们都听过，父母的谆谆教诲，唠唠叨叨里的话语里无不传达这些生命真理，但是我们都不会做。</p>
<h3 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h3><p>因为懒<br>因为喜欢<br>因为戒不掉<br>因为习惯熬夜<br>因为那样会无聊<br>因为……<br>借口多多，所以身体很差。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]<a href="http://baike.baidu.com/item/5why%E5%88%86%E6%9E%90%E6%B3%95" target="_blank" rel="external">5why分析法</a><br>[2]<a href="https://en.wikipedia.org/wiki/5_Whys" target="_blank" rel="external">5 Whys</a><br>[3]<a href="http://rufodao.qq.com/a/20150713/042430.htm" target="_blank" rel="external">李开复：星云大师穿透我的内心</a><br>[4]<a href="http://www.jianshu.com/p/2b4c0854c1af" target="_blank" rel="external">于娟：为啥是我得癌症</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/5why.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无论是学习研究，还是个人成长，多问为什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所谓5why分析法，又称“5问法”，也就是对一个问题点连续以5个“为什么”来自问，以追究其根本原因。虽为5个为什么，但使用时不限定只做“5次为什么的探讨”，主要是必须找到根本原因为止，有时可能只要3次，有时也许要10次，如古话所言：打破砂锅问到底。&lt;/p&gt;
&lt;p&gt;5why法的关键所在：鼓励解决问题的人要努力避开主观或自负的假设和逻辑陷阱，&lt;u&gt;&lt;strong&gt;从结果着手，沿着因果关系链条，顺藤摸瓜，直至找出原有问题的根本原因&lt;/strong&gt;&lt;/u&gt;。&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Forty Years History of AI in China</title>
    <link href="http://ipcreator.me/2017/03/27/Program/Concepts/history-of-ai-in-china/"/>
    <id>http://ipcreator.me/2017/03/27/Program/Concepts/history-of-ai-in-china/</id>
    <published>2017-03-27T06:14:06.000Z</published>
    <updated>2017-03-27T10:02:18.861Z</updated>
    
    <content type="html"><![CDATA[<p>中国的人工智能经历了怎样的发展过程？取得哪些成绩？存在什么问题？面临何种机遇？有哪些解决方案？</p>
<p>雷锋网按：本文作者蔡自兴，来自湖南省自兴人工智能研究院、中南大学智能系统与智能软件研究所。文章来自北邮人机与认知实验室，雷锋网(公众号：雷锋网)已获授权。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58590044782c5.png?imageMogr2/format/jpg/quality/90" alt=""></p>
 <a id="more"></a>
<h1 id="中国人工智能40年"><a href="#中国人工智能40年" class="headerlink" title="中国人工智能40年"></a>中国人工智能40年</h1><p>智能机器是一种能够呈现出人类智能行为的机器。人工智能（ArtificialIntelligence，AI）是计算机科学或智能科学中涉及研究、设计和应用智能机器的一个分支。人工智能的近期主要目标在于研究用机器来模仿和执行人脑的某些智力功能，而远期目标是用自动机模仿人类的思维活动和智力功能。</p>
<p>智能机器是一种能够呈现出人类智能行为的机器。人工智能（ArtificialIntelligence，AI）是计算机科学或智能科学中涉及研究、设计和应用智能机器的一个分支。人工智能的近期主要目标在于研究用机器来模仿和执行人脑的某些智力功能，而远期目标是用自动机模仿人类的思维活动和智力功能。</p>
<p>人工智能探索历史</p>
<p>人类对人工智能和智能机器的梦想与追求，可以追溯到3000 多年前。中国也不乏这方面的故事与史料。</p>
<p>近代科学技术的许多重大进展都是人类智慧、思维、梦想和奋斗的成果。人类历史上从来没有出现过像今天这样的思想大解放，关于宇宙、星球、生命、人类、时空、进化和智能等思想与作品，如雨后春笋破土而出，似百花争艳迎春怒放。其中，人工智能尤其引人注目。进入20世纪后，人工智能开始孕育于人类社会母胎。到20世纪30—40年代发生了两件极其重要的事件：数理逻辑的形式化和智能可计算（机器能思维）的思想，建立了计算与智能关系的概念。被称为“人工智能之父”（The father of AI）的图灵（Turing AM），于1936年创立了自动机理论，提出一个理论计算机模型，奠定电子计算机设计基础，促进人工智能特别是思维机器的研究。1950 年图灵的论文“机器能思考吗？”，为即将问世的人工智能提供了科学性和开创性的构思。</p>
<p>1956 年夏季由麦卡锡（McCarthyJ）、明斯基（Minsky ML）、罗彻斯特（Lochester N）和香农（Shannon CE）共同发起，并邀请其他6位年轻的科学家，在美国达特茅斯（Dartmouth）大学举办了一次长达两个月的十人研讨会，讨论用机器模拟人类智能问题，首次使用“人工智能”这一术语。这是人类历史上第一次人工智能研讨会，标志着国际人工智能学科的诞生，具有十分重要的历史意义。发起这次研讨会的人工智能学者麦卡锡和明斯基，则被誉为国际人工智能的“奠基者”或“创始人”（The founding father），有时也称为“人工智能之父”。</p>
<p>中国的人工智能经历了怎样的发展过程？取得哪些成绩？存在什么问题？面临何种机遇？有哪些解决方案？本文力图逐一探讨。</p>
<h2 id="一、发展过程"><a href="#一、发展过程" class="headerlink" title="一、发展过程"></a>一、发展过程</h2><p>与国际上人工智能的发展情况相比，国内的人工智能研究不仅起步较晚，而且发展道路曲折坎坷，历经了质疑、批评甚至打压的十分艰难的发展历程。直到改革开放之后，中国的人工智能才逐渐走上发展之路。</p>
<h3 id="1-迷雾重重"><a href="#1-迷雾重重" class="headerlink" title="1.迷雾重重"></a>1.迷雾重重</h3><p>20世纪50—60年代，人工智能在西方国家得到重视和发展，而在苏联却受到批判，将其斥为“资产阶级的反动伪科学”。当时，受苏联批判人工智能和控制论（Cybernetics）的影响，中国在20世纪50年代几乎没有人工智能研究；20世纪60年代后期和70年代，虽然苏联解禁了控制论和人工智能的研究，但因中苏关系恶化，中国学术界将苏联的这种解禁斥之为“修正主义”，人工智能研究继续停滞。那时，人工智能在中国要么受到质疑，要么与“特异功能”一起受到批判，被认为是伪科学和修正主义。《摘译外国自然科学哲学》月刊1976年第3期刊文称：“在批判‘图像识别’和‘人工智能’研究领域各种反动思潮的斗争中，走自己的道路”。这足见中国人工智能研究迷雾重重的艰难处境。</p>
<p>1978年3月，全国科学大会在北京召开。在华国锋主持的大会开幕式上，邓小平发表了“科学技术是生产力”的重要讲话。大会提出“向科学技术现代化进军”的战略决策，打开解放思想的先河，促进中国科学事业的发展，使中国科技事业迎来了科学的春天[9]。这是中国改革开放的先声，广大科技人员出现了思想大解放，人工智能也在酝酿着进一步的解禁。吴文俊提出的利用机器证明与发现几何定理的新方法——几何定理机器证明（图1），获得1978年全国科学大会重大科技成果奖就是一个好的征兆。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58590044782c5.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>20世纪80年代初期，钱学森等主张开展人工智能研究，中国的人工智能研究进一步活跃起来。但是，由于当时社会上把“人工智能”与“特异功能”混为一谈，使中国人工智能走过一段很长的弯路。一方面，包括许多人工智能学者在内的研究者把人工智能与特异功能搅在一起“研究”；另一方面，社会上在批判“特异功能”时将“人工智能”一起进行批判，把两者一并斥之为“伪科学”。</p>
<h3 id="2-艰难起步"><a href="#2-艰难起步" class="headerlink" title="2.艰难起步"></a>2.艰难起步</h3><p>20世纪70年代末至80年代，知识工程和专家系统在欧美发达国家得到迅速发展，并取得重大的经济效益。当时中国相关研究处于艰难起步阶段，一些基础性的工作得以开展。</p>
<h4 id="1）-派遣留学生出国研究人工智能。"><a href="#1）-派遣留学生出国研究人工智能。" class="headerlink" title="1） 派遣留学生出国研究人工智能。"></a>1） 派遣留学生出国研究人工智能。</h4><p>改革开放后，自1980 年起中国大批派遣留学生赴西方发达国家研究现代科技，学习科技新成果，其中包括人工智能和模式识别等学科领域。这些人工智能“海归”专家，已成为中国人工智能研究与开发应用的学术带头人和中坚力量，为发展中国人工智能做出举足轻重的贡献。</p>
<h4 id="2）-成立中国人工智能学会。"><a href="#2）-成立中国人工智能学会。" class="headerlink" title="2） 成立中国人工智能学会。"></a>2） 成立中国人工智能学会。</h4><p>1981 年9 月，中国人工智能学会（CAAI）在长沙成立，秦元勋当选第一任理事长。于光远在大会期间主持了一次大型座谈会，讨论有关人工智能的一些认识问题。他指出：“人工智能是一门新兴的科学，我们应该积极支持；对所谓‘人体特异功能’的研究是一门伪科学，不但不应该支持，而且要坚决反对。”1982年，中国人工智能学会刊物《人工智能学报》在长沙创刊，成为国内首份人工智能学术刊物。</p>
<p>CAAI首任理事长秦元勋也颇受争议。秦元勋获美国哈佛大学博士学位后于1948年回国，历任中国科学院数学研究所研究员、执行副所长，中国核学会计算物理学会理事长，中国人工智能学会首届理事长等职。他在常微分方程的定性理论、运动稳定性、近似解析、机器推理等方面的研究，在中国处于开创的地位。其中极限环的研究，具有国际先进水平。他曾负责完成了中国第一颗原子弹和氢弹的威力计算工作，是1982年国家自然科学奖一等奖的原子弹氢弹设计原理中的物理力学数学理论项目的主要工作者之一，并开辟了计算物理学这一新的学科分支。</p>
<h4 id="3）-开始人工智能的相关项目研究。"><a href="#3）-开始人工智能的相关项目研究。" class="headerlink" title="3） 开始人工智能的相关项目研究。"></a>3） 开始人工智能的相关项目研究。</h4><p>20世纪70年代末至80年代前期，一些人工智能相关项目已被纳入国家科研计划。例如，在1978年召开的中国自动化学会年会上，报告了光学文字识别系统、手写体数字识别、生物控制论和模糊集合等研究成果，表明中国人工智能在生物控制和模式识别等方向的研究已开始起步。又如，1978年把“智能模拟”纳入国家研究计划。不过，当时还未能直接提到“人工智能”研究，说明中国的人工智能禁区有待进一步打开。</p>
<h3 id="3-迎来曙光"><a href="#3-迎来曙光" class="headerlink" title="3.迎来曙光"></a>3.迎来曙光</h3><p>1984年1月和2月，邓小平分别在深圳和上海观看儿童与计算机下棋时，指示“计算机普及要从娃娃抓起”。此后，中国人工智能研究的境遇有所好转。例如，人民日报关于人工智能的报道也渐渐多了起来。20世纪80年代中期，中国的人工智能迎来曙光，开始走上比较正常的发展道路。</p>
<p>国防科工委于1984年召开了全国智能计算机及其系统学术讨论会，1985年又召开了全国首届第五代计算机学术研讨会。1986年起把智能计算机系统、智能机器人和智能信息处理等重大项目列入国家高技术研究发展计划（863计划）。</p>
<p>1986 年，清华大学校务委员会经过三次讨论后，决定同意在清华大学出版社出版《人工智能及其应用》著作。</p>
<p>1987年7月《人工智能及其应用》在清华大学出版社公开出版，成为国内首部具有自主知识产权的人工智能专著。接着，中国首部人工智能、机器人学和智能控制著作分别于1987年、1988 年和1990 年问世。1988 年2月，主管国家科技工作的国务委员兼国家科委主任宋健亲笔致信蔡自兴（图2），对《人工智能及其应用》的公开出版和人工智能学科给予高度评价，指出该人工智能著作的编著和出版“使这一前沿学科的最精彩的成就迅速与中国读者见面，这对人工智能在中国的传播和发展必定会起到重大的推动作用……我深信，以人工智能和模式识别为带头的这门新学科，将为人类迈进智能自动化时期做出奠基性贡献。”宋健对该书的高度评价，体现出他对发展中国人工智能的关注和对作者的鼓励，对中国人工智能的发展产生了重大和深远的影响。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/585905375ab50.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>在这封信中宋健还提到：“十年前，当我们和钱先生修订工程控制论时，尚无系统参考书可言，只能断断续续介绍一些思路。现在钱先生看到此书，也一定会欣喜万分。”这体现了宋健的谦虚品德，也表现出钱学森当时对人工智能的热烈支持。</p>
<blockquote>
<p>1987年《模式识别与人工智能》杂志创刊。<br>1989年首次召开了中国人工智能联合会议（CJCAI），至2004年共召开了8次。此外，还曾经联合召开过6届中国机器人学联合会议。<br>1993年起，把智能控制和智能自动化等项目列入国家科技攀登计划。<br>1993年7月，宋健应邀为中国人工智能学会智能机器人分会成立题词“人智能则国智科技强则国强”，向成立大会表示祝贺。本题词很好地阐明了人工智能与提高民族素质、增强科技实力和建设现代化强国的辩证关系，也是国家科技领域领导人对中国人工智能事业的有力支持以及对全国人工智能工作者的殷切期望。</p>
</blockquote>
<h3 id="4-蓬勃发展"><a href="#4-蓬勃发展" class="headerlink" title="4.蓬勃发展"></a>4.蓬勃发展</h3><p>进入21世纪后，更多的人工智能与智能系统研究课题获得国家自然科学基金重点和重大项目、国家高技术研究发展计划（863 计划）和国家重点基础研究发展计划（973计划）项目、科技部科技攻关项目、工信部重大项目等各种国家基金计划支持，并与中国国民经济和科技发展的重大需求相结合，力求为国家做出更大贡献。这方面的研究项目很多，代表性的研究有视觉与听觉的认知计算、面向Agent的智能计算机系统、中文智能搜索引擎关键技术、智能化农业专家系统、虹膜识别、语音识别、人工心理与人工情感、基于仿人机器人的人机交互与合作、工程建设中的智能辅助决策系统、未知环境中移动机器人导航与控制等。</p>
<p>2006年8月，中国人工智能学会联合其他学会和有关部门，在北京举办了“庆祝人工智能学科诞生50周年”大型庆祝活动。除了人工智能国际会议外，纪念活动还包括由中国人工智能学会主办的首届中国象棋计算机博弈锦标赛暨首届中国象棋人机大战。东北大学的“棋天大圣”象棋软件获得机器博弈冠军；“浪潮天梭”超级计算机以11：9的成绩战胜了中国象棋大师。这些赛事的成功举办，彰显了中国人工智能科技的长足进步，也向广大公众进行了一次深刻的人工智能基本知识普及教育。主办者认为，这次中国象棋人机大战“无论赢家是人类大师或超级计算机，都是人类智慧的胜利”。</p>
<p>同年，《智能系统学报》创刊（图3），这是继《人工智能学报》和《模式识别与人工智能》之后国内第3份人工智能类期刊。他们为国内人工智能学者和高校师生提供了一个学术交流平台，对中国人工智能研究与应用起到促进作用。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58590559ccd2a.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>2009 年，中国人工智能学会牵头组织，向国家学位委员会和国家教育部提出设置“智能科学与技术”学位授权一级学科的建议。该建议指出：现在信息化向智能化迈进”的趋势已经显现；因此，今天培养的智能科学技术高级人才大军，正好赶上明天信息化向智能化大规模迈进的需要。为此，一个顺理而紧迫的建议就是：为了适应信息化向智能化迈进的大趋势，为了实现建设创新型国家的大目标，在中国学位体系中增设智能科学与技术博士和硕士学位授权一级学科。这个建议凝聚了中国广大人工智能教育工作者的心智心血和他们的远见卓识，对中国人工智能学科建设具有十分深远的意义。</p>
<h3 id="5-国家战略"><a href="#5-国家战略" class="headerlink" title="5.国家战略"></a>5.国家战略</h3><p>近两年来，中国的人工智能已发展成为国家战略。国家最高领导人习近平、李克强发表重要讲话，对发展中国人工智能和机器人学给予高屋建瓴的指示与支持。</p>
<p>2014年6月9日，习近平总书记在中国科学院第十七次院士大会、中国工程院第十二次院士大会开幕式上发表重要讲话强调：“由于大数据、云计算、移动互联网等新一代信息技术同机器人技术相互融合步伐加快，3D打印、人工智能迅猛发展，制造机器人的软硬件技术日趋成熟，成本不断降低，性能不断提升，军用无人机、自动驾驶汽车、家政服务机器人已经成为现实，有的人工智能机器人已具有相当程度的自主思维和学习能力。……我们要审时度势、全盘考虑、抓紧谋划、扎实推进。”这是党和国家最高领导人首次对人工智能和相关智能技术的高度评价，是对开展人工智能和智能机器人技术开发的庄严号召和大力推动。</p>
<p>2015年十二届全国人大三次会议上，李克强总理在政府工作报告中提出：“人工智能技术将为基于互联网和移动互联网等领域的创新应用提供核心基础。未来人工智能技术将进一步推动关联技术和新兴科技、新兴产业的深度融合，推动新一轮的信息技术革命，势必将成为我国经济结构转型升级的新支点。”这是对人工智能技术的重要作用给予的充分肯定，是对人工智能的有力促进。</p>
<p>2015年5月，国务院发布《中国制造2025》（图4），部署全面推进实施制造强国战略。这是中国实施制造强国战略第一个十年的行动纲领。围绕实现制造强国的战略目标，《中国制造2025》明确了9项战略任务和重点。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/5859067cb1989.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>这些战略任务，无论是提高创新能力、信息化与工业化深度融合、强化工业基础能力、加强质量品牌建设，或是推动重点领域突破发展、全面推行绿色制造、推进制造业结构调整、发展服务型制造和生产性服务业、提高制造业国际化发展水平，都离不开人工智能的参与，都与人工智能的发展密切相关。人工智能是智能制造不可或缺的核心技术。</p>
<p>2016年4月，工业和信息化部、国家发展改革委、财政部等三部委联合印发了《机器人产业发展规划（2016—2020年）》，为“十三五”期间中国机器人产业发展描绘了清晰的蓝图。该发展规划提出的大部分任务，如智能生产、智能物流、智能工业机器人、人机协作机器人、消防救援机器人、手术机器人、智能型公共服务机器人、智能护理机器人等，都需要采用各种人工智能技术。人工智能也是智能机器人产业发展的关键核心技术。</p>
<p>2016年5月，国家发改委和科技部等4部门联合印发《“互联网+”人工智能三年行动实施方案》，明确未来3年智能产业的发展重点与具体扶持项目，进一步体现出人工智能已被提升至国家战略高度。根据方案的内容，未来3年将在3个大方面、9个小项推进智能产业发展。</p>
<p>国家最高领导人对人工智能的高度评价和对发展我国人工智能的指示，《中国制造2025》、《机器人产业发展规划（2016—2020 年）》和《“互联网+”人工智能三年行动实施方案》的发布与施行，体现了中国已把人工智能技术提升到国家发展战略的高度，为人工智能的发展创造了前所未有的优良环境，也赋予人工智能艰巨而光荣的历史使命。</p>
<p>2015年7月在北京召开了“2015中国人工智能大会”。发表了《中国人工智能白皮书》，包括“中国智能机器人白皮书”、“中国自然语言理解白皮书”、“中国模式识别白皮书”、“中国智能驾驶白皮书”和“中国机器学习白皮书”，为中国人工智能相关行业的科技发展描绘一个轮廓，给产业界指引一个发展方向。</p>
<p>2016年4月由中国人工智能学会发起，联合20余家国家一级学会，在北京举行“2016 全球人工智能技术大会暨人工智能60 周年纪念活动启动仪式”（图5）。这次活动恰逢国际人工智能诞辰60周年，谷歌AlphaGo与韩国围棋九段棋手李世石上演“世纪人机大战”（图6），将人工智能的关注度推到了前所未有的高度。启动仪式共同庆祝国际人工智能诞辰60周年，传承和弘扬人工智能的科学精神，开启智能化时代的新征程。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/585906b78c2d7.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>现在，人工智能已发展成为国家发展战略，中国已有数以10万计的科技人员和大学师生从事不同层次的人工智能相关领域研究、学习、开发与应用，人工智能研究与应用已在中国空前开展，硕果累累，必将为促进其他学科的发展和中国的现代化建设做出新的重大贡献。</p>
<h2 id="二、主要成就"><a href="#二、主要成就" class="headerlink" title="二、主要成就"></a>二、主要成就</h2><p>中国的人工智能研究开发、学科建设、产业应用和社会服务等方面，已经取得不俗的成就，主要可以从以下几点得到证实。</p>
<h3 id="1-形成人工智能学科"><a href="#1-形成人工智能学科" class="headerlink" title="1.形成人工智能学科"></a>1.形成人工智能学科</h3><p>1981年9月建立了全国性的人工智能组织中国人工智能学会（CAAI），标志着中国人工智能学科的诞生。1982年在长沙创办中国人工智能学会刊物《人工智能学报》，成为中国人工智能学科领域的第一份学术刊物。中国人工智能学会大会每两年举行一次，至目前已举办16届。中国人工智能学会成立后，又相继成立了中国人工智能学会智能机器人专业委员会、机器学习专业委员会、模式识别专业委员会、自然语言处理专业委员会和智能控制专业委员会、人工智能教育工作委员会等。</p>
<p>此外，中国计算机学会的一些二级学会也开展人工智能相关学术活动，为中国人工智能的发展做出了应有贡献。例如，中国计算机学会成立了人工智能与模式识别专业委员会，中国自动化学会成立了模式识别与机器智能专业委员会以及智能自动化专业委员会等二级学会。有些省市也成立了地方人工智能学会。1989—2004 年，由中国人工智能学会、中国计算机学会等多个学会联合举办过7届中国人工智能联合会议（CJCAI）。</p>
<p>与人工智能密切相关的机器学习、模式识别、智能机器人、自然语言处理、专家系统等领域的学术组织也先后成立，学术活动也十分热烈。例如，国内机器学习的重要学术活动包括每两年举行一次的中国机器学习会议和每年举行的中国机器学习及其应用研讨会。前者由中国计算机学会人工智能与模式识别专业委员会协办，目前已历经15届。后者每届会议包括特邀报告、大会交流及Top Conference Review等部分，迄今已历经13届。又如，中国人工智能学会智能机器人专业委员会自1993年成立以来，每两年举行一次全国智能机器人学术会议，已组织过11届，还与其他学会共同举办过6次中国机器人联合会议。在王湘浩倡导与组织下，全国高校人工智能研讨会研究班自1980年起每年举行一次，是国内最早的人工智能学术研讨活动。</p>
<p>这些人工智能学术组织和会议开展广泛深入的国内外学术交流，对开展人工智能学术活动和组织科技交流起到积极的作用，有力推动了中国人工智能科技发展和学科建设。</p>
<h3 id="2-科学研究成绩斐然"><a href="#2-科学研究成绩斐然" class="headerlink" title="2.科学研究成绩斐然"></a>2.科学研究成绩斐然</h3><p>国家已先后设立了各种与人工智能相关的研究课题，如国家自然科学基金重大专项、重点项目和面上项目，国家863计划项目，国家重大战略项目智能制造2025等。在这些科研基金的支持下，国内人工智能研究已取得许多突出成果。</p>
<h4 id="1）人工智能基础研究成果突出"><a href="#1）人工智能基础研究成果突出" class="headerlink" title="1）人工智能基础研究成果突出"></a>1）人工智能基础研究成果突出</h4><p>除了前面提到的几何定理证明的“吴氏方法”外，吴文俊还于2004 年发表了重要论文“计算机时代的脑力劳动机械化与科学技术现代化”，宣布他在几何定理证明“机械化”方面的系列成果，指出：“在几何定理机器证明取得成功之后的20多年来，笔者与许多志同道合的同志们在科技部、科学院、基金委等大力支持下，开展了一场可谓‘数学机械化’的‘运动’，在理论与应用诸多方面都已取得了若干成功。”</p>
<p>国内学者在人工智能的诸多领域，如问题求解、不确定推理、泛逻辑理论、拓扑学、模式识别、图像处理、机器学习、专家系统、智能计算和智能控制等领域的基础研究也多有建树，取得一批具有国际先进水平的创造性成果。例如，在模式识别方面，对文字识别、语音识别（图7）、指纹识别、人脸识别、虹膜识别和步态识别等进行深入研究，涉及生物医学、卫星遥感、机器人视觉、货物检测、目标跟踪、自主导航、保安、银行、交通、军事、电子商务和多媒体网络通信等应用领域。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/585908a8275b7.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>又如，机器学习也是人工智能的核心研究领域之一。现在机器学习的大数据往往体现出多源异构、语义复杂、规模巨大、动态多变等特殊性质，为传统机器学习技术带来了新的挑战。为应对这一挑战，国内科技企业巨头华为、百度等与国外巨头谷歌、微软、亚马逊等展开竞争，纷纷成立以机器学习技术为核心的研究院，以充分挖掘大数据中蕴含的巨大商业与应用价值。深度学习是机器学习领域一个新兴的子领域与研究方向，它是一种通过多层表示来对数据之间的复杂关系进行建模的算法。深度学习模仿人脑结构，具有更强的建模和推理能力，能够更有效地解决多类复杂的智能问题。近年来，中国在深度学习研究方面也取得重要进展，一些研究成果接近或达到国际先进水平。</p>
<p>中国学者在自动规划领域也取得开创性成果。1985年提出与发展了基于专家系统的机器人规划机理与方法，实现了人工智能专家系统与机器人技术的结合，为基于知识的自动规划和高层控制开辟了一条新途径，对提高生产的智能化水平具有重要意义，并推动国内外机器人规划研究的发展。该成果被广泛引用，并被收入清华大学吴麒等主编的全国高校规划教材《自动控制原理》。1999年以来，又在机器人进化规划方面取得创新性成果。</p>
<p>国内在认知计算、情感计算、模式识别、神经网络、智能驾驶、水下机器人和其他智能机器人等领域也取得一批具有国际先进水平的研究成果，培养了一批优秀的学术带头人：郭爱克、任继福、李衍达、王守觉、焦李成、贺汉根、蔡鹤皋、徐玉如和黄心汉等。</p>
<p>此外，有些人工智能基础研究获得国际奖励，如1990年张钹获得ICL欧洲人工智能奖，蔡自兴指导的王勇博士获得2015 IEEE计算智能学会优秀博士学位论文奖等。</p>
<p>值得一提的是美籍华裔学者王浩对人工智能的杰出贡献。1958 年夏天，王浩在纽约州的IBM实验室的一台IBM704机器上用汇编语言编写了3个程序，证明了罗素和怀特海《数学原理》中的200多个定理。他关于数理逻辑的一个命题被国际上定为“ 王氏悖论”。1966年，他在哈佛大学指导的博士生Stephen Cook，因NP 完全性方面的开创性研究成果而获得1982年图灵奖。王浩还与吴文俊进行了合作研究。</p>
<h4 id="2）专用人工智能开发有所突破"><a href="#2）专用人工智能开发有所突破" class="headerlink" title="2）专用人工智能开发有所突破"></a>2）专用人工智能开发有所突破</h4><p>中国在专用人工智能领域取得了突破性的进展，已在自然语言处理和语音识别、图像识别、机器学习、虚拟现实、智能处理器、认知计算、智能驾驶和智能机器人等方面取得一大批具有国际先进水平的应用成果。</p>
<p>互联网和大数据推动人工智能进入了新的发展阶段。中国的智能语音技术在移动互联网、呼叫中心、智能家居、汽车电子等领域的研究与应用逐步深入，带动智能语音产业规模持续快速增长。2013年科大讯飞以54.2%的市场份额继续处于国内领先地位。智能语音正在成为主流的交互方式之一。</p>
<p>近几年在多层神经网络基础上发展起来的深度学习和深度神经网络已在中国很多模式识别领域获得成功应用。其中，中国科学院自动化研究所谭铁牛团队在虹膜识别领域，坚持从虹膜图像信息获取的源头进行系统创新，全面突破虹膜识别领域的成像装置、图像处理、特征抽取、识别检索、安全防伪等一系列关键技术，建立了虹膜识别比较系统的计算理论和方法体系，还建成目前国际上最大规模的共享虹膜图像库，已大规模用于煤矿人员辨识和北京城铁监控等，并在70个国家和地区的3000 多个科研团队推广使用，有力推动了虹膜识别学科发展。</p>
<p>在2010年举行的国际上难度最高、规模最大的虹膜识别专业测评竞赛中，谭铁牛团队提交的算法，从来自25个国家和地区的41支参赛团队里脱颖而出，以测试性能指标超过第2名41.3%的绝对优势蝉联虹膜识别算法赛事冠军（图8）。在2008年进行的上届国际虹膜识别算法竞赛上，谭铁牛团队战胜来自35个国家和地区的97支参赛队伍。这充分展示出中国在虹膜识别领域领先国际的整体实力。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/585909293d30f.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>在模式识别领域，石青云领衔的北大高科指纹技术有限公司在指纹识别领域取得领先成果，成为国家科技强警的利剑。</p>
<p>专家系统已在国内获得广泛应用，应用领域涉及工业、农业等行业，其经济效益相当可观。例如，在冶金专家系统的开发与应用方面，已把专家系统技术用于高炉建模、监控与诊断等，建立了基于多核学习的高炉自动化框架、基于Volterra级数的高炉系统数据驱动建模、高炉热风炉流量设定、高炉炉温预测、铁水含硅量预报、数据采集处理、布料状态评估、炉况分析与监控、诊断与决策支持等专家系统，实现高炉炼铁过程的智能化（图9）。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/5859094328f53.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<h4 id="3）计算智能与进化计算研究引人注目"><a href="#3）计算智能与进化计算研究引人注目" class="headerlink" title="3）计算智能与进化计算研究引人注目"></a>3）计算智能与进化计算研究引人注目</h4><p>计算智能是人工智能的新领域，涉及模糊计算，神经计算、进化计算和免疫计算等。近10多年来，中国在计算智能特别是进化计算研究方面取得不少国际领先成果。中国科技大学、中南大学、西安电子科技大学和中国科学院自动化研究所等院校都做出颇具影响的贡献。蔡自兴团队在进化计算领域研究取得的成果就是一个很好的例证。</p>
<p>蔡自兴团队提出的一些进化计算算法处于国际领先水平，引起国际进化计算学界的广泛重视，已成为相关算法比较的基准，不仅对算法设计观点颇有指导价值，而且已成功地应用于国内外30多个领域，并得到国际高级检索机构的顶级检录，已对国际计算智能研究产生重要影响。例如，他们提出的一种单目标差分进化算法CoDE，已成为美国加州大学伯克利分校Rickard O C 和Sitar N 设计的商业软件bSLOP 的核心技术；该软件已在苹果官方网站上售出。Sahalos J N、Yao X 和Najy W K A 分别把CoDE 算法成功地直接应用于移动通信系统设计、产品缺陷预测软件和电网保护协调。很少有同类算法能够引起国际上如此密切关注和获得这么多的优化问题的成功应用。此外，他们提出的一种被国际上广泛引用和应用的算法，被称为“蔡王算法”（CW Algorithm），获得好评。</p>
<p>近10多年来，计算智能“中国海外军团”异军突起，成绩斐然。在计算智能与进化算法研究领域，Yao X（姚Jin Y C（金耀初）等的研究成果获得国际同行公认，成为进化计算领域的国际学术领军人物，并为中国的计算智能与进化计算研究起到促进作用。</p>
<h3 id="3-著作和科技论文出版发行"><a href="#3-著作和科技论文出版发行" class="headerlink" title="3.著作和科技论文出版发行"></a>3.著作和科技论文出版发行</h3><p>据不完全统计，自1987 年人工智能著作开禁以来全国已编著出版了70多部人工智能著作。这些著作有专著，也有教材，不乏深受读者欢迎的高水平作品。例如，上面提到的引领人工智能著作开禁的《人工智能及其应用》（图10），已先后出版了7个版本，印刷50多次，发行40多万册，拥有上百万读者，得到广泛应用，对国内人工智能基础研究、开发应用和人才培养发挥了重大作用。张钹的专著《问题求解理论与应用》先后在国内外出版，提出基于统计推断的启发式搜索和基于拓扑的空间规划方法，降低了计算复杂性，具有重要的应用价值。此外，谭铁牛、陆汝钤、何新贵、石青云、何志均、涂序彦、钟义信、李德毅、周志华、蔡自兴、蔡文、史忠植、何华灿、施鹏飞、王万森等在国内外出版的人工智能相关专著，在一定程度上反映出中国人工智能的研究成果，对进一步开展国内外学术交流起到重要作用。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/5859098bd9cba.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>此外，从事人工智能相关研究人员和高校师生，已在国内外知名刊物与学术会议上发表了数以万计的人工智能相关论文。其中不乏高水平文章，例如，王勇与蔡自兴合作的论文曾被列为2012 年进化计算国际顶级刊物《IEEETransactions on EvolutionaryComputation》他引次数最高的论文。</p>
<p>还有一些论文被评为国内外学术会议与学术刊物的优秀论文。</p>
<h3 id="4-人工智能教育培养大批专门人才"><a href="#4-人工智能教育培养大批专门人才" class="headerlink" title="4.人工智能教育培养大批专门人才"></a>4.人工智能教育培养大批专门人才</h3><p>人工智能教育和人才培养是人工智能学科发展的重要基础。国内自20世纪80年代中期始，在少数高校开设各种人工智能类课程。经过推广与提高，30年前的人工智能星星之火如今已形成燎原之势，数以百计的高校开设了各种层次的人工智能课程，有些课程已成为我国高校教育园地上的奇葩。</p>
<p>例如，中南大学的“人工智能”课程已成为首批国家级精品课程、教育部新世纪优秀网络课程、国家级全国双语示范课程、首批国家级精品视频公开课和国家级精品资源共享课程。表1所示为入选国家级质量工程的人工智能类相关精品课程名单。这些人工智能类课程在改革中不断发展壮大，已为国家培养了成千上万的人工智能专门人才。虽然这些课程只占数以千计的国家级质量工程课程的冰山一角，但也表明人工智能课程仍然占有一席之地，并具有不可替代的作用，产生了非常的影响力。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/585909b36db13.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>全国智能科学与技术教育暨教学学术会议是国内人工智能教育与教学领域具有特色的最权威的学术盛会，自2003年起已举办10次，对于人工智能及其相关学科的教育教学、学科建设和人才培养发挥了关键作用。</p>
<p>2005年在北京大学开设的智能科学与技术专业，已在全国近30所大学开设，仅这些大学的“智能”专业每年就培养大约2000名人工智能专业人才。据估计，近30年来，全国高校已培养人工智能及其相关学科的硕士和博士数以千计，本科毕业生数以万计。这些高层次的人工智能专门人才是中国发展人工智能的最为宝贵的财富。他们有幸遇上难逢的人工智能大好发展机遇，必将成为中国人工智能跨越式发展的中坚力量。</p>
<h3 id="5-人工智能产业化蓬勃发展"><a href="#5-人工智能产业化蓬勃发展" class="headerlink" title="5.人工智能产业化蓬勃发展"></a>5.人工智能产业化蓬勃发展</h3><p>尽管中国的人工智能产业化应用尚存在较大不足，但仍然已建立了一定的基础，并呈现蓬勃发展的势头。据不完全统计，最近5年内，中国在人工智能产业化应用领域的投资已超过1000多亿元。下面略举数例说明中国人工智能产业化的发展情况。</p>
<h4 id="1）模式识别"><a href="#1）模式识别" class="headerlink" title="1）模式识别"></a>1）模式识别</h4><p>在虹膜识别、步态识别、身份识别等领域取得新成果。近年来，在多层神经网络基础上发展起来的深度学习和深度神经网络在很多模式识别应用领域产生了领先的性能，成为当前最热门的方法。前面提到的虹膜识别及其在身份识别等方面的成功应用，已形成产业，占领国内外市场，就是很好的例证。</p>
<h4 id="2）语音识别"><a href="#2）语音识别" class="headerlink" title="2）语音识别"></a>2）语音识别</h4><p>中国在自然语言处理特别是语音识别领域已经达到国际先进水平。</p>
<p>2015 年中国智能语音产业规模达到40.3亿元，较2014年增长41.0%，远高于全球语音产业增长速度。预计到2017年，中国语音产业规模预计达到100.7亿元。2015年智能语音市场继续保持寡头垄断格局，科大讯飞已跻身全球排名前五，占有中文语音技术市场70%以上市场份额，语音合成产品市场份额达到70%以上。现在中国智能语音的应用需求不断增加，应用市场更加广阔，已在智能家居、智能车载、智能客服、智能金融、智能教育和智能医院等场合得到越来越多的应用。此外，一些海外留学人员也在语音识别领域取得国际领先水平的成果，微软研究院黄学东就是该领域的一位突出代表。</p>
<h4 id="3）人机博弈"><a href="#3）人机博弈" class="headerlink" title="3）人机博弈"></a>3）人机博弈</h4><p>中国象棋是中华民族的文化瑰宝，是一种怡神益智的活动，千百年来长盛不衰，深受广大群众的喜爱。自2006年8月举行“浪潮杯”首届中国象棋人机大战（图11），至今已有10年，共举行过5届大赛，产生深远影响。同样中国也是国际围棋的发源地，无论是国际围棋或中国象棋，在国内具有众多的人机博弈爱好者，其产业发展和市场前景十分看好。仅一款象棋对战游戏平台软件，就可以万人同时参与在线对决。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58590ad26c67f.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<h4 id="4）专家系统"><a href="#4）专家系统" class="headerlink" title="4）专家系统"></a>4）专家系统</h4><p>自20世纪80年代以来，专家系统在工业、农业、商业、科技、教育、服务业等领域获得广泛应用。以农业专家系统为例，开展了各种农业专家系统的研究、开发及推广应用（图12）。例如，作物病虫预测专家系统、农作制度专家系统、玉米低温冷害防御专家系统、蚕育种专家系统、小麦专家系统等。</p>
<p>20世纪90年代以后，中国农业专家系统得到了迅速发展，已成为农业信息技术的突破口。国家自然科学基金委、科技部、农业部和许多省级部门都安排了相应的攻关课题；863计划项目已将农业专家系统等智能化农业信息技术列为国家重点课题，搭建了中国农业专家系统研究开发的战略平台，为农业专家系统的进一步开发起到了积极催化作用。进入2l 世纪以后，农业专家系统的开发速度日益加快，不仅数量增多，而且涉及的领域也更加全面，开发的深度和广度有了很大的进展，为大范围推广应用农业专家系统铺平了道路。如小麦栽培管理农业专家系统、水稻高产栽培专家决策系统、番茄栽培管理专家系统、温室番茄病虫害缺素诊断与防治系统等。这些农业专家系统的开发，促进了农业科技成果的转化，为发展高产、优质、高效农业做出了巨大贡献。</p>
<p>此外，我国在机器学习、智能机器人、智能驾驶等人工智能领域，也已有不同程度的产业集聚，产业化步伐逐步加快。</p>
<p>在中国人工智能产业化过程中，企业巨头抢滩布局人工智能产业链，各大IT公司积极投入人工智能产业研发。</p>
<p>他们非常关注深度学习的应用前景，纷纷成立以机器学习技术为核心的研究院，充分挖掘大数据中蕴含的巨大商业与应用价值。例如，2012年，华为成立诺亚方舟实验室，运用以深度学习为代表的人工智能技术对移动信息大数据进行挖掘，寻找有价值的规律。2013年，百度成立深度学习研究院，研究如何运用深度学习技术对大数据进行智能处理，提高分类和预测等任务的准确性。近年来还涌现出寒武纪、甲骨文、地平线、北京云知音和湖南自兴等一批初露头角的涉及人工智能的创业实体，从某种程度上体现出人工智能领域大众创业万众创新的磅礴生机。</p>
<p>从整体来看，中国的人工智能产业化仍处于起步阶段。毫无疑问，在人工智能产业创业与竞争过程中，会出现多家实力强大的企业，有些企业也会在某些领域内形成领先优势甚至垄断局面。</p>
<h3 id="6-开设多种人工智能奖项"><a href="#6-开设多种人工智能奖项" class="headerlink" title="6.开设多种人工智能奖项"></a>6.开设多种人工智能奖项</h3><p>为了总结中国人工智能的研究成果，表彰人工智能工作者的突出贡献，鼓励更多的人员投身人工智能的创造性研究，设立了一些人工智能奖项，其中比较重要的有如下几种。</p>
<p>吴文俊人工智能科学技术奖是中国智能科学技术领域唯一以个人名字命名、依托社会力量设立的科学技术奖。该奖项以“尊重知识、尊重人才、尊重创造”为方针，奖励在智能科学技术活动中做出突出贡献的单位和个人，以不断推进中国智能科学技术领域创新与发展。该奖项是经国家科学技术奖励委员会批准设立的全国奖项，被誉为“ 中国人工智能科技最高奖”，于2010年起开设，已举行了5届。</p>
<p>其中，有4位人工智能杰出学者获得（终身）成就奖。中国计算机学会也于2010年始设立终身成就奖，授予70岁以上、在计算领域做出卓越成就与贡献、被业界广泛认可的老科学家，其中，有2位从事人工智能研究取得突出成果的计算机学者获得此项殊荣。</p>
<p>“中国象棋人机大战”计算机博弈大赛始于2006年，已举行5届，引起国内外人工智能学界和主流媒体的高度重视。随着今年AlphaGo与围棋九段李世石人机对决引发的新一轮的人工智能与机器博弈热潮，中国象棋的人机大战必将攀上新的高度，为推动中国人工智能发展做出其独特的贡献。</p>
<p>自1998 年以来，已在中国举行了数百场智能系统、智能机器人和智能小车比赛，其中包括一些国际比赛。这些比赛吸引了成千上万的青少年学生参加，并获得大批国内外奖励，这对于提高他们对信息科技特别是人工智能的兴趣，培养他们的创新思维和创新能力，锻炼人工智能科技接班人具有不可替代的重要作用。</p>
<p>中国一些学者和学生还获得国际重要奖励。例如，王勇获得2015 年IEEE计算智能学会优秀博士学位论文奖（图17），这是中国大学首次获得该项殊荣。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58590b3846f73.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>据不完全统计，表2给出获得国内外人工智能重要奖项的名单。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58590c9460b73.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<h3 id="7-国际交流"><a href="#7-国际交流" class="headerlink" title="7.国际交流"></a>7.国际交流</h3><p>改革开放以来，特别是进入21世纪以来，中国的人工智能国际交流与合作进一步开展。</p>
<p>2006 年，中国人工智能学会联合美国人工智能学会和欧洲人工智能协调委员会，共同发起在北京召开了International Conference on ArtificialIntelligence（人工智能国际学术会议，图18），隆重庆祝国际人工智能学科诞生50周年。时任全国人大常委会副委员长的许嘉璐等在大会上致词。中国人工智能研究开拓者和领军人物吴文俊、模糊数学创始人美国Zadeh LA、国际EBMT机器翻译方法发明人Nagao M等在大会上做主题报告。大会开得非常成功，影响广泛。</p>
<p>2013年还承办了第23届国际人工智能联合会议（InternationalJointConference on Artificial Intelligence，IJCAI），这是国际人工智能领域规模最大、影响最广泛、学术地位最高的综合性会议。承办国际人工智能联合会议表明中国的人工智能研究与应用已在世界范围内产生积极影响。</p>
<p>中国还创办与主办一些人工智能或与人工智能密切相关的国际会议。例如，2010 年举办了全球智能控制与自动化国际会议（The World Congresson Intelligent Control and Automation，WCICA），自1993年以来每2年举行一次，共举行了12届。本会议已成为具有国际影响力的智能科技盛会。此外，中国人工智能学会还发起组织“国际高级智能会议”，已经举办了2次。</p>
<h3 id="8-人工智能对社会的影响日益扩大"><a href="#8-人工智能对社会的影响日益扩大" class="headerlink" title="8.人工智能对社会的影响日益扩大"></a>8.人工智能对社会的影响日益扩大</h3><p>人工智能的发展已对人类及其未来产生深远影响，这些影响涉及人类的经济利益、社会作用和文化生活等方面。仅社会影响而言，就包括劳动就业问题、社会结构变化、思维方式与观念、心理上的威胁等。</p>
<h4 id="1）劳务就业问题。"><a href="#1）劳务就业问题。" class="headerlink" title="1）劳务就业问题。"></a>1）劳务就业问题。</h4><p>由于人工智能能够代替人类进行各种脑力劳动，将会使一部分人不得不改变他们的工作方式或工种，甚至造成失业。</p>
<p>####2）社会结构变化。<br>社会结构正在悄然改变，人-机器的社会结构终将被人-智能机器（人工智能）-机器的社会结构取代。从发展的角度看，从医院里看病的“医生”和护理病人的“护士”，旅馆、饭店和商店的“服务员”，办公室的“秘书”，指挥交通的“交通警察”，到家庭的“勤杂工”和“保姆”等，都将由智能机器人取代。因此，人们将不得不学会与智能机器相处，并适应这种变化了的社会结构。</p>
<p>####3）思维方式与观念的变化。<br>一旦智能系统的用户开始相信系统（智能机器）的判断和决定，那么他们有可能不愿多动脑筋，变得懒惰，并失去对许多问题及其求解任务的责任感和敏感性。过分地依赖计算机的建议而不加分析地接受，将会使智能机器用户的认知能力下降，并增加误解。</p>
<p>####4）心理上的威胁。<br>人工智能还使一部分社会成员感到心理上的威胁，或叫做精神威胁。人们一般认为，只有人类才具有感知精神，而且以此与机器相别。如果智能机器的人工智能会超过人类的自然智能，那么人类可能沦为智能机器和智能系统的奴隶。</p>
<p>上述这些影响在国内同样存在。针对社会各界广泛关注人工智能对人类社会的影响，国内已开展人工智能科技知识的普及宣传。例如，通过视频公开课普及人工智能知识。精品视频公开课是向大学生和社会大众免费开放的科学与文化素质教育网络视频课程与讲座，着力广泛传播人类文明优秀成果和现代科学技术前沿知识，提升大学生及社会大众的科学文化素养，服务社会主义先进文化建设，增强中国文化软实力和中华文化国际影响力。国家级精品视频公开课“人工智能PK人类智能”和“从自然世界到智能时代”等，在国内网络媒体播出后，反映热烈，深受欢迎，对扩大人工智能对社会的正面影响，减少人工智能对社会的负面影响起到积极引导的应有效果。</p>
<h2 id="三、存在的问题"><a href="#三、存在的问题" class="headerlink" title="三、存在的问题"></a>三、存在的问题</h2><p>虽然国内人工智能已取得许多骄人成就，但与国家发展战略要求相差甚远，与国际先进水平差距较大。概括起来存在如下几方面的问题。</p>
<h3 id="1）经济效益至上，缺乏远大眼光。"><a href="#1）经济效益至上，缺乏远大眼光。" class="headerlink" title="1）经济效益至上，缺乏远大眼光。"></a>1）经济效益至上，缺乏远大眼光。</h3><p>许多人工智能企业和一些地方政府缺乏远大眼光，追求短期的经济效益，企望1~2年或2~3年内获得明显的经济回报，致使很大一部分人工智能创业企业急功近利，底气不足，发展乏力。需要追求经济效益，但像人工智能这样的高科技产业，或把人工智能技术用于促进其他产业转型升级的产业，其发展应当遵循一定的规律，需要一个过程，需要一定的时间，不能急于求成，过早追求经济效益。</p>
<h3 id="2）人工智能整体水平亟待提高。"><a href="#2）人工智能整体水平亟待提高。" class="headerlink" title="2）人工智能整体水平亟待提高。"></a>2）人工智能整体水平亟待提高。</h3><p>由于国内人工智能起步较晚，未能较早参与相应的人工智能国际技术、专利及标准制定，因此奉上了数额不菲的“学费”。在国内人工智能领域，有很多科研机构和企业在参与技术研发，并在某些领域处于与国外基本同步甚至领先水平，这对于提升中国在未来人工智能领域的技术、标准话语权以及市场应用主导权至关重要。但是，中国人工智能的整体能力和水平远未达到通用智能化程度，人工智能基础研究的总体水平，与国际先进水平仍然存在明显差距。要在整体上赶上国际先进水平依然任重道远，需要时日。</p>
<h3 id="3）国家的决策有待落实于行动。"><a href="#3）国家的决策有待落实于行动。" class="headerlink" title="3）国家的决策有待落实于行动。"></a>3）国家的决策有待落实于行动。</h3><p>中国虽已公布了一批与人工智能相关的发展规划，如《智能制造2025》、《机器人产业发展规划（2016—2020年）》和《“互联网+”人工智能三年行动实施方案》等，但尚未制定全面发展人工智能的国家战略。上述规划与方案也需要把政策规划转化为行动，变成看得见的效益。</p>
<h3 id="4）国家资金支持力度有待进一步提高。"><a href="#4）国家资金支持力度有待进一步提高。" class="headerlink" title="4）国家资金支持力度有待进一步提高。"></a>4）国家资金支持力度有待进一步提高。</h3><p>如前所述，中国已经在许多国家级科学研究和科技发展项目中，支持人工智能及其相关科技项目的研究，而且支持力度不断加大。不过，与“ 互联网+”、智能制造等项目，与欧美一些发达国家的相关项目投入相比，国内对人工智能科研和产业发展的资金支持力度还远远不够。况且，比起其他项目，人工智能需要研究的问题更多，涉及面更广，难度也更大，需要国家支持的力度也更大。</p>
<h3 id="5）科研经费分配不够公正。"><a href="#5）科研经费分配不够公正。" class="headerlink" title="5）科研经费分配不够公正。"></a>5）科研经费分配不够公正。</h3><p>长期以来，对科研经费的分配问题不时引发争议。首先，未能把有限的经费用到最重要和最急需的项目上，而是平均分配，致使一些并不急需使用经费的项目与急需重点支持的项目“平分秋色”。其次，有些基金项目“专家组”成员，以权谋私，为本单位申请项目的立项出力，甚至相互勾结，为专家组成员单位获得项目助一臂之力，而许多非专家组单位成员申请的项目就受到不公正待遇；在一段时间内这几乎成为潜规则。再次，科研经费的评定与使用缺乏有效监督，这些问题在人工智能领域同样存在。</p>
<h3 id="6）公众对人工智能的发展存在顾虑。"><a href="#6）公众对人工智能的发展存在顾虑。" class="headerlink" title="6）公众对人工智能的发展存在顾虑。"></a>6）公众对人工智能的发展存在顾虑。</h3><p>自人工智能孕育于人类社会母胎之日起，人工智能的社会影响就引起人类社会的广泛关注。社会上有一部分人对人工智能和智能机器人的出现与发展表示担忧，担心有朝一日人工智能和智能机器会威胁到人类的生存与发展，其中最典型的要算史蒂芬·霍金。作为当今世界一位极具影响力的物理学家，他担心运用人工智能技术制造能够独立思考的机器，最终会威胁到人类的生存。霍金说：人工智能的全面发展可能导致人类的灭绝（图22）。他的观点引起包括众多民众和一些科技人员的共鸣。当然，社会上也存在另一种观点的，他们认为，尽管人工智能经过60年的发展已取得了巨大进步，但在看得见的未来人工智能的整体水平还难以超越人类智能，还不足以威胁到人类的生存。他们主张必须高度重视人工智能对人类社会的影响，不失时机地研究与制定对策，以消除公众顾虑，确保人类自身安全。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58592e725fcf5.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<h3 id="7）一哄而起可能导致无序竞争。"><a href="#7）一哄而起可能导致无序竞争。" class="headerlink" title="7）一哄而起可能导致无序竞争。"></a>7）一哄而起可能导致无序竞争。</h3><p>有人认为，中国社会存在一种传统文化，即普遍存在“一哄而起，遍地开花”，全国许多地方开发同一产品的现象。这些行为劳民伤财，无法保证产品质量，造成资源和人力的巨大浪费，最终既无经济效益，也无社会效益。以往的大炼钢铁、射流技术、可控硅（晶闸管）器件是这样，现在的汽车生产、机器人产业园、无人机开发等也是如此。当前，不但汽车产能过剩，而且机器人产业园内的多数企业都面临无序竞争的艰难境地，很可能在不久的将来有被淘汰出局的危险。</p>
<p>现在，中国人工智能及其产业已引起政府和社会各界的前所未有的高度重视，值得庆幸的是还没有出现人工智能产业“一哄而起，遍地开花”的现象。人工智能产业的科技起点的门槛比较高，开发创业的难度和风险比较大，有胆识、有基础、有实力的创业者可能要比机器人创业者少，但愿不会重复机器人产业园一哄而起的现象。</p>
<h3 id="8）-盲目乐观和夜郎自大不利发展。"><a href="#8）-盲目乐观和夜郎自大不利发展。" class="headerlink" title="8） 盲目乐观和夜郎自大不利发展。"></a>8） 盲目乐观和夜郎自大不利发展。</h3><p>许多有识之士认为，当前国内人工智能基础研究和应用开发与国际先进水平存在很大差距，国际影响力有待提高。然而，国内有一部分人工智能研究与开发人员却过高地估计成绩，认为国内人工智能已经在很多方面甚至全面超过国际先进水平。</p>
<p>评价一门学科是否达到与超过国际先进水平，不但要有客观标准和国际同行普遍认可，而且要有一批令人信服的标志性成果。这里不准备具体讨论或争论这个问题，而是想从国际计算机学科的科技最高奖图灵奖的获奖情况来说明中国人工智能的发展水平。</p>
<p>自1969 年以来，美国计算机学会先后举行过48届图灵奖评审与颁奖，图灵奖得主共计64位。其中，美籍华裔计算机科学家姚期智2000年获得图灵奖，他是图灵奖设立48年以来获得该奖项的唯一华裔学者。在64位图灵奖得主中，有12位杰出人工智能专家获此殊荣，当中没有一个是中国人。</p>
<p>中国已数次蝉联国际超级计算机运行速度冠军，值得庆贺；但这不足以说明中国人工智能科技已达国际先进水平。许多国内企业巨头的人工智能开发虽然进步很快，成绩可喜可贺，但在总体上也远未达到国际领先水平。</p>
<p>国际IT巨头及欧美日发达国家都纷纷投入巨资，力争在本轮人工智能全球竞争中占据主导地位。我们切不可盲目乐观，过高地估计自己的成绩。</p>
<h3 id="9）存在以哲学研究代替人工智能研究倾向。"><a href="#9）存在以哲学研究代替人工智能研究倾向。" class="headerlink" title="9）存在以哲学研究代替人工智能研究倾向。"></a>9）存在以哲学研究代替人工智能研究倾向。</h3><p>人工智能有哲学问题需要研究，但人工智能不属于哲学。有些人从信息哲学或其他哲学角度进行人工智能研究，既是需要的，也是值得支持的。不过，长期以来国内存在一种以哲学研究代替人工智能研究的倾向，并过分夸大哲学问题对人工智能的作用，甚至企图以哲学主导人工智能学科，值得警惕[129]。</p>
<p>需要就人工智能主流问题进行踏踏实实的研究。吴文俊曾经语重心长地告诫：我们真正的意图绝不在于口舌之争，在字面上夸夸其谈。真正应该做的事是实干巧干，借计算机时代来临的大好契机，率先在全世界推行脑力劳动机械化，以具体成就和向世人表明我们的主张。</p>
<h3 id="10）国际合作需要进一步加强。"><a href="#10）国际合作需要进一步加强。" class="headerlink" title="10）国际合作需要进一步加强。"></a>10）国际合作需要进一步加强。</h3><p>中国虽然进行了一些人工智能的国际合作，包括举办人工智能国际会议、出国出席人工智能国际会议和派遣人员参加人工智能国际合作研究等。这些合作不仅在规模上需要扩大，而且合作水平和成果也需要提升。应该说，人工智能的国际合作需要进一步加强，中国的人工智能国际地位有待进一步提高。</p>
<h2 id="四、发展机遇"><a href="#四、发展机遇" class="headerlink" title="四、发展机遇"></a>四、发展机遇</h2><p>中国的人工智能正面临前所未有的历史发展机遇，具备诸多发展优势。</p>
<h3 id="1）国际大势所趋。"><a href="#1）国际大势所趋。" class="headerlink" title="1）国际大势所趋。"></a>1）国际大势所趋。</h3><p>人类社会的信息环境与科技水平已取得了重大进步，与计算机和人工智能密切相关的大数据、云计算、互联网等已获得快速发展。人工智能已开始对人类社会结构产生重大影响，人——机器二元社会正在逐渐地向人-机器-智能机器三元社会发展。人、机器、智能机器协作与共存将成为人类社会结构的新常态，人、机器、智能机器和谐共存既是社会发展的必然，也为人工智能和人工智能产业提供了用武之地。纵观国际社会与科技发展潮流，人工智能的发展是人类社会进入信息社会后继续前行的重要标志，是国际科技发展的大势所趋，将引领一轮新的机器革命，促进世界产业结构调整，为经济复苏与发展注入正能量。这也是中国人工智能遇上的千载难逢的发展机遇期。</p>
<h3 id="2）国家战略驱动。"><a href="#2）国家战略驱动。" class="headerlink" title="2）国家战略驱动。"></a>2）国家战略驱动。</h3><p>回顾国内人工智能的发展过程可以看到，公众对人工智能的认识、人工智能产业的发展和政府对人工智能重视程度都已经发生了很大变化。</p>
<p>如前所述，中央领导人鼓励发展人工智能，习近平、李克强等对中国人工智能和机器人学的发展给予高度支持和明确指示，并提出目标要求；国务院和相关政府部门已制订与发布了人工智能相关的发展战略规划，如《“互联网+”人工智能三年行动实施方案》、《智能制造2025》和《机器人产业发展规划2016—2020》等。国家战略与政府推动是中国人工智能科技与产业健康发展之源，人工智能如果离开了国家的政策协调，就寸步难行；有了国家的战略支持，就能阔步前进。</p>
<h3 id="3）国内发展需求。"><a href="#3）国内发展需求。" class="headerlink" title="3）国内发展需求。"></a>3）国内发展需求。</h3><p>发展人工智能是国内产业转型升级的需要，发展智能产业和智慧经济需要人工智能的持续创新，人工智能产业化是国家发展的大趋势。</p>
<p>中国的社会经济发展正面临新的机遇与挑战。劳动力红利的缺失、老龄化社会的来临、精英人才的需求、关键技术的开发，都需要通过发展来逐一解决。发展人工智能和智能机器能够实现“机器换人”和产业转型升级，“人工智能+X”将成为万众创新的新时尚和新潮流。不能说发展人工智能能够解决所有的经济问题和社会问题，但是可以说人工智能产业能够为解决现有的经济问题和社会问题创造良机。中国的社会进步和经济发展迫切需要人工智能的得力参与，中国产业转型升级和社会发展重构也为人工智能科技和人工智能产业发展提供了“用武之地”。</p>
<h3 id="4）智力资源优势。"><a href="#4）智力资源优势。" class="headerlink" title="4）智力资源优势。"></a>4）智力资源优势。</h3><p>尽管中国的人工智能起步较晚，又走过一段很长的曲折发展道路，但在中国发展人工智能具备得天独厚的智力资源优势。</p>
<p>其一，人工智能重在智能软件，中国人在这方面具有优良传统和特别的智慧。被誉为“中国人工智能之父”的吴文俊指出：中国不仅具有作为典型脑力劳动的数学机械化的合适土壤，而且也是各种脑力劳动机械化的沃土。古代中国是脑力劳动机械化的故乡，也是脑力劳动机械化的发源地。它有着发展脑力劳动机械化所需要的坚实基础、有效手段与丰富经验。中国历史上研究数学的“术”方法，与现在研究人工智能的“算法”，具有异曲同工之妙。</p>
<p>其二，现在中国拥有庞大的互联网网民群体、最大的网民基数和人才基数，形成首屈一指的人工智能群体资源优势。</p>
<p>其三，中国派遣的大批出国研究人工智能的“海归”专家，已成为中国人工智能研究与开发应用的中流砥柱和学科带头人，对人工智能研究开发、产业应用和人才培养极为重要。</p>
<p>其四，中国改革开放的优越发展环境，已经并将继续汲引更多的从事人工智能研发的海外学子和外国专家前来加盟中国的人工智能建设。</p>
<p>处在最好发展机遇期的中国人工智能科技与产业，只要制定与执行好人才策略，何惧无人？</p>
<h3 id="5）产业初步基础。"><a href="#5）产业初步基础。" class="headerlink" title="5）产业初步基础。"></a>5）产业初步基础。</h3><p>与机器人产业相比，中国的人工智能产业起步很晚，但近年来已在人工智能科研成果及其产业转化上取得长足进展，已与10年前的情况不可同日而语。在当前大数据、云计算、移动互联网深入发展与广泛应用的背景下，国内外IT 企业不失时机布局人工智能产业。以智能语音产业为例，2015 年全球智能语音产业规模达到61.2亿美元，较2014年增长34.2%。其中，中国智能语音产业规模达到40.3亿元人民币，较2014年增长41.0%，远高于全球语音产业增长速度。预计到2016年，中国语音产业规模将达到59亿元人民币。</p>
<p>中国语音产业规模提升主要源于以下3个原因：</p>
<p>首先，政府在智能语音技术研发及产业化方面的政策支持，为语音产业发展创造了良好的发展环境。</p>
<p>其次，语音技术提供商不断优化产品性能，进一步深化了智能语音在车载信息服务系统、智能家居等领域的应用。</p>
<p>其三，4G网络的普及、大数据和云计算的发展，为智能语音应用提供了强有力的保障。</p>
<p>这3个原因也是中国智能语音产业发展的重要基础。</p>
<p>当前IT巨头以智能语音为切入点，积极布局人工智能领域发展。国际上，谷歌、苹果、微软、IBM、Facebook等互联网企业在积极推进智能语音技术研发与应用之后，以此为切入点开始布局整个人工智能领域。国内的百度、腾讯、阿里巴巴、科大讯飞、小i机器人、思必驰、云知声、华大基因、捷通华声等企业，以智能交互（文本或语音）为切入点，积极布局人工智能领域，抢占产业发展制高点。</p>
<p>除了智能语音产业外，中国在自然语言处理的其他方面也有一些创新产品和产业集结。此外，图像处理、机器学习、智能驾驶、智能家居、智能传感器等领域，也已经或正在酝酿产业布局。</p>
<p>中国的人工智能产业正在逐步形成中，其规范性也特别需要加强。</p>
<h3 id="6）金融资本助力。"><a href="#6）金融资本助力。" class="headerlink" title="6）金融资本助力。"></a>6）金融资本助力。</h3><p>随着经济的快速发展和国力的空前提高，中国的金融资本实力已具有举足轻重的国际地位，已向国内外大量投资。近年来，国内的金融资本市场已为人工智能产业的发展开辟了很好的土壤。据最新一期国际金融报报道，随着人工智能的发展，它将像当年互联网的崛起一样，打造一批新的人工智能巨无霸，这些新巨人可能从现有的企业巨头进化而来，也可能从目前还名不见经传的小公司甚至个人创客成长而来。</p>
<p>与此同时，资本市场对智能机器人的热捧，让股市呈现出难得的大合唱格局。机器人行业2015年的投资水涨船高，机器人产业的融资金额达到2014年的3倍以上。同时，机器人产业的并购金额也逐年攀升，众多上市公司纷纷涉足机器人并购，一些国内企业开始瞄准海外市场，掀起更大规模的并购高潮，中国的代步工具开发商纳恩博全资收购美国自平衡车Segway公司就是一例。</p>
<p>随着《中国制造2025》规划进一步落地，中国机器人产业势能将进一步释放。根据公开数据显示，2015年，国内已有约70家上市公司并购或投资了机器人及智能自动化项目，其中许多首次涉足机器人业务，而这一数据将在2016年有望快速被打破。有迹象表明，一旦国家全面出台人工智能战略，国内外金融资本将会以不亚于对智能机器人的热情，投资人工智能产业链。</p>
<p>让机器模仿甚至超越人的智力行为和思考方式，始终是充满丰富想象与巨大挑战的科学领域，近期无人驾驶及AlphaGo等为代表的人工智能技术的重大进展，激发金融资本进入人工智能领域的热情。有的科技巨头更是直白地宣称人类社会将从移动互联时代跨入人工智能时代。</p>
<h2 id="五、发展对策"><a href="#五、发展对策" class="headerlink" title="五、发展对策"></a>五、发展对策</h2><p>针对中国人工智能的发展基础、存在问题、发展机遇，特提出发展中国人工智能产业的战略思考，供讨论与决策参考。</p>
<h3 id="1-出台与实施国家大脑计划"><a href="#1-出台与实施国家大脑计划" class="headerlink" title="1.出台与实施国家大脑计划"></a>1.出台与实施国家大脑计划</h3><p>国务院印发的《“互联网+”行动指导意见》中已明确提出人工智能为形成新产业模式的11 个重点发展领域之一。国家发改委和科技部等4部门于2016年5月23日联合发布《“互联网+”人工智能三年行动实施方案》。根据该方案，未来3年将在3个大方面、9个小项推进智能产业发展。智能家居、智能可穿戴设备、智能机器人等都将成为发展的重点扶持项目。该实施方案明确未来3年人工智能产业的发展重点与具体扶持项目，体现出人工智能领域已被提升至国家战略高度。在国家高度重视下,科研投入增加与人才红利注入预期将加速产业变革,如人脸识别、语言识别、智能机器人等细分领域的应用将不断拓宽并进一步实现商品化。</p>
<p>人工智能已上升到国家战略高度，有必要借鉴西方先进科技国家的做法，探讨并在适当时机出台与实施中国的国家大脑计划（图23）。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58592e39875cc.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>近年来，美国、欧盟和日本先后启动了投资巨大的大脑计划。2013年4月，美国总统奥巴马宣布启动“大脑基金计划”，将在未来10年投资约45亿美元。分为2个阶段：前5年着重开发探知大脑的新技术，如功能性核磁共振、电子或光学探针、功能性纳米粒子、合成生物学技术；后5年力争用新技术实现脑科学的新发现包括绘制人类大脑动态图。2013年1月，欧盟启动“人类大脑计划”，将在未来10年内投人10亿欧元，研究重点除了医学和神经科学外还有未来计算机技术。2014年4月，日本的脑计划也宣布启动。</p>
<p>面对激烈的国际竞争，中国有必要汲取欧美日等国的经验教训，跨学科、跨行业讨论论证，集思广益，探讨中国是否需要制订大脑计划？如果需要大脑计划，应该包括哪些内容？什么时候出台与实施符合中国国情的国家大脑计划？“大脑计划”的实施不仅涉及人工智能，而且还与生命科学特别是神经科学密不可分。建议在脑科学领域采用“人工智能+生命科学”的合作模式，集中优势资源，解决当下最迫切的社会需求，如发展预防和治疗脑疾病的诊疗手段，尤其是神经发育疾病、精神类疾病、神经退行性病变的早期诊断和干预。主要的研究应聚焦在脑工作原理和与脑重大疾病防治的相关前沿领域上。</p>
<h3 id="2-全面打牢人工智能基础"><a href="#2-全面打牢人工智能基础" class="headerlink" title="2.全面打牢人工智能基础"></a>2.全面打牢人工智能基础</h3><p>人工智能的基础涉及数学、经济学、神经科学、心理学、哲学、计算机工程、控制论、语言学、生物学、认知科学、仿生学等学科及其交叉。人工智能学科有着十分广泛和极其丰富的研究内容，包括认知建模、知识表示、知识推理、知识工程、机器感知、机器思维、机器学习、机器行为等。不同的人工智能研究者从不同的角度对人工智能内容进行研究。例如，基于脑功能模拟、基于应用领域和应用系统、基于系统结构和支撑环境、分布式人工智能系统、机器定理证明、不确定性推理等。中国学者在人工智能基础研究方面已在机器定理证明、分层知识表示与推理、自动规划、虹膜识别、语音识别、可拓数据挖掘、进化优化等方面取得一些重要成果，具有较大的国际影响力；但总体上看成果还不够多，面不够广，整体影响力也有待进一步提高。</p>
<p>人工智能基础研究是人工智能科技可持续发展的基石。只有打牢人工智能基础，才能为人工智能及其应用的蓬勃发展与全面升级提供原动力。需要全面加强人工智能基础研究，鼓励多学科交叉创新研究，重视和加强人工智能前瞻性基础研究，经过长期努力与积累，使中国的人工智能基础研究整体水平走向国际先进行列。</p>
<h3 id="3-深化人工智能技术开发与推广应用"><a href="#3-深化人工智能技术开发与推广应用" class="headerlink" title="3.深化人工智能技术开发与推广应用"></a>3.深化人工智能技术开发与推广应用</h3><p>应用需求是科技创新的不竭之源，也是人工智能技术的创新之源。被称为加速第四次工业革命到来的“德国工业4.0”，其主题即为3个智能：智能工厂、智能生产和智能物流。《中国制造2025》规划的核心内容就是建立智能化生产线，采用智能化管理运营模式，从设计、工艺、生产、服务保障、管理5个方面的智能化入手，最终全面实现智能制造。人工智能技术对智能制造的关键作用由此可见一斑。</p>
<p>人工智能技术的应用可以推广至各行各业，这些行业需要各自的人工智能典型产品、项目或系统。例如，对工矿企业应用人工智能技术进行的智能化开发可包括：</p>
<p>1）采用智能机器（含智能机器人）代替危险、有毒、放射性等有害环境下和笨重、单调、高空、粉尘等恶劣条件下的劳动，减轻体力和脑力劳动强度，保护工人健康。</p>
<p>2）采用人工智能技术进行厂矿、生产车间、工段和设备的设计，快速优化设计方案，实现生产设计的智能化。</p>
<p>3）应用智能化技术，全面实现制造过程智能化。</p>
<p>4）开发智能咨询与决策系统，提供生产过程的科学咨询、决策与管理，走向生产和人员管理智能化。</p>
<p>5）研发各种专家系统，用于生产规划、生产过程监控与控制、生产系统和设备的智能故障诊断，提高劳动生产率和产品质量。</p>
<p>人工智能开发者要结合各类企业的特点，以推进“中国制造2025”和“互联网+人工智能”为契机，抓住第二次机器革命的历史机遇，实现“人工智能+”，大力发展人工智能技术与产业，为经济新常态注入智能化的思路。要提高工业领域人工智能技术的研发和创新能力，开发高水平的人工智能产品，避免低水平重复和无序竞争。要深化人工智能技术的推广应用，做大做强智能产业。人工智能作为高新技术，更需要创新政策机制、管理体制、市场机制和成果转化机制，为人工智能及其产业的发展提供优良环境，为人工智能的健康发展保驾护航。要出台人工智能应用的鼓励政策，在人工智能技术应用推广和市场开发中，得到国家政策、资金及应用等方面的扶持与支持，加快人工智能新技术尽早从实验室走向应用领域。</p>
<p>在开发与应用人工智能技术过程中，要求真务实，有序发展；要谨防“全民动手，遍地开花”。</p>
<h3 id="4-培养高素质人工智能人才"><a href="#4-培养高素质人工智能人才" class="headerlink" title="4.培养高素质人工智能人才"></a>4.培养高素质人工智能人才</h3><p>人工智能教育是人工智能科技和人工智能产业赖以发展的强化剂和推动力，也是高素质人工智能人才培养及人工智能科技与产业可持续发展的根本保证。中国的人工智能教育已初步形成学科教育与课程教学体系，已在大学计算机、智能科学技术、电子信息、自动化等专业开设不同层次的人工智能课程。中国人工智能发展的存在问题和人工智能的基础建设问题，都与人工智能人才培养密不可分。只有培养好足够多的高素质人工智能人才，才能保证中国人工智能的顺利发展，攀登国际人工智能的高峰。</p>
<p>人工智能人才培养方面，提出以下值得注意的建议：</p>
<h4 id="1）把人工智能人才培养上升为国家教育重点。"><a href="#1）把人工智能人才培养上升为国家教育重点。" class="headerlink" title="1）把人工智能人才培养上升为国家教育重点。"></a>1）把人工智能人才培养上升为国家教育重点。</h4><p>不久前的AlphaGo与李世石的国际围棋人工智能秀，促进中国兴起了一个以人工智能技术推进经济社会智能化的浪潮。人工智能人才是人工智能基础建设的重中之重。做好发展规划、掌握关键技术、进行推广应用都需要高素质的人才去实现。要适应这一社会需求，全面规划高素质人工智能人才培养，为中国人工智能进入新的发展机遇期和可持续发展提供人才保障。需要进一步提高对人工智能人才培养的认识，建立人工智能人才培养制度，全面规划人工智能人才培养，把人工智能人才培养上升为国家教育重点（图24）。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58592e50c8817.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<h4 id="2）-建立与规范各级人工智能教育。"><a href="#2）-建立与规范各级人工智能教育。" class="headerlink" title="2） 建立与规范各级人工智能教育。"></a>2） 建立与规范各级人工智能教育。</h4><p>根据市场需求，全面规范各级人工智能教育，开办一定规模与比例的各类学校，包括大学、职业技术学院、人工智能学院、技工学校等；建议国家教育部全面扩大现有“智能科学与技术”专业设置，支持办好“智能科学与技术”等本科专业，加强本科人工智能教学；在部分相关专业设立人工智能研究生培养方向，加强人工智能方向的研究生教育力度；在中小学开设人工智能科技或科普课程，开展形式多样的人工智能课外活动，培养中小学生对人工智能的兴趣；搞好人工智能师资培训，提高人工智能教师水平，规范与组织编写各类人工智能教材，为人工智能人才培养提供基本保障。</p>
<h4 id="3）多模式多渠道培养高素质人工智能人才。"><a href="#3）多模式多渠道培养高素质人工智能人才。" class="headerlink" title="3）多模式多渠道培养高素质人工智能人才。"></a>3）多模式多渠道培养高素质人工智能人才。</h4><p>努力探索通过多模式多渠道培养各类高素质人工智能人才，进行人工智能品牌产品开发和市场化营销，总结经验，加以推广。政府主管部门应当为人工智能人才培养提供相关政策支持；国营和民营研究所主要进行人工智能产品开发与创新，让人工智能科技人员发挥才智；学校和学院除参与人工智能产品研发外，首要任务是提供知识资源，培养各层次的高素质人工智能人才；企业要精益求精进行人工智能产品生产，让人工智能科技人才和技术工人充分发挥作用。要建立人工智能人才激励机制，鼓励各类能工巧匠和大师级精英等人工智能优秀人才脱颖而出。鼓励从事人工智能学习与开发的本科生、研究生和科技工作者进行人工智能科技创新创业，对他们的创新思想和原型成果给予创业基金支持。</p>
<h4 id="4）充分利用互联网培养人工智能人才。"><a href="#4）充分利用互联网培养人工智能人才。" class="headerlink" title="4）充分利用互联网培养人工智能人才。"></a>4）充分利用互联网培养人工智能人才。</h4><p>充分利用互联网技术，为人工智能系统的“人工智能+”提供得力的技术保障，为人工智能人才培养提供有效手段。利用与国际接轨的高水平人工智能平台，创建与发展人工智能主流媒体；开发与完善国内人工智能网络教学平台，为各层次人工智能教学提供网络教育服务，为其他课程提供辅助教学工具。</p>
<h3 id="5-深刻认识与国际先进水平的差距"><a href="#5-深刻认识与国际先进水平的差距" class="headerlink" title="5.深刻认识与国际先进水平的差距"></a>5.深刻认识与国际先进水平的差距</h3><p>有些学者或企业家认为，中国的人工智能科技水平已经与美国不相上下。需要科学客观地评估已有成绩，既不要妄自菲薄，又不能夜郎自大。既要充分肯定成绩，又要深刻认识差距。过高地估计中国现有人工智能成果既不实事求是，又不利于人工智能产业的健康发展。</p>
<p>美国是现在人工智能科技整体水平最高的国家。分析中美两国在人工智能方面的差距，有助于我们保持清醒的认识。许多人工智能界内专家指出：我们在人工智能方面一直跟踪美国的理论，然后应用并在一些地方有所创新，应用上的追赶很快。但是，在基础理论研究方面和美国还是差距很大。</p>
<p>国内做人工智能基础理论研究的人很少，这是学术环境问题造成的。例如，美国把脑科学和类脑科学排在研究的最前面，而中国在这方面的自主研发能力却比较薄弱，在突破和创新上也有所差距。又如，国内在深度学习方面发表了不少论文，但真正有理论上创新或具备重要应用价值的研究并不多。</p>
<p>美国人已经在构思下一个人工智能是什么，而国内还没有起步。这是我们面临的最大挑战，这是个难题，牵涉面很广，不是一两个团队投入进去就能解决的。这种差距在很大程度上源于国内学术评价体系以及以实际应用为导向。学术评价体系、待遇保障都有需要改进的地方。我们可能要通过10~20年努力才能在人工智能方面全面赶上美国。</p>
<p>美国公司会投入大量资金培养一批高端的纯技术人员，从他们博士毕业开始，招聘到公司，并致力于人工智能纯技术研发。这样的一个顶尖精英团队，以科技兴趣和信念为动力进行技术研发，在人工智能的研究领域遥遥领先世界水平也不足为奇。而在国内，很少有公司会愿意花大笔经费培养这样的纯技术人工智能团队，公司内部也缺乏奖励机制。在国内高校，人工智能的研究水平也与世界领先水平有很大的差距。</p>
<h3 id="6-增大研究经费支持力度，科学地合理分配经费"><a href="#6-增大研究经费支持力度，科学地合理分配经费" class="headerlink" title="6.增大研究经费支持力度，科学地合理分配经费"></a>6.增大研究经费支持力度，科学地合理分配经费</h3><p>首先，国家要大幅度加大对人工智能的投入力度，特别要重视对人工智能基础研究的长期经费支持，有针对性地加强对有基础和有优势的人工智能产业的支持。要吸取以往国家科研与开发经费分配的经验教训，制订完善合理的经费分配原则和办法，采取有效公正措施，解决国家研究经费分配不公的问题，让国家研究经费“物尽其用”，发挥最大的支持与激励作用。</p>
<p> 其次，鼓励民间金融资本对人工智能产业与创业的投资。在当前人工智能热潮的激励下，许多民间资本有意与人工智能产业结缘。巨头与创业公司发力，共助盘活人工智能市场。百度、阿里巴巴、腾讯等互联网公司均已布局人工智能领域,资金的注入有望盘活市场。据艾瑞咨询调查,目前已有近百家创业公司布局人工智能领域，约65家获得投资,融资金额达29.1 亿元人民币。在国家政策支持、应用需求倒逼、技术进步升级和资金注入等因素共同推动下，千亿级市场盛宴正在开启。注意为非公有人工智能企业营造良好的发展环境，在市场准入、审批办照、待遇与服务等方面，提供宽松和良好的服务，调动民营企业的积极性，加快非公有经济的发展。</p>
<p>不过，由于人工智能产业具有应用前景广、科技含量高、投资回报周期长、技术迭代周期短等特点，不少投资者在谈及人工智能技术时直言“看不懂”，令涉足该领域的资本需付出更多智慧。</p>
<p>他们必须评估所投资的人工智能领域或项目在国内外的技术先进性和商业化应用前景，需要具备一定的专业技术和长线投资眼光。现在很多投资机构比较关注的是短期投资价值，希望3~5年内能够产生回报，但投资人工智能的项目往往回报周期比较长，能不能在预期内产生回报，就需要进一步去判断。投资人工智能科技与产业，必须三思而行。</p>
<p>在加大人工智能研发支持力度的同时，需要加强研发经费的管理。建议在项目评审与实施过程中实行全程科学管理，加强同行评议特别是经费评审和经费使用管理，杜绝浪费，防止腐败，使有限的经费用在人工智能研发的“刀刃”上，助推人工智能科技和产业强劲发展。</p>
<h3 id="7-建设开放共享的人工智能创新发展平台"><a href="#7-建设开放共享的人工智能创新发展平台" class="headerlink" title="7.建设开放共享的人工智能创新发展平台"></a>7.建设开放共享的人工智能创新发展平台</h3><p>李彦宏曾在2015年全国政协发言中提出：建议搞一个全球最大规模的人工智能开发平台。我们姑且不谈这个建议跟“中国大脑”有什么关系，而是想来探讨建立一个全国人工智能的开发大平台的必要性和可行性。</p>
<p>在互联网、大数据、云计算的网络时代，像人工智能这样的高新技术和超大数据科学与产业如果没有自己的人工智能通用平台，那要发展是不可想象的。要让科研机构和企业以至个人创客都能公平地在这个平台上做各种各样的创新。现在，人工智能技术已有了实质性的应用，无论是语音识别、图像识别、多语种翻译、机器学习、智能规划、智能控制，还是无人驾驶汽车、无人飞行器和水下自主航行器等智能移动机器人，其核心基础技术都是人工智能技术。智能机器人开发平台、大数据与云计算开发平台、互联网金融开发平台、智能游戏开发平台、人工智能训练开发平台、智能物流系统开发平台、智能电网、智能服务、智能交通、智慧城市、智慧旅游、专家系统等也需要建设开放的人工智能创新发展平台，实现资源设施共享，获得人工智能大平台的强力支持。</p>
<p>中国已拥有极其丰富的计算机和互联网技术资源。随着计算资源和网络资源越来越丰富，成本越来越低，原来计算机不能模拟的许多智力功能现在已经能够模拟了。人工智能是当今世界一个技术的制高点，中国有能力构建一个具有全球影响力的人工智能大平台。同时，要认识到，实现全国甚至全球人工智能资源共享、数据共存和数据积累，还是有很大的差距与难度的，切不可掉以轻心。</p>
<h3 id="8-抓实人工智能产品的标准化建设"><a href="#8-抓实人工智能产品的标准化建设" class="headerlink" title="8.抓实人工智能产品的标准化建设"></a>8.抓实人工智能产品的标准化建设</h3><p>人工智能产品兼有硬件和软件等，而以软件为其技术核心。以往我国的人工智能产品为数不多，虽然没有国家标准，但影响较小。随着人工智能产业的迅速崛起，人工智能新产品很可能出现井喷之势。这些人工智能产品可能鱼目混珠，泥沙俱下，不可避免地会掺杂一批伪劣产品，扰乱市场。为保障人工智能产业的健康发展，保护广大消费者的正当权益，政府立法与质量检查部门以及市场管理部门，需要未雨绸缪，不失时机抓紧制订或审定人工智能产品标准，严格产品检查，严禁不合格的人工智能产品投放市场。只有让合格的人工智能制品进入市场，才能维护人工智能高科技的信誉，使人工智能产业形成良性发展，进而促进人工智能产业真正成为智能制造的核心技术、国民经济结构转型升级的新支点和新一轮产业革命的引擎。</p>
<h3 id="9-发展人工智能文化"><a href="#9-发展人工智能文化" class="headerlink" title="9.发展人工智能文化"></a>9.发展人工智能文化</h3><p>人工智能对人类文化有诸多影响。人工智能技术能够改善人类知识、改善人类语言、改善文化生活。需要营造与发展人工智能文化。人工智能知识的普及工作也是人工智能文化的一个重要组成部分。</p>
<p>人工智能的科学普及涉及两个方面。一方面向大众传播人工智能基础知识，让他们客观了解人工智能，正确认识人工智能，积极支持人工智能。另一方面向广大青少年普及人工智能基本知识，培养他们对人工智能的兴趣，甚至发现与培养一批人工智能科学技术的接班人。为此，需要开展一系列的工作。</p>
<p>首先，大力开展人工智能科普活动需要加强人工智能的教育和科普人才队伍建设，这是人工智能可持续发展的重要保证。要让人工智能成为天使而不是魔鬼，科普工作将起到十分重要的作用。</p>
<p>其次，要争取国家和企业的大力支持，建立人工智能科普基地，为普及人工智能知识发挥示范作用；鼓励科技人员和各级教师进行人工智能科普创作，支持出版人工智能科普作品，广泛传播与普及人工智能知识；出版人工智能科普杂志，向青少年介绍国内外人工智能的发展动态、应用示例、科普知识、趣闻轶事；规范与举办各类人工智能科技竞赛和夏令营、冬令营活动，通过丰富多彩的活动，培养广大群众特别是青少年对人工智能的兴趣；面向全国大学生和中小学生，举办人工智能网络竞赛，营造良好的人工智能生态文化。</p>
<p>此外，在发展人工智能文化和科技中，要特别注意发挥各级学术团体的作用，让学会组织为普及人工智能知识和发展人工智能文化发挥特别作用。</p>
<h3 id="10-重视人工智能社会学研究"><a href="#10-重视人工智能社会学研究" class="headerlink" title="10.重视人工智能社会学研究"></a>10.重视人工智能社会学研究</h3><p>人工智能在给创造者、销售者和用户带来经济利益的同时，就像任何新技术一样，其发展也引起或即将出现许多问题，并使一些人感到担心或懊恼。这些问题涉及劳务就业、社会结构变化、思维方式与观念的变化、心理上的威胁和技术失控危险等。社会上一些人担心人工智能技术会抢夺他们的饭碗而导致失业，担忧智能机器人的智慧超过人类而威胁人类安全等。这些都是值得高度关注的影响社会安定和谐的社会问题。</p>
<p>有必要把人工智能的社会学问题提上议事日程。政府部门、科研机构和学术团体，都要把人工智能社会学研究纳入相应计划，研究解决对策与办法。人工智能可能出现的一些负面效应或新问题，如利用人工智能技术进行金融犯罪（即所谓“智能犯罪”），智能驾驶车辆需要出台相应的交通法规等。因此，需要建立相关的政策和法律法规，避免可能风险，确保人工智能的正面效应。只有人工智能应用得好、把握得好，才能确保人工智能不被滥用，确保人工智能是天使而不是魔鬼。</p>
<p>此外，如前所述，人工智能已使社会结构产生变化，人-智能机器-机器协作与共存将成为人类社会结构的新常态，必将对人类社会产生具有跨时代的影响。</p>
<h2 id="六、结论"><a href="#六、结论" class="headerlink" title="六、结论"></a>六、结论</h2><p>国际人工智能经过60年的发展已经取得了巨大进步，目前正呈现爆发增长之势。近年来，国内外人工智能出现前所未有的良好发展环境，各种人工智能新思想和新技术如雨后春笋般破土而出，人工智能的应用领域更加拓展，人工智能的人才队伍日益壮大。但总体上看，人工智能仍处于初级发展阶段，仍远不足以威胁到人类的生存，但是它的社会影响问题应当得到高度重视。</p>
<p>由于历史原因，中国人工智能起步较晚，而且走过一段很长的弯路。不过，改革开放以来，中国人工智能逐步走上发展的康庄大道。如今，中国人工智能迎来了发展的春天，正在酝酿一场重大的人工智能变革与创新，必将为中国的现代化建设做出历史性贡献。</p>
<p>作为智能化时代的关键技术，人工智能将日益成为新一轮产业革命的引擎，必将深刻影响国际产业竞争格局和国家的国际竞争力。应当以“互联网+”、“中国制造2025”和“人工智能+”等国家战略为契机，抓住第二次机器革命的历史机遇，大力发展人工智能技术与产业，为经济的新常态注入智能化思路。要系统谋划，瞄准国际人工智能发展趋势，立足国内社会发展实际需求，统筹整合国内相关资源，科学设定发展目标。要尊重与探索人工智能发展规律，认清发展形势，发现存在差距，明确努力方向，迎头赶上人工智能的国际先进水平，为国际人工智能的发展做出中国人应有的积极贡献。</p>
<p>发展人工智能科技及其产业，开拓者们需要下定决心，坚定信心，胸怀虚心，树立恒心，锻炼耐心，追求精心，独具匠心，保持细心，让全国人民放心。相信在人工智能发展良机面前，中国各级政府部门和人工智能开发者一定能够抓住机遇，创造新的辉煌，迎接人工智能发展的新时代。人工智能技术和产品就在大家身旁，人工智能时代就在前面。</p>
<p>在本文即将脱稿之际，传来了习近平总书记在全国科技创新大会上发表的“为建设世界科技强国而奋斗”的重要讲话。他在大会上提出的5点要求应当成为包括人工智能在内的中国科技研究探索的指路明灯。让我们响应习总书记的号召，发动人工智能科技创新的强大引擎，向着人工智能科技强国目标不断前进！</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.leiphone.com/author/beiyourenjiyurenzhishiyanshi" target="_blank" rel="external">人机与认知实验室</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中国的人工智能经历了怎样的发展过程？取得哪些成绩？存在什么问题？面临何种机遇？有哪些解决方案？&lt;/p&gt;
&lt;p&gt;雷锋网按：本文作者蔡自兴，来自湖南省自兴人工智能研究院、中南大学智能系统与智能软件研究所。文章来自北邮人机与认知实验室，雷锋网(公众号：雷锋网)已获授权。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.leiphone.com/uploads/new/article/740_740/201612/58590044782c5.png?imageMogr2/format/jpg/quality/90&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="History" scheme="http://ipcreator.me/tags/History/"/>
    
      <category term="China" scheme="http://ipcreator.me/tags/China/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning</title>
    <link href="http://ipcreator.me/2017/03/27/BusinessAI/concept-of-machine-learning/"/>
    <id>http://ipcreator.me/2017/03/27/BusinessAI/concept-of-machine-learning/</id>
    <published>2017-03-27T01:58:06.000Z</published>
    <updated>2017-03-27T09:06:23.123Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/330px-Hopfield-net.png" alt=""></p>
<p>机器学习是人工智能的一个分支。人工智能的研究是从以“推理”为重点到以“知识”为重点，再到以“学习”为重点，一条自然、清晰的脉络。</p>
<p>机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。机器学习在近30多年已发展为一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。</p>
<p>机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。</p>
<a id="more"></a>
<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><p>机器学习是人工智能的一个分支。人工智能的研究是从以“推理”为重点到以“知识”为重点，再到以“学习”为重点，一条自然、清晰的脉络。显然，机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。机器学习在近30多年已发展为一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。算法设计方面，机器学习理论关注可以实现的，行之有效的学习算法。很多推论问题属于无程序可循难度，所以部分的机器学习研究是开发容易处理的近似算法。</p>
<p>机器学习已广泛应用于数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人等领域。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>机器学习有下面几种定义：<br>机器学习是一门人工智能的科学，该领域的主要研究对象是人工智能，特别是如何在经验学习中改善具体算法的性能。<br>机器学习是对能通过经验自动改进的计算机算法的研究。<br>机器学习是用数据或以往的经验，以此优化计算机程序的性能标准。<br>一种经常引用的英文定义是：</p>
<blockquote>
<p>A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.</p>
</blockquote>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>机器学习可以分成下面几种类别：</p>
<h3 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h3><p>从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。训练集中的目标是由人标注的。常见的监督学习算法包括回归分析和统计分类。</p>
<h3 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h3><p>与监督学习相比，训练集没有人为标注的结果。常见的无监督学习算法有聚类。</p>
<h3 id="半监督学习"><a href="#半监督学习" class="headerlink" title="半监督学习"></a>半监督学习</h3><p>介于监督学习与无监督学习之间。</p>
<h3 id="增强学习"><a href="#增强学习" class="headerlink" title="增强学习"></a>增强学习</h3><p>通过观察来学习做成如何的动作。每个动作都会对环境有所影响，学习对象根据观察到的周围环境的反馈来做出判断。</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>具体的机器学习算法有：</p>
<h3 id="构造间隔理论分布：聚类分析和模式识别"><a href="#构造间隔理论分布：聚类分析和模式识别" class="headerlink" title="构造间隔理论分布：聚类分析和模式识别"></a>构造间隔理论分布：聚类分析和模式识别</h3><p>人工神经网络<br>决策树<br>感知器<br>支持向量机<br>集成学习AdaBoost<br>降维与度量学习<br>聚类<br>贝叶斯分类器</p>
<h3 id="构造条件概率：回归分析和统计分类"><a href="#构造条件概率：回归分析和统计分类" class="headerlink" title="构造条件概率：回归分析和统计分类"></a>构造条件概率：回归分析和统计分类</h3><p>高斯过程回归<br>线性判别分析<br>最近邻居法<br>径向基函数核</p>
<h3 id="通过再生模型构造概率密度函数"><a href="#通过再生模型构造概率密度函数" class="headerlink" title="通过再生模型构造概率密度函数"></a>通过再生模型构造概率密度函数</h3><p>最大期望算法<br>概率图模型：包括贝叶斯网和Markov随机场<br>Generative Topographic Mapping</p>
<h3 id="近似推断技术"><a href="#近似推断技术" class="headerlink" title="近似推断技术"></a>近似推断技术</h3><p>马尔可夫链<br>蒙特卡罗方法<br>变分法</p>
<h3 id="最优化"><a href="#最优化" class="headerlink" title="最优化"></a>最优化</h3><p>大多数以上方法，直接或者间接使用最优化算法。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0" target="_blank" rel="external">机器学习</a><br>Bishop, C. M. (1995). 《模式识别神经网络》，牛津大学出版社。ISBN 0-19-853864-2<br>Bishop, C. M. (2006). 《模式识别与机器学习》，Springer。ISBN 978-0-387-31073-2<br>Richard O. Duda, Peter E. Hart, David G. Stork (2001) 《模式分类》（第2版）, Wiley, New York, ISBN 0-471-05669-3.<br>MacKay, D. J. C. (2003). 《信息理论、推理和学习算法》，剑桥大学出版社。ISBN 0-521-64298-1<br>Mitchell, T. (1997). 《机器学习》, McGraw Hill. ISBN 0-07-042807-7<br>Sholom Weiss, Casimir Kulikowski (1991). Computer Systems That Learn, Morgan Kaufmann. ISBN 1-55860-065-5</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/330px-Hopfield-net.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;机器学习是人工智能的一个分支。人工智能的研究是从以“推理”为重点到以“知识”为重点，再到以“学习”为重点，一条自然、清晰的脉络。&lt;/p&gt;
&lt;p&gt;机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。机器学习在近30多年已发展为一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。&lt;/p&gt;
&lt;p&gt;机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Machine Learning" scheme="http://ipcreator.me/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Floating Point</title>
    <link href="http://ipcreator.me/2017/03/27/Program/Concepts/float/"/>
    <id>http://ipcreator.me/2017/03/27/Program/Concepts/float/</id>
    <published>2017-03-27T01:58:06.000Z</published>
    <updated>2017-03-27T10:02:18.866Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/Float_mantissa_exponent.png" alt=""></p>
<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>在计算机科学中，浮点（英语：floating point，缩写为FP）是一种对于实数的近似值数值表现法，由一个有效数字（即尾数）加上幂数来表示，通常是乘以某个基数的整数次指数得到。以这种表示法表示的数值，称为浮点数（floating-point number）。利用浮点进行运算，称为浮点计算，这种运算通常伴随着因为无法精确表示而进行的近似或舍入。</p>
<a id="more"></a>
<p>这种表示方法类似于基数为10的科学记数法，在计算机上，通常使用2为基数的幂数来表示。一个浮点数a由两个数m和e来表示：a = m × b^e。在任意一个这样的系统中，我们选择一个基数b（记数系统的基）和精度p（即使用多少位来存储）。m（即尾数）是形如±d.ddd…ddd的p位数（每一位是一个介于0到b-1之间的整数，包括0和b-1）。如果m的第一位是非0整数，m称作正规化的。有一些描述使用一个单独的符号位（s 代表+或者-）来表示正负，这样m必须是正的。e是指数。</p>
<p>这种表示法的设计，来自于对于值的表现范围，与精密度之间的取舍：可以在某个固定长度的存储空间内表示出某个实数的近似值。例如，一个指数范围为±4的4位十进制浮点数可以用来表示43210，4.321或0.0004321，但是没有足够的精度来表示432.123和43212.3（必须近似为432.1和43210）。当然，实际使用的位数通常远大于4。<br>此外，浮点数表示法通常还包括一些特别的数值：+∞和−∞（正负无穷大）以及NaN（’Not a Number’）。无穷大用于数太大而无法表示的时候，NaN则指示非法操作或者无法定义的结果。<br>其中，无穷大，可表示为inf，在内存中的值是阶码为全1，尾数全0。而NaN在内存中的值则是阶码全1，尾数不全0。</p>
<h3 id="计算机的浮点数"><a href="#计算机的浮点数" class="headerlink" title="计算机的浮点数"></a>计算机的浮点数</h3><p>浮点指的是带有小数的数值，浮点运算即是小数的四则运算，常用来测量电脑运算速度。大部分计算机采用二进制（b=2）的表示方法。位（bit）是衡量浮点数所需存储空间的单位，通常为32位或64位，分别被叫作单精度和双精度。有一些计算机提供更大的浮点数，例如英特尔公司的浮点运算单元Intel8087协处理器（以及其被集成进x86处理器中的后代产品）提供80位长的浮点数，用于存储浮点运算的中间结果。还有一些系统提供128位的浮点数（通常用软件实现）。</p>
<h3 id="浮点数的标准"><a href="#浮点数的标准" class="headerlink" title="浮点数的标准"></a>浮点数的标准</h3><p>在电脑使用的浮点数被电气电子工程师协会（IEEE）规范化为IEEE 754。</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>π的值可以表示为π = 3.1415926…10（十进制）。当在一个支持17位尾数的计算机中表示时，它会变为0.11001001000011111 × 2^2。</p>
<h3 id="准确性"><a href="#准确性" class="headerlink" title="准确性"></a>准确性</h3><p>由于浮点数不能表达所有实数，浮点运算与相应的数学运算有所差异，有时此差异极为显著。<br>比如，二进制浮点数不能表达0.1和0.01，0.1的平方既不是准确的0.01，也不是最接近0.01的可表达的数。单精度（24比特）浮点数表示0.1的结果为<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/3cc0c417147d35e6a577cbf56c88600d17b5b9d1" alt=""><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/801cf7477f2d78a751e2f9469059824a28cc9265" alt=""><br>即<br>0.100000001490116119384765625<br>此数的平方是<br>0.010000000298023226097399174250313080847263336181640625<br>但最接近0.01的可表达的数是<br>0.009999999776482582092285156250<br>浮点数也不能表达圆周率<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9be4ba0bb8df3af72e90a0535fabcc17431e540a" alt="">，所以<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/34d582abaef83367f85ead3cba0d03900851c5fb" alt="">不等于正无穷，也不会溢出。下面的C语言代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">double pi = 3.1415926535897932384626433832795;</div><div class="line">double z = tan(pi/2.0);</div></pre></td></tr></table></figure></p>
<p>的计算结果为16331239353195370.0，如果用单精度浮点数，则结果为−22877332.0。同样的，<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/c01b1f6c3bf7f8586a1bf6103afea822725d53cf" alt=""><br>由于浮点数计算过程中丢失了精度，浮点运算的性质与数学运算有所不同。浮点加法和乘法不匹配结合律和分配律。</p>
<h2 id="单精度浮点数"><a href="#单精度浮点数" class="headerlink" title="单精度浮点数"></a>单精度浮点数</h2><p>单精度浮点数格式是一种计算机数据格式，在计算机存储器中占用4个字节（32 bits），利用“浮点”（浮动小数点）的方法，可以表示一个范围很大的数值。<br>在IEEE 754-2008的定义中，32-bit base 2格式被正式称为binary32格式。这种格式在IEEE 754-1985被定义为single，即单精度。需要注意的是，在更早的一些计算机系统中，也存在着其他4字节的浮点数格式。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>第1位表示正负，中间8位表示指数，后23位储存有效数位（有效数位是24位）。<br>正负号0代表正，1代表负。<br>指数可以是二补码；或0到255，前半代表负，127代表零，后半代表正。<br>有效数位最左手边的1并不会储存，因为它一定存在（二进制的第一个有效数字必定是1）。换言之，有效数位是24位，实际储存23位。<br><img src="http://ong8f1obl.bkt.clouddn.com/single%20float%20point.jpg" alt=""></p>
<h2 id="双精度浮点数"><a href="#双精度浮点数" class="headerlink" title="双精度浮点数"></a>双精度浮点数</h2><p>双精度浮点数（double）是计算机使用的一种数据类型。比起单精度浮点数，双精度浮点数(double)使用 64 位（8字节） 来存储一个浮点数。 它可以表示十进制的15或16位有效数字，其可以表示的数字的绝对值范围大约是<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9c07267b5bfa31654492905ea02d28eae470f716" alt=""></p>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>sign bit(符号): 用来表示正负号<br>exponent(指数): 用来表示次方数<br>mantissa(尾数): 用来表示精确度<br><img src="http://ong8f1obl.bkt.clouddn.com/General_double_precision_float.png" alt=""></p>
<h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><p>0代表数值为正，1代表数值为负。</p>
<h3 id="指数"><a href="#指数" class="headerlink" title="指数"></a>指数</h3><p>类比整型使用所有位为 0 的数字表示数值“0”，双精度浮点数表示 0 时指数部分也为 0。若如此，便可能产生冲突：比如全 0 的数字可能表示“0”，也可能表示<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/23dd92324d8b592a21be50a44cf2c48dba20e3f2" alt="">（参考下文“尾数”的解释）。于是此处规定：<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/22cb404192ab64c4954a3263c51ec5202928e520" alt="">用来代表带符号的 0（尾数为 0）或下溢数（尾数不为 0）。<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f24e15fbd966772fe4a91b3da51a54562f7a6647" alt="">用来代表无穷大（尾数为 0）或NaN（尾数不为 0）。<br>其他：代表 2 的（exponent-0x3ff）次方。</p>
<h3 id="尾数"><a href="#尾数" class="headerlink" title="尾数"></a>尾数</h3><p>在二进制的“科学记号”，数字被表示为：<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/40d1a2e7879ca1fe008f5d9b7796ea520c0227ee" alt=""><br>为了最大限度提高精确度，可以要求尾数规格化，把尾数处理到大于等于1而小于2的区间内，便可省去前导的“1”。例如：</p>
<p><img src="http://ong8f1obl.bkt.clouddn.com/double%20float.jpg" alt=""></p>
<p>于是，可得以下形式：<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/45b5245fa64a99f69255fb29eee882430b6b30f7" alt=""></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>根据以上的叙述，一个双精度浮点数所代表的数值为：<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/7983ffbff10fe08e4741b16cb180f8bde8ef31b7" alt=""></p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">3ff0 0000 0000 0000   = 1</div><div class="line"> c000 0000 0000 0000   = -2</div><div class="line"> 7fef ffff ffff ffff   ~ 1.7976931348623157 x 10308 (Max Double)</div><div class="line"> 3fd5 5555 5555 5555   ~ 1/3</div><div class="line"> 0000 0000 0000 0000   = 0</div><div class="line"> 8000 0000 0000 0000   = -0</div><div class="line"> 7ff0 0000 0000 0000   = 無限大</div><div class="line"> fff0 0000 0000 0000   = 負無限大</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%B5%AE%E7%82%B9%E6%95%B0" target="_blank" rel="external">浮点数</a><br><a href="https://zh.wikipedia.org/wiki/%E5%96%AE%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8" target="_blank" rel="external">单精度浮点数</a><br><a href="https://zh.wikipedia.org/wiki/%E9%9B%99%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8" target="_blank" rel="external">双精度浮点数</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/Float_mantissa_exponent.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;浮点数&quot;&gt;&lt;a href=&quot;#浮点数&quot; class=&quot;headerlink&quot; title=&quot;浮点数&quot;&gt;&lt;/a&gt;浮点数&lt;/h2&gt;&lt;p&gt;在计算机科学中，浮点（英语：floating point，缩写为FP）是一种对于实数的近似值数值表现法，由一个有效数字（即尾数）加上幂数来表示，通常是乘以某个基数的整数次指数得到。以这种表示法表示的数值，称为浮点数（floating-point number）。利用浮点进行运算，称为浮点计算，这种运算通常伴随着因为无法精确表示而进行的近似或舍入。&lt;/p&gt;
    
    </summary>
    
      <category term="Program" scheme="http://ipcreator.me/categories/Program/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Floating point" scheme="http://ipcreator.me/tags/Floating-point/"/>
    
  </entry>
  
  <entry>
    <title>Concept of AI</title>
    <link href="http://ipcreator.me/2017/03/27/BusinessAI/concept-of-ai/"/>
    <id>http://ipcreator.me/2017/03/27/BusinessAI/concept-of-ai/</id>
    <published>2017-03-27T01:33:06.000Z</published>
    <updated>2017-03-27T09:36:48.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><p><img src="http://ong8f1obl.bkt.clouddn.com/ArtificialFictionBrain.png" alt=""></p>
<p>AI的核心问题包括推理、知识、规划、学习、交流、感知、移动和操作物体的能力等。强人工智能目前仍然是该领域的长远目标。目前比较流行的方法包括统计方法，计算智能和传统意义的AI。目前有大量的工具应用了人工智能，其中包括搜索和数学优化、逻辑推演。而基于仿生学、认知心理学，以及基于概率论和经济学的算法等等也在逐步探索当中。</p>
<a id="more"></a>
<h1 id="人工智能-1"><a href="#人工智能-1" class="headerlink" title="人工智能"></a>人工智能</h1><p>人工智能（英语：Artificial Intelligence, AI）亦称机器智能，是指由人工制造出来的系统所表现出来的智能。通常人工智能是指通过普通电脑实现的智能。该词同时也指研究这样的智能系统是否能够实现，以及如何实现的科学领域。</p>
<p>一般教材中的定义领域是“智能主体（intelligent agent）的研究与设计”[1]，智能主体是指一个可以观察周遭环境并作出行动以达致目标的系统。[2]约翰·麦卡锡于1955年的定义是[3]“制造智能机器的科学与工程。”[4]</p>
<p>人工智能的研究是高度技术性和专业的，各分支领域都是深入且各不相通的，因而涉及范围极广。[5]</p>
<p>人工智能的研究可以分为几个技术问题。其分支领域主要集中在解决具体问题，其中之一是，如何使用各种不同的工具完成特定的应用程序。AI的核心问题包括推理、知识、规划、学习、交流、感知、移动和操作物体的能力等。[6]强人工智能目前仍然是该领域的长远目标。[7]目前比较流行的方法包括统计方法，计算智能和传统意义的AI。目前有大量的工具应用了人工智能，其中包括搜索和数学优化、逻辑推演。而基于仿生学、认知心理学，以及基于概率论和经济学的算法等等也在逐步探索当中。</p>
<h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><p>人工智能的定义可以分为两部分，即“人工”和“智能”。“人工”比较好理解，争议性也不大。有时我们会要考虑什么是人力所能及制造的，或者人自身的智能程度有没有高到可以创造人工智能的地步，等等。但总的来说，“人工系统”就是通常意义下的人工系统。<br>关于什么是“智能”，就问题多多了。这涉及到其它诸如意识（consciousness）、自我（self）、心灵（mind），包括无意识的精神（unconscious mind）等等问题。人唯一了解的智能是人本身的智能，这是普遍认同的观点。但是我们对我们自身智能的理解都非常有限，对构成人的智能的必要元素也了解有限，所以就很难定义什么是“人工”制造的“智能”了。因此人工智能的研究往往涉及对人的智能本身的研究。其它关于动物或其它人造系统的智能也普遍被认为是人工智能相关的研究课题。<br>人工智能目前在计算机领域内，得到了愈加广泛的发挥。并在机器人、经济政治决策、控制系统、仿真系统中得到应用。</p>
<h2 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h2><p><div class="rellink noprint relarticle mainarticle">主条目：<a href="/wiki/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E5%8E%86%E5%8F%B2" class="mw-redirect" title="人工智能的历史">人工智能的历史</a></div></p>
<table class="wikitable"><br><tr><br><th>年代</th><br><th>20世纪40年代</th><br><th>20世纪50年代</th><br><th>20世纪60年代</th><br><th>20世纪70年代</th><br><th>20世纪80年代</th><br><th>20世纪90年代</th><br></tr><br><tr><br><th>计算机</th><br><td>1945 <a href="/wiki/%E8%A8%88%E7%AE%97%E6%A9%9F" class="mw-redirect" title="计算机">计算机</a>（<a href="/wiki/ENIAC" class="mw-redirect" title="ENIAC">ENIAC</a>）</td><br><td>1957 <a href="/wiki/FORTRAN%E8%AF%AD%E8%A8%80" class="mw-redirect" title="FORTRAN语言">FORTRAN语言</a></td><br><td></td><br><td></td><br><td></td><br><td></td><br></tr><br><tr><br><th>人工智能研究</th><br><td></td><br><td>1953 <a href="/wiki/%E5%8D%9A%E5%BC%88%E8%AB%96" class="mw-redirect" title="博弈论">博弈论</a><br><br>1956 <a href="/wiki/%E8%BE%BE%E7%89%B9%E7%9F%9B%E6%96%AF%E4%BC%9A%E8%AE%AE" title="达特矛斯会议">达特矛斯会议</a></td><br><td></td><br><td>1977 <span class="ilh-all" data-orig-title="知識工程" data-lang-code="en" data-lang-name="英语" data-foreign-title="Knowledge engineering"><span class="ilh-page"><a href="/w/index.php?title=%E7%9F%A5%E8%AD%98%E5%B7%A5%E7%A8%8B&amp;action=edit&amp;redlink=1" class="new" title="知识工程（页面不存在）">知识工程</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英语</span><span class="ilh-colon">：</span><span class="ilh-link"><a href="https://en.wikipedia.org/wiki/Knowledge_engineering" class="extiw" title="en:Knowledge engineering" target="_blank" rel="external"><span lang="en" dir="auto" xml:lang="en">Knowledge engineering</span></a></span>）</span></span>宣言</td><br><td>1982 <a href="/wiki/%E7%AC%AC%E4%BA%94%E4%BB%A3%E9%9B%BB%E8%85%A6" title="第五代电脑">第五代电脑</a>计划开始</td><br><td>1991 <a href="/wiki/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C" title="人工神经网络">人工神经网络</a></td><br></tr><br><tr><br><th>人工智能语言</th><br><td></td><br><td></td><br><td>1960 <a href="/wiki/LISP%E8%AF%AD%E8%A8%80" class="mw-redirect" title="LISP语言">LISP语言</a></td><br><td>1973 <a href="/wiki/PROLOG%E8%AF%AD%E8%A8%80" class="mw-redirect" title="PROLOG语言">PROLOG语言</a></td><br><td></td><br><td></td><br></tr><br><tr><br><th><a href="/wiki/%E7%9F%A5%E8%AF%86%E8%A1%A8%E8%BE%BE" class="mw-redirect" title="知识表达">知识表达</a></th><br><td></td><br><td></td><br><td></td><br><td>1973 <a href="/wiki/%E7%94%9F%E7%94%A2%E7%B3%BB%E7%B5%B1" title="生产系统">生产系统</a><br><br>1976 <a href="/wiki/%E6%A1%86%E6%9E%B6%E7%90%86%E8%AB%96" title="框架理论">框架理论</a></td><br><td></td><br><td></td><br></tr><br><tr><br><th><a href="/wiki/%E5%B0%88%E5%AE%B6%E7%B3%BB%E7%B5%B1" class="mw-redirect" title="专家系统">专家系统</a></th><br><td></td><br><td></td><br><td>1965 <span class="ilh-all" data-orig-title="DENDRAL" data-lang-code="en" data-lang-name="英语" data-foreign-title="Dendral"><span class="ilh-page"><a href="/w/index.php?title=DENDRAL&amp;action=edit&amp;redlink=1" class="new" title="DENDRAL（页面不存在）">DENDRAL</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英语</span><span class="ilh-colon">：</span><span class="ilh-link"><a href="https://en.wikipedia.org/wiki/Dendral" class="extiw" title="en:Dendral" target="_blank" rel="external"><span lang="en" dir="auto" xml:lang="en">Dendral</span></a></span>）</span></span></td><br><td>1975 <span class="ilh-all" data-orig-title="MYCIN" data-lang-code="en" data-lang-name="英语" data-foreign-title="Mycin"><span class="ilh-page"><a href="/w/index.php?title=MYCIN&amp;action=edit&amp;redlink=1" class="new" title="MYCIN（页面不存在）">MYCIN</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英语</span><span class="ilh-colon">：</span><span class="ilh-link"><a href="https://en.wikipedia.org/wiki/Mycin" class="extiw" title="en:Mycin" target="_blank" rel="external"><span lang="en" dir="auto" xml:lang="en">Mycin</span></a></span>）</span></span></td><br><td>1980 <a href="/wiki/Xcon" title="Xcon">Xcon</a></td><br><td></td><br></tr><br></table>

<h2 id="研究课题"><a href="#研究课题" class="headerlink" title="研究课题"></a>研究课题</h2><p>目前人工智能的研究方向已经被分成几个子领域，研究人员希望一个人工智能系统应该具有某些特定能力，以下将这些能力列出并说明。[6]</p>
<h3 id="演绎、推理和解决问题"><a href="#演绎、推理和解决问题" class="headerlink" title="演绎、推理和解决问题"></a>演绎、推理和解决问题</h3><p>早期的人工智能研究人员直接模仿人类进行逐步的推理，就像是玩棋盘游戏或进行逻辑推理时人类的思考模式。[8]到了1980和1990年代，利用概率和经济学上的概念，人工智能研究还发展了非常成功的方法处理不确定或不完整的资讯。[9]<br>对于困难的问题，有可能需要大量的运算资源，也就是发生了“可能组合爆增”：当问题超过一定的规模时，电脑会需要天文数量级的存储器或是运算时间。寻找更有效的算法是优先的人工智能研究项目。[10]<br>人类解决问题的模式通常是用最快捷、直观的判断，而不是有意识的、一步一步的推导，早期人工智能研究通常使用逐步推导的方式。[11]人工智能研究已经于这种“次表征性的”解决问题方法获取进展：实体化Agent研究强调感知运动的重要性。神经网络研究试图以模拟人类和动物的大脑结构重现这种技能。</p>
<h3 id="知识表示法"><a href="#知识表示法" class="headerlink" title="知识表示法"></a>知识表示法</h3><p>主条目：知识表示和常识知识库</p>
<h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><p>智能Agent必须能够制定目标和实现这些目标。[12]他们需要一种方法来创建一个可预测的世界模型（将整个世界状态用数学模型表现出来，并能预测它们的行为将如何改变这个世界），这样就可以选择功效最大的行为。[13] 在传统的规划问题中，智能Agent被假定它是世界中唯一具有影响力的，所以它要做出什么行为是已经确定的。[14]但是，如果事实并非如此，它必须定期检查世界模型的状态是否和自己的预测相匹配。如果不匹配，它必须改变它的计划。因此智能代理必须具有在不确定结果的状态下推理的能力。[15] 在多Agent中，多个Agent规划以合作和竞争的方式去完成一定的目标，使用演化算法和群体智能可以达成一个整体的突现行为目标。[16]</p>
<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>主条目：机器学习<br>机器学习的主要目的是为了从用户和输入数据等处获得知识，从而可以帮助解决更多问题、减少错误，提高解决问题的效率。对于人工智能来说，机器学习从一开始就很重要。1956年，在最初的达特茅斯夏季会议上，雷蒙德索洛莫诺夫[来源请求]写了一篇关于不监视的概率性机器学习：一个归纳推理的机器。</p>
<h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><p>主条目：自然语言处理</p>
<h3 id="运动和控制"><a href="#运动和控制" class="headerlink" title="运动和控制"></a>运动和控制</h3><p>主条目：机器人学</p>
<h3 id="知觉"><a href="#知觉" class="headerlink" title="知觉"></a>知觉</h3><p>主条目：机器感知，计算机视觉和语音识别<br>机器感知[17]是指能够使用感测器所输入的数据（如照相机、麦克风、声纳以及其他的特殊感测器）然后推断世界的状态。计算机视觉[18]能够分析视频输入。另外还有语音识别[19]、人脸辨识和物体辨识。[20]</p>
<h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><p>主条目：情感计算<br>情感和社交技能对于一个智能agent是很重要的。首先，通过了解他们的动机和情感状态，代理人能够预测别人的行动（这涉及要素 博弈论、决策理论以及能够塑造人的情感和情绪感知能力检测）。此外，为了良好的人机交互，智能代理人也需要表现出情绪来。至少它必须出现礼貌地和人类打交道。至少，它本身应该有正常的情绪。</p>
<h3 id="创造力"><a href="#创造力" class="headerlink" title="创造力"></a>创造力</h3><p>主条目：计算机创造力<br>一个人工智能的子领域，代表了理论（从哲学和心理学的角度）和实际（通过特定的实现产生的系统的输出是可以考虑的创意，或系统识别和评估创造力）所定义的创造力。相关领域研究的包括了人工直觉和人工想像。</p>
<h3 id="多元智能"><a href="#多元智能" class="headerlink" title="多元智能"></a>多元智能</h3><p>大多数研究人员希望他们的研究最终将被纳入一个具有多元智能（称为强人工智能），结合以上所有的技能并且超越大部分人类的能力。[7]有些人认为要达成以上目标，可能需要拟人化的特性，如人工意识或人工大脑。[22][23] 上述许多问题被认为是人工智能完整性：为了解决其中一个问题，你必须解决全部的问题。即使一个简单和特定的任务，如机器翻译，要求机器按照作者的论点（推理），知道什么是被人谈论（知识），忠实地再现作者的意图（情感计算）。因此，机器翻译被认为是具有人工智能完整性：它可能需要强人工智能，就像是人类一样。[24]</p>
<h3 id="伦理管理"><a href="#伦理管理" class="headerlink" title="伦理管理"></a>伦理管理</h3><p>史蒂芬·霍金、比尔盖茨、 Elon Musk 、 Jaan Tallinn 以及 Nick Bostrom 等人都对于人工智能技术的未来公开表示忧心[25]，人工智能若在许多方面超越人类智能水平的智能、不断更新、自我提升，进而获取控制管理权，人类是否有足够的能力及时停止人工智能领域的“军备竞赛”，能否保有最高掌控权，现有事实是：机器常失控导致人员伤亡，这样的情况是否会更加扩大规模出现，历史显然无法给出可靠的乐观答案。特斯拉电动车马斯克（Elon Musk）在麻省理工学院（MIT）航空航天部门百年纪念研讨会上称人工智能是“召唤恶魔”行为，英国发明家Clive Sinclair认为一旦开始制造抵抗人类和超越人类的智能机器，人类可能很难生存，盖茨同意马斯克和其它人所言，且不知道为何有些人不担忧这个问题。[26]<br>DeepMind的人工智能（AI）系统在2016年“AlphaGo”对战韩国棋王李世乭获胜，开发商表示在内部设立伦理委员会，针对人工智能的应用制定政策，防范人工智能沦为犯罪开发者。[27]<br>科技进步，人工智能科技产生“自主武器”军备竞赛已悄悄展开，英国、以色列与挪威，都已部署自主导弹与无人操控的无人机，具“射后不理”（fire-and-forget）能力的导弹，多枚导弹还可互相沟通，分享找到攻击目标。 霍金等人在英国独立报发表文章警告未来人工智能可能会比人类金融市场、科学家、人类领袖更能操纵人心、甚至研发出人们无法理解的武器。专家恐发展到无法控制的局面，援引联合国禁止研发某些特定武器的“特定常规武器公约”加以限制。[28]新南威尔士大学（New South Wales）人工智能的沃尔什（Toby Walsh）教授认为这是一种欺骗，因为机器无区别战敌和平民的技术。[29]</p>
<h3 id="经济冲击"><a href="#经济冲击" class="headerlink" title="经济冲击"></a>经济冲击</h3><p>据CNN财经网数字媒体未来学家兼Webbmedia集团创始人艾米·韦伯（Amy Webb）；美国在线[30]…等纷纷预测一些即将被机器人替换的职业，日本野村总合研究所也与英国牛津大学的研究学者共同调查指出，10至20年后，日本有49%的职业(235种职业)可能会被机械和人工智能替换而消失，直接影响约达2500万人，[31]例如：超市店员、一般事务员、计程车司机、收费站运营商和收银员、市场营销人员、客服人员、制造业工人、金融中间人和分析师、新闻记者、电话公司职员、麻醉师、士兵和保安、律师、医生、软件开发者和操盘手、股票交易员等等高薪酬的脑力职业将最先受到冲击[32]。</p>
<h2 id="强人工智能和弱人工智能"><a href="#强人工智能和弱人工智能" class="headerlink" title="强人工智能和弱人工智能"></a>强人工智能和弱人工智能</h2><p>人工智能的一个比较流行的定义，也是该领域较早的定义，是由当时麻省理工学院的约翰·麦卡锡在1956年的 达特矛斯会议上提出的：人工智能就是要让机器的行为看起来就像是人所表现出的智能行为一样。但是这个定义似乎忽略了强人工智能的可能性（见下）。另一个定义指人工智能是人造机器所表现出来的智能。总体来讲，目前对人工智能的定义大多可划分为四类，即机器“像人一样思考”、“像人一样行动”、“理性地思考”和“理性地行动”。这里“行动”应广义地理解为采取行动，或制定行动的决策，而不是肢体动作。</p>
<h3 id="强人工智能"><a href="#强人工智能" class="headerlink" title="强人工智能"></a>强人工智能</h3><p>主条目：强人工智能<br>强人工智能观点认为有可能制造出真正能推理（Reasoning）和解决问题（解决问题）的智能机器，并且，这样的机器能将被认为是有知觉的，有自我意识的。强人工智能可以有两类：<br>类人的人工智能，即机器的思考和推理就像人的思维一样。<br>非类人的人工智能，即机器产生了和人完全不一样的知觉和意识，使用和人完全不一样的推理方式。</p>
<h3 id="弱人工智能"><a href="#弱人工智能" class="headerlink" title="弱人工智能"></a>弱人工智能</h3><p>弱人工智能观点认为不可能制造出能真正地推理和解决问题的智能机器，这些机器只不过看起来像是智能的，但是并不真正拥有智能，也不会有自主意识。<br>强人工智能的研究目前处于停滞不前的状态下。人工智能研究者不一定同意弱人工智能，也不一定在乎或者了解强人工智能和弱人工智能的内容与差别。就现下的人工智能研究领域来看，研究者已大量造出看起来像是智能的机器，获取相当丰硕的理论上和实质上的成果，如2009年康乃尔大学教授Hod Lipson 和其博士研究生Michael Schmidt 研发出的 Eureqa计算机程序，只要给予一些数据，这计算机程序自己只用几十个小时计算就推论出牛顿花费多年研究才发现的牛顿力学公式，等于只用几十个小时就自己重新发现牛顿力学公式，这计算机程序也能用来研究很多其他领域的科学问题上。</p>
<h3 id="对强人工智能的哲学争论"><a href="#对强人工智能的哲学争论" class="headerlink" title="对强人工智能的哲学争论"></a>对强人工智能的哲学争论</h3><p>“强人工智能”一词最初是约翰·罗杰斯·希尔勒针对计算机和其它信息处理机器创造的，其定义为：<br>“强人工智能观点认为计算机不仅是用来研究人的思维的一种工具；相反，只要运行适当的程序，计算机本身就是有思维的。”（J Searle in Minds Brains and Programs. The Behavioral and Brain Sciences, vol. 3, 1980）<br>关于强人工智能的争论，不同于更广义的一元论和二元论的争论。其争论要点是：如果一台机器的唯一工作原理就是转换编码数据，那么这台机器是不是有思维的？希尔勒认为这是不可能的。他举了个中文房间的例子来说明，如果机器仅仅是转换数据，而数据本身是对某些事情的一种编码表现，那么在不理解这一编码和这实际事情之间的对应关系的前提下，机器不可能对其处理的数据有任何理解。基于这一论点，希尔勒认为即使有机器通过了图灵测试，也不一定说明机器就真的像人一样有思维和意识。<br>也有哲学家持不同的观点。丹尼尔·丹尼特在其著作《意识的解释》（Consciousness Explained）里认为，人也不过是一台有灵魂的机器而已，为什么我们认为：“人可以有智能，而普通机器就不能”呢？他认为像上述的数据转换机器是有可能有思维和意识的。<br>有的哲学家认为如果弱人工智能是可实现的，那么强人工智能也是可实现的。比如西蒙·布莱克本（Simon Blackburn）在其哲学入门教材Think里说道，一个人的看起来是“智能”的行动并不能真正说明这个人就真的是智能的。我永远不可能知道另一个人是否真的像我一样是智能的，还是说她／他仅仅是看起来是智能的。基于这个论点，既然弱人工智能认为可以令机器看起来像是智能的，那就不能完全否定这机器是真的有智能的。布莱克本认为这是一个主观认定的问题。<br>需要指出的是，弱人工智能并非和强人工智能完全对立，也就是说，即使强人工智能是可能的，弱人工智能仍然是有意义的。至少，今日的计算机能做的事，像算术运算等，在一百多年前是被认为很需要智能的。并且，即使强人工智能被证明为可能的，也不代表强人工智能必定能被研制出来。</p>
<h2 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h2><p>目前没有统一的原理或范式指导人工智能研究。许多问题上研究者都存在争论。[33]<br>其中几个长久以来仍没有结论的问题是：是否应从心理或神经方面模拟人工智能?或者像鸟类生物学对于航空工程一样，人类生物学对于人工智能研究是没有关系的？[34]智能行为能否用简单的原则（如逻辑或优化）来描述？还是必须解决大量完全无关的问题？[35]<br>智能是否可以使用高级符号表达，如词和想法？还是需要“子符号”的处理？[36] 约翰·豪格兰德（John Haugeland）提出了GOFAI（出色的老式人工智能）的概念，也提议人工智能应归类为synthetic intelligence，[37]这个概念后来被某些非GOFAI研究者采纳。[38][39]</p>
<h3 id="控制论与大脑模拟"><a href="#控制论与大脑模拟" class="headerlink" title="控制论与大脑模拟"></a>控制论与大脑模拟</h3><p>主条目：控制论和计算神经科学<br>20世纪40年代到50年代，许多研究者探索神经学、信息理论及控制论之间的联系。其中还造出一些使用电子网络构造的初步智能，如格雷·华特（W. Grey Walter）的乌龟（turtle）和约翰霍普金斯野兽（Johns Hopkins Beast）。<br>这些研究者还经常在普林斯顿大学和英国的Ratio Club举行技术协会会议。[40]直到1960，大部分人已经放弃这个方法，尽管在80年代再次提出这些原理。</p>
<h3 id="符号处理"><a href="#符号处理" class="headerlink" title="符号处理"></a>符号处理</h3><p>主条目：GOFAI<br>当20世纪50年代，数字计算机研制成功，研究者开始探索人类智能是否能简化成符号处理。研究主要集中在卡内基梅隆大学，斯坦福大学和麻省理工学院，而各自有独立的研究风格。约翰·豪格兰德（John Haugeland）称这些方法为GOFAI（出色的老式人工智能）[41]。60年代，符号方法在小型证明程序上模拟高级思考有很大的成就。基于控制论或神经网络的方法则置于次要[42]。60－70年代的研究者确信符号方法最终可以成功创造强人工智能的机器，同时这也是他们的目标。</p>
<h4 id="认知模拟"><a href="#认知模拟" class="headerlink" title="认知模拟"></a>认知模拟</h4><p>经济学家赫伯特·西蒙和艾伦·纽厄尔研究人类问题解决能力和尝试将其形式化，同时他们为人工智能的基本原理打下基础，如认知科学、运筹学和经营科学。他们的研究团队使用心理学实验的结果开发模拟人类解决问题方法的程序。这方法一直在卡内基梅隆大学沿袭下来，并在80年代于Soar发展到高峰[43][44]。</p>
<h4 id="基于逻辑"><a href="#基于逻辑" class="headerlink" title="基于逻辑"></a>基于逻辑</h4><p>不像艾伦·纽厄尔和赫伯特·西蒙，约翰·麦卡锡认为机器不需要模拟人类的思想，而应尝试找到抽象推理和解决问题的本质，不管人们是否使用同样的算法[34]。他在斯坦福大学的实验室致力于使用形式化逻辑解决多种问题，包括知识表示，智能规划和机器学习[45]。致力于逻辑方法的还有爱丁堡大学，而促成欧洲的其他地方开发编程语言Prolog和逻辑编程科学[46]。</p>
<p>####“反逻辑”<br>斯坦福大学的研究者 （如马文·闵斯基和西摩尔·派普特）[47]发现要解决计算机视觉和自然语言处理的困难问题，需要专门的方案：他们主张不存在简单和通用原理（如逻辑）能够达到所有的智能行为。罗杰·单克（Roger Schank）描述他们的“反逻辑”方法为“scruffy”[35]。常识知识库（如道格拉斯·莱纳特的Cyc）就是“scruffy”AI的例子，因为他们必须人工一次编写一个复杂的概念[48]。</p>
<h4 id="基于知识"><a href="#基于知识" class="headerlink" title="基于知识"></a>基于知识</h4><p>大约在1970年出现大容量内存计算机，研究者分别以三个方法开始把知识构造成应用软件[49]。这场“知识革命”促成专家系统的开发与计划，这是第一个成功的人工智能软件形式[50]。“知识革命”同时让人们意识到许多简单的人工智能软件可能需要大量的知识。</p>
<h3 id="子符号方法"><a href="#子符号方法" class="headerlink" title="子符号方法"></a>子符号方法</h3><p>1980年代符号人工智能停滞不前，很多人认为符号系统永远不可能模仿人类所有的认知过程，特别是感知、机器人、机器学习和模式识别。很多研究者开始关注子符号方法解决特定的人工智能问题[36]。</p>
<h4 id="自下而上、接口agent、嵌入环境（机器人）、行为主义、新式AI"><a href="#自下而上、接口agent、嵌入环境（机器人）、行为主义、新式AI" class="headerlink" title="自下而上、接口agent、嵌入环境（机器人）、行为主义、新式AI"></a>自下而上、接口agent、嵌入环境（机器人）、行为主义、新式AI</h4><p>机器人领域相关的研究者，如罗德尼·布鲁克斯（Rodney Brooks），否定符号人工智能而专注于机器人移动和求生等基本的工程问题。[51]他们的工作再次关注早期控制论研究者的观点，同时提出了在人工智能中使用控制理论。这与认知科学领域中的表征感知论点是一致的:更高的智能需要个体的表征（如移动，感知和形象）。</p>
<h4 id="计算智能"><a href="#计算智能" class="headerlink" title="计算智能"></a>计算智能</h4><p>1980年代中大卫·鲁姆哈特（David E. Rumelhart）等再次提出神经网络和联结主义[52]。这和其他的子符号方法，如模糊控制和进化计算，都属于计算智能学科研究范畴[53]。</p>
<h3 id="统计学方法"><a href="#统计学方法" class="headerlink" title="统计学方法"></a>统计学方法</h3><p>1990年代，人工智能研究发展出复杂的数学工具来解决特定的分支问题。这些工具是真正的科学方法，即这些方法的结果是可测量的和可验证的，同时也是近期人工智能成功的原因。共用的数学语言也允许已有学科的合作（如数学，经济或运筹学）。Stuart J. Russell和Peter Norvig指出这些进步不亚于“革命”和“neats的成功”[54]。有人批评这些技术太专注于特定的问题，而没有考虑长远的强人工智能目标[55]。</p>
<h3 id="集成方法"><a href="#集成方法" class="headerlink" title="集成方法"></a>集成方法</h3><h4 id="智能agent范式"><a href="#智能agent范式" class="headerlink" title="智能agent范式"></a>智能agent范式</h4><p>智能agent是一个会感知环境并作出行动以达致目标的系统。最简单的智能agent是那些可以解决特定问题的程序。更复杂的agent包括人类和人类组织（如公司）。这些范式可以让研究者研究单独的问题和找出有用且可验证的方案，而不需考虑单一的方法。一个解决特定问题的agent可以使用任何可行的方法-一些agent用符号方法和逻辑方法，一些则是子符号神经网络或其他新的方法。范式同时也给研究者提供一个与其他领域沟通的共同语言–如决策论和经济学（也使用abstract agents的概念）。1990年代智能agent范式被广泛接受。[2]</p>
<h4 id="agent体系结构和认知体系结构"><a href="#agent体系结构和认知体系结构" class="headerlink" title="agent体系结构和认知体系结构"></a>agent体系结构和认知体系结构</h4><p>研究者设计出一些系统来处理多agent系统中智能agent之间的相互作用。[56]一个系统中包含符号和子符号部分的系统称为混合智能系统，而对这种系统的研究则是人工智能系统集成。分级控制系统则给反应级别的子符号AI和最高级别的传统符号AI提供桥梁，同时放宽了规划和世界建模的时间。</p>
<h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>机器视觉、指纹识别、人脸识别、视网膜识别、虹膜识别、掌纹识别、专家系统、自动规划等。</p>
<h2 id="学科范畴"><a href="#学科范畴" class="headerlink" title="学科范畴"></a>学科范畴</h2><p>人工智能是一门边缘学科，属于自然科学和社会科学的交叉。</p>
<h3 id="涉及学科"><a href="#涉及学科" class="headerlink" title="涉及学科"></a>涉及学科</h3><p>物理学<br>哲学和认知科学<br>逻辑学<br>数学<br>心理学<br>计算机科学<br>控制论<br>决定论<br>不确定性原理<br>社会学<br>犯罪学<br>智能犯罪</p>
<h3 id="研究范畴"><a href="#研究范畴" class="headerlink" title="研究范畴"></a>研究范畴</h3><p>自然语言处理（NLP; Natural Language Processing）<br>知识表现（Knowledge Representation）<br>智能搜索（Intelligent Search）<br>推理<br>规划（Planning）<br>机器学习（Machine Learning）<br>增强式学习（Reinforcement Learning）<br>知识获取<br>感知问题<br>模式识别<br>逻辑程序设计<br>软计算（Soft Computing）<br>不精确和不确定的管理<br>人工生命（Artificial Life）<br>人工神经网络（Artificial Neural Network）<br>复杂系统<br>遗传算法<br>数据挖掘（Data Mining）<br>模糊控制</p>
<h2 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h2><p>智能控制<br>机器人学<br>自动化技术<br>语言和图像理解<br>遗传编程<br>法学信息系统</p>
<h2 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h2><p>人工生命<br>认知神经科学<br>电脑围棋<br>伪春菜<br>艾伦·图灵<br>恐怖谷理论<br>电子世界争霸战<br>计算机科学<br>计算机科学课程列表<br>认知科学<br>意识<br>希尔勒的中文房间<br>语义学<br>技术奇异点<br>集体智能<br>控制论<br>心理学<br>国际人工智能联合会议<br>OWL<br>游戏树<br>量子计算机<br>生物化学计算机-例：人脑</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD" target="_blank" rel="external">人工智能</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;人工智能&quot;&gt;&lt;a href=&quot;#人工智能&quot; class=&quot;headerlink&quot; title=&quot;人工智能&quot;&gt;&lt;/a&gt;人工智能&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/ArtificialFictionBrain.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;AI的核心问题包括推理、知识、规划、学习、交流、感知、移动和操作物体的能力等。强人工智能目前仍然是该领域的长远目标。目前比较流行的方法包括统计方法，计算智能和传统意义的AI。目前有大量的工具应用了人工智能，其中包括搜索和数学优化、逻辑推演。而基于仿生学、认知心理学，以及基于概率论和经济学的算法等等也在逐步探索当中。&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
  </entry>
  
  <entry>
    <title>History of AI</title>
    <link href="http://ipcreator.me/2017/03/27/BusinessAI/history-of-ai/"/>
    <id>http://ipcreator.me/2017/03/27/BusinessAI/history-of-ai/</id>
    <published>2017-03-27T01:13:06.000Z</published>
    <updated>2017-03-27T08:12:35.726Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/225px-Gottfried_Wilhelm_von_Leibniz.jpg" alt=""></p>
<a id="more"></a>
<h1 id="人工智能史"><a href="#人工智能史" class="headerlink" title="人工智能史"></a>人工智能史</h1><p>人工智能的历史源远流长。在古代的神话传说中，技艺高超的工匠可以制作人造人，并为其赋予智能或意识。[1]现代意义上的AI始于古典哲学家用机械符号处理的观点解释人类思考过程的尝试。20世纪40年代基于抽象数学推理的可编程数字计算机的发明使一批科学家开始严肃地探讨构造一个电子大脑的可能性。</p>
<p>1956年，在达特茅斯学院举行的一次会议上正式确立了人工智能的研究领域。会议的参加者在接下来的数十年间是AI研究的领军人物。他们中有许多人预言，经过一代人的努力，与人类具有同等智能水平的机器将会出现。同时，上千万美元被投入到AI研究中，以期实现这一目标。</p>
<p>研究人员发现自己大大低估了这一工程的难度，人工智能史上共出现过好几次低潮。由于James Lighthill爵士的批评和国会方面的压力，美国和英国政府于1973年停止向没有明确目标的人工智能研究项目拨款。七年之后受到日本政府研究规划的刺激，美国政府和企业再次在AI领域投入数十亿研究经费，但这些投资者在80年代末重新撤回了投资。AI研究领域诸如此类的高潮和低谷不断交替出现；至今仍有人对AI的前景作出异常乐观的预测。[2]</p>
<p>尽管在政府官僚和风投资本家那里经历了大起大落，AI领域仍在取得进展。某些在20世纪70年代被认为不可能解决的问题今天已经获得了圆满解决并已成功应用在商业产品上。与第一代AI研究人员的乐观估计不同，具有与人类同等智能水平的机器至今仍未出现。图灵在1950年发表的一篇催生现代智能机器研究的著名论文中称，“我们只能看到眼前的一小段距离……但是，我们可以看到仍有许多工作要做”。[3]</p>
<h2 id="先驱"><a href="#先驱" class="headerlink" title="先驱"></a>先驱</h2><p>McCorduck写道[1]：“某种形式上的人工智能是一个遍布于西方知识分子历史的观点，是一个急需被实现的梦想，”先民对人工智能的追求表现在诸多神话，传说，故事，预言以及制作机器人偶（automaton）的实践之中。[4]</p>
<h3 id="神话，幻想和预言中的AI"><a href="#神话，幻想和预言中的AI" class="headerlink" title="神话，幻想和预言中的AI"></a>神话，幻想和预言中的AI</h3><p>希腊神话中已经出现了机械人和人造人,如赫淮斯托斯的黄金机器人和皮格马利翁的伽拉忒亚。[5]中世纪出现了使用巫术或炼金术将意识赋予无生命物质的传说,如贾比尔的Takwin,帕拉塞尔苏斯的何蒙库鲁兹和Judah Loew的魔像。[6]19世纪的幻想小说中出现了人造人和会思考的机器之类题材，例如玛丽·雪莱的《弗兰肯斯坦》和卡雷尔·恰佩克的《罗素姆的万能机器人》。[7]Samuel Butler的《机器中的达尔文（Darwin among the Machines）》一文（1863）探讨了机器通过自然选择进化出智能的可能性。[8]至今人工智能仍然是科幻小说的重要元素。</p>
<h3 id="自动人偶"><a href="#自动人偶" class="headerlink" title="自动人偶"></a>自动人偶</h3><p>许多文明中都有创造自动人偶的杰出工匠，例如偃师（中国西周）[9]，希罗（希腊）[10]，加扎利[11]和Wolfgang von Kempelen[12] 等等。已知最古老的“机器人”是古埃及和古希腊的圣像，忠实的信徒认为工匠为这些神像赋予了思想，使它们具有智慧和激情。赫耳墨斯·特里斯墨吉斯忒斯（Hermes Trismegistus）写道“当发现神的本性时，人就能够重现他”[13][14]</p>
<h3 id="形式推理"><a href="#形式推理" class="headerlink" title="形式推理"></a>形式推理</h3><p>人工智能的基本假设是人类的思考过程可以机械化。对于机械化推理（即所谓“形式推理（formal reasoning）”）的研究已有很长历史。中国，印度和希腊哲学家均已在公元前的第一个千年里提出了形式推理的结构化方法。他们的想法为后世的哲学家所继承和发展，其中著名的有亚里士多德（对三段论逻辑进行了形式分析），欧几里得（其著作《几何原本》是形式推理的典范），花剌子密（代数学的先驱，“algorithm”一词由他的名字演变而来）以及一些欧洲经院哲学家，如奥卡姆的威廉和邓斯·司各脱。[15]<br>马略卡哲学家拉蒙·柳利（1232-1315）开发了一些“逻辑机”，试图通过逻辑方法获取知识。[16] 柳利的机器能够将基本的，无可否认的真理通过机械手段用简单的逻辑操作进行组合，以求生成所有可能的知识。[17]Llull的工作对莱布尼兹产生了很大影响，后者进一步发展了他的思想。[18]<br>在17世纪中，莱布尼兹，托马斯·霍布斯和笛卡儿尝试将理性的思考系统化为代数学或几何学那样的体系。[19]霍布斯在其著作《利维坦》中有一句名言：“推理就是计算（reason is nothing but reckoning）。” [20]莱布尼兹设想了一种用于推理的普适语言（他的通用表意文字），能将推理规约为计算，从而使“哲学家之间，就像会计师之间一样，不再需要争辩。他们只需拿出铅笔放在石板上，然后向对方说（如果想要的话，可以请一位朋友作为证人）：‘我们开始算吧。’”[21] 这些哲学家已经开始明确提出形式符号系统的假设，而这一假设将成为AI研究的指导思想。<br>在20世纪，数理逻辑研究上的突破使得人工智能好像呼之欲出。这方面的基础著作包括布尔的《思维的定律》与弗雷格的《概念文字》。基于弗雷格的系统，罗素和怀特海在他们于1913年出版的巨著《数学原理》中对数学的基础给出了形式化描述。这一成就激励了希尔伯特，后者向20世纪20年代和30年代的数学家提出了一个基础性的难题：“能否将所有的数学推理形式化?” [15]这个问题的最终回答由哥德尔不完备定理，图灵机和Alonzo Church的λ演算给出。[15][22]他们的答案令人震惊：首先，他们证明了数理逻辑的局限性；其次（这一点对AI更重要），他们的工作隐含了任何形式的数学推理都能在这些限制之下机械化的可能性。<br>邱奇-图灵论题暗示，一台仅能处理0和1这样简单二元符号的机械设备能够模拟任意数学推理过程。这里最关键的灵感是图灵机：这一看似简单的理论构造抓住了抽象符号处理的本质。这一创造激发科学家们探讨让机器思考的可能。[15][23]</p>
<h3 id="计算机科学"><a href="#计算机科学" class="headerlink" title="计算机科学"></a>计算机科学</h3><p>主条目：计算机硬件历史<br>用于计算的机器古已有之；历史上许多数学家对其作出了改进。19世纪初，查尔斯·巴贝奇设计了一台可编程计算机（“分析机”），但未能建造出来。爱达·勒芙蕾丝预言，这台机器“将创作出无限复杂，无限宽广的精妙的科学乐章”。[24]（她常被认为是第一个程序员，因为她留下的一些笔记完整地描述了使用这一机器计算伯努利数的方法。）<br>第一批现代计算机是二战期间建造的大型译码机（包括Z3，ENIAC和Colossus等）。[25]后两个机器的理论基础是图灵和约翰·冯·诺伊曼提出和发展的学说。[26]</p>
<h2 id="人工智能的诞生：1943-1956"><a href="#人工智能的诞生：1943-1956" class="headerlink" title="人工智能的诞生：1943 - 1956"></a>人工智能的诞生：1943 - 1956</h2><p>[27]在20世纪40年代和50年代，来自不同领域（数学，心理学，工程学，经济学和政治学）的一批科学家开始探讨制造人工大脑的可能性。1956年，人工智能被确立为一门学科。</p>
<h3 id="控制论与早期神经网络"><a href="#控制论与早期神经网络" class="headerlink" title="控制论与早期神经网络"></a>控制论与早期神经网络</h3><p>最初的人工智能研究是30年代末到50年代初的一系列科学进展交汇的产物。神经学研究发现大脑是由神经元组成的电子网络，其激励电平只存在“有”和“无”两种状态，不存在中间状态。维纳的控制论描述了电子网络的控制和稳定性。克劳德·香农提出的信息论则描述了数字信号（即高低电平代表的二进制信号）。图灵的计算理论证明数字信号足以描述任何形式的计算。这些密切相关的想法暗示了构建电子大脑的可能性。[28]<br>这一阶段的工作包括一些机器人的研发，例如W。Grey Walter的“乌龟（turtles）”，还有“约翰霍普金斯兽”（Johns Hopkins Beast）。这些机器并未使用计算机，数字电路和符号推理；控制它们的是纯粹的模拟电路。[29]<br>Walter Pitts和Warren McCulloch分析了理想化的人工神经元网络，并且指出了它们进行简单逻辑运算的机制。他们是最早描述所谓“神经网络”的学者。[30]马文·闵斯基是他们的学生，当时是一名24岁的研究生。1951年他与Dean Edmonds一道建造了第一台神经网络机，称为SNARC。在接下来的五十年中，闵斯基是AI领域最重要的领导者和创新者之一。</p>
<h3 id="游戏AI"><a href="#游戏AI" class="headerlink" title="游戏AI"></a>游戏AI</h3><p>1951年，Christopher Strachey使用曼彻斯特大学的Ferranti Mark 1机器写出了一个西洋跳棋（checkers）程序；Dietrich Prinz则写出了一个国际象棋程序。[31]Arthur Samuel在五十年代中期和六十年代初开发的国际象棋程序的棋力已经可以挑战具有相当水平的业余爱好者。[32]游戏AI一直被认为是评价AI进展的一种标准。</p>
<h3 id="图灵测试"><a href="#图灵测试" class="headerlink" title="图灵测试"></a>图灵测试</h3><p>1950年，图灵发表了一篇划时代的论文，文中预言了创造出具有真正智能的机器的可能性。[33]由于注意到“智能”这一概念难以确切定义，他提出了著名的图灵测试：如果一台机器能够与人类展开对话（通过电传设备）而不能被辨别出其机器身份，那么称这台机器具有智能。这一简化使得图灵能够令人信服地说明“思考的机器”是可能的。论文中还回答了对这一假说的各种常见质疑。[34]图灵测试是人工智能哲学方面第一个严肃的提案。</p>
<h3 id="符号推理与“逻辑理论家”程序"><a href="#符号推理与“逻辑理论家”程序" class="headerlink" title="符号推理与“逻辑理论家”程序"></a>符号推理与“逻辑理论家”程序</h3><p>50年代中期，随着数字计算机的兴起，一些科学家直觉地感到可以进行数字操作的机器也应当可以进行符号操作，而符号操作可能是人类思维的本质。这是创造智能机器的一条新路。[35]<br>1955年，Newell和（后来荣获诺贝尔奖的）Simon在J. C. Shaw的协助下开发了“逻辑理论家（Logic Theorist）”。这个程序能够证明《数学原理》中前52个定理中的38个，其中某些证明比原著更加新颖和精巧。[36]Simon认为他们已经“解决了神秘的心/身问题，解释了物质构成的系统如何获得心灵的性质。”[37] （这一断言的哲学立场后来被John Searle称为“强人工智能”，即机器可以像人一样具有思想。）[38]</p>
<h3 id="1956年达特茅斯会议：AI的诞生"><a href="#1956年达特茅斯会议：AI的诞生" class="headerlink" title="1956年达特茅斯会议：AI的诞生"></a>1956年达特茅斯会议：AI的诞生</h3><p>主条目：达特矛斯会议<br>1956年达特矛斯会议[39]的组织者是马文·闵斯基，约翰·麦卡锡和另两位资深科学家Claude Shannon以及Nathan Rochester，后者来自IBM。会议提出的断言之一是“学习或者智能的任何其他特性的每一个方面都应能被精确地加以描述，使得机器可以对其进行模拟。” [40]与会者包括Ray Solomonoff，Oliver Selfridge，Trenchard More，Arthur Samuel，Newell和Simon，他们中的每一位都将在AI研究的第一个十年中作出重要贡献。[41]会上纽厄尔和西蒙讨论了“逻辑理论家”，而麦卡锡则说服与会者接受“人工智能”一词作为本领域的名称。[42]1956年达特矛斯会议上AI的名称和任务得以确定，同时出现了最初的成就和最早的一批研究者，因此这一事件被广泛承认为AI诞生的标志。[43]</p>
<h2 id="黄金年代：1956-1974"><a href="#黄金年代：1956-1974" class="headerlink" title="黄金年代：1956 - 1974"></a>黄金年代：1956 - 1974</h2><p>达特茅斯会议之后的数年是大发现的时代。对许多人而言，这一阶段开发出的程序堪称神奇：[44]计算机可以解决代数应用题，证明几何定理，学习和使用英语。当时大多数人几乎无法相信机器能够如此“智能”。[45] 研究者们在私下的交流和公开发表的论文中表达出相当乐观的情绪，认为具有完全智能的机器将在二十年内出现。[46] ARPA（国防高等研究计划署）等政府机构向这一新兴领域投入了大笔资金。[47]</p>
<h3 id="研究工作"><a href="#研究工作" class="headerlink" title="研究工作"></a>研究工作</h3><p>从50年代后期到60年代涌现了大批成功的AI程序和新的研究方向。下面列举其中最具影响的几个。</p>
<h4 id="搜索式推理"><a href="#搜索式推理" class="headerlink" title="搜索式推理"></a>搜索式推理</h4><p>许多AI程序使用相同的基本算法。为实现一个目标（例如赢得游戏或证明定理），它们一步步地前进，就像在迷宫中寻找出路一般；如果遇到了死胡同则进行回溯。这就是“搜索式推理”。[48]<br>这一思想遇到的主要困难是，在很多问题中，“迷宫”里可能的线路总数是一个天文数字（所谓“指数爆炸”）。研究者使用启发式算法去掉那些不太可能导出正确答案的支路，从而缩小搜索范围。[49]<br>Newell和Simon试图通过其“通用解题器（General Problem Solver）”程序，将这一算法推广到一般情形。[50]另一些基于搜索算法证明几何与代数问题的程序也给人们留下了深刻印象，例如Herbert Gelernter的几何定理证明机（1958）和Minsky的学生James Slagle开发的SAINT（1961）。[51]还有一些程序通过搜索目标和子目标作出决策，如斯坦福大学为控制机器人Shakey而开发的STRIPS系统。[52]</p>
<h4 id="自然语言"><a href="#自然语言" class="headerlink" title="自然语言"></a>自然语言</h4><p>AI研究的一个重要目标是使计算机能够通过自然语言（例如英语）进行交流。早期的一个成功范例是Daniel Bobrow的程序STUDENT，它能够解决高中程度的代数应用题。[53]<br>如果用节点表示语义概念（例如“房子”，“门”），用节点间的连线表示语义关系（例如“有 – 一个”），就可以构造出“语义网（semantic net）”。第一个使用语义网的AI程序由Ross Quillian开发；[54] 而最为成功（也是最有争议）的一个则是Roger Schank的“概念关联（Conceptual Dependency）”。[55]<br>Joseph Weizenbaum的ELIZA是第一个聊天机器人，可能也是最有趣的会说英语的程序。与ELIZA“聊天”的用户有时会误以为自己是在和人类，而不是和一个程序，交谈。但是实际上ELIZA根本不知道自己在说什么。它只是按固定套路作答，或者用符合语法的方式将问题复述一遍。[56]</p>
<h4 id="微世界"><a href="#微世界" class="headerlink" title="微世界"></a>微世界</h4><p>60年代后期，麻省理工大学AI实验室的马文·闵斯基和Seymour Papert建议AI研究者们专注于被称为“微世界”的简单场景。他们指出在成熟的学科中往往使用简化模型帮助基本原则的理解，例如物理学中的光滑平面和完美刚体。许多这类研究的场景是“积木世界”，其中包括一个平面，上面摆放着一些不同形状，尺寸和颜色的积木。[57]<br>在这一指导思想下，Gerald Sussman（研究组长），Adolfo Guzman，David Waltz（“约束传播（constraint propagation）”的提出者），特别是Patrick Winston等人在机器视觉领域作出了创造性贡献。同时，Minsky和Papert制作了一个会搭积木的机器臂，从而将“积木世界”变为现实。微世界程序的最高成就是Terry Winograd的SHRDLU，它能用普通的英语句子与人交流，还能作出决策并执行操作。[58]</p>
<h3 id="乐观思潮"><a href="#乐观思潮" class="headerlink" title="乐观思潮"></a>乐观思潮</h3><p>第一代AI研究者们曾作出了如下预言:<br>1958年，H. A. Simon，Allen Newell：“十年之内，数字计算机将成为国际象棋世界冠军。” “十年之内，数字计算机将发现并证明一个重要的数学定理。”[59]<br>1965年，H. A. Simon：“二十年内，机器将能完成人能做到的一切工作。”[60]<br>1967年，Marvin Minsky：“一代之内……创造‘人工智能’的问题将获得实质上的解决。”[61]<br>1970年，Marvin Minsky：“在三到八年的时间里我们将得到一台具有人类平均智能的机器。”[62]</p>
<h3 id="经费"><a href="#经费" class="headerlink" title="经费"></a>经费</h3><p>1963年6月，MIT从新建立的ARPA（即后来的DARPA，国防高等研究计划局）获得了二百二十万美元经费，用于资助MAC工程，其中包括Minsky和McCarthy五年前建立的AI研究组。此后ARPA每年提供三百万美元，直到七十年代为止。[63]ARPA还对Newell和Simon在卡内基梅隆大学的工作组以及斯坦福大学AI项目（由John McCarthy于1963年创建）进行类似的资助。[64]另一个重要的AI实验室于1965年由Donald Michie在爱丁堡大学建立。[65]在接下来的许多年间，这四个研究机构一直是AI学术界的研究（和经费）中心。[66]<br>经费几乎是无条件地提供的：时任ARPA主任的J. C. R. Licklider相信他的组织应该“资助人，而不是项目”，并且允许研究者去做任何感兴趣的方向。[67]这导致了MIT无约无束的研究氛围及其hacker文化的形成，[68]但是好景不长。</p>
<h2 id="第一次AI低谷：1974-1980"><a href="#第一次AI低谷：1974-1980" class="headerlink" title="第一次AI低谷：1974 - 1980"></a>第一次AI低谷：1974 - 1980</h2><p>到了70年代，AI开始遭遇批评，随之而来的还有资金上的困难。AI研究者们对其课题的难度未能作出正确判断：此前的过于乐观使人们期望过高，当承诺无法兑现时，对AI的资助就缩减或取消了。[69]同时，由于马文·闵斯基对感知器的激烈批评，联结主义（即神经网络）销声匿迹了十年。[70]70年代后期，尽管遭遇了公众的误解，AI在逻辑编程，常识推理等一些领域还是有所进展。[71]</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>70年代初，AI遭遇了瓶颈。即使是最杰出的AI程序也只能解决它们尝试解决的问题中最简单的一部分，也就是说所有的AI程序都只是“玩具”。[72]AI研究者们遭遇了无法克服的基础性障碍。尽管某些局限后来被成功突破，但许多至今仍无法满意地解决。[73]<br>计算机的运算能力。当时的计算机有限的内存和处理速度不足以解决任何实际的AI问题。例如，Ross Quillian在自然语言方面的研究结果只能用一个含二十个单词的词汇表进行演示，因为内存只能容纳这么多。[74]1976年Hans Moravec指出，计算机离智能的要求还差上百万倍。他做了个类比：人工智能需要强大的计算能力，就像飞机需要大功率动力一样，低于一个门限时是无法实现的；但是随着能力的提升，问题逐渐会变得简单。[75]<br>计算复杂性和指数爆炸。1972年Richard Karp根据Stephen Cook于1971年提出的Cook-Levin理论证明，许多问题只可能在指数时间内获解（即，计算时间与输入规模的幂成正比）。除了那些最简单的情况，这些问题的解决需要近乎无限长的时间。这就意味着AI中的许多玩具程序恐怕永远也不会发展为实用的系统。[76]<br>常识与推理。许多重要的AI应用，例如机器视觉和自然语言，都需要大量对世界的认识信息。程序应该知道它在看什么，或者在说些什么。这要求程序对这个世界具有儿童水平的认识。研究者们很快发现这个要求太高了：1970年没人能够做出如此巨大的数据库，也没人知道一个程序怎样才能学到如此丰富的信息。[77]<br>莫拉维克悖论。证明定理和解决几何问题对计算机而言相对容易，而一些看似简单的任务，如人脸识别或穿过屋子，实现起来却极端困难。这也是70年代中期机器视觉和机器人方面进展缓慢的原因。[78]<br>框架和资格问题。采取逻辑观点的AI研究者们（例如John McCarthy）发现，如果不对逻辑的结构进行调整，他们就无法对常见的涉及自动规划（planning or default reasoning）的推理进行表达。为解决这一问题，他们发展了新逻辑学（如非单调逻辑（non-monotonic logics）和模态逻辑（modal logics））。[79]</p>
<h3 id="停止拨款"><a href="#停止拨款" class="headerlink" title="停止拨款"></a>停止拨款</h3><p>由于缺乏进展，对AI提供资助的机构（如英国政府，DARPA和NRC）对无方向的AI研究逐渐停止了资助。早在1966年ALPAC（Automatic Language Processing Advisory Committee，自动语言处理顾问委员会）的报告中就有批评机器翻译进展的意味，预示了这一局面的来临。NRC（National Research Council，美国国家科学委员会）在拨款二千万美元后停止资助。[80]1973年Lighthill针对英国AI研究状况的报告批评了AI在实现其“宏伟目标”上的完全失败，并导致了英国AI研究的低潮[81]（该报告特别提到了指数爆炸问题，以此作为AI失败的一个原因）。[82]DARPA则对CMU的语音理解研究项目深感失望，从而取消了每年三百万美元的资助。[83]到了1974年已经很难再找到对AI项目的资助。<br>Hans Moravec将批评归咎于他的同行们不切实际的预言：“许多研究者落进了一张日益浮夸的网中”。[84]还有一点，自从1969年Mansfield修正案通过后，DARPA被迫只资助“具有明确任务方向的研究，而不是无方向的基础研究”。60年代那种对自由探索的资助一去不复返；此后资金只提供给目标明确的特定项目，比如自动坦克，或者战役管理系统。[85]</p>
<h3 id="来自大学的批评"><a href="#来自大学的批评" class="headerlink" title="来自大学的批评"></a>来自大学的批评</h3><p>一些哲学家强烈反对AI研究者的主张。其中最早的一个是John Lucas，他认为哥德尔不完备定理已经证明形式系统（例如计算机程序）不可能判断某些陈述的真理性，但是人类可以。[86]Hubert Dreyfus讽刺六十年代AI界那些未实现的预言，并且批评AI的基础假设，认为人类推理实际上仅涉及少量“符号处理”，而大多是具体的，直觉的，下意识的“窍门（know how）”。[87][88] John Searle于1980年提出“中文房间”实验，试图证明程序并不“理解”它所使用的符号，即所谓的“意向性（intentionality）”问题。Searle认为，如果符号对于机器而言没有意义，那么就不能认为机器是在“思考”。[89]<br>AI研究者们并不太把这些批评当回事，因为它们似乎有些离题，而计算复杂性和“让程序具有常识”等问题则显得更加紧迫和严重。对于实际的计算机程序而言，“常识”和“意向性”的区别并不明显。Minsky提到Dreyfus和Searle时说，“他们误解了，所以应该忽略”。[90]在MIT任教的Dreyfus遭到了AI阵营的冷遇：他后来说，AI研究者们“生怕被人看到在和我一起吃中饭”。[91] ELIZA程序的作者Joseph Weizenbaum感到他的同事们对待Dreyfus的态度不太专业，而且有些孩子气。虽然他直言不讳地反对Dreyfus的论点，但他“清楚地表明了他们待人的方式不对”。[92]<br>Weizenbaum后来开始思考AI相关的伦理问题，起因是Kenneth Colby开发了一个模仿医师的聊天机器人DOCTOR，并用它当作真正的医疗工具。二人发生争执；虽然Colby认为Weizenbaum对他的程序没有贡献，但这于事无补。1976年Weizenbaum出版著作《计算机的力量与人类的推理》，书中表示人工智能的滥用可能损害人类生命的价值。[93]</p>
<h3 id="感知器与联结主义遭到冷落"><a href="#感知器与联结主义遭到冷落" class="headerlink" title="感知器与联结主义遭到冷落"></a>感知器与联结主义遭到冷落</h3><p>感知器是神经网络的一种形式，由Frank Rosenblatt于1958年提出。与多数AI研究者一样，他对这一发明的潜力非常乐观，预言说“感知器最终将能够学习，作出决策和翻译语言”。整个六十年代里这一方向的研究工作都很活跃。<br>1969年Minsky和Papert出版了著作《感知器》，书中暗示感知器具有严重局限，而Frank Rosenblatt的预言过于夸张。这本书的影响是破坏性的：联结主义的研究因此停滞了十年。后来新一代研究者使这一领域获得重生，并使其成为人工智能中的重要部分；遗憾的是Rosenblatt没能看到这些，他在《感知器》问世后不久即因游船事故去世。[70]</p>
<h3 id="“简约派（the-neats）”：逻辑，Prolog语言和专家系统"><a href="#“简约派（the-neats）”：逻辑，Prolog语言和专家系统" class="headerlink" title="“简约派（the neats）”：逻辑，Prolog语言和专家系统"></a>“简约派（the neats）”：逻辑，Prolog语言和专家系统</h3><p>早在1958年，John McCarthy就提出了名为“纳谏者（Advice Taker）”的一个程序构想，将逻辑学引入了AI研究界。[94]1963年，J. Alan Robinson发现了在计算机上实现推理的简单方法：归结（resolution）与合一（unification）算法。然而，根据60年代末McCarthy和他的学生们的工作，对这一想法的直接实现具有极高的计算复杂度：即使是证明很简单的定理也需要天文数字的步骤。[95]70年代Robert Kowalsky在Edinburgh大学的工作则更具成效：法国学者Alain Colmerauer和Phillipe Roussel在他的合作下开发出成功的逻辑编程语言Prolog。[96]<br>Dreyfus等人针对逻辑方法的批评观点认为，人类在解决问题时并没有使用逻辑运算。心理学家Peter Wason，Eleanor Rosch，阿摩司·特沃斯基，Daniel Kahneman等人的实验证明了这一点。[97]McCarthy则回应说，人类怎么思考是无关紧要的：真正想要的是解题机器，而不是模仿人类进行思考的机器。[98]</p>
<h3 id="“芜杂派（the-scruffies）”：框架和脚本"><a href="#“芜杂派（the-scruffies）”：框架和脚本" class="headerlink" title="“芜杂派（the scruffies）”：框架和脚本"></a>“芜杂派（the scruffies）”：框架和脚本</h3><p>对McCarthy的做法持批评意见的还有他在MIT的同行们。马文·闵斯基，Seymour Papert和Roger Schank等试图让机器像人一样思考，使之能够解决“理解故事”和“目标识别”一类问题。为了使用“椅子”，“饭店”之类最基本的概念，他们需要让机器像人一样作出一些非逻辑的假设。不幸的是，这些不精确的概念难以用逻辑进行表达。Gerald Sussman注意到，“使用精确的语言描述本质上不精确的概念，并不能使它们变得精确起来”。[99]Schank用“芜杂（scruffy）”一词描述他们这一“反逻辑”的方法，与McCarthy，Kowalski，Feigenbaum，Newell和Simon等人的“简约（neat）”方案相对。[100]<br>在1975年的一篇开创性论文中，Minsky注意到与他共事的“芜杂派”研究者在使用同一类型的工具，即用一个框架囊括所有相关的常识性假设。例如，当我们使用“鸟”这一概念时，脑中会立即浮现出一系列相关事实，如会飞，吃虫子，等等。我们知道这些假设并不一定正确，使用这些事实的推理也未必符合逻辑，但是这一系列假设组成的结构正是我们所想和所说的一部分。他把这个结构称为“框架（frames）”。Schank使用了“框架”的一个变种，他称之为“脚本（scripts）”，基于这一想法他使程序能够回答关于一篇英语短文的提问。[101] 多年之后的面向对象编程采纳了AI“框架”研究中的“继承（inheritance）”概念。</p>
<h2 id="繁荣：1980-1987"><a href="#繁荣：1980-1987" class="headerlink" title="繁荣：1980 - 1987"></a>繁荣：1980 - 1987</h2><p>在80年代，一类名为“专家系统”的AI程序开始为全世界的公司所采纳，而“知识处理”成为了主流AI研究的焦点。日本政府在同一年代积极投资AI以促进其第五代计算机工程。80年代早期另一个令人振奋的事件是John Hopfield和David Rumelhart使联结主义重获新生。AI再一次获得了成功。</p>
<h3 id="专家系统获得赏识"><a href="#专家系统获得赏识" class="headerlink" title="专家系统获得赏识"></a>专家系统获得赏识</h3><p>专家系统是一种程序，能够依据一组从专门知识中推演出的逻辑规则在某一特定领域回答或解决问题。最早的示例由Edward Feigenbaum和他的学生们开发。1965年起设计的Dendral能够根据分光计读数分辨混合物。1972年设计的MYCIN能够诊断血液传染病。它们展示了这一方法的威力。[102]<br>专家系统仅限于一个很小的知识领域，从而避免了常识问题；其简单的设计又使它能够较为容易地编程实现或修改。总之，实践证明了这类程序的实用性。直到现在AI才开始变得实用起来。[103]<br>1980年CMU为DEC（Digital Equipment Corporation，数字设备公司）设计了一个名为XCON的专家系统，这是一个巨大的成功。在1986年之前，它每年为公司省下四千万美元。[104]全世界的公司都开始研发和应用专家系统，到1985年它们已在AI上投入十亿美元以上，大部分用于公司内设的AI部门。为之提供支持的产业应运而生，其中包括Symbolics，Lisp Machines等硬件公司和IntelliCorp，Aion等软件公司。[105]</p>
<h3 id="知识革命"><a href="#知识革命" class="headerlink" title="知识革命"></a>知识革命</h3><p>专家系统的能力来自于它们存储的专业知识。这是70年代以来AI研究的一个新方向。 [106] Pamela McCorduck在书中写道，“不情愿的AI研究者们开始怀疑，因为它违背了科学研究中对最简化的追求。智能可能需要建立在对分门别类的大量知识的多种处理方法之上。” “70年代的教训是智能行为与知识处理关系非常密切。有时还需要在特定任务领域非常细致的知识。” [107]知识库系统和知识工程成为了80年代AI研究的主要方向。[108]<br>第一个试图解决常识问题的程序Cyc也在80年代出现，其方法是建立一个容纳一个普通人知道的所有常识的巨型数据库。发起和领导这一项目的Douglas Lenat认为别无捷径，让机器理解人类概念的唯一方法是一个一个地教会它们。这一工程几十年也没有完成。[109]</p>
<h3 id="重获拨款：第五代工程"><a href="#重获拨款：第五代工程" class="headerlink" title="重获拨款：第五代工程"></a>重获拨款：第五代工程</h3><p>1981年，日本经济产业省拨款八亿五千万美元支持第五代计算机项目。其目标是造出能够与人对话，翻译语言，解释图像，并且像人一样推理的机器。[110]令“芜杂派”不满的是，他们选用Prolog作为该项目的主要编程语言。[111]<br>其他国家纷纷作出响应。英国开始了耗资三亿五千万英镑的Alvey工程。美国一个企业协会组织了MCC（Microelectronics and Computer Technology Corporation，微电子与计算机技术集团），向AI和信息技术的大规模项目提供资助。[112][113] DARPA也行动起来，组织了战略计算促进会（Strategic Computing Initiative），其1988年向AI的投资是1984年的三倍。[114]</p>
<h3 id="联结主义的重生"><a href="#联结主义的重生" class="headerlink" title="联结主义的重生"></a>联结主义的重生</h3><p>982年，物理学家John Hopfield证明一种新型的神经网络（现被称为“Hopfield网络”）能够用一种全新的方式学习和处理信息。大约在同时（早于Paul Werbos），David Rumelhart推广了反向传播算法，一种神经网络训练方法。这些发现使1970年以来一直遭人遗弃的联结主义重获新生。[113][115]<br>1986年由Rumelhart和心理学家James McClelland主编的两卷本论文集“分布式并行处理”问世，这一新领域从此得到了统一和促进。90年代神经网络获得了商业上的成功，它们被应用于光字符识别和语音识别软件。[113][116]</p>
<h2 id="第二次AI低谷：1987-1993"><a href="#第二次AI低谷：1987-1993" class="headerlink" title="第二次AI低谷：1987 - 1993"></a>第二次AI低谷：1987 - 1993</h2><p>80年代中商业机构对AI的追捧与冷落符合经济泡沫的经典模式，泡沫的破裂也在政府机构和投资者对AI的观察之中。尽管遇到各种批评，这一领域仍在不断前进。来自机器人学这一相关研究领域的Rodney Brooks和Hans Moravec提出了一种全新的人工智能方案。</p>
<h3 id="人工智能的低谷"><a href="#人工智能的低谷" class="headerlink" title="人工智能的低谷"></a>人工智能的低谷</h3><p>“AI之冬”一词由经历过1974年经费削减的研究者们创造出来。他们注意到了对专家系统的狂热追捧，预计不久后人们将转向失望。[117]事实被他们不幸言中：从80年代末到90年代初，AI遭遇了一系列财政问题。<br>变天的最早征兆是1987年AI硬件市场需求的突然下跌。Apple和IBM生产的台式机性能不断提升，到1987年时其性能已经超过了Symbolics和其他厂家生产的昂贵的Lisp机。老产品失去了存在的理由：一夜之间这个价值五亿美元的产业土崩瓦解。[118]<br>XCON等最初大获成功的专家系统维护费用居高不下。它们难以升级，难以使用，脆弱（当输入异常时会出现莫名其妙的错误），成了以前已经暴露的各种各样的问题（例如资格问题（en:qualification problem））的牺牲品。专家系统的实用性仅仅局限于某些特定情景。[119]<br>到了80年代晚期，战略计算促进会大幅削减对AI的资助。DARPA的新任领导认为AI并非“下一个浪潮”，拨款将倾向于那些看起来更容易出成果的项目。[120]<br>1991年人们发现十年前日本人宏伟的“第五代工程”并没有实现。事实上其中一些目标，比如“与人展开交谈”，直到2010年也没有实现。[121] 与其他AI项目一样，期望比真正可能实现的要高得多。[121]</p>
<h3 id="躯体的重要性：Nouvelle-AI与嵌入式推理"><a href="#躯体的重要性：Nouvelle-AI与嵌入式推理" class="headerlink" title="躯体的重要性：Nouvelle AI与嵌入式推理"></a>躯体的重要性：Nouvelle AI与嵌入式推理</h3><p>80年代后期，一些研究者根据机器人学的成就提出了一种全新的人工智能方案。[122] 他们相信，为了获得真正的智能，机器必须具有躯体 - 它需要感知，移动，生存，与这个世界交互。他们认为这些感知运动技能对于常识推理等高层次技能是至关重要的，而抽象推理不过是人类最不重要，也最无趣的技能（参见Moravec悖论）。[123]他们号召“自底向上”地创造智能，这一主张复兴了从60年代就沉寂下来的控制论。<br>另一位先驱是在理论神经科学上造诣深厚的David Marr，他于70年代来到MIT指导视觉研究组的工作。他排斥所有符号化方法（不论是McCarthy的逻辑学还是Minsky的框架），认为实现AI需要自底向上地理解视觉的物理机制，而符号处理应在此之后进行。[124]<br>在发表于1990年的论文“大象不玩象棋（Elephants Don’t Play Chess）”中，机器人研究者Rodney Brooks提出了“物理符号系统假设”，认为符号是可有可无的，因为“这个世界就是描述它自己最好的模型。它总是最新的。它总是包括了需要研究的所有细节。诀窍在于正确地，足够频繁地感知它。” [125]在80年代和90年代也有许多认知科学家反对基于符号处理的智能模型，认为身体是推理的必要条件，这一理论被称为“具身的心灵/理性/ 认知（embodied mind/reason/cognition）”论题。[126]</p>
<h2 id="AI：1993-现在"><a href="#AI：1993-现在" class="headerlink" title="AI：1993 - 现在"></a>AI：1993 - 现在</h2><p>现已年过半百的AI终于实现了它最初的一些目标。它已被成功地用在技术产业中，不过有时是在幕后。这些成就有的归功于计算机性能的提升，有的则是在高尚的科学责任感驱使下对特定的课题不断追求而获得的。不过，至少在商业领域里AI的声誉已经不如往昔了。“实现人类水平的智能”这一最初的梦想曾在60年代令全世界的想象力为之着迷，其失败的原因至今仍众说纷纭。各种因素的合力将AI拆分为各自为战的几个子领域，有时候它们甚至会用新名词来掩饰“人工智能”这块被玷污的金字招牌。[127]AI比以往的任何时候都更加谨慎，却也更加成功。</p>
<h3 id="里程碑和摩尔定律"><a href="#里程碑和摩尔定律" class="headerlink" title="里程碑和摩尔定律"></a>里程碑和摩尔定律</h3><p>1997年5月11日，深蓝成为战胜国际象棋世界冠军卡斯帕罗夫的第一个计算机系统。[128]2005年，Stanford开发的一台机器人在一条沙漠小径上成功地自动行驶了131英里，赢得了DARPA挑战大赛头奖。[129]2009年，蓝脑计划声称已经成功地模拟了部分鼠脑。2011年，IBM 沃森参加《危险边缘》节目，在最后一集打败了人类选手。2016年3月，AlphaGo击败李世乭，成为第一个不让子而击败职业围棋棋士的电脑围棋程式。<br>这些成就的取得并不是因为范式上的革命。它们仍然是工程技术的复杂应用，但是计算机性能已经今非昔比了。[130]事实上，深蓝计算机比Christopher Strachey在1951年用来下棋的Ferranti Mark 1快一千万倍。[131]这种剧烈增长可以用摩尔定律描述：计算速度和内存容量每两年翻一番。计算性能上的基础性障碍已被逐渐克服。</p>
<h3 id="智能代理"><a href="#智能代理" class="headerlink" title="智能代理"></a>智能代理</h3><p>90年代，被称为“智能代理”的新范式被广泛接受。[132]尽管早期研究者提出了模块化的分治策略，[133] 但是直到Judea Pearl，Alan Newell等人将一些概念从决策理论和经济学中引入AI之后现代智能代理范式才逐渐形成。[134]当经济学中的“理性代理（rational agent）”与计算机科学中的“对象”或“模块”相结合，“智能代理”范式就完善了。<br>智能代理是一个系统，它感知周围环境，然后采取措施使成功的几率最大化。最简单的智能代理是解决特定问题的程序。已知的最复杂的智能代理是理性的，会思考的人类。智能代理范式将AI研究定义为“对智能代理的学习”。这是对早期一些定义的推广：它超越了研究人类智能的范畴，涵盖了对所有种类的智能的研究。[135]<br>这一范式让研究者们通过学习孤立的问题找到可证的并且有用的解答。它为AI各领域乃至经济学，控制论等使用抽象代理概念的领域提供了描述问题和共享解答的一种通用语言。人们希望能找到一种完整的代理架构（像Newell的en:SOAR那样），允许研究者们应用交互的智能代理建立起通用的智能系统。[134][136]</p>
<h3 id="“简约派”的胜利"><a href="#“简约派”的胜利" class="headerlink" title="“简约派”的胜利"></a>“简约派”的胜利</h3><p>越来越多的AI研究者们开始开发和使用复杂的数学工具。[137]人们广泛地认识到，许多AI需要解决的问题已经成为数学，经济学和运筹学领域的研究课题。数学语言的共享不仅使AI可以与其他学科展开更高层次的合作，而且使研究结果更易于评估和证明。AI已成为一门更严格的科学分支。[138] Russell和Norvig（2003）将这些变化视为一场“革命”和“简约派的胜利”。[139][140]<br>Judea Pearl发表于1988年的名著[141]将概率论和决策理论引入AI。现已投入应用的新工具包括贝叶斯网络，隐马尔可夫模型，信息论，随机模型和经典优化理论。针对神经网络和进化算法等“计算智能”范式的精确数学描述也被发展出来。[139]</p>
<h3 id="幕后的AI"><a href="#幕后的AI" class="headerlink" title="幕后的AI"></a>幕后的AI</h3><p>AI研究者们开发的算法开始变为较大的系统的一部分。AI曾经解决了大量的难题，[142]这些解决方案在产业界起到了重要作用。[143]应用了AI技术的有数据挖掘，工业机器人，物流[144]，语音识别[145]，银行业软件[146]，医疗诊断[146]和Google搜索引擎等。[147]<br>AI领域并未从这些成就之中获得多少益处。AI的许多伟大创新仅被看作计算机科学工具箱中的一件工具。[148]Nick Bostrom解释说，“很多AI的前沿成就已被应用在一般的程序中，不过通常没有被称为AI。这是因为，一旦变得足够有用和普遍，它就不再被称为AI了。”[149]<br>90年代的许多AI研究者故意用其他一些名字称呼他们的工作，例如信息学，知识系统，认知系统或计算智能。部分原因是他们认为他们的领域与AI存在根本的不同，不过新名字也有利于获取经费。至少在商业领域，导致AI之冬的那些未能兑现的承诺仍然困扰着AI研究，正如New York Times在2005年的一篇报道所说：“计算机科学家和软件工程师们避免使用人工智能一词，因为怕被认为是在说梦话。”[150][151][152]</p>
<h3 id="HAL-9000在哪里"><a href="#HAL-9000在哪里" class="headerlink" title="HAL 9000在哪里?"></a>HAL 9000在哪里?</h3><p>1968年亚瑟·克拉克和史丹利·库柏力克创作的《“2001太空漫游”》中设想2001年将会出现达到或超过人类智能的机器。他们创造的这一名为HAL-9000的角色是以科学事实为依据的：当时许多顶极AI研究者相信到2001年这样的机器会出现。[153]<br>“那么问题是，为什么在2001年我们并未拥有HAL呢?” 马文·闵斯基问道。[154] Minsky认为，问题的答案是绝大多数研究者醉心于钻研神经网络和遗传算法之类商业应用，而忽略了常识推理等核心问题。另一方面，John McCarthy则归咎于资格问题（en:qualification problem）。[155]Ray Kurzweil相信问题在于计算机性能，根据摩尔定律，他预测具有人类智能水平的机器将在2029年出现。[156]Jeff Hawkins认为神经网络研究忽略了人类大脑皮质的关键特性，而简单的模型只能用于解决简单的问题。[157]还有许多别的解释，每一个都对应着一个正在进行的研究计划。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8F%B2" target="_blank" rel="external">人工智能史</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/225px-Gottfried_Wilhelm_von_Leibniz.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="History" scheme="http://ipcreator.me/tags/History/"/>
    
  </entry>
  
  <entry>
    <title>Santana——Smooth</title>
    <link href="http://ipcreator.me/2017/03/27/MyView/Music/santana-smooth/"/>
    <id>http://ipcreator.me/2017/03/27/MyView/Music/santana-smooth/</id>
    <published>2017-03-26T23:42:06.000Z</published>
    <updated>2017-03-29T04:18:01.287Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om845dfwl.bkt.clouddn.com/Santanasmooth.jpg" alt=""></p>
<p><a href="https://en.wikipedia.org/wiki/Smooth_(song" target="_blank" rel="external">From Wikipedia, the free encyclopedia</a>)</p>
<p>“Smooth” is a collaboration between Latin rock band Santana and Matchbox Twenty vocalist Rob Thomas. The song was written by Thomas, DeGaetano, and Itaal Shur, produced by Matt Serletic and sung by Thomas. It won three Grammy Awards: <strong>Record of the Year</strong>, <strong>Song of the Year</strong>, and <strong>Best Pop Collaboration with Vocals</strong>. Not only was it the final number-one Hot 100 hit of the 1990s, it was also the number-two Hot 100 hit of the 20th century. “Smooth” is the only song to appear on two decade-end Billboard charts. As of 2013, “Smooth” is ranked the second most successful song of all time by Billboard.</p>
<a id="more"></a>
<h2 id="SANTANA-LYRICS"><a href="#SANTANA-LYRICS" class="headerlink" title="SANTANA LYRICS"></a>SANTANA LYRICS</h2><p>“Smooth”<br>(feat. Rob Thomas)</p>
<p>Man, it’s a hot one<br>Like seven inches from the midday sun<br>Well, I hear you whisper and the words melt everyone<br>But you stay so cool</p>
<p>My muñequita,<br>My Spanish Harlem Mona Lisa<br>You’re my reason for reason<br>The step in my groove, yeah.</p>
<p>[Bridge]<br>And if you said, “This life ain’t good enough.”<br>I would give my world to lift you up<br>I could change my life to better suit your mood<br>Because you’re so smooth</p>
<p>[Chorus]<br>And it’s just like the ocean under the moon<br>Well, that’s the same as the emotion that I get from you<br>You got the kind of loving that can be so smooth, yeah.<br>Gimme your heart, make it real<br>Or else forget about it</p>
<p>Well, I’ll tell you one thing<br>If you would leave it’d be a crying shame<br>In every breath and every word<br>I hear your name calling me out</p>
<p>Out from the barrio,<br>You hear my rhythm on your radio<br>You feel the turning of the world so soft and slow<br>Turning you ‘round and ‘round</p>
<p>[Bridge]</p>
<p>[Chorus]</p>
<p>[Chorus]</p>
<p>Or else forget about it<br>Or else forget about it<br>Oh, let’s don’t forget about it<br>(Gimme your heart, make it real)<br>Let’s don’t forget about it (hey)<br>Let’s don’t forget about it (no oh no oh)<br>Let’s don’t forget about it (no no no oh)<br>Let’s don’t forget about it (hey no no oh)<br>Let’s don’t forget about it (hey hey hey)</p>
<h2 id="SANTANA-歌词"><a href="#SANTANA-歌词" class="headerlink" title="SANTANA 歌词"></a>SANTANA 歌词</h2><p>Man it’s a hot one<br>天,这是多么性感的人。</p>
<p>Like seven inches from the midday sun<br>就像站在正午7英尺近的太阳下。</p>
<p>I hear you whisper &amp; the words melt everyone<br> 我听到你的轻声细语,且说得如此动人。</p>
<p>But you stay so cool<br>但是你太难以接近。</p>
<p>My muñequita, my Spanish harlem mona lisa<br>你是我的骑士,我的西班牙黑珍珠蒙娜丽莎。</p>
<p>Your my reason for reason<br>你是我生存的理由。</p>
<p>The step in my groove<br> (认识你的那段时间)是我(一生中的)最佳时刻。</p>
<p>And if you say this life ain’t good enough<br>如果你说这样的生活不够好。</p>
<p>I would give my world to lift you up<br>我会贡献出我的世界以使你满足。</p>
<p>I could change my life to better suit your mood<br>我会改变自己的生活以适应你的喜好。</p>
<p>Cause you’re so smooth<br>因为你是如此的柔美。</p>
<p>And just like the ocean under the moon<br>就像月光下的海洋。</p>
<p>Well that’s the same emotion that I get from you<br>那种心绪就如同你给我的感觉一般。</p>
<p>You got the kind of lovin that can be so smooth<br> 你拥有一种柔美的爱。</p>
<p>Gimme your heart, make it real<br>给我你的爱,就此实现吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>I’ll tell you one thing<br> 我要告诉你一件事。</p>
<p>If you would leave it would be a crying shame<br>如果你离去,我将无地自容。</p>
<p>In every breath and every word<br>我每声每息都听见你的名字</p>
<p>I hear your name calling me out<br>在向我呼唤</p>
<p>Out from the barrio,<br>在西班牙地区以外的地方,</p>
<p>you hear my rhythm from your radio<br>你会从电台里听到我的音乐。</p>
<p>You feel the turning of the world so soft and slow<br>让你感到这世界转动得如此地温柔而舒缓。</p>
<p>Turning you round and round<br>带着你转啊转着。</p>
<p>And if you say this life ain’t good enough<br>如果你说这样的生活不够好。</p>
<p>I would give my world to lift you up<br>我会贡献出我的世界以使你满足。</p>
<p>I could change my life to better suit your mood<br>我会改变自己的生活以适应你的喜好。</p>
<p>Cause you’re so smooth<br>因为你是如此的柔美。</p>
<p>And just like the ocean under the moon<br>就像月光下的海洋。</p>
<p>Well that’s the same emotion that I get from you<br>那种心绪就如同你给我的感觉一般。</p>
<p>You got the kind of lovin that can be so smooth<br>你拥有一种柔美的爱。</p>
<p>Gimme your heart, make it real<br>给我你的爱,就此实现吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>And just like the ocean under the moon<br>就像月光下的海洋。</p>
<p>Well that’s the same emotion that I get from you<br>那种心绪就如同你给我的感觉一般。</p>
<p>You got the kind of lovin that can be so smooth<br>你拥有一种柔美的爱。</p>
<p>Gimme your heart, make it real<br>给我你的爱,就此实现吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>Gimme your heart, make it real<br>给我你的爱,就此实现吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://en.wikipedia.org/wiki/Smooth_(song" target="_blank" rel="external">Smooth (song)</a>)<br><a href="http://blog.sina.com.cn/s/blog_477cd8220100og3f.html" target="_blank" rel="external">每天一首英文歌 歌词翻译 Smooth【Santana】</a><br><a href="https://answers.yahoo.com/question/index?qid=20070615142236AAQPwtU" target="_blank" rel="external">What does it mean-My mu-equita, my Spanish harlem mona lisa Your my reason for reason the step in my groove?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om845dfwl.bkt.clouddn.com/Santanasmooth.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Smooth_(song&quot;&gt;From Wikipedia, the free encyclopedia&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;“Smooth” is a collaboration between Latin rock band Santana and Matchbox Twenty vocalist Rob Thomas. The song was written by Thomas, DeGaetano, and Itaal Shur, produced by Matt Serletic and sung by Thomas. It won three Grammy Awards: &lt;strong&gt;Record of the Year&lt;/strong&gt;, &lt;strong&gt;Song of the Year&lt;/strong&gt;, and &lt;strong&gt;Best Pop Collaboration with Vocals&lt;/strong&gt;. Not only was it the final number-one Hot 100 hit of the 1990s, it was also the number-two Hot 100 hit of the 20th century. “Smooth” is the only song to appear on two decade-end Billboard charts. As of 2013, “Smooth” is ranked the second most successful song of all time by Billboard.&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="English" scheme="http://ipcreator.me/tags/English/"/>
    
      <category term="Music" scheme="http://ipcreator.me/tags/Music/"/>
    
  </entry>
  
  <entry>
    <title>Core Competitiveness</title>
    <link href="http://ipcreator.me/2017/03/27/MyView/my-core-competitiveness/"/>
    <id>http://ipcreator.me/2017/03/27/MyView/my-core-competitiveness/</id>
    <published>2017-03-26T23:42:06.000Z</published>
    <updated>2017-03-30T08:53:31.042Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omj173lhw.bkt.clouddn.com/20170322_165448.jpg" alt=""></p>
<p><strong>Deliberately</strong> practice makes perfect.<br><strong>Using</strong> is the best way of learning.<br><strong>Insisting</strong> is the most important habits for growing up.</p>
<blockquote>
<p>Action speaks louder than word.<br>Codes can talk, and talk by codes.<br>Growing up little by little and day by day.<br>Do what you love ,and love what you do.<br>A thousand miles starts with a single step.<br>Accumulation is powerful.</p>
</blockquote>
<a id="more"></a>
<h2 id="Health"><a href="#Health" class="headerlink" title="Health"></a>Health</h2><h3 id="Mind"><a href="#Mind" class="headerlink" title="Mind"></a>Mind</h3><ol>
<li>Focus your attention on what’s important to you.</li>
<li>Attention is the most precious resource for you.</li>
<li>Relax yourself by sixty-three game.</li>
</ol>
<h3 id="Movement"><a href="#Movement" class="headerlink" title="Movement"></a>Movement</h3><ol>
<li>Ten-thousand steps per day.</li>
<li>7th Gymnastics.</li>
</ol>
<h3 id="Sleep"><a href="#Sleep" class="headerlink" title="Sleep"></a>Sleep</h3><ol>
<li>Eight hours per day.</li>
</ol>
<h2 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h2><h3 id="English"><a href="#English" class="headerlink" title="English"></a>English</h3><blockquote>
<p>English is a language and  a tool</p>
</blockquote>
<ol>
<li>Vocabulary<ul>
<li>Ordinary Life</li>
<li>Professional Vocabulary<br>+</li>
</ul>
</li>
<li>Grammar</li>
<li>Sentence<ul>
<li>Ordinary Life</li>
<li>Quotes from Famous People</li>
</ul>
</li>
<li>Reading/Writing<ul>
<li>Input</li>
<li>Output</li>
<li>Reading word by word.</li>
</ul>
</li>
<li>Listen/Talk<ul>
<li>Breaking through listening by talking.</li>
</ul>
</li>
</ol>
<h3 id="Google-Wikipedia"><a href="#Google-Wikipedia" class="headerlink" title="Google/Wikipedia"></a>Google/Wikipedia</h3><ol>
<li>Research base on search.</li>
<li>Accurate concept is most important for research.</li>
</ol>
<h3 id="Coding-Reference"><a href="#Coding-Reference" class="headerlink" title="Coding Reference"></a>Coding Reference</h3><ol>
<li>StackFlow</li>
<li>CSDN</li>
</ol>
<h3 id="Reading-Writing"><a href="#Reading-Writing" class="headerlink" title="Reading/Writing"></a>Reading/Writing</h3><ol>
<li>Read more, write more.</li>
<li>Read the best , write the best.</li>
</ol>
<h3 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h3><h4 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h4><ol>
<li><p>Git</p>
<ul>
<li>Git</li>
<li>Github</li>
</ul>
</li>
<li><p>Web</p>
<ul>
<li>Local——Apache(XAMPP)</li>
<li>Server——QiNiu</li>
</ul>
</li>
<li><p>OS</p>
<ul>
<li>Ubuntu</li>
</ul>
</li>
<li><p>Editor</p>
<ul>
<li>Atom</li>
<li>Notepad++</li>
</ul>
</li>
<li><p>Reader</p>
<ul>
<li>SourceInsight</li>
</ul>
</li>
<li><p>Others</p>
<ul>
<li>BeyondCompare</li>
<li>Hexo</li>
<li>Next</li>
<li>Yilia</li>
<li>FastStone Capture</li>
<li>Tianxing</li>
<li>Baiduyun searcher</li>
<li>P2P Searcher</li>
<li>Xunlei Downloader</li>
<li>Youdao Note</li>
<li>Eclipse</li>
<li>Chrome</li>
<li><a href="https://color.adobe.com/zh/" target="_blank" rel="external">Adobe Color</a></li>
</ul>
</li>
</ol>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><blockquote>
<p>Great mind thinks alike.</p>
</blockquote>
<ol>
<li>The design principles of operating system and application.</li>
</ol>
<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><ol>
<li><p>Tools</p>
<ul>
<li>AndroidStudio</li>
<li>Gradle</li>
<li>Log</li>
<li>ADB</li>
<li>Git</li>
</ul>
</li>
<li><p>App</p>
<ul>
<li>Contact</li>
<li>Music Player</li>
<li>Camera</li>
<li>BMI</li>
<li>Cool Weather</li>
</ul>
</li>
<li><p>Basic Concept</p>
<ul>
<li><p>Permission</p>
<ul>
<li>Manifest</li>
<li>Run Permission</li>
</ul>
</li>
<li><p>Activity</p>
<ul>
<li>standard</li>
<li>singleTop</li>
<li>singleTask</li>
<li>singleInstance</li>
</ul>
</li>
<li><p>Intent</p>
<ul>
<li>obvious</li>
<li>intent-filter</li>
<li>getExtra/putExtra</li>
<li>startActivityForResult</li>
<li>Serializable</li>
<li>Parcelable</li>
</ul>
</li>
<li><p>Broadcast</p>
<ul>
<li>static</li>
<li>dynamic</li>
<li>local</li>
<li>standard</li>
<li>order</li>
</ul>
</li>
<li><p>Service</p>
<ul>
<li>Binder</li>
<li>ServiceConnection</li>
<li>bindService/UnbindService</li>
<li>Foreground</li>
<li>IntentService</li>
</ul>
</li>
<li><p>Alarm</p>
</li>
<li><p>Doze</p>
</li>
<li><p>Content Provider</p>
</li>
<li><p>UI</p>
<ul>
<li><p>Layout</p>
<ul>
<li>Linear</li>
<li>Relative</li>
<li>Frame</li>
<li>PercentFrame</li>
<li>Constraint</li>
</ul>
</li>
<li><p>Toast</p>
</li>
<li>Notification</li>
<li><p><a href="https://github.com/zhaozepeng/FloatWindowPermission" target="_blank" rel="external">FloatWindow</a></p>
</li>
<li><p>Menu</p>
</li>
<li>TextView</li>
<li>Button</li>
<li>EditText</li>
<li>ImageView</li>
<li>ProgressBar</li>
<li>AlertDialog</li>
<li>ProgressDialog</li>
<li>ListView</li>
<li>RecyclerView</li>
<li>Custom Control</li>
<li>Fragment</li>
<li><p>MulitiWindow</p>
</li>
<li><p>Material Design</p>
<ul>
<li>Toolbar</li>
<li>DrawerLayout</li>
<li>NavigationView</li>
<li>FloatingActionButton</li>
<li>Snackbar</li>
<li>CoordinatorLayout</li>
<li>CardView</li>
<li>AppBarLayout</li>
<li>CollapsingToolbarLayout</li>
</ul>
</li>
<li><p>Nine-Patch</p>
</li>
</ul>
</li>
<li><p>Data Persistence</p>
<ul>
<li>File IO</li>
<li>SharedPreferences</li>
<li><p>SQLite DataBase</p>
<ul>
<li>Create</li>
<li>Retrieve</li>
<li>Update</li>
<li>Delete</li>
<li>Add</li>
</ul>
</li>
<li><p>LitePal</p>
</li>
</ul>
</li>
<li><p>MultiMedia</p>
<ul>
<li>Picture</li>
<li>Gif</li>
<li>Music</li>
<li>Video</li>
</ul>
</li>
<li><p>LBS</p>
</li>
<li><p>Network</p>
<ul>
<li>WebView</li>
<li>HttpURLConnection</li>
<li>OkHttp</li>
<li>XML<ul>
<li>Pull</li>
<li>SAX</li>
</ul>
</li>
<li>JSON</li>
<li><p>GSON</p>
</li>
<li><p>MultiThread</p>
<ul>
<li>Thread</li>
<li>Runnable</li>
<li>AsyncTask</li>
<li>Handler</li>
<li>Message</li>
<li>runOnUiThread</li>
<li>ViewPost</li>
<li>HandlerPost</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol>
<li><p>The 3rd Lib</p>
<ul>
<li>LitePal</li>
<li>Glide</li>
<li>Gson</li>
<li>CircleImageView</li>
<li>Jsoup</li>
<li>Picasso</li>
<li>Android Gif Drawable</li>
<li>Custom Activityon Crash</li>
<li>Stetho</li>
<li>Fast Android Networking</li>
<li>Qiniu Android Sdk</li>
<li>Debug Db</li>
<li>LeakCanary</li>
</ul>
</li>
<li><p>Best Practice</p>
<blockquote>
<p>Coding, Coding, Coding</p>
</blockquote>
</li>
</ol>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><blockquote>
<p>Base the open source and don’t reinvent the same  wheel.</p>
</blockquote>
<ol>
<li><p>Design Pattern</p>
<ul>
<li>Adapter</li>
<li>Mediator</li>
<li>State</li>
<li>Singleton</li>
<li>Simple Factory</li>
<li>Factory</li>
<li>Abstract Factory</li>
<li>Strategy</li>
<li>Facade</li>
<li>Template</li>
<li>Composite</li>
</ul>
</li>
<li><p>Basic Concept</p>
<ul>
<li>Object</li>
<li>Operators</li>
<li>Control</li>
<li>Initialization</li>
<li>Access</li>
<li>Net</li>
<li>Reusing</li>
<li>Polymorphism</li>
<li>Interface</li>
<li>Inner Class</li>
<li>Holding</li>
<li>Exception</li>
<li>String</li>
<li>Type Info</li>
<li>Generic</li>
<li>Array</li>
<li>Container</li>
<li>IO</li>
<li>XML</li>
<li>Enumerated</li>
<li>Annotations</li>
<li>Concurrency</li>
<li>GUI</li>
<li>Frogbean</li>
<li>Bangbean</li>
<li>SWT</li>
</ul>
</li>
</ol>
<ol>
<li><p>IO</p>
</li>
<li><p>Network</p>
</li>
<li><p>DataBase</p>
</li>
<li><p>MultiProcess/MultiThread</p>
</li>
<li><p>Data Type</p>
</li>
</ol>
<h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><p>The first promgram language in my colleague.</p>
<ol>
<li>Basic Concept<ul>
<li>Data Type</li>
<li>Operator</li>
<li>Control</li>
</ul>
</li>
</ol>
<h4 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h4><p>The future platform in AI era.</p>
<ol>
<li>Basic Concept<ul>
<li>Data Type</li>
<li>Operator<br>+</li>
</ul>
</li>
<li>Application<br> +</li>
</ol>
<h3 id="Patent"><a href="#Patent" class="headerlink" title="Patent"></a>Patent</h3><ol>
<li><p>Basic Concept</p>
<ul>
<li>Patent</li>
<li>Type</li>
<li>Process</li>
</ul>
</li>
<li><p>Innovation</p>
<ul>
<li>Parallel thinking</li>
<li>Six Thinking hats</li>
</ul>
</li>
</ol>
<h2 id="Wealth"><a href="#Wealth" class="headerlink" title="Wealth"></a>Wealth</h2><h3 id="Investment"><a href="#Investment" class="headerlink" title="Investment"></a>Investment</h3><h4 id="Business"><a href="#Business" class="headerlink" title="Business"></a>Business</h4><ol>
<li>Semi Conductor</li>
<li>M-ICT</li>
<li>AI</li>
</ol>
<h4 id="Company"><a href="#Company" class="headerlink" title="Company"></a>Company</h4><ol>
<li>MeiTu</li>
<li>SMIC</li>
</ol>
<h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><table>
<thead>
<tr>
<th>no.</th>
<th>Date</th>
<th>Price</th>
<th>Company</th>
<th>Strategy</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>03.22</td>
<td>10.12</td>
<td>SMIC</td>
<td>Bottom &amp; Government Strategy</td>
</tr>
<tr>
<td>2</td>
<td>03.22</td>
<td>10.08</td>
<td>SMIC</td>
<td>Bottom &amp; Government Strategy</td>
</tr>
<tr>
<td>3</td>
<td>03.22</td>
<td>10.06</td>
<td>SMIC</td>
<td>Bottom &amp; Government Strategy</td>
</tr>
<tr>
<td>4</td>
<td>03.22</td>
<td>10.00</td>
<td>SMIC</td>
<td>Bottom &amp; Government Strategy</td>
</tr>
<tr>
<td>5</td>
<td>03.29</td>
<td>09.96</td>
<td>SMIC</td>
<td>Bottom &amp; Government Strategy</td>
</tr>
<tr>
<td>6</td>
<td>03.29</td>
<td>12.88</td>
<td>MeiTu</td>
<td>AI Future &amp; Wensheng Cai &amp; Kaifu Lee</td>
</tr>
</tbody>
</table>
<h4 id="Capital"><a href="#Capital" class="headerlink" title="Capital"></a>Capital</h4><ol>
<li>Money</li>
<li>Time</li>
<li>Wisdom<ul>
<li>Self-growing</li>
<li>Patience</li>
<li>Wisdom of choose.</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omj173lhw.bkt.clouddn.com/20170322_165448.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deliberately&lt;/strong&gt; practice makes perfect.&lt;br&gt;&lt;strong&gt;Using&lt;/strong&gt; is the best way of learning.&lt;br&gt;&lt;strong&gt;Insisting&lt;/strong&gt; is the most important habits for growing up.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Action speaks louder than word.&lt;br&gt;Codes can talk, and talk by codes.&lt;br&gt;Growing up little by little and day by day.&lt;br&gt;Do what you love ,and love what you do.&lt;br&gt;A thousand miles starts with a single step.&lt;br&gt;Accumulation is powerful.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Knowledge Framework" scheme="http://ipcreator.me/tags/Knowledge-Framework/"/>
    
      <category term="Skill Graph" scheme="http://ipcreator.me/tags/Skill-Graph/"/>
    
  </entry>
  
  <entry>
    <title>Thanks to...</title>
    <link href="http://ipcreator.me/2017/03/26/Program/special-thanks/"/>
    <id>http://ipcreator.me/2017/03/26/Program/special-thanks/</id>
    <published>2017-03-26T15:00:00.000Z</published>
    <updated>2017-03-27T09:48:11.163Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/thanks.png" alt=""></p>
<p>Standing on Shoulders of Giants</p>
<p>站在巨人的肩上，才有可能在有限的时间里取得最大的成绩…</p>
<p>发现趋势，追随趋势，顺势而安、乘势而起、造势而雄，不做旁观者，要成弄潮儿<br>如果进入了痛苦的高原期，请记住：付出与收获成正比，成功之路本身就不轻松，与戴皇冠必承其重，<br>此时，你需要坚信自己的判断和选择，坚持、坚持再坚持，基于量变到质变的法则，<br>一般都会“踏破铁鞋无觅处，得来全不费工夫”，届时，”待到山花烂漫时，君在丛中笑”。</p>
 <a id="more"></a>
<p> 学之者不如好之者，好之者不如乐之者，兴趣是最好的老师<br> 化整为零，先易后难，循序渐进，各个击破，坚持是成功的密码，自胜者强</p>
<p> 若贪多求快，则欲速不达<br> 若聚焦极致，则迎刃而解</p>
<p> 别急，慢慢来，一切都来得及<br> 架构思考、动手实践、检索分析、复盘总结、循环递进</p>
<p> 保持节奏感、创造成就感</p>
<h2 id="Best-Practice"><a href="#Best-Practice" class="headerlink" title="Best Practice"></a>Best Practice</h2><h3 id="The-first-line-code-2rd"><a href="#The-first-line-code-2rd" class="headerlink" title="The first line code(2rd)"></a>The first line code(2rd)</h3><h3 id="Fast-Android-network"><a href="#Fast-Android-network" class="headerlink" title="Fast Android network"></a>Fast Android network</h3><h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><h3 id="Git-amp-Github"><a href="#Git-amp-Github" class="headerlink" title="Git &amp; Github"></a>Git &amp; Github</h3><h3 id="Design-Pattern"><a href="#Design-Pattern" class="headerlink" title="Design Pattern"></a>Design Pattern</h3><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p><img src="http://okkntqe2h.bkt.clouddn.com/nougat_bg.jpg" alt=""><br><a href="https://developer.android.com/index.html" target="_blank" rel="external">Android</a>——See what’s new with Android - from phones to watches and more.<br><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">郭霖的专栏</a>——每当你在感叹，如果有这样一个东西就好了的时候，请注意，其实这是你的机会<br><a href="http://blog.csdn.net/luoshengyang" target="_blank" rel="external">老罗的Android之旅</a>——爱生活，爱Android<br><a href="http://hukai.me/" target="_blank" rel="external">胡凯</a><br><a href="http://blog.csdn.net/eclipsexys" target="_blank" rel="external">eclipse_xu</a><br><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">Android官方培训课程中文版(v0.9.7)</a><br><a href="http://blog.csdn.net/aqi00/article/details/50012511" target="_blank" rel="external">湖前琴亭</a>——好好做技术，认真写博文<br><a href="https://book.douban.com/subject/26855851/" target="_blank" rel="external">Android群英传</a>——神兵利器<br><a href="https://book.douban.com/subject/26644935/" target="_blank" rel="external">Android源码设计模式解析与实战</a><br><a href="https://book.douban.com/subject/26915433/" target="_blank" rel="external">第一行代码：Android（第2版）</a><br><a href="https://book.douban.com/subject/19986441/" target="_blank" rel="external">Android系统源代码情景分析</a><br><a href="https://github.com/ipcreator/Android-Learning-Resources" target="_blank" rel="external">Android学习资源网站大全</a><br><a href="https://github.com/ipcreator/android_design_patterns_analysis" target="_blank" rel="external">Android源码设计模式分析开源项目</a><br><a href="http://www.runoob.com/w3cnote/android-tutorial-contents.html" target="_blank" rel="external">2015年最新Android基础入门教程</a></p>
<h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><img src="https://camo.githubusercontent.com/ee91ac3c9f5ad840ebf70b54284498fe0e6ddb92/68747470733a2f2f7777772e74656e736f72666c6f772e6f72672f696d616765732f74665f6c6f676f5f7472616e73702e706e67" alt=""><br><a href="https://www.tensorflow.org/" target="_blank" rel="external">TensorFlow</a>——An open-source software library for Machine Intelligence<br><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="external">tensorflow</a><br><a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples" target="_blank" rel="external">tensorflow examples</a><br><a href="https://github.com/miyosuda/TensorFlowAndroidDemo" target="_blank" rel="external">TensorFlowAndroidDemo</a><br><a href="https://github.com/miyosuda/TensorFlowAndroidMNIST" target="_blank" rel="external">TensorFlowAndroidMNIST</a><br><a href="http://wiki.jikexueyuan.com/project/tensorflow-zh/" target="_blank" rel="external">TensorFlow 官方文档中文版</a><br><a href="https://github.com/tobegit3hub/deep_recommend_system" target="_blank" rel="external">deep_recommend_system</a><br><a href="https://github.com/FishermanZzhang/ID-Card_with_TensorFlow_Opencv_in_Android" target="_blank" rel="external">ID-Card_with_TensorFlow_Opencv_in_Android</a><br><a href="https://github.com/natanielruiz/android-yolo" target="_blank" rel="external">android-yolo</a>——Real-time object detection on Android using the YOLO network with TensorFlow<br><a href="https://github.com/dongchangzhang/NewFeelings" target="_blank" rel="external">NewFeelings</a>——Android平台相册应用，使用Google开源机器学习框架tensorflow处理图片以提供更好的图片浏览体验<br><a href="https://github.com/aerdy/Android-Tensorflow-Sample" target="_blank" rel="external">TensorFlow Android Camera Demo</a><br><a href="https://book.douban.com/subject/26708119/" target="_blank" rel="external">机器学习</a><br><a href="https://book.douban.com/subject/26838557/" target="_blank" rel="external">智能时代</a>——大数据与智能革命重新定义未来<br><a href="https://book.douban.com/subject/10750155/" target="_blank" rel="external">数学之美</a><br><a href="https://book.douban.com/subject/19949020/" target="_blank" rel="external">程序员的数学</a>——编程的基础是计算机科学，而计算机科学的基础是数学。<br><a href="https://book.douban.com/subject/26593822/" target="_blank" rel="external">程序员的数学 2概率统计</a><br><a href="https://book.douban.com/subject/26740548/" target="_blank" rel="external">程序员的数学 3线性代数</a></p>
<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><p><img src="http://okkntqe2h.bkt.clouddn.com/github-logo.jpg" alt=""><br><a href="https://github.com/" target="_blank" rel="external">Github</a><br><a href="https://coding.net/" target="_blank" rel="external">Coding</a><br><a href="http://stackoverflow.com/" target="_blank" rel="external">Stack Overflow</a><br><a href="http://www.qiniu.com/pricing" target="_blank" rel="external">七牛</a><br><a href="http://www.google.com/ncr" target="_blank" rel="external">Google</a><br><a href="http://zhibimo.com/read/xiaolai/everyone-can-use-english/" target="_blank" rel="external">English</a><br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a><br><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python教程</a><br><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">hexo-theme-yilia</a><br><a href="https://atom.io/" target="_blank" rel="external">atom</a>——A hackable text editor for the 21st Century<br><a href="https://book.douban.com/subject/10794788/" target="_blank" rel="external">鸟哥的Linux私房菜（第三版）</a><br><a href="https://book.douban.com/subject/5333562/" target="_blank" rel="external">深入理解计算机系统</a><br><a href="大话数据结构"></a><br><a href="大话设计模式"></a><br><a href="https://book.douban.com/subject/26829016/" target="_blank" rel="external">Python编程：从入门到实践</a><br><a href="https://book.douban.com/subject/25708312/" target="_blank" rel="external">C++ Primer 中文版（第 5 版）</a><br><a href="https://book.douban.com/subject/2130190/" target="_blank" rel="external">Java编程思想 （第4版）</a><br><a href="https://book.douban.com/subject/1139336/" target="_blank" rel="external">C程序设计语言</a><br><a href="https://github.com/ipcreator/free-programming-books-zh_CN" target="_blank" rel="external">免费的编程中文书籍索引</a></p>
<h2 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h2><p><a href="http://stormzhang.com/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">ANDROID学习之路</a><br><a href="https://zhuanlan.zhihu.com/p/19959253?columnSlug=xiao-jing-mo" target="_blank" rel="external">编程入门指南 v1.5</a></p>
<h2 id="Open-Source"><a href="#Open-Source" class="headerlink" title="Open Source"></a>Open Source</h2><p><img src="http://okkntqe2h.bkt.clouddn.com/Example1.gif" alt=""><br><a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">lottie-android</a><br><a href="https://github.com/zhongyao/Android-Universal-Image-Loader" target="_blank" rel="external">Android-Universal-Image-Loader</a><br><a href="https://github.com/koral--/android-gif-drawable" target="_blank" rel="external">android-gif-drawable</a><br><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome-android-ui</a><br><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">android-open-project</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/thanks.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Standing on Shoulders of Giants&lt;/p&gt;
&lt;p&gt;站在巨人的肩上，才有可能在有限的时间里取得最大的成绩…&lt;/p&gt;
&lt;p&gt;发现趋势，追随趋势，顺势而安、乘势而起、造势而雄，不做旁观者，要成弄潮儿&lt;br&gt;如果进入了痛苦的高原期，请记住：付出与收获成正比，成功之路本身就不轻松，与戴皇冠必承其重，&lt;br&gt;此时，你需要坚信自己的判断和选择，坚持、坚持再坚持，基于量变到质变的法则，&lt;br&gt;一般都会“踏破铁鞋无觅处，得来全不费工夫”，届时，”待到山花烂漫时，君在丛中笑”。&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Implement of Upload Files to QiNiu Server</title>
    <link href="http://ipcreator.me/2017/03/26/Program/Android/MyApp/qi-niu-upload/"/>
    <id>http://ipcreator.me/2017/03/26/Program/Android/MyApp/qi-niu-upload/</id>
    <published>2017-03-26T08:10:06.000Z</published>
    <updated>2017-03-27T10:04:47.044Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/2017-03-26_173401.jpg" alt=""></p>
<blockquote>
<p>了解清楚概念，认真阅读官方文档，结合参考示例，基于常识思考，多动手实践。</p>
</blockquote>
 <a id="more"></a>
<h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h2><p>功能要求：使用第三方开源库Fast-Android-Networking实现从七牛服务器快速下载和上传文件；<br>应用场景：快速完成/取消文件下载/上传，支持回调以更新进度等相关UI。</p>
<h2 id="设计及实现"><a href="#设计及实现" class="headerlink" title="设计及实现"></a>设计及实现</h2><h3 id="Fast-Android-Networking第三方库"><a href="#Fast-Android-Networking第三方库" class="headerlink" title="Fast-Android-Networking第三方库"></a>Fast-Android-Networking第三方库</h3><p><a href="/2017/03/25/Program/Android/fast-android-networking/">Fast-Android-Networking</a></p>
<h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><p><strong>下载</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">String realDownFileURL = auth.privateDownloadUrl(QINIU_DOWNLOAD_PRIVATE_TEST_FILE);</div><div class="line"></div><div class="line">                AndroidNetworking.download(realDownFileURL,//&quot;http://om845dfwl.bkt.clouddn.com/smile.mp3&quot;</div><div class="line">                        Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath(),</div><div class="line">                        &quot;fast android network test.jpg&quot;)</div><div class="line">                        .setTag(&quot;downloadTest&quot;)</div><div class="line">                        .setPriority(Priority.MEDIUM)</div><div class="line">                        .build()</div><div class="line">                        .setDownloadProgressListener(new DownloadProgressListener() &#123;</div><div class="line">                            @Override</div><div class="line">                            public void onProgress(long bytesDownloaded, long totalBytes) &#123;</div><div class="line">                                // do anything with progress</div><div class="line">                                int progress = (int)(bytesDownloaded/totalBytes);</div><div class="line">                                progressBar.setProgress(progress);</div><div class="line"></div><div class="line">                                notificationManager.notify(NOTIFICATION_ID_DOWNLOAD,getNotification(&quot;Downloading...&quot;,</div><div class="line">                                        &quot;fast android network test.jpg&quot;,progress));</div><div class="line">                            &#125;</div><div class="line">                        &#125;)</div><div class="line">                        .startDownload(new DownloadListener() &#123;</div><div class="line">                            @Override</div><div class="line">                            public void onDownloadComplete() &#123;</div><div class="line">                                // do anything after completion</div><div class="line">                                notificationManager.notify(NOTIFICATION_ID_DOWNLOAD,</div><div class="line">                                        getNotification(&quot;Download Success&quot;,&quot;fast android network test.jpg&quot;, 0));</div><div class="line">                                progressBar.setProgress(100);</div><div class="line">                            &#125;</div><div class="line">                            @Override</div><div class="line">                            public void onError(ANError error) &#123;</div><div class="line">                                // handle error</div><div class="line">                                notificationManager.notify(NOTIFICATION_ID_DOWNLOAD,</div><div class="line">                                        getNotification(&quot;Download Failed&quot;,&quot;fast android network test.jpg&quot;, -1));</div><div class="line">                                progressBar.setProgress(0);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div></pre></td></tr></table></figure></p>
<p><strong>上传</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String uploadPath =Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath()+&quot;/smile.mp3&quot;;</div><div class="line"></div><div class="line">File uploadFile=new File(uploadPath);</div><div class="line"></div><div class="line">QiNiuAuth auth =  create(ACCESS_KEY, SECRET_KEY);</div><div class="line"></div><div class="line">String token = auth.uploadToken(BUCKET);</div><div class="line"></div><div class="line">AndroidNetworking.upload(QI_NIU_UPLOAD_URL)//&quot;http://upload.qiniu.com/&quot;</div><div class="line">                        .addMultipartFile(&quot;file&quot;,uploadFile)</div><div class="line">                        .addMultipartParameter(&quot;token&quot;,token)</div><div class="line">                        .addMultipartParameter(&quot;key&quot;,&quot;2017/3/26/smile.mp3&quot;)</div><div class="line">                        .setTag(&quot;uploadTest&quot;)</div><div class="line">                        .setPriority(Priority.HIGH)</div><div class="line">                        .build()</div><div class="line">                        .setUploadProgressListener(new UploadProgressListener() &#123;</div><div class="line">                            @Override</div><div class="line">                            public void onProgress(long bytesUploaded, long totalBytes) &#123;</div><div class="line">                                // do anything with progress</div><div class="line">                                long lTotalBytes = uploadFile.length();</div><div class="line">                                int progress = (int)((bytesUploaded*100)/lTotalBytes);</div><div class="line">                                progressBar.setProgress(progress);</div><div class="line">                                notificationManager.notify(NOTIFICATION_ID_DOWNLOAD,</div><div class="line">                                        getNotification(&quot;Uploading...&quot;,&quot;smile.mp3&quot;,progress));</div><div class="line">                            &#125;</div><div class="line">                        &#125;)</div><div class="line">                        .getAsJSONObject(new JSONObjectRequestListener() &#123;</div><div class="line">                            @Override</div><div class="line">                            public void onResponse(JSONObject response) &#123;</div><div class="line">                                // do anything with response</div><div class="line">                                textView.setText(response.toString());</div><div class="line">                            &#125;</div><div class="line">                            @Override</div><div class="line">                            public void onError(ANError error) &#123;</div><div class="line">                                // handle error</div><div class="line">                                notificationManager.notify(NOTIFICATION_ID_DOWNLOAD,</div><div class="line">                                        getNotification(&quot;Upload Failed&quot;,&quot;smile.mp3&quot;, -1));</div><div class="line">                                progressBar.setProgress(0);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="七牛存储基本概念"><a href="#七牛存储基本概念" class="headerlink" title="七牛存储基本概念"></a><a href="https://developer.qiniu.com/kodo/manual/concepts" target="_blank" rel="external">七牛存储基本概念</a></h3><h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><p>资源是七牛云存储服务中的逻辑存储单元。对于每一个账号，该账号里存放的每个资源都有唯一的 空间 与 键(Key) 标识。资源键名是一个字符串，例如：level1/level2/example1.jpg，它可以包含任意字符（包括 UTF-8 编码形式的 Unicode 字符）。</p>
<p>使用者可以在上传资源时为其指定一个方便管理的键名，通过前缀来达到类似于文件目录的分类和层次效果。例如对于一个网站的资源，我们可以用如下键名命名资源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">index.html</div><div class="line">features/index.html</div><div class="line">imgs/features/feature1.png</div><div class="line">about.html</div></pre></td></tr></table></figure></p>
<h4 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h4><p>空间是资源的组织管理单位，一个资源必然位于某个空间中。可以为每个空间设置一系列的属性，以对资源提供合理的管理动作。 常见的属性有：</p>
<ol>
<li>将空间设置为公开或私有，以控制对空间内资源的访问权限。</li>
<li>设置资源的数据处理样式，以便于用简短方式对资源进行处理。</li>
</ol>
<h4 id="开发者和用户"><a href="#开发者和用户" class="headerlink" title="开发者和用户"></a>开发者和用户</h4><p>开发者是七牛云存储服务的直接使用者，用户是开发者所推出产品的使用者即七牛云存储服务的间接使用者。<br><img src="https://ok0kc3ycj.qnssl.com/kodo-image/png/usecase.png" alt=""></p>
<h4 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h4><p>键值对 (Key-Value) 是一个常用的数据结构概念，通常又称为字典 (Dictionary) 或映射 (Map)。每个存放到该数据结构中的值 (Value) 都对应一个全局唯一的键 (Key)。该数据结构的特征是以空间换时间，通过键查询值通常是比较快速的过程。</p>
<h4 id="存储区域"><a href="#存储区域" class="headerlink" title="存储区域"></a>存储区域</h4><p>存储区域是在创建空间时指定的，一旦指定后就不允许修改。存储区域表示七牛云对象存储服务的数据中心所在区域，物理位置。您可以根据费用、请求来源等综合考虑选择合适的存储区域。一般来说，选择离您近的存储区域访问速度更快。</p>
<p>存储区域是数个存储机房的逻辑联合体，提供一组独立的具体访问域名，将流量导向最适合的存储机房。</p>
<p>七牛云对象存储目前提供四个存储区域：华东、华北、华南、北美，您可以根据实际需求选用，以获取最高访问性能和最佳用户体验。</p>
<p>注意：不同存储区域的数据并非互为备份副本，比如存储在华东的文件，不能通过华北访问域名访问。</p>
<h4 id="访问密钥-AK-SK"><a href="#访问密钥-AK-SK" class="headerlink" title="访问密钥 (AK/SK)"></a>访问密钥 (AK/SK)</h4><p>Access Key 与 Secret Key 是七牛颁发的一对密钥，用于对操作请求进行授权签名。</p>
<ol>
<li>用户凭证 (Access Key) 简称 AK ，是七牛云存储颁发给用户的标识。用户将用户凭证放入访问请求，以便七牛云存储识别访问者的身份。</li>
<li>签名密钥 (Secret Key) 简称 SK ，是七牛云存储颁发给用户，用于对访问请求签名的字串。用户使用签名密钥对访问请求的核心要素进行签名，获得请求认证 令牌。用户将令牌随同访问请求一起发送至七牛云存储服务，七牛云存储将对令牌进行校验，以确认用户请求的合法性。<br>用户凭证和签名密钥成对颁发，不会重复。一个用户可以拥有两对用户凭证和签名密钥，用于不同的访问。</li>
</ol>
<h4 id="存储机房"><a href="#存储机房" class="headerlink" title="存储机房"></a>存储机房</h4><p>存储机房是部署了一套完整的七牛云存储集群的单一数据中心机房，每个机房均配备多个 IP 作为上传和下载入口，并有对应的访问域名指向这些 IP。</p>
<h4 id="编程模型"><a href="#编程模型" class="headerlink" title="编程模型"></a><a href="https://developer.qiniu.com/kodo/manual/programming-model" target="_blank" rel="external">编程模型</a></h4><p><img src="https://odum9helk.qnssl.com/FuAHhZgiYaHTDqLritFe1K85AVrI" alt=""></p>
<p>七牛云存储服务是以<a href="https://developer.qiniu.com/kodo/manual/concepts#key-value" target="_blank" rel="external">键值对</a>方式提供非结构化资源存储服务。向业务服务器提供资源管理服务，向客户端提供资源上传和下载服务。</p>
<p>关键的几个交互过程：</p>
<p><strong>上传</strong></p>
<p>客户端在上传资源到七牛云存储之前要先从业务服务器获取一个有效的<a href="https://developer.qiniu.com/kodo/manual/upload-token" target="_blank" rel="external">上传凭证</a>，因此需要先后和两个服务端打交道。<br><img src="https://odum9helk.qnssl.com/Fmy1Y_s9I4oCPYuMGDrvYxCRv2FM" alt=""></p>
<p>如果有设置回调，则上传完成时七牛云存储会自动发起回调到指定的业务服务器。<br><img src="https://odum9helk.qnssl.com/FkPZ31ECmtGnEisOahMKc5kQkuRr" alt=""></p>
<p><strong>下载</strong></p>
<p>公开资源不需要对应的下载凭证，客户端可以直接从七牛云存储下载对应资源。私有资源需要对应的下载凭证，因此必须先和业务服务器打交道。</p>
<p>按照实际的使用场景，客户端对于内容的展示非常类似一个动态网页的生成过程，因此无论该页面内容是公开还是私有，均需要从业务服务器获取展示该页面的动态布局信息。所以通常显示过程也是需要先后和业务服务器及七牛云存储服务打交道。</p>
<h4 id="关键原则"><a href="#关键原则" class="headerlink" title="关键原则"></a>关键原则</h4><p>这个模型的关键点如下：</p>
<ol>
<li>整个架构中需要一个业务服务器组件。</li>
<li>无论如何，访问密钥（AK/SK）均不得包含在客户端的分发包中（如二进制代码、配置文件或网页中）。</li>
<li>SecretKey不得在任何场景中的公网上传输，更不得传输到客户端。</li>
<li>业务服务器端应维持一个用于管理资源元数据的数据库和一个用于管理最终用户账号信息的数据库。</li>
<li>原则上客户端和七牛云存储之间的交互只有上传和下载，不应使用任何其他的API。</li>
</ol>
<h4 id="安全机制"><a href="#安全机制" class="headerlink" title="安全机制"></a>安全机制</h4><p>数据安全性是云存储服务的重中之重。云存储的安全机制主要需要考虑以下几个因素：</p>
<p>如何判断该请求方是否合法，且对目标空间有相应的访问权限。<br>因为服务的访问协议同时支持 HTTP 和 HTTPS，服务端需要判断收到的请求是否经过篡改。<br>相比上传新资源，覆盖文件或删除已有资源拥有更高的风险。因此对上传或修改动作，需要确认请求方是否拥有修改或删除的权限。<br>在使用七牛云存储服务的过程中，需要考虑安全机制的场景主要有如下几种：</p>
<p>上传资源<br>访问资源<br>管理和修改资源<br>这三个场景需要考虑不同的安全因素，因此七牛针对性的提供了三种安全机制：<a href="https://developer.qiniu.com/kodo/manual/upload-token" target="_blank" rel="external">上传凭证</a>、<a href="https://developer.qiniu.com/kodo/manual/download-token" target="_blank" rel="external">下载凭证</a>和<a href="https://developer.qiniu.com/kodo/manual/access-token" target="_blank" rel="external">管理凭证</a>。</p>
<p>因为凭证的生成需要用到SecretKey，因此该生成动作不应在不受信任的环境中进行。需要注意的是，开发者绝不能将密钥包含在分发给最终用户的程序中，无论是包含在配置文件中还是二进制文件中都会带来非常大的密钥泄漏风险。</p>
<p>推荐的模型如下所示：<br><img src="https://ok0kc3ycj.qnssl.com/kodo-image/png/token.png" alt=""></p>
<p><strong>上传凭证（UploadToken）</strong><br>客户端上传前需要先获取从服务端颁发的上传凭证，并在上传资源时将上传凭证包含为请求内容的一部分。不带凭证或带非法凭证的请求将返回 HTTP 错误码 401，代表认证失败。</p>
<p>生成上传凭证时需要指定以下要素：</p>
<p><strong>权限</strong>，指定上传的目标空间或允许覆盖的指定资源。<br><strong>凭证有效期</strong>，即一个符合Unix时间戳规范的数值，单位为秒。<br>注意： 因为时间戳的创建和验证在不同的服务端进行（在业务服务器创建，在云存储服务器验证），因此开发者的业务服务器需要尽可能校准时间，否则可能出现凭证刚创建就过期等各种奇怪的问题。<br>可选择设置的最终用户标识 ID。这是为了让业务服务器在收到结果回调时能够识别产生该请求的最终用户信息。</p>
<p>我们使用<a href="https://developer.qiniu.com/kodo/manual/put-policy" target="_blank" rel="external">上传策略 (PutPolicy)</a>保存和传递这些设置。关于上传策略和上传凭证的生成细节，请查阅上传凭证。</p>
<p><strong>下载凭证（DownloadToken）</strong><br>下载私有资源的请求需要带一个合法的下载凭证。不带凭证或带非法凭证的请求将返回 HTTP 错误码 401，代表认证失败。</p>
<p>与上传凭证相比，下载凭证的作用比较简单：</p>
<p>保证请求发起者拥有对目标空间的访问权限。<br>保证服务端收到的下载请求内容未经中途篡改，具体包括目标资源的 URI 和该访问请求的有效期信息均应未受到篡改。<br>关于下载凭证的生成细节，请查阅下载凭证。</p>
<p><strong>防盗链</strong><br>下载还有一种常见的场景，即公开资源的防盗链，例如禁止特定来源域名的访问，禁止非浏览器发起的访问等。</p>
<p>我们可以通过 HTTP 协议支持的 Referer 机制即<a href="https://developer.qiniu.com/kodo/glossary/h" target="_blank" rel="external">HTTP Referer</a>来进行相应的来源识别和管理。</p>
<p>防盗链是一个系统设置，不影响开发工作。如发现有盗链情况，开发者可在七牛开发者平台里的 融合CDN加速 中的 高级配置 进行设置。</p>
<p><strong>管理凭证（AccessToken）</strong></p>
<p>在管理现有资源时，例如查看资源元数据、删除或移动资源等，通常需要带一个合法的管理凭证。不带凭证或带非法凭证的管理请求将返回 HTTP 错误码 401，代表认证失败。</p>
<p>管理凭证的作用与下载凭证比较类似：</p>
<p>保证请求发起者拥有对目标空间的管理权限。<br>保证服务端收到的管理请求内容未经中途篡改，具体包括代表管理动作的 URI 和该管理动作的参数信息均应未受到篡改。<br>关于管理凭证的生成细节，请查阅管理凭证。</p>
<p><strong>跨域访问</strong><br>出于安全的考虑，Web 浏览器从很早之前就定下同域安全策略的标准，默认情况下同一域名下的页面只能向同域（包括 CNAME 域名、端口）下的 URL 发送所有类型的 HTTP 请求。而向不同域的地址发送非 GET 请求时，默认情况下只能返回同域安全策略错误。</p>
<p>对此，在发起上传或下载请求的时候，七牛的服务会返回相应的支持跨域的 Header：</p>
<p>上传(upload.qiniu.com)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Headers: X-File-Name, X-File-Type, X-File-Size</div><div class="line">Access-Control-Allow-Methods: OPTIONS, HEAD, POST</div><div class="line">Access-Control-Allow-Origin: *</div></pre></td></tr></table></figure></p>
<p>下载(<bucket>.qiniudn.com)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: *</div></pre></td></tr></table></figure></bucket></p>
<h4 id="上传凭证Token在线生成"><a href="#上传凭证Token在线生成" class="headerlink" title="上传凭证Token在线生成"></a>上传凭证Token在线生成</h4><p><a href="http://jsfiddle.net/gh/get/extjs/4.2/icattlecoder/jsfiddle/tree/master/uptoken" target="_blank" rel="external">Token</a></p>
<p><strong>算法</strong></p>
<p>1.构造上传策略：<br>用户根据业务需求，确定上传策略要素，构造出具体的上传策略。例如用户要向空间 my-bucket 上传一个名为 sunflower.jpg 的图片，授权有效期截止到 2015-12-31 00:00:00（该有效期指上传完成后在七牛生成文件的时间，而非上传的开始时间），并且希望得到图片的名称、大小、宽高和校验值。那么相应的上传策略各字段分别为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">scope = &apos;my-bucket:sunflower.jpg&apos;</div><div class="line">deadline = 1451491200</div><div class="line">returnBody = &apos;&#123;</div><div class="line">      &quot;name&quot;: $(fname),</div><div class="line">      &quot;size&quot;: $(fsize),</div><div class="line">      &quot;w&quot;: $(imageInfo.width),</div><div class="line">      &quot;h&quot;: $(imageInfo.height),</div><div class="line">      &quot;hash&quot;: $(etag)</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure></p>
<p>2.将上传策略序列化成为JSON：</p>
<p>用户可以使用各种语言的 JSON 库，也可以手工拼接字符串。序列化后，应得到如下形式的字符串（字符串值以外部分不含空格或换行）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">putPolicy =</div><div class="line">&apos;&#123;</div><div class="line">  &quot;scope&quot;: &quot;my-bucket:sunflower.jpg&quot;,</div><div class="line">  &quot;deadline&quot;:1451491200,</div><div class="line">  &quot;returnBody&quot;:</div><div class="line">  &quot;&#123;</div><div class="line">    \&quot;name\&quot;:$(fname),</div><div class="line">    \&quot;size\&quot;:$(fsize),</div><div class="line">    \&quot;w\&quot;:$(imageInfo.width),</div><div class="line">    \&quot;h\&quot;:$(imageInfo.height),</div><div class="line">    \&quot;hash\&quot;:$(etag)</div><div class="line">   &#125;&quot;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure></p>
<p>3.对 JSON 编码的上传策略进行URL 安全的 Base64 编码，得到待签名字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">encodedPutPolicy = urlsafe_base64_encode(putPolicy)</div><div class="line"></div><div class="line">#实际值为：</div><div class="line">encodedPutPolicy = &quot;eyJzY29wZSI6Im15LWJ1Y2tldDpzdW5mbG93ZXIuanBnIiwiZGVhZGxpbmUiOjE0NTE0OTEyMDAsInJldHVybkJvZHkiOiJ7XCJuYW1lXCI6JChmbmFtZSksXCJzaXplXCI6JChmc2l6ZSksXCJ3XCI6JChpbWFnZUluZm8ud2lkdGgpLFwiaFwiOiQoaW1hZ2VJbmZvLmhlaWdodCksXCJoYXNoXCI6JChldGFnKX0ifQ==&quot;</div></pre></td></tr></table></figure></p>
<p>4.使用访问密钥（AK/SK）对上一步生成的待签名字符串计算HMAC-SHA1签名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sign = hmac_sha1(encodedPutPolicy, &quot;&lt;SecretKey&gt;&quot;)</div><div class="line"></div><div class="line">#假设 SecretKey 为 MY_SECRET_KEY，实际签名为：</div><div class="line">sign = &quot;c10e287f2b1e7f547b20a9ebce2aada26ab20ef2&quot;</div></pre></td></tr></table></figure></p>
<p>注意：签名结果是二进制数据，此处输出的是每个字节的十六进制表示，以便核对检查。</p>
<p>5.对签名进行URL安全的Base64编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">encodedSign = urlsafe_base64_encode(sign)</div><div class="line"></div><div class="line">#最终签名值为：</div><div class="line">encodedSign = &quot;wQ4ofysef1R7IKnrziqtomqyDvI=&quot;</div></pre></td></tr></table></figure></p>
<p>6.将访问密钥（AK/SK）、encodedSign 和 encodedPutPolicy 用英文符号 : 连接起来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">uploadToken = AccessKey + &apos;:&apos; + encodedSign + &apos;:&apos; + encodedPutPolicy</div><div class="line"></div><div class="line">#假设用户的 AccessKey 为 MY_ACCESS_KEY ，则最后得到的上传凭证应为：</div><div class="line">uploadToken = &quot;MY_ACCESS_KEY:wQ4ofysef1R7IKnrziqtomqyDvI=:eyJzY29wZSI6Im15LWJ1Y2tldDpzdW5mbG93ZXIuanBnIiwiZGVhZGxpbmUiOjE0NTE0OTEyMDAsInJldHVybkJvZHkiOiJ7XCJuYW1lXCI6JChmbmFtZSksXCJzaXplXCI6JChmc2l6ZSksXCJ3XCI6JChpbWFnZUluZm8ud2lkdGgpLFwiaFwiOiQoaW1hZ2VJbmZvLmhlaWdodCksXCJoYXNoXCI6JChldGFnKX0ifQ==&quot;</div></pre></td></tr></table></figure></p>
<p>注意：为确保客户端、业务服务器和七牛服务器对于授权截止时间的理解保持一致，需要同步校准各自的时钟。频繁返回 401 状态码时请先检查时钟同步性与生成 deadline 值的代码逻辑。</p>
<h4 id="上传凭证Token本地生成"><a href="#上传凭证Token本地生成" class="headerlink" title="上传凭证Token本地生成"></a>上传凭证Token本地生成</h4><p><a href="https://github.com/qiniu/java-sdk/blob/master/src/main/java/com/qiniu/util/Auth.java" target="_blank" rel="external">Auth.java</a></p>
<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="报错”incorrect-region-please-use-up-z2-qiniu-com”"><a href="#报错”incorrect-region-please-use-up-z2-qiniu-com”" class="headerlink" title="报错”incorrect region, please use up-z2.qiniu.com”"></a>报错”incorrect region, please use up-z2.qiniu.com”</h3><p>因为空间与上传域名有对应关系，详见<a href="https://developer.qiniu.com/kodo/manual/region-endpoint" target="_blank" rel="external">访问域名和存储区域</a></p>
<p>up-z2对应华南<br>UP HTTP 上传    <a href="http://up-z2.qiniu.com" target="_blank" rel="external">http://up-z2.qiniu.com</a><br>上传源站 HTTP 地址, 适用于服务器端上传<br><a href="http://upload-z2.qiniu.com" target="_blank" rel="external">http://upload-z2.qiniu.com</a><br>上传 HTTP 加速地址, 适用于客户端上传</p>
<p>up.qiniu.com对应华东<br>UP HTTP 上传    <a href="http://up.qiniu.com" target="_blank" rel="external">http://up.qiniu.com</a><br>上传源站 HTTP 地址, 适用于服务器端上传<br><a href="http://upload.qiniu.com" target="_blank" rel="external">http://upload.qiniu.com</a><br>上传 HTTP 加速地址, 适用于客户端上传</p>
<h3 id="直传文件"><a href="#直传文件" class="headerlink" title="直传文件"></a><a href="https://developer.qiniu.com/kodo/api/upload" target="_blank" rel="external">直传文件</a></h3><p>upload接口，用于在一次 HTTP 会话中上传单一的一个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;form method=&quot;post&quot; action=&quot;http://upload.qiniu.com/&quot;</div><div class="line"> enctype=&quot;multipart/form-data&quot;&gt;</div><div class="line">  &lt;input name=&quot;key&quot; type=&quot;hidden&quot; value=&quot;&lt;resource_key&gt;&quot;&gt;</div><div class="line">  &lt;input name=&quot;x:&lt;custom_name&gt;&quot; type=&quot;hidden&quot; value=&quot;&lt;custom_value&gt;&quot;&gt;</div><div class="line">  &lt;input name=&quot;token&quot; type=&quot;hidden&quot; value=&quot;&lt;upload_token&gt;&quot;&gt;</div><div class="line">  &lt;input name=&quot;file&quot; type=&quot;file&quot; /&gt;</div><div class="line">  &lt;input name=&quot;crc32&quot; type=&quot;hidden&quot; /&gt;</div><div class="line">  &lt;input name=&quot;accept&quot; type=&quot;hidden&quot; /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line"></div><div class="line">POST / HTTP/1.1</div><div class="line">Host:           upload.qiniu.com</div><div class="line">Content-Type:   multipart/form-data; boundary=&lt;frontier&gt;</div><div class="line">Content-Length: &lt;multipartContentLength&gt;</div><div class="line"></div><div class="line">--&lt;frontier&gt;</div><div class="line">Content-Disposition:       form-data; name=&quot;token&quot;</div><div class="line"></div><div class="line">&lt;uploadToken&gt;</div><div class="line">--&lt;frontier&gt;</div><div class="line">Content-Disposition:       form-data; name=&quot;key&quot;</div><div class="line"></div><div class="line">&lt;key&gt;</div><div class="line">--&lt;frontier&gt;</div><div class="line">Content-Disposition:       form-data; name=&quot;&lt;xVariableName&gt;&quot;</div><div class="line"></div><div class="line">&lt;xVariableValue&gt;</div><div class="line">--&lt;frontier&gt;</div><div class="line">Content-Disposition:       form-data; name=&quot;crc32&quot;</div><div class="line"></div><div class="line">&lt;crc32&gt;</div><div class="line">--&lt;frontier&gt;</div><div class="line">Content-Disposition:       form-data; name=&quot;accept&quot;</div><div class="line"></div><div class="line">&lt;acceptContentType&gt;</div><div class="line">--&lt;frontier&gt;</div><div class="line">Content-Disposition:       form-data; name=&quot;file&quot;; filename=&quot;&lt;fileName&gt;&quot;</div><div class="line">Content-Type:              application/octet-stream</div><div class="line">Content-Transfer-Encoding: binary</div><div class="line"></div><div class="line">&lt;fileBinaryData&gt;</div><div class="line">--&lt;frontier&gt;--</div></pre></td></tr></table></figure></p>
<h3 id="如何在空间下创建文件夹？"><a href="#如何在空间下创建文件夹？" class="headerlink" title="如何在空间下创建文件夹？"></a>如何在空间下创建文件夹？</h3><p>在空间中不能创建文件夹，但是为了区分不同的文件，可以这么做:<br>文件名以 2017/1/12/1.img , 即创建这样的虚拟目录 2017/1/12/ 做区分。</p>
<h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><h3 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h3><p>ETag为HTTP协议的一部分，它是 HTTP 提供web缓存验证机制之一。以这种方式使用etag类似于指纹,他们可以通过快速比较来确定两个资源是否相同。</p>
<h3 id="Exif"><a href="#Exif" class="headerlink" title="Exif"></a>Exif</h3><p>Exif 意指可交换图像文件格式，专门为数码相机的照片所设计，可以记录数码照片的属性信息和拍摄数据。Exif 信息是由数码相机在拍摄过程中采集的一系列信息，然后这些信息放置在我们熟知的 JPEG/TIFF 文件的头部。</p>
<h3 id="HTTP-Referer"><a href="#HTTP-Referer" class="headerlink" title="HTTP Referer"></a>HTTP Referer</h3><p>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器藉此可以获得一些信息用于处理。</p>
<h3 id="HMAC-SHA1"><a href="#HMAC-SHA1" class="headerlink" title="HMAC-SHA1"></a>HMAC-SHA1</h3><p>HMAC是哈希运算消息认证码 (Hash-based Message Authentication Code)，HMAC运算利用哈希算法，以一个密钥和一个消息为输入，生成一个消息摘要作为输出。您可以使用它同时验证数据的完整性和消息的真实性。HMAC-SHA1签名算法是一种常用的签名算法，用于对一段信息进行生成签名摘要。</p>
<h3 id="键-key"><a href="#键-key" class="headerlink" title="键 (key)"></a>键 (key)</h3><p>空间中资源的唯一标识符。空间中的每个资源都有一个对应的键。因为空间和键一起唯一标识每一个资源，您可以认为七牛云存储是基于空间＋键和资源本身之间的基本数据映射。</p>
<p>例如：<a href="http://78re52.com1.z0.glb.clouddn.com/resource/AllEast.jpg" target="_blank" rel="external">http://78re52.com1.z0.glb.clouddn.com/resource/AllEast.jpg</a></p>
<p>78re52.com1.z0.glb.clouddn.com是空间的绑定域名<br>resource/AllEast.jpg是键</p>
<h3 id="签名密钥"><a href="#签名密钥" class="headerlink" title="签名密钥"></a>签名密钥</h3><p>签名密钥 (Secret Key) 简称 SK ，是七牛云存储颁发给用户，用于对访问请求签名的字串。用户使用签名密钥对访问请求的核心要素进行签名，获得请求认证令牌。用户将令牌随同访问请求一起发送至七牛云存储服务，七牛云存储将对令牌进行校验，以确认用户请求的合法性。</p>
<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON（JavaScript Object Notation）一种轻量级的数据交换格式，具有良好的可读和便于快速编写的特性。可在不同平台之间进行数据交换。JSON采用兼容性很高的、完全独立于语言文本格式，同时也具备类似于C语言的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）体系的行为。这些特性使JSON成为理想的数据交换语言。</p>
<h3 id="令牌-Token"><a href="#令牌-Token" class="headerlink" title="令牌 (Token)"></a>令牌 (Token)</h3><p>令牌是用户访问七牛云存储时，进行身份验证的凭证。当用户将一个Bucket设置为私有后，在访问七牛云存储时，必须通过身份验证。用户将访问请求中的一些要素整合起来，用签名密钥对其加密，得到令牌。然后将令牌随同请求一起发送至七牛云存储。用户可以在令牌中指定请求的时效（七牛云存储统一使用UTC时间计算令牌有效期），防止请求被非法使用。</p>
<h3 id="Unix-时间戳"><a href="#Unix-时间戳" class="headerlink" title="Unix 时间戳"></a>Unix 时间戳</h3><p>Unix时间戳，是一种时间表示方式，定义为从1970年01月01日00时00分00秒起至现在的总秒数。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://developer.qiniu.com/kodo/sdk/android" target="_blank" rel="external">Android SDK</a><br><a href="https://developer.qiniu.com/kodo/sdk/java" target="_blank" rel="external">Java SDK</a><br><a href="https://developer.qiniu.com/kodo/kb/seven-niuyun-upload-download-instructions" target="_blank" rel="external">七牛云上传下载操作指南</a><br><a href="http://78re52.com1.z0.glb.clouddn.com/tsdocs/%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86.pdf" target="_blank" rel="external">七牛云存储必备知识.pdf</a><br><a href="http://78re52.com1.z0.glb.clouddn.com/tsdocs/%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E5%9F%BA%E7%A1%80%E4%B8%8A%E4%BC%A0%E6%9C%8D%E5%8A%A1.pdf" target="_blank" rel="external">七牛云存储文件上传-基础上传服务.pdf</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/2017-03-26_173401.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;了解清楚概念，认真阅读官方文档，结合参考示例，基于常识思考，多动手实践。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Application" scheme="http://ipcreator.me/tags/Application/"/>
    
      <category term="Fast Android Networking" scheme="http://ipcreator.me/tags/Fast-Android-Networking/"/>
    
  </entry>
  
  <entry>
    <title>Best Practice of Deep Thinking</title>
    <link href="http://ipcreator.me/2017/03/26/MyView/deep-thinking-change-my-life/"/>
    <id>http://ipcreator.me/2017/03/26/MyView/deep-thinking-change-my-life/</id>
    <published>2017-03-26T00:29:06.000Z</published>
    <updated>2017-03-30T02:04:03.454Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://zhibimo.com/read/xiaolai/zuo-xiang-qi-cheng/images/meditation-posture.png" alt=""></p>
<blockquote>
<p>You’re the master of  your brain, not the other way around.<br>Brain decides your thinking, talking, action…<br>For growing up, Control and  Update your brain is the only way .</p>
</blockquote>
<h1 id="坐享其成"><a href="#坐享其成" class="headerlink" title="坐享其成"></a><a href="http://zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng" target="_blank" rel="external">坐享其成</a></h1><p>也许是最简单的大脑锻炼方式，这也是人类莫名其妙地已经运用了两千五百年以上的大脑锻炼方式。已经有足够多的科学研究证明，它能使你的大脑皮层表面积加大，能使你的灰质变厚，它也能增强人们的免疫系统，它还能让人们摆脱抑郁症……</p>
<p>尽管简单，但也相当神奇。<br>虽然神奇，却又非常简单。</p>
<a id="more"></a>
<h2 id="为什么要用“坐享”这个词？"><a href="#为什么要用“坐享”这个词？" class="headerlink" title="为什么要用“坐享”这个词？"></a>为什么要用“坐享”这个词？</h2><p>“坐享”，是我杜撰的一个词 —— 当然，是一个有理由的杜撰。</p>
<p>所谓知识（或者知识的基石，即，概念）的三个基本要素，分别是：</p>
<blockquote>
<p>“是什么”（what）<br>“为什么”（why）<br>“怎么做/用”（how）</p>
</blockquote>
<p>人类是可以用各种手段积累知识的，这也是人类优于其它动物的一个重要因素。</p>
<p>说实话，人类很神奇。历史上在很多领域里，经常是在完全不知道“是什么”（what）、“为什么”（why） 的情况下，却早已经熟练掌握“怎么做”（how）……</p>
<p>这样的例子很多。最明显的例子是性。除了过往人类在这个领域里长期的愚昧之外，即便是到了今天也还是如此 —— “潮吹”究竟是什么、为什么到现在也没有科学的定论，可早就有大量的人掌握了怎么做 —— 地球上第一个为人所知的、系统地掌握此项技能的，是个日本人，名字叫加藤鹰。</p>
<p>另外一个例子是赌博。人类貌似从一开始就带着好赌的基因，几乎每个人都天然会赌，甚至在不知道概率是什么的情况下（要知道概率论的启蒙要到 17 世纪才出现）就不仅能够熟练地赌博，还能设计出对庄家倾斜的赌博游戏……</p>
<p>嗯，黄、赌、毒。你看，最后一个也是如此，很多人并不知道它是什么，也不知道为什么，反正知道怎么用。其实人类在早期的时候，医也好、药也罢，都是如此的，是什么完全搞错、为什么完全弄不明白，但反正就是直接用……</p>
<p>从这个角度望过去，不管三七二十一，用起来再说，从来就是人类的智慧。你现在知道为什么我主张不要闲着没事儿就学外语，而是一上来就要用了罢？（详见<a href="http://zhibimo.com/read/xiaolai/everyone-can-use-english/" target="_blank" rel="external">《人人都能用英语》</a>）</p>
<p>事实上，深入了解“怎么做”（how） 其实是很难的。别看人类直立行将近 100 万年，在电子工业高度发达之后的相当长一段时间里，科学家们费尽心机也造不出一个能像人一样双腿直立行走的机器人 —— 2015 年的时候，这个难题终于被攻克了，前后也居然花了全球精英差不多五十年的努力……</p>
<p>“坐享”这个词是我刻意造的中文词汇。在英文中，它叫 Meditation，翻译过来是“冥想”；在东方，它叫打坐、坐禅、禅修、内视、静观…… 其实“静坐”倒是个不错的词，可惜在中国它有另外的含义，不敢乱用。于是，只好生生编造了一个词：坐享。</p>
<p>为什么一定要刻意编造一个词呢？因为它现在与过往不同了，现在科学已经可以清楚地解释它的三个方面了：它是什么？为什么？怎么做？所以我们确实有必要把这个今天已经被科学证明为有效的大脑锻炼方式与过往不那么清楚或者干脆错得离谱的解释尽量区分开来。当然，另外一方面是，<a href="http://zhibimo.com/read/xiaolai/reborn-every-7-years/A10.html" target="_blank" rel="external">我们对自己的操作系统有洁癖，只喜欢使用清晰、准确、必要的概念</a>。</p>
<p>这有点像什么呢？当我们知道木头可以被点燃其实并不是所谓的“燃素”（Phlogiston）在起作用，而是我们肉眼根本看不见的空气里的氧引发了燃烧之后，我们需要抛弃过往的、采纳新的解释一样。这也好像那个被大伙出离愤怒地烧死的哥白尼用太阳替换了地球，“将太阳放到了宇宙中心”一样，我们的生活并没有因此发生变化，在我们的感受上来看，太阳依然是早晨从东边升起来，晚上到西边落下去 —— 但事实就是事实，过去我们以为的事实是错的，庆幸的是，我们毕竟还是知道了正确的事实。</p>
<p>也许释迦牟尼是地球上第一个知道如何坐享的人，并由此构建了一个系统的、庞杂的、却也足够完整的解释理论：佛教。如此算来，人类练习坐享，因为坐享获得益处迄今为止至少有两千五百多年了，真是神奇得很……</p>
<h2 id="什么是元认知能力？"><a href="#什么是元认知能力？" class="headerlink" title="什么是元认知能力？"></a>什么是元认知能力？</h2><p>现在从科学角度看来，坐享无非就是通过一种简单合理的方式锻炼自己的“元认知能力”。</p>
<p>这是个非常重要的概念，因为它几乎决定了一个人是否有机会成长。所谓的元认知，指的就是“认知的认知”。也就是说，你能认知到你的认知，虽然有点拗口，但其实也不是那么难以理解。当你在思考的时候，你能意识到自己在思考，进一步还能意识到自己在思考什么，又进一步还能判断自己的思考方式、思考结果是否正确，更进一步还能纠正自己错误的思考方式或者结果，这就是元认知能力。</p>
<p>在<a href="http://zhibimo.com/read/xiaolai/ba-shi-jian-dang-zuo-peng-you/" target="_blank" rel="external">《把时间当作朋友》</a>里，第一章里我就提到元认知能力。拥有元认知能力的我们，思考可以非常复杂 —— 复杂到“我们甚至可以思考我们的思考方式和思考结果是否确实是合理的思考方式和思考结果。”</p>
<p>元认知能力几乎是一切学习与进步的最底层的、最根本的能力。一个人的潜力有多大，几乎完全取决于他的元认知能力有多强。人群中有相当数量的人甚至意识不到自己的思考，至于思考得对不对，过程是否有疏漏，结果合不合理，也完全无意识，更谈不上纠正自己的思考了。很多所谓个性强、脾气大的人，从最底层上来看，其实就是元认知能力困乏而已。因为这样的人其实没有分清楚谁是主人，谁是仆人，他们不明白这个很重要的道理：你的大脑并不是你，你的大脑是属于你的一个器官…… 而不是反过来，你竟然隶属于你的大脑。</p>
<p>弗洛伊德的说法是这样的：本我是马，自我是马车夫。马是驱动力，马车夫给马指引方向。自我要驾驭本我，但马可能不听话，二者就会僵持不下，直到一方屈服。</p>
<p>用今天的说法，这个类比可能应该是：认知能力是马，元认知能力是马车夫……</p>
<p>你看，<a href="http://zhibimo.com/read/xiaolai/reborn-every-7-years/A08.html" target="_blank" rel="external">我们在不断升级我们的概念</a>，以此获得进步。<br>元认知能力的强弱，与一个人大脑皮层的面积和灰质的厚度有着正相关的联系。过去人们误认为脑壳大的人聪明，现在我们知道了，决定一个人聪明与否的并不是脑壳大小，而是大脑皮层的面积。大脑皮层表面有很多沟回，沟回的多少，决定了最终大脑皮层表面积的大小，人和人之间的大脑皮层表面积大小甚至可能相差一倍以上。</p>
<p>可实际上，并不是谁决定谁，而是相辅相成的关系。通过不断有效地学习，我们的大脑获得更多的锻炼，最终的结果是大脑皮层表面积加大，灰质变厚；而反过来，大脑皮层表面积加大，灰质变厚，也会使学习能力有更大的扩展空间……</p>
<p>元认知能力的获得，一方面与知识的习得有关系，因为任何学习过程本质上来看都是“制造更多的沟回”；而另外一方面，我们也可以像锻炼胳膊上的二头肌一样通过一定的方式进行锻炼大脑 —— 坐享就是这种锻炼。</p>
<p>通过放松大脑，长时间只专注于身体的某一部分，坐享可以让一个人逐步通过运用不断加强自己的注意力。注意力，是认知的最重要方式之一。而在不断把被分散的注意力重新集中起来的过程中，练习者可以渐渐感受到、并越来越熟练地应用自己的元认知能力 —— 当他认知到自己的认知并没有按照应该的方式操作的时候，他会运用自己的元认知能力纠正自己的认知及其操作方式。</p>
<p>这种练习看似简单，却又实际意义巨大。不要轻视简单的练习，我们身体的每一个部分，其实都可以通过非常简单的方式加强。不说别的，走路够简单吧？每天多走一小时，对身体的帮助可以说是无限大 —— 即便这么简单的事情，也很少有人愿意做，只不过是因为他们并没有深刻意识到那么做的种种好处，更无法想象不这么做的巨大害处。</p>
<p>每天坐享一刻钟或者一小时，已经是足够的大脑锻炼强度。已经有足够的科学研究证明这样做带来的巨大好处，除了大脑皮层面积增大、灰质变厚之外，它还能加强人体的免疫系统。更为重要的是，当一个人的元认知能力加强的时候，他更容易转变为进取型人格，更难被情绪所左右，相对更容易冷静，更容易清楚地思考…… 无论从哪方面看，都是能够极大<a href="http://zhibimo.com/read/xiaolai/reborn-every-7-years/B06.html" target="_blank" rel="external">提高生活品质</a>的活动。</p>
<h2 id="如何有效提高元认知能力？"><a href="#如何有效提高元认知能力？" class="headerlink" title="如何有效提高元认知能力？"></a><a href="/2017/01/02/MyShare/iGet/lixiaolai-lead-to-freedom-of-wealth/">如何有效提高元认知能力？</a></h2><h3 id="一、坐享"><a href="#一、坐享" class="headerlink" title="一、坐享"></a>一、坐享</h3><p>这是个现今已经被科学解释得很清楚的很简单很朴素的大脑体操，没必要去神化它，秘化它——自然而然地用就是了。</p>
<h3 id="二、兴趣"><a href="#二、兴趣" class="headerlink" title="二、兴趣"></a>二、兴趣</h3><p>全神贯注是另外一种刻意训练元认知能力的有效方法——很违背直觉的小方法<br>通过进入全神贯注状态而使元认知能力彻底放松……<br>教师最好的学习方法，大多数人直至成年，并没有养成哪怕仅仅一个属于自己的真正兴趣。</p>
<p>被动全神贯注，来自于外部的控制。小说、电影、游戏的设计者们是掠夺他人注意力的专家，他们知道如何设计才能让人们兴奋，让人们上瘾，让人们离不开，甚至不惜动用一切心理学研究成果去把控自己的猎物。</p>
<p>主动全神贯注，专注于提升某个特定的技能。在任何一项兴趣中，都有“必须可以练习才能获得进步的技能”，要满足这个要求，那因兴趣而产生的全神贯注，才可能是主动的，才可能是对刻意训练元认知能力有帮助的。</p>
<p>在全神贯注地磨练任何一项技能之时，元认知能力彻底放松，而注意力全部用来去感受每一个感官的刺激，进而调整自己的每一个动作，甚至每个意识与理解，最终达到比前一刻更好的地步，在这个过程中，大脑皮层更多的沟回形成，更多的动作变成“下意识即可完成”的动作……直至结束的那一瞬间，休息完毕且精力充沛的元认知能力再一次被激活，清楚地意识到刚才的一切，幸福感突然而生，又因为元认知能力的存在，那幸福感格外强烈。</p>
<h3 id="三、反思"><a href="#三、反思" class="headerlink" title="三、反思"></a>三、反思</h3><p>每天花上十分钟左右，反思一下自己的思路和思考结果，琢磨一下自己的想法有没有逻辑谬误？琢磨一下自己的想法从何而来？又缘何走了那么个思路？有没有其他可能的思考结果？琢磨一下自己受到了哪些因素的影响？琢磨一下那些影响因素究竟有没有根基，有没有道理？</p>
<p>反思，不仅是一种元认知能力的刻意训练方式，也是调整情绪的根本。</p>
<p>那些无法控制情绪的人，不仅做不成任何有意义的事情，还常常成为定时炸弹一样的东西，早晚毁掉他们触碰到的一切，不管是人还是物。</p>
<p>观察和研究一致表明：控制情绪，和控制时间一样，几乎是徒劳的。冷静常常并不是控制情绪的结果，而是认清情绪来源，并找到解决方案的结果，而认清情绪的来源，就是在调用元认知能力。</p>
<p>我很生气和我知道我现在很生气，这两者之间有着巨大的差异。前者只能在接下来的每分每秒更生气，后者却因为元认知能力被激活而可以做到把注意力转到我为什么很生气，乃至于找到很生气的原因，然后再把注意力放在那个引发情绪的问题上去。能解决就去动手解决，不能解决的话，也好想得开：既然解决不了，生气也没有用……</p>
<p>每一次认清情绪的来源，就是一次元认知能力获得锻炼的重大机会。每个人都一样，最终会发现，反思最多的，肯定是被情绪所左右之后的行为和决定。不过，其实用不着多少次，元认知能力的适时激活就会成为习惯，而所谓的冷静，只不过是这个习惯自然而然的结果。</p>
<p>要有耐心，要有耐心，要有耐心<br>看起来再简单的事，做起来都没那么简单。不过只要耐心地做下去，就一定会做得越来越好。</p>
<p>如果你需要一个自己设计并且足够让你上瘾的锻炼方法，最好能够精确地控制锻炼后的反馈。<br>虽然不一定是每次练完就有的反馈，但是应该找一个合适的频率不断给自己激励，让自己看到成果，进而激发更多的兴趣。<br>这种刻意练习的设计会让你慢慢形成一个正循环，从而能够持续不断地练习下去。</p>
<p>我们锻炼元认知能力的重要一步就是要学会“主动控制注意力”</p>
<p>我们平时说的迁怒，其实本质上就是因为自己不知道为什么生气。想着想着就乱了，乱了之后就不管对象，先发一通火再说。</p>
<p>通过元认知能力的提升，知道自己为何生气，以及如何应对这些情绪。这就像你无法控制时间，但是你能通过控制自己来达成一定的成就。</p>
<p>不要着急，也不要想着如何一次就把每一件事都搞定。</p>
<h3 id="什么才算是好的休息方式？"><a href="#什么才算是好的休息方式？" class="headerlink" title="什么才算是好的休息方式？"></a>什么才算是好的休息方式？</h3><p>1.阅读<br>2.亲近大自然<br>3.独处</p>
<p>人们在独处的时候，更容易将注意力放在自己的感觉、身体以及情绪上。这其实和我们说的，在全神贯注的情况下，元认知能力得到彻底的放松是一样的。</p>
<p>只字不差地阅读是我养成的最重要的习惯之一。<br>自己先做好，孩子多半差不了。<br>保持耐心，先从认真阅读开始，和孩子一起慢慢培养控制注意力的能力。<br>你做好了，孩子自然也不会太差。</p>
<p>如果自己一时想不清楚，那就写下来看。今天想不明白的事情，过几天回过头来看，说不定就会有新的思路和想法。</p>
<p>没有直接的效果，所以感觉没用。这恐怕是大部分人一辈子也没有锻炼出元认知能力的重要原因之一。<br>生活中，我们总是会受到线性思维的影响。简单来说就是种瓜一定要得瓜，种豆一定要得豆，如果没有得到应有的结果，那么这些努力就是白费的。</p>
<p>你在元认知能力上的努力，或许不能直接让你有任何产出，但它可能会在其他方面帮你想明白问题的关键。</p>
<p>可以练习和增加兴趣是相辅相成的。每当你突破了一个玻璃顶，你对于这件事情的兴趣就会加强，并且促使你进一步去可以练习。</p>
<p>充足的休息也是健身的重要环节。锻炼元认知能力其实也是类似的过程。反思就相当于你不断地运用元认知去锻炼，而坐享和兴趣则更像是你在放松恢复的过程。</p>
<p>过去的兴趣之所以在工作之后被磨灭，大部分的原因就在于：缺少刻意练习。</p>
<p>没有经历过可以练习的兴趣，多半经受不住生活的考验。一旦不那么顺利的时候，我们就会轻易放弃这些兴趣。</p>
<p>不论是锻炼还是休息，都需要尽可能百分百投入。</p>
<p>有元认知能力的人，就有机会摆脱当局者的角色。我总觉得大部分人只是缺少一个启发，让他们知道其实自己有能力控制思维，跳出当局者的视角，从更高的层次来审视自己的生活。</p>
<p>之所以说是刻意练习，就是因为它需要调动你的注意力，全神贯注地完成。因此一定不会很轻松，也不会很顺利。</p>
<p>当我们把注意力集中在某一处，并且开始主动不去思考时，我们的大脑会比平常更为活跃，能够产生更多的连接。</p>
<p>有兴趣——刻意练习——做的更好——更有兴趣——继续刻意练习</p>
<p>兴趣和练习其实是相辅相成的。没有兴趣，你可能不会坚持去做枯燥的练习；没有练习，原本的兴趣也会很快枯竭。</p>
<p>关于反思最好的方法其实就是记录。</p>
<p>原来我的这个世界还可以是这样的。</p>
<p>如果说过去你通过体育锻炼，能够感受自己逐渐增强的体能，那么现在你已经能够通过刻意练习，感受到自己大脑升级的过程了。</p>
<h2 id="如何开始坐享？"><a href="#如何开始坐享？" class="headerlink" title="如何开始坐享？"></a>如何开始坐享？</h2><p>太简单了，乃至于直接开始就好。</p>
<h3 id="（〇）"><a href="#（〇）" class="headerlink" title="（〇）"></a>（〇）</h3><p>由于在坐享过程中，注意力足够集中的时候，全身放松的状态与人体在睡觉的状态几乎相同，所以，要注意保暖，注意风向。</p>
<p>可以找个毯子盖上膝盖；<br>不能有风持续吹到耳朵周围……<br>其中第二条尤其重要，三叉神经汇聚于耳部周围，不小心的话，可能会引起面部偏瘫。</p>
<p>至于姿势，其实并不重要，只要舒服就好。不一定非要盘腿…… 其实以下任何姿势都可以：<br><img src="http://zhibimo.com/read/xiaolai/zuo-xiang-qi-cheng/images/meditation-posture.png" alt=""></p>
<p>但脊背坐直倒是挺重要，因为最终，长时间弓着背可能更累。</p>
<h3 id="（一）"><a href="#（一）" class="headerlink" title="（一）"></a>（一）</h3><p>稍微严肃一点的话，就从以下简单的步骤开始：</p>
<p>找个安静的地方<br>设定一个计时器（从五分钟或者十五分钟开始，渐渐延长到四十五分钟到一小时）<br>用你自己感觉舒服的方式坐好（最好脊背挺直）<br>闭上眼睛<br>开始深呼吸<br>将自己所有的注意力全部集中到呼吸上<br>一旦发现注意力转移到其它地方，就要刻意地将注意力集中到呼吸上<br>持续深呼吸……<br>直至计时器将你“唤醒”。</p>
<h3 id="（二）"><a href="#（二）" class="headerlink" title="（二）"></a>（二）</h3><p>坐享几次之后，可以开始尝试在坐享过程中用你的注意力扫描你的整个身体。</p>
<p>从左脚的脚尖开始…… 左脚掌…… 左脚跟…… 左小腿 ……左膝盖 …… 左大腿…… 左臀…… 顺着脊柱一直到后脖跟…… 划到左肩…… 左上臂…… 左肘…… 左小臂…… 左手腕…… 左手心…… 左指尖…… 再回来…… 左手心…… 左手腕…… 左小臂…… 左肘…… 左上臂…… 左肩…… 沿着你的肩一直划到右肩…… 右上臂…… 右肘…… 右小臂…… 右手腕…… 右手心…… 右指尖…… 再回来…… 右手心…… 右手腕…… 右小臂…… 右肘…… 右上臂…… 右肩…… 回到后脖根…… 顺着脊柱一直到右臀…… 右大腿…… 右膝盖…… 右小腿…… 右脚后跟…… 右脚心…… 右脚尖……</p>
<p>在这个过程中，你会感觉到某个地方不舒服。这样的时候，把注意力全部集中到那个不舒服的地方，仔细观察自己的感受，尝试着接受…… 这是个机会，也是个挑战…… 一旦能做到接受那个原本不舒服的感觉，接下来的感觉竟然是解脱……</p>
<h3 id="（三）"><a href="#（三）" class="headerlink" title="（三）"></a>（三）</h3><p>尝试着在任何地方坐享。出租车上、火车上、飞机上、甚至颠簸的船上，或者干脆是在某个其实非常嘈杂的地方……</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总而言之，要集中注意力、并且最终可以做到自如地控制注意力才算是坐享 —— 最终的目标是可以做到在越来越长的时间里自如地注意力集中，并且还能控制集中的注意力。而胡思乱想、放空，甚至睡着了，都算不上是坐享，对增大大脑皮层面积，增厚灰质没有什么具体的帮助。</p>
<p>这真是一个极好的“掌握最少必要知识之后就要马上通过<a href="http://zhibimo.com/read/xiaolai/reborn-every-7-years/A02.html" target="_blank" rel="external">践行</a>进步”的好例子！</p>
<h2 id="音频文件"><a href="#音频文件" class="headerlink" title="音频文件"></a>音频文件</h2><p>压缩包内有前三章的语音版，以及第一次坐享可用的辅导音频。<br>请到云盘上下载打包文件：<br><a href="https://pan.baidu.com/s/1dFiAQjf" target="_blank" rel="external">https://pan.baidu.com/s/1dFiAQjf</a><br>到网上搜索 sound of nature，可以找到很多坐享可用的 mp3 文件。</p>
<h2 id="经验分享"><a href="#经验分享" class="headerlink" title="经验分享"></a>经验分享</h2><p>这又是一本“众创书籍”。是什么，为什么，怎么做，都很简单却又很清楚地讲完了，剩下的就是践行。每个人在践行的过程中，都可能有不同的感受、不同的进步。写下来，分享给身边的人，网上的人，不一定会发生什么样的惊喜（Serendipity）……</p>
<p>提交经验分享，只有一个要求：</p>
<blockquote>
<p>不要使用任何与宗教相关的词汇与概念。</p>
</blockquote>
<p>而更为重要的一点是：</p>
<blockquote>
<p>没必要神化这种简单朴素的大脑运动方式。</p>
</blockquote>
<p>提交经验分享链接：</p>
<p><a href="http://form.mikecrm.com/I579S3" target="_blank" rel="external">http://form.mikecrm.com/I579S3</a></p>
<h2 id="个人实践之路"><a href="#个人实践之路" class="headerlink" title="个人实践之路"></a>个人实践之路</h2><h3 id="有益效果"><a href="#有益效果" class="headerlink" title="有益效果"></a>有益效果</h3><p>1、有助于集中和控制注意力<br>2、有利于大脑的放松<br>3、有助于提升晚上深度睡眠时间</p>
<p>03.15：大脑疲惫时，边走边想<br>            10~30分钟，可以快速恢复精力</p>
<p>03.26：四个完整周期，深度睡眠1小时<br>            八个完整周期，深度睡眠2小时</p>
<p>03.30：断点续传机制<br>            两连击、三连发<br>            共性规律，以头为起点的垂直线上各个Point，为双数<br>            对称：</p>
<pre><code>1. 左手指尖到肩：7
2. 肩到头到颈：**10**
3. 从颈到右手再回到颈：24
4. 从颈经丹田到腹部：26
5. 腹部到左胯：27
6. 左胯回到腹部：**40**
7. 腹部到右胯：41
8. 右胯再回到腹部：**54**
9. 腹部回到颈：**56**
10. 颈回到左手指尖：63
</code></pre><h3 id="创新实践"><a href="#创新实践" class="headerlink" title="创新实践"></a>创新实践</h3><p>将注意力想象成一个球<br>先从跳动开始，再到滑动<br>跳动/滑动的节奏，先慢后快<br>从左手/右手/左脚/右脚，轮流遍历<br>每遍都应该是同一个总数字，如果不对，重来<br>后面可以从串行到并行，从一个球到两个球，三个球和四个球</p>
<h3 id="家人推广"><a href="#家人推广" class="headerlink" title="家人推广"></a>家人推广</h3><p>从老婆、老妈到老姐<br>榜样就是力量</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng" target="_blank" rel="external">坐享其成</a><br><a href="/2017/01/02/MyShare/iGet/lixiaolai-lead-to-freedom-of-wealth/">通往财富自由之路</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://zhibimo.com/read/xiaolai/zuo-xiang-qi-cheng/images/meditation-posture.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You’re the master of  your brain, not the other way around.&lt;br&gt;Brain decides your thinking, talking, action…&lt;br&gt;For growing up, Control and  Update your brain is the only way .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;坐享其成&quot;&gt;&lt;a href=&quot;#坐享其成&quot; class=&quot;headerlink&quot; title=&quot;坐享其成&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng&quot;&gt;坐享其成&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;也许是最简单的大脑锻炼方式，这也是人类莫名其妙地已经运用了两千五百年以上的大脑锻炼方式。已经有足够多的科学研究证明，它能使你的大脑皮层表面积加大，能使你的灰质变厚，它也能增强人们的免疫系统，它还能让人们摆脱抑郁症……&lt;/p&gt;
&lt;p&gt;尽管简单，但也相当神奇。&lt;br&gt;虽然神奇，却又非常简单。&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Health" scheme="http://ipcreator.me/tags/Health/"/>
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Learning Resources of Machine Learning and AI</title>
    <link href="http://ipcreator.me/2017/03/26/BusinessAI/learning-resource-of-ai/"/>
    <id>http://ipcreator.me/2017/03/26/BusinessAI/learning-resource-of-ai/</id>
    <published>2017-03-26T00:17:06.000Z</published>
    <updated>2017-03-27T08:56:28.873Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>思维改变生活</p>
</blockquote>
<h2 id="机器学习与人工智能学习资源导引"><a href="#机器学习与人工智能学习资源导引" class="headerlink" title="机器学习与人工智能学习资源导引"></a>机器学习与人工智能学习资源导引</h2><p>作者：刘未鹏<br>C++的罗浮宫博客新地址：<a href="http://mindhacks.cn" target="_blank" rel="external">http://mindhacks.cn</a></p>
<p><img src="http://mindhacks.cn/wp-content/uploads/2016/12/card1.png" alt=""></p>
<a id="more"></a>
<h1 id="机器学习与人工智能学习资源导引-1"><a href="#机器学习与人工智能学习资源导引-1" class="headerlink" title="机器学习与人工智能学习资源导引"></a><a href="http://blog.csdn.net/pongba/article/details/2915005" target="_blank" rel="external">机器学习与人工智能学习资源导引</a></h1><p><a href="https://groups.google.com/group/pongba/" target="_blank" rel="external">TopLanguage</a></p>
<p>我经常在 TopLanguage 讨论组上推荐一些书籍，也经常问里面的牛人们搜罗一些有关的资料，人工智能、机器学习、自然语言处理、知识发现（特别地，数据挖掘）、信息检索 这些无疑是 CS 领域最好玩的分支了（也是互相紧密联系的），这里将最近有关机器学习和人工智能相关的一些学习资源归一个类：</p>
<p>首先是两个非常棒的 Wikipedia 条目，我也算是 wikipedia 的重度用户了，学习一门东西的时候常常发现是始于 wikipedia 中间经过若干次 google ，然后止于某一本或几本著作。</p>
<p>第一个是</p>
<h2 id="“人工智能的历史”（History-of-Artificial-Intelligence）"><a href="#“人工智能的历史”（History-of-Artificial-Intelligence）" class="headerlink" title="“人工智能的历史”（History of Artificial Intelligence）"></a><a href="http://en.wikipedia.org/wiki/History_of_artificial_intelligence" target="_blank" rel="external">“人工智能的历史”（History of Artificial Intelligence）</a></h2><p>我在讨论组上写道：</p>
<p>而今天看到的这篇文章是我在 wikipedia 浏览至今觉得最好的。文章名为《人工智能的历史》，顺着 AI 发展时间线娓娓道来，中间穿插无数牛人故事，且一波三折大气磅礴，可谓”事实比想象更令人惊讶”。人工智能始于哲学思辨，中间经历了一个没有心理学（尤其是认知神经科学的）的帮助的阶段，仅通过牛人对人类思维的外在表现的归纳、内省，以及数学工具进行探索，其间最令人激动的是 Herbert Simon （决策理论之父，诺奖，跨领域牛人）写的一个自动证明机，证明了罗素的数学原理中的二十几个定理，其中有一个定理比原书中的还要优雅，Simon 的程序用的是启发式搜索，因为公理系统中的证明可以简化为从条件到结论的树状搜索（但由于组合爆炸，所以必须使用启发式剪枝）。后来 Simon 又写了 GPS （General Problem Solver），据说能解决一些能良好形式化的问题，如汉诺塔。但说到底 Simon 的研究毕竟只触及了人类思维的一个很小很小的方面 —— Formal Logic，甚至更狭义一点 Deductive Reasoning （即不包含 Inductive Reasoning , Transductive Reasoning (俗称 analogic thinking）。还有诸多比如 Common Sense、Vision、尤其是最为复杂的 Language 、Consciousness 都还谜团未解。还有一个比较有趣的就是有人认为 AI 问题必须要以一个物理的 Body 为支撑，一个能够感受这个世界的物理规则的身体本身就是一个强大的信息来源，基于这个信息来源，人类能够自身与时俱进地总结所谓的 Common-Sense Knowledge （这个就是所谓的 Emboddied  Mind 理论。 ），否则像一些老兄直接手动构建 Common-Sense Knowledge Base ，就很傻很天真了，须知人根据感知系统从自然界获取知识是一个动态的自动更新的系统，而手动构建常识库则无异于古老的 Expert System 的做法。当然，以上只总结了很小一部分我个人觉得比较有趣或新颖的，每个人看到的有趣的地方不一样，比如里面相当详细地介绍了神经网络理论的兴衰。所以我强烈建议你看自己一遍，别忘了里面链接到其他地方的链接。</p>
<p>顺便一说，<a href="http://blog.youxu.info/" target="_blank" rel="external">徐宥</a>同学打算找时间把这个条目翻译出来，这是一个相当长的条目，看不动 E 文的等着看翻译吧:)</p>
<h2 id="第二个则是"><a href="#第二个则是" class="headerlink" title="第二个则是"></a>第二个则是</h2><p>##<a href="http://en.wikipedia.org/wiki/Artificial_intelligence" target="_blank" rel="external">“人工智能”（Artificial Intelligence）</a></p>
<p>当然，还有<a href="http://en.wikipedia.org/wiki/Machine_learning" target="_blank" rel="external">机器学习</a>等等。从这些条目出发能够找到许多非常有用和靠谱的深入参考资料。</p>
<p>然后是一些书籍</p>
<h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><ol>
<li><p>《Programming Collective Intelligence》，近年出的入门好书，培养兴趣是最重要的一环，一上来看大部头很容易被吓走的:P</p>
</li>
<li><p>Peter Norvig 的《AI, Modern Approach 2nd》（无争议的领域经典）。</p>
</li>
<li><p>《The Elements of Statistical Learning》，数学性比较强，可以做参考了。</p>
</li>
<li><p>《Foundations of Statistical Natural Language Processing》，自然语言处理领域公认经典。</p>
</li>
<li><p>《Data Mining, Concepts and Techniques》，华裔科学家写的书，相当深入浅出。</p>
</li>
<li><p>《Managing Gigabytes》，信息检索好书。</p>
</li>
<li><p>《Information Theory：Inference and Learning Algorithms》，参考书吧，比较深。</p>
</li>
</ol>
<p>相关数学基础（参考书，不适合拿来通读）：</p>
<ol>
<li><p>线性代数：这个参考书就不列了，很多。</p>
</li>
<li><p>矩阵数学：《矩阵分析》，Roger Horn。矩阵分析领域无争议的经典。</p>
</li>
<li><p>概率论与统计：《概率论及其应用》，威廉·费勒。也是极牛的书，可数学味道太重，不适合做机器学习的。于是讨论组里的 Du Lei 同学推荐了《All Of Statistics》并说到</p>
</li>
</ol>
<p>机器学习这个方向，统计学也一样非常重要。推荐All of statistics，这是CMU的一本很简洁的教科书，注重概念，简化计算，简化与Machine Learning无关的概念和统计内容，可以说是很好的快速入门材料。</p>
<ol>
<li>最优化方法：《Nonlinear Programming, 2nd》非线性规划的参考书。《Convex Optimization》凸优化的参考书。此外还有一些书可以参考 wikipedia 上的最优化方法条目。要深入理解机器学习方法的技术细节很多时候（如SVM）需要最优化方法作为铺垫。</li>
</ol>
<h2 id="王宁同学推荐了好几本书："><a href="#王宁同学推荐了好几本书：" class="headerlink" title="王宁同学推荐了好几本书："></a>王宁同学推荐了好几本书：</h2><p>《Machine Learning, Tom Michell》, 1997.<br>老书，牛人。现在看来内容并不算深，很多章节有点到为止的感觉，但是很适合新手（当然，不能”新”到连算法和概率都不知道）入门。比如决策树部分就很精彩，并且这几年没有特别大的进展，所以并不过时。另外，这本书算是对97年前数十年机器学习工作的大综述，参考文献列表极有价值。国内有翻译和影印版，不知道绝版否。</p>
<p>《Modern Information Retrieval, Ricardo Baeza-Yates et al》. 1999<br>老书，牛人。貌似第一本完整讲述IR的书。可惜IR这些年进展迅猛，这本书略有些过时了。翻翻做参考还是不错的。另外，Ricardo同学现在是Yahoo Research for Europe and Latin Ameria的头头。</p>
<p>《Pattern Classification (2ed)》, Richard O. Duda, Peter E. Hart, David G. Stork<br>大约也是01年左右的大块头，有影印版，彩色。没读完，但如果想深入学习ML和IR，前三章（介绍，贝叶斯学习，线性分类器）必修。</p>
<p>还有些经典与我只有一面之缘，没有资格评价。另外还有两本小册子，论文集性质的，倒是讲到了了不少前沿和细节，诸如索引如何压缩之类。可惜忘了名字，又被我压在箱底，下次搬家前怕是难见天日了。</p>
<p>（呵呵，想起来一本：《Mining the Web - Discovering Knowledge from Hypertext Data》 ）</p>
<p>说一本名气很大的书：《Data Mining: Practical Machine Learning Tools and Techniques》。Weka 的作者写的。可惜内容一般。理论部分太单薄，而实践部分也很脱离实际。DM的入门书已经不少，这一本应该可以不看了。如果要学习了解 Weka ，看文档就好。第二版已经出了，没读过，不清楚。</p>
<h2 id="信息检索方面"><a href="#信息检索方面" class="headerlink" title="信息检索方面"></a>信息检索方面</h2><p>Du Lei 同学再次推荐：</p>
<p>信息检索方面的书现在建议看Stanford的那本《Introduction to Information Retrieval》，这书刚刚正式出版，内容当然up to date。另外信息检索第一大牛Croft老爷也正在写教科书，应该很快就要面世了。据说是非常pratical的一本书。</p>
<p>对信息检索有兴趣的同学，强烈推荐翟成祥博士在北大的暑期学校课程，这里有全slides和阅读材料：<a href="http://net.pku.edu.cn/~course/cs410/schedule.html" target="_blank" rel="external">http://net.pku.edu.cn/~course/cs410/schedule.html</a></p>
<h2 id="maximzhao-同学推荐了一本机器学习"><a href="#maximzhao-同学推荐了一本机器学习" class="headerlink" title="maximzhao 同学推荐了一本机器学习"></a>maximzhao 同学推荐了一本机器学习</h2><p>加一本书：Bishop, 《Pattern Recognition and Machine Learning》. 没有影印的，但是网上能下到。经典中的经典。Pattern Classification 和这本书是两本必读之书。《Pattern Recognition and Machine Learning》是很新（07年），深入浅出，手不释卷。</p>
<h2 id="最后，关于人工智能方面（特别地，决策与判断）"><a href="#最后，关于人工智能方面（特别地，决策与判断）" class="headerlink" title="最后，关于人工智能方面（特别地，决策与判断）"></a>最后，关于人工智能方面（特别地，决策与判断）</h2><p>再推荐两本有意思的书，</p>
<p>一本是《Simple Heuristics that Makes Us Smart》</p>
<p>另一本是《Bounded Rationality: The Adaptive Toolbox》</p>
<p>不同于计算机学界所采用的统计机器学习方法，这两本书更多地着眼于人类实际上所采用的认知方式，以下是我在讨论组上写的简介：</p>
<p>这两本都是德国ABC研究小组（一个由计算机科学家、认知科学家、神经科学家、经济学家、数学家、统计学家等组成的跨学科研究团体）集体写的，都是引起领域内广泛关注的书，尤其是前一本，後一本则是对 Herbert Simon （决策科学之父，诺奖获得者）提出的人类理性模型的扩充研究），可以说是把什么是真正的人类智能这个问题提上了台面。核心思想是，我们的大脑根本不能做大量的统计计算，使用fancy的数学手法去解释和预测这个世界，而是通过简单而鲁棒的启发法来面对不确定的世界（比如第一本书中提到的两个后来非常著名的启发法：再认启发法（cognition heuristics）和选择最佳（Take the Best）。当然，这两本书并没有排斥统计方法就是了，数据量大的时候统计优势就出来了，而数据量小的时候统计方法就变得非常糟糕；人类简单的启发法则充分利用生态环境中的规律性（regularities），都做到计算复杂性小且鲁棒。</p>
<p>关于第二本书的简介：</p>
<ol>
<li><p>谁是 <a href="http://en.wikipedia.org/wiki/Herbert_Simon" target="_blank" rel="external">Herbert Simon</a></p>
</li>
<li><p>什么是 <a href="http://en.wikipedia.org/wiki/Bounded_Rationality" target="_blank" rel="external">Bounded Rationality</a></p>
</li>
<li><p>这本书讲啥的：</p>
</li>
</ol>
<p>我一直觉得人类的决策与判断是一个非常迷人的问题。这本书简单地说可以看作是《决策与判断》的更全面更理论的版本。系统且理论化地介绍人类决策与判断过程中的各种启发式方法（heuristics）及其利弊 （为什么他们是最优化方法在信息不足情况下的快捷且鲁棒的逼近，以及为什么在一些情况下会带来糟糕的后果等，比如学过机器学习的都知道朴素贝叶斯方法在许多情况下往往并不比贝叶斯网络效果差，而且还速度快；比如多项式插值的维数越高越容易overfit，而基于低阶多项式的分段样条插值却被证明是一个非常鲁棒的方案）。</p>
<p>在此提一个书中提到的例子，非常有意思：两个团队被派去设计一个能够在场上接住抛过来的棒球的机器人。第一组做了详细的数学分析，建立了一个相当复杂的抛物线近似模型（因为还要考虑空气阻力之类的原因，所以并非严格抛物线），用于计算球的落点，以便正确地接到球。显然这个方案耗资巨大，而且实际运算也需要时间，大家都知道生物的神经网络中生物电流传输只有百米每秒之内，所以 computational complexity 对于生物来说是个宝贵资源，所以这个方案虽然可行，但不够好。第二组则采访了真正的运动员，听取他们总结自己到底是如何接球的感受，然后他们做了这样一个机器人：这个机器人在球抛出的一开始一半路程啥也不做，等到比较近了才开始跑动，并在跑动中一直保持眼睛于球之间的视角不变，后者就保证了机器人的跑动路线一定会和球的轨迹有交点；整个过程中这个机器人只做非常粗糙的轨迹估算。体会一下你接球的时候是不是眼睛一直都盯着球，然后根据视线角度来调整跑动方向？实际上人类就是这么干的，这就是 heuristics 的力量。</p>
<p>相对于偏向于心理学以及科普的《决策与判断》来说，这本书的理论性更强，引用文献也很多而经典，而且与人工智能和机器学习都有交叉，里面也有不少数学内容，全书由十几个章节构成，每个章节都是由不同的作者写的，类似于 paper 一样的，很严谨，也没啥废话，跟 《Psychology of Problem Solving》类似。比较适合 geeks 阅读哈。</p>
<p>另外，对理论的技术细节看不下去的也建议看看《决策与判断》这类书（以及像《别做正常的傻瓜》这样的傻瓜科普读本），对自己在生活中做决策有莫大的好处。人类决策与判断中使用了很多的 heuristics ，很不幸的是，其中许多都是在适应几十万年前的社会环境中建立起来的，并不适合于现代社会，所以了解这些思维中的缺点、盲点，对自己成为一个良好的决策者有很大的好处，而且这本身也是一个非常有趣的领域。</p>
<p>（完）</p>
<p>P.S. 大家有什么好的资料请至<a href="https://groups.google.com/group/pongba/browse_thread/thread/66ed97d6b34613c2#" target="_blank" rel="external">讨论组</a>上留言。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.douban.com/doulist/176513/" target="_blank" rel="external">机器学习与人工智能</a><br><a href="https://www.douban.com/doulist/46003/" target="_blank" rel="external">『只读经典』思维改变生活（原“心理学改变生活”）</a><br><a href="https://www.douban.com/doulist/127649/" target="_blank" rel="external">『只读经典』思考的技术与艺术（原“学会思考”）</a><br><a href="https://www.douban.com/doulist/197706/" target="_blank" rel="external">『只读经典』判断与决策</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;思维改变生活&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;机器学习与人工智能学习资源导引&quot;&gt;&lt;a href=&quot;#机器学习与人工智能学习资源导引&quot; class=&quot;headerlink&quot; title=&quot;机器学习与人工智能学习资源导引&quot;&gt;&lt;/a&gt;机器学习与人工智能学习资源导引&lt;/h2&gt;&lt;p&gt;作者：刘未鹏&lt;br&gt;C++的罗浮宫博客新地址：&lt;a href=&quot;http://mindhacks.cn&quot;&gt;http://mindhacks.cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mindhacks.cn/wp-content/uploads/2016/12/card1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Resource" scheme="http://ipcreator.me/tags/Resource/"/>
    
      <category term="Book" scheme="http://ipcreator.me/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>Resources of Android Coding</title>
    <link href="http://ipcreator.me/2017/03/26/Program/Android/learning-resource-of-android/"/>
    <id>http://ipcreator.me/2017/03/26/Program/Android/learning-resource-of-android/</id>
    <published>2017-03-26T00:04:06.000Z</published>
    <updated>2017-03-27T10:24:38.030Z</updated>
    
    <content type="html"><![CDATA[<p>一、代码阅览类<br>二、技术学习类<br>三、SDK及源码下载更新类<br>四、UI控件类<br>五、工具类</p>
<a id="more"></a>
<h1 id="Coding相关的学习网站推荐"><a href="#Coding相关的学习网站推荐" class="headerlink" title="Coding相关的学习网站推荐"></a><a href="http://blog.csdn.net/yelangjueqi/article/details/52454142" target="_blank" rel="external">Coding相关的学习网站推荐</a></h1><p><a href="http://my.csdn.net/dadaxiaoxiaode" target="_blank" rel="external">作者：ShyBoy天天向上</a></p>
<h2 id="一、代码阅览类"><a href="#一、代码阅览类" class="headerlink" title="一、代码阅览类"></a>一、代码阅览类</h2><p><a href="http://androidxref.com/" target="_blank" rel="external">http://androidxref.com/</a>     Android系统源码极速搜索<br><a href="https://source.codeaurora.org/" target="_blank" rel="external">https://source.codeaurora.org/</a>   qcom开源Android Source<br><a href="http://www.grepcode.com/" target="_blank" rel="external">http://www.grepcode.com/</a>   grep api<br><a href="https://github.com/android" target="_blank" rel="external">https://github.com/android</a><br><a href="http://source.android.com/source/" target="_blank" rel="external">http://source.android.com/source/</a><br><a href="https://developers.google.com/" target="_blank" rel="external">https://developers.google.com/</a><br><a href="http://android.xsoftlab.net/index.html" target="_blank" rel="external">http://android.xsoftlab.net/index.html</a>   Android 镜像<br><a href="https://developers.google.cn/" target="_blank" rel="external">https://developers.google.cn/</a>   Google Developer<br><a href="https://developer.android.google.cn/index.html" target="_blank" rel="external">https://developer.android.google.cn/index.html</a>   Android Developer<br><a href="https://developers.google.cn/china/" target="_blank" rel="external">https://developers.google.cn/china/</a>  Google中国开发者</p>
<p>Code Style<br><a href="https://github.com/google/styleguide" target="_blank" rel="external">https://github.com/google/styleguide</a>   Style guides for Google-originated open-source projects</p>
<p>Google Style Guides</p>
<p>Every major open-source project has its own style guide: a set of conventions (sometimes arbitrary) about how to write code for that project. It is much easier to understand a large codebase when all the code in it is in a consistent style.</p>
<p>“Style” covers a lot of ground, from “use camelCase for variable names” to “never use global variables” to “never use exceptions.” This project holds the style guidelines we use for Google code. If you are modifying a project that originated at Google, you may be pointed to this page to see the style guides that apply to that project.</p>
<p>Our C++ Style Guide, Objective-C Style Guide, Java Style Guide, Python Style Guide, R Style Guide, Shell Style Guide, HTML/CSS Style Guide, JavaScript Style Guide, AngularJS Style Guide, Common Lisp Style Guide, and Vimscript Style Guide are now available. We have also released cpplint, a tool to assist with style guide compliance, and google-c-style.el, an Emacs settings file for Google style.</p>
<p>If your project requires that you create a new XML document format, our XML Document Format Style Guide may be helpful. In addition to actual style rules, it also contains advice on designing your own vs. adapting an existing format, on XML instance document formatting, and on elements vs. attributes.</p>
<p>These style guides are licensed under the CC-By 3.0 License, which encourages you to share these documents. See<a href="https://creativecommons.org/licenses/by/3.0/" target="_blank" rel="external">https://creativecommons.org/licenses/by/3.0/</a> for more details.</p>
<p><a href="https://google.github.io/styleguide/javaguide.html" target="_blank" rel="external">https://google.github.io/styleguide/javaguide.html</a> Google Java Style Guide<br><a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="external">https://google.github.io/styleguide/cppguide.html</a>   Google C++ Style Guide</p>
<p>以下需要梯子<br><a href="https://material.google.com" target="_blank" rel="external">https://material.google.com</a>   GUI StandardMaterial Design Guideline<br><a href="https://design.google.com" target="_blank" rel="external">https://design.google.com</a><br><a href="https://android-review.googlesource.com" target="_blank" rel="external">https://android-review.googlesource.com</a>    Google Review<br><a href="https://android.googlesource.com/platform" target="_blank" rel="external">https://android.googlesource.com/platform</a>  或 <a href="http://android.googlesource.com/platform" target="_blank" rel="external">http://android.googlesource.com/platform</a>  //各种版本的都有<br><a href="https://android.googlesource.com/platform/frameworks/base/" target="_blank" rel="external">https://android.googlesource.com/platform/frameworks/base/</a><br><a href="https://android.googlesource.com/platform/packages" target="_blank" rel="external">https://android.googlesource.com/platform/packages</a></p>
<p><a href="http://blog.csdn.net/deng0zhaotai/article/details/17512515" target="_blank" rel="external">http://blog.csdn.net/deng0zhaotai/article/details/17512515</a>   Windows环境下通过Git得到Android源代码<br>没法翻墙的，参考：<a href="https://mirror.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="external">https://mirror.tuna.tsinghua.edu.cn/help/AOSP/</a><br>参考 Google 教程 <a href="https://source.android.com/source/downloading.html，" target="_blank" rel="external">https://source.android.com/source/downloading.html，</a> 将 <a href="https://android.googlesource.com/" target="_blank" rel="external">https://android.googlesource.com/</a> 全部使用 <a href="https://aosp.tuna.tsinghua.edu.cn/" target="_blank" rel="external">https://aosp.tuna.tsinghua.edu.cn/</a> 代替即可。<br>eg:<br>git clone <a href="https://aosp.tuna.tsinghua.edu.cn/platform/packages/apps/DeskClock/" target="_blank" rel="external">https://aosp.tuna.tsinghua.edu.cn/platform/packages/apps/DeskClock/</a><br>git clone <a href="https://aosp.tuna.tsinghua.edu.cn/platform/frameworks/base" target="_blank" rel="external">https://aosp.tuna.tsinghua.edu.cn/platform/frameworks/base</a><br>然后使用git工具clone(见 Windows环境下通过Git得到Android源代码)即可得到源码。</p>
<h2 id="二、技术学习类"><a href="#二、技术学习类" class="headerlink" title="二、技术学习类"></a>二、技术学习类</h2><p><a href="https://developers.google.cn/" target="_blank" rel="external">https://developers.google.cn/</a>  Google Developers<br><a href="http://www.jianshu.com/p/85cb02292acc" target="_blank" rel="external">http://www.jianshu.com/p/85cb02292acc</a>         10个很棒的学习Android 开发的网站<br><a href="http://www.tutorialspoint.com/android/" target="_blank" rel="external">http://www.tutorialspoint.com/android/</a>             是一个专业的技术教程网站<br><a href="http://www.vogella.com/tutorials/android.html" target="_blank" rel="external">http://www.vogella.com/tutorials/android.html</a>   提供的Android 开发教程也是可圈可点的<br><a href="http://gold.xitu.io/" target="_blank" rel="external">http://gold.xitu.io/</a>      掘金 高质量的技术社区<br><a href="http://so.csdn.net/so/" target="_blank" rel="external">http://so.csdn.net/so/</a>     csdn搜索<br><a href="https://segmentfault.com/" target="_blank" rel="external">https://segmentfault.com/</a>     segmentfault 中国领先的开发者社区<br><a href="http://www.jianshu.com/" target="_blank" rel="external">http://www.jianshu.com/</a>     简书 包罗万象的专题<br><a href="http://ruby-china.org/" target="_blank" rel="external">http://ruby-china.org/</a>       ruby中文社区<br><a href="http://www.javased.com/" target="_blank" rel="external">http://www.javased.com/</a>    查找Android API示例代码的网站<br><a href="http://www.jcodecraeer.com/" target="_blank" rel="external">http://www.jcodecraeer.com/</a>  泡在网上的日子<br><a href="http://www.cnblogs.com/" target="_blank" rel="external">http://www.cnblogs.com/</a>   博客园<br><a href="http://www.codeceo.com/" target="_blank" rel="external">http://www.codeceo.com/</a>  码农网<br><a href="http://www.imooc.com/" target="_blank" rel="external">http://www.imooc.com/</a>   慕课网(IMOOC)<br><a href="http://www.materialdoc.cn/" target="_blank" rel="external">http://www.materialdoc.cn/</a>   Material Design<br><a href="http://duanmo.me/2016/04/17/memory-leak-summary/" target="_blank" rel="external">http://duanmo.me/2016/04/17/memory-leak-summary/</a>  Android 内存泄露总结<br><a href="http://blog.csdn.net/yiyaaixuexi/article/details/6716884" target="_blank" rel="external">http://blog.csdn.net/yiyaaixuexi/article/details/6716884</a>  Android代码调试工具 traceview 和 dmtracedump的波折演绎<br><a href="https://www.openssl.org/" target="_blank" rel="external">https://www.openssl.org/</a>  openssl<br><a href="http://www.androiddevtools.cn/index.html" target="_blank" rel="external">http://www.androiddevtools.cn/index.html</a><br>Ubuntu 命令技巧: <a href="http://wiki.ubuntu.org.cn/index.php?title=UbuntuSkills&amp;variant=zh-cn" target="_blank" rel="external">http://wiki.ubuntu.org.cn/index.php?title=UbuntuSkills&amp;variant=zh-cn</a><br>Ubuntu 桌面指南: <a href="https://help.ubuntu.com//" target="_blank" rel="external">https://help.ubuntu.com//</a></p>
<p>聚合数据-免费数据调用 <a href="https://www.juhe.cn/" target="_blank" rel="external">https://www.juhe.cn/</a><br>有赞- 免费的微商城 <a href="http://youzan.com/" target="_blank" rel="external">http://youzan.com/</a><br>秀米微信图文编辑器 <a href="http://xiumi.us/" target="_blank" rel="external">http://xiumi.us/</a><br>禅道项目管理软件 <a href="http://www.zentao.net/" target="_blank" rel="external">http://www.zentao.net/</a><br>安卓开发工具平台 <a href="http://www.androiddevtools.cn/" target="_blank" rel="external">http://www.androiddevtools.cn/</a><br>友盟_开发者服务平台 <a href="http://www.umeng.com/" target="_blank" rel="external">http://www.umeng.com/</a><br>Bmob移动后端云服务平台 <a href="http://www.bmob.cn/" target="_blank" rel="external">http://www.bmob.cn/</a><br>初页- 优质H5微信海报 手机应用<br>兔展-移动H5页面 <a href="http://www.rabbitpre.com/" target="_blank" rel="external">http://www.rabbitpre.com/</a><br>安卓视频平台 <a href="https://www.vitamio.org/" target="_blank" rel="external">https://www.vitamio.org/</a><br>安卓开源项目分类汇总 <a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">https://github.com/Trinea/android-open-project</a><br>Github的开源项目汇总 <a href="http://www.eoeandroid.com/thread-546248-1-3.html" target="_blank" rel="external">http://www.eoeandroid.com/thread-546248-1-3.html</a><br>Android design中文版 <a href="http://adchs.github.io/index.html" target="_blank" rel="external">http://adchs.github.io/index.html</a><br>Android官方课程中文版 <a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">http://hukai.me/android-training-course-in-chinese/index.html</a><br>图标 <a href="https://www.google.com/design/icons/#ic_search" target="_blank" rel="external">https://www.google.com/design/icons/#ic_search</a><br>Android开发者博客 <a href="http://android-developers.blogspot.jp/" target="_blank" rel="external">http://android-developers.blogspot.jp/</a><br>泡在网上的日子 <a href="http://www.jcodecraeer.com/" target="_blank" rel="external">http://www.jcodecraeer.com/</a><br>AS中文社区 <a href="http://www.android-studio.org/" target="_blank" rel="external">http://www.android-studio.org/</a><br>testin云测 <a href="http://www.testin.cn/portal.action?op=Portal.index" target="_blank" rel="external">http://www.testin.cn/portal.action?op=Portal.index</a></p>
<h2 id="三、SDK及源码下载更新类"><a href="#三、SDK及源码下载更新类" class="headerlink" title="三、SDK及源码下载更新类"></a>三、SDK及源码下载更新类</h2><p><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">http://www.androiddevtools.cn/</a>  Android开发环境及工具，列举了很多<br><a href="http://tools.android-studio.org/index.php/proxy" target="_blank" rel="external">http://tools.android-studio.org/index.php/proxy</a>  Android SDK在线更新镜像服务器资源<br><a href="http://ask.android-studio.org/?/article/34" target="_blank" rel="external">http://ask.android-studio.org/?/article/34</a>           Android SDK在线更新镜像服务器资源<br>A，测试镜像服务器网速：<a href="http://ping.chinaz.com/" target="_blank" rel="external">http://ping.chinaz.com/</a><br>B，或下载工具(<a href="http://www.xdowns.com/soft/6/99/2016/Soft_156717.html" target="_blank" rel="external">http://www.xdowns.com/soft/6/99/2016/Soft_156717.html</a>)<br>      通过cmd命令行测试：http-ping.exe <a href="http://sdk.gdgshanghai.com" target="_blank" rel="external">http://sdk.gdgshanghai.com</a></p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="external">https://mirrors.tuna.tsinghua.edu.cn/</a>  清华大学镜像源<br><a href="http://www.cnblogs.com/bluestorm/p/4419051.html" target="_blank" rel="external">http://www.cnblogs.com/bluestorm/p/4419051.html</a>   同步、更新、下载Android Source &amp; SDK from 国内镜像站<br><a href="http://www.cnblogs.com/bluestorm/p/4419135.html" target="_blank" rel="external">http://www.cnblogs.com/bluestorm/p/4419135.html</a>  Ubuntu 下载 &amp; 编译 Android5.1 源码<br><a href="http://blog.csdn.net/gyming/article/details/8168166/" target="_blank" rel="external">http://blog.csdn.net/gyming/article/details/8168166/</a>   Android应用开发相关下载资源(2016/07/24更新)<br>Android源代码国内下载镜像 (android source mirror: <a href="http://mirror.neu.edu.cn/android/platform/" target="_blank" rel="external">http://mirror.neu.edu.cn/android/platform/</a>)</p>
<h2 id="四、UI控件类"><a href="#四、UI控件类" class="headerlink" title="四、UI控件类"></a>四、UI控件类</h2><p>Android开源项目总结(<a href="http://hunankeda110.iteye.com/blog/2103569)(个性化控件，工具库等，非常丰富" target="_blank" rel="external">http://hunankeda110.iteye.com/blog/2103569)(个性化控件，工具库等，非常丰富</a>)<br>GitHub优秀的开源项目(<a href="http://blog.csdn.net/xiechengfa/article/details/38536643" target="_blank" rel="external">http://blog.csdn.net/xiechengfa/article/details/38536643</a>) (赞); 或hawkon (<a href="http://www.cnblogs.com/hawkon/p/3593709.html" target="_blank" rel="external">http://www.cnblogs.com/hawkon/p/3593709.html</a>)</p>
<h2 id="五、工具类"><a href="#五、工具类" class="headerlink" title="五、工具类"></a>五、工具类</h2><p><a href="http://www.thefilehippo.com/" target="_blank" rel="external">http://www.thefilehippo.com/</a>  需要翻墙，一个不错的下载网站，里面有很多离线安装包<br><a href="http://www.thefilehippo.com/search/label/Browsers" target="_blank" rel="external">http://www.thefilehippo.com/search/label/Browsers</a>   可以找到最新的google浏览器离线安装包<br><a href="https://www.tutorialspoint.com/uml/uml_2_overview.htm" target="_blank" rel="external">https://www.tutorialspoint.com/uml/uml_2_overview.htm</a>  UM L 2.0<br><a href="http://www.uml.org/index.htm" target="_blank" rel="external">http://www.uml.org/index.htm</a>  uml<br><a href="http://www.omg.org/spec/UML/2.0/" target="_blank" rel="external">http://www.omg.org/spec/UML/2.0/</a>  pdf<br><a href="http://www.uml-diagrams.org/" target="_blank" rel="external">http://www.uml-diagrams.org/</a>    uml 图<br><a href="http://tool.lu/hexconvert/" target="_blank" rel="external">http://tool.lu/hexconvert/</a>    进制转换<br><a href="https://git-scm.com/docs" target="_blank" rel="external">https://git-scm.com/docs</a> Git command help<br>ftp://www.kernel.org/pub/software/scm/git/docs/   Git command<br><a href="http://www.eclipse.org/downloads/packages/all" target="_blank" rel="external">http://www.eclipse.org/downloads/packages/all</a> eclipse大全<br><a href="http://www.xitongzhijia.net/" target="_blank" rel="external">http://www.xitongzhijia.net/</a>  系统之家　工具和系统下载<br><a href="http://www.xp510.com/" target="_blank" rel="external">http://www.xp510.com/</a>  XP系统之家，绿色下载网站  不错<br><a href="http://imcn.me/" target="_blank" rel="external">http://imcn.me/</a>　Linux工具<br>PS:<br><a href="http://download.csdn.net/detail/dadaxiaoxiaode/9631931" target="_blank" rel="external">http://download.csdn.net/detail/dadaxiaoxiaode/9631931</a>   google 32bit 离线安装包 20160914发布的<br><a href="http://download.csdn.net/detail/dadaxiaoxiaode/9631926" target="_blank" rel="external">http://download.csdn.net/detail/dadaxiaoxiaode/9631926</a>   google 64bit 离线安装包 20160914发布的</p>
<p><a href="http://www.panduoduo.net/" target="_blank" rel="external">http://www.panduoduo.net/</a><br><a href="http://pan.java1234.com/" target="_blank" rel="external">http://pan.java1234.com/</a><br><a href="http://www.baiduyunwangpan.com/" target="_blank" rel="external">http://www.baiduyunwangpan.com/</a></p>
<p><a href="http://www.sobaidupan.com/" target="_blank" rel="external">http://www.sobaidupan.com/</a> 强大<br><a href="http://soft.sobaidupan.com/" target="_blank" rel="external">http://soft.sobaidupan.com/</a>   百度云搜索器</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、代码阅览类&lt;br&gt;二、技术学习类&lt;br&gt;三、SDK及源码下载更新类&lt;br&gt;四、UI控件类&lt;br&gt;五、工具类&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Resource" scheme="http://ipcreator.me/tags/Resource/"/>
    
  </entry>
  
  <entry>
    <title>Sobaidupan——BaiduYun Searcher</title>
    <link href="http://ipcreator.me/2017/03/26/Program/Tools/baiduyun-search/"/>
    <id>http://ipcreator.me/2017/03/26/Program/Tools/baiduyun-search/</id>
    <published>2017-03-25T23:56:06.000Z</published>
    <updated>2017-03-27T09:52:38.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>神雕侠侣<br>A：搜百度盘+百度云官方客户端<br>B：P2PSearcher+迅雷</p>
</blockquote>
<p><img src="http://www.sobaidupan.com/image/logo.gif" alt=""></p>
<p>网址：<a href="http://www.sobaidupan.com/" target="_blank" rel="external">http://www.sobaidupan.com/</a><br>工具：<a href="http://soft.sobaidupan.com/" target="_blank" rel="external">http://soft.sobaidupan.com/</a></p>
<p>百度云搜索器（Ver 1.2.7.9）<br>百度云搜索器是一款专业强大的百度网盘资源搜索软件，数据庞大，搜索极快，简单易用，绿色小巧，无需安装，是目前互联网同行中百度云搜索最好的软件之一，可以搜索种子、电影、视频、MP3、游戏、系统、教育资源、图片、光盘文件、小说、文档、手机APP等几十种各种各样的资源！<br>支持系统：MS WinXP/Win7/win8/win10(32/64)以上系统.</p>
<a id="more"></a>
<p><img src="http://soft.sobaidupan.com/pic/yun.png" alt=""></p>
<p><a href="http://soft.sobaidupan.com/%E7%99%BE%E5%BA%A6%E4%BA%91%E6%90%9C%E7%B4%A2%E5%99%A8.rar" target="_blank" rel="external">百度云搜索器 下载地址</a></p>
<p>注意：软件运行需要.net 4.0 框架支持，如果你无法运行本软件，请先安装 .net 4.0<br>下载地址一：<a href="https://download.microsoft.com/download/9/5/A/95A9616B-7A37-4AF6-BC36-D6EA96C8DAAE/dotNetFx40_Full_x86_x64.exe" target="_blank" rel="external">https://download.microsoft.com/download/9/5/A/95A9616B-7A37-4AF6-BC36-D6EA96C8DAAE/dotNetFx40_Full_x86_x64.exe</a><br>下载地址二： <a href="http://pan.baidu.com/s/1qXKCILm" target="_blank" rel="external">http://pan.baidu.com/s/1qXKCILm</a></p>
<p><a href="http://download.p2psearchers.com/exe/P2PSearcher.v6.4.8.exe" target="_blank" rel="external">P2PSearcher 下载地址</a></p>
<p><strong>突破P2P网络封杀限制</strong><br>云播资源搜索结果最丰富。智能排序定位精准，立即找到想要的资源。新版可突破服务器封杀限制，最强大的种子搜索器。</p>
<p><strong>多个云播通道自由选择</strong><br>整合多个云播引擎，搜索结果可预览，可直接云播放。排除枪版、葫芦娃。云播放最稳定的种子搜索神器。</p>
<p><strong>绿色纯净单文件</strong><br>纯绿色软件，解压即用，不写注册表，无插件无广告。请收藏官方网站，以免下载第三方打包过的虚假版本造成不必要损失。</p>
<h1 id="Coding相关的学习网站推荐"><a href="#Coding相关的学习网站推荐" class="headerlink" title="Coding相关的学习网站推荐"></a><a href="http://blog.csdn.net/yelangjueqi/article/details/52454142" target="_blank" rel="external">Coding相关的学习网站推荐</a></h1><p><a href="http://my.csdn.net/dadaxiaoxiaode" target="_blank" rel="external">作者：ShyBoy天天向上</a></p>
<h2 id="一-代码阅览类"><a href="#一-代码阅览类" class="headerlink" title="一 代码阅览类"></a>一 代码阅览类</h2><p><a href="http://androidxref.com/" target="_blank" rel="external">http://androidxref.com/</a>     Android系统源码极速搜索<br><a href="https://source.codeaurora.org/" target="_blank" rel="external">https://source.codeaurora.org/</a>   qcom开源Android Source<br><a href="http://www.grepcode.com/" target="_blank" rel="external">http://www.grepcode.com/</a>   grep api<br><a href="https://github.com/android" target="_blank" rel="external">https://github.com/android</a><br><a href="http://source.android.com/source/" target="_blank" rel="external">http://source.android.com/source/</a><br><a href="https://developers.google.com/" target="_blank" rel="external">https://developers.google.com/</a><br><a href="http://android.xsoftlab.net/index.html" target="_blank" rel="external">http://android.xsoftlab.net/index.html</a>   Android 镜像<br><a href="https://developers.google.cn/" target="_blank" rel="external">https://developers.google.cn/</a>   Google Developer<br><a href="https://developer.android.google.cn/index.html" target="_blank" rel="external">https://developer.android.google.cn/index.html</a>   Android Developer<br><a href="https://developers.google.cn/china/" target="_blank" rel="external">https://developers.google.cn/china/</a>  Google中国开发者</p>
<p>Code Style<br><a href="https://github.com/google/styleguide" target="_blank" rel="external">https://github.com/google/styleguide</a>   Style guides for Google-originated open-source projects</p>
<p>Google Style Guides</p>
<p>Every major open-source project has its own style guide: a set of conventions (sometimes arbitrary) about how to write code for that project. It is much easier to understand a large codebase when all the code in it is in a consistent style.</p>
<p>“Style” covers a lot of ground, from “use camelCase for variable names” to “never use global variables” to “never use exceptions.” This project holds the style guidelines we use for Google code. If you are modifying a project that originated at Google, you may be pointed to this page to see the style guides that apply to that project.</p>
<p>Our C++ Style Guide, Objective-C Style Guide, Java Style Guide, Python Style Guide, R Style Guide, Shell Style Guide, HTML/CSS Style Guide, JavaScript Style Guide, AngularJS Style Guide, Common Lisp Style Guide, and Vimscript Style Guide are now available. We have also released cpplint, a tool to assist with style guide compliance, and google-c-style.el, an Emacs settings file for Google style.</p>
<p>If your project requires that you create a new XML document format, our XML Document Format Style Guide may be helpful. In addition to actual style rules, it also contains advice on designing your own vs. adapting an existing format, on XML instance document formatting, and on elements vs. attributes.</p>
<p>These style guides are licensed under the CC-By 3.0 License, which encourages you to share these documents. See<a href="https://creativecommons.org/licenses/by/3.0/" target="_blank" rel="external">https://creativecommons.org/licenses/by/3.0/</a> for more details.</p>
<p><a href="https://google.github.io/styleguide/javaguide.html" target="_blank" rel="external">https://google.github.io/styleguide/javaguide.html</a> Google Java Style Guide<br><a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="external">https://google.github.io/styleguide/cppguide.html</a>   Google C++ Style Guide</p>
<p>以下需要梯子<br><a href="https://material.google.com" target="_blank" rel="external">https://material.google.com</a>   GUI StandardMaterial Design Guideline<br><a href="https://design.google.com" target="_blank" rel="external">https://design.google.com</a><br><a href="https://android-review.googlesource.com" target="_blank" rel="external">https://android-review.googlesource.com</a>    Google Review<br><a href="https://android.googlesource.com/platform" target="_blank" rel="external">https://android.googlesource.com/platform</a>  或 <a href="http://android.googlesource.com/platform" target="_blank" rel="external">http://android.googlesource.com/platform</a>  //各种版本的都有<br><a href="https://android.googlesource.com/platform/frameworks/base/" target="_blank" rel="external">https://android.googlesource.com/platform/frameworks/base/</a><br><a href="https://android.googlesource.com/platform/packages" target="_blank" rel="external">https://android.googlesource.com/platform/packages</a></p>
<p><a href="http://blog.csdn.net/deng0zhaotai/article/details/17512515" target="_blank" rel="external">http://blog.csdn.net/deng0zhaotai/article/details/17512515</a>   Windows环境下通过Git得到Android源代码<br>没法翻墙的，参考：<a href="https://mirror.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="external">https://mirror.tuna.tsinghua.edu.cn/help/AOSP/</a><br>参考 Google 教程 <a href="https://source.android.com/source/downloading.html，" target="_blank" rel="external">https://source.android.com/source/downloading.html，</a> 将 <a href="https://android.googlesource.com/" target="_blank" rel="external">https://android.googlesource.com/</a> 全部使用 <a href="https://aosp.tuna.tsinghua.edu.cn/" target="_blank" rel="external">https://aosp.tuna.tsinghua.edu.cn/</a> 代替即可。<br>eg:<br>git clone <a href="https://aosp.tuna.tsinghua.edu.cn/platform/packages/apps/DeskClock/" target="_blank" rel="external">https://aosp.tuna.tsinghua.edu.cn/platform/packages/apps/DeskClock/</a><br>git clone <a href="https://aosp.tuna.tsinghua.edu.cn/platform/frameworks/base" target="_blank" rel="external">https://aosp.tuna.tsinghua.edu.cn/platform/frameworks/base</a><br>然后使用git工具clone(见 Windows环境下通过Git得到Android源代码)即可得到源码。</p>
<h2 id="二-技术学习类"><a href="#二-技术学习类" class="headerlink" title="二 技术学习类"></a>二 技术学习类</h2><p><a href="https://developers.google.cn/" target="_blank" rel="external">https://developers.google.cn/</a>  Google Developers<br><a href="http://www.jianshu.com/p/85cb02292acc" target="_blank" rel="external">http://www.jianshu.com/p/85cb02292acc</a>         10个很棒的学习Android 开发的网站<br><a href="http://www.tutorialspoint.com/android/" target="_blank" rel="external">http://www.tutorialspoint.com/android/</a>             是一个专业的技术教程网站<br><a href="http://www.vogella.com/tutorials/android.html" target="_blank" rel="external">http://www.vogella.com/tutorials/android.html</a>   提供的Android 开发教程也是可圈可点的<br><a href="http://gold.xitu.io/" target="_blank" rel="external">http://gold.xitu.io/</a>      掘金 高质量的技术社区<br><a href="http://so.csdn.net/so/" target="_blank" rel="external">http://so.csdn.net/so/</a>     csdn搜索<br><a href="https://segmentfault.com/" target="_blank" rel="external">https://segmentfault.com/</a>     segmentfault 中国领先的开发者社区<br><a href="http://www.jianshu.com/" target="_blank" rel="external">http://www.jianshu.com/</a>     简书 包罗万象的专题<br><a href="http://ruby-china.org/" target="_blank" rel="external">http://ruby-china.org/</a>       ruby中文社区<br><a href="http://www.javased.com/" target="_blank" rel="external">http://www.javased.com/</a>    查找Android API示例代码的网站<br><a href="http://www.jcodecraeer.com/" target="_blank" rel="external">http://www.jcodecraeer.com/</a>  泡在网上的日子<br><a href="http://www.cnblogs.com/" target="_blank" rel="external">http://www.cnblogs.com/</a>   博客园<br><a href="http://www.codeceo.com/" target="_blank" rel="external">http://www.codeceo.com/</a>  码农网<br><a href="http://www.imooc.com/" target="_blank" rel="external">http://www.imooc.com/</a>   慕课网(IMOOC)<br><a href="http://www.materialdoc.cn/" target="_blank" rel="external">http://www.materialdoc.cn/</a>   Material Design<br><a href="http://duanmo.me/2016/04/17/memory-leak-summary/" target="_blank" rel="external">http://duanmo.me/2016/04/17/memory-leak-summary/</a>  Android 内存泄露总结<br><a href="http://blog.csdn.net/yiyaaixuexi/article/details/6716884" target="_blank" rel="external">http://blog.csdn.net/yiyaaixuexi/article/details/6716884</a>  Android代码调试工具 traceview 和 dmtracedump的波折演绎<br><a href="https://www.openssl.org/" target="_blank" rel="external">https://www.openssl.org/</a>  openssl<br><a href="http://www.androiddevtools.cn/index.html" target="_blank" rel="external">http://www.androiddevtools.cn/index.html</a><br>Ubuntu 命令技巧: <a href="http://wiki.ubuntu.org.cn/index.php?title=UbuntuSkills&amp;variant=zh-cn" target="_blank" rel="external">http://wiki.ubuntu.org.cn/index.php?title=UbuntuSkills&amp;variant=zh-cn</a><br>Ubuntu 桌面指南: <a href="https://help.ubuntu.com//" target="_blank" rel="external">https://help.ubuntu.com//</a></p>
<p>聚合数据-免费数据调用 <a href="https://www.juhe.cn/" target="_blank" rel="external">https://www.juhe.cn/</a><br>有赞- 免费的微商城 <a href="http://youzan.com/" target="_blank" rel="external">http://youzan.com/</a><br>秀米微信图文编辑器 <a href="http://xiumi.us/" target="_blank" rel="external">http://xiumi.us/</a><br>禅道项目管理软件 <a href="http://www.zentao.net/" target="_blank" rel="external">http://www.zentao.net/</a><br>安卓开发工具平台 <a href="http://www.androiddevtools.cn/" target="_blank" rel="external">http://www.androiddevtools.cn/</a><br>友盟_开发者服务平台 <a href="http://www.umeng.com/" target="_blank" rel="external">http://www.umeng.com/</a><br>Bmob移动后端云服务平台 <a href="http://www.bmob.cn/" target="_blank" rel="external">http://www.bmob.cn/</a><br>初页- 优质H5微信海报 手机应用<br>兔展-移动H5页面 <a href="http://www.rabbitpre.com/" target="_blank" rel="external">http://www.rabbitpre.com/</a><br>安卓视频平台 <a href="https://www.vitamio.org/" target="_blank" rel="external">https://www.vitamio.org/</a><br>安卓开源项目分类汇总 <a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">https://github.com/Trinea/android-open-project</a><br>Github的开源项目汇总 <a href="http://www.eoeandroid.com/thread-546248-1-3.html" target="_blank" rel="external">http://www.eoeandroid.com/thread-546248-1-3.html</a><br>Android design中文版 <a href="http://adchs.github.io/index.html" target="_blank" rel="external">http://adchs.github.io/index.html</a><br>Android官方课程中文版 <a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">http://hukai.me/android-training-course-in-chinese/index.html</a><br>图标 <a href="https://www.google.com/design/icons/#ic_search" target="_blank" rel="external">https://www.google.com/design/icons/#ic_search</a><br>Android开发者博客 <a href="http://android-developers.blogspot.jp/" target="_blank" rel="external">http://android-developers.blogspot.jp/</a><br>泡在网上的日子 <a href="http://www.jcodecraeer.com/" target="_blank" rel="external">http://www.jcodecraeer.com/</a><br>AS中文社区 <a href="http://www.android-studio.org/" target="_blank" rel="external">http://www.android-studio.org/</a><br>testin云测 <a href="http://www.testin.cn/portal.action?op=Portal.index" target="_blank" rel="external">http://www.testin.cn/portal.action?op=Portal.index</a></p>
<h2 id="三-SDK及源码下载更新类"><a href="#三-SDK及源码下载更新类" class="headerlink" title="三 SDK及源码下载更新类"></a>三 SDK及源码下载更新类</h2><p><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">http://www.androiddevtools.cn/</a>  Android开发环境及工具，列举了很多<br><a href="http://tools.android-studio.org/index.php/proxy" target="_blank" rel="external">http://tools.android-studio.org/index.php/proxy</a>  Android SDK在线更新镜像服务器资源<br><a href="http://ask.android-studio.org/?/article/34" target="_blank" rel="external">http://ask.android-studio.org/?/article/34</a>           Android SDK在线更新镜像服务器资源<br>A，测试镜像服务器网速：<a href="http://ping.chinaz.com/" target="_blank" rel="external">http://ping.chinaz.com/</a><br>B，或下载工具(<a href="http://www.xdowns.com/soft/6/99/2016/Soft_156717.html" target="_blank" rel="external">http://www.xdowns.com/soft/6/99/2016/Soft_156717.html</a>)<br>      通过cmd命令行测试：http-ping.exe <a href="http://sdk.gdgshanghai.com" target="_blank" rel="external">http://sdk.gdgshanghai.com</a></p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="external">https://mirrors.tuna.tsinghua.edu.cn/</a>  清华大学镜像源<br><a href="http://www.cnblogs.com/bluestorm/p/4419051.html" target="_blank" rel="external">http://www.cnblogs.com/bluestorm/p/4419051.html</a>   同步、更新、下载Android Source &amp; SDK from 国内镜像站<br><a href="http://www.cnblogs.com/bluestorm/p/4419135.html" target="_blank" rel="external">http://www.cnblogs.com/bluestorm/p/4419135.html</a>  Ubuntu 下载 &amp; 编译 Android5.1 源码<br><a href="http://blog.csdn.net/gyming/article/details/8168166/" target="_blank" rel="external">http://blog.csdn.net/gyming/article/details/8168166/</a>   Android应用开发相关下载资源(2016/07/24更新)<br>Android源代码国内下载镜像 (android source mirror: <a href="http://mirror.neu.edu.cn/android/platform/" target="_blank" rel="external">http://mirror.neu.edu.cn/android/platform/</a>)</p>
<h2 id="四-UI控件类"><a href="#四-UI控件类" class="headerlink" title="四 UI控件类"></a>四 UI控件类</h2><p>Android开源项目总结(<a href="http://hunankeda110.iteye.com/blog/2103569)(个性化控件，工具库等，非常丰富" target="_blank" rel="external">http://hunankeda110.iteye.com/blog/2103569)(个性化控件，工具库等，非常丰富</a>)<br>GitHub优秀的开源项目(<a href="http://blog.csdn.net/xiechengfa/article/details/38536643" target="_blank" rel="external">http://blog.csdn.net/xiechengfa/article/details/38536643</a>) (赞); 或hawkon (<a href="http://www.cnblogs.com/hawkon/p/3593709.html" target="_blank" rel="external">http://www.cnblogs.com/hawkon/p/3593709.html</a>)</p>
<h2 id="五-工具类"><a href="#五-工具类" class="headerlink" title="五 工具类"></a>五 工具类</h2><p><a href="http://www.thefilehippo.com/" target="_blank" rel="external">http://www.thefilehippo.com/</a>  需要翻墙，一个不错的下载网站，里面有很多离线安装包<br><a href="http://www.thefilehippo.com/search/label/Browsers" target="_blank" rel="external">http://www.thefilehippo.com/search/label/Browsers</a>   可以找到最新的google浏览器离线安装包<br><a href="https://www.tutorialspoint.com/uml/uml_2_overview.htm" target="_blank" rel="external">https://www.tutorialspoint.com/uml/uml_2_overview.htm</a>  UM L 2.0<br><a href="http://www.uml.org/index.htm" target="_blank" rel="external">http://www.uml.org/index.htm</a>  uml<br><a href="http://www.omg.org/spec/UML/2.0/" target="_blank" rel="external">http://www.omg.org/spec/UML/2.0/</a>  pdf<br><a href="http://www.uml-diagrams.org/" target="_blank" rel="external">http://www.uml-diagrams.org/</a>    uml 图<br><a href="http://tool.lu/hexconvert/" target="_blank" rel="external">http://tool.lu/hexconvert/</a>    进制转换<br><a href="https://git-scm.com/docs" target="_blank" rel="external">https://git-scm.com/docs</a> Git command help<br>ftp://www.kernel.org/pub/software/scm/git/docs/   Git command<br><a href="http://www.eclipse.org/downloads/packages/all" target="_blank" rel="external">http://www.eclipse.org/downloads/packages/all</a> eclipse大全<br><a href="http://www.xitongzhijia.net/" target="_blank" rel="external">http://www.xitongzhijia.net/</a>  系统之家　工具和系统下载<br><a href="http://www.xp510.com/" target="_blank" rel="external">http://www.xp510.com/</a>  XP系统之家，绿色下载网站  不错<br><a href="http://imcn.me/" target="_blank" rel="external">http://imcn.me/</a>　Linux工具<br>PS:<br><a href="http://download.csdn.net/detail/dadaxiaoxiaode/9631931" target="_blank" rel="external">http://download.csdn.net/detail/dadaxiaoxiaode/9631931</a>   google 32bit 离线安装包 20160914发布的<br><a href="http://download.csdn.net/detail/dadaxiaoxiaode/9631926" target="_blank" rel="external">http://download.csdn.net/detail/dadaxiaoxiaode/9631926</a>   google 64bit 离线安装包 20160914发布的</p>
<p><a href="http://www.panduoduo.net/" target="_blank" rel="external">http://www.panduoduo.net/</a><br><a href="http://pan.java1234.com/" target="_blank" rel="external">http://pan.java1234.com/</a><br><a href="http://www.baiduyunwangpan.com/" target="_blank" rel="external">http://www.baiduyunwangpan.com/</a></p>
<p><a href="http://www.sobaidupan.com/" target="_blank" rel="external">http://www.sobaidupan.com/</a> 强大<br><a href="http://soft.sobaidupan.com/" target="_blank" rel="external">http://soft.sobaidupan.com/</a>   百度云搜索器</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;神雕侠侣&lt;br&gt;A：搜百度盘+百度云官方客户端&lt;br&gt;B：P2PSearcher+迅雷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sobaidupan.com/image/logo.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;网址：&lt;a href=&quot;http://www.sobaidupan.com/&quot;&gt;http://www.sobaidupan.com/&lt;/a&gt;&lt;br&gt;工具：&lt;a href=&quot;http://soft.sobaidupan.com/&quot;&gt;http://soft.sobaidupan.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;百度云搜索器（Ver 1.2.7.9）&lt;br&gt;百度云搜索器是一款专业强大的百度网盘资源搜索软件，数据庞大，搜索极快，简单易用，绿色小巧，无需安装，是目前互联网同行中百度云搜索最好的软件之一，可以搜索种子、电影、视频、MP3、游戏、系统、教育资源、图片、光盘文件、小说、文档、手机APP等几十种各种各样的资源！&lt;br&gt;支持系统：MS WinXP/Win7/win8/win10(32/64)以上系统.&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="BaiduYun" scheme="http://ipcreator.me/tags/BaiduYun/"/>
    
  </entry>
  
  <entry>
    <title>Professional Words of Computer</title>
    <link href="http://ipcreator.me/2017/03/26/MyView/English/computer-english-words/"/>
    <id>http://ipcreator.me/2017/03/26/MyView/English/computer-english-words/</id>
    <published>2017-03-25T16:00:00.000Z</published>
    <updated>2017-03-30T09:03:33.187Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/375px-ForgettingCurve.svg.png" alt=""></p>
<blockquote>
<p>德国心理学家艾宾浩斯（Ebbinghaus）指出，遗忘是有规律的，即先快后慢。要使学生巩固所学的词汇，就必须及时复习，使要记忆的词汇在头脑中留下深刻的痕迹，不致遗忘…</p>
</blockquote>
<p><img src="http://ong8f1obl.bkt.clouddn.com/the%20formula%20of%20forgetting%20curve%20.jpg" alt=""></p>
<p>考察从记忆开始，1天后大部分内容被遗忘掉，但是一天之后的遗忘率开变得平缓。</p>
<p>20分后，42%被遗忘掉，58%被记住。<br>1小时后，56%被遗忘掉，44%被记住。<br>1天后，74%被遗忘掉，26%被记住。<br>1周后，77%被遗忘掉，23%被记住。<br>1个月后，79%被遗忘掉，21%被记住。</p>
<a id="more"></a>
<h2 id="Mathematics"><a href="#Mathematics" class="headerlink" title="Mathematics"></a>Mathematics</h2><h3 id="formula"><a href="#formula" class="headerlink" title="formula"></a>formula</h3><p>英 [‘fɔːmjʊlə]  美 [‘fɔrmjələ]<br>n. [数] 公式，准则；配方；婴儿食品<br>[ 复数 formulas或formulae ]</p>
<h3 id="curve"><a href="#curve" class="headerlink" title="curve"></a>curve</h3><p>英 [kɜːv]  美 [kɝv]<br>n. 曲线；弯曲；曲线球；曲线图表<br>vt. 弯；使弯曲<br>vi. 成曲形<br>adj. 弯曲的；曲线形的<br>[ 过去式 curved 过去分词 curved 现在分词 curving ]</p>
<h2 id="Data-Type"><a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type</h2><h3 id="mantissa"><a href="#mantissa" class="headerlink" title="mantissa"></a>mantissa</h3><p>英 [mæn’tɪsə]  美 [mæn’tɪsə]<br>n. [数] 尾数；假数；定点部分；小数部分<br>n. (Mantissa)人名；(刚(布))曼蒂萨</p>
<h3 id="exponent"><a href="#exponent" class="headerlink" title="exponent"></a>exponent</h3><p>英 [ɪk’spəʊnənt; ek-]  美 [ɪk’sponənt]<br>n. [数] 指数；典型；说明者，说明物<br>n. 倡导者，鼓吹者，代表者，拥护者<br>adj. 说明的</p>
<h2 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h2><h3 id="suppress"><a href="#suppress" class="headerlink" title="suppress"></a>suppress</h3><p>英 [sə’pres]  美 [sə’prɛs]<br>vt. 抑制；镇压；废止</p>
<h3 id="arbitrary"><a href="#arbitrary" class="headerlink" title="arbitrary"></a>arbitrary</h3><p>英 [‘ɑːbɪt(rə)rɪ]  美 [ˈɑːrbətreri]<br>adj. [数] 任意的；武断的；专制的</p>
<h3 id="delegate"><a href="#delegate" class="headerlink" title="delegate"></a>delegate</h3><p>英 [ˈdɛlɪˌɡeɪt; -ɡɪt; (for v.,) ˈdɛlɪˌɡeɪt] 美 [ˈdɛləgɪt; (for v.,) ˈdɛləˌgeɪt]<br>vt. 委派…为代表<br>n. 代表<br>[ 过去式 delegated 过去分词 delegated 现在分词 delegating ]</p>
<h3 id="inflate"><a href="#inflate" class="headerlink" title="inflate"></a>inflate</h3><p>英 [ɪn’fleɪt]  美 [ɪn’flet]<br>vt. 使充气；使通货膨胀<br>vi. 膨胀；充气<br>[ 过去式 inflated 过去分词 inflated 现在分词 inflating ]</p>
<h3 id="composite"><a href="#composite" class="headerlink" title="composite"></a>composite</h3><p>英 [‘kɒmpəzɪt]  美 [kɑm’pɑzɪt]<br>n. 复合材料；合成物；菊科<br>adj. 复合的；合成的；菊科的<br>vt. 使合成；使混合<br>[ 过去式 composited 过去分词 composited 现在分词 compositing ]</p>
<h3 id="accelerate"><a href="#accelerate" class="headerlink" title="accelerate"></a>accelerate</h3><p>英 [ək’seləreɪt]  美 [əkˈsɛləˌret]<br>vt. 使……加快；使……增速<br>vi. 加速；促进；增加<br>[ 过去式 accelerated 过去分词 accelerated 现在分词 accelerating ]</p>
<h3 id="principle"><a href="#principle" class="headerlink" title="principle"></a>principle</h3><p>英 [‘prɪnsɪp(ə)l]  美 [‘prɪnsəpl]<br>n. 原理，原则；主义，道义；本质，本义；根源，源泉</p>
<h3 id="crawler"><a href="#crawler" class="headerlink" title="crawler"></a>crawler</h3><p>英 [‘krɔːlə]  美 [‘krɔlɚ]<br>n. 爬行者；履带牵引装置</p>
<h3 id="robust"><a href="#robust" class="headerlink" title="robust"></a>robust</h3><p>英 [rə(ʊ)’bʌst]  美 [ro’bʌst]<br>adj. 强健的；健康的；粗野的；粗鲁的<br>[ 比较级 more robust 最高级 most robust ]</p>
<h3 id="malicious"><a href="#malicious" class="headerlink" title="malicious"></a>malicious</h3><p>英 [mə’lɪʃəs]  美 [mə’lɪʃəs]<br>adj. 恶意的；恶毒的；蓄意的；怀恨的</p>
<h3 id="category"><a href="#category" class="headerlink" title="category"></a>category</h3><p>英 [‘kætɪg(ə)rɪ]  美 [‘kætəɡɔri]<br>n. 种类，分类；[数] 范畴<br>[ 复数 categories ]</p>
<h3 id="coordinator"><a href="#coordinator" class="headerlink" title="coordinator"></a>coordinator</h3><p>英 [kəʊ’ɔ:dɪneɪtə]  美 [ko’ɔrdn,etɚ]<br>n. 协调者；[自] 协调器；同等的人或物</p>
<h2 id="constraint"><a href="#constraint" class="headerlink" title="constraint"></a>constraint</h2><p>英 [kən’streɪnt]  美 [kən’strent]<br>n. [数] 约束；局促，态度不自然；强制</p>
<h3 id="parallel"><a href="#parallel" class="headerlink" title="parallel"></a>parallel</h3><p>英 [‘pærəlel]  美 [‘pærəlɛl]<br>n. 平行线；对比<br>vt. 使…与…平行<br>adj. 平行的；类似的，相同的<br>[ 过去式 paralleled或-allelled 过去分词 paralleled或-allelled 现在分词 paralleling或-allelling ]</p>
<h3 id="initialization"><a href="#initialization" class="headerlink" title="initialization"></a>initialization</h3><p>英 [ɪ,nɪʃəlaɪ’zeɪʃən]  美 [ɪ,nɪʃəlɪ’zeʃən]<br>n. [计] 初始化；赋初值</p>
<h3 id="polymorphism"><a href="#polymorphism" class="headerlink" title="polymorphism"></a>polymorphism</h3><p>英 [,pɒlɪ’mɔːfɪz(ə)m]  美 [,pɑlɪ’mɔrfɪzm]<br>n. 多态性；多形性；同质多晶</p>
<h3 id="concurrency"><a href="#concurrency" class="headerlink" title="concurrency"></a>concurrency</h3><p>英  美 [kən’kɚrənsi; kən’kʌrənsi]<br>n. [计] 并发性；同时发生</p>
<h3 id="annotation"><a href="#annotation" class="headerlink" title="annotation"></a>annotation</h3><p>英 [ænə’teɪʃ(ə)n]  美 [ˌænəˈteʃən]<br>n. 注释；注解；释文</p>
<h3 id="correspond"><a href="#correspond" class="headerlink" title="correspond"></a>correspond</h3><p>英 [kɒrɪ’spɒnd]  美 [,kɔrə’spɑnd]<br>vi. 符合，一致；相应；通信</p>
<h3 id="parameter"><a href="#parameter" class="headerlink" title="parameter"></a>parameter</h3><p>英 [pə’ræmɪtə]  美 [pə’ræmɪtɚ]<br>n. 参数；系数；参量</p>
<h3 id="interpolator"><a href="#interpolator" class="headerlink" title="interpolator"></a>interpolator</h3><p>英 [ɪn’tɜ:pəʊleɪtə]  美 [ɪn’tɜ:poʊleɪtə]</p>
<p>n.  撺改者，校对机，分类机;</p>
<h3 id="parcel"><a href="#parcel" class="headerlink" title="parcel"></a>parcel</h3><p>英 [ˈpɑ:sl]   美 [ˈpɑrsl]<br>     CET4 | CET6 | 考研<br>n.  包袱，包裹; （土地的）一块; 一批，一群; （货物的）一宗;<br>vt.  分，区分; 把…划成部分后分配; 给…打成包裹; 把…拼在一起;<br>变形 过去分词: parcelled 复数: parcels 过去式: parcelled 现在分词: parcelling 第三人称单数: parcels</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://zh.wikipedia.org/wiki/%E8%B5%AB%E5%B0%94%E6%9B%BC%C2%B7%E8%89%BE%E5%AE%BE%E6%B5%A9%E6%96%AF" target="_blank" rel="external">赫尔曼·艾宾浩斯 Hermann Ebbinghaus </a><br><a href="https://zh.wikipedia.org/wiki/%E9%81%97%E5%BF%98%E6%9B%B2%E7%BA%BF" target="_blank" rel="external">遗忘曲线 Forgetting curve</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/375px-ForgettingCurve.svg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;德国心理学家艾宾浩斯（Ebbinghaus）指出，遗忘是有规律的，即先快后慢。要使学生巩固所学的词汇，就必须及时复习，使要记忆的词汇在头脑中留下深刻的痕迹，不致遗忘…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/the%20formula%20of%20forgetting%20curve%20.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;考察从记忆开始，1天后大部分内容被遗忘掉，但是一天之后的遗忘率开变得平缓。&lt;/p&gt;
&lt;p&gt;20分后，42%被遗忘掉，58%被记住。&lt;br&gt;1小时后，56%被遗忘掉，44%被记住。&lt;br&gt;1天后，74%被遗忘掉，26%被记住。&lt;br&gt;1周后，77%被遗忘掉，23%被记住。&lt;br&gt;1个月后，79%被遗忘掉，21%被记住。&lt;/p&gt;
    
    </summary>
    
      <category term="English" scheme="http://ipcreator.me/categories/English/"/>
    
    
      <category term="Word" scheme="http://ipcreator.me/tags/Word/"/>
    
      <category term="Profession" scheme="http://ipcreator.me/tags/Profession/"/>
    
  </entry>
  
  <entry>
    <title>Awesome Android Complete Reference</title>
    <link href="http://ipcreator.me/2017/03/25/Program/Android/awesome-android-complete-reference/"/>
    <id>http://ipcreator.me/2017/03/25/Program/Android/awesome-android-complete-reference/</id>
    <published>2017-03-25T14:00:06.000Z</published>
    <updated>2017-03-27T07:50:25.667Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/amitshekhariitbhu/awesome-android-complete-reference" target="_blank" rel="external">Awesome Android Complete Reference</a></p>
<p>A curated list of Android Complete References at one place. A complete reference for android developers. Here you can find references about everything you use while Android Development.</p>
<a id="more"></a>
<h1 id="Awesome-Android-Complete-Reference"><a href="#Awesome-Android-Complete-Reference" class="headerlink" title="Awesome Android Complete Reference "></a>Awesome Android Complete Reference <a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external"><img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg" alt="Awesome"></a></h1><h3 id="About-Awesome-Android-Complete-Reference"><a href="#About-Awesome-Android-Complete-Reference" class="headerlink" title="About Awesome Android Complete Reference"></a>About Awesome Android Complete Reference</h3><p>A curated list of Android Complete References at one place.<br>A complete reference for android developers. Here you can find references about everything you use while Android Development.</p>
<h3 id="Android-App-Architecture"><a href="#Android-App-Architecture" class="headerlink" title="Android App Architecture"></a>Android App Architecture</h3><ul>
<li><a href="https://github.com/MindorksOpenSource/android-mvp-architecture" target="_blank" rel="external">Android-MVP-Architecture</a> - A complete android project based on MVP architecture.</li>
<li><a href="https://github.com/amitshekhariitbhu/Android-MVP-Sample-Application" target="_blank" rel="external">Android MVP Sample Application</a> - A very basic android sample application on MVP architecture.</li>
<li><a href="https://blog.mindorks.com/essential-guide-for-designing-your-android-app-architecture-mvp-part-1-74efaf1cda40" target="_blank" rel="external">Blog Post on MVP Architecture</a> - Essential Guide For Designing Your Android App Architecture.</li>
</ul>
<h3 id="Third-Party-Libraries"><a href="#Third-Party-Libraries" class="headerlink" title="Third Party Libraries"></a>Third Party Libraries</h3><ul>
<li><a href="https://mindorks.com/open-source-projects" target="_blank" rel="external">Mindorks Open Source Projects</a> - Mindorks Open Source Projects</li>
<li><a href="http://android-arsenal.com/" target="_blank" rel="external">Android Arsenal</a> - Largest Reference for 3rd party libraries.</li>
<li><a href="https://github.com/JStumpp/awesome-android" target="_blank" rel="external">JStumpp Android Awesome</a> - The reference for 3rd party libraries.</li>
<li><a href="https://github.com/snowdream/awesome-android" target="_blank" rel="external">Snowdream Android Awesome</a> - The reference for 3rd party libraries.</li>
<li><a href="https://github.com/amitshekhariitbhu/Fast-Android-Networking" target="_blank" rel="external">Fast Android Networking</a> - Android Networking is a powerful library for doing any type of networking in Android applications.</li>
<li><a href="https://github.com/amitshekhariitbhu/Android-Debug-Database" target="_blank" rel="external">Android Debug Database</a> - Android Debug Database is a powerful library for debugging databases and shared preferences in Android applications.</li>
<li><a href="https://github.com/amitshekhariitbhu/GlideBitmapPool" target="_blank" rel="external">Glide Bitmap Pool</a> - Glide Bitmap Pool is a memory management library for reusing the bitmap memory.</li>
<li><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">Android Awesome UI</a> - The reference for Android 3rd party UI libraries.</li>
<li><a href="http://square.github.io/#android" target="_blank" rel="external">Square Libraries</a> - Android Libraries by Square.</li>
<li><a href="https://code.facebook.com/projects/android" target="_blank" rel="external">Android Libraries By Facebook</a> - Android 3rd Party Libraries By Facebook.</li>
<li><a href="https://android-libs.com/" target="_blank" rel="external">Android Libs</a> - Another reference for 3rd party libraries.</li>
<li><a href="http://alamkanak.github.io/android-libraries-and-resources/" target="_blank" rel="external">Android Libraries</a> - Another reference for 3rd party libraries.</li>
<li><a href="https://android-libraries.zeef.com/jurgen.stumpp" target="_blank" rel="external">Android Libraries</a> - Another reference for 3rd party libraries.</li>
<li><a href="http://p.codekk.com/" target="_blank" rel="external">Android Libraries</a> - Another reference for 3rd party libraries.</li>
<li><a href="https://play.google.com/store/apps/details?id=com.inappsquared.devappsdirect" target="_blank" rel="external">DevAppsDirect - Demo Market</a> - App that demonstrates different libraries.</li>
<li><a href="https://android.libhunt.com/" target="_blank" rel="external">Awesome Android @LibHunt</a> - Your go-to Android Toolbox.</li>
<li><a href="https://github.com/mcxiaoke/awesome-kotlin" target="_blank" rel="external">Android Kotlin Libraries</a> - A reference for 3rd party Kotlin libraries.</li>
<li><a href="http://gradleplease.appspot.com/" target="_blank" rel="external">Gradle Please</a> - Gradle Dependencies for Libraries.</li>
</ul>
<h3 id="Android-UI"><a href="#Android-UI" class="headerlink" title="Android UI"></a>Android UI</h3><ul>
<li><a href="http://androidniceties.tumblr.com/" target="_blank" rel="external">Android UI/UX</a> - The reference for Android Best UI/UX.</li>
<li><a href="https://romannurik.github.io/AndroidAssetStudio/" target="_blank" rel="external">Android Icon Generator</a> - Generator for icons and other assets.</li>
<li><a href="https://medium.com/exploring-android/exploring-the-new-android-constraintlayout-eed37fe8d8f1#.g25l4abme" target="_blank" rel="external">Android New ConstraintLayout</a> - Exploring the new Android ConstraintLayout.</li>
<li><a href="https://materialdesignicons.com/" target="_blank" rel="external">Material Design Icons</a> - Material Design Icons</li>
<li><a href="http://www.materialup.com/" target="_blank" rel="external">Material Up</a> - MaterialUp curates the best of Material Design</li>
<li><a href="http://android-holo-colors.com/" target="_blank" rel="external">Holo Colors</a> - Holo Colors for icons</li>
</ul>
<h3 id="Performance-And-Optimization"><a href="#Performance-And-Optimization" class="headerlink" title="Performance And Optimization"></a>Performance And Optimization</h3><ul>
<li><a href="https://github.com/Juude/awesome-android-performance" target="_blank" rel="external">Awesome Android Performance</a> - The reference for Android Performance.</li>
<li><a href="https://blog.mindorks.com/how-to-use-bitmap-pool-in-android-56c71a55533c" target="_blank" rel="external">Reusing Bitmap Memory</a> - How to use Bitmap Pool in Android ?</li>
<li><a href="https://github.com/amitshekhariitbhu/GlideBitmapPool" target="_blank" rel="external">Glide Bitmap Pool</a> - Glide Bitmap Pool is a memory management library for reusing the bitmap memory.</li>
<li><a href="https://blog.mindorks.com/battery-optimization-for-android-apps-f4ef6170ff70" target="_blank" rel="external">Battery Optimization for Android Apps</a> - Battery Optimization for Android Apps.</li>
<li><a href="https://www.youtube.com/watch?v=McAvq5SkeTk&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=60" target="_blank" rel="external">Memory Churn and Performance</a> - Android Performance Patterns: Memory Churn and Performance.</li>
<li><a href="https://www.youtube.com/watch?v=h7qHsk1nWKI&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=62" target="_blank" rel="external">Performance Cost of Memory Leaks</a> - Android Performance Patterns: Performance Cost of Memory Leaks.</li>
<li><a href="https://www.youtube.com/playlist?list=PLOU2XLYxmsIKEOXh5TwZEv89aofHzNCiu" target="_blank" rel="external">Android Performance Pattern</a> - Android Performance Pattern from Google.</li>
<li><a href="https://www.youtube.com/watch?v=r_LpCi6DQME" target="_blank" rel="external">Android Image Compression</a> - Best Guide For Image Compression.</li>
<li><a href="https://blog.mindorks.com/why-consider-flatbuffer-over-json-2e4aa8d4ed07" target="_blank" rel="external">FlatBuffer Vs JSON</a> - Why consider flatBuffer over JSON.</li>
<li><a href="https://github.com/krschultz/android-proguard-snippets" target="_blank" rel="external">Android Proguard Snippets</a> - Android Proguard Rules for Common 3rd Party Libraries.</li>
<li><a href="https://medium.com/google-developers/smallerapk-part-1-anatomy-of-an-apk-da83c25e7003#.g5f6dfng9" target="_blank" rel="external">APK size reduction</a> - Guide for apk size reduction.</li>
<li><a href="https://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.5q59i049s" target="_blank" rel="external">Android Instant Run</a> - Instant Run: How Does it Work?.</li>
<li><a href="http://www.methodscount.com/" target="_blank" rel="external">Method Count Library</a> - A website to check method count of 3rd party libraries.</li>
<li><a href="http://inloop.github.io/apk-method-count/" target="_blank" rel="external">Method Count APK</a> - A website to check method count of an APK.</li>
<li><a href="https://blog.mindorks.com/simple-and-fast-android-networking-19ed860d1455" target="_blank" rel="external">Using Fast Android Networking</a> - Android Fast And Easy Networking</li>
<li><a href="https://blog.mindorks.com/comparing-android-ndk-and-renderscript-1a718c01f6fe" target="_blank" rel="external">Comparing Android NDK and RenderScript</a> - Comparing Android NDK and RenderScript</li>
<li><a href="https://blog.mindorks.com/android-app-optimization-using-arraymap-and-sparsearray-f2b4e2e3dc47" target="_blank" rel="external">Android App Optimization Using ArrayMap and SparseArray</a> - Android App Optimization Using ArrayMap and SparseArray</li>
<li><a href="https://blog.mindorks.com/android-app-performance-metrics-a1176334186e" target="_blank" rel="external">Android App Performance Metrics</a> - Metrics that you should measure continuously while android application development</li>
</ul>
<h3 id="Best-Practices"><a href="#Best-Practices" class="headerlink" title="Best Practices"></a>Best Practices</h3><ul>
<li><a href="https://blog.mindorks.com/android-development-best-practices-83c94b027fd3" target="_blank" rel="external">Android Development Best Practices</a> - Android Development Best Practices.</li>
<li><a href="https://blog.mindorks.com/awesome-android-open-source-libraries-56a008c776c0" target="_blank" rel="external">Awesome Android Open Source Libraries</a> - Awesome Android Open Source Libraries.</li>
<li><a href="http://guides.codepath.com/android/Must-Have-Libraries#networking" target="_blank" rel="external">Must Have Libraries</a> - Guides for Must Have Libraries.</li>
<li><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">Android Best Practices</a> - Android Best Practices.</li>
<li><a href="https://medium.com/@cesarmcferreira/building-android-apps-30-things-that-experience-made-me-learn-the-hard-way-313680430bf9#.rej785f6d" target="_blank" rel="external">Building Android Apps</a> - Building Android Apps - Better Way.</li>
<li><a href="https://blog.mindorks.com/threadpoolexecutor-in-android-8e9d22330ee3" target="_blank" rel="external">Thread Pool Executor</a> - Using ThreadPoolExecutor in Android.</li>
<li><a href="https://medium.com/google-developers/developing-for-android-introduction-5345b451567c#.uenqgpr7q" target="_blank" rel="external">Developing Android</a> - A series of articles from Googler Chet Hasae and others, answering most commonly asked question: “What are some of the important rules to keep in mind when developing Android applications?”.</li>
<li><a href="https://github.com/google/iosched" target="_blank" rel="external">Google I/O Android App</a> - Google I/O Sources Code ,Best Coding Guidelines for Android Developers</li>
<li><a href="https://github.com/github/gitignore/blob/master/Android.gitignore" target="_blank" rel="external">Android GitIgnore</a> - Android GitIgnore.</li>
<li><a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">Android Architecture</a> - Android Architecture Blueprints.</li>
<li><a href="https://github.com/Trinea/android-open-project/tree/master/English%20Version" target="_blank" rel="external">Android Open Project</a> - Android Open Source Project subtotals.</li>
<li><a href="https://en.wikipedia.org/wiki/List_of_free_and_open-source_Android_applications" target="_blank" rel="external">Open Source Android App Codes</a> - List of Android Application which have open source code.</li>
<li><a href="https://github.com/git-tips/tips" target="_blank" rel="external">Git Tips</a> - Useful git tips required while development.</li>
<li><a href="https://play.google.com/store/apps/details?id=com.hmh.api&amp;hl=en" target="_blank" rel="external">API Demo</a> - Api demo.</li>
<li><a href="https://play.google.com/store/apps/details?id=com.touchboarder.android.api.demos&amp;hl=en" target="_blank" rel="external">Another API Demo</a> - Another Api demo.</li>
<li><a href="https://blog.mindorks.com/use-strictmode-to-find-things-you-did-by-accident-in-android-development-4cf0e7c8d997" target="_blank" rel="external">Using StrictMode in Android</a> - Use StrictMode To Find Things You Did By Accident In Android Development</li>
</ul>
<h3 id="News-And-Articles"><a href="#News-And-Articles" class="headerlink" title="News And Articles"></a>News And Articles</h3><ul>
<li><a href="http://androidweekly.net/" target="_blank" rel="external">Android Weekly</a> - Android Weekly is a free newsletter that helps you to stay cutting-edge with your Android Development.</li>
<li><a href="https://www.androiddevdigest.com/" target="_blank" rel="external">Android Dev Digest</a> - A Handcrafted Weekly AndroidDev Newsletter.</li>
<li><a href="https://blog.mindorks.com/android-development-useful-tools-fd73283e82e3" target="_blank" rel="external">Android Development Useful Tools</a> - Android Development Useful Tools</li>
<li><a href="https://blog.mindorks.com/google-released-the-developer-preview-of-android-things-iot-75cb49b9ce24" target="_blank" rel="external">Android Things</a> - About Android Things</li>
</ul>
<h3 id="Blogs"><a href="#Blogs" class="headerlink" title="Blogs"></a>Blogs</h3><ul>
<li><a href="https://mindorks.com/blogs" target="_blank" rel="external">Mindorks Blog</a> - Mindorks Blog.</li>
<li><a href="https://medium.com/@amitshekhar" target="_blank" rel="external">Android Medium Blog</a> - Android Medium Blog.</li>
<li><a href="https://blog.mindorks.com" target="_blank" rel="external">Android Mindorks Blog</a> - Android Mindorks Blog.</li>
<li><a href="http://android-developers.blogspot.in/" target="_blank" rel="external">Android Developers Blog</a> - Android Developers Blog.</li>
<li><a href="https://android.googleblog.com/" target="_blank" rel="external">Official Android Blog</a> - Official Android Blog.</li>
<li><a href="https://github.com/vbauer/android-blogs" target="_blank" rel="external">Android Blogs</a> - List of blogs about Android.</li>
</ul>
<h3 id="Guides-And-Tutorials"><a href="#Guides-And-Tutorials" class="headerlink" title="Guides And Tutorials"></a>Guides And Tutorials</h3><ul>
<li><a href="http://guides.codepath.com/android" target="_blank" rel="external">CodePath Android</a> - The Complete tutorial for Android Developement with examples.</li>
<li><a href="https://github.com/commonsguy/cw-omnibus" target="_blank" rel="external">Android Examples Codes</a> - The reference for Android Examples Codes.</li>
<li><a href="https://commonsware.com/Android/" target="_blank" rel="external">Android Tutorial Guide</a> - The Busy Coder’s Guide to Android Development.</li>
<li><a href="https://github.com/googlesamples" target="_blank" rel="external">Android Sample Codes</a> - Sample Codes From Google.</li>
<li><a href="https://codelabs.developers.google.com/?cat=Android" target="_blank" rel="external">Google Code Lab</a> - Google code lab.</li>
<li><a href="https://developer.android.com/index.html" target="_blank" rel="external">Android Development</a> - Android Development complete guide from Google.</li>
<li><a href="https://github.com/codepath/android_guides" target="_blank" rel="external">Android Guides</a> - Extensive Open-Source Guides for Android Developers.</li>
<li><a href="https://www.udacity.com/course/developing-android-apps--ud853" target="_blank" rel="external">Udacity Tutorials</a> - Udacity Tutorials.</li>
<li><a href="http://www.vogella.com/tutorials/android.html" target="_blank" rel="external">Vogella Tutorials</a> - Very good tutorials by Lars Vogel.</li>
<li><a href="https://github.com/nisrulz/android-examples" target="_blank" rel="external">Android Examples</a> - Andriod Examples.</li>
<li><a href="https://github.com/amitshekhariitbhu/Fast-Android-Networking/wiki/Using-Fast-Android-Networking-Library-With-RxJava" target="_blank" rel="external">Learn RxJava</a> - Simplest way to learn RxJava by example.</li>
<li><a href="https://github.com/amitshekhariitbhu/RxJava2-Android-Samples" target="_blank" rel="external">RxJava2-Android-Samples</a> - Learning RxJava for Android by example.</li>
<li><a href="https://blog.mindorks.com/understanding-rxjava-subject-publish-replay-behavior-and-async-subject-224d663d452f" target="_blank" rel="external">Learning RxJava Subject by example</a> - Understanding RxJava Subject — Publish, Replay, Behavior and Async Subject.</li>
<li><a href="https://github.com/kaushikgopal/RxJava-Android-Samples" target="_blank" rel="external">RxJava-Android-Samples</a> - Learning RxJava for Android by example.</li>
<li><a href="https://blog.mindorks.com/introduction-to-dagger-2-using-dependency-injection-in-android-part-1-223289c2a01b" target="_blank" rel="external">Introduction to Dagger2 - Part 1</a> - The simplest introduction to dagger2, Dependency Injection in Android Application.</li>
<li><a href="https://blog.mindorks.com/introduction-to-dagger-2-using-dependency-injection-in-android-part-2-b55857911bcd" target="_blank" rel="external">Introduction to Dagger2 - Part 2</a> - The simplest introduction to dagger2, Dependency Injection in Android Application.</li>
<li><a href="https://github.com/amitshekhariitbhu/awesome-android-things" target="_blank" rel="external">Awesome Android Things</a> - A curated list of awesome android things, tutorials, libraries and much more at one place.</li>
<li><a href="https://blog.mindorks.com/android-tensorflow-machine-learning-example-ff0e9b2654cc" target="_blank" rel="external">Android TensorFlow Machine Learning Example</a> - Building TensorFlow for Android.</li>
<li><a href="https://blog.mindorks.com/creating-custom-model-for-android-using-tensorflow-3f963d270bfb" target="_blank" rel="external">Creating Custom Model For Android Using TensorFlow</a> - Building TensorFlow Model for Android.</li>
<li><a href="https://blog.mindorks.com/using-snaphelper-in-recyclerview-fc616b6833e8" target="_blank" rel="external">Using SnapHelper in RecyclerView</a> - Using SnapHelper in RecyclerView.</li>
</ul>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ul>
<li>Updating it on daily basis as much as possible, work in progess.</li>
</ul>
<h3 id="Found-this-project-useful-heart"><a href="#Found-this-project-useful-heart" class="headerlink" title="Found this project useful :heart:"></a>Found this project useful :heart:</h3><ul>
<li>Support by clicking the :star: button on the upper right of this page. :v:</li>
</ul>
<h3 id="Contact-Let’s-become-friend"><a href="#Contact-Let’s-become-friend" class="headerlink" title="Contact - Let’s become friend"></a>Contact - Let’s become friend</h3><ul>
<li><a href="https://twitter.com/amitiitbhu" target="_blank" rel="external">Twitter</a></li>
<li><a href="https://github.com/amitshekhariitbhu" target="_blank" rel="external">Github</a></li>
<li><a href="https://medium.com/@amitshekhar" target="_blank" rel="external">Medium</a></li>
<li><a href="https://www.facebook.com/amit.shekhar.iitbhu" target="_blank" rel="external">Facebook</a></li>
</ul>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p><a href="https://creativecommons.org/publicdomain/zero/1.0/" target="_blank" rel="external"><img src="http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg" alt="CC0"></a></p>
<p>To the extent possible under law, <a href="https://github.com/amitshekhariitbhu" target="_blank" rel="external">Amit Shekhar</a> has waived all copyright and related or neighboring rights to this work.</p>
<h2 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h2><p>Your contributions are always welcome! Just follow the following format: <code>[reference name](link) - Description.</code> If you like it , give a star to this project</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/amitshekhariitbhu/awesome-android-complete-reference&quot;&gt;Awesome Android Complete Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A curated list of Android Complete References at one place. A complete reference for android developers. Here you can find references about everything you use while Android Development.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Awesome Resources" scheme="http://ipcreator.me/tags/Awesome-Resources/"/>
    
  </entry>
  
  <entry>
    <title>Stetho——A Debug Bridge for Android Applications</title>
    <link href="http://ipcreator.me/2017/03/25/Program/Android/stetho-chrome/"/>
    <id>http://ipcreator.me/2017/03/25/Program/Android/stetho-chrome/</id>
    <published>2017-03-25T13:29:06.000Z</published>
    <updated>2017-03-27T10:04:47.015Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://facebook.github.io/stetho/static/logo.png" alt=""><br><a href="https://github.com/facebook/stetho" target="_blank" rel="external">Stetho</a></p>
<p>Stetho is a sophisticated debug bridge for Android applications. When enabled, developers have access to the Chrome Developer Tools feature natively part of the Chrome desktop browser. Developers can also choose to enable the optional dumpapp tool which offers a powerful command-line interface to application internals.</p>
<a id="more"></a>
<h1 id="Stetho"><a href="#Stetho" class="headerlink" title="Stetho "></a>Stetho <a href="https://travis-ci.org/facebook/stetho" target="_blank" rel="external"><img src="https://travis-ci.org/facebook/stetho.svg?branch=master" alt="Build Status"></a></h1><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><h3 id="Chrome-DevTools"><a href="#Chrome-DevTools" class="headerlink" title="Chrome DevTools"></a>Chrome DevTools</h3><p><img src="http://facebook.github.io/stetho/static/images/inspector-discovery.png" alt=""><br>The integration with the Chrome DevTools frontend is implemented using a client/server protocol which the Stetho software provides for your application. Once your application is integrated, simply navigate to chrome://inspect and click “Inspect” to get started!</p>
<h3 id="Database-Inspection"><a href="#Database-Inspection" class="headerlink" title="Database Inspection"></a>Database Inspection</h3><p><img src="http://facebook.github.io/stetho/static/images/inspector-sqlite.png" alt=""><br>SQLite databases can be visualized and interactively explored with full read/write capabilities.</p>
<h3 id="View-Hierarchy"><a href="#View-Hierarchy" class="headerlink" title="View Hierarchy"></a>View Hierarchy</h3><p><img src="http://facebook.github.io/stetho/static/images/inspector-elements.png" alt=""><br>View hierarchy support for ICS (API 15) and up! Lots of goodies such as instances virtually placed in the hierarchy, view highlighting, and the ability to tap on a view to jump to its position in the hierarchy.</p>
<p><a href="https://facebook.github.io/stetho" target="_blank" rel="external">Stetho</a> is a sophisticated debug bridge for Android applications. When enabled,<br>developers have access to the Chrome Developer Tools feature natively part of<br>the Chrome desktop browser. Developers can also choose to enable the optional<br><code>dumpapp</code> tool which offers a powerful command-line interface to application<br>internals.</p>
<p>Once you complete the set-up instructions below, just start your app and point<br>your laptop browser to <code>chrome://inspect</code>.  Click the “Inspect” button to<br>begin.</p>
<h2 id="Set-up"><a href="#Set-up" class="headerlink" title="Set-up"></a>Set-up</h2><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><p>Download <a href="https://github.com/facebook/stetho/releases/latest" target="_blank" rel="external">the latest JARs</a> or grab via Gradle:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.facebook.stetho:stetho:1.4.2'</span></div></pre></td></tr></table></figure></p>
<p>or Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.facebook.stetho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stetho<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Only the main <code>stetho</code> dependency is strictly required; however, you may also wish to use one of the network helpers:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.facebook.stetho:stetho-okhttp3:1.4.2'</span></div></pre></td></tr></table></figure>
<p>or:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.facebook.stetho:stetho-urlconnection:1.4.2'</span></div></pre></td></tr></table></figure></p>
<p>You can also enable a JavaScript console with:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.facebook.stetho:stetho-js-rhino:1.4.2'</span></div></pre></td></tr></table></figure>
<p>For more details on how to customize the JavaScript runtime see <a href="stetho-js-rhino/">stetho-js-rhino</a>.</p>
<h3 id="Putting-it-together"><a href="#Putting-it-together" class="headerlink" title="Putting it together"></a>Putting it together</h3><p>Integrating with Stetho is intended to be seamless and straightforward for<br>most existing Android applications.  There is a simple initialization step<br>which occurs in your <code>Application</code> class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    Stetho.initializeWithDefaults(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This brings up most of the default configuration but does not enable some<br>additional hooks (most notably, network inspection).  See below for specific<br>details on individual subsystems.</p>
<h3 id="Enable-network-inspection"><a href="#Enable-network-inspection" class="headerlink" title="Enable network inspection"></a>Enable network inspection</h3><p>If you are using the popular <a href="https://github.com/square/okhttp" target="_blank" rel="external">OkHttp</a><br>library at the 3.x release, you can use the<br><a href="https://github.com/square/okhttp/wiki/Interceptors" target="_blank" rel="external">Interceptors</a> system to<br>automatically hook into your existing stack.  This is currently the simplest<br>and most straightforward way to enable network inspection:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">    .addNetworkInterceptor(<span class="keyword">new</span> StethoInterceptor())</div><div class="line">    .build()</div></pre></td></tr></table></figure>
<p>Note that okhttp 2.x will work as well, but with slightly different syntax and you must use the <code>stetho-okhttp</code> artifact (not <code>stetho-okhttp3</code>).</p>
<p>As interceptors can modify the request and response, add the Stetho interceptor after all others to get an accurate view of the network traffic.</p>
<p>If you are using <code>HttpURLConnection</code>, you can use <code>StethoURLConnectionManager</code><br>to assist with integration though you should be aware that there are some<br>caveats with this approach.  In particular, you must explicitly add<br><code>Accept-Encoding: gzip</code> to the request headers and manually handle compressed<br>responses in order for Stetho to report compressed payload sizes.</p>
<p>See the <a href="stetho-sample"><code>stetho-sample</code> project</a> for more details.</p>
<h2 id="Going-further"><a href="#Going-further" class="headerlink" title="Going further"></a>Going further</h2><h3 id="Custom-dumpapp-plugins"><a href="#Custom-dumpapp-plugins" class="headerlink" title="Custom dumpapp plugins"></a>Custom dumpapp plugins</h3><p>Custom plugins are the preferred means of extending the <code>dumpapp</code> system and<br>can be added easily during configuration.  Simply replace your configuration<br>step as such:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Stetho.initialize(Stetho.newInitializerBuilder(context)</div><div class="line">    .enableDumpapp(<span class="keyword">new</span> DumperPluginsProvider() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> Iterable&lt;DumperPlugin&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Stetho.DefaultDumperPluginsBuilder(context)</div><div class="line">            .provide(<span class="keyword">new</span> MyDumperPlugin())</div><div class="line">            .finish();</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    .enableWebKitInspector(Stetho.defaultInspectorModulesProvider(context))</div><div class="line">    .build())</div></pre></td></tr></table></figure>
<p>See the <a href="stetho-sample"><code>stetho-sample</code> project</a> for more details.</p>
<h2 id="Improve-Stetho"><a href="#Improve-Stetho" class="headerlink" title="Improve Stetho!"></a>Improve Stetho!</h2><p>See the <a href="CONTRIBUTING.md">CONTRIBUTING.md</a> file for how to help out.</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Stetho is BSD-licensed. We also provide an additional patent grant.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://facebook.github.io/stetho/static/logo.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/facebook/stetho&quot;&gt;Stetho&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stetho is a sophisticated debug bridge for Android applications. When enabled, developers have access to the Chrome Developer Tools feature natively part of the Chrome desktop browser. Developers can also choose to enable the optional dumpapp tool which offers a powerful command-line interface to application internals.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Debug" scheme="http://ipcreator.me/tags/Debug/"/>
    
      <category term="Stetho" scheme="http://ipcreator.me/tags/Stetho/"/>
    
  </entry>
  
  <entry>
    <title>Fast Android Networking</title>
    <link href="http://ipcreator.me/2017/03/25/Program/Android/fast-android-networking/"/>
    <id>http://ipcreator.me/2017/03/25/Program/Android/fast-android-networking/</id>
    <published>2017-03-25T13:29:06.000Z</published>
    <updated>2017-03-27T10:04:47.026Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/amitshekhariitbhu/Fast-Android-Networking/master/assets/androidnetworking.png" alt=""><br><a href="https://github.com/amitshekhariitbhu/Fast-Android-Networking" target="_blank" rel="external">Fast-Android-Networking</a></p>
<p><strong>Difference over other Networking Library</strong></p>
<ol>
<li>In Fast Android Networking Library, OkHttpClient can be customized for every request easily.</li>
<li>As Fast Android Networking Library uses OkHttp and Okio, it is faster.</li>
<li>Single library for all type of networking.</li>
<li>Supports RxJava, RxJava2 -&gt; Check here</li>
<li>Current bandwidth and connection quality can be obtained to decide logic of code.</li>
<li>Executor can be passed to any request to get response in another thread.</li>
<li>Complete analytics of any request can be obtained.</li>
<li>All types of customization is possible.</li>
<li>Immediate Request is really immediate now.</li>
<li>Prefetching of any request can be done so that it gives instant data when required from cache.</li>
<li>Proper cancellation of request.</li>
<li>Do not cancel a request if completed more than a threshold percentage.</li>
<li>Simple interface to make any type of request.</li>
<li>Proper Response Caching, hence reducing bandwidth usage.</li>
</ol>
<a id="more"></a>
<h1 id="Fast-Android-Networking-Library"><a href="#Fast-Android-Networking-Library" class="headerlink" title="Fast Android Networking Library"></a>Fast Android Networking Library</h1><p><a href="https://travis-ci.org/amitshekhariitbhu/Fast-Android-Networking" target="_blank" rel="external"><img src="https://travis-ci.org/amitshekhariitbhu/Fast-Android-Networking.svg?branch=master" alt="Build Status"></a><br><a href="https://mindorks.com/open-source-projects" target="_blank" rel="external"><img src="https://img.shields.io/badge/mindorks-opensource-blue.svg" alt="Mindorks"></a><br><a href="http://android-arsenal.com/details/1/3695" target="_blank" rel="external"><img src="https://img.shields.io/badge/Android%20Arsenal-Android%20Networking-blue.svg?style=flat" alt="Android Arsenal"></a><br><a href="https://android-arsenal.com/api?level=9" target="_blank" rel="external"><img src="https://img.shields.io/badge/API-9%2B-brightgreen.svg?style=flat" alt="API"></a><br><a href="https://bintray.com/amitshekhariitbhu/maven/android-networking/_latestVersion" target="_blank" rel="external"><img src="https://api.bintray.com/packages/amitshekhariitbhu/maven/android-networking/images/download.svg" alt="Download"> </a><br><a href="https://opensource.org/licenses/Apache-2.0" target="_blank" rel="external"><img src="https://badges.frapsoft.com/os/v1/open-source.svg?v=102" alt="Open Source Love"></a><br><a href="https://github.com/amitshekhariitbhu/Fast-Android-Networking/blob/master/LICENSE" target="_blank" rel="external"><img src="https://img.shields.io/badge/license-Apache%202.0-blue.svg" alt="License"></a></p>
<h3 id="About-Fast-Android-Networking-Library"><a href="#About-Fast-Android-Networking-Library" class="headerlink" title="About Fast Android Networking Library"></a>About Fast Android Networking Library</h3><p>Fast Android Networking Library is a powerful library for doing any type of networking in Android applications which is made on top of <a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp Networking Layer</a>.</p>
<p>Fast Android Networking Library takes care of each and everything. So you don’t have to do anything, just make request and listen for the response.</p>
<h3 id="Why-use-Fast-Android-Networking"><a href="#Why-use-Fast-Android-Networking" class="headerlink" title="Why use Fast Android Networking ?"></a>Why use Fast Android Networking ?</h3><ul>
<li>Recent removal of HttpClient in Android Marshmallow(Android M) made other networking library obsolete.</li>
<li>No other single library do each and everything like making request, downloading any type of file, uploading file, loading<br>image from network in ImageView, etc. There are libraries but they are outdated.</li>
<li>No other library provided simple interface for doing all types of things in networking like setting priority, cancelling, etc.</li>
<li>As it uses <a href="https://github.com/square/okio" target="_blank" rel="external">Okio</a> , No more GC overhead in android application.<br><a href="https://github.com/square/okio" target="_blank" rel="external">Okio</a> is made to handle GC overhead while allocating memory.<br><a href="https://github.com/square/okio" target="_blank" rel="external">Okio</a> do some clever things to save CPU and memory.</li>
<li>As it uses <a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp</a> , most important it supports HTTP/2.  </li>
</ul>
<h3 id="RxJava2-Support-check-here"><a href="#RxJava2-Support-check-here" class="headerlink" title="RxJava2 Support, check here."></a>RxJava2 Support, <a href="https://amitshekhariitbhu.github.io/Fast-Android-Networking/rxjava2_support.html" target="_blank" rel="external">check here</a>.</h3><h3 id="RxJava2-Fast-Android-Networking-Dagger2-with-MVP-Architecture-Project-Check-here"><a href="#RxJava2-Fast-Android-Networking-Dagger2-with-MVP-Architecture-Project-Check-here" class="headerlink" title="RxJava2 + Fast Android Networking + Dagger2 with MVP Architecture Project, Check here"></a>RxJava2 + Fast Android Networking + Dagger2 with MVP Architecture Project, <a href="https://github.com/MindorksOpenSource/android-mvp-architecture" target="_blank" rel="external">Check here</a></h3><h3 id="Another-awesome-library-for-debugging-databases-and-shared-preferences-Check-here"><a href="#Another-awesome-library-for-debugging-databases-and-shared-preferences-Check-here" class="headerlink" title="Another awesome library for debugging databases and shared preferences, Check here"></a>Another awesome library for debugging databases and shared preferences, <a href="https://github.com/amitshekhariitbhu/Android-Debug-Database" target="_blank" rel="external">Check here</a></h3><h3 id="Find-this-project-useful-heart"><a href="#Find-this-project-useful-heart" class="headerlink" title="Find this project useful ? :heart:"></a>Find this project useful ? :heart:</h3><ul>
<li>Support it by clicking the :star: button on the upper right of this page. :v:</li>
</ul>
<p>For full details, visit the documentation on our web site :</p>
<p><a href="https://amitshekhariitbhu.github.io/Fast-Android-Networking" target="_blank"><img src="https://raw.githubusercontent.com/amitshekhariitbhu/Fast-Android-Networking/master/assets/get_started.png" width="150" height="42"></a></p>
<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>Fast Android Networking Library can be included in any Android application.</p>
<p>Fast Android Networking Library supports Android 2.3 (Gingerbread) and later.</p>
<h2 id="Using-Fast-Android-Networking-Library-in-your-application"><a href="#Using-Fast-Android-Networking-Library-in-your-application" class="headerlink" title="Using Fast Android Networking Library in your application"></a>Using Fast Android Networking Library in your application</h2><p>Add this in your build.gradle<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.amitshekhar.android:android-networking:1.0.0'</span></div></pre></td></tr></table></figure></p>
<p>Do not forget to add internet permission in manifest if already not present<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>Then initialize it in onCreate() Method of application class :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.initialize(getApplicationContext());</div></pre></td></tr></table></figure></p>
<p>Initializing it with some customization , as it uses <a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp</a> as networking layer, you can pass custom okHttpClient while initializing it.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Adding an Network Interceptor for Debugging purpose :</span></div><div class="line">OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient() .newBuilder()</div><div class="line">                        .addNetworkInterceptor(<span class="keyword">new</span> StethoInterceptor())</div><div class="line">                        .build();</div><div class="line">AndroidNetworking.initialize(getApplicationContext(),okHttpClient);</div></pre></td></tr></table></figure></p>
<p>Using the Fast Android Networking with Jackson Parser<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.amitshekhar.android:jackson-android-networking:1.0.0'</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Then set the JacksonParserFactory like below</span></div><div class="line">AndroidNetworking.setParserFactory(<span class="keyword">new</span> JacksonParserFactory());</div></pre></td></tr></table></figure>
<h3 id="Making-a-GET-Request"><a href="#Making-a-GET-Request" class="headerlink" title="Making a GET Request"></a>Making a GET Request</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.get(<span class="string">"https://fierce-cove-29863.herokuapp.com/getAllUsers/&#123;pageNumber&#125;"</span>)</div><div class="line">                 .addPathParameter(<span class="string">"pageNumber"</span>, <span class="string">"0"</span>)</div><div class="line">                 .addQueryParameter(<span class="string">"limit"</span>, <span class="string">"3"</span>)</div><div class="line">                 .addHeaders(<span class="string">"token"</span>, <span class="string">"1234"</span>)</div><div class="line">                 .setTag(<span class="string">"test"</span>)</div><div class="line">                 .setPriority(Priority.LOW)</div><div class="line">                 .build()</div><div class="line">                 .getAsJSONArray(<span class="keyword">new</span> JSONArrayRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONArray response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<h3 id="Making-a-POST-Request"><a href="#Making-a-POST-Request" class="headerlink" title="Making a POST Request"></a>Making a POST Request</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.post(<span class="string">"https://fierce-cove-29863.herokuapp.com/createAnUser"</span>)</div><div class="line">                 .addBodyParameter(<span class="string">"firstname"</span>, <span class="string">"Amit"</span>)</div><div class="line">                 .addBodyParameter(<span class="string">"lastname"</span>, <span class="string">"Shekhar"</span>)</div><div class="line">                 .setTag(<span class="string">"test"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .build()</div><div class="line">                 .getAsJSONObject(<span class="keyword">new</span> JSONObjectRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<p>You can also post java object, json, file, etc in POST request like this.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">User user = <span class="keyword">new</span> User();</div><div class="line">user.firstname = <span class="string">"Amit"</span>;</div><div class="line">user.lastname = <span class="string">"Shekhar"</span>;</div><div class="line"></div><div class="line">AndroidNetworking.post(<span class="string">"https://fierce-cove-29863.herokuapp.com/createUser"</span>)</div><div class="line">                 .addBodyParameter(user) <span class="comment">// posting java object</span></div><div class="line">                 .setTag(<span class="string">"test"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .build()</div><div class="line">                 .getAsJSONArray(<span class="keyword">new</span> JSONArrayRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONArray response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line"></div><div class="line">JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    jsonObject.put(<span class="string">"firstname"</span>, <span class="string">"Amit"</span>);</div><div class="line">    jsonObject.put(<span class="string">"lastname"</span>, <span class="string">"Shekhar"</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">  e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">AndroidNetworking.post(<span class="string">"https://fierce-cove-29863.herokuapp.com/createUser"</span>)</div><div class="line">                 .addJSONObjectBody(jsonObject) <span class="comment">// posting json</span></div><div class="line">                 .setTag(<span class="string">"test"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .build()</div><div class="line">                 .getAsJSONArray(<span class="keyword">new</span> JSONArrayRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONArray response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">AndroidNetworking.post(<span class="string">"https://fierce-cove-29863.herokuapp.com/postFile"</span>)</div><div class="line">                 .addFileBody(file) <span class="comment">// posting any type of file</span></div><div class="line">                 .setTag(<span class="string">"test"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .build()</div><div class="line">                 .getAsJSONObject(<span class="keyword">new</span> JSONObjectRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="Using-it-with-your-own-JAVA-Object-JSON-Parser"><a href="#Using-it-with-your-own-JAVA-Object-JSON-Parser" class="headerlink" title="Using it with your own JAVA Object - JSON Parser"></a>Using it with your own JAVA Object - JSON Parser</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*--------------Example One -&gt; Getting the userList----------------*/</span></div><div class="line">AndroidNetworking.get(<span class="string">"https://fierce-cove-29863.herokuapp.com/getAllUsers/&#123;pageNumber&#125;"</span>)</div><div class="line">                .addPathParameter(<span class="string">"pageNumber"</span>, <span class="string">"0"</span>)</div><div class="line">                .addQueryParameter(<span class="string">"limit"</span>, <span class="string">"3"</span>)</div><div class="line">                .setTag(<span class="keyword">this</span>)</div><div class="line">                .setPriority(Priority.LOW)</div><div class="line">                .build()</div><div class="line">                .getAsObjectList(User.class, <span class="keyword">new</span> ParsedRequestListener&lt;List&lt;User&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response</span></div><div class="line">                      Log.d(TAG, <span class="string">"userList size : "</span> + users.size());</div><div class="line">                      <span class="keyword">for</span> (User user : users) &#123;</div><div class="line">                        Log.d(TAG, <span class="string">"id : "</span> + user.id);</div><div class="line">                        Log.d(TAG, <span class="string">"firstname : "</span> + user.firstname);</div><div class="line">                        Log.d(TAG, <span class="string">"lastname : "</span> + user.lastname);</div><div class="line">                      &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError anError)</span> </span>&#123;</div><div class="line">                     <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"><span class="comment">/*--------------Example Two -&gt; Getting an user----------------*/</span></div><div class="line">AndroidNetworking.get(<span class="string">"https://fierce-cove-29863.herokuapp.com/getAnUserDetail/&#123;userId&#125;"</span>)</div><div class="line">                .addPathParameter(<span class="string">"userId"</span>, <span class="string">"1"</span>)</div><div class="line">                .setTag(<span class="keyword">this</span>)</div><div class="line">                .setPriority(Priority.LOW)</div><div class="line">                .build()</div><div class="line">                .getAsObject(User.class, <span class="keyword">new</span> ParsedRequestListener&lt;User&gt;() &#123;</div><div class="line">                     <span class="meta">@Override</span></div><div class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">                        <span class="comment">// do anything with response</span></div><div class="line">                        Log.d(TAG, <span class="string">"id : "</span> + user.id);</div><div class="line">                        Log.d(TAG, <span class="string">"firstname : "</span> + user.firstname);</div><div class="line">                        Log.d(TAG, <span class="string">"lastname : "</span> + user.lastname);</div><div class="line">                     &#125;</div><div class="line">                     <span class="meta">@Override</span></div><div class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError anError)</span> </span>&#123;</div><div class="line">                        <span class="comment">// handle error</span></div><div class="line">                     &#125;</div><div class="line">                 &#125;);</div><div class="line"><span class="comment">/*-- Note : YourObject.class, getAsObject and getAsObjectList are important here --*/</span></div></pre></td></tr></table></figure>
<h3 id="Downloading-a-file-from-server"><a href="#Downloading-a-file-from-server" class="headerlink" title="Downloading a file from server"></a>Downloading a file from server</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.download(url,dirPath,fileName)</div><div class="line">                 .setTag(<span class="string">"downloadTest"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .build()</div><div class="line">                 .setDownloadProgressListener(<span class="keyword">new</span> DownloadProgressListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">long</span> bytesDownloaded, <span class="keyword">long</span> totalBytes)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with progress  </span></div><div class="line">                    &#125;</div><div class="line">                 &#125;)</div><div class="line">                 .startDownload(<span class="keyword">new</span> DownloadListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything after completion</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error    </span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<h3 id="Uploading-a-file-to-server"><a href="#Uploading-a-file-to-server" class="headerlink" title="Uploading a file to server"></a>Uploading a file to server</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.upload(url)</div><div class="line">                 .addMultipartFile(<span class="string">"image"</span>,file)    </div><div class="line">                 .addMultipartParameter(<span class="string">"key"</span>,<span class="string">"value"</span>)</div><div class="line">                 .setTag(<span class="string">"uploadTest"</span>)</div><div class="line">                 .setPriority(Priority.HIGH)</div><div class="line">                 .build()</div><div class="line">                 .setUploadProgressListener(<span class="keyword">new</span> UploadProgressListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">long</span> bytesUploaded, <span class="keyword">long</span> totalBytes)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with progress</span></div><div class="line">                    &#125;</div><div class="line">                 &#125;)</div><div class="line">                 .getAsJSONObject(<span class="keyword">new</span> JSONObjectRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response                </span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                 &#125;);</div></pre></td></tr></table></figure>
<h3 id="Getting-Response-and-completion-in-an-another-thread-executor"><a href="#Getting-Response-and-completion-in-an-another-thread-executor" class="headerlink" title="Getting Response and completion in an another thread executor"></a>Getting Response and completion in an another thread executor</h3><p>(Note : Error and Progress will always be returned in main thread of application)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.upload(url)</div><div class="line">                 .addMultipartFile(<span class="string">"image"</span>,file)  </div><div class="line">                 .addMultipartParameter(<span class="string">"key"</span>,<span class="string">"value"</span>)  </div><div class="line">                 .setTag(<span class="string">"uploadTest"</span>)</div><div class="line">                 .setPriority(Priority.HIGH)</div><div class="line">                 .build()</div><div class="line">                 .setExecutor(Executors.newSingleThreadExecutor()) <span class="comment">// setting an executor to get response or completion on that executor thread</span></div><div class="line">                 .setUploadProgressListener(<span class="keyword">new</span> UploadProgressListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">long</span> bytesUploaded, <span class="keyword">long</span> totalBytes)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with progress</span></div><div class="line">                    &#125;</div><div class="line">                 &#125;)</div><div class="line">                 .getAsJSONObject(<span class="keyword">new</span> JSONObjectRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// below code will be executed in the executor provided</span></div><div class="line">                      <span class="comment">// do anything with response                </span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                 &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="Setting-a-Percentage-Threshold-For-Not-Cancelling-the-request-if-it-has-completed-the-given-threshold"><a href="#Setting-a-Percentage-Threshold-For-Not-Cancelling-the-request-if-it-has-completed-the-given-threshold" class="headerlink" title="Setting a Percentage Threshold For Not Cancelling the request if it has completed the given threshold"></a>Setting a Percentage Threshold For Not Cancelling the request if it has completed the given threshold</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.download(url,dirPath,fileName)</div><div class="line">                 .setTag(<span class="string">"downloadTest"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .setPercentageThresholdForCancelling(<span class="number">50</span>) <span class="comment">// even if at the time of cancelling it will not cancel if 50%</span></div><div class="line">                 .build()                                 <span class="comment">// downloading is done.But can be cancalled with forceCancel.</span></div><div class="line">                 .setDownloadProgressListener(<span class="keyword">new</span> DownloadProgressListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">long</span> bytesDownloaded, <span class="keyword">long</span> totalBytes)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with progress  </span></div><div class="line">                    &#125;</div><div class="line">                 &#125;)</div><div class="line">                 .startDownload(<span class="keyword">new</span> DownloadListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything after completion</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error    </span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<h3 id="Cancelling-a-request"><a href="#Cancelling-a-request" class="headerlink" title="Cancelling a request."></a>Cancelling a request.</h3><p>Any request with a given tag can be cancelled. Just do like this.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.cancel(<span class="string">"tag"</span>); <span class="comment">// All the requests with the given tag will be cancelled.</span></div><div class="line">AndroidNetworking.forceCancel(<span class="string">"tag"</span>);  <span class="comment">// All the requests with the given tag will be cancelled , even if any percent threshold is</span></div><div class="line">                                       <span class="comment">// set , it will be cancelled forcefully.</span></div><div class="line">AndroidNetworking.cancelAll(); <span class="comment">// All the requests will be cancelled.  </span></div><div class="line">AndroidNetworking.forceCancelAll(); <span class="comment">// All the requests will be cancelled , even if any percent threshold is</span></div><div class="line">                               <span class="comment">// set , it will be cancelled forcefully.</span></div></pre></td></tr></table></figure></p>
<h3 id="Loading-image-from-network-into-ImageView"><a href="#Loading-image-from-network-into-ImageView" class="headerlink" title="Loading image from network into ImageView"></a>Loading image from network into ImageView</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.androidnetworking.widget.ANImageView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/imageView"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">    <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span> /&gt;</div><div class="line"></div><div class="line">imageView.setDefaultImageResId(R.drawable.default);</div><div class="line">imageView.setErrorImageResId(R.drawable.error);</div><div class="line">imageView.setImageUrl(imageUrl);</div></pre></td></tr></table></figure>
<h3 id="Getting-Bitmap-from-url-with-some-specified-parameters"><a href="#Getting-Bitmap-from-url-with-some-specified-parameters" class="headerlink" title="Getting Bitmap from url with some specified parameters"></a>Getting Bitmap from url with some specified parameters</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.get(imageUrl)</div><div class="line">                 .setTag(<span class="string">"imageRequestTag"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .setBitmapMaxHeight(<span class="number">100</span>)</div><div class="line">                 .setBitmapMaxWidth(<span class="number">100</span>)</div><div class="line">                 .setBitmapConfig(Bitmap.Config.ARGB_8888)</div><div class="line">                 .build()</div><div class="line">                 .getAsBitmap(<span class="keyword">new</span> BitmapRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">                    <span class="comment">// do anything with bitmap</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<h3 id="Error-Code-Handling"><a href="#Error-Code-Handling" class="headerlink" title="Error Code Handling"></a>Error Code Handling</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (error.getErrorCode() != <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// received error from server</span></div><div class="line">        <span class="comment">// error.getErrorCode() - the error code from server</span></div><div class="line">        <span class="comment">// error.getErrorBody() - the error body from server</span></div><div class="line">        <span class="comment">// error.getErrorDetail() - just an error detail</span></div><div class="line">        Log.d(TAG, <span class="string">"onError errorCode : "</span> + error.getErrorCode());</div><div class="line">        Log.d(TAG, <span class="string">"onError errorBody : "</span> + error.getErrorBody());</div><div class="line">        Log.d(TAG, <span class="string">"onError errorDetail : "</span> + error.getErrorDetail());</div><div class="line">        <span class="comment">// get parsed error object (If ApiError is your class)</span></div><div class="line">        ApiError apiError = error.getErrorAsObject(ApiError.class);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// error.getErrorDetail() : connectionError, parseError, requestCancelledError</span></div><div class="line">        Log.d(TAG, <span class="string">"onError errorDetail : "</span> + error.getErrorDetail());</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Remove-Bitmap-from-cache-or-clear-cache"><a href="#Remove-Bitmap-from-cache-or-clear-cache" class="headerlink" title="Remove Bitmap from cache or clear cache"></a>Remove Bitmap from cache or clear cache</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.evictBitmap(key); <span class="comment">// remove a bitmap with key from LruCache</span></div><div class="line">AndroidNetworking.evictAllBitmap(); <span class="comment">// clear LruCache</span></div></pre></td></tr></table></figure>
<h3 id="Prefetch-a-request-so-that-it-can-return-from-cache-when-required-at-instant"><a href="#Prefetch-a-request-so-that-it-can-return-from-cache-when-required-at-instant" class="headerlink" title="Prefetch a request (so that it can return from cache when required at instant)"></a>Prefetch a request (so that it can return from cache when required at instant)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.get(<span class="string">"https://fierce-cove-29863.herokuapp.com/getAllUsers/&#123;pageNumber&#125;"</span>)</div><div class="line">                .addPathParameter(<span class="string">"pageNumber"</span>, <span class="string">"0"</span>)</div><div class="line">                .addQueryParameter(<span class="string">"limit"</span>, <span class="string">"30"</span>)</div><div class="line">                .setTag(<span class="keyword">this</span>)</div><div class="line">                .setPriority(Priority.LOW)</div><div class="line">                .build()</div><div class="line">                .prefetch();</div></pre></td></tr></table></figure>
<h3 id="Customizing-OkHttpClient-for-a-particular-request"><a href="#Customizing-OkHttpClient-for-a-particular-request" class="headerlink" title="Customizing OkHttpClient for a particular request"></a>Customizing OkHttpClient for a particular request</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient().newBuilder()</div><div class="line">                .addInterceptor(<span class="keyword">new</span> GzipRequestInterceptor())</div><div class="line">                .build();</div><div class="line"></div><div class="line">AndroidNetworking.get(<span class="string">"https://fierce-cove-29863.herokuapp.com/getAllUsers/&#123;pageNumber&#125;"</span>)</div><div class="line">                 .addPathParameter(<span class="string">"pageNumber"</span>, <span class="string">"0"</span>)</div><div class="line">                 .addQueryParameter(<span class="string">"limit"</span>, <span class="string">"3"</span>)</div><div class="line">                 .addHeaders(<span class="string">"token"</span>, <span class="string">"1234"</span>)</div><div class="line">                 .setTag(<span class="string">"test"</span>)</div><div class="line">                 .setPriority(Priority.LOW)</div><div class="line">                 .setOkHttpClient(okHttpClient) <span class="comment">// passing a custom okHttpClient</span></div><div class="line">                 .build()</div><div class="line">                 .getAsJSONArray(<span class="keyword">new</span> JSONArrayRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONArray response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                    <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<h3 id="Making-a-conditional-request-Building-a-request"><a href="#Making-a-conditional-request-Building-a-request" class="headerlink" title="Making a conditional request (Building a request)"></a>Making a conditional request (Building a request)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">ANRequest.GetRequestBuilder getRequestBuilder = <span class="keyword">new</span> ANRequest.GetRequestBuilder(ApiEndPoint.BASE_URL + ApiEndPoint.CHECK_FOR_HEADER);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(isHeaderRequired)&#123;</div><div class="line"> getRequestBuilder.addHeaders(<span class="string">"token"</span>, <span class="string">"1234"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(executorRequired)&#123;</div><div class="line"> getRequestBuilder.setExecutor(Executors.newSingleThreadExecutor());</div><div class="line">&#125;</div><div class="line"></div><div class="line">ANRequest anRequest = getRequestBuilder.build();       </div><div class="line"></div><div class="line">anRequest.getAsJSONObject(<span class="keyword">new</span> JSONObjectRequestListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject response)</span> </span>&#123;</div><div class="line">      <span class="comment">// do anything with response</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">      <span class="comment">// handle error</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="ConnectionClass-Listener-to-get-current-network-quality-and-bandwidth"><a href="#ConnectionClass-Listener-to-get-current-network-quality-and-bandwidth" class="headerlink" title="ConnectionClass Listener to get current network quality and bandwidth"></a>ConnectionClass Listener to get current network quality and bandwidth</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Adding Listener</span></div><div class="line">AndroidNetworking.setConnectionQualityChangeListener(<span class="keyword">new</span> ConnectionQualityChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(ConnectionQuality currentConnectionQuality, <span class="keyword">int</span> currentBandwidth)</span> </span>&#123;</div><div class="line">              <span class="comment">// do something on change in connectionQuality</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="comment">// Removing Listener   </span></div><div class="line">AndroidNetworking.removeConnectionQualityChangeListener();</div><div class="line"></div><div class="line"><span class="comment">// Getting current ConnectionQuality</span></div><div class="line">ConnectionQuality connectionQuality = AndroidNetworking.getCurrentConnectionQuality();</div><div class="line"><span class="keyword">if</span>(connectionQuality == ConnectionQuality.EXCELLENT) &#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (connectionQuality == ConnectionQuality.POOR) &#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (connectionQuality == ConnectionQuality.UNKNOWN) &#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// Getting current bandwidth</span></div><div class="line"><span class="keyword">int</span> currentBandwidth = AndroidNetworking.getCurrentBandwidth(); <span class="comment">// Note : if (currentBandwidth == 0) : means UNKNOWN</span></div></pre></td></tr></table></figure>
<h3 id="Getting-Analytics-of-a-request-by-setting-AnalyticsListener-on-that"><a href="#Getting-Analytics-of-a-request-by-setting-AnalyticsListener-on-that" class="headerlink" title="Getting Analytics of a request by setting AnalyticsListener on that"></a>Getting Analytics of a request by setting AnalyticsListener on that</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.download(url,dirPath,fileName)</div><div class="line">                 .setTag(<span class="string">"downloadTest"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .build()</div><div class="line">                 .setAnalyticsListener(<span class="keyword">new</span> AnalyticsListener() &#123;</div><div class="line">                      <span class="meta">@Override</span></div><div class="line">                      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceived</span><span class="params">(<span class="keyword">long</span> timeTakenInMillis, <span class="keyword">long</span> bytesSent, <span class="keyword">long</span> bytesReceived, <span class="keyword">boolean</span> isFromCache)</span> </span>&#123;</div><div class="line">                          Log.d(TAG, <span class="string">" timeTakenInMillis : "</span> + timeTakenInMillis);</div><div class="line">                          Log.d(TAG, <span class="string">" bytesSent : "</span> + bytesSent);</div><div class="line">                          Log.d(TAG, <span class="string">" bytesReceived : "</span> + bytesReceived);</div><div class="line">                          Log.d(TAG, <span class="string">" isFromCache : "</span> + isFromCache);</div><div class="line">                      &#125;</div><div class="line">                  &#125;)</div><div class="line">                 .setDownloadProgressListener(<span class="keyword">new</span> DownloadProgressListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">long</span> bytesDownloaded, <span class="keyword">long</span> totalBytes)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with progress  </span></div><div class="line">                    &#125;</div><div class="line">                 &#125;)</div><div class="line">                 .startDownload(<span class="keyword">new</span> DownloadListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything after completion</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error    </span></div><div class="line">                    &#125;</div><div class="line">                &#125;);  </div><div class="line">Note : If bytesSent or bytesReceived is -<span class="number">1</span> , it means it is unknown</div></pre></td></tr></table></figure>
<h3 id="Getting-OkHttpResponse-in-Response"><a href="#Getting-OkHttpResponse-in-Response" class="headerlink" title="Getting OkHttpResponse in Response"></a>Getting OkHttpResponse in Response</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.get(<span class="string">"https://fierce-cove-29863.herokuapp.com/getAnUserDetail/&#123;userId&#125;"</span>)</div><div class="line">                .addPathParameter(<span class="string">"userId"</span>, <span class="string">"1"</span>)</div><div class="line">                .setTag(<span class="keyword">this</span>)</div><div class="line">                .setPriority(Priority.LOW)</div><div class="line">                .setUserAgent(<span class="string">"getAnUser"</span>)</div><div class="line">                .build()</div><div class="line">                .getAsOkHttpResponseAndParsed(<span class="keyword">new</span> TypeToken&lt;User&gt;() &#123;</div><div class="line">                &#125;, <span class="keyword">new</span> OkHttpResponseAndParsedRequestListener&lt;User&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Response okHttpResponse, User user)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with okHttpResponse and user</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError anError)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<h3 id="Making-Synchronous-Request"><a href="#Making-Synchronous-Request" class="headerlink" title="Making Synchronous Request"></a>Making Synchronous Request</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ANRequest request = AndroidNetworking.get(<span class="string">"https://fierce-cove-29863.herokuapp.com/getAllUsers/&#123;pageNumber&#125;"</span>)</div><div class="line">                        .addPathParameter(<span class="string">"pageNumber"</span>, <span class="string">"0"</span>)</div><div class="line">                        .addQueryParameter(<span class="string">"limit"</span>, <span class="string">"3"</span>)</div><div class="line">                        .build();</div><div class="line">ANResponse&lt;List&lt;User&gt;&gt; response = request.executeForObjectList(User.class);</div><div class="line"><span class="keyword">if</span> (response.isSuccess()) &#123;</div><div class="line">   List&lt;User&gt; users = responseTwo.getResult();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">   <span class="comment">//handle error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="How-caching-works"><a href="#How-caching-works" class="headerlink" title="How caching works ?"></a>How caching works ?</h3><ul>
<li>First of all the server must send cache-control in header so that is starts working.</li>
<li>Response will be cached on the basis of cache-control max-age,max-stale.</li>
<li>If internet is connected and the age is NOT expired it will return from cache.</li>
<li>If internet is connected and the age is expired and if server returns 304(NOT MODIFIED) it will return from cache.</li>
<li>If internet is NOT connected if you are using getResponseOnlyIfCached() - it will return from cache even it date is expired.</li>
<li>If internet is NOT connected , if you are NOT using getResponseOnlyIfCached() - it will NOT return anything.</li>
<li>If you are using getResponseOnlyFromNetwork() , it will only return response after validation from server.</li>
<li>If cache-control is set, it will work according to the max-age,max-stale returned from server.</li>
<li>If internet is NOT connected only way to get cache Response is by using getResponseOnlyIfCached().</li>
</ul>
<h3 id="Enabling-Logging"><a href="#Enabling-Logging" class="headerlink" title="Enabling Logging"></a>Enabling Logging</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.enableLogging(); <span class="comment">// simply enable logging</span></div><div class="line">AndroidNetworking.enableLogging(LEVEL.HEADERS); <span class="comment">// enabling logging with level</span></div></pre></td></tr></table></figure>
<h3 id="Enabling-GZIP-From-Client-to-Server"><a href="#Enabling-GZIP-From-Client-to-Server" class="headerlink" title="Enabling GZIP From Client to Server"></a>Enabling GZIP From Client to Server</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Enabling GZIP for Request (Not needed if your server doesn't support GZIP Compression), anyway responses</span></div><div class="line"><span class="comment">// from server are automatically unGzipped if required. So enable it only if you need your request to be</span></div><div class="line"><span class="comment">// Gzipped before sending to server(Make sure your server support GZIP Compression).</span></div><div class="line">OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient().newBuilder()</div><div class="line">                .addInterceptor(<span class="keyword">new</span> GzipRequestInterceptor())</div><div class="line">                .build();</div><div class="line">AndroidNetworking.initialize(getApplicationContext(),okHttpClient);</div></pre></td></tr></table></figure>
<h3 id="IMPORTANT-NOTE"><a href="#IMPORTANT-NOTE" class="headerlink" title="IMPORTANT NOTE"></a>IMPORTANT NOTE</h3><ul>
<li>Use IMMEDIATE Priority with caution - use is at appropriate place only when<br>1 or 2 (at max 2)IMMEDIATE request is required at instant.Otherwise use HIGH Priority.</li>
<li><p>Known Bug : As present if you are using GZIP Interceptor from client to server, Upload progress<br>is not working perfectly in Multipart.</p>
<p>If you are using Proguard with Gradle build system (which is usually the case), you don’t have to do anything. The appropriate Proguard rules will be automatically applied. If you still need the rules applied in <code>proguard-rules.pro</code>, it is as follows:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-dontwarn okio.**</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Fast-Android-Networking-Library-supports"><a href="#Fast-Android-Networking-Library-supports" class="headerlink" title="Fast Android Networking Library supports"></a>Fast Android Networking Library supports</h3><ul>
<li>Fast Android Networking Library supports all types of HTTP/HTTPS request like GET, POST, DELETE, HEAD, PUT, PATCH</li>
<li>Fast Android Networking Library supports downloading any type of file</li>
<li>Fast Android Networking Library supports uploading any type of file (supports multipart upload)</li>
<li>Fast Android Networking Library supports cancelling a request</li>
<li>Fast Android Networking Library supports setting priority to any request (LOW, MEDIUM, HIGH, IMMEDIATE)</li>
<li>Fast Android Networking Library supports <a href="https://amitshekhariitbhu.github.io/Fast-Android-Networking/rxjava2_support.html" target="_blank" rel="external">RxJava</a></li>
</ul>
<p>As it uses <a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp</a> as a networking layer, it supports:</p>
<ul>
<li>Fast Android Networking Library supports HTTP/2 support allows all requests to the same host to share a socket</li>
<li>Fast Android Networking Library uses connection pooling which reduces request latency (if HTTP/2 isn’t available)</li>
<li>Transparent GZIP shrinks download sizes</li>
<li>Fast Android Networking Library supports response caching which avoids the network completely for repeat requests</li>
</ul>
<h3 id="Difference-over-other-Networking-Library"><a href="#Difference-over-other-Networking-Library" class="headerlink" title="Difference over other Networking Library"></a>Difference over other Networking Library</h3><ul>
<li>In Fast Android Networking Library, OkHttpClient can be customized for every request easily.</li>
<li>As Fast Android Networking Library uses <a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp</a> and <a href="https://github.com/square/okio" target="_blank" rel="external">Okio</a>, it is faster.</li>
<li>Single library for all type of networking.</li>
<li>Supports RxJava, RxJava2 -&gt; <a href="https://amitshekhariitbhu.github.io/Fast-Android-Networking/rxjava2_support.html" target="_blank" rel="external">Check here</a></li>
<li>Current bandwidth and connection quality can be obtained to decide logic of code.</li>
<li>Executor can be passed to any request to get response in another thread.</li>
<li>Complete analytics of any request can be obtained.</li>
<li>All types of customization is possible.</li>
<li>Immediate Request is really immediate now.</li>
<li>Prefetching of any request can be done so that it gives instant data when required from cache.</li>
<li>Proper cancellation of request.</li>
<li>Do not cancel a request if completed more than a threshold percentage.</li>
<li>Simple interface to make any type of request.</li>
<li>Proper Response Caching, hence reducing bandwidth usage.  </li>
</ul>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ul>
<li>Integration with other library</li>
<li>And of course many many features and bug fixes</li>
</ul>
<h3 id="CREDITS"><a href="#CREDITS" class="headerlink" title="CREDITS"></a>CREDITS</h3><ul>
<li><a href="https://square.github.io/" target="_blank" rel="external">Square</a> - As both <a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp</a> and <a href="https://github.com/square/okio" target="_blank" rel="external">Okio</a><br>used by Fast Android Networking is developed by <a href="https://square.github.io/" target="_blank" rel="external">Square</a>.</li>
<li><a href="https://android.googlesource.com/platform/frameworks/volley/" target="_blank" rel="external">Volley</a> - As Fast Android Networking uses ImageLoader that is developed by <a href="https://android.googlesource.com/platform/frameworks/volley/" target="_blank" rel="external">Volley</a>.  </li>
<li><a href="https://github.com/PrashantGupta17" target="_blank" rel="external">Prashant Gupta</a> - For RxJava, RxJava2 Support - <a href="https://github.com/amitshekhariitbhu/Fast-Android-Networking/wiki/Using-Fast-Android-Networking-Library-With-RxJava" target="_blank" rel="external">RxJava Support</a></li>
</ul>
<p>###<a href="https://mindorks.com/open-source-projects" target="_blank" rel="external">Check out Mindorks awesome open source projects here</a></p>
<h3 id="Contact-Let’s-become-friend"><a href="#Contact-Let’s-become-friend" class="headerlink" title="Contact - Let’s become friend"></a>Contact - Let’s become friend</h3><ul>
<li><a href="https://twitter.com/amitiitbhu" target="_blank" rel="external">Twitter</a></li>
<li><a href="https://github.com/amitshekhariitbhu" target="_blank" rel="external">Github</a></li>
<li><a href="https://medium.com/@amitshekhar" target="_blank" rel="external">Medium</a></li>
<li><a href="https://www.facebook.com/amit.shekhar.iitbhu" target="_blank" rel="external">Facebook</a></li>
</ul>
<h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Copyright (C) 2016 Amit Shekhar</div><div class="line">Copyright (C) 2011 Android Open Source Project</div><div class="line"></div><div class="line">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</div><div class="line">you may not use this file except in compliance with the License.</div><div class="line">You may obtain a copy of the License at</div><div class="line"></div><div class="line">    http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"></div><div class="line">Unless required by applicable law or agreed to in writing, software</div><div class="line">distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</div><div class="line">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">See the License for the specific language governing permissions and</div><div class="line">limitations under the License.</div></pre></td></tr></table></figure>
<h3 id="Contributing-to-Fast-Android-Networking"><a href="#Contributing-to-Fast-Android-Networking" class="headerlink" title="Contributing to Fast Android Networking"></a>Contributing to Fast Android Networking</h3><p>Just make pull request. You are in!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/amitshekhariitbhu/Fast-Android-Networking/master/assets/androidnetworking.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/amitshekhariitbhu/Fast-Android-Networking&quot;&gt;Fast-Android-Networking&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difference over other Networking Library&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In Fast Android Networking Library, OkHttpClient can be customized for every request easily.&lt;/li&gt;
&lt;li&gt;As Fast Android Networking Library uses OkHttp and Okio, it is faster.&lt;/li&gt;
&lt;li&gt;Single library for all type of networking.&lt;/li&gt;
&lt;li&gt;Supports RxJava, RxJava2 -&amp;gt; Check here&lt;/li&gt;
&lt;li&gt;Current bandwidth and connection quality can be obtained to decide logic of code.&lt;/li&gt;
&lt;li&gt;Executor can be passed to any request to get response in another thread.&lt;/li&gt;
&lt;li&gt;Complete analytics of any request can be obtained.&lt;/li&gt;
&lt;li&gt;All types of customization is possible.&lt;/li&gt;
&lt;li&gt;Immediate Request is really immediate now.&lt;/li&gt;
&lt;li&gt;Prefetching of any request can be done so that it gives instant data when required from cache.&lt;/li&gt;
&lt;li&gt;Proper cancellation of request.&lt;/li&gt;
&lt;li&gt;Do not cancel a request if completed more than a threshold percentage.&lt;/li&gt;
&lt;li&gt;Simple interface to make any type of request.&lt;/li&gt;
&lt;li&gt;Proper Response Caching, hence reducing bandwidth usage.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Fast Android Networking" scheme="http://ipcreator.me/tags/Fast-Android-Networking/"/>
    
      <category term="OkHttp" scheme="http://ipcreator.me/tags/OkHttp/"/>
    
      <category term="Okio" scheme="http://ipcreator.me/tags/Okio/"/>
    
  </entry>
  
  <entry>
    <title>Report Android  Crash Log</title>
    <link href="http://ipcreator.me/2017/03/25/Program/Android/crash-of-application/"/>
    <id>http://ipcreator.me/2017/03/25/Program/Android/crash-of-application/</id>
    <published>2017-03-25T11:57:06.000Z</published>
    <updated>2017-03-27T07:53:35.131Z</updated>
    
    <content type="html"><![CDATA[<p>文章来源：<a href="http://www.jianshu.com/p/fc0f6e38e2f3" target="_blank" rel="external">简书</a></p>
<p>我们在开发应用的过程中不可避免的会遇到各种Crash，今天分享一下如何姿势正确的处理这些Crash来提高我们的开发效率。</p>
<a id="more"></a>
<p>对于应用的Crash处理分为测试环境和生产环境。</p>
<p>1、测试环境<br>在开发过程中为了方便快速定位崩溃所发生的代码，要求我们能在崩溃的同时将日志打印出来，最好以直观的界面显示。这里推荐大家一个开源项目：CustomActivityOnCrash<br>github地址：<a href="https://github.com/Ereza/CustomActivityOnCrash" target="_blank" rel="external">https://github.com/Ereza/CustomActivityOnCrash</a></p>
<p>2、生产环境<br>当应用发布上线就不能给用户显示这样的界面了所以要用一种用户比较能接受的方式处理。</p>
<p>在Application类中配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * 初始化程序崩溃捕捉处理</div><div class="line">    */</div><div class="line">   protected void initCrashHandler() &#123;</div><div class="line">       if (BuildConfig.isDebug) &#123;</div><div class="line">           CustomActivityOnCrash.install(this);</div><div class="line">       &#125; else &#123;</div><div class="line">           CrashHandler handler = CrashHandler.getInstance();</div><div class="line">           handler.init(getApplicationContext());</div><div class="line">           Thread.setDefaultUncaughtExceptionHandler(handler);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>CrashHandler类文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div></pre></td><td class="code"><pre><div class="line"> public class CrashHandler implements UncaughtExceptionHandler &#123;</div><div class="line">    /** Debug Log tag*/</div><div class="line">    public static final String TAG = &quot;CrashHandler&quot;;</div><div class="line">    /** 是否开启日志输出,在Debug状态下开启,</div><div class="line">     * 在Release状态下关闭以提示程序性能</div><div class="line">     * */</div><div class="line">    public static final boolean DEBUG = false;</div><div class="line">    /** 系统默认的UncaughtException处理类 */</div><div class="line">    private UncaughtExceptionHandler mDefaultHandler;</div><div class="line">    /** CrashHandler实例 */</div><div class="line">    private static CrashHandler INSTANCE;</div><div class="line">    /** 程序的Context对象 */</div><div class="line">    private Context mContext;</div><div class="line">    /** 使用Properties来保存设备的信息和错误堆栈信息*/</div><div class="line">    private Properties mDeviceCrashInfo = new Properties();</div><div class="line">    private static final String VERSION_NAME = &quot;versionName&quot;;</div><div class="line">    private static final String VERSION_CODE = &quot;versionCode&quot;;</div><div class="line">    private static final String STACK_TRACE = &quot;STACK_TRACE&quot;;</div><div class="line">    /** 错误报告文件的扩展名 */</div><div class="line">    private static final String CRASH_REPORTER_EXTENSION = &quot;.cr&quot;;</div><div class="line"></div><div class="line">    /** 保证只有一个CrashHandler实例 */</div><div class="line">    private CrashHandler() &#123;&#125;</div><div class="line"></div><div class="line">    /** 获取CrashHandler实例 ,单例模式*/</div><div class="line">    public static CrashHandler getInstance() &#123;</div><div class="line">        if (INSTANCE == null) &#123;</div><div class="line">            INSTANCE = new CrashHandler();</div><div class="line">        &#125;</div><div class="line">        return INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 初始化,注册Context对象,</div><div class="line">     * 获取系统默认的UncaughtException处理器,</div><div class="line">     * 设置该CrashHandler为程序的默认处理器</div><div class="line">     * @param ctx</div><div class="line">     */</div><div class="line">    public void init(Context ctx) &#123;</div><div class="line">        mContext = ctx;</div><div class="line">        mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();</div><div class="line">        Thread.setDefaultUncaughtExceptionHandler(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 当UncaughtException发生时会转入该函数来处理</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void uncaughtException(Thread thread, Throwable ex) &#123;</div><div class="line">        if (!handleException(ex) &amp;&amp; mDefaultHandler != null) &#123;</div><div class="line">            //如果用户没有处理则让系统默认的异常处理器来处理</div><div class="line">            mDefaultHandler.uncaughtException(thread, ex);</div><div class="line">        &#125; else &#123;</div><div class="line">            //Sleep一会后结束程序</div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(5000);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                Log.e(TAG, &quot;Error : &quot;, e);</div><div class="line">            &#125;</div><div class="line">            android.os.Process.killProcess(android.os.Process.myPid());</div><div class="line">            System.exit(10);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 自定义错误处理,收集错误信息</div><div class="line">     * 发送错误报告等操作均在此完成.</div><div class="line">     * 开发者可以根据自己的情况来自定义异常处理逻辑</div><div class="line">     * @param ex</div><div class="line">     * @return true:如果处理了该异常信息;否则返回false</div><div class="line">     */</div><div class="line">    private boolean handleException(Throwable ex) &#123;</div><div class="line">        if (ex == null) &#123;</div><div class="line">            Log.w(TAG, &quot;handleException --- ex==null&quot;);</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        final String msg = ex.getLocalizedMessage();</div><div class="line">        if(msg == null) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        //使用Toast来显示异常信息</div><div class="line">        new Thread() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                Looper.prepare();</div><div class="line">                Toast toast = Toast.makeText(mContext, &quot;程序出错，即将退出&quot;,</div><div class="line">                        Toast.LENGTH_LONG);</div><div class="line">                toast.setGravity(Gravity.CENTER, 0, 0);</div><div class="line">                toast.show();</div><div class="line">//              MsgPrompt.showMsg(mContext, &quot;程序出错啦&quot;, msg+&quot;\n点确认退出&quot;);</div><div class="line">                Looper.loop();</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">        //收集设备信息</div><div class="line">        collectCrashDeviceInfo(mContext);</div><div class="line">        //保存错误报告文件</div><div class="line">        saveCrashInfoToFile(ex);</div><div class="line">        //发送错误报告到服务器</div><div class="line">        //sendCrashReportsToServer(mContext);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 在程序启动时候, 可以调用该函数来发送以前没有发送的报告</div><div class="line">     */</div><div class="line">    public void sendPreviousReportsToServer() &#123;</div><div class="line">        sendCrashReportsToServer(mContext);</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * 把错误报告发送给服务器,包含新产生的和以前没发送的.</div><div class="line">     * @param ctx</div><div class="line">     */</div><div class="line">    private void sendCrashReportsToServer(Context ctx) &#123;</div><div class="line">        String[] crFiles = getCrashReportFiles(ctx);</div><div class="line">        if (crFiles != null &amp;&amp; crFiles.length &gt; 0) &#123;</div><div class="line">            TreeSet&lt;String&gt; sortedFiles = new TreeSet&lt;String&gt;();</div><div class="line">            sortedFiles.addAll(Arrays.asList(crFiles));</div><div class="line">            for (String fileName : sortedFiles) &#123;</div><div class="line">                File cr = new File(ctx.getFilesDir(), fileName);</div><div class="line">                postReport(cr);</div><div class="line">                cr.delete();// 删除已发送的报告</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    private void postReport(File file) &#123;</div><div class="line">        // TODO 发送错误报告到服务器</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取错误报告文件名</div><div class="line">     * @param ctx</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    private String[] getCrashReportFiles(Context ctx) &#123;</div><div class="line">        File filesDir = ctx.getFilesDir();</div><div class="line">        FilenameFilter filter = new FilenameFilter() &#123;</div><div class="line">            public boolean accept(File dir, String name) &#123;</div><div class="line">                return name.endsWith(CRASH_REPORTER_EXTENSION);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        return filesDir.list(filter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 保存错误信息到文件中</div><div class="line">     * @param ex</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    private String saveCrashInfoToFile(Throwable ex) &#123;</div><div class="line">        Writer info = new StringWriter();</div><div class="line">        PrintWriter printWriter = new PrintWriter(info);</div><div class="line">        ex.printStackTrace(printWriter);</div><div class="line">        Throwable cause = ex.getCause();</div><div class="line">        while (cause != null) &#123;</div><div class="line">            cause.printStackTrace(printWriter);</div><div class="line">            cause = cause.getCause();</div><div class="line">        &#125;</div><div class="line">        String result = info.toString();</div><div class="line">        printWriter.close();</div><div class="line">        mDeviceCrashInfo.put(&quot;EXEPTION&quot;, ex.getLocalizedMessage());</div><div class="line">        mDeviceCrashInfo.put(STACK_TRACE, result);</div><div class="line">        try &#123;</div><div class="line">            //long timestamp = System.currentTimeMillis();</div><div class="line">            Time t = new Time(&quot;GMT+8&quot;);</div><div class="line">            t.setToNow(); // 取得系统时间</div><div class="line">            int date = t.year * 10000 + t.month * 100 + t.monthDay;</div><div class="line">            int time = t.hour * 10000 + t.minute * 100 + t.second;</div><div class="line">            String fileName = &quot;crash-&quot; + date + &quot;-&quot; + time + CRASH_REPORTER_EXTENSION;</div><div class="line">            FileOutputStream trace = mContext.openFileOutput(fileName,</div><div class="line">                    Context.MODE_PRIVATE);</div><div class="line">            mDeviceCrashInfo.store(trace, &quot;&quot;);</div><div class="line">            trace.flush();</div><div class="line">            trace.close();</div><div class="line">            return fileName;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            Log.e(TAG, &quot;an error occured while writing report file...&quot;, e);</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 收集程序崩溃的设备信息</div><div class="line">     *</div><div class="line">     * @param ctx</div><div class="line">     */</div><div class="line">    public void collectCrashDeviceInfo(Context ctx) &#123;</div><div class="line">        try &#123;</div><div class="line">            PackageManager pm = ctx.getPackageManager();</div><div class="line">            PackageInfo pi = pm.getPackageInfo(ctx.getPackageName(),</div><div class="line">                    PackageManager.GET_ACTIVITIES);</div><div class="line">            if (pi != null) &#123;</div><div class="line">                mDeviceCrashInfo.put(VERSION_NAME,</div><div class="line">                        pi.versionName == null ? &quot;not set&quot; : pi.versionName);</div><div class="line">                mDeviceCrashInfo.put(VERSION_CODE, &quot;&quot;+pi.versionCode);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (PackageManager.NameNotFoundException e) &#123;</div><div class="line">            Log.e(TAG, &quot;Error while collect package info&quot;, e);</div><div class="line">        &#125;</div><div class="line">        //使用反射来收集设备信息.在Build类中包含各种设备信息,</div><div class="line">        //例如: 系统版本号,设备生产商 等帮助调试程序的有用信息</div><div class="line">        //具体信息请参考后面的截图</div><div class="line">        Field[] fields = Build.class.getDeclaredFields();</div><div class="line">        for (Field field : fields) &#123;</div><div class="line">            try &#123;</div><div class="line">                field.setAccessible(true);</div><div class="line">                mDeviceCrashInfo.put(field.getName(), &quot;&quot;+field.get(null));</div><div class="line">                if (DEBUG) &#123;</div><div class="line">                    Log.d(TAG, field.getName() + &quot; : &quot; + field.get(null));</div><div class="line">                &#125;</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                Log.e(TAG, &quot;Error while collect crash info&quot;, e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://www.jianshu.com/p/fc0f6e38e2f3" target="_blank" rel="external">Android应用崩溃(Crash)日志报告</a><br><a href="http://www.magicsite.cn/blog/mobile/Android/Android317626.html" target="_blank" rel="external">Android采集应用崩溃日志</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章来源：&lt;a href=&quot;http://www.jianshu.com/p/fc0f6e38e2f3&quot;&gt;简书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们在开发应用的过程中不可避免的会遇到各种Crash，今天分享一下如何姿势正确的处理这些Crash来提高我们的开发效率。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Crash" scheme="http://ipcreator.me/tags/Crash/"/>
    
      <category term="Log" scheme="http://ipcreator.me/tags/Log/"/>
    
  </entry>
  
  <entry>
    <title>Emmagee</title>
    <link href="http://ipcreator.me/2017/03/25/Program/Android/emmagee/"/>
    <id>http://ipcreator.me/2017/03/25/Program/Android/emmagee/</id>
    <published>2017-03-25T10:42:06.000Z</published>
    <updated>2017-03-27T07:55:07.032Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/andrewleo/pictures/master/Emmagee/V2.0/homepage.png" alt=""></p>
<p>Android performance test tool-CPU,memory,network traffic,starting time,battery current and status</p>
<a id="more"></a>
<h2 id="Emmagee-a-practical-handy-performance-test-tool-for-specified-Android-App"><a href="#Emmagee-a-practical-handy-performance-test-tool-for-specified-Android-App" class="headerlink" title="Emmagee - a practical, handy performance test tool for specified Android App"></a>Emmagee - a practical, handy performance test tool for specified Android App</h2><p>Emmagee is a practical, handy performance test tool for specified Android App, which can monitor CPU, memory,<br>network traffic, battery current and status(<a href="https://github.com/NetEase/Emmagee/wiki/Some-devices-are-not-supported" target="_blank" rel="external">Some devices are not supported</a>), new features such as top activity and heap size if rooted(<a href="https://github.com/NetEase/Emmagee/wiki/FAQ" target="_blank" rel="external">Root Toast may continously show</a>), are also supported in the <a href="https://github.com/NetEase/Emmagee/releases" target="_blank" rel="external">latest version</a>. Additionally, it also provides several cool features such as customizing interval of collecting data,<br>rendering real-time process status in a floating window, and much more.</p>
<ul>
<li>Homepage: <a href="https://github.com/NetEase/Emmagee" target="_blank" rel="external">https://github.com/NetEase/Emmagee</a></li>
<li>Wiki: <a href="https://github.com/NetEase/Emmagee/wiki" target="_blank" rel="external">https://github.com/NetEase/Emmagee/wiki</a></li>
<li>Issues: <a href="https://github.com/NetEase/Emmagee/issues" target="_blank" rel="external">https://github.com/NetEase/Emmagee/issues</a></li>
<li>FAQ: <a href="https://github.com/NetEase/Emmagee/wiki/FAQ" target="_blank" rel="external">https://github.com/NetEase/Emmagee/wiki/FAQ</a></li>
<li>Tags: Android, Java</li>
</ul>
<p><img src="https://raw.githubusercontent.com/andrewleo/pictures/master/Emmagee/V2.0/homepage.png" width="180px"><br>&nbsp;<br><img src="https://raw.githubusercontent.com/andrewleo/pictures/master/Emmagee/V2.0/settings.png" width="180px"><br>&nbsp;<br><img src="https://raw.githubusercontent.com/andrewleo/pictures/master/Emmagee/V2.0/mailsettings.png" width="180px"></p>
<h2 id="Why-should-I-use-Emmagee"><a href="#Why-should-I-use-Emmagee" class="headerlink" title="Why should I use Emmagee?"></a>Why should I use Emmagee?</h2><p>Unlike most other performance test tools that only do system-level monitoring, Emmagee provides the ability to monitor any single App. Other advantages that<br>you should not miss:</p>
<ul>
<li>Open source</li>
<li>Easy to use</li>
<li>Process-specific monitoring, including CPU, memory, network traffic, battery current, launching time and status</li>
<li>Floating window that renders real-time process status</li>
<li>CSV format report that can be converted into any other format you want</li>
<li>User-defined collecting interval</li>
<li>Fully support Android 2.2 and above</li>
</ul>
<h2 id="How-to-use-Emmagee"><a href="#How-to-use-Emmagee" class="headerlink" title="How to use Emmagee?"></a>How to use Emmagee?</h2><p>First of all ,you should have Emmagee.apk,download <a href="https://github.com/NetEase/Emmagee/releases" target="_blank" rel="external">here</a> or<br>build the apk file youself <a href="https://github.com/NetEase/Emmagee/wiki/How-to-build-emmage.apk%3F" target="_blank" rel="external">here</a>,then :</p>
<ol>
<li>Start Emmagee App</li>
<li>Configure interval</li>
<li>Select a target process</li>
<li>Click Start button</li>
</ol>
<p>And Enjoy!</p>
<p>If you want to stop the test, just go back to Emmagee and click Stop button.</p>
<h2 id="Android-5-0-and-above"><a href="#Android-5-0-and-above" class="headerlink" title="Android 5.0 and above"></a>Android 5.0 and above</h2><ul>
<li><code>Android 5.0 and above</code>: getRunningTasks() and getRunningAppProcesses() are deprecated and only return your application process, so it is unable to get TopActivity from Android 5.0.</li>
<li><code>Android 7.0</code>: Google has restricted access to /proc, and also can not get pid of target application from TOP command in Android 7.0, I am so sorry to tell that 7.0 can not be supported.</li>
</ul>
<h2 id="Coming-Soon"><a href="#Coming-Soon" class="headerlink" title="Coming Soon"></a>Coming Soon</h2><ul>
<li>We want you to decide!</li>
</ul>
<h2 id="How-to-Contribute"><a href="#How-to-Contribute" class="headerlink" title="How to Contribute?"></a>How to Contribute?</h2><p>You are welcome to contribute to Emmagee, meanwhile you’d better follow the rules below</p>
<ul>
<li>It’s <em>NOT</em> recommended to submit a pull request directly to Emmagee’s <code>master</code> branch. <code>develop</code> branch is more appropriate</li>
<li>Follow common Java coding conventions</li>
<li>Put all Java class files under <em>com.netease</em> package</li>
<li>Add the following <a href="#license">license</a> in each Java class file</li>
</ul>
<h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul>
<li>NetEase, Inc.</li>
<li><a href="https://github.com/yrom" target="_blank" rel="external">yrom</a></li>
<li><a href="https://github.com/LukeOwncloud" target="_blank" rel="external">LukeOwncloud</a></li>
</ul>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>(The Apache License)</p>
<p>Copyright (c) 2012-2015 NetEase, Inc. and other contributors</p>
<p>   Licensed under the Apache License, Version 2.0 (the “License”);<br>   you may not use this file except in compliance with the License.<br>   You may obtain a copy of the License at</p>
<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre><p>   Unless required by applicable law or agreed to in writing, software<br>   distributed under the License is distributed on an “AS IS” BASIS,<br>   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br>   See the License for the specific language governing permissions and<br>   limitations under the License.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/andrewleo/pictures/master/Emmagee/V2.0/homepage.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Android performance test tool-CPU,memory,network traffic,starting time,battery current and status&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Monitor" scheme="http://ipcreator.me/tags/Monitor/"/>
    
  </entry>
  
  <entry>
    <title>Custom Activity On Crash</title>
    <link href="http://ipcreator.me/2017/03/25/Program/Android/custom-activity-on-crash/"/>
    <id>http://ipcreator.me/2017/03/25/Program/Android/custom-activity-on-crash/</id>
    <published>2017-03-25T10:36:06.000Z</published>
    <updated>2017-03-27T07:53:51.033Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Ereza/CustomActivityOnCrash/master/images/frontpage.png" alt=""></p>
<p>Android library that allows launching a custom activity when your app crashes, instead of showing the hated “Unfortunately, X has stopped” dialog.</p>
<a id="more"></a>
<h1 id="Custom-Activity-On-Crash-library"><a href="#Custom-Activity-On-Crash-library" class="headerlink" title="Custom Activity On Crash library"></a>Custom Activity On Crash library</h1><p>This library allows launching a custom activity when the app crashes, instead of showing the hated “Unfortunately, X has stopped” dialog.</p>
<h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h2><h3 id="1-Add-a-dependency"><a href="#1-Add-a-dependency" class="headerlink" title="1. Add a dependency"></a>1. Add a dependency</h3><p>Add the following dependency to your build.gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'cat.ereza:customactivityoncrash:1.5.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>You can also do it manually, by downloading the source code, importing the <code>library</code> folder as an Android Library Module, and adding a dependency on your project to that module.</p>
<h3 id="2-Set-up-your-application"><a href="#2-Set-up-your-application" class="headerlink" title="2. Set up your application"></a>2. Set up your application</h3><p>On your application class, use this snippet:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">    <span class="comment">//Install CustomActivityOnCrash</span></div><div class="line">    CustomActivityOnCrash.install(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="comment">//Now initialize your error handlers as normal</span></div><div class="line">    <span class="comment">//i.e., ACRA.init(this);</span></div><div class="line">    <span class="comment">//or Fabric.with(this, new Crashlytics())</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>WARNING!</strong> If you already have ACRA, Crashlytics or any similar library in your app, it will still work as normal, but the CustomActivityOnCrash initialization <strong>MUST</strong> be done first, or the original reporting tool will stop working.</p>
<h3 id="3-Test-it"><a href="#3-Test-it" class="headerlink" title="3. Test it"></a>3. Test it</h3><p>Make the app crash by using something like this in your code:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Boom!"</span>);</div></pre></td></tr></table></figure></p>
<p>The error activity should show up, instead of the system dialog.</p>
<h3 id="Optional-Customization"><a href="#Optional-Customization" class="headerlink" title="Optional: Customization"></a>Optional: Customization</h3><p><strong>Custom behavior</strong></p>
<p>You can call the following methods at any time to customize how the library works, although usually you will call them before calling <code>install(context)</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.setLaunchErrorActivityWhenInBackground(<span class="keyword">boolean</span>);</div></pre></td></tr></table></figure>
<p>This method defines if the error activity should be launched when the app crashes while on background.<br>By default, this is true. On API&lt;14, it’s always true since there is no way to detect if the app is in foreground.<br>If you set it to <code>false</code>, a crash while in background won’t launch the error activity nor the system dialog, so it will be a silent crash.<br>The default is <code>true</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.setShowErrorDetails(<span class="keyword">boolean</span>);</div></pre></td></tr></table></figure>
<p>This method defines if the error activity must show a button with error details.<br>If you set it to <code>false</code>, the button on the default error activity will disappear, thus disabling the user from seeing the stack trace.<br>The default is <code>true</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.setDefaultErrorActivityDrawable(<span class="keyword">int</span>);</div></pre></td></tr></table></figure>
<p>This method allows changing the default upside-down bug image with an image of your choice.<br>You may pass a resource id for a drawable or a mipmap.<br>The default is <code>R.drawable.customactivityoncrash_error_image</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.setEnableAppRestart(<span class="keyword">boolean</span>);</div></pre></td></tr></table></figure>
<p>This method defines if the error activity must show a “Restart app” button or a “Close app” button.<br>If you set it to <code>false</code>, the button on the default error activity will close the app instead of restarting.<br>Warning! If you set it to <code>true</code>, there is the possibility of it still displaying the “Close app” button,<br>if no restart activity is specified or found!<br>The default is <code>true</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.setEventListener(EventListener);</div></pre></td></tr></table></figure>
<p>This method allows you to specify an event listener in order to get notified when the library shows the error activity, restarts or closes the app.<br>The EventListener you provide can not be an anonymous or non-static inner class, because it needs to be serialized by the library. The library will throw an exception if you try to set an invalid class.<br>If you set it to null, no event listener will be invoked.<br>The default is null.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.setRestartActivityClass(Class&lt;? extends Activity&gt;);</div></pre></td></tr></table></figure>
<p>This method sets the activity that must be launched by the error activity when the user presses the button to restart the app.<br>If you don’t set it (or set it to null), the library will use the first activity on your manifest that has an intent-filter with action<br><code>cat.ereza.customactivityoncrash.RESTART</code>, and if there is none, the default launchable activity on your app.<br>If no launchable activity can be found and you didn’t specify any, the “restart app” button will become a “close app” button,<br>even if <code>setEnableAppRestart</code> is set to <code>true</code>.</p>
<p>As noted, you can also use the following intent-filter to specify the restart activity:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"cat.ereza.customactivityoncrash.RESTART"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.setErrorActivityClass(Class&lt;? extends Activity&gt;);</div></pre></td></tr></table></figure>
<p>This method allows you to set a custom error activity to be launched, instead of the default one.<br>Use it if you need further customization that is not just strings, colors or themes (see below).<br>If you don’t set it (or set it to null), the library will use the first activity on your manifest that has an intent-filter with action<br><code>cat.ereza.customactivityoncrash.ERROR</code>, and if there is none, a default error activity from the library.<br>If you use this, the activity <strong>must</strong> be declared in your <code>AndroidManifest.xml</code>, with <code>process</code> set to <code>:error_activity</code>.</p>
<p>Example:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"cat.ereza.sample.customactivityoncrash.activity.CustomErrorActivity"</span></div><div class="line">    <span class="attr">android:label</span>=<span class="string">"@string/error_title"</span></div><div class="line">    <span class="attr">android:process</span>=<span class="string">":error_activity"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>As noted, you can also use the following intent-filter to specify the error activity:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"cat.ereza.customactivityoncrash.ERROR"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>Customization of the default activity</strong></p>
<p>You can override several resources to customize the default activity:</p>
<p><em>Theme:</em></p>
<p>You can override the default error activity theme by defining a theme in your app with the following id: <code>CustomActivityOnCrashTheme</code></p>
<p><em>Image:</em></p>
<p>By default, an image of a bug is displayed. You can change it to any image by creating a <code>customactivityoncrash_error_image</code> drawable on all density buckets (mdpi, hdpi, xhdpi, xxhdpi and xxxhdpi).<br>You can also use the provided <code>CustomActivityOnCrash.setDefaultErrorActivityDrawable(int)</code> method.</p>
<p><em>Strings:</em></p>
<p>You can provide new strings and translations for the default error activity strings by overriding the following strings:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_error_occurred_explanation"</span>&gt;</span>An unexpected error occurred.\nSorry for the inconvenience.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_unknown_exception"</span>&gt;</span>Unknown exception<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_restart_app"</span>&gt;</span>Restart app<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_close_app"</span>&gt;</span>Close app<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_error_details"</span>&gt;</span>Error details<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_error_details_title"</span>&gt;</span>Error details<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_error_details_close"</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_error_details_copy"</span>&gt;</span>Copy to clipboard<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_error_details_copied"</span>&gt;</span>Copied to clipboard<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_error_details_clipboard_label"</span>&gt;</span>Error information<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><em>There is a <code>sample</code> project module with examples of these overrides. If in doubt, check the code in that module.</em></p>
<p><strong>Completely custom error activity</strong></p>
<p>If you choose to create your own completely custom error activity, you can use these methods:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.getStackTraceFromIntent(getIntent());</div></pre></td></tr></table></figure>
<p>Returns the stack trace that caused the error as a string.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.getAllErrorDetailsFromIntent(getIntent());</div></pre></td></tr></table></figure>
<p>Returns several error details including the stack trace that caused the error, as a string. This is used in the default error activity error details dialog.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.getRestartActivityClassFromIntent(getIntent());</div></pre></td></tr></table></figure>
<p>Returns the class of the activity you have to launch to restart the app, or <code>null</code> if not set.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.getEventListenerFromIntent(getIntent());</div></pre></td></tr></table></figure>
<p>Returns the event listener that you must pass to <code>restartApplicationWithIntent(activity, intent, eventListener)</code> or <code>closeApplication(activity, eventListener)</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.restartApplicationWithIntent(activity, intent, eventListener);</div></pre></td></tr></table></figure>
<p>Kills the current process and restarts the app again with an <code>startActivity()</code> to the passed intent.<br>You <strong>MUST</strong> call this to restart the app, or you will end up having several <code>Application</code> class instances and experience multiprocess issues in API&lt;17.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.closeApplication(activity, eventListener);</div></pre></td></tr></table></figure>
<p>Closes the app and kills the current process.<br>You <strong>MUST</strong> call this to close the app, or you will end up having several Application class instances and experience multiprocess issues in API&lt;17.</p>
<p><em>The <code>sample</code> project module includes an example of a custom error activity. If in doubt, check the code in that module.</em></p>
<h2 id="Using-Proguard"><a href="#Using-Proguard" class="headerlink" title="Using Proguard?"></a>Using Proguard?</h2><p>No need to add special rules, the library should work even with obfuscation.</p>
<h2 id="Inner-workings"><a href="#Inner-workings" class="headerlink" title="Inner workings"></a>Inner workings</h2><p>This library relies on the <code>Thread.setDefaultUncaughtExceptionHandler</code> method.<br>When an exception is caught by the library’s <code>UncaughtExceptionHandler</code> it does the following:</p>
<ol>
<li>Captures the stack trace that caused the crash</li>
<li>Launches a new intent to the error activity passing the stacktrace as an extra.</li>
<li>Kills the current process.</li>
</ol>
<p>The inner workings are based on <a href="https://github.com/ACRA/acra" target="_blank" rel="external">ACRA</a>‘s dialog reporting mode with some minor tweaks. Look at the code if you need more detail about how it works.</p>
<h2 id="Incompatibilities"><a href="#Incompatibilities" class="headerlink" title="Incompatibilities"></a>Incompatibilities</h2><ul>
<li>CustomActivityOnCrash will not work in these cases:<ul>
<li>With any custom <code>UncaughtExceptionHandler</code> set after initializing the library, that does not call back to the original handler.</li>
<li>With ACRA enabled and reporting mode set to <code>TOAST</code> or <code>DIALOG</code>.</li>
</ul>
</li>
<li>If you use a custom <code>UncaughtExceptionHandler</code>, it will not be called if you initialize it before the library initialization (so, Crashlytics or ACRA initialization must be done <strong>after</strong> CustomActivityOnCrash initialization).</li>
<li>On some rare cases on devices with API&lt;14, the app may enter a restart loop when a crash occurs. Therefore, using it on API&lt;14 is not recommended.</li>
<li>If your app initialization or error activity crash, there is a possibility of entering an infinite restart loop (this is checked by the library for the most common cases, but could happen in rarer cases).</li>
<li>The library has not been tested with multidex enabled. It uses Class.forName() to load classes, so maybe that could cause some problem in API&lt;21. If you test it with such configuration, please provide feedback!</li>
<li>The library has not been tested with multiprocess apps. If you test it with such configuration, please provide feedback too!</li>
</ul>
<h2 id="Disclaimers"><a href="#Disclaimers" class="headerlink" title="Disclaimers"></a>Disclaimers</h2><ul>
<li>This will not avoid ANRs from happening.</li>
<li>This will not catch native errors.</li>
<li>There is no guarantee that this will work on every device.</li>
<li>This library will not make you toast for breakfast :)</li>
</ul>
<h2 id="Contributing-amp-license"><a href="#Contributing-amp-license" class="headerlink" title="Contributing &amp; license"></a>Contributing &amp; license</h2><p>Any contribution in order to make this library better will be welcome!</p>
<p>The library is licensed under the <a href="https://github.com/Ereza/CustomActivityOnCrash/blob/master/LICENSE" target="_blank" rel="external">Apache License 2.0</a>.</p>
<p>The bug image used in the default error activity is licensed under CC-BY by Riffschievous: <a href="https://www.sketchport.com/drawing/6119265933459456/lady-bug" target="_blank" rel="external">https://www.sketchport.com/drawing/6119265933459456/lady-bug</a><br>If you use the image in your app, don’t forget to mention that!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Ereza/CustomActivityOnCrash/master/images/frontpage.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Android library that allows launching a custom activity when your app crashes, instead of showing the hated “Unfortunately, X has stopped” dialog.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Crash" scheme="http://ipcreator.me/tags/Crash/"/>
    
  </entry>
  
  <entry>
    <title>Patent Search</title>
    <link href="http://ipcreator.me/2017/03/25/IPR/api-patent-query/"/>
    <id>http://ipcreator.me/2017/03/25/IPR/api-patent-query/</id>
    <published>2017-03-25T08:53:06.000Z</published>
    <updated>2017-03-27T10:27:41.130Z</updated>
    
    <content type="html"><![CDATA[<p>接口地址：<a href="http://v.juhe.cn/patent/search.php" target="_blank" rel="external">http://v.juhe.cn/patent/search.php</a><br>支持格式：json<br>请求方式：get post<br>请求示例：<a href="http://v.juhe.cn/patent/search.php?q=大蒜&amp;key=您申请的key" target="_blank" rel="external">http://v.juhe.cn/patent/search.php?q=大蒜&amp;key=您申请的key</a><br>接口备注：该接口提供对专利的检索功能，用户输入想要查找的关键词或者符合语法规范的短语即可对专利数据进行检索。<br>调用样例及调试工具：API测试工具</p>
<a id="more"></a>
<h2 id="请求参数说明："><a href="#请求参数说明：" class="headerlink" title="请求参数说明："></a>请求参数说明：</h2><p>名称    类型    必填    说明<br>     key    string    是    您申请的key<br>     ds    string    否    dataScope，数据范围，目前支持cn：中国，all：全球，默认cn<br>     q    string    是    用户输入的查询条件<br>     p    int    否    page页码，默认值1，最大页码为100页；系统将根据用户输入的页码返回该页的数据<br>     ps    int    否    pageSize，每页展现数据的条数，默认10条，单页最大50条；系统将根据用户指定的每页显示条数返回搜索数据<br>     s    string    否    sort，排序字段，默认值relation，有5个有效值：relation(相关度),applicationDate(申请时间)、publicationDate(公开时间)、grantDate(授权时间)、rank(专利评级)；可以在后4项前面加感叹号，感叹号表示降序，如果不加表示升序。<br>     hl    int    否    Highlight，是否高亮结果，默认0,可选值：0(不高亮数据),1(高亮数据)</p>
<h2 id="返回参数说明："><a href="#返回参数说明：" class="headerlink" title="返回参数说明："></a>返回参数说明：</h2><p>名称    类型    说明<br>     took    double    请求耗时<br>     total    int    总条数<br>     nextPage    int    下一页<br>     totalPages    int    总页数<br>     page    int    当前页<br>     patents    list    专利列表<br>     id    string    专利唯一ID<br>     rank    int    专利评级<br>     loc    string    LOC分类号<br>     legalStatus    string    法律状态<br>     type    string    专利类型<br>     title    string    专利名称<br>     summary    string    摘要<br>     applicant    string    申请人<br>     applicationDate    string    申请日<br>     applicationNumber    string    申请号<br>     mainIpc    string    主分类号</p>
<h2 id="JSON返回示例："><a href="#JSON返回示例：" class="headerlink" title="JSON返回示例："></a>JSON返回示例：</h2><p>{<br>  “reason”: “success”,<br>  “result”: {<br>    “took”: 0.312,<br>    “total”: 9722,<br>    “nextPage”: 2,<br>    “totalPages”: 973,<br>    “patents”: [<br>      {<br>        “id”: “CN2016177a4d76a90bef1e925d0009fbc32cb037”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种大蒜多糖的提取纯化方法”,<br>        “summary”: “本发明公开了一种大蒜多糖的提取纯化方法，包括以下步骤：A、鲜蒜捣碎成大蒜泥；B、向大蒜泥中加入水，然后进行蒸煮，得蒸煮混合液；C、将蒸煮混合液进行充分发酵，发酵完成后进行蒸馏，所得蒸馏液用正己烷进行萃取，得萃取液；D、将萃取液进行加热除蛋白，冷却后进行抽滤，得大蒜多糖粗提取液；E、大蒜多糖粗提液经大孔树脂处理；F、经逆流色谱一步纯化大蒜多糖；G、透析及干燥：将适量体积的上述收集液装入截留分子量为3000的透析袋中，对水透析过夜，将透析过的溶液进行冷冻干燥，得大蒜多糖精品。本发明方法简单，操作方便、效率高、价格低，优化了制备高纯度大蒜多糖的提取工艺，为规模分离纯化大蒜多糖精品提供技术支持。”,<br>        “applicant”: “徐州黎明食品有限公司”,<br>        “applicationDate”: “2016-11-14”,<br>        “mainIpc”: “C08B37/00”,<br>        “applicationNumber”: “201611000976”<br>      },<br>      {<br>        “id”: “CN20161994969b5472a8be40ba41fdbfa82ea850”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “大蒜切根机及大蒜分瓣机”,<br>        “summary”: “本发明公开了一种大蒜切根机及大蒜分瓣机，涉及大蒜加工技术领域。该大蒜切根机，包括：安装于机架的转移机构，转移机构具有抓取工位、切割工位以及卸料工位，转移机构包括多个抓手机构；用于驱动转移机构依次在抓取工位、切割工位以及卸料工位之间切换的第一驱动装置；用于驱动抓手机构在张开状态和闭合状态之间切换的第二驱动装置，用于驱动处于抓取工位的抓手机构由张开状态切换至闭合状态，且驱动处于卸料工位的抓手机构由闭合状态切换至张开状态；安装于机架、用于将待切割的大蒜输送至抓取工位的输送装置；安装于机架、动作时用于切割处于切割工位的大蒜根须的切割装置。该大蒜切根机切割大蒜根须的效率高，降低了人工的劳动强度。”,<br>        “applicant”: “杨钦海”,<br>        “applicationDate”: “2016-10-31”,<br>        “mainIpc”: “A23N15/08”,<br>        “applicationNumber”: “201610938590”<br>      },<br>      {<br>        “id”: “CN201612d3f1d528eb8c6e6f8019e0cd1a264b45”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种植物驱蚊液”,<br>        “summary”: “本发明公开了一种植物驱蚊液，由以下质量分数配方成分组成：维生素B6-8份、薄荷素油10-20份、高度白酒15-25份、大蒜汁10-20份、柠檬草纯露5-15份、夏枯草8-12份、甘草提取液5-7份、迷迭香2-4份、水30-50份，本发明使用多种植物提取物质，科学精制而成，户外驱避蚊虫叮咬有效时间达六小时，效果特别明显，对人体没有毒副作用及刺激作用。”,<br>        “applicant”: “张帅”,<br>        “applicationDate”: “2016-10-28”,<br>        “mainIpc”: “A61K8/9794”,<br>        “applicationNumber”: “201610960454”<br>      },<br>      {<br>        “id”: “CN20161c264e446ef63042188f05c3275e6211ce”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种用于治疗肝癌的组合药物及其使用方法”,<br>        “summary”: “本发明公开了一种用于治疗肝癌的组合药物，由癌细胞治疗药物、日常肝保健药物、食疗防治药物组成，所述的癌细胞治疗药物由以下中药材组成：淫羊藿5～7份、栀子10～15份、没药7～13份、西洋参15～27份、半枝莲15～30份、龙葵2～7份、蚤休5～20份、五灵脂18～37份、鳖甲4～7份、漏芦20～40份、山慈菇25～35份、麝香2～4份、川乌3～4份；所述的日常肝保健药物由以下中药材组成：葡萄籽5～10份、黑芝麻20～40份、枸杞25～35份、红枣35～45份、葛根15～25份、黑米100～130份、决明子10～15份、莲子25～40份；所述的食疗防治药物由以下中药材组成：鹅不食草25～40份、大蒜5～10份、黄芪10～20份、败酱草2～5份。本发明具有药效显著、食用方便、符合患者生活等优点。”,<br>        “applicant”: “商洛学院”,<br>        “applicationDate”: “2016-10-26”,<br>        “mainIpc”: “A61K36/898”,<br>        “applicationNumber”: “201610948825”<br>      },<br>      {<br>        “id”: “CN20161182e6255f5a33bc4a23a1ac511b4a236d”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种延长插花花期营养液”,<br>        “summary”: “本发明公开了一种延长插花花期营养液，所述延长插花花期营养液由以下重量份材料制成：食用菌50-100份、柠檬汁10-50份、花生麸30-50份、蚕沙10-30份、甲壳素1-5份、贝壳粉10-25份、海藻30-50份、板蓝根15-20份、绿松针25-35份、麦芽20-50份、大蒜10-20份、牡蛎粉5-10份、沸石粉20-40份、水1000-2000份、乙醇500-1000份、磷酸二氢钾10-20份；本发明中蚕沙中叶绿素可以通过提取被插花通过水中吸收保持叶子鲜绿，沸石粉、贝壳粉、牡蛎粉含有多种微量元素和矿物质元素，通过离子交换吸收能带动其他养分吸收，从而起到插花保鲜效果，延长插花花期。”,<br>        “applicant”: “广西鑫雅皇庭园林工程有限责任公,司”,<br>        “applicationDate”: “2016-10-26”,<br>        “mainIpc”: “C05G3/00”,<br>        “applicationNumber”: “201610949513”<br>      },<br>      {<br>        “id”: “CN2016193fbc0d74ceee8b1fc22bdbe1d10f74cb”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种用于降三高及尿酸的混合果蔬汁的制作方法”,<br>        “summary”: “本发明涉及一种用于降三高及尿酸的混合果蔬汁的制作方法，包括以下步骤：第一步、选材与预处理：大蒜去鳞片，选择无坏斑、黄白色蒜瓣；选择未变质的生姜，去皮；选择新鲜成熟红色山楂，去核；选择亮黄色的成熟柠檬；第二步、榨汁：按大蒜500g、生姜500g、山楂按250g称重，加1875g水榨汁,过滤；第三步、热处理：称取250g柠檬切片去核，与上述大蒜、生姜、山楂汁一起加热，80℃蒸发至50％体积，过滤取上清液；称取500g苹果醋与上清液混合，高火煮沸后改用缓火，保持50℃温度煮至剩下的50％体积，静置冷却；第四步、过滤调味：过滤取上清液，用槐花蜂蜜15-20g调味，制成成品。使用本发明，可以降低三高”和尿酸，增强体质、延长寿命，是现代人的福音；本发明原料国内可满足，而且工艺简便。”,<br>        “applicant”: “浙江建设职业技术学院”,<br>        “applicationDate”: “2016-10-18”,<br>        “mainIpc”: “A23L2/38”,<br>        “applicationNumber”: “201610905624”<br>      },<br>      {<br>        “id”: “CN201611da8f8c0a69b28ba04d0b6601c4737d01”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种甘蔗黑穗病的防治方法”,<br>        “summary”: “本发明主要涉及种植技术领域，公开了一种甘蔗黑穗病的防治方法，包括：种植前、种植时和种植后处理；整个种植过程均进行黑穗病的防治，使黑穗病的发病率降低至4%，农户经济收入提高11.7%；种植前，将土壤深翻，加入发酵甘蔗叶，并经蜂胶溶液浸泡，抗菌杀虫，促进甘蔗发芽，减少病菌增殖，降低发病率；种植时，将大蒜和甘蔗进行套种，避免重茬危害，杀灭病原微生物，减少黑穗病的发生，土壤开沟后喷洒抗菌剂溶液，杀灭土壤中的病原微生物，使甘蔗的发芽率提高7.3%；种植后，逐步调节大棚的温度和湿度，提高抗逆性，减少病虫发生率，发芽后定期喷洒抗病剂溶液，抑制黑穗病的发生，使甘蔗的产量提高12.6%。”,<br>        “applicant”: “张俊良”,<br>        “applicationDate”: “2016-10-17”,<br>        “mainIpc”: “A01G1/00”,<br>        “applicationNumber”: “201610902060”<br>      },<br>      {<br>        “id”: “CN20161e40826b1b685e2f4ffd31656dff1c34f5”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种贮存期长、营养保留率高的香辣菌及其制备方法”,<br>        “summary”: “本发明公开了一种贮存期长、营养保留率高的香辣菌及其制备方法。所述香辣菌配料按重量份组成包括：食用菌100份、油50~300份、盐2~8份、香辛料5~50份、护色剂0~0.3份。所述制备方法包括：选择新鲜健康食用菌，去除底端硬化部分洗净晾干破碎；香辛料去杂质，花生脱种皮；将100~600份水煮沸，加入食用菌、25~35%的盐和护色剂，煮沸1~6min后捞起冷却并沥干；将食用菌与65~85%的油、剩余的盐，及小茴香、丁香、桂皮、八角、草果混合，焖烧10~40min；将剩余油烧至180~210℃，将辣椒、大蒜、小米辣加入，加热0.5~2min制成红油；加入花生与芝麻在180~210℃下炸1~5min，再加入食用菌翻炒均匀。用所述方法加工的香辣菌便于贮存及运输，营养保留率高，提高了食用菌资源的利用率，便于大规模推广应用。”,<br>        “applicant”: “云南云菌科技(集团)有限公司”,<br>        “applicationDate”: “2016-10-17”,<br>        “mainIpc”: “A23L31/00”,<br>        “applicationNumber”: “201610900790”<br>      },<br>      {<br>        “id”: “CN2016131754d1cc00b6f0289ff581e7b9261c4d”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种鸡瘟预防治疗的中药组合物及其制备方法”,<br>        “summary”: “本发明涉及一种鸡瘟预防治疗的中药组合物，包括金银花、鱼腥草、野菊花、白蒿、神曲、大蒜、雄黄、生姜、食醋和小苏打。本发明将各组分按照一定的配比混匀，再与饲料混合，喂食3～5天后，对预防和治疗鸡瘟有很好的效果，经过试验，治愈率达到95%以上，预防效果达到90%以上，降低了鸡瘟大规模爆发时导致的经济损失，最大限度的保护养殖户的利益，是一种较为理想的鸡瘟预防治疗的中药组合物。”,<br>        “applicant”: “扬中牧乐药业有限公司”,<br>        “applicationDate”: “2016-10-12”,<br>        “mainIpc”: “A61K36/9068”,<br>        “applicationNumber”: “201610889390”<br>      },<br>      {<br>        “id”: “CN20161ef0da09b7e19a95e69e57fbc59426bf5d”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种低糖耐储存海鲜XO酱及制备方法”,<br>        “summary”: “本发明涉及食品调味品加工技术领域，具体地说是一种低糖耐储存海鲜XO酱及制备方法，其特征在于该海鲜XO酱由植物油、红葱、大蒜、干瑶柱、鱿鱼丝、海米、干海燕鱼、木糖醇、鲜红辣椒、红辣椒粉、芝麻、食用盐、五香粉、柠檬酸组成，该方法选取干瑶柱、鱿鱼丝、海米、干海燕鱼等纯天然高蛋白的海鲜干品为原料，经挑选、浸泡溶胀、清洗、油炸脱水、调味、加束水剂兼甜味剂木糖醇、酸味剂兼酸化剂柠檬酸、热灌装制得成品，具有配方科学、口味鲜香多样、口感软绵、产品开封后保存时间长等优点。”,<br>        “applicant”: “陈嘉润”,<br>        “applicationDate”: “2016-10-10”,<br>        “mainIpc”: “A23L27/60”,<br>        “applicationNumber”: “201610883205”<br>      }<br>    ],<br>    “page”: 1<br>  },<br>  “error_code”: 0<br>}</p>
<h2 id="服务级错误码参照-error-code-："><a href="#服务级错误码参照-error-code-：" class="headerlink" title="服务级错误码参照(error_code)："></a>服务级错误码参照(error_code)：</h2><pre><code>错误码    说明
226300    网络繁忙,请稍后重试
226301    数据源返回相关错误信息,看接口具体返回
226302    参数错误
</code></pre><p>系统级错误码参照：<br>     错误码    说明    旧版本（resultcode）<br>     10001    错误的请求KEY    101<br>     10002    该KEY无请求权限    102<br>     10003    KEY过期    103<br>     10004    错误的OPENID    104<br>     10005    应用未审核超时，请提交认证    105<br>     10007    未知的请求源    107<br>     10008    被禁止的IP    108<br>     10009    被禁止的KEY    109<br>     10011    当前IP请求超过限制    111<br>     10012    请求超过次数限制    112<br>     10013    测试KEY超过请求限制    113<br>     10014    系统内部异常(调用充值类业务时，请务必联系客服或通过订单查询接口检测订单，避免造成损失)    114<br>     10020    接口维护    120<br>     10021    接口停用    121<br>错误码格式说明（示例：200201）：<br>     2    002    01<br>     服务级错误（1为系统级错误）    服务模块代码(即数据ID)    具体错误代码</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接口地址：&lt;a href=&quot;http://v.juhe.cn/patent/search.php&quot;&gt;http://v.juhe.cn/patent/search.php&lt;/a&gt;&lt;br&gt;支持格式：json&lt;br&gt;请求方式：get post&lt;br&gt;请求示例：&lt;a href=&quot;http://v.juhe.cn/patent/search.php?q=大蒜&amp;amp;key=您申请的key&quot;&gt;http://v.juhe.cn/patent/search.php?q=大蒜&amp;amp;key=您申请的key&lt;/a&gt;&lt;br&gt;接口备注：该接口提供对专利的检索功能，用户输入想要查找的关键词或者符合语法规范的短语即可对专利数据进行检索。&lt;br&gt;调用样例及调试工具：API测试工具&lt;/p&gt;
    
    </summary>
    
      <category term="Patent" scheme="http://ipcreator.me/categories/Patent/"/>
    
    
      <category term="Patent" scheme="http://ipcreator.me/tags/Patent/"/>
    
  </entry>
  
  <entry>
    <title>Malicious Behaviour Detecting System Triggered by Combined Event in Android</title>
    <link href="http://ipcreator.me/2017/03/25/IPR/patent-of-virus-detect-base-on-android-ui/"/>
    <id>http://ipcreator.me/2017/03/25/IPR/patent-of-virus-detect-base-on-android-ui/</id>
    <published>2017-03-25T02:52:06.000Z</published>
    <updated>2017-03-27T10:28:01.891Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.innojoy.com/searchresult/download.html?patentName=%E5%9F%BA%E4%BA%8E%E7%BB%84%E5%90%88%E4%BA%8B%E4%BB%B6%E8%A1%8C%E4%B8%BA%E8%A7%A6%E5%8F%91%E7%9A%84Android%E6%81%B6%E6%84%8F%E8%A1%8C%E4%B8%BA%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95[ZH]&amp;db=fmzl&amp;pd=2016.06.08&amp;dn=CN201610130822.0&amp;pp=BOOKS@FM@2016@20160608@201610130822.0&amp;lls=%E5%AE%9E%E5%AE%A1#" target="_blank" rel="external">专利全文</a></p>
<p><img src="http://books.daweisoft.com/abstphoto/FM/20160608/201610130822.0/201610130822.gif" alt=""></p>
<p>本发明公开了一种基于组合事件行为触发的Android恶意行为检测系统及其检测方法。多层行为监控模块捕获应用程序运行时的<strong>行为日志</strong>；行为分析模块通过<strong>函数调用关系和函数参数特征</strong>识别应用程序中的恶意行为，同时，行为分析模块会生成应用行为分析报告；<strong>DroidRunner行为触发模型</strong>根据对界面调度方式和已知恶意行为触发条件的分析设计了多组合均衡遍历算法和特殊事件触发库，完成对应用程序中恶意行为的动态检测。本发明其可覆盖应用程序运行期间绝大部分的函数调用，对应用程序中的敏感行为触发效果显著。达到高效、稳定触发应用程序中可能存在的恶意行为的效果。</p>
<a id="more"></a>
<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>申请(专利)号    CN201610130822.0    申请日    2016.03.09<br>公开(公告)号    CN105653946A    公开(公告)日    2016.06.08<br>最终专利权人    哈尔滨工程大学<br>地址    150001 黑龙江省哈尔滨市南岗区南通大街145号哈尔滨工程大学科技处知识产权办公室<br>主分类号    G06F21/55(2013.01)I    国省代码    黑龙江;23<br>申请(专利权)人    哈尔滨工程大学<br>发明(设计)人    张国印;曲家兴;王玲;何志昌;高伟</p>
<h2 id="权利要求书"><a href="#权利要求书" class="headerlink" title="权利要求书"></a>权利要求书</h2><ol>
<li>基于组合事件行为触发的Android恶意行为检测系统，其特征在于：包括多层行为监 测模块、行为分析模块和DroidRunner行为触发模型；<br>多层行为监控模块通过修改Android源码、植入网络监控工具实现对Java调用、本地调 用和网络连接的监控，捕获应用程序运行时的行为日志；<br>行为分析模块通过函数调用关系和函数参数特征识别应用程序中的恶意行为，同时，行 为分析模块会生成应用行为分析报告，用户通过应用行为分析报告识别检测结果中误报或漏 报的恶意行为，并修正或扩展恶意行为特征库；<br>DroidRunner行为触发模型根据对界面调度方式和已知恶意行为触发条件的分析设计了多 组合均衡遍历算法和特殊事件触发库，完成对应用程序中恶意行为的动态检测。</li>
</ol>
<p>1 based on combined event is triggered amlroid malicious behaviour detecting system wherein the: Comprises a layer of the monitoring module the analyzing module and chemical oidrunner the triggering module; Several layers of the monitoring module through modifying amlroid source code is embedded into the network monitoring tool to realize the va the native transferring and network connection the monitoring and trapping application program during operation of the behaviour log; Behaviour analysis module through the function transferring relation and function parameter characteristic recognition application program in the invention prevents malicious behaviour at the same time to analyze module will produce applied behavioural analysis report of user through applied behavioural analysis report recognition and detection result of false alarm and missing report of the malicious behaviour and correction or extension malicious behaviour feature database; Droidrunner the triggering module according to the interface scheduling method and known malicious behaviour triggering condition of analyzing design of several groups of traversing with balance calculation method and special event triggers database to complete the application program in malicious behaviour dynamic detecting.</p>
<ol>
<li><p>根据权利要求1所述的基于组合事件行为触发的Android恶意行为检测系统，其特征 在于：所述的DroidRunner行为触发模型包括预处理组件、主控组件、界面分析组件、界面 控制组件、特殊事件触发组件和特殊事件触发库组件；<br>预处理组件，分析APK并获取其基本信息，为其它组件的运行提供基础数据；<br>界面分析组件，获取当前Activity中显示的所有可操作控件的属性，并生成控件序列，为 界面控制组件提供基础数据；<br>界面控制组件，模拟用户对应用的操作，操作根据多组合均衡遍历算法调度生成；<br>特殊事件触发组件，基于对由注册广播接受器和检测运行环境类事件触发执行应用程序 恶意行为的分析，设计了命令行实现、脚本实现和预装实现方式三种方式来实现这些事件的 自动化触发；<br>特殊事件触发库组件，存储当前已发现恶意应用恶意行为的触发事件及实现方法；<br>主控组件，负责通过ADB与设备之间进行通讯与控制，并在界面分析组件、界面控制组 件、特殊事件触发组件的支撑下，实现对应用的自动化操作。</p>
</li>
<li><p>According to claim 1 said base used for combining event is triggered amlroid malicious behaviour detecting system wherein the: Said chemical processing oidrunner is model includes pretreatment subassembly the main control module interface analysis component interface control component special event triggering module and special event triggering base component; Pretreatment subassembly apk analysis and obtain the basic information as other components the movement of it provides foundation data for the; Interface analysis component obtaining the current activity to display all can be operated control property and generating control sequence the boundary control assembly it provides foundation data for the; Interface control module of simulated user to the application of the operation of the operation according to the combination balance traversing algorithm dispatching generating; Specific event triggering component on the basis of registered broadcasting receiver and detection operation environment kind of event triggering executing application program malicious behaviour analysis is designed in order to realize script realization method and device realizing method = method to realize operation of some event the automatic triggering; Specific event triggering module database storing current that has been found malicious application malicious behaviour of the trigger event and method for realizing; Main control module is responsible for through adb and the equipment is performed between communication and control interface and the analysis component interface control component special event triggering component of the supporting to realize the application of the automatic operation.</p>
</li>
<li><p>一种基于权利要求1所述的基于组合事件行为触发的Android恶意行为检测系统的检 测方法，其特征在于，包括以下步骤，<br>步骤一：多层行为监控模块通过修改Android源码、植入网络监控工具实现对Java调用、 本地调用和网络连接的监控，捕获应用程序运行时的行为日志；<br>步骤二：行为分析模块通过函数调用关系和函数参数特征识别应用程序中的恶意行为， 同时，行为分析模块会生成应用行为分析报告；<br>步骤三：根据应用行为分析和DroidRunner行为触发模型完成对恶意行为的动态检测。</p>
</li>
</ol>
<p>3 according to claim 1 said base used for combining event is triggered amlroid malicious behaviour of the detection system detection method wherein it comprises w of the following steps step one: Several layers of the monitoring module through modifying android source code is embedded into the network monitoring tool to realize the va the native transferring and network connection the monitoring and trapping application program during operation of the behaviour log; Step two: Behaviour analysis module through the function transferring relation and function parameter characteristic recognition application program in the invention prevents malicious behaviour at the same time to analyze module will produce applied behavioural analysis report; Step s: According to applied behavioural analysis and chemical oidrunner to as trigger mode to finish the malicious behaviour dynamic detecting.</p>
<ol>
<li>根据权利要求3所述的基于组合事件行为触发的Android恶意行为检测方法，其特征 在于：所述的根据应用行为分析和DroidRunner行为触发模型完成对恶意行为的动态检测的 方法为：<br>步骤一：通过预处理组件完成APK的分析并取其基本信息；利用apktool工具反编译APK 获取Androidmanifest.xml文件，通过分析Androidmanifest.xml文件获取APK的基本信息， 包括APK的包名称、MainActivity名称、4种组件信息、申请的权限；<br>步骤二：通过分析组件获取当前Activity中显示的所有可操作控件的绝对坐标、控件类型、 控件可操作指令属性，生成控件的操作序列，为界面控制组件提供基础数据；<br>步骤三：利用步骤二获得的数据信息模拟用户对应用的操作，操作根据多组合均衡遍历 算法调度生成；<br>步骤四：根据预处理组件获取的待检测应用的权限及组件信息，从特殊事件触发库中抽 取符合条件的特殊事件列表，在主控组件的控制下在APP运行期间随机触发这些特殊事件；<br>步骤五：通过ADB与设备之间进行通讯与控制，并在界面分析组件、界面控制组件、特 殊事件触发组件的支撑下，完成自动检测。</li>
</ol>
<p>4 according to claim 1 said base used for combining event is triggered amlroid malicious behaviour method for detecting the feature lies in that: Said according to applied behavioural analysis and chemical oidrunner for is model finishes the malicious behaviour dynamic detecting method is as follows: Step one: Through pre-treatment apk components to finish analysis and obtain the basic information; Using apktool tool obtaining the compiling apk chemical oidmanifest an xml file through analyzing chemical oidmanifest an xml file obtaining apk the basic information comprises apk the name of main activity name 4 assembly information request the authorization; Step two: By analyzing module obtains current activity is displayed in the operable to control the absolute coordinate control type control can be operation instruction attribute create control operation sequence the boundary control assembly it provides foundation data for the; Step by step two of obtaining the data information of simulated user to the application of the operation of the operation according to the combination balance traversing algorithm dispatching generating; Step four: According to the processing component for obtaining to be detected application property and component information from the special event trigger to extract the warehouse accords with condition of the special event list is in the main control module under control of the app operating period of random contact and transporting some special condition happens; Step five: Through adb and the equipment is performed between communication and control interface and the analysis component interface control component special event triggering module the support is finished automatically detecting.</p>
<ol>
<li>根据权利要求4所述的基于组合事件行为触发的Android恶意行为检测方法，其特征 在于：所述的根据多组合均衡遍历算法调度生成生成操作的过程为：<br>(1)将Android应用界面间跳转关系转化为一个有向赋权图：<br>G=(L,W,E)L={li|i=1,2,3…,n}W={w(l)|∀l∈L}E={eij=|i,j=1,2,3…,n}]]&gt;<br>G表示界面跳转关系的有向图；<br>L表示应用所有界面的集合，集合中每个节点表示一个界面；<br>W表示界面权值的集合，权值表示需要调度到该界面执行操作的需求程度，该值越大表 示调度到该界面进行操作的需求越迫切；<br>E表示界面间跳转的边的集合，存储的是导致界面跳转的操作；<br>(2)如果即发现一个新的界面节点Li，将界面分析组件获取的当前界面的所有 操作置于Li.unKnownList表中，计算界面权值Li.weight，转到下一步；如果Li∈L，转到下 一步；<br>Li.weight=0,len(Li.unKnowList)=0,len(Li.notJumpList)=0n,n=len(Li.unKnowList)&gt;0nΣxk,n=len(Li.notJumpList)&gt;0,len(Li.unKnowList)=0]]&gt;<br>其中xk表示Li.notJumpList列表中k个操作被执行的次数，每一个界面节点均维持了3个 列表：unKnowList、notJumpList和jumpList；unKnowList列表用于存储不确定是否会导致界 面跳转的控件操作，在进入一个新的界面时，所有的控件操作均存储在这个列表中； notJumpList列表用于存储不会导致界面跳转的操作，初始值为空；jumpList列表用于存储会 发生界面跳转的操作，初始值为空；<br>(3)如果len(Li.unKnownList)≠0，在Li.notJumpList列表中，在Li.unKnownList列表中 随机选择执行一个操作xk，xk.count自加1，计算界面权值Li.weight；如果界面没有发生变 化，则将操作xk从Li.unKnownList列表移动到Li.notJumpList列表中，跳到步骤(3)；如果 界面发生跳转，新的界面为Lj，则将操作xk从Li.unKnownList列表移动到Li.notJumpList列 表中，并建立界面Li过操作xk跳转到界面Lj的指向关系，跳到步骤(2)；如果 len(Li.unKnownList)＝0，跳到步骤四(4)；<br>(4)如果len(Li.notJumpList)≥3，根据执行次数少优先和不同类型优先随机在 Li.notJumpLtis中选择3个操作组合Commands并执行；如果len(Li.notJumpList)&lt;3，执行所 有操作；被执行操作count属性自加1，计算界面权值Li.weight，完成后跳转到步骤(5)； 如果len(Li.notJumpList)＝0，跳转到步骤(5)；<br>(5)Lk＝max(W(L))，如果i＝k，跳到步骤(4)；如果i≠k，跳到步骤(6)；<br>(6)根据广度优先算法在图中搜索当前界面Li到界面Lk的路径S，如果S存在，按照跳 转操作执行，操作的count属性自加1，跳转到步骤(3)。如果S不存在，执行返回操作， 跳到步骤(6)。</li>
</ol>
<h2 id="说明书"><a href="#说明书" class="headerlink" title="说明书"></a>说明书</h2><h3 id="技术领域"><a href="#技术领域" class="headerlink" title="技术领域"></a>技术领域</h3><p>本发明属于AMBDS恶意行为检测领域，尤其涉及基于组合事件行为触发的Android恶 意行为检测系统及其检测方法。</p>
<h3 id="背景技术"><a href="#背景技术" class="headerlink" title="背景技术"></a>背景技术</h3><p>伴随着Android平台的迅猛发展，Android平台的安全形势也愈加严峻。针对Android平 台的恶意软件数量近几年呈爆发式增长。Android平台开放源码，导致恶意应用开发者更容易 找出平台的安全缺陷开发恶意软件。当前，虽然Android平台已存在多类杀毒软件，但是出 于设备性能和用户体验考虑，其功能受到很大限制，对未知病毒的检测基本无能为力。这些 恶意软件主要的传播途径是第三方应用市场及网络下载。因此，在传播环节采用对应用程序 进行安全性审核的方式可实现对恶意应用程序的拦截，有效地遏制恶意软件的传播，更好的 保护Android平台移动设备的安全。同时，在该环节开发的检测工具不用受到设备性能和用 户体验的限制。</p>
<p>Android平台自诞生至今只有短短七年的时间，国内外对Android平台恶意应用程序检测 方向的研究均处于起步阶段，对于下载或上传的应用程序是否具有恶意行为还缺乏有效的检 测手段。虽然，当前Android平台恶意应用检测方法已经取得了一些研究成果。但是，这些 成果存在行为触发方式过于单一、行为监控不全面、检测结果简单等问题。研究如何更全面 的提取应用程序运行期间的行为信息对于该领域具有重要的意义。AMBDS系统中的 DroidRunner行为触发模型设计了多组合均衡遍历算法、特殊事件触发库来提升对应用程序内 部路径和敏感行为的覆盖率，达到更高效的触发应用程序恶意行为的效果。</p>
<h2 id="发明内容"><a href="#发明内容" class="headerlink" title="发明内容"></a>发明内容</h2><p>本发明的目的是提供一种改进了DroidRunner行为触发模型的，基于组合事件行为触发的 Android恶意行为检测系统。本发明的目的包括提供一种效率高、准确率高的，基于组合事 件行为触发的Android恶意行为检测方法。</p>
<p>基于组合事件行为触发的Android恶意行为检测系统，包括多层行为监测模块、行为分 析模块和DroidRunner行为触发模型；</p>
<p>多层行为监控模块通过修改Android源码、植入网络监控工具实现对Java调用、本地调 用和网络连接的监控，捕获应用程序运行时的行为日志；</p>
<p>行为分析模块通过函数调用关系和函数参数特征识别应用程序中的恶意行为，同时，行 为分析模块会生成应用行为分析报告，用户通过应用行为分析报告识别检测结果中误报或漏 报的恶意行为，并修正或扩展恶意行为特征库；</p>
<p>DroidRunner行为触发模型根据对界面调度方式和已知恶意行为触发条件的分析设计了多 组合均衡遍历算法和特殊事件触发库，完成对应用程序中恶意行为的动态检测。</p>
<p>本发明基于组合事件行为触发的Android恶意行为检测系统，还可以包括：<br>1、DroidRunner行为触发模型包括预处理组件、主控组件、界面分析组件、界面控制组 件、特殊事件触发组件和特殊事件触发库组件；</p>
<p>预处理组件，分析APK并获取其基本信息，为其它组件的运行提供基础数据；</p>
<p>界面分析组件，获取当前Activity中显示的所有可操作控件的属性，并生成控件序列，为 界面控制组件提供基础数据；</p>
<p>界面控制组件，模拟用户对应用的操作，操作根据多组合均衡遍历算法调度生成；</p>
<p>特殊事件触发组件，基于对由注册广播接受器和检测运行环境类事件触发执行应用程序 恶意行为的分析，设计了命令行实现、脚本实现和预装实现方式三种方式来实现这些事件的 自动化触发；</p>
<p>特殊事件触发库组件，存储当前已发现恶意应用恶意行为的触发事件及实现方法；</p>
<p>主控组件，负责通过ADB与设备之间进行通讯与控制，并在界面分析组件、界面控制组 件、特殊事件触发组件的支撑下，实现对应用的自动化操作。</p>
<p>基于组合事件行为触发的Android恶意行为检测方法，包括以下步骤，</p>
<p>步骤一：多层行为监控模块通过修改Android源码、植入网络监控工具实现对Java调用、 本地调用和网络连接的监控，捕获应用程序运行时的行为日志；</p>
<p>步骤二：行为分析模块通过函数调用关系和函数参数特征识别应用程序中的恶意行为， 同时，行为分析模块会生成应用行为分析报告；</p>
<p>步骤三：根据应用行为分析和DroidRunner行为触发模型完成对恶意行为的动态检测。</p>
<p>本发明基于组合事件行为触发的Android恶意行为检测方法，还可以包括：<br>1、根据应用行为分析和DroidRunner行为触发模型完成对恶意行为的动态检测的方法为：</p>
<p>步骤一：通过预处理组件完成APK的分析并取其基本信息；利用apktool工具反编译APK 获取Androidmanifest.xml文件，通过分析Androidmanifest.xml文件获取APK的基本信息， 包括APK的包名称、MainActivity名称、4种组件信息、申请的权限；</p>
<p>步骤二：通过分析组件获取当前Activity中显示的所有可操作控件的绝对坐标、控件类型、 控件可操作指令属性，生成控件的操作序列，为界面控制组件提供基础数据；</p>
<p>步骤三：利用步骤二获得的数据信息模拟用户对应用的操作，操作根据多组合均衡遍历 算法调度生成；</p>
<p>步骤四：根据预处理组件获取的待检测应用的权限及组件信息，从特殊事件触发库中抽 取符合条件的特殊事件列表，在主控组件的控制下在APP运行期间随机触发这些特殊事件；</p>
<p>步骤五：通过ADB与设备之间进行通讯与控制，并在界面分析组件、界面控制组件、特 殊事件触发组件的支撑下，完成自动检测。</p>
<p>2、根据多组合均衡遍历算法调度生成生成操作的过程为：</p>
<p>(1)将Android应用界面间跳转关系转化为一个有向赋权图：</p>
<p>G=(L,W,E)L={li|i=1,2,3…,n}W={w(l)|∀l∈L}E={eij=<li,lj>i,j=1,2,3…,n}]]&gt;</li,lj></p>
<p>G表示界面跳转关系的有向图；</p>
<p>L表示应用所有界面的集合，集合中每个节点表示一个界面；</p>
<p>W表示界面权值的集合，权值表示需要调度到该界面执行操作的需求程度，该值越大表 示调度到该界面进行操作的需求越迫切；<br>E表示界面间跳转的边的集合，存储的是导致界面跳转的操作；</p>
<p>(2)如果即发现一个新的界面节点Li，将界面分析组件获取的当前界面的所有操作置于Li.unKnownList表中，计算界面权值Li.weight，转到下一步；如果Li∈L，转到下一步；</p>
<p>Li.weight=0,len(Li.unKnowList)=0,len(Li.notJumpList)=0n,n=len(Li.unKnowList)&gt;0nΣxk,n=len(Li.notJumpList)&gt;0,len(Li.unKnowList)=0]]&gt;</p>
<p>其中xk表示Li.notJumpList列表中k个操作被执行的次数，每一个界面节点均维持了3个 列表：unKnowList、notJumpList和jumpList；unKnowList列表用于存储不确定是否会导致界 面跳转的控件操作，在进入一个新的界面时，所有的控件操作均存储在这个列表中； notJumpList列表用于存储不会导致界面跳转的操作，初始值为空；jumpList列表用于存储会 发生界面跳转的操作，初始值为空；</p>
<p>(3)如果len(Li.unKnownList)≠0，在Li.notJumpList列表中，在Li.unKnownList列表中 随机选择执行一个操作xk，xk.count自加1，计算界面权值Li.weight；如果界面没有发生变 化，则将操作xk从Li.unKnownList列表移动到Li.notJumpList列表中，跳到步骤(3)；如果 界面发生跳转，新的界面为Lj，则将操作xk从Li.unKnownList列表移动到Li.notJumpList列 表中，并建立界面Li过操作xk跳转到界面Lj的指向关系，跳到步骤(2)；如果 len(Li.unKnownList)＝0，跳到步骤四(4)；</p>
<p>(4)如果len(Li.notJumpList)≥3，根据执行次数少优先和不同类型优先随机在 Li.notJumpIt中选择3个操作组合Commands并执行；如果len(Li.notJumpList)&lt;3，执行所 有操作；被执行操作count属性自加1，计算界面权值Li.weight，完成后跳转到步骤(5)； 如果len(Li.notJumpList)＝0，跳转到步骤(5)；</p>
<p>(5)Lk＝max(W(L))，如果i＝k，跳到步骤(4)；如果i≠k，跳到步骤(6)；</p>
<p>(6)根据广度优先算法在图中搜索当前界面Li到界面Lk的路径S，如果S存在，按照跳 转操作执行，操作的count属性自加1，跳转到步骤(3)。如果S不存在，执行返回操作， 跳到步骤(6)。</p>
<p>有益效果：</p>
<p>本发明主要是对DroidRunner行为触发模型进行了改进，体现在下面两点：</p>
<p>改进一：设计了多组合均衡遍历算法。该遍历算法根据应用程序内用户界面的跳转构建 了界面跳转的图形描述，在遍历执行界面操作过程中，根据控件类型及操作执行的次数随机 生成不同的组合操作。同时，利用界面间调度算法均衡各个界面的操作平均执行次数。以此 提升应用运行期间对后台逻辑代码覆盖率，达到在动态检测期间提升触发应用恶意行为概率 的目的。</p>
<p>改进二：设计了特殊事件触发库。通过对恶意行为触发条件的分析可知部分恶意行为并 非由用户对应用的操作触发，而是由系统广播事件等其它非用户操作的事件触发。本发明利 用已知恶意应用恶意行为的触发条件搭建了一个特殊事件触发库，通过在应用运行期间触发 这些事件，进一步提升触发应用恶意行为的概率。<br>本发明通过与Monkey和Monkeyrunner触发方式对比实验显示DroidRunner提升了运行 期间对应用程序内部方法层面的覆盖率，可更高效的触发应用程序的恶意行为。通过自编辑 恶意样本和网络恶意样本检测结果显示AMBDS系统可更高效、准确的识别应用程序的恶意 行为。</p>
<h3 id="附图说明"><a href="#附图说明" class="headerlink" title="附图说明"></a>附图说明</h3><p>图1为AMBDS恶意行为检测系统；</p>
<p>图2为DroidRunner模型示意图；</p>
<p>图3为Android应用界面间跳转关系图；</p>
<p>图4为AMBDS系统检测结果；</p>
<p>图5为多种触发方式效果对比图。</p>
<h3 id="具体实施方式"><a href="#具体实施方式" class="headerlink" title="具体实施方式"></a>具体实施方式</h3><p>下面将结合附图对本发明做进一步详细说明。</p>
<p>在本发明中所涉及的基于组合事件行为触发的Android恶意行为检测模型主要功能为： 通过多层行为监控模块的行为监控，完成对程序行为特征的获取。根据获取的程序行为特征 信息，进行行为特征的分析并完成对恶意行为的判定，同时根据需求产生不同详细程度的行 为分析报告。根据对程序行为特征的分析，同时结合DroidRunner行为触发模型完成对应用 程序中恶意行为的动态检测，如图1所示。</p>
<p>下面以DroidRunner行为触发模型对应用程序敏感行为的检测为例，介绍此模型触发应 用程序恶意行为的过程，描述如下：</p>
<p>步骤一：通过预处理组件完成APK的分析并取其基本信息。利用apktool工具反编译APK 获取Androidmanifest.xml文件，通过分析Androidmanifest.xml文件获取APK的基本信息， 包括APK的包名称、MainActivity名称、4种组件信息、申请的权限等。这些信息为其它组 件的运行提供基础数据。<br>步骤二：通过分析组件获取当前Activity中显示的所有可操作控件的绝对坐标、控件类 型、控件可操作指令等属性，生成控件的操作序列，为界面控制组件提供基础数据。</p>
<p>步骤三：利用步骤二获得的数据信息模拟用户对应用的操作，这些操作根据多组合均衡 遍历算法调度生成。</p>
<p>多组合均衡遍历算法实现了对应用的模拟操作，为便于分析应用程序内部的界面间的调 度关系，本发明将Android应用界面间跳转关系转化为一个有向赋权图，其逻辑表示如下所 示：</p>
<p>G=(L,W,E)L={li|i=1,2,3…,n}W={w(l)|∀l∈L}E={eij=<li,lj>i,j=1,2,3…,n}]]&gt;</li,lj></p>
<p>G表示界面跳转关系的有向图。</p>
<p>L表示应用所有界面的集合，集合中每个节点表示一个界面。</p>
<p>W表示界面权值的集合，权值表示需要调度到该界面执行操作的需求程度，该值越大说 明调度到该界面进行操作的需求越迫切。</p>
<p>E表示界面间跳转的边的集合，存储的是导致界面跳转的操作。</p>
<p>界面节点的权值确定了界面间调度优先级，本发明利用界面节点中操作控件执行情况确 定界面节点的权值。每一个界面节点均维持了3个列表：unKnowList、notJumpList和jumpList。 unKnowList列表用于存储不确定是否会导致界面跳转的控件操作，在进入一个新的界面时， 所有的控件操作均存储在这个列表中。notJumpList列表用于存储不会导致界面跳转的操作， 初始值为空。jumpList列表用于存储会发生界面跳转的操作，初始值为空。三个列表中所有 的操作共有四个属性：count、index、command和class，分别表示：</p>
<p>1)count初始值为0，表示该操作被执行的次数。</p>
<p>2)index属性用于标示这个操作。</p>
<p>3)command表示具体的操作命令。<br>class表示控件的类型。</p>
<p>每个界面Li都有一个权重Li.weight，在计算界面权值时以当前识别出的控件情况来计算， 因此不同的操作可能导致界面内的控件发生变化。界面节点的权值计算公式如下：</p>
<p>Li.weight=0,len(Li.unKnowList)=0,len(Li.notJumpList)=0n,n=len(Li.unKnowList)&gt;0nΣxk,n=len(Li.notJumpList)&gt;0,len(Li.unKnowList)=0]]&gt;</p>
<p>其中xk表示Li.notJumpList列表中k个操作被执行的次数。权值越大表示调度到这个界 面节点执行的优先级越高。根据界面权重与1的比较结果，有以下三种情况：</p>
<p>1)界面权重大于1，说明这个界面还有多个操作没有被调度执行。</p>
<p>2)界面权重小于1，说明该界面中所有的操作都被执行过。</p>
<p>3)界面权值等于1，说明界面是存在一个操作没有被执行或者这个界面中所有的操作都 被执行了1次。</p>
<p>多组合均衡遍历算法的具体描述如下：</p>
<p>1)如果即发现一个新的界面节点Li，将界面分析组件获取的当前界面的所有操作置于Li.unKnownList表中，根据公式计算界面权值Li.weight，转到(2)。如果Li∈L，转到(2)。</p>
<p>2)如果len(Li.unKnownList)≠0，在Li.notJumpList列表中，在Li.unKnownList列表中随 机选择执行一个操作xk，xk.count自加1，根据公式计算界面权值Li.weight。如果界面没有 发生变化，则将操作xk从Li.unKnownList列表移动到Li.notJumpList列表中，跳到(2)。如 果界面发生跳转，新的界面为Lj，则将操作xk从Li.unKnownList列表移动到Li.notJumpList列 表中，并建立界面Li过操作xk跳转到界面Lj的指向关系，跳到步骤(1)。如果 len(Li.unKnownList)＝0，跳到(3)。</p>
<p>3)如果len(Li.notJumpList)≥3，根据执行次数少优先和不同类型优先随机在 Li.notJumpIt中选择3个操作组合Commands并执行；如果len(Li.notJumpList&lt;3)，执行所 有操作。被执行操作count属性自加1，根据公式计算界面权值Li.weight，完成后跳转到(4)。 如果len(Li.notJumpList)＝0，跳转到(4)。</p>
<p>4)Lk＝max(W(L))，如果i＝k，跳到(3)；如果i≠k，跳到(5)。<br>5)根据广度优先算法在图中搜索当前界面Li到界面Lk的路径S，如果S存在，按照跳转 操作执行，操作的count属性自加1，跳转到(2)。如果S不存在，执行返回操作，跳到(5)。</p>
<p>每个应用程序运行时间预定义是10分钟，当时间到达后自动结束上述遍历算法。预定义 时间可根据任务量和程序的大小进行调节。多组合均衡遍历算法的执行流程需要注意一种特 殊情况：在遍历执行的过程中，可能执行某个操作后会导致应用程序正常退出或异常崩溃退 出，如果出现这种异常，需要对这个操作进行标记，在遍历过程中减少这个操作运行的次数。 然后自动重新启动该应用，并继续执行遍历算法，如果在检测期间出现2次应用异常崩溃， 直接停止遍历算法。</p>
<p>步骤四：根据预处理组件获取的待检测应用的权限及组件信息，从特殊事件触发库中抽 取符合条件的特殊事件列表，之后在主控组件的控制下在APP运行期间随机触发这些特殊事 件。</p>
<p>多组合均衡遍历算法无法模拟接收到短信、锁屏等特殊事件，因此，本发明设计了特殊 事件触发库进一步提升对应用程序内部处理逻辑的覆盖率，达到触发应用程序恶意为的目的。 特殊事件触发库采用特殊事件-权限映射表存储当前已发现恶意应用恶意行为的触发事件及 实现方法。在特殊事件-权限映射表中，特殊事件与权限之间是1对1或1对多的关系，即某 一个特殊事件发生可能需要多种权限的组合。特殊事件-权限映射表的具体描述如下表所示。</p>
<p>特殊事件的提取流程分为以下2步：</p>
<p>步骤1：提取应用申请的权限信息，根据提取的权限从特殊事件-权限映射表中抽取对应 的特殊事件；</p>
<p>步骤2：根据提取的特殊事件在特殊事件-权限映射表中查找需要的权限，如果需要的权 限均被应用申请，这表明这个特殊事件满足触发条件，需要在应用运行时执行这个特殊事件。 不满足则舍弃这个特殊事件。</p>
<p>步骤五：通过ADB与设备之间进行通讯与控制，并在界面分析组件、界面控制组件、特 殊事件触发组件的支撑下，实现对应用的安装、启动、运行、卸载等自动化操作，提升触发 检测应用恶意行为的概率，完成自动检测。</p>
<p>近年来，Android平台的恶意应用程序呈爆发式增长，国内外研究组织针对Android平台 恶意应用检测展开了许多研究。第三方应用市场和网络论坛是恶意应用程序的主要传播途径， 通过在这些渠道中检测上传应用程序是否含有恶意行为，可阻断恶意应用程序利用这些途径 传播，遏制恶意应用程序的扩散。但是，目前没有有效的方法可准确识别上传应用是否具有 恶意行为。通过对当前恶意应用检测领域的分析，本发明提出了可更高效、准确识别应用程 序恶意行为的AMBDS检测系统，该系统解决方案的工作可以划分为以下三个步骤：</p>
<p>步骤1：多层行为监控模块通过修改Android源码、植入网络监控工具实现对Java调用、 本地调用和网络连接的监控，从多个层面捕获应用程序运行时的行为日志。</p>
<p>步骤2：行为分析模块通过函数调用关系和函数参数特征识别应用程序中的恶意行为。 同时，行为分析模块会生成应用行为分析报告，以此帮助用户识别检测结果中误报或漏报的 恶意行为，并修正或扩展恶意行为特征库，进一步提升检测结果的准确性。<br>步骤3：检测系统中的DroidRunner行为触发模型根据对界面调度方式和已知恶意行为触 发条件的分析设计了多组合均衡遍历算法和特殊事件触发库，提升了对应用程序内路径和敏 感函数调用的覆盖率，可更高效的触发恶意行为。</p>
<p>本发明重点在于DroidRunner行为触发模型的实施。该模型由6个组件组成：预处理、 主控、界面分析、界面控制、特殊事件触发和特殊事件触发库。其示意图如附图2所示。</p>
<p>预处理组件实施时，主要是分析APK并获取其基本信息，为其它组件的运行提供基础数 据。界面分析组件实施时，主要是获取当前Activity中显示的所有可操作控件的属性，并生 成控件序列，为界面控制组件提供基础数据。</p>
<p>界面控制组件实施时，主要是模拟用户对应用的操作，这些操作根据多组合均衡遍历算 法调度生成。该算法的核心思想是均衡的对应用中所有的可操作的控件进行遍历操作，在遍 历过程中，根据控件的类型进行不同的组合来模拟人对应用的操作，通过对用户界面内不同 控件的操作可能导致界面间的跳转，附图3展示了一个应用内界面间跳转关系的抽象图。</p>
<p>特殊事件触发实施时，主要是基于对由注册广播接受器和检测运行环境类事件触发执行 应用程序恶意行为的分析，设计了命令行实现、脚本实现和预装实现方式三种方式来实现这 些事件的自动化触发。</p>
<p>方式一：命令行实现方式。在Android系统中提供了功能强大的调试工具Android调试 桥和Dalvik虚拟机调试监控服务(DalvikDebugMonitorService，DDMS)。这些工具可以模 拟对Android虚拟机进行锁屏操作、启动指定服务、向虚拟机发送短信，打电话等特殊事件。</p>
<p>方式二：脚本实现方式。通过录制模拟用户某些特定操作的脚本来实现特殊事件库中的 某些特殊事件。这类脚本包括录制变更联网操作的脚本，录制登陆支付宝、微信等应用的脚 本，录制发短信的脚本等。</p>
<p>方式三：预装实现方式。在测试的Android虚拟机中根据应用的基本信息设置初始环境， 触发应用的恶意行为。这些预设信息可能是一些敏感的短信、通话记录等信息，预装一些社 交类应用、安全类应用、支付类应用等，并对这些应用进行基本操作产生一些使用记录等。</p>
<p>特殊事件触发库实施时，会存储当前已发现恶意应用恶意行为的触发事件及实现方法。 根据应用程序申请的权限信息分析出应用程序对那些特殊事件敏感，同时根据应用程序的组 件构成等内容可分析出应用程序某些功能。基于这些分析提取出特殊事件触发库中的对应特 殊事件，提高检测的精度。</p>
<p>主控组件实施时，主要是负责通过ADB与设备之间进行通讯与控制，并在界面分析组件、 界面控制组件、特殊事件触发组件的支撑下，实现对应用的安装、启动、运行、卸载等自动 化操作。</p>
<p>本发明的测试环境为利用Python脚本语言和Java语言实现了AMBDS恶意行为检测系统， 开发环境是Ubuntu12.0464位操作系统。本发明从行为监控部分的虚拟机性能、行为触发部分 的触发效果及整体检测效果三个方面进行测试。</p>
<p>1)AMBDS检测效果分析</p>
<p>本项测试的目标是检测AMBDS的实际检测效果。通过网络论坛、QQ群和博客等途径收集 到了可用的恶意应用样本35个，同时，在其他同学的帮助下开发了5个恶意样本，共计40 个恶意应用样本。将上述40个恶意样本均利用AMBDS模型进行检测分析，设置每个样本的测 试时间为15分钟。为更好的分析本文提出的系统的检测效果，本文将自编辑样本和网络样本 分开统计，同时检测结果也分为直接识别出的检测结果和根据对行为分析报告分析修正后的 检测结果。40个恶意样本经AMBDS恶意行为检测系统检测后的检测结果统计数据如附图4所 示。</p>
<p>结果分析：自编辑样本的恶意行为检出率高与网络样本的恶意行为检出率，原因可能是 自编辑的恶意样本中对恶意行为隐藏和掩饰的能力较差，同时这类样本是模仿分析过了恶意 样本进行编写，因此恶意行为特征库中存在这类变种样本的特征，从侧面也能表明AMBDS系 统对未知恶意应用具有好的检测效果。AMBDS系统对网络样本的直接检出率较低，其原因是 恶意行为特征库中的恶意行为特征规模相对较小。但是，通过对行为检测报高的分析，恶意 行为检出率有了明显提升。这表明AMBDS系统对恶意应用程序的分析可帮助分析人员发现未 知恶意应用的恶意行为。同时，根据新发现的恶意行为可归纳总结其行为特征扩充恶意行为 特征库，提升对应用程序恶意行为的直接检出率，以此形成良性循环。</p>
<p>2)DroidRunner触发效果分析</p>
<p>本项测试的目标是验证DroidRunner对应用程序实际的触发效果，本次测试设计了A、B 两组测试样本。A组由4个开源应用程序，通过添加了部分敏感API函数调用扩展应用程序 的功能。A组的测试样本分别使用Monkeyrunner和DroidRunner对其进行处罚并对并统计应 用程序执行期间的控件覆盖率、控件的点击次数差额、函数覆盖率、敏感API覆盖率和恶意 行为触发率。B组由20个病毒样本组成，分别使用Monkey、Monkeyrunner和DroidRunner 三种触发方式实现对样本的自动控制，并统计函数覆盖率、恶意行为触发率和敏感函数触发 次数。附图5展示了B组测试中三种触发方式在函数覆盖率、恶意行为触发率参数的统计值。</p>
<p>结果分析：通过对以上两组测试的统计数据分析，DroidRunner基本能覆盖应用程序中所 有的识别出可操作控件，相比传统的行为触发方法，其可覆盖应用程序运行期间绝大部分的 函数调用，对应用程序中的敏感行为触发效果显著。DroidRunner可高效覆盖应用程序大部分 程序路径的能力，达到高效、稳定触发应用程序中可能存在的恶意行为的效果。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.innojoy.com/patent/patent.html?docno=CN201610130822.0&amp;trsdb=fmzl" target="_blank" rel="external">基于组合事件行为触发的Android恶意行为检测系统及其检测方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.innojoy.com/searchresult/download.html?patentName=%E5%9F%BA%E4%BA%8E%E7%BB%84%E5%90%88%E4%BA%8B%E4%BB%B6%E8%A1%8C%E4%B8%BA%E8%A7%A6%E5%8F%91%E7%9A%84Android%E6%81%B6%E6%84%8F%E8%A1%8C%E4%B8%BA%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95[ZH]&amp;amp;db=fmzl&amp;amp;pd=2016.06.08&amp;amp;dn=CN201610130822.0&amp;amp;pp=BOOKS@FM@2016@20160608@201610130822.0&amp;amp;lls=%E5%AE%9E%E5%AE%A1#&quot;&gt;专利全文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://books.daweisoft.com/abstphoto/FM/20160608/201610130822.0/201610130822.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本发明公开了一种基于组合事件行为触发的Android恶意行为检测系统及其检测方法。多层行为监控模块捕获应用程序运行时的&lt;strong&gt;行为日志&lt;/strong&gt;；行为分析模块通过&lt;strong&gt;函数调用关系和函数参数特征&lt;/strong&gt;识别应用程序中的恶意行为，同时，行为分析模块会生成应用行为分析报告；&lt;strong&gt;DroidRunner行为触发模型&lt;/strong&gt;根据对界面调度方式和已知恶意行为触发条件的分析设计了多组合均衡遍历算法和特殊事件触发库，完成对应用程序中恶意行为的动态检测。本发明其可覆盖应用程序运行期间绝大部分的函数调用，对应用程序中的敏感行为触发效果显著。达到高效、稳定触发应用程序中可能存在的恶意行为的效果。&lt;/p&gt;
    
    </summary>
    
      <category term="Patent" scheme="http://ipcreator.me/categories/Patent/"/>
    
    
      <category term="Android" scheme="http://ipcreator.me/tags/Android/"/>
    
      <category term="DroidRunner" scheme="http://ipcreator.me/tags/DroidRunner/"/>
    
  </entry>
  
  <entry>
    <title>Best Practices of Android Performance</title>
    <link href="http://ipcreator.me/2017/03/24/Program/Android/optimization-of-android/"/>
    <id>http://ipcreator.me/2017/03/24/Program/Android/optimization-of-android/</id>
    <published>2017-03-24T14:55:06.000Z</published>
    <updated>2017-03-27T08:02:58.214Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20161124140922633" alt=""><br><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">作者：郭霖</a></p>
<p><a href="http://blog.csdn.net/guolin_blog/article/details/42238627" target="_blank" rel="external">Android最佳性能实践(一)——合理管理内存</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/42238633" target="_blank" rel="external">Android最佳性能实践(二)——分析内存的使用情况</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/42318689" target="_blank" rel="external">Android最佳性能实践(三)——高性能编码优化</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/43376527" target="_blank" rel="external">Android最佳性能实践(四)——布局优化技巧</a><br><a href="https://zhuanlan.zhihu.com/p/20416881?columnSlug=zmywly8866" target="_blank" rel="external">值得推荐的Android应用性能检测工具列表</a></p>
<a id="more"></a>
<h2 id="Android最佳性能实践-一-——合理管理内存"><a href="#Android最佳性能实践-一-——合理管理内存" class="headerlink" title="Android最佳性能实践(一)——合理管理内存"></a>Android最佳性能实践(一)——合理管理内存</h2><p>有不少朋友都问过我，怎样才能写出高性能的应用程序，如何避免程序出现OOM，或者当程序内存占用过高的时候该怎么样去排查。确实，一个优秀的应用程序，不仅仅要功能完成得好，性能问题也应该处理得恰到好处。为此，我也是阅读了不少Android官方给出的高性能编程建议，那么从本篇文章开始，我就准备开始写一个全新系列的博文，来把这些建议进行整理和分析，帮助大家能够写出更加出色的应用程序。</p>
<p>注意本系列文章的内容基本源于Android Doc，如果想要阅读更加详细的关于性能方面的资料，可以直接去阅读Android官方文档。</p>
<p>内存(RAM)对于任何一个软件开发环境都是种非常珍贵的资源，而对于移动操作系统来讲的话，则会显得更加珍贵，因为手机的硬件条件相对于PC毕竟是比较落后的。尽管Android系统的虚拟机拥有自动回收垃圾的机制，但这并不代表我们就可以忽视应该在什么时候分配和释放内存。</p>
<p>为了使垃圾回收器可以正常释放程序所占用的内存，在编写代码的时候就一定要注意尽量避免出现内存泄漏的情况（通常都是由于全局成员变量持有对象引用所导致的），并且在适当的时候去释放对象引用。对于大多数的应用程序而言，后面其它的事情就可以都交给垃圾回收器去完成了，如果一个对象的引用不再被其它对象所持有，那么系统就会将这个对象所分配的内存进行回收。</p>
<p>我们在开发软件的时候应当自始至终都把内存的问题充分考虑进去，这样的话才能开发出更加高性能的软件。而内存问题也并不是无规律可行的，Android系统给我们提出了很多内存优化的建议技巧，只要按照这些技巧来编写程序，就可以让我们的程序在内存性能发面表现得相当不错，下面我们就来一一学习一下这些技巧。</p>
<h3 id="节制地使用Service"><a href="#节制地使用Service" class="headerlink" title="节制地使用Service"></a>节制地使用Service</h3><p>如果应用程序当中需要使用Service来执行后台任务的话，请一定要注意只有当任务正在执行的时候才应该让Service运行起来。另外，当任务执行完之后去停止Service的时候，要小心Service停止失败导致内存泄漏的情况。</p>
<p>当我们启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，这样就会导致这个进程变得非常消耗内存。并且，系统可以在LRU cache当中缓存的进程数量也会减少，导致切换应用程序的时候耗费更多性能。严重的话，甚至有可能会导致崩溃，因为系统在内存非常吃紧的时候可能已无法维护所有正在运行的Service所依赖的进程了。</p>
<p>为了能够控制Service的生命周期，Android官方推荐的最佳解决方案就是使用IntentService，这种Service的最大特点就是当后台任务执行结束后会自动停止，从而极大程度上避免了Service内存泄漏的可能性。关于IntentService更加详细的用法讲解，可以参考《第一行代码——Android》的9.5.2节。</p>
<p>让一个Service在后台一直保持运行，即使它并不执行任何工作，这是编写Android程序时最糟糕的做法之一。所以Android官方极度建议开发人员们不要过于贪婪，让Service在后台一直运行，这不仅可能会导致手机和程序的性能非常低下，而且被用户发现了之后也有可能直接导致我们的软件被卸载（我个人就会这么做）。</p>
<h3 id="当界面不可见时释放内存"><a href="#当界面不可见时释放内存" class="headerlink" title="当界面不可见时释放内存"></a>当界面不可见时释放内存</h3><p>当用户打开了另外一个程序，我们的程序界面已经不再可见的时候，我们应当将所有和界面相关的资源进行释放。在这种场景下释放资源可以让系统缓存后台进程的能力显著增加，因此也会让用户体验变得更好。</p>
<p>那么我们如何才能知道程序界面是不是已经不可见了呢？其实很简单，只需要在Activity中重写onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发了之后就说明用户已经离开了我们的程序，那么此时就可以进行资源释放操作了，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Override  </div><div class="line">public void onTrimMemory(int level) &#123;  </div><div class="line">    super.onTrimMemory(level);  </div><div class="line">    switch (level) &#123;  </div><div class="line">    case TRIM_MEMORY_UI_HIDDEN:  </div><div class="line">        // 进行资源释放操作  </div><div class="line">        break;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意onTrimMemory()方法中的TRIM_MEMORY_UI_HIDDEN回调只有当我们程序中的所有UI组件全部不可见的时候才会触发，这和onStop()方法还是有很大区别的，因为onStop()方法只是当一个Activity完全不可见的时候就会调用，比如说用户打开了我们程序中的另一个Activity。因此，我们可以在onStop()方法中去释放一些Activity相关的资源，比如说取消网络连接或者注销广播接收器等，但是像UI相关的资源应该一直要等到onTrimMemory(TRIM_MEMORY_UI_HIDDEN)这个回调之后才去释放，这样可以保证如果用户只是从我们程序的一个Activity回到了另外一个Activity，界面相关的资源都不需要重新加载，从而提升响应速度。</p>
<h3 id="当内存紧张时释放内存"><a href="#当内存紧张时释放内存" class="headerlink" title="当内存紧张时释放内存"></a>当内存紧张时释放内存</h3><p>除了刚才讲的TRIM_MEMORY_UI_HIDDEN这个回调，onTrimMemory()方法还有很多种其它类型的回调，可以在手机内存降低的时候及时通知我们。我们应该根据回调中传入的级别来去决定如何释放应用程序的资源：<br>TRIM_MEMORY_RUNNING_MODERATE    表示应用程序正常运行，并且不会被杀掉。但是目前手机的内存已经有点低了，系统可能会开始根据LRU缓存规则来去杀死进程了。<br>TRIM_MEMORY_RUNNING_LOW    表示应用程序正常运行，并且不会被杀掉。但是目前手机的内存已经非常低了，我们应该去释放掉一些不必要的资源以提升系统的性能，同时这也会直接影响到我们应用程序的性能。<br>TRIM_MEMORY_RUNNING_CRITICAL    表示应用程序仍然正常运行，但是系统已经根据LRU缓存规则杀掉了大部分缓存的进程了。这个时候我们应当尽可能地去释放任何不必要的资源，不然的话系统可能会继续杀掉所有缓存中的进程，并且开始杀掉一些本来应当保持运行的进程，比如说后台运行的服务。<br>以上是当我们的应用程序正在运行时的回调，那么如果我们的程序目前是被缓存的，则会收到以下几种类型的回调：<br>TRIM_MEMORY_BACKGROUND    表示手机目前内存已经很低了，系统准备开始根据LRU缓存来清理进程。这个时候我们的程序在LRU缓存列表的最近位置，是不太可能被清理掉的，但这时去释放掉一些比较容易恢复的资源能够让手机的内存变得比较充足，从而让我们的程序更长时间地保留在缓存当中，这样当用户返回我们的程序时会感觉非常顺畅，而不是经历了一次重新启动的过程。<br>TRIM_MEMORY_MODERATE    表示手机目前内存已经很低了，并且我们的程序处于LRU缓存列表的中间位置，如果手机内存还得不到进一步释放的话，那么我们的程序就有被系统杀掉的风险了。<br>TRIM_MEMORY_COMPLETE    表示手机目前内存已经很低了，并且我们的程序处于LRU缓存列表的最边缘位置，系统会最优先考虑杀掉我们的应用程序，在这个时候应当尽可能地把一切可以释放的东西都进行释放。</p>
<h3 id="避免在Bitmap上浪费内存"><a href="#避免在Bitmap上浪费内存" class="headerlink" title="避免在Bitmap上浪费内存"></a>避免在Bitmap上浪费内存</h3><p>当我们读取一个Bitmap图片的时候，有一点一定要注意，就是千万不要去加载不需要的分辨率。在一个很小的ImageView上显示一张高分辨率的图片不会带来任何视觉上的好处，但却会占用我们相当多宝贵的内存。需要仅记的一点是，将一张图片解析成一个Bitmap对象时所占用的内存并不是这个图片在硬盘中的大小，可能一张图片只有100k你觉得它并不大，但是读取到内存当中是按照像素点来算的，比如这张图片是1500<em>1000像素，使用的ARGB_8888颜色类型，那么每个像素点就会占用4个字节，总内存就是1500</em>1000*4字节，也就是5.7M，这个数据看起来就比较恐怖了。</p>
<p>至于如何去压缩图片，以及更多在图片方面节省内存的技术，大家可以去参考我之前写的一篇博客 Android高效加载大图、多图解决方案，有效避免程序OOM 。</p>
<h3 id="使用优化过的数据集合"><a href="#使用优化过的数据集合" class="headerlink" title="使用优化过的数据集合"></a>使用优化过的数据集合</h3><p>Android API当中提供了一些优化过后的数据集合工具类，如SparseArray，SparseBooleanArray，以及LongSparseArray等，使用这些API可以让我们的程序更加高效。传统Java API中提供的HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。</p>
<h3 id="知晓内存的开支情况"><a href="#知晓内存的开支情况" class="headerlink" title="知晓内存的开支情况"></a>知晓内存的开支情况</h3><p>我们还应当清楚我们所使用语言的内存开支和消耗情况，并且在整个软件的设计和开发当中都应该将这些信息考虑在内。可能有一些看起来无关痛痒的写法，结果却会导致很大一部分的内存开支，例如：<br>使用枚举通常会比使用静态常量要消耗两倍以上的内存，在Android开发当中我们应当尽可能地不使用枚举。<br>任何一个Java类，包括内部类、匿名类，都要占用大概500字节的内存空间。<br>任何一个类的实例要消耗12-16字节的内存开支，因此频繁创建实例也是会一定程序上影响内存的。<br>在使用HashMap时，即使你只设置了一个基本数据类型的键，比如说int，但是也会按照对象的大小来分配内存，大概是32字节，而不是4字节。因此最好的办法就是像上面所说的一样，使用优化过的数据集合。</p>
<h3 id="谨慎使用抽象编程"><a href="#谨慎使用抽象编程" class="headerlink" title="谨慎使用抽象编程"></a>谨慎使用抽象编程</h3><p>许多程序员都喜欢各种使用抽象来编程，认为这是一种很好的编程习惯。当然，这一点不可否认，因为的抽象的编程方法更加面向对象，而且在代码的维护和可扩展性方面都会有所提高。但是，在Android上使用抽象会带来额外的内存开支，因为抽象的编程方法需要编写额外的代码，虽然这些代码根本执行不到，但是却也要映射到内存当中，不仅占用了更多的内存，在执行效率方面也会有所降低。当然这里我并不是提倡大家完全不使用抽象编程，而是谨慎使用抽象编程，不要认为这是一种很酷的编程方式而去肆意使用它，只在你认为有必要的情况下才去使用。</p>
<h3 id="尽量避免使用依赖注入框架"><a href="#尽量避免使用依赖注入框架" class="headerlink" title="尽量避免使用依赖注入框架"></a>尽量避免使用依赖注入框架</h3><p>现在有很多人都喜欢在Android工程当中使用依赖注入框架，比如说像Guice或者RoboGuice等，因为它们可以简化一些复杂的编码操作，比如可以将下面的一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">class AndroidWay extends Activity &#123;   </div><div class="line">    TextView name;   </div><div class="line">    ImageView thumbnail;   </div><div class="line">    LocationManager loc;   </div><div class="line">    Drawable icon;   </div><div class="line">    String myName;   </div><div class="line"></div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;   </div><div class="line">        super.onCreate(savedInstanceState);   </div><div class="line">        setContentView(R.layout.main);  </div><div class="line">        name      = (TextView) findViewById(R.id.name);   </div><div class="line">        thumbnail = (ImageView) findViewById(R.id.thumbnail);   </div><div class="line">        loc       = (LocationManager) getSystemService(Activity.LOCATION_SERVICE);   </div><div class="line">        icon      = getResources().getDrawable(R.drawable.icon);   </div><div class="line">        myName    = getString(R.string.app_name);   </div><div class="line">        name.setText( &quot;Hello, &quot; + myName );   </div><div class="line">    &#125;   </div><div class="line">&#125;   </div><div class="line">简化成这样的一种写法：</div><div class="line">[java] view plain copy 在CODE上查看代码片派生到我的代码片</div><div class="line">@ContentView(R.layout.main)  </div><div class="line">class RoboWay extends RoboActivity &#123;   </div><div class="line">    @InjectView(R.id.name)             TextView name;   </div><div class="line">    @InjectView(R.id.thumbnail)        ImageView thumbnail;   </div><div class="line">    @InjectResource(R.drawable.icon)   Drawable icon;   </div><div class="line">    @InjectResource(R.string.app_name) String myName;   </div><div class="line">    @Inject                            LocationManager loc;   </div><div class="line"></div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;   </div><div class="line">        super.onCreate(savedInstanceState);   </div><div class="line">        name.setText( &quot;Hello, &quot; + myName );   </div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看上去确实十分诱人，我们甚至可以将findViewById()这一类的繁琐操作全部省去了。但是这些框架为了要搜寻代码中的注解，通常都需要经历较长的初始化过程，并且还可能将一些你用不到的对象也一并加载到内存当中。这些用不到的对象会一直占用着内存空间，可能要过很久之后才会得到释放，相较之下，也许多敲几行看似繁琐的代码才是更好的选择。</p>
<h3 id="使用ProGuard简化代码"><a href="#使用ProGuard简化代码" class="headerlink" title="使用ProGuard简化代码"></a>使用ProGuard简化代码</h3><p>ProGuard相信大家都不会陌生，很多人都会使用这个工具来混淆代码，但是除了混淆之外，它还具有压缩和优化代码的功能。ProGuard会对我们的代码进行检索，删除一些无用的代码，并且会对类、字段、方法等进行重命名，重命名之后的类、字段和方法名都会比原来简短很多，这样的话也就对内存的占用变得更少了。</p>
<h3 id="使用多个进程"><a href="#使用多个进程" class="headerlink" title="使用多个进程"></a>使用多个进程</h3><p>这个技巧其实并不是非常建议使用，但它确实是一种可以帮助我们节省和管理内存的高级技巧。如果你要使用它的话一定要谨慎使用，因为绝大多数的应用程序都不应该在多个进程当中运行的，一旦使用不当，它甚至会增加额外的内存而不是帮我们节省内存。这个技巧比较适用于那些需要在后台去完成一项独立的任务，和前台的功能是可以完全区分开的场景。</p>
<p>这里举一个比较适合去使用多进程技巧的场景，比如说我们正在做一个音乐播放器软件，其中播放音乐的功能应该是一个独立的功能，它不需要和UI方面有任何关系，即使软件已经关闭了也应该可以正常播放音乐。如果此时我们只使用一个进程，那么即使用户关闭了软件，已经完全由Service来控制音乐播放了，系统仍然会将许多UI方面的内存进行保留。在这种场景下就非常适合使用两个进程，一个用于UI展示，另一个则用于在后台持续地播放音乐。</p>
<p>想要实现多进程的功能也非常简单，只需要在AndroidManifest文件的应用程序组件中声明一个android:process属性就可以了，比如说我们希望播放音乐的Service可以运行在一个单独的进程当中，就可以这样写：</p>
<pre><code>&lt;service android:name=&quot;.PlaybackService&quot;  
         android:process=&quot;:background&quot; /&gt;
</code></pre><p>这里指定的进程名是background，你也可以将它改成任意你喜欢的名字。需要注意的是，进程名的前面都应该加上一个冒号，表示该进程是一个当前应用程序的私有进程。</p>
<p>遵循以上的所有编程建议，我们就可以让应用程序内存的使用变得更加合理化。但这只是第一步而已，为了要让程序拥有最佳性能，我们要学习的东西还有很多，下篇文章当中将会介绍如何分析内存的使用情况，感兴趣的朋友请继续阅读 Android最佳性能实践(二)——分析内存的使用情况 。</p>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://blog.csdn.net/guolin_blog/article/details/42238627" target="_blank" rel="external">Android最佳性能实践(一)——合理管理内存</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/42238633" target="_blank" rel="external">Android最佳性能实践(二)——分析内存的使用情况</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/42318689" target="_blank" rel="external">Android最佳性能实践(三)——高性能编码优化</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/43376527" target="_blank" rel="external">Android最佳性能实践(四)——布局优化技巧</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20161124140922633&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog&quot;&gt;作者：郭霖&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/42238627&quot;&gt;Android最佳性能实践(一)——合理管理内存&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/42238633&quot;&gt;Android最佳性能实践(二)——分析内存的使用情况&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/42318689&quot;&gt;Android最佳性能实践(三)——高性能编码优化&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/43376527&quot;&gt;Android最佳性能实践(四)——布局优化技巧&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/20416881?columnSlug=zmywly8866&quot;&gt;值得推荐的Android应用性能检测工具列表&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Best Practice" scheme="http://ipcreator.me/tags/Best-Practice/"/>
    
      <category term="Performance" scheme="http://ipcreator.me/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>Smart MusicPlayer</title>
    <link href="http://ipcreator.me/2017/03/24/Program/Android/MyApp/my-favor-music-player/"/>
    <id>http://ipcreator.me/2017/03/24/Program/Android/MyApp/my-favor-music-player/</id>
    <published>2017-03-24T13:48:06.000Z</published>
    <updated>2017-03-27T09:00:16.912Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_1490356818.png" alt=""></p>
<p>做自己喜欢又擅长的，同时解决生活中的实际痛点，简单极致、有用有趣，It’s my life.</p>
 <a id="more"></a>
<h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h2><p>功能要求：一个窗口，一个列表，喜欢的歌曲，支持循环播放/进度拖动/歌词同步显示/动画/异步网络歌曲、图片及歌词下载；<br>应用场景：徒步、登山、坐享时使用。</p>
<h2 id="设计及实现"><a href="#设计及实现" class="headerlink" title="设计及实现"></a>设计及实现</h2><h3 id="1-0版本"><a href="#1-0版本" class="headerlink" title="1.0版本"></a>1.0版本</h3><p><img src="http://om8nmvpn9.bkt.clouddn.com/music.png" alt=""></p>
<h3 id="2-0版本"><a href="#2-0版本" class="headerlink" title="2.0版本"></a>2.0版本</h3><blockquote>
<p>歌名应景：平和、坚持、创新</p>
</blockquote>
<h4 id="smooth"><a href="#smooth" class="headerlink" title="smooth"></a>smooth</h4><p><img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_1490356818.png" alt=""></p>
<h4 id="baby-one-more-time"><a href="#baby-one-more-time" class="headerlink" title="baby one more time"></a>baby one more time</h4><p><img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_1490356849.png" alt=""></p>
<h4 id="i-want-in-that-way"><a href="#i-want-in-that-way" class="headerlink" title="i want in that way"></a>i want in that way</h4><p><img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_1490356830.png" alt=""></p>
<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>扫描媒体库时，模拟器上文件少未出现异常，但由于真机文件较多，导致主线程阻塞，新增线程执行歌曲扫描。</p>
<h3 id="运行时权限"><a href="#运行时权限" class="headerlink" title="运行时权限"></a>运行时权限</h3><p>采用获取并判断IMEI号是否为空或者全0来判断是否为模拟器环境，需要获取到READ_PHONE_STATE权限，运行时动态申请。</p>
<h3 id="异步下载"><a href="#异步下载" class="headerlink" title="异步下载"></a>异步下载</h3><p>通过服务实现，下载完成后，发广播通知，并通过附加参数传递文件路径。</p>
<h3 id="歌词解析"><a href="#歌词解析" class="headerlink" title="歌词解析"></a>歌词解析</h3><p>歌词文件格式不统一，需要多做兼容性测试，譬如一行有多个时间标签，再如标签中存在异常字符等。<br>另外，解析出来的歌词节点列表，需要基于时间点排序，<br>mediaplayer的进度值单位为毫秒，解析歌词时间时，尽量保持单位一致。</p>
<h3 id="实时更新UI"><a href="#实时更新UI" class="headerlink" title="实时更新UI"></a>实时更新UI</h3><p>方法一：<br>Handle的post方法，在post的Runable的run方法中，使用postDelay方法再次post该Runable对象，在Runable中更新UI，达到实时更新UI的目的<br>方法二：<br>多开一个线程，线程写一个持续循环，每次进入循环内即post一次Runable，然后休眠1000ms，亦可做到实时更新UI</p>
<p>注意：因为用到了多线程，有可能在执行onDestroy方法之后，Runable的run方法还有可能在继续执行，因此要在onDestroy方法释放资源后置空，在run方法中要判空。</p>
<h3 id="歌曲切换"><a href="#歌曲切换" class="headerlink" title="歌曲切换"></a>歌曲切换</h3><p>setDataSource()之前需要调用reSet()方法，才可以重新设置歌曲</p>
<h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><p>歌词文件编码不一致导致，内部需要统一处理</p>
<h3 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h3><p>界面动画不要太多，以免给用户造成眼花缭乱的不好体验</p>
<h3 id="SeekBar"><a href="#SeekBar" class="headerlink" title="SeekBar"></a>SeekBar</h3><p>联动效果，进度/时间/歌词等要同步变动</p>
<h3 id="控制逻辑"><a href="#控制逻辑" class="headerlink" title="控制逻辑"></a>控制逻辑</h3><p>响应点击播放/暂停/停止按钮时，要同步控制动画及各关联控件。</p>
<h3 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h3><p>根据seekbar当前进度来计算提示时间的横坐标偏移量时，((double)curPos/(double)maxPos) * width</p>
<h2 id="mediaplayer状态机"><a href="#mediaplayer状态机" class="headerlink" title="mediaplayer状态机"></a>mediaplayer状态机</h2><h3 id="状态1：Idel-空闲-状态"><a href="#状态1：Idel-空闲-状态" class="headerlink" title="状态1：Idel(空闲)状态"></a>状态1：Idel(空闲)状态</h3><p>当 mediaplayer创建或者执行reset()方法后处于这个状态。</p>
<h3 id="状态2：Initialized-已初始化-状态"><a href="#状态2：Initialized-已初始化-状态" class="headerlink" title="状态2：Initialized(已初始化)状态"></a>状态2：Initialized(已初始化)状态</h3><p>当调用mediaplayer的setDataResource()方法给mediaplayer设置播放的数据源后，mediaplayer会处于该状态。</p>
<h3 id="状态3：Prepared-准备就续-状态"><a href="#状态3：Prepared-准备就续-状态" class="headerlink" title="状态3：Prepared(准备就续)状态"></a>状态3：Prepared(准备就续)状态</h3><p>设置完数据源后，调用mediaplayer的prepare()方法，让mediaplayer准备播放。值得一提的是，这里除了prepare()方法，还有prepareAsnyc()方法，此方法是异步方法，一般用于网络视频的缓冲。当缓冲完毕后，就会触发准备完毕的事件。我们要做的就是监听该事件(OnPreparedListener)，当缓冲完成时，执行相应的操作。在此状态上，我们可以调用seekTo()方法定位视频，此方法不改变mediaplayer的状态；亦可调用stop()放弃视频播放，使mediaplayer处于Stopped状态。一般我们会在此状态上调用start()方法开始播放视频。</p>
<h3 id="状态4：Started-开始-状态"><a href="#状态4：Started-开始-状态" class="headerlink" title="状态4：Started(开始)状态"></a>状态4：Started(开始)状态</h3><p>当处于Prepared状态、Paused状态和PlayebackCompeleted状态时，调用Started()方法即可进入该状态。在该状态中，mediaplayer开始播放视频，可以通过seekTo()方法和start()方法改变视频播放的进度，当Looping为真且播放完毕后，它会重新开始播放（即循环播放）；否则播放完毕后，会触发事件并调用OnCompletionaListener.OnCompletion()方法，进行特定操作，并进入PlaybackCompleted状态。在此状态中，亦可调用pause()方法或者stop()方法让视频暂停或停止，此时mediaplayer分别处于Stopped和Paused状态。</p>
<h3 id="状态5：Stopped-停止-状态"><a href="#状态5：Stopped-停止-状态" class="headerlink" title="状态5：Stopped(停止)状态"></a>状态5：Stopped(停止)状态</h3><p>当 mediaplayer处于Prepared、Started、Paused、PlaybackCompleted状态时，调用stop()方法即可进入本状态。应特别注意的是，在本状态中，若想重新开始播放，不能直接调用start()方法，必须调用prepare()方法或prepareAsync()方法重新让mediaplayer处于Prepared状态方可调用start()方法播放视频。</p>
<h3 id="状态6：Paused-暂停-状态"><a href="#状态6：Paused-暂停-状态" class="headerlink" title="状态6：Paused(暂停)状态"></a>状态6：Paused(暂停)状态</h3><p>当mediaplayer处于Started状态是，调用pause()方法即可进入本状态。在本状态里，可直接调用start()方法使，mediaplayer回到Started状态，亦可调用stop()方法停止视频播放，让播放器处于停止态。</p>
<h3 id="状态7：PlaybackCompleted-播放完成-状态"><a href="#状态7：PlaybackCompleted-播放完成-状态" class="headerlink" title="状态7：PlaybackCompleted(播放完成)状态"></a>状态7：PlaybackCompleted(播放完成)状态</h3><p>当mediaplayer播放完成且Looping为假时即可进入本状态。在本状态可调用start()方法使mediaplayer回到Started状态（注意此时是从头开始播放）；亦可调用stop()方法使mediaplayer处于停止态，结束播放。</p>
<h3 id="状态8：Error-错误-状态"><a href="#状态8：Error-错误-状态" class="headerlink" title="状态8：Error(错误)状态"></a>状态8：Error(错误)状态</h3><p>当mediaplayer出现错误时处于此状态。<br>调用release()方法即可释放此mediaplayer对象。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.runoob.com/w3cnote/android-tutorial-mediaplayer.html" target="_blank" rel="external">MediaPlayer播放音频与视频</a><br><a href="http://blog.csdn.net/huaxun66/article/details/53333747" target="_blank" rel="external">Android MediaPlayer和VideoView的使用</a><br><a href="http://blog.sina.com.cn/s/blog_53ad73d70101c6om.html" target="_blank" rel="external">Android Supported Media Formats（Android支持的媒体格式）</a><br><a href="http://blog.csdn.net/vicken520/article/details/8567640" target="_blank" rel="external">彻底解决android读取中文txt，lrc的乱码（自动判断文档类型并转码)</a><br><a href="http://www.cnblogs.com/wsine/p/5177372.html" target="_blank" rel="external">Android实现简单音乐播放器(MediaPlayer)</a><br><a href="http://blog.csdn.net/wwj_748/article/details/9256251" target="_blank" rel="external">Android应用–简、美音乐播放器原型放送</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/Screenshot_1490356818.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;做自己喜欢又擅长的，同时解决生活中的实际痛点，简单极致、有用有趣，It’s my life.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Application" scheme="http://ipcreator.me/tags/Application/"/>
    
      <category term="Music Player" scheme="http://ipcreator.me/tags/Music-Player/"/>
    
  </entry>
  
  <entry>
    <title>Anatomy of Android Property Animation</title>
    <link href="http://ipcreator.me/2017/03/24/Program/Android/animation-of-android/"/>
    <id>http://ipcreator.me/2017/03/24/Program/Android/animation-of-android/</id>
    <published>2017-03-24T00:46:06.000Z</published>
    <updated>2017-03-27T07:49:47.427Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20150504225554203" alt=""><br><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">作者：郭霖</a></p>
<p>Android系统在一开始的时候就给我们提供了两种实现动画效果的方式，逐帧动画(frame-by-frame animation)和补间动画(tweened animation)。逐帧动画的工作原理很简单，其实就是将一个完整的动画拆分成一张张单独的图片，然后再将它们连贯起来进行播放，类似于动画片的工作原理。补间动画则是可以对View进行一系列的动画操作，包括淡入淡出、缩放、平移、旋转四种。</p>
<p>然而自Android 3.0版本开始，系统给我们提供了一种全新的动画模式，属性动画(property animation)，它的功能非常强大，弥补了之前补间动画的一些缺陷，几乎是可以完全替代掉补间动画了。这篇文章的主题就是对Android属性动画进行一次完全解析。</p>
   <a id="more"></a>
<h2 id="为什么要引入属性动画？"><a href="#为什么要引入属性动画？" class="headerlink" title="为什么要引入属性动画？"></a>为什么要引入属性动画？</h2><p>   Android之前的补间动画机制其实还算是比较健全的，在android.view.animation包下面有好多的类可以供我们操作，来完成一系列的动画效果，比如说对View进行移动、缩放、旋转和淡入淡出，并且我们还可以借助AnimationSet来将这些动画效果组合起来使用，除此之外还可以通过配置Interpolator来控制动画的播放速度等等等等。那么这里大家可能要产生疑问了，既然之前的动画机制已经这么健全了，为什么还要引入属性动画呢？</p>
<p>   其实上面所谓的健全都是相对的，如果你的需求中只需要对View进行移动、缩放、旋转和淡入淡出操作，那么补间动画确实已经足够健全了。但是很显然，这些功能是不足以覆盖所有的场景的，一旦我们的需求超出了移动、缩放、旋转和淡入淡出这四种对View的操作，那么补间动画就不能再帮我们忙了，也就是说它在功能和可扩展方面都有相当大的局限性，那么下面我们就来看看补间动画所不能胜任的场景。</p>
<p>   注意上面我在介绍补间动画的时候都有使用“对View进行操作”这样的描述，没错，<strong>补间动画是只能够作用在View上的。</strong> 也就是说，我们可以对一个Button、TextView、甚至是LinearLayout、或者其它任何继承自View的组件进行动画操作，但是如果我们想要对一个非View的对象进行动画操作，抱歉，补间动画就帮不上忙了。可能有的朋友会感到不能理解，我怎么会需要对一个非View的对象进行动画操作呢？这里我举一个简单的例子，比如说我们有一个自定义的View，在这个View当中有一个Point对象用于管理坐标，然后在onDraw()方法当中就是根据这个Point对象的坐标值来进行绘制的。也就是说，如果我们可以对Point对象进行动画操作，那么整个自定义View的动画效果就有了。显然，补间动画是不具备这个功能的，这是它的第一个缺陷。</p>
<p>   然后补间动画还有一个缺陷，就是它只能够实现移动、缩放、旋转和淡入淡出这四种动画操作，那如果我们希望可以对View的背景色进行动态地改变呢？很遗憾，我们只能靠自己去实现了。说白了，之前的补间动画机制就是使用硬编码的方式来完成的，功能限定死就是这些，基本上没有任何扩展性可言。</p>
<p>   最后，<strong>补间动画还有一个致命的缺陷，就是它只是改变了View的显示效果而已，而不会真正去改变View的属性。</strong> 什么意思呢？比如说，现在屏幕的左上角有一个按钮，然后我们通过补间动画将它移动到了屏幕的右下角，现在你可以去尝试点击一下这个按钮，点击事件是绝对不会触发的，因为实际上这个按钮还是停留在屏幕的左上角，只不过补间动画将这个按钮绘制到了屏幕的右下角而已。</p>
<p>   也正是因为这些原因，Android开发团队决定在3.0版本当中引入属性动画这个功能，那么属性动画是不是就把上述的问题全部解决掉了？下面我们就来一起看一看。</p>
<p>   新引入的属性动画机制已经不再是针对于View来设计的了，也不限定于只能实现移动、缩放、旋转和淡入淡出这几种动画操作，同时也不再只是一种视觉上的动画效果了。它实际上是<strong>一种不断地对值进行操作的机制，并将值赋值到指定对象的指定属性上，可以是任意对象的任意属性。</strong> 所以我们仍然可以将一个View进行移动或者缩放，但同时也可以对自定义View中的Point对象进行动画操作了。我们只需要告诉系统动画的运行时长，需要执行哪种类型的动画，以及动画的初始值和结束值，剩下的工作就可以全部交给系统去完成了。</p>
<p>   既然<strong>属性动画的实现机制是通过对目标对象进行赋值并修改其属性来实现的</strong>，那么之前所说的按钮显示的问题也就不复存在了，如果我们通过属性动画来移动一个按钮，那么这个按钮就是真正的移动了，而不再是仅仅在另外一个位置绘制了而已。</p>
<p>   好了，介绍了这么多，相信大家已经对属性动画有了一个最基本的认识了，下面我们就来开始学习一下属性动画的用法。</p>
<h2 id="ValueAnimator"><a href="#ValueAnimator" class="headerlink" title="ValueAnimator"></a>ValueAnimator</h2><p>ValueAnimator是整个属性动画机制当中最核心的一个类，前面我们已经提到了，属性动画的运行机制是通过不断地对值进行操作来实现的，而初始值和结束值之间的动画过渡就是由ValueAnimator这个类来负责计算的。它的内部使用一种时间循环的机制来计算值与值之间的动画过渡，我们只需要将初始值和结束值提供给ValueAnimator，并且告诉它动画所需运行的时长，那么ValueAnimator就会自动帮我们完成从初始值平滑地过渡到结束值这样的效果。除此之外，ValueAnimator还负责管理动画的播放次数、播放模式、以及对动画设置监听器等，确实是一个非常重要的类。</p>
<p>但是ValueAnimator的用法却一点都不复杂，我们先从最简单的功能看起吧，比如说想要将一个值从0平滑过渡到1，时长300毫秒，就可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ValueAnimator anim = ValueAnimator.ofFloat(0f, 1f);  </div><div class="line">anim.setDuration(300);  </div><div class="line">anim.start();</div></pre></td></tr></table></figure>
<p>怎么样？很简单吧，调用ValueAnimator的ofFloat()方法就可以构建出一个ValueAnimator的实例，ofFloat()方法当中允许传入多个float类型的参数，这里传入0和1就表示将值从0平滑过渡到1，然后调用ValueAnimator的setDuration()方法来设置动画运行的时长，最后调用start()方法启动动画。</p>
<p>用法就是这么简单，现在如果你运行一下上面的代码，动画就会执行了。可是这只是一个将值从0过渡到1的动画，又看不到任何界面效果，我们怎样才能知道这个动画是不是已经真正运行了呢？这就需要借助监听器来实现了，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ValueAnimator anim = ValueAnimator.ofFloat(0f, 1f);  </div><div class="line">anim.setDuration(300);  </div><div class="line">anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;  </div><div class="line">    @Override  </div><div class="line">    public void onAnimationUpdate(ValueAnimator animation) &#123;  </div><div class="line">        float currentValue = (float) animation.getAnimatedValue();  </div><div class="line">        Log.d(&quot;TAG&quot;, &quot;cuurent value is &quot; + currentValue);  </div><div class="line">    &#125;  </div><div class="line">&#125;);  </div><div class="line">anim.start();</div></pre></td></tr></table></figure>
<p>可以看到，这里我们通过addUpdateListener()方法来添加一个动画的监听器，在动画执行的过程中会不断地进行回调，我们只需要在回调方法当中将当前的值取出并打印出来，就可以知道动画有没有真正运行了。运行上述代码，控制台打印如下所示：<br><img src="http://img.blog.csdn.net/20150403174704189?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VvbGluX2Jsb2c=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>从打印日志的值我们就可以看出，ValueAnimator确实已经在正常工作了，值在300毫秒的时间内从0平滑过渡到了1，而这个计算工作就是由ValueAnimator帮助我们完成的。另外ofFloat()方法当中是可以传入任意多个参数的，因此我们还可以构建出更加复杂的动画逻辑，比如说将一个值在5秒内从0过渡到5，再过渡到3，再过渡到10，就可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ValueAnimator anim = ValueAnimator.ofFloat(0f, 5f, 3f, 10f);  </div><div class="line">anim.setDuration(5000);  </div><div class="line">anim.start();</div></pre></td></tr></table></figure>
<p>当然也许你并不需要小数位数的动画过渡，可能你只是希望将一个整数值从0平滑地过渡到100，那么也很简单，只需要调用ValueAnimator的ofInt()方法就可以了，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ValueAnimator anim = ValueAnimator.ofInt(0, 100);</div></pre></td></tr></table></figure>
<p>ValueAnimator当中最常用的应该就是ofFloat()和ofInt()这两个方法了，另外还有一个ofObject()方法，我会在下篇文章进行讲解。</p>
<p>那么除此之外，我们还可以调用setStartDelay()方法来设置动画延迟播放的时间，调用setRepeatCount()和setRepeatMode()方法来设置动画循环播放的次数以及循环播放的模式，循环模式包括RESTART和REVERSE两种，分别表示重新播放和倒序播放的意思。这些方法都很简单，我就不再进行详细讲解了。</p>
<h2 id="ObjectAnimator"><a href="#ObjectAnimator" class="headerlink" title="ObjectAnimator"></a>ObjectAnimator</h2><p>相比于ValueAnimator，ObjectAnimator可能才是我们最常接触到的类，因为ValueAnimator只不过是对值进行了一个平滑的动画过渡，但我们实际使用到这种功能的场景好像并不多。而ObjectAnimator则就不同了，它是可以直接对任意对象的任意属性进行动画操作的，比如说View的alpha属性。</p>
<p>不过虽说ObjectAnimator会更加常用一些，但是它其实是继承自ValueAnimator的，底层的动画实现机制也是基于ValueAnimator来完成的，因此ValueAnimator仍然是整个属性动画当中最核心的一个类。那么既然是继承关系，说明ValueAnimator中可以使用的方法在ObjectAnimator中也是可以正常使用的，它们的用法也非常类似，这里如果我们想要将一个TextView在5秒中内从常规变换成全透明，再从全透明变换成常规，就可以这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator animator = ObjectAnimator.ofFloat(textview, &quot;alpha&quot;, 1f, 0f, 1f);  </div><div class="line">animator.setDuration(5000);  </div><div class="line">animator.start();</div></pre></td></tr></table></figure></p>
<p>可以看到，我们还是调用了ofFloat()方法来去创建一个ObjectAnimator的实例，只不过ofFloat()方法当中接收的参数有点变化了。这里第一个参数要求传入一个object对象，我们想要对哪个对象进行动画操作就传入什么，这里我传入了一个textview。第二个参数是想要对该对象的哪个属性进行动画操作，由于我们想要改变TextView的不透明度，因此这里传入”alpha”。后面的参数就是不固定长度了，想要完成什么样的动画就传入什么值，这里传入的值就表示将TextView从常规变换成全透明，再从全透明变换成常规。之后调用setDuration()方法来设置动画的时长，然后调用start()方法启动动画，效果如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20150406161443130" alt=""></p>
<p>学会了这一个用法之后，其它的用法我们就可以举一反三了，那比如说我们想要将TextView进行一次360度的旋转，就可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator animator = ObjectAnimator.ofFloat(textview, &quot;rotation&quot;, 0f, 360f);  </div><div class="line">animator.setDuration(5000);  </div><div class="line">animator.start();</div></pre></td></tr></table></figure>
<p>可以看到，这里我们将第二个参数改成了”rotation”，然后将动画的初始值和结束值分别设置成0和360，现在运行一下代码，效果如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20150406161421215" alt=""></p>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://blog.csdn.net/guolin_blog/article/details/43536355" target="_blank" rel="external">Android属性动画完全解析(上)，初识属性动画的基本用法</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/43816093" target="_blank" rel="external"> Android属性动画完全解析(中)，ValueAnimator和ObjectAnimator的高级用法</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/44171115" target="_blank" rel="external"> Android属性动画完全解析(下)，Interpolator和ViewPropertyAnimator的用法</a>   </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150504225554203&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog&quot;&gt;作者：郭霖&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android系统在一开始的时候就给我们提供了两种实现动画效果的方式，逐帧动画(frame-by-frame animation)和补间动画(tweened animation)。逐帧动画的工作原理很简单，其实就是将一个完整的动画拆分成一张张单独的图片，然后再将它们连贯起来进行播放，类似于动画片的工作原理。补间动画则是可以对View进行一系列的动画操作，包括淡入淡出、缩放、平移、旋转四种。&lt;/p&gt;
&lt;p&gt;然而自Android 3.0版本开始，系统给我们提供了一种全新的动画模式，属性动画(property animation)，它的功能非常强大，弥补了之前补间动画的一些缺陷，几乎是可以完全替代掉补间动画了。这篇文章的主题就是对Android属性动画进行一次完全解析。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Animation" scheme="http://ipcreator.me/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>Choices of AI Chips</title>
    <link href="http://ipcreator.me/2017/03/23/Program/TensorFlow/ai-chips/"/>
    <id>http://ipcreator.me/2017/03/23/Program/TensorFlow/ai-chips/</id>
    <published>2017-03-23T14:16:06.000Z</published>
    <updated>2017-03-27T10:18:11.069Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://pic4.zhimg.com/v2-ec3385bfcbfabb2bb7d97366e13f6b7f_b.jpg" alt=""></p>
<p>OneSpin Solutions总裁兼首席执行官Raik Brinkmann说， “在人工智能芯片中，你有三个问题需要解决。首先，你需要处理大量的数据。其次，构建用于并行处理的互连。第三是功率，这是你移动数据量的直接结果。所以你亟须从冯诺依曼架构转变到数据流架构。但它究竟是什么样子？”</p>
 <a id="more"></a>
<p> <a href="https://zhuanlan.zhihu.com/p/25728988" target="_blank" rel="external">来源：原文作者Ed Sperling，由半导体行业观察翻译，谢谢。</a></p>
<p>编者按：随着AI市场的升温，我们对于如何构建AI系统也存在困惑。从目前情况看，AI不是一件单一的事，因此没有单一的系统在任何地方都能完美地工作。但AI系统有一些通用要求，如何因应这些需求寻找一个解决方案就成为行业关注的热点。</p>
<p>根据行业的参考标准，AI将是下一件大事，或将在下一件大事中发挥重要作用。这也就解释了过去18个月里人工智能领域活动的疯狂。大公司支付数十亿美元收购创业公司，甚至投入更多的资金用于研发。此外，各国政府正在向大学和研究机构投入数十亿美元。全球竞赛正在进行，目的是创建的最佳的架构和系统来处理AI工作所必需的海量数据。</p>
<p>市场预测也相应上升。 根据Tractica研究所的数据，到2025年，AI年收入预计将达到368亿美元。Tractica表示，迄今为止已经确定了AI的<strong>27种不同的细分行业以及191个使用案例。</strong></p>
<p><img src="http://pic1.zhimg.com/v2-e251f8fa16d4f48d6f25d5441a051b54_b.jpg" alt=""><br>图1 AI收入增长预测。 来源：Tractica</p>
<p>但随着我们深入挖掘，很快就可以明显地看到，并不存在一个的最好的方式来解决AI问题。甚至对于AI是什么，或需要分析的数据类型，我们尚没有一致的定义。</p>
<p>OneSpin Solutions总裁兼首席执行官Raik Brinkmann说， “在人工智能芯片中，你有三个问题需要解决。首先，你需要处理大量的数据。其次，构建用于并行处理的互连。第三是功率，这是你移动数据量的直接结果。所以你亟须从冯诺依曼架构转变到数据流架构。但它究竟是什么样子？”</p>
<p>目前的答案很少，这就是为什么AI市场的第一颗芯片包括现成的CPU，GPU，FPGA和DSP的各种组合。虽然新设计正在由诸如英特尔、谷歌、英伟达、高通，以及IBM等公司开发，但目前还不清楚哪家的方法会胜出。似乎至少需要一个CPU来控制这些系统，但是当流数据并行化时，就会需要各种类型的协处理器。</p>
<p>AI的许多数据处理涉及矩阵乘法和加法。大量并行工作的GPU提供了一种廉价的方法，但缺点是更高的功率。具有内置DSP模块和本地存储器的FPGA更节能，但它们通常更昂贵。这也是软件和硬件真正需要共同开发的领域，但许多软件远远落后于硬件。</p>
<p>Mentor Graphics董事长兼首席执行官Wally Rhines表示：“目前，研究和教育机构有大量的活动。有一场新的处理器开发竞赛。也有标准的GPU用于深度学习，同时还有很多人在从事CPU的工作。目标是使神经网络的行为更像人脑，这将刺激一次全新的设计浪潮。”</p>
<p>当视觉处理开始涉及到AI时，便受到了极大的关注，主要是因为特斯拉在预计推出自动驾驶汽车的15年前就已经提出了自动驾驶概念。这为视觉处理技术，以及为处理由图像传感器、雷达和激光雷达收集的数据所需的芯片和整体系统架构开辟了巨大的市场。但许多经济学家和咨询公司正寻求超越这个市场，探讨AI将如何影响整体生产力。Accenture最近的报道预测，AI将使一些国家的GDP翻番（见下图2）。虽然这将导致就业机会大幅减少，但整体收入的提高不容忽视。</p>
<p><img src="http://pic3.zhimg.com/v2-c7291519f23b431a8a08feaa6ef2dd92_b.jpg" alt=""><br>Fig. 2: AI’s projected impact.图2：AI的预期影响</p>
<p>Synopsys董事长兼联合首席执行官Aart de Geus指出了电子学的三个浪潮——计算和网络、移动、数字智能。在后一种类型中，焦点从技术本身转移到它可以为人们做什么。</p>
<p>“You’ll see processors with neural networking IP for facial recognition and vision processing in automobiles,” said de Geus. “Machine learning is the other side of this. There is a massive push for more capabilities, and the state of the art is doing this faster. This will drive development to 7nm and 5nm and beyond.”</p>
<p>de Geus说：“你将看到具有面部识别和汽车视觉处理的神经网络IP。机器学习是其另一面。它对于更多的能力会产生一种巨大的推动，目前的技术水平可以快速完成这些。这将推动芯片发展到7nm、5nm，甚至更高的水平。”</p>
<h2 id="目前的方法"><a href="#目前的方法" class="headerlink" title="目前的方法"></a>目前的方法</h2><p>自动驾驶中的视觉处理在AI当前研究中占主导地位，但该技术在无人机和机器人中的作用也越来越大。</p>
<p>Achronix公司总裁兼首席执行官Robert Blake说：“对于图像处理的AI应用，计算复杂度很高。对于无线技术，数学很好理解。对于图像处理，数学就像西部拓荒，工作负载复杂多变。大概花费5~10年时间才能解决市场问题，但是它对于可编程逻辑肯定会有很大的作用，因为我们需要能够以高度并行的方式完成的变精度数学。”</p>
<p>FPGA非常适合矩阵乘法。最重要的是，它的可编程性增加了一些必要的灵活性和面向未来的设计，因为在这一点上，不清楚所谓的智能将存在于一个设计的哪部分。用于做决策的数据一些将在本地处理，一些将在数据中心中处理。但在每个实现中，其百分比可能会改变。</p>
<p>这对AI芯片和软件设计有很大的影响。虽然AI的大局并没有太大的变化（大部分所谓的AI更接近于机器学习，而非真正的AI），但是对于如何构建这些系统的理解却发生了重大的变化。</p>
<p>Arteris营销副总裁Kurt Shuler说：“对于自动驾驶汽车，人们正在做的就是把现有的东西放在一起。为了使一个真正高效的嵌入式系统能够学习，它需要一个高效的硬件系统。我们采用了几种不同的方法。如果你关注视觉处理，你要做的是试图弄清楚器件看到的是什么，以及你如何推断。这包括来自视觉传感器、激光雷达和雷达的数据，然后应用专门的算法。这里的很多事情都是试图模仿大脑中的事情，方法是利用深度卷积神经网络。”</p>
<p>它与真正的AI的不同之处是，现有技术水平能够检测和避开物体，而真正的AI能够拥有推理能力，例如如何通过一群人正在横穿的街道，或判断玩皮球的小孩子是否会跑到街道上。对于前者，判断是基于各种传感器的输入，而传感器的输入是基于海量数据处理和预编程的行为。对于后者，机器能够作出价值判断，例如判断转弯避开孩子可能会造成的很多结果，并做出最佳选择。</p>
<p>Shuler说：“传感器融合是20世纪90年代出现的一种理念。你要把它变成机器可以处理的通用的数据格式。如果你在军队里，你担心有人向你开枪。对于自动驾驶汽车而言，这就像面前有人推婴儿车。所有这些系统都需要非常高的带宽，并且都必须在其中内置安全措施。最重要的是，你必须保护数据，因为安全正在成为越来越大的问题。因此，你需要的是计算效率和编程效率。”</p>
<p>这是今天的许多设计中所缺少的，因为太多的开发是由现成的零件搭建的。</p>
<p>Cadence高级架构师以及深度学习小组总监Samer Hijazi说：“如果你优化网络、优化问题、最小化位数，并使用为卷积神经网络定制的硬件，那么你可以实现功率降低2~3倍的改进。效率来自软件算法和硬件IP。”</p>
<p>谷歌正尝试改变这个公式。谷歌开发了Tensor处理单元（TPU），这是专门为机器学习而创建的ASIC。为了加快AI的发展，谷歌在2015年开源了TensorFlow软件。</p>
<p><img src="http://pic3.zhimg.com/v2-7f58696a7e6465999db6e745c45ecb06_b.jpg" alt=""><br>图3：谷歌TPU开发板 来源：谷歌</p>
<p>其他公司拥有自己的平台。但这些都不是最终产品。这是进化的过程，没有人能确定未来十年AI将如何发展。部分是因为AI技术的使用案例正在逐渐被发现。在某个领域里有效的AI技术（如视觉处理）不一定适用于另一个领域（例如确定某种气味是危险的还是安全的，抑或是二者的组合）。</p>
<p>NetSpeed Systems营销和业务开发副总裁Anush Mohandass说：“我们在黑暗中摸索，我们知道如何做机器学习和人工智能，但却不知道它们真正的工作方式。目前的方法是使用大量拥有不同计算能力和不同种类的计算引擎——用于神经网络应用的CPU、DSP，你需要确定它是有效的。但这只是第一代AI。重点是计算能力和异构性。”</p>
<p>然而，随着问题的解决变得更有针对性，这有望改变。就像早期版本的物联网器件一样，没有人知道各类市场如何演变，因此系统公司投入了一切，并使用现有的芯片技术将产品推向市场。在智能手表的案例中，结果是电池充电后只能续航几个小时。随着针对这些特定应用的新芯片的开发，功耗和性能会实现平衡，方法是更有针对性的功能、本地处理与云处理之间更智能的分布、以及对于设计中的瓶颈的更深入的理解这三者的结合。</p>
<p>ARM模型技术总监Bill Neifert说：“我们的挑战是找到未知的瓶颈和限制。但根据于工作负载，处理器与软件的交互方式不同，软件本质上是并行应用程序。因此，如果你正在考虑工作负载，如金融建模或天气图，它们强调基础系统的方式是不同的。你只能通过深入探索来理解。”</p>
<p>Neifert指出，软件方面需要解决的问题需要从更高层次的抽象来看，因为这使得它们更容易约束和修复。这是拼图的一个关键部分。随着AI进军更多市场，所有这些技术都需要发展，以达到一般技术行业，特别是半导体行业的同等效率。</p>
<p>Mohandass说：“现在我们发现，如果他们只处理好一种类型的计算，那么架构就会很困难。但异构性的缺点是，将整体分而治之的方法变得土崩瓦解。因此，该解决方案通常涉及到超量供应或供应不足。”</p>
<h2 id="新方法"><a href="#新方法" class="headerlink" title="新方法"></a>新方法</h2><p>随着AI的应用案例超越了自动驾驶汽车领域，其应用将会扩展。</p>
<p>这就是为什么英特尔去年八月收购了Nervana。Nervana开发了2.5D深度学习芯片，该芯片利用高性能处理器内核，将数据通过中介层移动到高带宽内存。 Nervana声称的目标是，与基于GPU的解决方案相比，该芯片训练深度学习模型的时间将缩短100倍。</p>
<p><img src="http://pic4.zhimg.com/v2-8d75d3ad6c3915ef0d7b6caee3f18fc3_b.jpg" alt=""><br>图4：Nervana的AI芯片 来源：Nervana</p>
<p>eSilicon营销副总裁Mike Gianfagna说：“这些看起来很像高性能计算芯片，本质上是使用硅中介层的2.5D芯片。你将需要大量的吞吐量和超高带宽内存。我们已经看到一些公司在关注它，但尚不足几十家。它还为时尚早，实现机器学习和自适应算法，以及如何将这些与传感器和信息流整合，是非常复杂的。例如自动驾驶汽车，它从多个不同的来源串流数据并添加自适应算法，以避免碰撞。”</p>
<p>Gianfagna表示，实现这些器件有两个挑战。其一是可靠性和认证。其二是安全。</p>
<p>对于AI，可靠性需要在系统级考虑，其中包括硬件和软件。ARM在12月收购Allinea提供了一个参照。另一个参照来自斯坦福大学，研究人员试图量化来自软件的裁剪计算的影响。他们发现，大规模切割或修剪不会对最终产品产生显着影响。加州大学伯克利分校已经开发了一个类似的方法，基于的计算接近100%的准确率。</p>
<p>正在研究节能深度学习的斯坦福大学博士研究生韩松说“与精粒修剪相比，粗粒修剪不会降低精度。”他表示，斯坦福开发的稀疏矩阵要求计算减少10倍，内存占用减少8倍，比DRAM的能耗减少120倍。它应用于斯坦福所谓的高效语音识别引擎，压缩导致了推理过程的加快。（Cadence最近的嵌入式神经网络峰会上提出了这些发现。）</p>
<p>量子计算为AI系统增加了另一个选择。 Leti首席执行官Marie Semeria表示，量子计算是她的团队未来的方向之一，特别是AI应用。IBM Research的科学与解决方案团队副总裁Dario Gil解释说，使用经典计算，如果四张卡片三蓝一红，那么有四分之一的机会猜中那张红色的卡片。使用量子计算机和量子比特的叠加和纠缠，通过扭转纠缠，系统每次都会给出正确答案。</p>
<p><img src="http://pic2.zhimg.com/v2-538919a988822fceb991654f5833a00d_b.jpg" alt=""><br>图5：量子处理器 来源：IBM</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>AI不是一件事，因此没有单一的系统在任何地方都能完美地工作。但AI系统有一些通用要求，如下图所示。</p>
<p><img src="http://pic4.zhimg.com/v2-ec3385bfcbfabb2bb7d97366e13f6b7f_b.jpg" alt=""><br>图6：AI的基础 来源：OneSpin</p>
<p>AI在许多市场都有应用，所有这些都需要广泛的改进、昂贵的工具，以及支持它们的生态系统。经过多年来依靠萎缩器件来提高功率、性能和成本，如今整个市场部门都在重新思考如何进入新市场。这对于架构师来说是一个巨大的胜利，这为设计团队增加了巨大的创造性选择，也将刺激从工具和IP供应商一直到包装和流程开发的巨大发展。这就像为技术行业按下了重启按钮，可以证明，这对于未来整个生态系统的业务都是有益的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://pic4.zhimg.com/v2-ec3385bfcbfabb2bb7d97366e13f6b7f_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;OneSpin Solutions总裁兼首席执行官Raik Brinkmann说， “在人工智能芯片中，你有三个问题需要解决。首先，你需要处理大量的数据。其次，构建用于并行处理的互连。第三是功率，这是你移动数据量的直接结果。所以你亟须从冯诺依曼架构转变到数据流架构。但它究竟是什么样子？”&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Chip" scheme="http://ipcreator.me/tags/Chip/"/>
    
  </entry>
  
  <entry>
    <title>How to Design and Make IC Chips</title>
    <link href="http://ipcreator.me/2017/03/23/Program/Tools/ic-chip/"/>
    <id>http://ipcreator.me/2017/03/23/Program/Tools/ic-chip/</id>
    <published>2017-03-23T13:18:06.000Z</published>
    <updated>2017-03-27T09:50:04.697Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/21358006" target="_blank" rel="external">原文</a></p>
<p><img src="https://pic1.zhimg.com/27ba49ff657a9422bd9e591051032a38_r.png" alt=""></p>
<p>芯片制造的过程就如同用乐高盖房子一样，先有晶圆作为地基，再层层往上叠，然而，没有设计图，拥有再强制造能力都没有用，因此，建筑师的角色相当重要。</p>
 <a id="more"></a>
<h2 id="复杂繁琐的芯片设计流程"><a href="#复杂繁琐的芯片设计流程" class="headerlink" title="复杂繁琐的芯片设计流程"></a>复杂繁琐的芯片设计流程</h2><p> 芯片制造的过程就如同用乐高盖房子一样，先有晶圆作为地基，再层层往上叠的芯片制造流程后，就可产出必要的 IC 芯片（这些会在后面介绍）。然而，没有设计图，拥有再强制造能力都没有用，因此，建筑师的角色相当重要。但是 IC 设计中的建筑师究竟是谁呢？本文接下来要针对 IC 设计做介绍。</p>
<p>　　在 IC 生产流程中，IC 多由专业 IC 设计公司进行规划、设计，像是联发科、高通、Intel 等知名大厂，都自行设计各自的 IC 芯片，提供不同规格、效能的芯片给下游厂商选择。因为 IC 是由各厂自行设计，所以 IC 设计十分仰赖工程师的技术，工程师的素质影响着一间企业的价值。然而，工程师们在设计一颗 IC 芯片时，究竟有那些步骤？设计流程可以简单分成如下。</p>
<p><img src="https://pic1.zhimg.com/27ba49ff657a9422bd9e591051032a38_b.png" alt=""></p>
<h3 id="设计第一步，订定目标"><a href="#设计第一步，订定目标" class="headerlink" title="设计第一步，订定目标"></a>设计第一步，订定目标</h3><p>　　在 IC 设计中，最重要的步骤就是规格制定。这个步骤就像是在设计建筑前，先决定要几间房间、浴室，有什么建筑法规需要遵守，在确定好所有的功能之后在进行设计，这样才不用再花额外的时间进行后续修改。IC 设计也需要经过类似的步骤，才能确保设计出来的芯片不会有任何差错。</p>
<p>　　规格制定的第一步便是确定 IC 的目的、效能为何，对大方向做设定。接着是察看有哪些协定要符合，像无线网卡的芯片就需要符合 IEEE 802.11 等规範，不然，这芯片将无法和市面上的产品相容，使它无法和其他设备连线。最后则是确立这颗 IC 的实作方法，将不同功能分配成不同的单元，并确立不同单元间连结的方法，如此便完成规格的制定。</p>
<p>　　设计完规格后，接着就是设计芯片的细节了。这个步骤就像初步记下建筑的规画，将整体轮廓描绘出来，方便后续制图。在 IC 芯片中，便是使用硬体描述语言（HDL）将电路描写出来。常使用的 HDL 有 Verilog、VHDL 等，藉由程式码便可轻易地将一颗 IC 地功能表达出来。接着就是检查程式功能的正确性并持续修改，直到它满足期望的功能为止。</p>
<p><img src="https://pic4.zhimg.com/a01ea918e628674f3e103afe75ec2ed7_b.png" alt=""><br>▲ 32 bits 加法器的 Verilog 范例。</p>
<h3 id="有了电脑，事情都变得容易"><a href="#有了电脑，事情都变得容易" class="headerlink" title="有了电脑，事情都变得容易"></a>有了电脑，事情都变得容易</h3><p>　　有了完整规画后，接下来便是画出平面的设计蓝图。在 IC 设计中，逻辑合成这个步骤便是将确定无误的 HDL code，放入电子设计自动化工具（EDA tool），让电脑将 HDL code 转换成逻辑电路，产生如下的电路图。之后，反覆的确定此逻辑闸设计图是否符合规格并修改，直到功能正确为止。</p>
<p><img src="https://pic3.zhimg.com/e5cabcc8032e4c2298b12ece7abb4fae_b.png" alt=""><br>▲ 控制单元合成后的结果。</p>
<p>最后，将合成完的程式码再放入另一套 EDA tool，进行电路布局与绕线（Place And Route）。在经过不断的检测后，便会形成如下的电路图。图中可以看到蓝、红、绿、黄等不同颜色，每种不同的颜色就代表着一张光罩。至于光罩究竟要如何运用呢？</p>
<p><img src="https://pic2.zhimg.com/b5c5fe2189411e61f1b57859a1ac1e65_b.png" alt=""><br>▲ 常用的演算芯片- FFT 芯片，完成电路布局与绕线的结果。</p>
<h3 id="层层光罩，叠起一颗芯片"><a href="#层层光罩，叠起一颗芯片" class="headerlink" title="层层光罩，叠起一颗芯片"></a>层层光罩，叠起一颗芯片</h3><p>　　首先，目前已经知道一颗 IC 会产生多张的光罩，这些光罩有上下层的分别，每层有各自的任务。下图为简单的光罩例子，以积体电路中最基本的元件 CMOS 为範例，CMOS 全名为互补式金属氧化物半导体（Complementary metal–oxide–semiconductor），也就是将 NMOS 和 PMOS 两者做结合，形成 CMOS。至于什么是金属氧化物半导体（MOS）？这种在芯片中广泛使用的元件比较难说明，一般读者也较难弄清，在这裡就不多加细究。</p>
<p>　　下图中，左边就是经过电路布局与绕线后形成的电路图，在前面已经知道每种颜色便代表一张光罩。右边则是将每张光罩摊开的样子。制作是，便由底层开始，依循上一篇 IC 芯片的制造中所提的方法，逐层制作，最后便会产生期望的芯片了。<br><img src="https://pic1.zhimg.com/963c07992a294b306e7715a9b1f33c7c_b.png" alt=""></p>
<p>至此，对于 IC 设计应该有初步的了解，整体看来就很清楚 IC 设计是一门非常复杂的专业，也多亏了电脑辅助软体的成熟，让 IC 设计得以加速。IC 设计厂十分依赖工程师的智慧，这裡所述的每个步骤都有其专门的知识，皆可独立成多门专业的课程，像是撰写硬体描述语言就不单纯的只需要熟悉程式语言，还需要了解逻辑电路是如何运作、如何将所需的演算法转换成程式、合成软体是如何将程式转换成逻辑闸等问题。</p>
<p>其中主要半导体设计公司有英特尔、高通、博通、英伟达、美满、赛灵思、Altera、联发科、海思、展讯、中兴微电子、华大、大唐、智芯、敦泰、士兰、中星、格科等。</p>
<h2 id="什么是晶圆？"><a href="#什么是晶圆？" class="headerlink" title="什么是晶圆？"></a>什么是晶圆？</h2><p>在半导体的新闻中，总是会提到以尺寸标示的晶圆厂，如 8 寸或是 12 寸晶圆厂，然而，所谓的晶圆到底是什么东西？其中 8 寸指的是什么部分？要产出大尺寸的晶圆制造又有什么难度呢？以下将逐步介绍半导体最重要的基础——「晶圆」到底是什么。</p>
<p>　晶圆（wafer），是制造各式电脑芯片的基础。我们可以将芯片制造比拟成用乐高积木盖房子，藉由一层又一层的堆叠，完成自己期望的造型（也就是各式芯片）。然而，如果没有良好的地基，盖出来的房子就会歪来歪去，不合自己所意，为了做出完美的房子，便需要一个平稳的基板。对芯片制造来说，这个基板就是接下来将描述的晶圆。</p>
<p><img src="https://pic3.zhimg.com/bd417f2883d69e7d776cf3dbc58fe3aa_b.png" alt=""><br>（Souse：Flickr/Jonathan Stewart CC BY 2.0）</p>
<p>首先，先回想一下小时候在玩乐高积木时，积木的表面都会有一个一个小小圆型的凸出物，藉由这个构造，我们可将两块积木稳固的叠在一起，且不需使用胶水。芯片制造，也是以类似这样的方式，将后续添加的原子和基板固定在一起。因此，我们需要寻找表面整齐的基板，以满足后续制造所需的条件。</p>
<p>在固体材料中，有一种特殊的晶体结构──单晶（Monocrystalline）。它具有原子一个接着一个紧密排列在一起的特性，可以形成一个平整的原子表层。因此，采用单晶做成晶圆，便可以满足以上的需求。然而，该如何产生这样的材料呢，主要有二个步骤，分别为纯化以及拉晶，之后便能完成这样的材料。</p>
<h3 id="如何制造单晶的晶圆"><a href="#如何制造单晶的晶圆" class="headerlink" title="如何制造单晶的晶圆"></a>如何制造单晶的晶圆</h3><p>　　纯化分成两个阶段，第一步是冶金级纯化，此一过程主要是加入碳，以氧化还原的方式，将氧化硅转换成 98% 以上纯度的硅。大部份的金属提炼，像是铁或铜等金属，皆是采用这样的方式获得足够纯度的金属。但是，98% 对于芯片制造来说依旧不够，仍需要进一步提升。因此，将再进一步采用西门子制程（Siemens process）作纯化，如此，将获得半导体制程所需的高纯度多晶硅。</p>
<p><img src="https://pic1.zhimg.com/8cf7088140710b82b8674dc0f76fd47c_b.png" alt=""><br>▲ 硅柱制造流程（Source： Wikipedia）</p>
<p>接着，就是拉晶的步骤。首先，将前面所获得的高纯度多晶硅融化，形成液态的硅。之后，以单晶的硅种（seed）和液体表面接触，一边旋转一边缓慢的向上拉起。至于为何需要单晶的硅种，是因为硅原子排列就和人排队一样，会需要排头让后来的人该如何正确的排列，硅种便是重要的排头，让后来的原子知道该如何排队。最后，待离开液面的硅原子凝固后，排列整齐的单晶硅柱便完成了。</p>
<p><img src="https://pic1.zhimg.com/66788186923f1b6cc3adb60846e8fba8_b.png" alt=""><br>▲ 单晶硅柱（Souse：Wikipedia）</p>
<p>然而，8寸、12寸又代表什么东西呢？他指的是我们产生的晶柱，长得像铅笔笔桿的部分，表面经过处理并切成薄圆片后的直径。至于制造大尺寸晶圆又有什么难度呢？如前面所说，晶柱的制作过程就像是在做棉花糖一样，一边旋转一边成型。有制作过棉花糖的话，应该都知道要做出大而且扎实的棉花糖是相当困难的，而拉晶的过程也是一样，旋转拉起的速度以及温度的控制都会影响到晶柱的品质。也因此，尺寸愈大时，拉晶对速度与温度的要求就更高，因此要做出高品质 12 寸晶圆的难度就比 8 寸晶圆还来得高。</p>
<p>　　只是，一整条的硅柱并无法做成芯片制造的基板，为了产生一片一片的硅晶圆，接着需要以钻石刀将硅晶柱横向切成圆片，圆片再经由抛光便可形成芯片制造所需的硅晶圆。经过这么多步骤，芯片基板的制造便大功告成，下一步便是堆叠房子的步骤，也就是芯片制造。至于该如何制作芯片呢？</p>
<h2 id="层层堆叠打造的芯片"><a href="#层层堆叠打造的芯片" class="headerlink" title="层层堆叠打造的芯片"></a>层层堆叠打造的芯片</h2><p>在介绍过硅晶圆是什么东西后，同时，也知道制造 IC 芯片就像是用乐高积木盖房子一样，藉由一层又一层的堆叠，创造自己所期望的造型。然而，盖房子有相当多的步骤，IC 制造也是一样，制造 IC 究竟有哪些步骤？本文将将就 IC 芯片制造的流程做介绍。</p>
<p>　　在开始前，我们要先认识 IC 芯片是什么。IC，全名积体电路（Integrated Circuit），由它的命名可知它是将设计好的电路，以堆叠的方式组合起来。藉由这个方法，我们可以减少连接电路时所需耗费的面积。下图为 IC 电路的 3D 图，从图中可以看出它的结构就像房子的樑和柱，一层一层堆叠，这也就是为何会将 IC 制造比拟成盖房子。</p>
<p><img src="https://pic1.zhimg.com/acfe24afe2fe1dd8053a6dbae27c2554_b.png" alt=""><br>▲ IC 芯片的 3D 剖面图。（Source：Wikipedia）</p>
<p>从上图中 IC 芯片的 3D 剖面图来看，底部深蓝色的部分就是上一篇介绍的晶圆，从这张图可以更明确的知道，晶圆基板在芯片中扮演的角色是何等重要。至于红色以及土黄色的部分，则是于 IC 制作时要完成的地方。</p>
<p>首先，在这裡可以将红色的部分比拟成高楼中的一楼大厅。一楼大厅，是一栋房子的门户，出入都由这裡，在掌握交通下通常会有较多的机能性。因此，和其他楼层相比，在兴建时会比较复杂，需要较多的步骤。在 IC 电路中，这个大厅就是逻辑闸层，它是整颗 IC 中最重要的部分，藉由将多种逻辑闸组合在一起，完成功能齐全的 IC 芯片。</p>
<p>黄色的部分，则像是一般的楼层。和一楼相比，不会有太复杂的构造，而且每层楼在兴建时也不会有太多变化。这一层的目的，是将红色部分的逻辑闸相连在一起。之所以需要这么多层，是因为有太多线路要连结在一起，在单层无法容纳所有的线路下，就要多叠几层来达成这个目标了。在这之中，不同层的线路会上下相连以满足接线的需求。</p>
<h2 id="分层施工，逐层架构"><a href="#分层施工，逐层架构" class="headerlink" title="分层施工，逐层架构"></a>分层施工，逐层架构</h2><p>知道 IC 的构造后，接下来要介绍该如何制作。试想一下，如果要以油漆喷罐做精细作图时，我们需先割出图形的遮盖板，盖在纸上。接着再将油漆均匀地喷在纸上，待油漆乾后，再将遮板拿开。不断的重复这个步骤后，便可完成整齐且复杂的图形。制造 IC 就是以类似的方式，藉由遮盖的方式一层一层的堆叠起来。</p>
<p><img src="https://pic1.zhimg.com/615e6e2a676756a3c997d907ec999d28_b.png" alt=""></p>
<p>制作 IC 时，可以简单分成以上 4 种步骤。虽然实际制造时，制造的步骤会有差异，使用的材料也有所不同，但是大体上皆采用类似的原理。这个流程和油漆作画有些许不同，IC 制造是先涂料再加做遮盖，油漆作画则是先遮盖再作画。以下将介绍各流程。</p>
<p>　　金属溅镀：将欲使用的金属材料均匀洒在晶圆片上，形成一薄膜。</p>
<p>涂布光阻：先将光阻材料放在晶圆片上，透过光罩（光罩原理留待下次说明），将光束打在不要的部分上，破坏光阻材料结构。接着，再以化学药剂将被破坏的材料洗去。</p>
<p>蚀刻技术：将没有受光阻保护的硅晶圆，以离子束蚀刻。</p>
<p>光阻去除：使用去光阻液皆剩下的光阻溶解掉，如此便完成一次流程。</p>
<p>　　最后便会在一整片晶圆上完成很多 IC 芯片，接下来只要将完成的方形 IC 芯片剪下，便可送到封装厂做封装，至于封装厂是什么东西？就要待之后再做说明啰。</p>
<p><img src="https://pic4.zhimg.com/07e51099abd218a8cbad352c8df49ef3_b.png" alt=""><br>▲ 各种尺寸晶圆的比较。（Source：Wikipedia）</p>
<p>其中，主要晶圆代工厂有格罗方德、三星电子、Tower Jazz、Dongbu、美格纳、IBM、富士通、英特尔、海力士、台积电、联电、中芯国际、力晶、华虹、德茂、武汉新芯、华微、华立、力芯</p>
<h2 id="纳米制程是什么？"><a href="#纳米制程是什么？" class="headerlink" title="纳米制程是什么？"></a>纳米制程是什么？</h2><p>三星以及台积电在先进半导体制程打得相当火热，彼此都想要在晶圆代工中抢得先机以争取订单，几乎成了 14 纳米与 16 纳米之争，然而 14 纳米与 16 纳米这两个数字的究竟意义为何，指的又是哪个部位？而在缩小制程后又将来带来什么好处与难题？以下我们将就纳米制程做简单的说明。</p>
<p>纳米到底有多细微？</p>
<p>　在开始之前，要先了解纳米究竟是什么意思。在数学上，纳米是 0.000000001 公尺，但这是个相当差的例子，毕竟我们只看得到小数点后有很多个零，却没有实际的感觉。如果以指甲厚度做比较的话，或许会比较明显。</p>
<p>　　用尺规实际测量的话可以得知指甲的厚度约为 0.0001 公尺（0.1 毫米），也就是说试着把一片指甲的侧面切成 10 万条线，每条线就约等同于 1 纳米，由此可略为想像得到 1 纳米是何等的微小了。</p>
<p>　　知道纳米有多小之后，还要理解缩小制程的用意，缩小电晶体的最主要目的，就是可以在更小的芯片中塞入更多的电晶体，让芯片不会因技术提升而变得更大；其次，可以增加处理器的运算效率；再者，减少体积也可以降低耗电量；最后，芯片体积缩小后，更容易塞入行动装置中，满足未来轻薄化的需求。</p>
<p>　　再回来探究纳米制程是什么，以 14 纳米为例，其制程是指在芯片中，线最小可以做到 14 纳米的尺寸，下图为传统电晶体的长相，以此作为例子。缩小电晶体的最主要目的就是为了要减少耗电量，然而要缩小哪个部分才能达到这个目的？左下图中的 L 就是我们期望缩小的部分。藉由缩小闸极长度，电流可以用更短的路径从 Drain 端到 Source 端（有兴趣的话可以利用 Google 以 MOSFET 搜寻，会有更详细的解释）。　</p>
<p><img src="https://pic4.zhimg.com/7def8b14a4086e89040df9e277ee8dd7_b.png" alt=""><br>（Source：<a href="http://www.slideshare.net）" target="_blank" rel="external">http://www.slideshare.net）</a></p>
<p>此外，电脑是以 0 和 1 作运算，要如何以电晶体满足这个目的呢？做法就是判断电晶体是否有电流流通。当在 Gate 端（绿色的方块）做电压供给，电流就会从 Drain 端到 Source 端，如果没有供给电压，电流就不会流动，这样就可以表示 1 和 0。（至于为什么要用 0 和 1 作判断，有兴趣的话可以去查布林代数，我们是使用这个方法作成电脑的）</p>
<h3 id="尺寸缩小有其物理限制"><a href="#尺寸缩小有其物理限制" class="headerlink" title="尺寸缩小有其物理限制"></a>尺寸缩小有其物理限制</h3><p>不过，制程并不能无限制的缩小，当我们将电晶体缩小到 20 纳米左右时，就会遇到量子物理中的问题，让电晶体有漏电的现象，抵销缩小 L 时获得的效益。作为改善方式，就是导入 FinFET（Tri-Gate）这个概念，如右上图。在 Intel 以前所做的解释中，可以知道藉由导入这个技术，能减少因物理现象所导致的漏电现象。<br><img src="https://pic1.zhimg.com/d27dbbf0e08af1bac6888e76219dc3cc_b.png" alt=""><br>（Source：<a href="http://www.slideshare.net）" target="_blank" rel="external">http://www.slideshare.net）</a></p>
<p>更重要的是，藉由这个方法可以增加 Gate 端和下层的接触面积。在传统的做法中（左上图），接触面只有一个平面，但是采用 FinFET（Tri-Gate）这个技术后，接触面将变成立体，可以轻易的增加接触面积，这样就可以在保持一样的接触面积下让 Source-Drain 端变得更小，对缩小尺寸有相当大的帮助。</p>
<p>　　最后，则是为什么会有人说各大厂进入 10 纳米制程将面临相当严峻的挑战，主因是 1 颗原子的大小大约为 0.1 纳米，在 10 纳米的情况下，一条线只有不到 100 颗原子，在制作上相当困难，而且只要有一个原子的缺陷，像是在制作过程中有原子掉出或是有杂质，就会产生不知名的现象，影响产品的良率。</p>
<p>　　如果无法想像这个难度，可以做个小实验。在桌上用 100 个小珠子排成一个 10×10 的正方形，并且剪裁一张纸盖在珠子上，接着用小刷子把旁边的的珠子刷掉，最后使他形成一个 10×5 的长方形。这样就可以知道各大厂所面临到的困境，以及达成这个目标究竟是多么艰巨。</p>
<p>　　随着三星以及台积电在近期将完成 14 纳米、16 纳米 FinFET 的量产，两者都想争夺 Apple 下一代的 iPhone 芯片代工，我们将看到相当精彩的商业竞争，同时也将获得更加省电、轻薄的手机，要感谢摩尔定律所带来的好处呢。</p>
<h2 id="告诉你什么是封装"><a href="#告诉你什么是封装" class="headerlink" title="告诉你什么是封装"></a>告诉你什么是封装</h2><p>经过漫长的流程，从设计到制造，终于获得一颗 IC 芯片了。然而一颗芯片相当小且薄，如果不在外施加保护，会被轻易的刮伤损坏。此外，因为芯片的尺寸微小，如果不用一个较大尺寸的外壳，将不易以人工安置在电路板上。因此，本文接下来要针对封装加以描述介绍。</p>
<p>目前常见的封装有两种，一种是电动玩具内常见的，黑色长得像蜈蚣的 DIP 封装，另一为购买盒装 CPU 时常见的 BGA 封装。至于其他的封装法，还有早期 CPU 使用的 PGA（Pin Grid Array；Pin Grid Array）或是 DIP 的改良版 QFP（塑料方形扁平封装）等。因为有太多种封装法，以下将对 DIP 以及 BGA 封装做介绍。</p>
<h3 id="传统封装，历久不衰"><a href="#传统封装，历久不衰" class="headerlink" title="传统封装，历久不衰"></a>传统封装，历久不衰</h3><p>首先要介绍的是双排直立式封装（Dual Inline Package；DIP），从下图可以看到采用此封装的 IC 芯片在双排接脚下，看起来会像条黑色蜈蚣，让人印象深刻，此封装法为最早采用的 IC 封装技术，具有成本低廉的优势，适合小型且不需接太多线的芯片。但是，因为大多采用的是塑料，散热效果较差，无法满足现行高速芯片的要求。因此，使用此封装的，大多是历久不衰的芯片，如下图中的 OP741，或是对运作速度没那么要求且芯片较小、接孔较少的 IC 芯片。</p>
<p><img src="https://pic3.zhimg.com/7270e07ec8255a2b7f06bee6b725e4b2_b.png" alt=""><br>▲ 左图的 IC 芯片为 OP741，是常见的电压放大器。右图为它的剖面图，这个封装是以金线将芯片接到金属接脚（Leadframe）。（Source ：左图 Wikipedia、右图 Wikipedia）</p>
<p>至于球格阵列（Ball Grid Array，BGA）封装，和 DIP 相比封装体积较小，可轻易的放入体积较小的装置中。此外，因为接脚位在芯片下方，和 DIP 相比，可容纳更多的金属接脚</p>
<p>　　相当适合需要较多接点的芯片。然而，采用这种封装法成本较高且连接的方法较复杂，因此大多用在高单价的产品上。　　</p>
<p><img src="https://pic2.zhimg.com/bbd08e9e2daa1a1dd136a03397cfea59_b.png" alt=""><br>▲ 左图为采用 BGA 封装的芯片。右图为使用覆晶封装的 BGA 示意图。（Source： 左图 Wikipedia）</p>
<h2 id="行动装置兴起，新技术跃上舞台"><a href="#行动装置兴起，新技术跃上舞台" class="headerlink" title="行动装置兴起，新技术跃上舞台"></a>行动装置兴起，新技术跃上舞台</h2><p>然而，使用以上这些封装法，会耗费掉相当大的体积。像现在的行动装置、穿戴装置等，需要相当多种元件，如果各个元件都独立封装，组合起来将耗费非常大的空间，因此目前有两种方法，可满足缩小体积的要求，分别为 SoC（System On Chip）以及 SiP（System In Packet）。</p>
<p>在智慧型手机刚兴起时，在各大财经杂誌上皆可发现 SoC 这个名词，然而 SoC 究竟是什么东西？简单来说，就是将原本不同功能的 IC，整合在一颗芯片中。藉由这个方法，不单可以缩小体积，还可以缩小不同 IC 间的距离，提升芯片的计算速度。至于制作方法，便是在 IC 设计阶段时，将各个不同的 IC 放在一起，再透过先前介绍的设计流程，制作成一张光罩。</p>
<p>　　然而，SoC 并非只有优点，要设计一颗 SoC 需要相当多的技术配合。IC 芯片各自封装时，各有封装外部保护，且 IC 与 IC 间的距离较远，比较不会发生交互干扰的情形。但是，当将所有 IC 都包装在一起时，就是噩梦的开始。IC 设计厂要从原先的单纯设计 IC，变成了解并整合各个功能的 IC，增加工程师的工作量。此外，也会遇到很多的状况，像是通讯芯片的高频讯号可能会影响其他功能的 IC 等情形。</p>
<p>　　此外，SoC 还需要获得其他厂商的 IP（intellectual property）授权，才能将别人设计好的元件放到 SoC 中。因为制作 SoC 需要获得整颗 IC 的设计细节，才能做成完整的光罩，这同时也增加了 SoC 的设计成本。或许会有人质疑何不自己设计一颗就好了呢？因为设计各种 IC 需要大量和该 IC 相关的知识，只有像 Apple 这样多金的企业，才有预算能从各知名企业挖角顶尖工程师，以设计一颗全新的 IC，透过合作授权还是比自行研发划算多了。</p>
<h3 id="折衷方案，SiP-现身"><a href="#折衷方案，SiP-现身" class="headerlink" title="折衷方案，SiP 现身"></a>折衷方案，SiP 现身</h3><p>作为替代方案，SiP 跃上整合芯片的舞台。和 SoC 不同，它是购买各家的 IC，在最后一次封装这些 IC，如此便少了 IP 授权这一步，大幅减少设计成本。此外，因为它们是各自独立的 IC，彼此的干扰程度大幅下降。</p>
<p><img src="https://pic3.zhimg.com/2eabc40282b00d9a81abb20ea595e5a2_b.png" alt=""><br>▲ Apple Watch 采用 SiP 技术将整个电脑架构封装成一颗芯片，不单满足期望的效能还缩小体积，让手錶有更多的空间放电池。（Source：Apple 官网）</p>
<p>采用 SiP 技术的产品，最着名的非 Apple Watch 莫属。因为 Watch 的内部空间太小，它无法采用传统的技术，SoC 的设计成本又太高，SiP 成了首要之选。藉由 SiP 技术，不单可缩小体积，还可拉近各个 IC 间的距离，成为可行的折衷方案。下图便是 Apple Watch 芯片的结构图，可以看到相当多的 IC 包含在其中。</p>
<p><img src="https://pic2.zhimg.com/ad55e82cbc4cb94639281b3cd2c6f79d_b.png" alt=""><br>▲ Apple Watch 中采用 SiP 封装的 S1 芯片内部配置图。（Source：chipworks）</p>
<p>完成封装后，便要进入测试的阶段，在这个阶段便要确认封装完的 IC 是否有正常的运作，正确无误之后便可出货给组装厂，做成我们所见的电子产品。其中主要的半导体封装与测试企业有安靠、星科金朋、J-devices、Unisem、Nepes、日月光、力成、南茂、颀邦、京元电子、福懋、菱生精密、矽品、长电、优特</p>
<p>至此，半导体产业便完成了整个生产的任务。</p>
<p>来源：TechNews</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21358006&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/27ba49ff657a9422bd9e591051032a38_r.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;芯片制造的过程就如同用乐高盖房子一样，先有晶圆作为地基，再层层往上叠，然而，没有设计图，拥有再强制造能力都没有用，因此，建筑师的角色相当重要。&lt;/p&gt;
    
    </summary>
    
      <category term="Program" scheme="http://ipcreator.me/categories/Program/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="IC" scheme="http://ipcreator.me/tags/IC/"/>
    
  </entry>
  
  <entry>
    <title>Java Design Pattern</title>
    <link href="http://ipcreator.me/2017/03/23/Program/Java/design-pattern/"/>
    <id>http://ipcreator.me/2017/03/23/Program/Java/design-pattern/</id>
    <published>2017-03-23T11:35:06.000Z</published>
    <updated>2017-03-28T01:20:44.645Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">作者：郭霖</a></p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1489338402459&amp;di=f354d44523b4c5d751414e4970189a88&amp;imgtype=0&amp;src=http%3A%2F%2Fsishuok.com%2Fforum%2Fupload%2F2012%2F8%2F21%2Fd9c285859566d753d86f1a44bc9f9a05__2.JPG" alt=""></p>
<p>单例：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br>组合：将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>
<p>策略：它定义了算法家庭，分别封装起来。让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。</p>
<p>模板方法： 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
<p>适配器：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
 <a id="more"></a>
<p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=4232751296,330377077&amp;fm=23&amp;gp=0.jpg" alt=""></p>
<p>在sLogUtil还没被初始化的时候才会进入到第3行，然后加上同步锁。等sLogUtil一但初始化完成了，就再也走不到第3行了，这样执行getInstance方法也不会再受到同步锁的影响，效率上会有一定的提升。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public static LogUtil getInstance() &#123;  </div><div class="line">    if (sLogUtil == null) &#123;  </div><div class="line">        synchronized (LogUtil.class) &#123;  </div><div class="line">            if (sLogUtil == null) &#123;  </div><div class="line">                sLogUtil = new LogUtil();  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    return sLogUtil;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>A. 无论synchronized关键字加在方法上还是对象上，如果它作用的对象是非静态的，则它取得的锁是对象；如果synchronized作用的对象是一个静态方法或一个类，则它取得的锁是对类，该类所有的对象同一把锁。<br>B. 每个对象只有一个锁（lock）与之相关联，谁拿到这个锁谁就可以运行它所控制的那段代码。<br>C. 实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。</p>
<p>在AllStatistics的构造函数中将小说类书籍和科技类书籍作为子分类添加到了statistics列表当中，然后使用同样的方法在getBrowseCount和getSalesCount方法中统计出所有书籍的浏览量和销售量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public interface Statistics &#123;  </div><div class="line"></div><div class="line">    int getBrowseCount();  </div><div class="line"></div><div class="line">    int getSalesCount();  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class AllStatistics implements Statistics &#123;  </div><div class="line"></div><div class="line">    private List&lt;Statistics&gt; statistics = new ArrayList&lt;Statistics&gt;();  </div><div class="line"></div><div class="line">    public AllStatistics() &#123;  </div><div class="line">        statistics.add(new NovelStatistics());  </div><div class="line">        statistics.add(new TechnicalStatistics());  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public int getBrowseCount() &#123;  </div><div class="line">        int browseCount = 0;  </div><div class="line">        for (Statistics s : statistics) &#123;  </div><div class="line">            browseCount += s.getBrowseCount();  </div><div class="line">        &#125;  </div><div class="line">        return browseCount;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public int getSalesCount() &#123;  </div><div class="line">        int saleCount = 0;  </div><div class="line">        for (Statistics s : statistics) &#123;  </div><div class="line">            saleCount += s.getBrowseCount();  </div><div class="line">        &#125;  </div><div class="line">        return saleCount;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">public interface Strategy &#123;  </div><div class="line"></div><div class="line">    String getSQL(String[] usernames);  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class Strategy1 implements Strategy &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public String getSQL(String[] usernames) &#123;  </div><div class="line">        StringBuilder sql = new StringBuilder(&quot;select * from user_info where &quot;);  </div><div class="line">        for (String user : usernames) &#123;  </div><div class="line">            sql.append(&quot;username = &apos;&quot;);  </div><div class="line">            sql.append(user);  </div><div class="line">            sql.append(&quot;&apos; or &quot;);  </div><div class="line">        &#125;  </div><div class="line">        sql.delete(sql.length() - &quot; or &quot;.length(), sql.length());  </div><div class="line">        return sql.toString();  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line"></div><div class="line">public class Strategy2 implements Strategy &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public String getSQL(String[] usernames) &#123;  </div><div class="line">        StringBuilder sql = new StringBuilder(&quot;select * from user_info where &quot;);  </div><div class="line">        boolean needOr = false;  </div><div class="line">        for (String user : usernames) &#123;  </div><div class="line">            if (needOr) &#123;  </div><div class="line">                sql.append(&quot; or &quot;);  </div><div class="line">            &#125;  </div><div class="line">            sql.append(&quot;username = &apos;&quot;);  </div><div class="line">            sql.append(user);  </div><div class="line">            sql.append(&quot;&apos;&quot;);  </div><div class="line">            needOr = true;  </div><div class="line">        &#125;  </div><div class="line">        return sql.toString();  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class QueryUtil &#123;  </div><div class="line"></div><div class="line">    public void findUserInfo(String[] usernames, Strategy strategy) throws Exception &#123;  </div><div class="line">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);  </div><div class="line">        Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;,  </div><div class="line">                &quot;123456&quot;);  </div><div class="line">        Statement stat = conn.createStatement();  </div><div class="line">        String sql = strategy.getSQL(usernames);  </div><div class="line">        System.out.println(sql);  </div><div class="line">        ResultSet resultSet = stat.executeQuery(sql);  </div><div class="line">        while (resultSet.next()) &#123;  </div><div class="line">            // 处理从数据库读出来的数据  </div><div class="line">        &#125;  </div><div class="line">        // 后面应将读到的数据组装成对象返回，这里略去。  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class Test &#123;  </div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;  </div><div class="line">        QueryUtil query = new QueryUtil();  </div><div class="line">        query.findUserInfo(new String[] &#123; &quot;Tom&quot;, &quot;Jim&quot;, &quot;Anna&quot; &#125;, new Strategy1());  </div><div class="line">        query.findUserInfo(new String[] &#123; &quot;Jac&quot;, &quot;Joe&quot;, &quot;Rose&quot; &#125;, new Strategy2());  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">public abstract class Formatter &#123;  </div><div class="line"></div><div class="line">    public String formatBook(Book book, int format) &#123;  </div><div class="line">        beforeFormat();  </div><div class="line">        String result = formating(book);  </div><div class="line">        afterFormat();  </div><div class="line">        return result;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    protected void beforeFormat() &#123;  </div><div class="line">        System.out.println(&quot;format begins&quot;);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    protected abstract String formating(Book book);  </div><div class="line"></div><div class="line">    protected void afterFormat() &#123;  </div><div class="line">        System.out.println(&quot;format finished&quot;);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class XMLFormatter extends Formatter &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    protected String formating(Book book) &#123;  </div><div class="line">        String result = &quot;&quot;;  </div><div class="line">        result += &quot;&lt;book_name&gt;&quot; + book.getBookName() + &quot;&lt;/book_name&gt;\n&quot;;  </div><div class="line">        result += &quot;&lt;pages&gt;&quot; + book.getPages() + &quot;&lt;/pages&gt;\n&quot;;  </div><div class="line">        result += &quot;&lt;price&gt;&quot; + book.getPrice() + &quot;&lt;/price&gt;\n&quot;;  </div><div class="line">        result += &quot;&lt;author&gt;&quot; + book.getAuthor() + &quot;&lt;/author&gt;\n&quot;;  </div><div class="line">        result += &quot;&lt;isbn&gt;&quot; + book.getIsbn() + &quot;&lt;/isbn&gt;\n&quot;;  </div><div class="line">        return result;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class JSONFormatter extends Formatter &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    protected String formating(Book book) &#123;  </div><div class="line">        String result = &quot;&quot;;  </div><div class="line">        result += &quot;&#123;\n&quot;;  </div><div class="line">        result += &quot;\&quot;book_name\&quot; : \&quot;&quot; + book.getBookName() + &quot;\&quot;,\n&quot;;  </div><div class="line">        result += &quot;\&quot;pages\&quot; : \&quot;&quot; + book.getPages() + &quot;\&quot;,\n&quot;;  </div><div class="line">        result += &quot;\&quot;price\&quot; : \&quot;&quot; + book.getPrice() + &quot;\&quot;,\n&quot;;  </div><div class="line">        result += &quot;\&quot;author\&quot; : \&quot;&quot; + book.getAuthor() + &quot;\&quot;,\n&quot;;  </div><div class="line">        result += &quot;\&quot;isbn\&quot; : \&quot;&quot; + book.getIsbn() + &quot;\&quot;,\n&quot;;  </div><div class="line">        result += &quot;&#125;&quot;;  </div><div class="line">        return result;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class YAMLFormatter extends Formatter &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    protected String formating(Book book) &#123;  </div><div class="line">        String result = &quot;&quot;;  </div><div class="line">        result += &quot;book_name: &quot; + book.getBookName() + &quot;\n&quot;;  </div><div class="line">        result += &quot;pages: &quot; + book.getPages() + &quot;\n&quot;;  </div><div class="line">        result += &quot;price: &quot; + book.getPrice() + &quot;\n&quot;;  </div><div class="line">        result += &quot;author: &quot; + book.getAuthor() + &quot;\n&quot;;  </div><div class="line">        result += &quot;isbn: &quot; + book.getIsbn() + &quot;\n&quot;;  </div><div class="line">        return result;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class Test &#123;  </div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;  </div><div class="line">        Book book = new Book();  </div><div class="line">        book.setBookName(&quot;Thinking in Java&quot;);  </div><div class="line">        book.setPages(880);  </div><div class="line">        book.setPrice(68);  </div><div class="line">        book.setAuthor(&quot;Bruce Eckel&quot;);  </div><div class="line">        book.setIsbn(&quot;9787111213826&quot;);  </div><div class="line">        XMLFormatter xmlFormatter = new XMLFormatter();  </div><div class="line">        String result = xmlFormatter.formatBook(book);  </div><div class="line">        System.out.println(result);  </div><div class="line"></div><div class="line">        JSONFormatter jsonFormatter = new JSONFormatter();  </div><div class="line">        result = jsonFormatter.formatBook(book);  </div><div class="line">        System.out.println(result);  </div><div class="line"></div><div class="line">        YAMLFormatter yamlFormatter = new YAMLFormatter();  </div><div class="line">String result = yamlFormatter.formatBook(book);  </div><div class="line">System.out.println(result);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">public interface PlayerCount &#123;  </div><div class="line"></div><div class="line">    String getServerName();  </div><div class="line"></div><div class="line">    int getPlayerCount();  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class ServerOne implements PlayerCount &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public String getServerName() &#123;  </div><div class="line">        return &quot;一服&quot;;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public int getPlayerCount() &#123;  </div><div class="line">        return Utility.getOnlinePlayerCount(1);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class ServerTwo implements PlayerCount &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public String getServerName() &#123;  </div><div class="line">        return &quot;二服&quot;;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public int getPlayerCount() &#123;  </div><div class="line">        return Utility.getOnlinePlayerCount(2);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class ServerThree implements PlayerCount &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public String getServerName() &#123;  </div><div class="line">        return &quot;三服&quot;;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public int getPlayerCount() &#123;  </div><div class="line">        return Utility.getOnlinePlayerCount(3);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public class XMLBuilder &#123;  </div><div class="line"></div><div class="line">    public static String buildXML(PlayerCount player) &#123;  </div><div class="line">        StringBuilder builder = new StringBuilder();  </div><div class="line">        builder.append(&quot;&lt;root&gt;&quot;);  </div><div class="line">        builder.append(&quot;&lt;server&gt;&quot;).append(player.getServerName()).append(&quot;&lt;/server&gt;&quot;);  </div><div class="line">        builder.append(&quot;&lt;player_count&quot;).append(player.getPlayerCount()).append(&quot;&lt;/player_count&gt;&quot;);  </div><div class="line">        builder.append(&quot;&lt;/root&gt;&quot;);  </div><div class="line">        return builder.toString();  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">XMLBuilder.buildXML(new ServerOne());  </div><div class="line">XMLBuilder.buildXML(new ServerTwo());</div><div class="line">XMLBuilder.buildXML(new ServerThree());</div></pre></td></tr></table></figure>
<p>查询在线玩家数量的功能早就有了，使用的是ServerFirst这个类。当时写Utility.getOnlinePlayerCount()这个方法主要是为了针对新开的二服和三服，就没把一服的查询功能再重复做一遍。<br>Utility和ServerFirst这两个类都已经被打到Jar包里了，没法修改啊</p>
<p>XMLBuilder中使用PlayerCount这个接口来拼装XML，而ServerFirst并没有实现PlayerCount这个接口，这个时候就需要一个适配器类来为XMLBuilder和ServerFirst之间搭起一座桥梁，毫无疑问，ServerOne就将充当适配器类的角色。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class ServerOne implements PlayerCount &#123;  </div><div class="line"></div><div class="line">    private ServerFirst mServerFirst;  </div><div class="line"></div><div class="line">    public ServerOne() &#123;  </div><div class="line">        mServerFirst = new ServerFirst();  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public String getServerName() &#123;  </div><div class="line">        return &quot;一服&quot;;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public int getPlayerCount() &#123;  </div><div class="line">        return mServerFirst.getOnlinePlayerCount();  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>需要值得注意的一点是，适配器模式不并是那种会让架构变得更合理的模式，更多的时候它只是充当救火队员的角色，帮助解决由于前期架构设计不合理导致的接口不匹配的问题。</p>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://blog.csdn.net/guolin_blog/article/details/8860649" target="_blank" rel="external">Java设计模式透析之 —— 单例(Singleton)</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/9153753" target="_blank" rel="external">Java设计模式透析之 —— 组合(Composite)</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/8986285" target="_blank" rel="external">Java设计模式透析之 —— 策略(Strategy)</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/8744002" target="_blank" rel="external">Java设计模式透析之 —— 模板(Template)</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/9400141" target="_blank" rel="external">Java设计模式透析之 —— 适配器(Adapter)</a><br> <a href="http://blog.csdn.net/luoweifu/article/details/46613015" target="_blank" rel="external"> Java中Synchronized的用法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog&quot;&gt;作者：郭霖&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1489338402459&amp;amp;di=f354d44523b4c5d751414e4970189a88&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fsishuok.com%2Fforum%2Fupload%2F2012%2F8%2F21%2Fd9c285859566d753d86f1a44bc9f9a05__2.JPG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;单例：保证一个类仅有一个实例，并提供一个访问它的全局访问点。&lt;br&gt;组合：将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。&lt;/p&gt;
&lt;p&gt;策略：它定义了算法家庭，分别封装起来。让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。&lt;/p&gt;
&lt;p&gt;模板方法： 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。&lt;/p&gt;
&lt;p&gt;适配器：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="Design Pattern" scheme="http://ipcreator.me/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Some Good Learning Habits from Liu Weipeng</title>
    <link href="http://ipcreator.me/2017/03/22/MyShare/learning-habits/"/>
    <id>http://ipcreator.me/2017/03/22/MyShare/learning-habits/</id>
    <published>2017-03-22T05:42:06.000Z</published>
    <updated>2017-03-27T10:08:25.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一直以来伴随我的一些学习习惯"><a href="#一直以来伴随我的一些学习习惯" class="headerlink" title="一直以来伴随我的一些学习习惯"></a>一直以来伴随我的一些学习习惯</h2><p>原文作者：<a href="http://mindhacks.cn/" target="_blank" rel="external">刘未鹏</a><br><a href="http://mindhacks.cn/2008/07/08/learning-habits-part1/" target="_blank" rel="external">一直以来伴随我的一些学习习惯(一)：学习与思考</a><br><a href="http://mindhacks.cn/2008/07/20/learning-habits-part2/" target="_blank" rel="external">一直以来伴随我的一些学习习惯(二)：时间管理</a><br><a href="http://mindhacks.cn/2008/09/17/learning-habits-part3/" target="_blank" rel="external">一直以来伴随我的一些学习习惯(三)：阅读方法</a><br><a href="http://mindhacks.cn/2008/12/05/learning-habits-part4/" target="_blank" rel="external">一直以来伴随我的一些学习习惯(四)：知识结构</a></p>
   <a id="more"></a>
<h2 id="一-：学习与思考"><a href="#一-：学习与思考" class="headerlink" title="(一)：学习与思考"></a>(一)：学习与思考</h2><ol>
<li><p>Google&amp;Wiki（遇到问题做的第一件事情，也是学习某个东西做功课（homework）最先用到的东西。</p>
</li>
<li><p>看书挑剔，只看经典。如何选择经典，可以到网上做做功课，看看评价，综合分析一下。</p>
</li>
<li><p>做读书笔记。一是将自己阅读的时候的思考（包括闪念）总结下来，二是将书中的好例子摘抄下来。（这个习惯是一年前才养成的，发现受益极大。）有了google note，笔记可以加上tag，非常便于回顾，加深理解。我觉得，人与人学习的差距不在资质上，而在花在思考的时间和思考的深度上（后两者常常也是相关的）。</p>
</li>
<li><p>提到思考，我有一个小习惯。利用走路和吃饭的时候思考，还有睡觉前必然要弄一个问题放在脑子里面，在思考中迷糊入睡。发现这样一来往往在不知不觉中多出来大量的思考时间。</p>
<p>4a. 将思考成为习惯还有一个很大的好处——避免焦虑。卡耐基用一整本书讲了一个有效的做法来避免焦虑——底线思考。然而实际上还有另一个有效的做法，就是投入地做另一件事情。不去想”喜马拉雅山上的猴子”的方法并不是使劲的告诉自己不去想”喜马拉雅山上的猴子”，因为那样等于就是脑袋里想了那只猴子，正确的做法是真的不去想那猴子，而是想别的。用别的东西充满工作记忆，其他的神经活动自然会被抑制（神经科学基本事实）。所以，感到焦虑的时候不妨思考吧，甚至完全可以去理性分析和思考导致焦虑的问题本身，将其拆解，分析来源，在不知不觉中，大脑的工作重心就从情绪模块转向了推理模块了，而且这思考也可能顺带更有效地解决了导致焦虑的问题呢:)</p>
</li>
<li><p>重要的事情优先（详见史蒂芬·柯维的《高效能人士的七个习惯》或《要事优先》）。尽量避免琐事骚扰，不重要的事情能不做就不做。有时候，紧急的事情往往只是当事人觉得必须马上做完才显得紧急或者干脆就是紧他人之急，最糟糕的就是纯属性格上原因觉得每件事情都得第一时间完成，很多看上去紧急的事情实际上并不是真的”不能再拖了”，有的干脆就并不需要或值得去做。有很多事情都是可以先放一放甚至完全let go的，否则的话就整天被所谓”紧急”的事情牵着鼻子走了。</p>
</li>
<li><p>重要的事情营造比较大的时间块来完成。比如一本好书，或者一个重要的知识点，最好不要切得太琐碎了看，否则看了后面忘了前面。不利于知识的组织&amp;联系。</p>
</li>
<li><p>多看心理学与思维的书，因为它们是跨学科的。知识分两种，一是我们通常所谓的知识，即领域知识。二是关于我们的大脑吸收知识的机制的知识，后者不妨称为元知识。虽说这也是领域知识，但跟其它的领域知识不同的是，它指导着我们学习其它所有的领域知识。</p>
</li>
<li><p>学习一项知识，必须问自己三个重要问题：1. 它的本质是什么。2. 它的第一原则是什么。3. 它的知识结构是怎样的。</p>
<blockquote>
<ol>
<li>获得的多少并不取决于读了多少，而取决于思考了多少、多深。</li>
</ol>
</blockquote>
</li>
<li><p>善于利用小块时间，也就是《奇特的一生》中所说的“时间下脚料”，如何利用前面有几个方法。同时，也善于创造整块时间（如通过要事优先）。</p>
</li>
<li><p>关于习惯的养成，必须要说明的：经常看到有些人评论说，说说容易，做起来哪有那么容易啊（另一个无关习惯的“说起来容易做起来难”则是因为纸上谈兵不可能算计到所有现实中的因素，但那是另一个问题）。对此我要说的是，做起来当然不容易，所谓江山易改，本性难移。人的性格和认识事物的框架是长期积累养成的，并且人们非常珍视自己的信念（英语里面表达不相信某个东西叫做“I don’t buy it”）。从进化心理学上这是有依据的，一个经过时间检验的信念往往是更靠谱的。只不过可惜的是靠谱不代表最佳，一个信念能让你活下来并不代表能让你活得最好（详见《Mene Genes》，更多的例子参见《How we know what isn’t so》）。我们评判一个信念的标准是satisficing原则（即足够，能行就好，这个术语不是我提的，是大牛Herbert Simon提的），并不是optimizing原则。话说回来，为什么说起来容易做起来难，是因为“说”只是理性上承认正确，并没有考虑到我们每个人大脑中居住的那个非理性自我。这个自我以强大的情绪力量为动机，以习惯为己任，每时每刻都驱使着我们的行为。因为它掌握了“情绪”这个武器，所以我们只能时时拿它当大爷。不记得是哪位哲学家说的了，理性是感性的奴隶。那么，是不是就是说无法克服既有习惯了？以我的经验（以及观察到的别人的经验），还是可以的。第一条就是认识到习惯的改变绝不是一天两天的事情，承认它的难度。第二条就是如果你真想改掉习惯，就需要在过程中常常注意观察自己的行为，否则习惯会以一种你根本觉察不到的方式左右你的行为让你功亏一篑。有一个认知技巧也许可以缓解更改习惯过程中的不适：即把居住在内心的那个非理性自我当成你自己的孩子（你要去培养他），或者你的对手（你要去打败他）也行。总之不能当成自己，因为每个人都不想改变自己。这里转一个认知技巧的例子：李笑来老师在《把时间当作朋友》（顺便也推荐这本开放电子书）中提到他一个朋友用另一个认知技巧来克服背单词的枯燥的：</p>
<p>因为，一共要搞定20,000个单词，而因此可能获得的奖学金是每年40,000美元左右——并且连续四年没有失业可能（后来的事实是，他直到五年之后才获得了博士学位）。当时的美元兑换人民币的汇率差不多是8:1，所以，大约应该相当于320,000元人民币。而如果一年的税后收入是320,000元人民币的话，那么税前就要赚取差不多400,000元人民币。那么，每个单词应该大约值20元人民币——这还只不过是这算了一年的收入而已。</p>
<p>所以，他终于明白背单词是非常快乐的。他每天都强迫自己背下200个单词。而到了晚上验收效果的时候，每在确定记住了的单词前面画上一个勾的时候，他就要想象一下刚刚数过一张20元人民币的钞票。每天睡觉的时候总感觉心满意足，因为今天又赚了4000块！</p>
<p>注意，这跟自我欺骗不同。一来，我们的情绪系统只能这般对付（《Synaptic Self》中提到，大脑中的新皮层（neocortex，所谓“理性”居住的地方，尤其是前额叶）在进化历史上是较为新近的年代才进化出来的，跟底层较原始的模块（如主管情绪的杏仁核）之间的神经网络沟通并不是合作无间，这就解释了为什么有些事情我们明明知道是对的，但就是不能说服自己，情绪还是在那里不依不挠的驱使你去做另一样事情）。二来，我们知道在干什么，所以不能算欺骗:P 总之，对于习惯的更改，除了最重要的一日三省，加上一些认知技巧（其实每个人都是自己的心理学家，你可以自己看看能不能想出什么法子）。其实是没有什么速效银弹的。但是，知难而不退嘛，值得做的事情几乎总是如此:)</p>
</li>
</ol>
<h2 id="二-：时间管理"><a href="#二-：时间管理" class="headerlink" title="(二)：时间管理"></a>(二)：时间管理</h2><ol>
<li>学习和思考的过程中常问自己的几个问题：</li>
</ol>
<p>你的问题到底是什么？（提醒自己思考不要偏离问题。）<br>OK，到现在为止，我到底有了什么收获呢？（提醒自己时不时去总结，整理学习的东西）。<br>设想自己正在将东西讲给别人听（有声思考；能否讲出来是判断是否真正理解的最佳办法）。<br>3.1 设想需要讲给一个不懂的人听。（迫使自己去挖掘知识背后最本质、往往也是最简单的解释）。<br>时常反省和注意自己的思维过程。尤其是当遇到无法理解或解决的问题之后，最需要将原先的思维过程回顾一遍，看看到底哪个环节被阻塞住了妨碍了理解。问题到底出在哪里。并分析以后需要加强哪方面的思维习惯，才能够不在同样或类似的时候被绊住。对此，将思维的大致脉络写下来是一个很好的习惯。<br>养成反驳自己的想法的习惯：在有一个想法的时候，习惯性地去反驳它，问自己“这个难道就一定成立吗？”、“有没有反例或例外？”、“果真如此吗？”之类的问题。（参见Critical Thinking）<br>人的思维天生就是极易流于表面来理解事物的（参见《Psychology of Problem Solving》第11章）。觉得自己理解了一个问题了么？条件反射性地问自己：你真的理解了吗？你真的理解了问题的本质了？问题的本质到底是什么？目前我的理解是什么？我对这个理解感到满意吗？这样的理解到底有什么建设性呢？等等。</p>
<ol>
<li>重视知识的本质：对于程序员来说这一点尤其重要，程序员行业的知识芜杂海量，而且总是在增长变化。很多人感叹跟不上新技术。应对这个问题的办法只能是：</li>
</ol>
<blockquote>
<p>抓住不变量。大量的新技术其实只是一层皮，背后的支撑技术其实都是十来年不变的东西。底层知识永远都不过时。算法数据结构永远都不过时。基本的程序设计理论永远都不过时。良好的编码习惯永远都不过时。分析问题和解决问题的能力永远都不过时。强大的学习能力和旺盛的求知欲永远都不过时。你大脑的思维方式永远都不过时。</p>
</blockquote>
<ol>
<li><p>重视积累的强大力量，万事提前准备：计划订长一点，自然就可以多获得准备的时间。设想你若干年后会在做什么事情，需要哪些技能，现在就开始准备。一个5年计划便可以让你获得从现在开始的5年准备时间。5年中每天腾出半个到一个小时专心于某一件事情，认准一个方向，每次走一点，其实不要说5年，两年就会发现会起到宏大的效应。长期订阅我的Blog的朋友们也一定注意到我基本上不写东西，一般一个月写上2篇就算多的了。但总结一段时间的学习和思考的习惯却一直都没有停止（博客文章对我来说是学习和思考的副产品，我并不为写文章而写文章），所以5年下来竟也写了不少东西。所以这就是一个简单的例子。你大致还可以从我的Blog看出来我一段时间关注的东西，一般来说，一段比较长的时间（少则半年至一年——譬如对心理学与思维的关注；多则几年——譬如对编程技术的关注），在这段时间内，我的业余时间会被一个主题所充斥。反之，如果不知道目的是什么，就不知道往哪个方向上使劲，就容易产生无用功。</p>
</li>
<li><p>抬起头来：人的思维是非常容易只见树木不见森林的（否则这个成语从哪来的呢？）。时不时抬起头来审视一下自己正在做的事情，问一问它（对现在或未来）有什么价值，是不是你真正希望做的。你学到的东西到底是什么？它们重要吗？你需要在这个时候学习这些吗？（见第2条）。你的时间就是你的资源，你投入这些资源来掌握知识，所以到底用来掌握哪些知识是一个很重要的问题。仅仅遵循兴趣是不够的，人会对很多次要的东西产生兴趣，并一头钻进去浪费好多时间。所以判断一个东西值不值得学习是很重要的。</p>
</li>
</ol>
<p>杂项</p>
<ol>
<li><p>退订RSS：RSS Reader是个时间黑洞。就算mark all as read，在有大量feed的情况下，也会无形中消耗掉大量的时间。我们一旦订阅了某个RSS之后就会倾向于不肯退订它，心想也许某天有个重要的信息会从那里得到。这其实是源于人不肯”关上一扇门（即便门内的收益概率极小）”的心理（参见《Predictably Irrational》）；而实际上，关上一扇门，有时能够增大收益期望。仔细观察一下reader里面的feeds，有哪些是真正有价值的，把那些没价值的或者价值很小乃至于不值得每天被它骚扰的，全都退订掉。不要舍不得，那些一个星期都没出现让你眼睛一亮的内容的feed，很大的可能是永远也不会出现。就算可能，也别担心你会漏掉什么宝贵信息，真正宝贵的信息，在其他来源你也会接触到的。一开始我的Greader里面每天都有大量的新内容，每天都是1000+，但一段时间之后发现除了信息焦虑，实际上有价值的内容不多，现在，我很高兴地发现自己摆脱了这种状况，我持续不断地退订feeds，留下的内容越来越少，也越来越精，带来的阅读焦虑也越来越少。（顺便推荐一个东西，aideRSS，初步使用，感觉对订阅reddit这样的每天更新大量内容的feed很有用）。</p>
</li>
<li><p>有时间吗？总结总结最近得到的新知识吧。一般来说，我在一段时间内学习的一些东西总是会在这段时间内一直在脑子里打转，一有时间空隙（譬如走路，吃饭）它们就会自己蹦出来，促使我去进一步思考和总结。永远不要认为对一个知识的把握足够深刻，“理解”的感觉很多时候只是假象。学会反问自己对知识到底把握了多少，是很有价值的。（如何反问，前面的总结中有提到）。</p>
</li>
<li><p>有时间吗？看本书吧。（传统的）阅读和思考永远优于所谓的在互联网上汲取新知识，后者往往浅表、不系统、乃至根本没价值。</p>
</li>
<li><p>制定简要的阅读计划：选出最近认为对你最有价值的书，先总览一下，决定阅读的顺序（哪些章节可以优先阅读）。然后每天看一点。并利用走路、吃饭、乘车或其他不适合带着书和笔的时间来总结看过的内容，建立知识结构，抽取知识本质，与以往的大脑中的知识建立联系。（参见《奇特的一生》）</p>
</li>
</ol>
<h2 id="三-：阅读方法"><a href="#三-：阅读方法" class="headerlink" title="(三)：阅读方法"></a>(三)：阅读方法</h2><p>这篇主要写一些学习（尤其是阅读）的基本方法。</p>
<ol>
<li><p>趁着对一件事情有热情的时候，一股脑儿把万事开头那个最难的阶段熬过去。万事开头难，因为从不了解到了解基本的一些事实，是一个新知识暴涨的阶段，这个时候的困难是最大的。有人熬不过去，觉得困难太大就放弃了。不过，狂热的兴趣可以抵消对困难的感觉，所以趁着对一件事情有热情的时候，开一个好头是很重要的。（当然，这并不是说持之以恒就不重要了）。当然，也许这个是因人而异的，对我来说我会在对一件事情有浓厚兴趣的时候非常专注地学习，把很多 groundworks 做掉。后面就会顺利一些了。</p>
</li>
<li><p>根据主题来查阅资料，而不是根据资料来查阅主题。以前读书的时候是一本一本的读，眼里看到的是一本一本的书，现在则是一章、甚至一节一节的读，眼中看到的不是一本一本的书，而是一堆一堆的章节，一个一个的知识主题，按照主题来阅读，你会发现读的时候不再是老老实实地一本书看完看另一本，而是非常频繁地从一本书跳到另一本书，从一处资料跳到另一处资料，从而来获得多个不同的人对同一个主题是如何讲解的。比如最近我发现在看蒙特卡罗算法时就查了十来处资料，其中有三四篇 paper 和六七本书；这是因为即便是经典的书，你也不能指望它对其中每一个主题的介绍都是尽善尽美的，有些书对某个主题（知识点）的介绍比较到位，有些书则对另一些知识点介绍得比较到位。而有时候一篇紧凑的 paper 比一本书上讲得还要好。我硬盘里面的书按主题分类，每个主题下面都有一堆书，当我需要学习某个主题的知识时（譬如贝叶斯学习或者神经网络），我会把里面涉及这个主题的书都翻开来，索引到相关章节，然后挑讲得好的看。那么，如何判断一个资料是好资料还是坏资料呢？</p>
</li>
<li><p>好资料，坏资料。好资料的特点：从问题出发；重点介绍方法背后的理念（ rationale ），注重直观解释，而不是方法的技术细节；按照方法被发明的时间流程来介绍（先是遇到了什么什么问题，然后怎样分析，推理，最后发现目前所使用的方法）。坏资料的特点是好资料的反面：上来就讲方法细节，仿佛某方法是从天上掉下来的，他们往往这样写“我们定义… 我们称… 我们进行以下几个步骤… ”。根本不讲为什么要用这个方法，人们最初是因为面对什么问题才想到这个方法的，其间又是怎样才想出了这么个方法的，方法背后的直观思想又是什么。实际上一个方法如果将其最终最简洁的形式直接表达出来往往丢失掉了绝大多数信息，这个丢掉的信息就是问题解决背后的思维过程。至于为什么大多数书做不到这一点，我在这里试着分析过。</p>
</li>
<li><p>学习一个东西之前，首先在大脑中积累充分的“疑惑感”。即弄清面临的问题到底是什么，在浏览方法本身之前，最好先使劲问问自己能想到什么方法。一个公认的事实是，你对问题的疑惑越大，在之前做的自己的思考越多，当看到解答之后印象就越深刻。记得大学里面的课本总是瀑布式地把整个知识结构一览无余地放在面前，读的过程倒是挺爽，连连点头，读完了很快又忘掉了，为什么？因为没有带着疑问去学习。</p>
</li>
<li><p>有选择地阅读。很多人觉得我读书速度很快，其实我只是有选择地阅读。这里的选择体现在两个地方，一是选择一本书中感兴趣的章节优先阅读。二是对一本书中技术性较弱或信息密度较低的部分快速地略读。一般来说，除了技术性非常强的书之外，大多数书的信息密度很低，有很多废话。一般来说在阅读的时候应该这样来切分内容：1. 问题是什么？2. 方案是什么？3. 例子是什么？如果是需要解释一个现象的（譬如《黑天鹅》），那么1. 现象是什么？2. 解释是什么？3. 支撑这个解释的理由是什么？4. 例子是什么？一般来说，这一二三四用不了多少字就可以写完了（如果假设只举一到两个精到的例子的话），这样的无废话著作的典型是《合作的进化》；那为什么有些书，明明核心观点就那点东西（顶多加上几个精要的例子罢了）却写得长得要命呢？因为人的思维都有一个“联想”的特点，写着写着就容易旁逸斜出，而且作者自己也往往觉得引申出去挺牛逼，有时候很多与主题无关的废话就掺和进来了；那么，阅读的时候就应该有选择性地滤掉这些不相干的废话；此外还有一种可能性就是大量冗余的例子。一般来说组织得比较好的书会有详细且一目了然的目录和索引，根据目录首先就可以滤掉一部分（比如某个子章节的内容你以前是看过的），然后有时候作者还会举很多冗余的例子，如果你已经觉得印象够深刻了这些例子完全可以不看（一些书就非常厚道地对每个观点只辅以一两个最最经典的例子，譬如《与众不同的心理学——如何正视心理学》，这样的书我最是喜欢）。</p>
</li>
<li><p>为什么看不懂？如果看不懂一个知识，一般有如下几个可能的原因：</p>
</li>
<li><p>你看得不够使劲。对此古人总结过——书读百遍其义自现。虽然这个规律不是任何时候都成立的，但是从认知科学的角度看是完全可以解释的，我们在阅读的时候，注意力往往会有选择性地关注其中的某一些“点”，而忽略了另一些“点”，于是一遍看下来可能因为某一些忽略导致无法理解整体。或者干脆看的时候就没注意其中一些细节但重要的东西。此外，大脑理解一个东西需要一定的处理时间，人脑的处理速度很慢，神经冲动每秒传输速度不过百米，所以不能指望看到哪懂到哪。最后，我们可能因为思维定势的原因会从某个特定的角度去看一句话而忽略了从不同角度去理解的可能性。对于这类情况，仔仔细细地再多读两遍，多试着去理解两遍，往往会“哦！原来这样。”地恍然大悟。</p>
</li>
<li>其中涉及到了你不懂的概念。这是技术性的不理解。这种情况就需要 Cross Reference 。如果一句话中用到了你不懂的概念，那就去查，现在很多书都是电子书，直接搜索一下，或者，对于纸书，看一下书后面的索引就行了。奇怪的是很多人看不懂也不分析一下为什么不懂，就直接放弃了。正如解决问题一样，问题卡住解决不了，第一时间要做的就是分析到底为什么解决不了，而不是直接求救。3. 作者讲述的顺序不对，你接着往下看，也许看到后面就明白了前面的了。</li>
</ol>
<p>杂项</p>
<ol>
<li><p>如何在阅读之前就能获得对一本书质量的大致评估。在深入阅读之前能够迅速评估一本书的质量可以节省很多时间。基本上有几个线索：1. 看作者。牛作者写的书一般都不错。2. 看目录和简介。一份好的目录和简介能够透露这本书质量的相当一部分信息。目录结构是否清晰，是否直白（而不是装神弄鬼），都是衡量的线索。3. 看 Amazon 上的评价，这里要注意的是，除了看整体打分之外，更要看打分最低的人是怎么说的，因为小众意见往往有可能来自那些真正懂行的人（除了来踢馆的），如果在打分最低的意见里面看不到真正有价值的反驳意见的话就相当肯定书是不错的了。4. 看样章。Amazon 上一般都可以随机浏览一些章节的，表达是否清晰，论证是否严谨，内容是否深刻，基本是几页纸就能看出来的。</p>
</li>
<li><p>如何搜寻到好书。几个线索：1. 同作者的著作。2. Amazon 相关推荐和主题相关的书列（类似豆瓣的豆列）。3. 一本好的著作（或一份好的资料——不管是书还是网页）在参考资料里面重点提到的其他著作。4. 有时对于一个主题，可以搜索到好心人总结的参考资源导引，那是最好不过的。</p>
</li>
</ol>
<h2 id="四-：知识结构"><a href="#四-：知识结构" class="headerlink" title="(四)：知识结构"></a>(四)：知识结构</h2><p>自从建立了 TopLanguage 以来，发现在上面待的时间越来越多，与高手讨论问题是个粘性十足的事情，一方面，分享自己的认识是整理不成熟的想法的极好途径，另一方面，互相之间视角不同，所以往往自己忽视的地方会被别人发现。在讨论中不断精化既有的知识体系。以下这段基本上摘抄自（略有整理和添加）在 TopLanguage 上的发言：</p>
<h3 id="抓住不变量"><a href="#抓住不变量" class="headerlink" title="抓住不变量"></a>抓住不变量</h3><p>我喜欢把知识分为essential的和non-essential的。对于前者采取提前深入掌握牢靠的办法，对于后者采取待用到的时刻RTM (Read the manual)方法（用本）。</p>
<p>如何区分essential和non-essential的知识想必绝大多数时候大家心里都有数，我举几个例子：</p>
<blockquote>
<p>对程序员来说，硬件体系结构是essential的，操作系统的一些重要的实现机制是essential的，主流编程范式（OO、FP）是为了满足什么需求出现的（出现是为了解决什么问题），是怎么解决的，自身又引入了哪些新的问题，从而适用哪些场景）。这些我认为都是essential的。我想补充一点的是，并不是说硬件体系结构就要了解到逻辑门、晶体管层面才行（其实要了解到这个层面代价也很小，一两本好书就行了），也并不是说就要通读《Computer Architecture: Quantitative Approach》才行。而是关键要了解那些重要的思想（很长时间不变的东西），而不是很细的技术细节（易变的东西）。《Computer Systems: A Programmer’s Perspective》就是为此目的，针对程序员的需求总结出那些essential knowledge的好书。</p>
</blockquote>
<p>再来说一下为什么需要预先牢靠掌握这些essential的知识：</p>
<p>根据Joel Spolsky同学的说法（原文），</p>
<blockquote>
<p>编程语言技术是对底层设备的封装，然而封装总是会出现漏洞的，于是程序员被迫下到“下水道”当中去解决问题，一旦往下走，漂亮的OO、N层抽象就不复存在了，这时候不具备坚硬的底层知识就会无法解决问题。简而言之就是这些底层知识会无可避免的需要用到，既然肯定会被用到那还是预先掌握的好，否则一来用到的时候再查是来不及的，因为essential的知识也往往正是那些需要较长时间消化掌握的东西，不像Ruby的mixin或closure这种翻一下manual就能掌握的东西。（英语也是这样的essential knowledge——上次在PyCN上看到一个招Python开发人员的帖子将英语列为必备技能，却并不将自然语言处理列为必备技能，正是因为英语不是可以临阵磨枪的东西，而且作为知识的主要载体，任何时候都少不了它，如果不具备英语能力，这个就会成为个人知识结构的短板或瓶颈，而且由于需要长时间才能获得这项能力，所以这个瓶颈将持续很长时间存在。我们曾经在 TopLanguage 上讨论过如何花最少的时间掌握英语）</p>
</blockquote>
<p>另一方面，在问题解决当中，如果不具备必要的知识，是根本无从思考的，再好的分析能力也并不是每个问题都能分析出该用哪些知识然后再去查手册的，很多时候是在工具和问题之间比较，联想，试探性的拼凑来解决问题；这就使得一个好的既有知识基变得至关重要。（实际上以上这个是一个较大的话题，希望有一天我能够把它详细展开说清:)）</p>
<blockquote>
<p>如果你不知道某个工具的存在，遇到问题的时候是很难想到需要使用这么样一个工具的，essential knowldge就是使用最为广泛的工具，编程当中遇到某些问题之后，如果缺乏底层知识，你甚至都不知道需要去补充哪些底层知识才能解决这个问题。</p>
</blockquote>
<p>你必须首先熟悉你的工具，才能有效地使用它（须知工具的强是无敌的，但这一切得以“了解你的工具”为前提，甚至得以“了解目前可能有哪些工具适合你的问题”为前提）。一门语言，你必须了解它的适用场景，不适用场景（比如继承能解决你的问题不代表继承就是解决你的问题的最适合的方案，须知问题是一个复杂系统，解决方案总是常常引入新的问题）。你必须了解它支持的主要编程范式，此外你还必须了解它的traps和pitfalls（缺陷和陷阱，如果不知道陷阱的存在，掉进去也不知道怎么掉的。）这些都是essential knowledge，如果不事先掌握，指望用的时候查manual，是很浪费时间的，而且正如第2点所说，正因为你不知道这些知识（如适用场景），从而用sub-optimal的方式使用了一门语言自己可能还不知道（最小白的例子是，如果你不知道语言支持foreach，那么可能每次都要写一个冗长的循环，较常见的例子是不知道有很方便的库设施可以解决手头的问题所以傻乎乎的自己写了一堆代码），</p>
<p>因为人的评价标准常常是：只要解决了最醒目的问题并且引入的新问题尚能忍受，就行。注意，熟悉并非指熟悉所有细节，而是那些重要的，或者无法在需要用到的时候按需查找的知识。比如上面提到的：<strong>适用场景不适用场景，编程范式，主要语言特性，缺陷和陷阱。</strong></p>
<p>当然，以上作为程序员的essential knowledge列表并不完备，关键是自己在学习新知识的时候带着第三只眼来敏锐地判断这个知识是否是不变量，或不易变的量，是否完全可以在用的时候查手册即可，还是需要提前掌握（一些判断方法在上文也有所提及）。并且学会在纷繁的知识中抽象出那些重要的，本质的，不变的东西。我在之前的part里面也提到我在学习新知识的时候常常问自己三个问题：该知识的（体系或层次）结构是什么、本质是什么、第一原则是什么。</p>
<p>另外还有一些我认为是essential knowledge的例子：</p>
<blockquote>
<p>分析问题解决问题的思维方法（这个东西很难读一两本书就掌握，需要很长时间的锻炼和反思）、判断与决策的方法（生活中需要进行判断与决策的地方远远多于我们的想象），波普尔曾经说过：All Life is Problem-Solving。而判断与决策又是其中最常见的一类Problem Solving。尽管生活中面临重大决策的时候并不多，但另一方面我们时时刻刻都在进行最重大的决策：如：决定自己的日常时间到底投入到什么地方去。如：你能想象有人宁可天天花时间剪报纸上的优惠券，却对于房价的1%的优惠无动于衷吗？（《别做正常的傻瓜》、《Predictably Irrational》）如：你知道为什么当手头股票的股价不可抑止地滑向深渊时我们却一边揪着头发一边愣是不肯撤出吗？（是的，我们适应远古时代的心理机制根本不适应金融市场。）糟糕的判断与决策令我们的生活变得糟糕，这还不是最关键的，最关键的是我们从来不会去质疑自己的判断，而是总是能“找到”其他为自己辩护的理由（《错不在我（Mistakes were made, but not by me）》）又，现在是一个信息泛滥的时代，于是另一个问题也出现：如何在海洋中有效筛选好的信息，以及避免被不好的信息左右我们的大脑（Critical Thinking）关于以上提到的几点我在豆瓣上有一个专门的豆列（“学会思考”），希望有一天我能够积累出足够多的认识对这个主题展开一些详细介绍。</p>
</blockquote>
<p>最后分享一个学习小Tip：</p>
<p>学习一个小领域的时候，时时把“<strong>最终能够写出一篇漂亮的Survey</strong>”放在大脑中提醒自己，就能有助于在阅读和实践的时候有意无意地整理知识的结构、本质和重点，经过整理之后的知识理解更深刻，更不容易忘记，更容易被提取。</p>
<p>杨军在 TopLanguage 上也曾分享了三篇非常棒的学习心得的文章，字字珠玑：</p>
<p>[1] <a href="https://groups.google.com/group/pongba/browse_frm/thread/9a459b6efe94985a/" target="_blank" rel="external">有些事情做起来比想象中容易</a><br>[2] <a href="https://groups.google.com/group/pongba/browse_frm/thread/20a08b6201d88a98/" target="_blank" rel="external">有关读书方法的一点想法</a><br>[3] <a href="https://groups.google.com/group/pongba/browse_frm/thread/6f6140744ab95c72/" target="_blank" rel="external">一件事情如果你没有说清楚，十有八九不能做好</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一直以来伴随我的一些学习习惯&quot;&gt;&lt;a href=&quot;#一直以来伴随我的一些学习习惯&quot; class=&quot;headerlink&quot; title=&quot;一直以来伴随我的一些学习习惯&quot;&gt;&lt;/a&gt;一直以来伴随我的一些学习习惯&lt;/h2&gt;&lt;p&gt;原文作者：&lt;a href=&quot;http://mindhacks.cn/&quot;&gt;刘未鹏&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://mindhacks.cn/2008/07/08/learning-habits-part1/&quot;&gt;一直以来伴随我的一些学习习惯(一)：学习与思考&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://mindhacks.cn/2008/07/20/learning-habits-part2/&quot;&gt;一直以来伴随我的一些学习习惯(二)：时间管理&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://mindhacks.cn/2008/09/17/learning-habits-part3/&quot;&gt;一直以来伴随我的一些学习习惯(三)：阅读方法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://mindhacks.cn/2008/12/05/learning-habits-part4/&quot;&gt;一直以来伴随我的一些学习习惯(四)：知识结构&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
      <category term="Habit" scheme="http://ipcreator.me/tags/Habit/"/>
    
      <category term="Liu Weipeng" scheme="http://ipcreator.me/tags/Liu-Weipeng/"/>
    
  </entry>
  
  <entry>
    <title>Views of Cheng Hao on AI</title>
    <link href="http://ipcreator.me/2017/03/22/BusinessAI/views-of-chenghao-about-ai/"/>
    <id>http://ipcreator.me/2017/03/22/BusinessAI/views-of-chenghao-about-ai/</id>
    <published>2017-03-22T04:55:06.000Z</published>
    <updated>2017-03-27T10:11:58.118Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://glhsns.img-cn-hangzhou.aliyuncs.com/201703/p20170322095243295.!wm" alt=""></p>
<h2 id="迅雷创始人程浩：人工智能只做技术服务商死路一条！"><a href="#迅雷创始人程浩：人工智能只做技术服务商死路一条！" class="headerlink" title="迅雷创始人程浩：人工智能只做技术服务商死路一条！"></a>迅雷创始人程浩：人工智能只做技术服务商死路一条！</h2><p>朋友们大家好，我是程浩，迅雷创始人，现在专注互联网领域的投资。这一年来我看了许多人工智能领域的创业项目，很多都是技术背景的创业者，发现两个普遍问题：</p>
<p>1、有技术但没有好的场景，“拿着锤子找钉子”非常普遍；</p>
<p>2、技术创业者如果只定位做技术提供商，而不直接面向用户/客户提供整体解决方案，未来价值会越来越小，不往上游走风险非常大，甚至是死路一条；</p>
<a id="more"></a>
<p>为什么说未来只做技术提供商价值会越来越小，甚至死路一条？原因有几点：</p>
<h2 id="未来很多基础技术服务都是大公司的赛道，都会免费："><a href="#未来很多基础技术服务都是大公司的赛道，都会免费：" class="headerlink" title="未来很多基础技术服务都是大公司的赛道，都会免费："></a>未来很多基础技术服务都是大公司的赛道，都会免费：</h2><p>以语音识别来说，除科大讯飞外，目前百度、阿里也已经杀入这个领域，腾讯肯定也在布局中。不光是语音识别，包括自然语言理解、翻译等等，未来这些占据数据优势的大公司都会提供这样的基础服务。人就没打算收费，你也就别指望靠API调用去赚钱。所以尽管这些领域现在还可赚点小钱，但很难成为一个长久的生意。</p>
<h2 id="依托于算法的技术壁垒会越来越低："><a href="#依托于算法的技术壁垒会越来越低：" class="headerlink" title="依托于算法的技术壁垒会越来越低："></a>依托于算法的技术壁垒会越来越低：</h2><p>打个比方，苹果2007年发布第一款iPhone时，没人懂IOS编程，现在满大街都是。正如今天各大学的计算机专业，都纷纷开设机器学习课程，未来人才不缺，这会拉低整个行业的进入门槛。</p>
<p>同时随着谷歌TensorFlow等生态系统的成熟，很多领域都会有训练好的模型可以用来参考（出Demo会更快），创业者只要有足够的数据来训练参数就好了。所以未来算法的壁垒会越来越低，如果这个公司的核心竞争力是算法，那将非常危险。</p>
<p>除此之外，在一些“非关键应用”上，两个算法之间的微小差别其实对使用者感知并不明显。与此相对应的，数据壁垒却是非常明显。最近这一年中国涌现了一二十个“AI看医学影像”的公司，这个生意里面，怎么拿到海量的、准确的、标注过的数据，比谁的算法好要有价值的多。</p>
<p><img src="http://glhsns.img-cn-hangzhou.aliyuncs.com/201703/p20170322095511346.!wm" alt=""></p>
<h2 id="技术提供商如果不直接面向用户-客户提供整体解决方案，则非常容易被上游碾压："><a href="#技术提供商如果不直接面向用户-客户提供整体解决方案，则非常容易被上游碾压：" class="headerlink" title="技术提供商如果不直接面向用户/客户提供整体解决方案，则非常容易被上游碾压："></a>技术提供商如果不直接面向用户/客户提供整体解决方案，则非常容易被上游碾压：</h2><p>对于技术提供商和算法类公司，如果你的技术壁垒不够高，上游很可能直接把你的事做了。这样的例子比比皆是。大家知道安防领域的海康和大华，他们每卖一颗摄像头都会搭载一枚海思芯片，运行编解码方案和用于脸识别、人证合一相关的算法。</p>
<p>这个领域的算法提供商就很危险。第一，海思作为芯片提供商，在自己的Chips上跑自己的算法是理所当然，所以很容易就会把算法提供商的事儿替代了。其次更有可能的是，未来海康和大华，会把算法提供商和海思的事情都做了。现在只是自己研发团队做的芯片和算法还不够好。一旦差不多，会立马取代。所以即使海思芯片有一定技术含量，但对海康这样近2000亿市值的公司，他们占据垄断性的市场份额，一定会做到赢家通吃上下游。</p>
<p>此外还有在SLAM领域，应用基于三角测距triangulation的激光雷达，专做机器人移动底盘的提供商，未来也很危险。主要是技术壁垒没那么高，其上游最主要的客户扫地机器人，只要出货量一大就会考虑自己做。因为这事儿没什么门槛，因此只做技术提供商，非常容易被上游延展到自己的业务领域。</p>
<p>另外即使在有一定技术门槛的行业，技术提供商的日子同样并不好过。正像被Intel收购的Movidius，专注嵌入式的视觉处理芯片。之前大疆无人机是其主要客户之一。但问题是大疆统治了消费级无人机市场，所以大疆很自然的开始做自己的芯片。按说芯片的技术壁垒并不低，但只要行业集中度高，像苹果、三星、华为还有现在的小米，都选择了自己做手机CPU。</p>
<p>这其实是一个产业链通用规律：如果一个产业链有很多环节，在某一个环节有一个垄断者，那么这个垄断者就有向上下游延展的机会，即使不延展也会把整个产业链的大部分利润吃掉。正如之前的PC产业链，有内存、硬盘、操作系统、整机……但Windows和Intel却赚走了绝大部分利润。</p>
<p><img src="http://glhsns.img-cn-hangzhou.aliyuncs.com/201703/p20170322095554857.!wm" alt=""></p>
<p>既然做纯技术提供商没有出路，那怎么办？浩哥提出“一横一纵”理论。“一横”就是指你提供的技术服务。通常“一横”能服务很多行业，你要在其中选一个最大、最适合你的行业，深入扎进去做“全栈”，就升级为了“一纵”。在垂直外的行业，因为没有利益冲突，你仍可老老实实的做技术服务。这样的话，商业上你能吃透一个垂直行业，技术上你还能通过横向合作，不断获取对方反馈的数据来夯实你的技术。</p>
<p>那么对于技术创业公司，从“一横”走到“一纵”，要选哪个垂直领域，取决几个关键因素：</p>
<h2 id="市场空间够不够大？"><a href="#市场空间够不够大？" class="headerlink" title="市场空间够不够大？"></a>市场空间够不够大？</h2><p>做垂直领域的全栈，还是做横向的技术提供商？完全取决于市场空间哪个更大。找对垂直领域，即使只占一部分市场份额，也可能比做“一横”全归你的收益大。拿美图公司举例，人们对其印象深刻的是美图秀秀、美拍、美颜相机等APP矩阵，但研究财报后你会发现，这些都远没有垂直做美图手机赚钱。美图手机占了公司全部营收的95%。虽然美图手机去年的销量大约在38.8万台，仅仅只占国内手机市场全年销量近4亿台的0.1%。（PS：我偶然发现美图手机高端型号能卖到4000块钱，这个用户人群还挺有意思，因为几乎都是女孩，比较爱美，普遍对价格的敏感度不高）</p>
<h2 id="行业集中度如何？"><a href="#行业集中度如何？" class="headerlink" title="行业集中度如何？"></a>行业集中度如何？</h2><p>在做“一横”技术提供商时，上游行业集中度越高则越不利。说白了头部效应明显，如果一两家大企业把行业全吃掉，那么作为技术提供商，面对集中采购，是没有任何议价能力的。就像IDC时代，HP、DELL等卖服务器的，活的很滋润。但现在云计算来了，面对亚马逊、阿里云这样的批量采购，服务器厂商能跑个量就不错了，甭指望什么利润了。</p>
<p>不过话又说回来，行业集中度越高，说明行业壁垒越高，你想从技术提供商走向上游也越困难。这种情况下，通常是上游把下游的事做了，例如Google、百度当年内部使用了一些自己攒的服务器，现在大部分都是定制化需求给服务器厂商，这样的单几乎是没利润的。反过来讲，如果行业集中度很低，那么作为技术提供商还是相对“滋润”的。</p>
<h2 id="技术是改良还是革命？"><a href="#技术是改良还是革命？" class="headerlink" title="技术是改良还是革命？"></a>技术是改良还是革命？</h2><p>如果你的技术创新对这个垂直领域是革命性的，就越有机会走到上游。如果只是改良性的，你就老老实实在下游赚个辛苦钱算了。</p>
<p>越是颠覆性的东西，越有机会往上游走。因为上游越离不开你，意味着你有机会做他的事。打个异想天开的比方，如果你能提供一个“待机一礼拜”的电池，那你就可以考虑自己做手机，你的手机只打一点： 一星期不用充电！就这一点可能就够了，因为这个技术是革命性的。相反，如果是改良性的技术，例如你的电池待机只是比以前多了20%，那你还是老老实实做电池吧。</p>
<h2 id="双方壁垒谁更高？"><a href="#双方壁垒谁更高？" class="headerlink" title="双方壁垒谁更高？"></a>双方壁垒谁更高？</h2><p>拿比较火的直播平台而言，现在都有美颜功能，例如给女孩长出个耳朵那种，这个通常都是第三方提供的技术。技术本身的壁垒并不高，很多公司都能提供，虽然效果有一些小的差异。但是直播的壁垒相当高，这事有网络效应，用户越多会吸引更多的主播，因为能赚到更多钱，主播越多，也会带来更多的用户，因此需要很多资金来买流量以及签约很NB的主播。这种情况下，虽然技术提供商只能赚个辛苦钱，但是仍然完全没有机会往上游走。</p>
<p><img src="http://glhsns.img-cn-hangzhou.aliyuncs.com/201703/p20170322095629813.!wm" alt=""></p>
<h2 id="到底跟团队基因相符不相符？"><a href="#到底跟团队基因相符不相符？" class="headerlink" title="到底跟团队基因相符不相符？"></a>到底跟团队基因相符不相符？</h2><p>能做得了技术服务，不一定能做垂直解决方案，因为团队不一定有行业经验，这是很大的问题。亚马逊的无人便利店Amazon Go出来之后，国内不少技术团队也想提供类似的技术，甚至想做2C的便利店。我劝他们再考虑一下，你的技术再好，对于用户而言，他买东西的时候，首要考虑的还是—— 哪个便利店离我更近（从这个角度上讲，无人便利店仍然是个改良型的技术），这又回到了零售的本质。所以如果团队没有零售的基因，就别考虑自己开便利店的事了。这时候，很多人可能会问“那我找个懂行业的高管不就行了么？”这事没那么简单，如果CEO不了解行业本质，其实是很难靠一个高管去弥补的。</p>
<blockquote>
<p>综上所述，只做技术提供商肯定不行，一定要做整体解决方案——选个适合你的行业，把你的技术产品化、然后搞定用户/客户实现商业变现、然后获得更多的数据，这样才能再夯实你的技术。一句话讲，要做<strong>技术、产品、商业和数据的“全栈”，形成闭环！</strong></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://glhsns.img-cn-hangzhou.aliyuncs.com/201703/p20170322095243295.!wm&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;迅雷创始人程浩：人工智能只做技术服务商死路一条！&quot;&gt;&lt;a href=&quot;#迅雷创始人程浩：人工智能只做技术服务商死路一条！&quot; class=&quot;headerlink&quot; title=&quot;迅雷创始人程浩：人工智能只做技术服务商死路一条！&quot;&gt;&lt;/a&gt;迅雷创始人程浩：人工智能只做技术服务商死路一条！&lt;/h2&gt;&lt;p&gt;朋友们大家好，我是程浩，迅雷创始人，现在专注互联网领域的投资。这一年来我看了许多人工智能领域的创业项目，很多都是技术背景的创业者，发现两个普遍问题：&lt;/p&gt;
&lt;p&gt;1、有技术但没有好的场景，“拿着锤子找钉子”非常普遍；&lt;/p&gt;
&lt;p&gt;2、技术创业者如果只定位做技术提供商，而不直接面向用户/客户提供整体解决方案，未来价值会越来越小，不往上游走风险非常大，甚至是死路一条；&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Investment" scheme="http://ipcreator.me/tags/Investment/"/>
    
  </entry>
  
  <entry>
    <title>Understanding of Matrix Multiplication</title>
    <link href="http://ipcreator.me/2017/03/22/Program/Math/matrix-multiply/"/>
    <id>http://ipcreator.me/2017/03/22/Program/Math/matrix-multiply/</id>
    <published>2017-03-22T03:23:06.000Z</published>
    <updated>2017-03-27T09:56:15.286Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2015/09/matrix-multiplication.html" target="_blank" rel="external">阮一峰</a></p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015090105.gif" alt=""></p>
<p>大多数人在高中，或者大学低年级，都上过一门课《线性代数》。这门课其实是教矩阵。矩阵乘法到底是什么东西。关键就是一句话，矩阵的本质就是线性方程式，两者是一一对应关系。如果从线性方程式的角度，理解矩阵乘法就毫无难度。</p>
 <a id="more"></a>
<p> 刚学的时候，还蛮简单的，矩阵加法就是相同位置的数字加一下。<br> <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015090102.png" alt=""></p>
<p> 矩阵减法也类似。<br>矩阵乘以一个常数，就是所有位置都乘以这个数。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015090103.png" alt=""></p>
<p>但是，等到矩阵乘以矩阵的时候，一切就不一样了。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015090104.png" alt=""></p>
<p>这个结果是怎么算出来的？<br>教科书告诉你，计算规则是，第一个矩阵第一行的每个数字（2和1），各自乘以第二个矩阵第一列对应位置的数字（1和1），然后将乘积相加（ 2 x 1 + 1 x 1），得到结果矩阵左上角的那个值3。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015090105.gif" alt=""></p>
<p>也就是说，结果矩阵第m行与第n列交叉位置的那个值，等于第一个矩阵第m行与第二个矩阵第n列，对应位置的每个值的乘积之和。</p>
<p>怎么会有这么奇怪的规则？</p>
<p>我一直没理解这个规则的含义，导致《线性代数》这门课就没学懂。研究生时发现，线性代数是向量计算的基础，很多重要的数学模型都要用到向量计算，所以我做不了复杂模型。这一直让我有点伤心。</p>
<p>前些日子，受到<a href="https://nolaymanleftbehind.wordpress.com/2011/07/10/linear-algebra-what-matrices-actually-are/" target="_blank" rel="external">一篇文章 Linear Algebra: What matrices actually are</a>的启发，我终于想通了，矩阵乘法到底是什么东西。关键就是一句话，矩阵的本质就是线性方程式，两者是一一对应关系。如果从线性方程式的角度，理解矩阵乘法就毫无难度。<br>下面是一组线性方程式。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015090106.png" alt=""><br>矩阵的最初目的，只是为线性方程组提供一个简写形式。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015090107.png" alt=""><br>老实说，从上面这种写法，已经能看出矩阵乘法的规则了：系数矩阵第一行的2和1，各自与 x 和 y 的乘积之和，等于3。不过，这不算严格的证明，只是线性方程式转为矩阵的书写规则。</p>
<p>下面才是严格的证明。有三组未知数 x、y 和 t，其中 x 和 y 的关系如下。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015090108.png" alt=""><br>x 和 t 的关系如下。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015090109.png" alt=""><br>有了这两组方程式，就可以求 y 和 t 的关系。从矩阵来看，很显然，只要把第二个矩阵代入第一个矩阵即可。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015090110.png" alt=""><br>从方程式来看，也可以把第二个方程组代入第一个方程组。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015090111.png" alt=""><br>上面的方程组可以整理成下面的形式。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015090112.png" alt=""><br>最后那个矩阵等式，与前面的矩阵等式一对照，就会得到下面的关系。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015090113.png" alt=""><br>矩阵乘法的计算规则，从而得到证明。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/09/matrix-multiplication.html&quot;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ruanyifeng.com/blogimg/asset/2015/bg2015090105.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;大多数人在高中，或者大学低年级，都上过一门课《线性代数》。这门课其实是教矩阵。矩阵乘法到底是什么东西。关键就是一句话，矩阵的本质就是线性方程式，两者是一一对应关系。如果从线性方程式的角度，理解矩阵乘法就毫无难度。&lt;/p&gt;
    
    </summary>
    
      <category term="Math" scheme="http://ipcreator.me/categories/Math/"/>
    
    
      <category term="Matrix" scheme="http://ipcreator.me/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>Big Trends</title>
    <link href="http://ipcreator.me/2017/03/22/MyView/Original/big-trend/"/>
    <id>http://ipcreator.me/2017/03/22/MyView/Original/big-trend/</id>
    <published>2017-03-22T00:18:06.000Z</published>
    <updated>2017-03-30T03:28:22.888Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>AI、Tensorflow、5G、Investment<br>IPR、Education<br>Super individual、Growing Up、Psychology</p>
</blockquote>
<p>任何一场革命，绝不是以敲锣打鼓的方式，来到你的身边。等到某一天，你忽然发现快要天翻地覆时，再去看，发现自己已被别人抛弃了。过去以端为中心的技术革命，不能说结束了，但已不再是时代的风口。技术，进入了一场以数据为驱动的革命。数据和运算能力，变得越来越重要。公司研发结构会发生很多改变，数据获取和数据标注会变得非常重要。并行异构计算的人才，变成核心竞争力。语音和视觉，将成为下一代交互模式。深度学习在各个领域产生的变革才刚刚开始。<strong>如果你把深度学习看成一种“工具”，就会发现——它有很多和其它领域，包括传统行业相互结合的机会。</strong>漫漫长路，才刚刚开始。——傅盛</p>
<a id="more"></a>
<h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><img src="http://omj173lhw.bkt.clouddn.com/sat-ai-head-640x353.jpg" alt=""><br><a href="http://gelonghui.com/p/101767.html" target="_blank" rel="external">“人工智能时代，将是一个比移动互联时代大十倍的市场 —-李开复”</a></p>
<blockquote>
<p>在趋势面前，视而不见或者掩耳盗铃都不是正确的姿势，不做吃瓜群众，要做就做参与者甚至变革者，这样才能成为受益者。</p>
</blockquote>
<p>10年后，人工智能能将取代世界上90%的翻译/记者/助理/保安/司机/销售/客服/交易员/会计/保姆。<br>房地产经纪人和信贷分析师 等中产阶级职业被自动化设备取代的风险高达97%</p>
<p><strong>创新工场对人工智能有一个很完整的投资蓝图</strong></p>
<blockquote>
<p>第一个重点是大数据的机会<br>第二个是语言方面<br>第三呢，是传感器的降价非常的重要。<br>最后是自动驾驶</p>
</blockquote>
<div align="center"><br><img src="http://glhsns.img-cn-hangzhou.aliyuncs.com/201611/p20161129181751895.!wm" width="693" height="521" alt="personal photo"><br></div>


<h2 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h2><p><img src="http://omj173lhw.bkt.clouddn.com/tensorflow.jpg" alt=""><br><a href="http://geek.csdn.net/news/detail/139455" target="_blank" rel="external">TensorFlow 贡献者唐源：掌握 Google 深度学习框架的正确姿势</a></p>
<blockquote>
<p>餐具和素材已免费提供，炒不出好菜不要怪工具</p>
</blockquote>
<p>TensorFlow 提供的不仅仅只是现有的一些比较热门的模型实现，深度学习和机器学习这个领域的发展是非常快的，很多问题往往不是简单的现有模型能够解决的，最重要的是一个框架的灵活性和可拓展性一定是不能丢的，Spark 的 MLlib 很优秀地实现了一些工业界需求比较大的一些算法，但是 TensorFlow 能提供的不仅仅是这些，它提供了很多建立机器学习和深度学习必有的元素，比如，TensorFlow 有着自己的 metrics、losses、optimizers、layers 等模块来帮助<strong>建立各种各样的深度学习模型</strong>，它也提供了许多<strong>高阶的 Estimator API 来帮助用户更好地搭建和定义自己的分布式的模型</strong>，FeatureColumn 模块来帮助数据科学工作中很重要的特征工程，DataFrame 和 QueueRunner 等模块来更好地实现数据的预处理，提取批量队列，等等。另外，TensorFlow 省去了在各种不同的设备（比如 CPU、GPU、TPU）上的实现，<strong>用户只需要集中精力调用已经实现好的 API 就可以在各种设备上进行自动优化以及资源分配</strong>，这些都是 Spark 目前还不能或者是很难做到的。最近雅虎开源的 <strong>TensorFlowOnSpark</strong> 也挺有意思，可以在现有的 Spark/Hadoop 分布式集群的基础上部署 TensorFlow 的程序，这样可以避免数据在已有 Spark/Hadoop 集群和深度学习集群间移动，HDFS 里面的数据能够更好地输入进 TensorFlow 的程序当中。</p>
<h2 id="5G"><a href="#5G" class="headerlink" title="5G"></a>5G</h2><p><img src="http://omj173lhw.bkt.clouddn.com/5g-speedometer-logo.jpg" alt=""></p>
<blockquote>
<p>在物联网和大数据时代，网络速度提升100倍，能带来怎样的机会？</p>
</blockquote>
<h2 id="Investment"><a href="#Investment" class="headerlink" title="Investment"></a>Investment</h2><p><img src="http://omj173lhw.bkt.clouddn.com/gelonghui.jpg" alt=""></p>
<blockquote>
<p>国内房价狂涨猛调控、国家严控资金外流、汇率波动，人人都说好投资目标匮乏稀缺的时代，意味着什么？要么做有价值的项目/产品和服务，要么海外投资均衡风险…</p>
</blockquote>
<h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><table>
<thead>
<tr>
<th>No.</th>
<th>Date</th>
<th>Price</th>
<th>Company</th>
<th>Strategy</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>03.22</td>
<td>10.12</td>
<td>SMIC</td>
<td>bottom</td>
</tr>
<tr>
<td>2</td>
<td>03.22</td>
<td>10.08</td>
<td>SMIC</td>
<td>bottom</td>
</tr>
<tr>
<td>3</td>
<td>03.22</td>
<td>10.06</td>
<td>SMIC</td>
<td>bottom</td>
</tr>
<tr>
<td>4</td>
<td>03.22</td>
<td>10.00</td>
<td>SMIC</td>
<td>bottom</td>
</tr>
<tr>
<td>5</td>
<td>03.29</td>
<td>09.96</td>
<td>SMIC</td>
<td>Bottom &amp; Government</td>
</tr>
<tr>
<td>6</td>
<td>03.29</td>
<td>12.88</td>
<td>MeiTu</td>
<td>AI Future &amp; Wensheng Cai &amp; Kaifu Lee</td>
</tr>
<tr>
<td>7</td>
<td>03.30</td>
<td>9.64</td>
<td>SMIC</td>
<td>bottom</td>
</tr>
<tr>
<td>8</td>
<td>03.30</td>
<td>12.28</td>
<td>MeiTu</td>
<td>bottom</td>
</tr>
</tbody>
</table>
<h2 id="IPR"><a href="#IPR" class="headerlink" title="IPR"></a>IPR</h2><p><img src="http://omj173lhw.bkt.clouddn.com/ipr.jpg" alt=""></p>
<blockquote>
<p>保护创新和知识产权，国际化、出海，在中国，是一个正在冉冉升起的朝阳行业，这又能带来怎样的机会？</p>
</blockquote>
<h2 id="Education"><a href="#Education" class="headerlink" title="Education"></a>Education</h2><p><img src="http://omj173lhw.bkt.clouddn.com/EDUCATION-text.jpg" alt=""></p>
<blockquote>
<p>在有着充分学识和眼界的80后、90后，纷纷当爹妈的年代，对其下一代教育又会有怎样的要求和期待？传统的追求高分和排名肯定不是唯一的目标，想要跨界当老师者，类似五星护工和保姆永远是高薪稀缺品，钱途和前途都是杠杠的，关键是你是否有两把刷子？既能应试又能素质…</p>
</blockquote>
<h2 id="Super-individual"><a href="#Super-individual" class="headerlink" title="Super individual"></a>Super individual</h2><p><img src="http://omj173lhw.bkt.clouddn.com/super%20individual.jpg" alt=""></p>
<blockquote>
<p>斜杠青年、多维成长和竞争</p>
</blockquote>
<h2 id="Growing-Up"><a href="#Growing-Up" class="headerlink" title="Growing Up"></a>Growing Up</h2><p><img src="http://omj173lhw.bkt.clouddn.com/growing%20up.jpg" alt=""></p>
<blockquote>
<p>聚焦自身价值的成长，而非仅仅追逐外在的估值，将逐渐成为主旋律</p>
</blockquote>
<h2 id="Psychology"><a href="#Psychology" class="headerlink" title="Psychology"></a>Psychology</h2><p><img src="http://omj173lhw.bkt.clouddn.com/psychology%20one.jpg" alt=""></p>
<blockquote>
<p>大家将逐步意识到使自己和家人健康幸福的技能，其价值意义和重要性远胜于某项工作技能。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;AI、Tensorflow、5G、Investment&lt;br&gt;IPR、Education&lt;br&gt;Super individual、Growing Up、Psychology&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;任何一场革命，绝不是以敲锣打鼓的方式，来到你的身边。等到某一天，你忽然发现快要天翻地覆时，再去看，发现自己已被别人抛弃了。过去以端为中心的技术革命，不能说结束了，但已不再是时代的风口。技术，进入了一场以数据为驱动的革命。数据和运算能力，变得越来越重要。公司研发结构会发生很多改变，数据获取和数据标注会变得非常重要。并行异构计算的人才，变成核心竞争力。语音和视觉，将成为下一代交互模式。深度学习在各个领域产生的变革才刚刚开始。&lt;strong&gt;如果你把深度学习看成一种“工具”，就会发现——它有很多和其它领域，包括传统行业相互结合的机会。&lt;/strong&gt;漫漫长路，才刚刚开始。——傅盛&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Investment" scheme="http://ipcreator.me/tags/Investment/"/>
    
      <category term="AI" scheme="http://ipcreator.me/tags/AI/"/>
    
      <category term="5G" scheme="http://ipcreator.me/tags/5G/"/>
    
      <category term="IPR" scheme="http://ipcreator.me/tags/IPR/"/>
    
      <category term="Education" scheme="http://ipcreator.me/tags/Education/"/>
    
  </entry>
  
  <entry>
    <title>The Purpose of Cross Wall</title>
    <link href="http://ipcreator.me/2017/03/22/Program/Tools/the-meaning-of-cross-wall/"/>
    <id>http://ipcreator.me/2017/03/22/Program/Tools/the-meaning-of-cross-wall/</id>
    <published>2017-03-21T23:56:08.000Z</published>
    <updated>2017-03-27T09:48:58.862Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/Google.png" alt=""><br><a href="http://www.google.com/ncr" target="_blank" rel="external">http://www.google.com/ncr</a></p>
<p>学习一门东西的时候常常发现是始于 wikipedia 中间经过若干次 google ，然后止于某一本或几本著作。 ——刘未鹏</p>
<a id="more"></a>
<h2 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h2><p><img src="http://om8nmvpn9.bkt.clouddn.com/Google.png" alt=""><br><a href="http://www.google.com/ncr" target="_blank" rel="external">Google</a></p>
<h2 id="Wikipedia"><a href="#Wikipedia" class="headerlink" title="Wikipedia"></a>Wikipedia</h2><p><img src="http://om8nmvpn9.bkt.clouddn.com/Wikipedia_wordmark@1.5x.png" alt=""><br><img src="http://om8nmvpn9.bkt.clouddn.com/Wikipedia-logo-v2@1.5x.png" alt=""><br>[Wikipedia]<a href="https://www.wikipedia.org/" target="_blank" rel="external">https://www.wikipedia.org/</a></p>
<h2 id="天行"><a href="#天行" class="headerlink" title="天行"></a>天行</h2><p><img src="http://www.tianxing1.com/images/logo.png" alt=""><br><a href="http://www.tianxing1.com/" target="_blank" rel="external">网站</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://zhibimo.com/read/xiaolai/reborn-every-7-years/C04.html" target="_blank" rel="external">正确高效使用 Google</a><br><a href="http://lixiaolai.com/2016/06/11/makecs-appendix01/" target="_blank" rel="external">十分钟后开始使用英语</a><br><a href="http://lixiaolai.com/2016/06/12/makecs-preface/" target="_blank" rel="external">人人都是工程师</a><br><a href="http://mindhacks.cn/2008/07/08/learning-habits-part1/" target="_blank" rel="external">一直以来伴随我的一些学习习惯(一)：学习与思考</a><br><a href="http://blog.csdn.net/pongba/article/details/2915005" target="_blank" rel="external">机器学习与人工智能学习资源导引</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/Google.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;http://www.google.com/ncr&quot;&gt;http://www.google.com/ncr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;学习一门东西的时候常常发现是始于 wikipedia 中间经过若干次 google ，然后止于某一本或几本著作。 ——刘未鹏&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Google" scheme="http://ipcreator.me/tags/Google/"/>
    
      <category term="Wikipedia" scheme="http://ipcreator.me/tags/Wikipedia/"/>
    
  </entry>
  
  <entry>
    <title>Bayes&#39; Theorem</title>
    <link href="http://ipcreator.me/2017/03/21/Program/Math/bayes-rule/"/>
    <id>http://ipcreator.me/2017/03/21/Program/Math/bayes-rule/</id>
    <published>2017-03-21T14:05:08.000Z</published>
    <updated>2017-03-27T09:55:56.775Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.beekka.com/blog/201108/bg2011082507.jpg" alt=""></p>
<p>贝叶斯定理的威力之一在于能让我们由已知的概率以及手头的信息去推断未知的概率。</p>
<p>概率论只不过是把常识用数学公式表达了出来。——拉普拉斯</p>
<a id="more"></a>
<p><a href="https://xueqiu.com/8102984655/73644129" target="_blank" rel="external">贝叶斯定理的胆识</a></p>
<p>同人于野</p>
<p>你相信上帝吗？你相信中医吗？你相信全球变暖是人为造成的，而且问题非常严重吗？你相信转基因食品的安全性吗？你相信大年初一去雍和宫祈福能带来好运吗？</p>
<p>本文不研究这些问题。我想说的是，当你说“我相信”或者“我不相信”的时候，你到底是个什么意思。</p>
<p>如果我们把“相信”仅仅当成一个表态，那它的意义其实相当有限。也许我们可以在跟朋友闲聊的时候吹吹，也许我们可以在网上参与评论，也许我们还能写篇文章说明自己的立场。但是这又能怎样？空谈误国。我们的观点完全不左右真理，而且通常很难左右别人。</p>
<p>“相信不相信”的真正意义，在于给我们自己的决策提供依据。如果我相信大年初一去雍和宫祈福能带来好运，那么第一，我想方设法去；第二，别人信与不信与我关系不大，事实上我可能希望信的人少，这样我去更方便。如此说来“信不信”是个非常主观的判断，我们完全可以容忍别人的判断跟自己不同。</p>
<p>更进一步，“信或不信”有点生硬，最好我们能把它量化一下，用一个数字来描述，比如说用概率。比如如果我说“雍和宫好使的可能性是15%”，那我就是不怎么相信；如果我说“雍和宫好使的可能性是100%”，那我就是深信不疑。严格地说，这个概率数字当然是所谓“主观概率”，就好像天气预报说明天下雨的概率是30%—样，其实“明天”只发生一次，并不是说在100个平行宇宙的明天中有30个会下雨。</p>
<p>这个量化了的信念可以让我们的决策更科学。如果我对雍和宫的信念值只有15%，但是我大年初一那天正好就从雍和官路过，那我就完全可以进去上个香，有枣没枣打一竿子再说——可是专程跑一趟就没必要了。如果我对雍和宫的信念值高达95%，那我就值得坐火车去北京上香。</p>
<p>真正的深信不疑和彻底不信都是很少的，甚至可能是虚张声势自欺欺人。一般情况下对一般有争议的问题我们都是抱着将信将疑的态度，信念值在0.01%到99.99%之间。而且，我们对大多数事物的信念值都在动态变化。比如有什么特别突兀的新东西出来，我们一开始可能是不信的，随着证据增多，慢慢加强信念。</p>
<blockquote>
<p>—个智识分子应该拥有这种复杂的信念体系，时刻调整自己对各种事物的看法。也可以说，这是不断地变动自己的世界观。</p>
</blockquote>
<p>想要科学合理地做到这一点，我们需要用到贝叶斯定理。这个定理的数学形式和思想都非常简单，早在两百多年前就被人发现和使用了，但是—直争议极大，因为它的用法恰恰是计算主观概率。很多统计学家认为主观概率根本不科学，个人的信念毫无意义，只有客观概率才值得严肃对待。但是在过去这五六十年内，实用主义者们没理会统计学家的争论，使用贝叶斯定理做了很多很多事：破解了二战时德军密码、预测了俄罗斯潜艇的位置、判断申请贷款者的信用……我们不妨直接引用《金融时报》中文版何帆的一篇科普文章：</p>
<p>生命科学家用它研究基因是如何被控制的；教育学家突然意识到，学生的学习过程其实就是贝叶斯法则的运用；基金经理用贝叶斯法则找到投资策略；Google用贝叶斯法则改进搜索功能，帮助用户过滤垃级邮件；无人驾驶汽车接收车顶传感器搜集到的路况和交通数据，运用贝叶斯法则灵新从地图上获得的信息。人工智能、机器翻译中大量用到贝叶斯法则。</p>
<blockquote>
<p>所有这些应用的原理都是一样的。如果我掌握这个东西的全部信息，那我当然能计算一个客观概率——可是生活中绝大多数决策面临的信息是不全的，我们手里只有非常有限的几个证据。而贝叶斯定理的精神在于，既然无法得到全面的信息，我们就在证据有限的情况下，尽可能地做一个更好的判断。</p>
</blockquote>
<p>先来看看贝叶斯定理是什么样的：</p>
<p>P(A|B)= p(B|A) /  P（B) * p(A)</p>
<p>A代表我们感兴趣的事件，比如“雍和宫祈福有用”，<br>p（A)表示它发生的概率。<br>B代表一个与之有关的事件，比如“我朋友，某甲，去年去了雍和宫祈福，结果他很快就升职了”，<br>P(A\B)则代表在B发生的情况下，A发生的概率。<br>类似地，p（B）表示B发生的概率，p(B\A)表示在A发生的情况下，B发生的概率。</p>
<p>这是一个“定理”，因为它不是哪个门派掌门人拍脑袋决定的思路，而是数学推导出来的（推导过程非常容易，P(A|B)<em> p(A)和p(B|A) </em>P（B) 都等于“A和B都发生的概率”）。并不是你“选择”使用这个公式，而是只要你认同概率论的基本法则，你就必须用这个公式。统计学家的分歧在于走这一步到底好不好，而不在于这一步应该怎么走。</p>
<p>如果你没怎么看懂上面说的技术细节，也请坚持往下读——最关键思想是：当B发生以后，有了这个新的证据，我们对A的信念就需要做一个调整，从p(A)变成p（A\B)了。你可以把A当成你对一般情况的理论预言，把B当成一次实验结果。有了新的实验结果，你就调整自己的理论预言。</p>
<p>现在我们就拿雍和宫祈福这个例子，来看看一个贝叶斯主义者是怎么更新自己的信念的。首先我们用基本的概率公式，把p（B)展开成P(B)=p（B\A）<em>p（A）+p（B\A-）</em>p（A-），其中A-表示A的相反事件，也就是“雍和宫不好使”，p（A-)=1-p（A）。这么做可以更精确地估算p(B)。这样贝叶斯定理要求我们先自行估计三个值：</p>
<p>你事先认为雍和宫有多好使，也就是p(A)；<br>p（A-)=1-p（A）<br>如果雍和宫好使，某甲因为祈福加持而升职的可能性，也就是P(B\A)；<br>如果雍和宫不好使，某甲不借助这个力量而升职的可能性，也就是p（B\A-)。</p>
<p>—个比较合理的估计差不多是这样的。某甲既然能升职，必然有过人之处，那么我们可以认为他在没有雍和宫加持的情况下也有50%的升职可能，所以P(B\A-)=0.5。雍和宫就算再灵验也不能有求必应，否则人人出来都成亿万富翁了，我们姑且假设，所谓“灵验”就是能让某甲升职的概率大大提升，这样我们可以估计P（B\A)=0.8。如果你事先对雍和宫的信念值是15%，那么p（A)=0.15。</p>
<p>这样根据贝叶斯定理计算，现在你的信念值应该是p（A\B)=0.22。<br>（<br>A、根据公式P(B)=p（B\A）<em>p（A）+p（B\A-）</em>p（A-），得到P（B）=0.545<br>B、根据公式P(A|B)<em> p(A)=p(B|A) </em>P（B) 计算得到p（A\B)=0.22）</p>
<p>玩这种数字有什么意义呢？这比听风就是雨可高级多了。如果我的信念值从15%变成22%，那就说明第一，我这个人听劝，有利证据进来了，我的确调高了我的信念值；第二，我这个人稳重，没有听到一个证据就立即发生世界观的彻底改变，过去不怎么信，现在还是不怎么信。听劝又稳重，既做到了开张圣听，也没有妄自菲薄，古代对贤人的要求也不过如此吧？</p>
<p>而且你可以继续调整信念。假设过了一年你听说另一个朋友某乙，水平与某甲相当，也去了雍和宫祈福升职，结果未能升职！这一次，p（A)=0.22。现在B表示“未能升职”，所以p（B\A）不再是0.8，而应该是0.2。p（B\A-)仍然是0.5。我们计算出，p（A\B）=0.1。</p>
<p>所以因为这一次不灵的事件，你应该把你对雍和宫的信念值从22%调低到10%。在数学上很容易证明，<strong>只要p（B\A)&gt;p(B\A-)，B事件就会使我们对事件A的信念值提升，反之则会降低。</strong> 这样有时候往上调有时候往下调，当你听说了很多证据之后，就有可能形成一个比较稳定的看法。对雍和宫这样的例子来说，经过几次祈福不好使的打击，很快你就应该不信了。<br>而如果我们对某件事的信念值非常非常低，那么即使强有力的证据也很难扭转我们的信念。现在我们来说一个贝叶斯定理的极端例子，这个例子堪称典故！</p>
<p>艾滋病毒（HIV)检测技术的准确度相当惊人。如果一个人真是HIV阳性，血液检测的手段有99.9%的把握把他这个阳性给检查出来而不漏网。如果一个人不携带HIV，那么检测手段的精度更高，达到99.99%——也就是说只有0.01%的可能性会冤枉他。</p>
<p>已知一般人群中HIV携带者的比例是0.01%。现在假设我们随便在街头找一个人给他做检查，发现检测结果是HIV阳性，那么请问，这个人真的携带HIV的可能性是多大呢？</p>
<p>在你回答之前，我先提供一点背景资料。德国马普研究所的心理学家曾经拿这道题考了好几百人，包括学生，数学家和医生。结果95%的大学生和40%的医生都给出了错误的答案。</p>
<p>我们使用贝叶斯定理。<br>A表示“这个人真的携带HIV”，<br>B表示“检测出HIV”，<br>那么根据现有条件，p（A）=0.01%，<br>p（B\A)=99.9%，<br>p（B\A-)=0.01%，带入公式，计算得到p（A\B)=50%！</p>
<p>答案是即使在这么高的检测准确度之下，哪怕这个人真的被检测到HIV阳性，他真有HIV的可能性也只有50%。</p>
<p>如果你脑子还没转过弯来，我们还有个直观的解释。假设我们随机地找一万个人来做实验。根据HIV病毒的分布，这一万人中应该只有一个人是真的携带HIV的。而由于我们的检测手段很强，这个人会被检测出来。但剩下的9999人都没有携带HIV，可是我们对没有携带HIV的人的检测精度是99.99%，也就是说有万分之一的可能性会冤枉一人。这样一来，我们的检测手段还会在9999人中冤枉一个人。</p>
<p>本来只有一人携带HIV，可是我们却检测出来两人。所以如果一个人被检测出HIV来，他真的携带HIV的可能性其实只有50%。</p>
<p>从根本上说，造成这种局面的原因在于HIV尽管名声很大，但其实是一种罕见的病毒，人群中只有万分之一的人感染。在这种情况下即使你的检测手段再高，也很有可能会冤枉人。</p>
<p>如果一个疾病比较罕见，那么你就不应该对阳性诊断太有信心。</p>
<p>由此我联想到中国历史特殊时期的“抓特务”行动。“特务”这个工作的要求，其实贵在精而不在多，再说国民党也没那么多钱养，真正的特务其实是很少的。如果我们看到一个人长得像特务，说话走路也像特务，我们有多大把握说他就是特务呢？上面这个例子告诉我们，“误诊率”可能相当高。“抓特务”，最好的办法是冒出来一个抓一个，最可怕的办法是搞“人人过关”。如果你搞“人人过关”，必然是一大堆冤假错案！</p>
<p>这就是冤假错案产生的数学原理，这也是为什么卡尔萨根说“超乎寻常的论断需要超乎寻常的证据”。</p>
<p>我自己最近的一次信念改变的经历是关于自动驾驶汽车的。2010年第一次听说Google正在试验一个相当完善的自动驾驶汽车系统，我不太相信。那时候很多人还在把驾驶当成一个人工智能非常难以做到的例子来说事儿——计算机别说驾驶汽车，连在停车场停车都停不好。别的公司试验自动驾驶，都是非常初级的技术：或者需要特殊的公路，或者需要一个人做司机在前面引路，后面无人驾驶车队必须一辆紧挨着一辆不能有别的车插队，模仿着往前走，根本谈不上应对复杂的交通路况。所以我当时判断可能记者没听懂专家的介绍，或者记者被忽悠了。</p>
<p>然而此后陆续看到很多关于Google这个项目的报道，越来越多细节被透露出来。这时候，虽然其他公司的自动驾驶项目仍然很初级，虽然家用吸尘机器人的行动路线仍然很愚蠢，但我已经非常相信Google的自动驾驶系统了。鉴于这个系统从未有过商业应用，我目前对它的相信程度大概是95%。这个信念值已经足以让我在写文章的时候假定这个自动驾驶系统真实存在。</p>
<p>据说中国曾经在历史特殊时期禁止教授贝叶斯统计学，可能因为那时候的人认为信念不容更改吧。至今有很多人是坚持信念不看证据的，甚至有了与自己信念相反的证据出来，他直接忽略这个证据，或者干脆说这是个阴谋，反而证明我的信念更正确了。还有一种情况是像雍正对年羹尧那样，要说信任就好得如胶似漆，要说不信就不听辩解直接赐死！像这样的二愣子性格，实在不太适合求知。正确的态度是不断根据新的事实来调整自己的观点。</p>
<p><strong>观点随事实改变，有胆有识，这就是贝叶斯定理的伟大原则。</strong></p>
<p>文章选自《智识分子》</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://xueqiu.com/8102984655/73644129" target="_blank" rel="external">贝叶斯定理的胆识</a><br><a href="http://blog.csdn.net/kesalin/article/details/40370325/" target="_blank" rel="external">从贝叶斯定理说开去</a><br><a href="http://mindhacks.cn/2008/09/21/the-magical-bayesian-method/" target="_blank" rel="external">数学之美番外篇：平凡而又神奇的贝叶斯方法</a><br><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_one.html" target="_blank" rel="external">贝叶斯推断及其互联网应用（一）：定理简介</a><br><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_two.html" target="_blank" rel="external">贝叶斯推断及其互联网应用（二）：过滤垃圾邮件</a><br><a href="http://www.ruanyifeng.com/blog/2012/10/spelling_corrector.html" target="_blank" rel="external">贝叶斯推断及其互联网应用（三）：拼写检查</a><br><a href="http://www.ruanyifeng.com/blog/2013/12/naive_bayes_classifier.html" target="_blank" rel="external">朴素贝叶斯分类器的应用</a><br><a href="http://blog.csdn.net/pongba/article/details/2915005" target="_blank" rel="external">机器学习与人工智能学习资源导引</a><br><a href="http://mindhacks.cn/2007/12/02/probability-theory-in-evolution/" target="_blank" rel="external">数学之美番外篇：进化论中的概率论</a><br><a href="http://www.matrix67.com" target="_blank" rel="external">Matrix67: The Aha Moments</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201108/bg2011082507.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;贝叶斯定理的威力之一在于能让我们由已知的概率以及手头的信息去推断未知的概率。&lt;/p&gt;
&lt;p&gt;概率论只不过是把常识用数学公式表达了出来。——拉普拉斯&lt;/p&gt;
    
    </summary>
    
      <category term="Math" scheme="http://ipcreator.me/categories/Math/"/>
    
    
      <category term="Bayes&#39; theorem" scheme="http://ipcreator.me/tags/Bayes-theorem/"/>
    
  </entry>
  
  <entry>
    <title>Data Novo</title>
    <link href="http://ipcreator.me/2017/03/21/BusinessAI/datanovo/"/>
    <id>http://ipcreator.me/2017/03/21/BusinessAI/datanovo/</id>
    <published>2017-03-21T07:07:18.000Z</published>
    <updated>2017-03-27T10:11:26.139Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.datanovo.com/landing/img/logo.png" alt=""></p>
<p>DataNovo Offers Keyword-Free Prior Art Search, Product Assessment on Infringement,<br>and Legal Analytics on Every U.S. Patent.</p>
   <a id="more"></a>
<h2 id="DataNovo-Offers-Keyword-Free-Prior-Art-Search"><a href="#DataNovo-Offers-Keyword-Free-Prior-Art-Search" class="headerlink" title="DataNovo Offers Keyword-Free Prior Art Search"></a>DataNovo Offers Keyword-Free Prior Art Search</h2><p>With just the patent number, DataNovo’s powerful machine learning system identifies the most relevant prior art against the patent. Results include uncited patents and non-patent literature.</p>
<p><img src="http://www.datanovo.com/landing/img/cinema-1.png" alt=""></p>
<h2 id="DataNovo-Offers-Product-Assessment-on-Infringement"><a href="#DataNovo-Offers-Product-Assessment-on-Infringement" class="headerlink" title="DataNovo Offers Product Assessment on Infringement"></a>DataNovo Offers Product Assessment on Infringement</h2><p>Describe your product in as few as six words. DataNovo then analyzes your product to generate a list of U.S. patents that might cover that product to help you avoid potential infringement.</p>
<p><img src="http://www.datanovo.com/landing/img/cinema-2.png" alt=""></p>
<h2 id="DataNovo-Offers-Actionable-Analytics"><a href="#DataNovo-Offers-Actionable-Analytics" class="headerlink" title="DataNovo Offers Actionable Analytics"></a>DataNovo Offers Actionable Analytics</h2><p>DataNovo offers patent strength analytics and core business metrics on each U.S. patent to help you make informed decisions in courtrooms and boardrooms.</p>
<p><img src="http://www.datanovo.com/landing/img/cinema-3.png" alt=""></p>
<h2 id="FOR-LAW-FIRMS-AND-PRACTICING-ATTORNEYS"><a href="#FOR-LAW-FIRMS-AND-PRACTICING-ATTORNEYS" class="headerlink" title="FOR LAW FIRMS AND PRACTICING ATTORNEYS"></a>FOR LAW FIRMS AND PRACTICING ATTORNEYS</h2><p>Legal practitioners turn to DataNovo for conducting the most efficient and thorough prior art searches for U.S. patent. Simply enter the a U.S. patent number, and DataNovo then processes the patent and generate all relevant prior art search results in seconds.</p>
<h2 id="FOR-COMPANIES-AND-STARTUPS"><a href="#FOR-COMPANIES-AND-STARTUPS" class="headerlink" title="FOR COMPANIES AND STARTUPS"></a>FOR COMPANIES AND STARTUPS</h2><p>Companies and startups use DataNovo to guide their litigation strategy when filing or defending against patent infringement suits, and to institute intelligent, cost-saving measures to avoid unnecessary and often expensive legal proceedings.</p>
<h2 id="FOR-IP-STAKEHOLDERS-AND-COLLABORATORS"><a href="#FOR-IP-STAKEHOLDERS-AND-COLLABORATORS" class="headerlink" title="FOR IP STAKEHOLDERS AND COLLABORATORS"></a>FOR IP STAKEHOLDERS AND COLLABORATORS</h2><p>Investors (venture capitalists, investment banks), auditors, advisors, innovators, and influencers subscribe to DataNovo to discover new and existing opportunities in patent financing, revenue generation, and equity positions for patents that have unrealized potentials.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.datanovo.com/landing/img/logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;DataNovo Offers Keyword-Free Prior Art Search, Product Assessment on Infringement,&lt;br&gt;and Legal Analytics on Every U.S. Patent.&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Data Novo" scheme="http://ipcreator.me/tags/Data-Novo/"/>
    
      <category term="Patent" scheme="http://ipcreator.me/tags/Patent/"/>
    
  </entry>
  
  <entry>
    <title>CSDN</title>
    <link href="http://ipcreator.me/2017/03/21/Program/csdn/"/>
    <id>http://ipcreator.me/2017/03/21/Program/csdn/</id>
    <published>2017-03-21T06:54:18.000Z</published>
    <updated>2017-03-27T04:41:26.853Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>2000年就与CSDN结下了不解之缘，见证了其发展与壮大，下一个AI时代，共同学习与成长。</p>
</blockquote>
<p><a href="http://geek.csdn.net/news/detail/188197" target="_blank" rel="external">IBM PowerAI人工智能12小时编程马拉松大赛——“我是大侦探”</a></p>
<p><img src="http://img.blog.csdn.net/20170321135021107?" alt=""></p>
<p>CSDN总编孟迎霞对于有志于向人工智能领域发展的技术人员提出了三点建议：一是坚定自己要到哪里去。人工智能领域范畴庞大，涉及行业多，不论是专业化人工智能还是通用普适化人工智能，带来众多机遇，开发者要<strong>选定方向和路径</strong>。第二，要<strong>善于利用巨头和工具的资源</strong>。第三，开发者要<strong>沉下心来苦练内功，抓住机会</strong>。</p>
   <a id="more"></a>
<p><a href="http://geek.csdn.net/news/detail/139455" target="_blank" rel="external">TensorFlow 贡献者唐源：掌握 Google 深度学习框架的正确姿势</a></p>
<p><img src="http://img.blog.csdn.net/20170222150432480" alt=""><br>唐源，美国 Uptake 数据科学家，带领团队建立用于多个物联网领域的数据科学引擎进行条件和健康监控，同时建立公司的预测模型引擎，现已被用于航空、能源等大型机械领域。是 TensorFlow 和 DMLC 的成员，TensorFlow、XGBoost、MXNet 等软件的 committer，曾荣获谷歌 Open Source Peer Bonus。在美国宾州州立大学获得荣誉数学学位，曾在本科学习期间成为创业公司 DataNovo 的核心创始成员，研究专利数据挖掘、无关键字现有技术搜索、策略推荐等。</p>
<h2 id="CSDN：对于数学功底不是很好的程序员，如果想掌握深度学习，甚至成为数据科学家，您有什么好的建议？"><a href="#CSDN：对于数学功底不是很好的程序员，如果想掌握深度学习，甚至成为数据科学家，您有什么好的建议？" class="headerlink" title="CSDN：对于数学功底不是很好的程序员，如果想掌握深度学习，甚至成为数据科学家，您有什么好的建议？"></a>CSDN：对于数学功底不是很好的程序员，如果想掌握深度学习，甚至成为数据科学家，您有什么好的建议？</h2><p>唐源：深度学习其实一开始也就是从一个简单的神经网络发展来的。如果想扎扎实实做这一方面的研究，当然数学越好以及知识越广能够带你走的更远。但是如果没有很好的数学功底，走应用的路线也是非常好的，毕竟也不是所有的研究都有很大的影响力或者用到了很高深的数学，很多时候只要能够读懂大概的算法思路，知道这个算法在什么样的应用中适用就行了。现在数据科学家的门槛其实也是越来越低，以前是有 Scikit-learn 的帮助，现在是有着各种深度学习框架，甚至最近 TensorFlow 在机器学习应用方面的侧重，比如说大力研发高阶的 <strong>Estimator API</strong>，也更是让更多人能够更有效地学习和更快地进入到这个行业当中。</p>
<h2 id="CSDN：如果没有数学基础的限制，能否给刚入门深度学习的开发者提供一些学习和实践经验？"><a href="#CSDN：如果没有数学基础的限制，能否给刚入门深度学习的开发者提供一些学习和实践经验？" class="headerlink" title="CSDN：如果没有数学基础的限制，能否给刚入门深度学习的开发者提供一些学习和实践经验？"></a>CSDN：如果没有数学基础的限制，能否给刚入门深度学习的开发者提供一些学习和实践经验？</h2><p>唐源：可以对这些深度学习的算法和架构都进行了解，要知道每个算法都适用于哪些类型的运用，基础好的话可以直接读一些好的会议以及期刊论文，关注一下前沿的研究。一定要多积累实战经验，可以多参与项目，参与像 Kaggle 这样的竞赛，最近的 Data Science Bowl 就是个很好的切入点，可以多融入到论坛中的讨论，来学习学习大家的思路和方法。如果对模型具体的实现感兴趣的话，可以尝试着读一读源代码，因为这不仅能帮助理解模型，也能了解到对于这个模型的实现，具体有哪些需要注意的地方，比如说性能上为什么这样处理会更好，API 为什么这样设计，等等。</p>
<h2 id="CSDN：如果用户已经使用-Spark-作为大数据处理平台，也用了-MLlib，有什么理由是他必须使用-TensorFlow-的？"><a href="#CSDN：如果用户已经使用-Spark-作为大数据处理平台，也用了-MLlib，有什么理由是他必须使用-TensorFlow-的？" class="headerlink" title="CSDN：如果用户已经使用 Spark 作为大数据处理平台，也用了 MLlib，有什么理由是他必须使用 TensorFlow 的？"></a>CSDN：如果用户已经使用 Spark 作为大数据处理平台，也用了 MLlib，有什么理由是他必须使用 TensorFlow 的？</h2><p>唐源： TensorFlow 提供的不仅仅只是现有的一些比较热门的模型实现，深度学习和机器学习这个领域的发展是非常快的，很多问题往往不是简单的现有模型能够解决的，最重要的是一个框架的灵活性和可拓展性一定是不能丢的，Spark 的 MLlib 很优秀地实现了一些工业界需求比较大的一些算法，但是 TensorFlow 能提供的不仅仅是这些，<strong>它提供了很多建立机器学习和深度学习必有的元素，比如，TensorFlow 有着自己的 metrics、losses、optimizers、layers 等模块来帮助建立各种各样的深度学习模型，它也提供了许多高阶的 Estimator API 来帮助用户更好地搭建和定义自己的分布式的模型，FeatureColumn 模块来帮助数据科学工作中很重要的特征工程，DataFrame 和 QueueRunner 等模块来更好地实现数据的预处理，提取批量队列，等等。另外，TensorFlow 省去了在各种不同的设备（比如 CPU、GPU、TPU）上的实现，用户只需要集中精力调用已经实现好的 API 就可以在各种设备上进行自动优化以及资源分配，这些都是 Spark 目前还不能或者是很难做到的。最近雅虎开源的 TensorFlowOnSpark 也挺有意思，可以在现有的 Spark/Hadoop 分布式集群的基础上部署 TensorFlow 的程序，这样可以避免数据在已有 Spark/Hadoop 集群和深度学习集群间移动，HDFS 里面的数据能够更好地输入进 TensorFlow 的程序当中。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2000年就与CSDN结下了不解之缘，见证了其发展与壮大，下一个AI时代，共同学习与成长。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://geek.csdn.net/news/detail/188197&quot;&gt;IBM PowerAI人工智能12小时编程马拉松大赛——“我是大侦探”&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170321135021107?&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;CSDN总编孟迎霞对于有志于向人工智能领域发展的技术人员提出了三点建议：一是坚定自己要到哪里去。人工智能领域范畴庞大，涉及行业多，不论是专业化人工智能还是通用普适化人工智能，带来众多机遇，开发者要&lt;strong&gt;选定方向和路径&lt;/strong&gt;。第二，要&lt;strong&gt;善于利用巨头和工具的资源&lt;/strong&gt;。第三，开发者要&lt;strong&gt;沉下心来苦练内功，抓住机会&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="CSDN" scheme="http://ipcreator.me/tags/CSDN/"/>
    
  </entry>
  
  <entry>
    <title>Psychology</title>
    <link href="http://ipcreator.me/2017/03/20/MyView/psychology/"/>
    <id>http://ipcreator.me/2017/03/20/MyView/psychology/</id>
    <published>2017-03-20T13:12:06.000Z</published>
    <updated>2017-03-27T08:16:38.203Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://media.xinli001.com/images/logo3.png" alt=""><br>文章来源：<a href="http://www.xinli001.com" target="_blank" rel="external">壹心理</a></p>
<p><img src="http://om280wrd3.bkt.clouddn.com/psychology.jpg" alt=""></p>
<blockquote>
<p>一念一天堂，一念一地狱，成长的道路上，你并不孤单。</p>
</blockquote>
<a id="more"></a>
<h2 id="认知偏误列表"><a href="#认知偏误列表" class="headerlink" title="认知偏误列表"></a><a href="https://zh.m.wikipedia.org/w/index.php?title=%E8%AA%8D%E7%9F%A5%E5%81%8F%E8%AA%A4%E5%88%97%E8%A1%A8&amp;article_action=watch" target="_blank" rel="external">认知偏误列表</a></h2><p>认知偏误是在某些特定情况下的特定的思考、行为倾向，会导致理性或判断产生系统性偏误，这些现象广泛受到心理学与行为经济学研究。</p>
<p>虽然这些偏误是重复研究确认的，然而关于如何分类与解释，一直存在争论。[1]大脑有一些处理资讯的规则，以增进决策与判断效率，这些“心理捷径”称作捷思，捷思有时会产生一些不好的效应，这些不好的效应称作认知偏误。[2][3]判断与决策的偏误也可能是动机导致，例如信念受到一厢情愿的想法扭曲。有些偏见有多种认知（“冷”）或动机（“热”）的解释，两种效应也可能同时发生。[4][5]</p>
<p>一些偏误是否该视为真正的不理性、是否可能导致有用的态度与行为，是有争议的。例如，要了解他人时，人们常会问引导性问题，看起来是用于应证自己对他人的假设，是一种偏误；但有些人认为这种确认性偏误应该视作社交技巧（英语：Social skills），用于建立与他人的连结。[6]</p>
<p>绝大多数关于认知偏误的研究都是以人类为主体。然而，也有一些发现来自非人动物，例如从老鼠、鸽子、猴子身上也能观察到双曲折现（英语：Hyperbolic discounting）现象。[7]</p>
<h2 id="决策、信念与行为偏误"><a href="#决策、信念与行为偏误" class="headerlink" title="决策、信念与行为偏误"></a>决策、信念与行为偏误</h2><p>这些偏误多半会影响信念的形成、商业与经济决策、以及其他一般的人类行为。它们是可复制与再现的，面临特定情境时，一般可预期人们会有相应的偏差倾向。</p>
<p>名称    原文    描述<br>不明确性效应（英语：Ambiguity effect）或厌恶不明确（英语：averse to ambiguity）    Ambiguity effect    决策时倾向避开资讯不足的选项。 [8]<br>锚定效应    Anchoring effect; Focalism    为不熟悉事物估值时，会把熟悉的类似事物或不久前接触到的无关数值当做“锚”，估出来的数值会大大倾向“锚”。[9][10]<br>注意力偏误（英语：Attentional bias）    Attentional bias    平时常想的事，会影响我们的感知。[11]<br>可得性捷思法（英语：Availability heuristic）    Availability heuristic    容易想到的事，其发生概率会受高估，然而一件事是否容易想到还受发生多久、激起情绪的程度等因素影响，无法反映实际的发生概率。[12]<br>可获性层叠（英语：Availability cascade）    Availability cascade    一件事越常被公开谈论，就越加相信其真确性（类似“三人成虎”）。[13]<br>逆火效应    Backfire effect    遇上与自身信念抵触的观点或证据时，除非它们足以完全摧毁原信念，否则会忽略或反驳它们，原信念反而更加强化。[14]<br>从众效应    Bandwagon effect    倾向做很多人做的事或相信很多人相信的事。[15]<br>信念偏误（英语：Belief bias）    Belief bias    由于相信结论，而认为推理出该结论的过程是有道理、合逻辑的。[16]<br>偏见盲点（英语：Bias blind spot）    Bias blind spot    认为自己比其他人更能辨识认知偏误，也较不易受影响。[17]<br>啦啦队效应（英语：Cheerleader effect）    Cheerleader effect    处在优秀的团体会比单独看起来更优秀。[18]<br>支持选择偏误（英语：Choice-supportive bias）    Choice-supportive bias    对自己先前选择的评价会比实际上更好。[19]<br>集群错觉（英语：Clustering illusion）    Clustering illusion    过度期待从小样本或小型测试中发现的规律，然而这些小样本或小型测试是从大样本随机抽取，大样本往往并无这种规律。[10]<br>舒适区效应（英语：Comfort zone effect）    Comfort zone effect    对于过去常用的方案，高估效益或成功机会；对于过去少用的方案，低估效益或成功机会。[来源请求]<br>确认偏误    Confirmation bias    关注、寻找、诠释、记忆资讯的方向多半是能确认自己成见的方向。[20]<br>相合性偏误（英语：Congruence bias）    Congruence bias    直接检验假设，却没想到要检验其他可能的假设。[10]<br>保守倾向或退缩偏误（英语：Regressive bias）    Conservatism; Regressive bias    倾向保守中庸，低估高价值高或然率的事而高估低价值低或然率的事。[21][22][23]<br>保守倾向 (贝叶斯)（英语：Conservatism (Bayesian)）    Conservatism (Bayesian)    新证据出现时，对既有信念的修正幅度不足。[21][24][25]<br>对比效应（英语：Contrast effect）    Contrast effect    感受特质的程度主要是受与其他相关事物的对比程度影响，而非受其实际程度影响。[26]<br>知识的诅咒    Curse of knowledge    懂得多的人非常难用懂得少的人的角度思考问题。[27]<br>诱饵效应（英语：Decoy effect）    Decoy effect    评估对A与B事物的偏好时，如有个C与B相近却略逊一筹，就会觉得B事物更好。（即以C为诱饵）<br>既视感    Déjà vu    对某些事物有强烈的熟悉感，似乎曾经接触过，且能预先想到接下来会发生什么事。<br>面额效应（英语：Denomination effect）    Denomination effect    即使金钱总额相同，带小面额（如多量硬币）比带着大面额（如少量纸钞）更容易消费掉。[28]<br>差异偏差（英语：Distinction bias）    Distinction bias    相较于分开比较，两件事物放在一起比较，差异会显得更大。[29]<br>过程时间忽视（英语：Duration neglect）    Duration neglect    评价不愉快及痛苦的经验时，其持续时间影响不大。（参见峰终法则）<br>移情隔阂（英语：Empathy gap）    Empathy gap    情感冷淡时，低估他人情感的强烈程度；情感强烈时，高估他人情感的强烈程度。<br>原赋效应或禀赋效应    Endowment effect    拥有或即将拥有某物品或资产时，对其价值的评估会比没有时高出许多，因而不愿失去或放弃它。[30]<br>本质主义    Essentialism    认为人与事物有一些不可或缺的本质，并据此为它们分类，其他的分类方式是错误的。[31]<br>极端预期（英语：Exaggerated expectation）    Exaggerated expectation    实际上的情况通常不如我们所预期的极端。[21][32]<br>功能固着（英语：Functional fixedness）    Functional fixedness    受物品的一般用途局限，无法想到用特别的方式利用物品。<br>聚焦效应    Focusing effect    过分关注事情的某些明显面向、忽略不明显面向，导致不恰当的预期。[33]<br>佛瑞效应或巴纳姆效应    Forer effect; Barnum effect    人们会把他们认为是为自己量身定做的人格描述评价为高度准确，而这些描述往往十分模糊及普遍，能放诸四海皆准适用于很多人。<br>框架效应    Framing effect    同一资讯以不同方式呈现方式会带来不同想法，例如“有十分之九的存活率”和“有十分之一的死亡率”。<br>频率错觉    Frequency illusion    因最近注意到一件原先没注意到的事，就觉得这件事到处都在发生。（参见近因错觉（英语：Recency illusion）及选择偏误（英语：Selection bias））[34]<br>难易效应（英语：Hard-easy effect）    Hard-easy effect    高估自认困难之事的难度，低估自认简单之事的难度。[21][35][36][37]<br>后见之明偏误    Hindsight bias    又称“我早就知道了”、“马后炮”、“事后诸葛”。在事情发生或发展后，以为自己事前就能预测其发生与发展。[38]<br>敌对媒体效应（英语：Hostile media effect）    Hostile media effect    对于立场与自己不同的媒体，总认为它们有偏见、不客观。<br>当下偏误（英语：Current moment bias）、现时偏误、或双曲折现（英语：Hyperbolic discounting）    Current moment bias; Present-bias; Hyperbolic discounting    看重当下利益、低估长远利益。得到利益前的延迟时间越长，对利益的价值评估便打越多折扣，两者关系近似于双曲线。[39]<br>可辨识受害者效应（英语：Identifiable victim effect）    Identifiable victim effect    对于少数而容易辨识的受害者或潜在受害者反应过大，而对多数而不易辨识的受害者或潜在受害者反应过小。[40]<br>宜家效应（英语：IKEA effect）    IKEA effect    对于需要自行组装的东西给予不成比例的高评价，而不管其实际品质。此称呼出自于经常贩售组装家具的宜家。<br>控制的错觉（英语：Illusion of control）    Illusion of control    高估自己对外在事件的影响力，认为事情是受自己控制或影响，但实际上可能与自己毫无关系。[41]<br>效度的错觉（英语：Illusion of validity）    Illusion of validity    高估面谈或直接观察的效度且能用于提供预测，即使证据指出它们影响甚微。<br>错觉相关（英语：Illusory correlation）    Illusory correlation    认为两件事应该有关系时，便会在检视经验与数据时觉得它们经常一起发生，即使它们一起发生纯粹是随机现象。 [42][43]<br>影响力偏误（英语：Impact bias）    Impact bias    高估感觉的强度或持续时间。[44]<br>资讯偏误（英语：Information bias）    Information bias    倾向寻求更多资讯以做出决策，即使寻求的资讯对决策没有帮助。[45]<br>沉没成本谬误或不理性增值    Sunk cost fallacy; Irrational escalation    由于先前已在某事上投资很多，即使新证据显示那是不好的选择，仍倾向于加重投资。<br>妄下结论（英语：Jumping to conclusions）    Jumping to conclusions    根据少许的资讯即做出判断与决策。如诛心、预言、贴标签等等。<br>公正世界理论    Just-world hypothesis    相信世界是公平的，发生在身上的都是应得的，把难以解释的不公平归责于受害者的报应。<br>少即是好的效应（英语：Less-is-better effect）    Less-is-better effect    分开评估时倾向选择较小组的东西，一起评估时倾向选择较大组的东西。<br>损失趋避    Loss aversion    认为放弃一件事物的效益损失大于得到一件事物的效益所得。（参见沉没成本与原赋效应）[46]<br>多看效应或单纯接触效应    Mere exposure effect    对熟悉的人与事产生过多的好感。[47]<br>货币错觉    Money illusion    专注于货币名目上（表面上）的价值，而非其实质购买力。[48]<br>道德认证效应（英语：Moral credential effect）    Moral credential effect    由于得到了某些高道德的评价或认证，而认为自己做得够好，反而在其他面向做了相反的事。例如投身环保活动并受到表扬的人，往往忽略了许多自己的不环保行为。<br>正面效应（英语：Positivity effect）与负面效应（英语：Negativity effect）    Positivity effect; Negativity effect    评价喜欢的人的行为时，把他们做好事归因于内在本质，而把他们做坏事归因于环境因素。评价不喜欢的人的行为时，把他们做好事归因于环境因素，而把他们做坏事归因于内在本质。<br>负面偏误（英语：Negativity bias）    Negativity bias    容易回想消极的回忆而不易回想积极的。 [49]<br>忽略可能性（英语：Neglect of probability）    Neglect of probability    对于不确定的事，无法准确评估其发生概率，不是完全无视，便是过分高估。[50]<br>正常化偏误（英语：Normalcy bias）    Normalcy bias    根据过去的经验了解情况，低估大灾难的可能性及其影响力，因而平时没有预做准备，或在灾难发生时轻忽严重性、缺乏应变。<br>不作为偏误（英语：Omission bias）    Omission bias    认为主动作为导致伤害比被动不作为导致伤害更糟糕、更不道德，即使后者伤害与前者相当或比后者更多。[51]<br>乐观偏误（英语：Optimism bias）    Optimism bias    低估负面事件发生在自己身上的可能性，相信自己比其他人更不容易遇到不好的事（参见一厢情愿）。[52][53]<br>鸵鸟效应（英语：Ostrich effect）    Ostrich effect    忽视明显的（负面）情况。<br>结果偏误（英语：Outcome bias）    Outcome bias    评价决策好坏时，根据其最终结果，而不是根据下决策当时的决策品质。<br>过度自信效应（英语：Overconfidence effect）    Overconfidence effect    过度相信自己回答、决策、判断的正确性。[21][54][55][56]<br>空想性错视（英语：Pareidolia）    Pareidolia    从模糊、随机的影像中看出有意义的东西，例如从云朵中看出脸孔。有时也延伸指听觉，如录音带倒播时听出特别的讯息。<br>悲观偏误（英语：Pessimism bias）    Pessimism bias    高估负面事件发生在自己身上的可能性，相信自己比其他人更容易遇到不好的事。患有抑郁症的人尤其明显。（参见悲观主义）<br>规划谬误（英语：Planning fallacy）    Planning fallacy    低估完成一件事需要的时间。[44]<br>正面结果偏误（英语：Positive outcome bias）或情价效应（英语：Valence effect）    Positive outcome bias; Valence effect    认为好事比坏事更可能发生。<br>购后合理化（英语：Post-purchase rationalization）    Post-purchase rationalization    购买后把之前的购买决定合理化，即使买下的产品太过昂贵或发现瑕疵。<br>支持创新偏误（英语：Pro-innovation bias）    Pro-innovation bias    对新技术过度乐观、高估其实用性，忽视其限制及弱点。<br>假确定性效应（英语：Pseudocertainty effect）    Pseudocertainty effect    预期结果是正面就选择避开风险，预期结果是负面就选择寻求风险。[57]<br>对抗心理（英语：Reactance）或抗拒心理（英语：Reactance）    Reactance    他人要求做或不做某事时，有做相反事的冲动，尤其这要求对自由、自主造成威胁时。（参见逆反心理 ）。<br>反动贬低（英语：Reactive devaluation）    Reactive devaluation    贬低敌对者的要求或方案，或当敌对者在某事让步时，觉得此时不再有吸引力。<br>新词错觉（英语：Recency illusion）    Recency illusion    感觉某些字词或语句是新发明的，然而它实际上历史悠久。例如英语用“they”表达单数不确定性别对象、“you and I”（而非you and me）。<br>自制偏误（英语：Restraint bias）    Restraint bias    高估自己对诱惑的自制力。<br>韵律当理由效应（英语：Rhyme as reason effect）    Rhyme as reason effect    认为有韵律的语句比较有道理。<br>风险代偿（英语：Risk compensation）或佩兹曼效应（英语：Peltzman effect）    Risk compensation; Peltzman effect    感觉情况安全时，会倾向冒更大的风险。<br>选择性注意或选择性知觉（英语：Selective perception）    Selective attention; Selective perception    由于对人或事有特定期待，因而倾向于注意符合期待的事件，忽略或忘却不符合期待的事件。<br>塞麦尔维斯反射（英语：Semmelweis reflex）    Semmelweis reflex    条件反射般地否定、拒绝新证据或新知识，因其抵触现有的常规、信仰或价值观。[25]<br>社会比较偏误（英语：Social comparison bias）    Social comparison bias    抗拒雇用、提拔与自己有相似专长的人。[58]<br>安于现状偏误    Status quo bias    倾向于维持现状。（参见损失趋避、原赋效应、系统正当化）[59][60]<br>刻板印象    Stereotyping    根据事物的所属类别或群体判断其特质，而忽略其独特性。<br>斯德哥尔摩症候群    Stockholm syndrome    被害者认同加害者的某些观点和想法，并觉得自己不再受到威胁。<br>分开加总效应（英语：Subadditivity effect）    Subadditivity effect    评估可能性时，对整体直接评估低于对各部分分别评估再加总。[61]<br>主观验证或主观确认（英语：Subjective validation）    Subjective validation    相信某事是对的，就感觉它是对的。也会把巧合的事当做有关联。<br>幸存者偏差    Survivorship bias    专注于从某个过程中存活下来的人或事寻找弱点意欲补强，却忽略了最大的弱点更可能在未存活的人或事之中。<br>省时偏误（英语：Time-saving bias）    Time-saving bias    低速行进时，低估可节省的时间或高估会损失的时间；高速行进时，高估可节省的时间或低估会损失的时间。<br>单位偏误    Unit bias    认为计量单位反映合理程度。例如认为一瓶、一碗、一盘食物是最合理的食用量。[62]<br>熟悉路线效应（英语：Well travelled road effect）    Well travelled road effect    低估采用熟悉路线的时间，高估采用陌生路线的时间。<br>只看整体效应（英语：Whole only effect）    Whole only effect    选项为整套方案时，忽略个别部分有协商的可能。<br>零风险偏误（英语：Zero-risk bias）    Zero-risk bias    偏好把小风险降为零（例如 1% → 0%），胜过把大风险降低更多（例如 5% → 2%）。<br>零和捷思（英语：Zero-sum heuristic）    Zero-sum heuristic    直觉判定一个情况是零和的，但实情未必如此。零和一词源于博弈论，是指成功与失败期望值的总和为零。[63][64]</p>
<h2 id="社会偏误"><a href="#社会偏误" class="headerlink" title="社会偏误"></a>社会偏误</h2><p>这些偏误大多是由归因偏误导致。</p>
<p>名称    原文    描述<br>行为者-观察者偏误（英语：Actor-observer bias）    Actor-observer bias    解释他人行为归因于内在个性，解释自己行为则归因于环境影响（​​参见基本归因错误）。<br>防卫性归因（英语：Defensive attribution hypothesis）    Defensive attribution hypothesis    受害者与自己越相似，或后果越惨重，对加害者的谴责就越多。<br>达克效应    Dunning–Kruger effect    能力过差的人由于无法分辨能力好与能力差的不同，因而认为大家都一样。[65]<br>自我中心偏误（英语：Egocentric bias）    Egocentric bias    把集体行动的结果归因于自己，多过其他人会归因的程度。<br>外在激励偏差    Extrinsic incentives bias    认为他人需要外在激励才会做好，而自己可以靠内在激励做好。基本归因错误的反例。<br>错误共识效应    False consensus effect    高估别人对自己的认同程度，认为所有人以同一方式思考。[66]<br>基本归因错误    Fundamental attribution error    解释他人行为时，归因于内在特质（一定是他有这样的人格，才做出这样的行为），而非外在情境（也许是情势所迫，或这个场所有特殊的潜规则）。[67]<br>群体归因错误    Group attribution error    把个体的特质当作其所属群体的特质，或把个体的行为当做其所属群体的偏好。<br>团体迷思    Groupthink    又称集体错觉。团体在决策过程中，由于成员倾向让自己的观点与团体一致，因而令整个团体缺乏不同的思考角度，不能进行客观分析。<br>月晕效应或晕轮效应    Halo effect    评价他人时，以整体观感评断特定的能力、素质。（参见刻板印象）[68]<br>认知不对称的错觉（英语：Illusion of asymmetric insight）    Illusion of asymmetric insight    认为自己比其他人懂得更多。[69]<br>外部机构错觉    Illusion of external agency    由于对外部机构有主观喜好，而认为其资讯是有影响力的、有洞察力的、仁慈的。<br>洞悉的错觉（英语：Illusion of transparency）    Illusion of transparency    认为自己很容易被他人看透，或认为自己很容易看透他人。<br>优于常人效应（英语：Better-than-average effect）或优越感偏误（英语：Superiority bias）或    Better-than-average effect; Superiority bias; Illusory superiority    高估自己的优点、低估自己的缺点。[70]<br>群内偏见    Ingroup bias    认为对方属于自己团体，便给予较好的待遇。<br>道德运气    Moral luck    评价他人行为的道德时，根据结果而非根据行为时的情境。<br>素朴犬儒主义（英语：Naive cynicism）    Naïve cynicism    认为其他人比自己更自我中心。<br>素朴实在论（英语：Naïve realism）    Naïve realism    相信自己所见所闻即是真相、是客观且不带偏见的，认为这是显而易见的事实，理性人一定会同意自己，不同意的人一定是资讯不足、懒惰、不理性或有偏见。<br>外团体同质性偏见    Outgroup homogeneity bias    认为自己群体的成员比较多样化，而外部群体的成员是相当单一的。[71]<br>投射偏误（英语：Projection bias）    Projection bias    不自觉地以为他人（或未来的自己）和（现在的）自己有相似的情感、思想与价值观。 [72]<br>自利偏误    Self-serving bias    将成功归因于自己，而将失败归因于环境。（参见基本归因错误）[73]<br>共有资讯偏误（英语：Shared information bias）    Shared information bias    团队讨论倾向花较多时间与精力讨论所有成员都知道的事（即共有资讯），而花较少时间讨论较少成员知道的事。[74]<br>系统正当化（英语：System justification）或制度正当化（英语：System justification）    System justification    人们倾向于喜好与捍卫现有的社会、经济、政治安排，贬低其他方案，即使这样会犠牲个人或群体利益。（参见安于现状偏误）<br>性格归属偏误（英语：Trait ascription bias）    Trait ascription bias    认为自己的个性、行为、绪绪是多变的，而他人是一成不变且容易预测的。（参见外团体同质性偏见）<br>终极归因错误    Ultimate attribution error    把问题归因于整个群体，而非群体中的个体。<br>差于常人效应（英语：Worse-than-average effect）    Worse-than-average effect    对于高难度的事，认为自己比一般人差。是优于常人效应的反例。[75]</p>
<p>##记忆错误与偏误</p>
<p>在心理学和认知科学中，记忆偏误是一种认知偏误，导致记忆的强化、弱化（包括能否想起的机会、想起所需的时间，或两者皆有），或者记忆内容的改变。记忆偏误有很多种，如下：</p>
<p>名称    原文    描述<br>怪异效应（英语：Bizarreness effect）    Bizarreness effect    怪异的事比寻常的事更容易记住。<br>支持选择偏误（英语：Choice-supportive bias）    Choice-supportive bias    回顾自己做过的选择时，倾向认为是明智的（参见支持选择偏误）。<br>改变偏误（英语：Change bias）    Change bias    参与一件事的改变后，不易回忆过去的情况。[76]<br>童年失忆症（英语：Childhood amnesia）    Childhood amnesia    难以回忆四岁以前的事。<br>保守倾向或退缩偏误（英语：Regressive bias）    Conservatism; Regressive bias    记忆会倾向中庸不极端，把高价值高或然率的事记成比实际低，把低价值低或然率的事记成比实际高。[22][23]<br>一致性偏误（英语：Consistency bias）    Consistency bias    记忆中他人过去的态度与行为会变得像目前的态度与行为。[77]<br>情境效应（英语：Context effect）    Context effect    某情境中的记忆在其他情境下较不易回想。<br>跨种族效应    Cross-race effect    难以分辨其他种族的人。<br>潜抑记忆（英语：Cryptomnesia）    Cryptomnesia    接触后记得某些影像或语句，却不记得是看来听来的，甚至会误以为是自己原创，造成剽窃的争议。[76]<br>自我中心偏误（英语：Egocentric bias）    Egocentric bias    回忆中的自己会美化，例如记忆中自己的考试成绩比实际更好。<br>情感衰退偏误（英语：Fading affect bias）    Fading affect bias    负面、不愉快的记忆比正面、愉快的记忆更快淡忘。[78]<br>虚假记忆（英语：False memory）或虚谈（英语：Confabulation）    False memory; Confabulation    产生虚构的事填补记忆空白，即使没有欺骗意图。例如伪造某人的幼年照片给他看，他往往能说出以前做那些事的过程与回忆，但实际上他根本没做过。常见于记忆障碍的患者。<br>自我生产效应（英语：Generation effect）    Self-generation effect    自己生产的资讯记得比较清楚，他人生产的则容易淡忘。<br>谷歌效应    Google effect    容易从网络上搜寻到的资讯比较容易遗忘。本词源自于著名的网络搜索引擎谷歌。<br>幽默效应    Humor effect    幽默的事比不幽默的事更容易记住，可能的解释是幽默的事有较长的认知处理时间，或造成较多的情绪激发。[来源请求]<br>真相错觉效应（英语：Illusion of truth effect）    Illusion of truth effect    人们倾向认为听过的是真的（即使没意识到听过），而不管该陈述实际上是否有效。换言之，人容易相信熟悉的话胜过陌生的。<br>错觉相关（英语：Illusory correlation）    Illusory correlation    若认为两件事相关，回忆时就会觉得两者同时发生的频率较高。[21][43]<br>延迟效应（英语：Lag effect）    Lag effect    比起短延迟时间的多次重复接触，长延迟时间的少次接触有较好的记忆与学习效果。（亦见间隔效应）[79]<br>钝化与锐化（英语：Leveling and Sharpening）    Leveling and Sharpening    记忆细节在每次回忆中扭曲的现象，特别重要的事会锐化或得到选取而忆起，事件的细节及详情则会钝化或遗失。时间过得越久或回忆次数越多，这种偏误就越加强。 [80]<br>处理深度效应（英语：Levels-of-processing effect）    Levels-of-processing effect    用不同方式“编码”的资讯，容易记忆的程度也不相同。例如视觉、听觉、触觉、嗅觉。[81]<br>列表清度效应（英语：List-length effect）    List-length effect    列表中有越多东西，能记住的比例就越少，但能记住的项目总数会增加。 [82]<br>错误讯息效应（英语：Misinformation effect）    Misinformation effect    记忆会受到事后资讯干扰，而变得不准确。[83]<br>模态效应（英语：Modality effect）    Modality effect    对于来自口语的讯息，最后听到的东西印象会较深刻；对于来自文字的讯息则不明显。<br>心境相合性记忆偏误（英语：Mood-congruent memory bias）    Mood-congruent memory bias    与当下心境相合的资讯会比较容易回想。<br>轮流发言效应    Next-in-line effect    轮流发言时，后发言的人不易记住之前的人说过的话。 [84]<br>部分项目提示效应（英语：Part-list cueing effect）    Part-list cueing effect; Part-set cueing effect    记忆的东西为一整组时，提示部分项目会使回想后续项目更困难。[85]<br>峰终法则（英语：Peak-end rule）    Peak-end rule    人们对一件事的体验通常是由最高峰的感觉与结尾的感觉决定，而不是由总体决定。<br>创伤的持续性（英语：Persistence of traumatic event）    Persistence of traumatic event    经历创伤事件后，往往会不断反复回忆。（参见创伤后压力症候群）<br>图片优势效应    Picture superiority effect    以图片传达概念较以文字传达概念容易学习与回忆。[86][87][88][89][90][91]<br>正面效应（英语：Positivity effect）    Positivity effect    老年人回忆中的内容往往会往正面扭曲。<br>初位效应、近时效应、序位效应    Primacy effect; Recency effect; Serial position effect    序列末尾的东西最容易回忆，其次是序列开头的，序列中间的讯息最不易记住。[92]<br>处理难度效应（英语：Processing difficulty effect）    Processing difficulty effect    处理难度高的资讯，由于花较多时间阅读与思考，因而较易记住。[93]<br>怀旧凸隆（英语：Reminiscence bump）    Reminiscence bump    回忆人生事件时，青春期和成年早期的事特别容易想到。[94]<br>玫瑰色回忆（英语：Rosy retrospection）    Rosy retrospection    美化过去的回忆，往往比实际情况更好。<br>自身相关效应（英语：Self-relevance effect）    Self-relevance effect    与自身相关的讯息较易回想，与他人相关的较不易。<br>来源混淆（英语：Source confusion）    Source confusion    把偶发事件的记忆和其他资讯混淆，造成扭曲的记忆。[95]<br>间隔效应（英语：Spacing effect）    Spacing effect    比起无间隔的重复接触，有间隔的重复接触有较好的记忆与学习效果。（亦见延迟效应）[79]<br>镁光灯效应（英语：Spotlight effect）    Spotlight effect    高估自身言行举止受他人关注的程度。<br>后缀效应    Suffix effect    在资讯尾端加上不须记忆的项目，会使前面须记忆的项目变得特别不易记住。这是近时效应的一种应用。[96][97]<br>可暗示性（英语：Suggestibility）    Suggestibility    回想事情时，如旁人暗示了某些想法，想到的内容会受扭曲。<br>伸缩效应（英语：Telescoping effect）    Telescoping effect    认为近期的时比实际久远些，久远的事比实际近期些。<br>考试效应（英语：Testing effect）    Testing effect    反复书写比反复阅读更容易记住资讯。[98]<br>舌尖现象    Tip of the tongue phenomenon    能想起一件事的一部分或相关的东西，却难以想起全部。导致在向他人叙述时，说到一半突然卡住。[76]<br>逐字效应    Verbatim effect    话语中的大意比完整字句（逐字）更容易记住。[99]<br>雷斯多夫效应    Von Restorff effect    醒目的事或特别强调的事比其他的事更容易记住。[100]<br>蔡格尼效应    Zeigarnik effect    比起己完成的事，未完成或中断的事情会记得更清楚。</p>
<h2 id="统计与概率偏误"><a href="#统计与概率偏误" class="headerlink" title="统计与概率偏误"></a>统计与概率偏误</h2><p>概率性推论是指根据有关概率的资讯推论事情的可能性，而概率的估算通常来自统计资料，因此两者密不可分。以下列出不熟悉或误用概率造成的错误认知或推理：</p>
<p>名称    原文    描述<br>基本比率谬误或基本比率忽视    Base rate fallacy; Base rate neglect    只关注针对性的资讯，忽略一般性的资讯（基本比率），导致不恰当的认知。例如因为酒驾较容易肇事，就认为肇事者多半是酒驾，然而由于酒驾者占所有驾驶者的比率甚小，肇事者之中酒驾者的比例不会那么高。[101]<br>合取谬误    Conjunction fallacy    认为较特殊性的情况比较一般性的情况更可能发生。例如对某人的描述很像女性主义者会做的事时，认为某人是替妇女辩护的律师的可能性比某人是律师的可能性更高。[102]<br>赌徒谬误    Gambler’s fallacy    认为某事多次发生则未来发生的概率会较小，或多次未发生则未来发生的概率会较大。<br>逆赌徒谬误    Inverse gambler’s fallacy    认为概率很小的事发生了，一定是做了很多次。<br>热手谬误    Hot Hand Fallacy    认为某事多次发生则未来发生的概率会较大。一般是在某人近来做某事很成功时，认为他未来做同一件事也会很成功，而忽略其成功可能只是随机与巧合导致。<br>回归谬误    Regression fallacy    非常态的甲事发生以后，用乙措施处理后甲事扭转，便断定乙措施可扭转甲事。然而非常态的事发生后，本来就比较容易发生较接近常态的事。<br>检察官谬误    Prosecutor’s fallacy    泛指多种根据不相关资讯认定被告“无辜的概率”很小的情况。<br>辩护人谬误    Defendant’s fallacy    泛指多种根据不相关资讯认定被告“犯罪的概率”很小的情况。<br>多重比较谬误    Multiple Comparisons Fallacy    广泛比较二个群体的各种特征，从中找出有明显差异的几个，宣称它就是造成二个群体不同的原因。<br>德州神枪手谬误    Texas sharpshooter fallacy    即“先射箭再画靶”，常指统计研究做出结果后，把其中的集群当做有统计意义，然而实际上此集群更可能是随机产生。<br>对样本数不敏锐（英语：Insensitivity to sample size）    Insensitivity to sample size    评估统计数据时，未考虑小样本比大样本更容易观察到极端结果。<br>戏局谬误    Ludic fallacy    过度使用统计与概率预测未来。<br>麦纳马拉谬误    McNamara fallacy    过度相信数据、依赖数据评估事情，忽略难以量化的事。</p>
<h2 id="实验与研究偏误"><a href="#实验与研究偏误" class="headerlink" title="实验与研究偏误"></a>实验与研究偏误</h2><p>这是一些科学实验或统计研究容易发生的偏误。</p>
<p>名称    原文    描述<br>选择偏误（英语：Selection bias）    Selection bias<br>取样偏误    Sampling bias    亦作以偏概全，即以局部事例解释整体原因。<br>自我选择偏误（英语：Self-selection bias）    Self-selection bias<br>谱带偏误（英语：Spectrum bias）    Spectrum bias<br>预筛选偏误（英语：Pre-screening bias）    Pre-screening bias    筛选样本时预先排除了某些不应排除的样本。<br>排除偏误（英语：Exclusion bias）    Exclusion bias    研究进行时不当排除某些看似不符预期的样本。<br>选择性观察偏误（英语：Observation selection bias）    Observation selection bias    观察时不可避免受到前置条件的限制而筛选了样本，因而得出不适当的结论。例如问卷调查到的人一定是个性热心、愿意填问卷的人，因而其结果未必能反映不热心、不愿意填问卷的人的想法。<br>观察者期望效应    Observer-expectancy effect    由于研究者期待某种结果，因而下意识中不适当地操作实验或诠释资料（参见受试者期望效应）。<br>受试者期望效应    Subject-expectancy effect    由于受试者期待某种结果，因而下意识地扭曲了回报内容。常见的例子是安慰剂效应。<br>安慰剂效应或伪药效应    Placebo effect    给予无效的药物或治疗，病人却相信或觉得情况改善。<br>反安慰剂效应（英语：Nocebo effect）或反伪药效应（英语：Nocebo effect）    Nocebo effect    给予有效的药物或治疗，病人却相信或觉得情况恶化。<br>实验者偏误或期望偏误    Experimenter’s bias; Expectation bias    实验者倾向相信、认可、发布符合他们期望的结果，而不信、贬低、弃置不符合的。[103]<br>循环分析（英语：Circular analysis）    Circular analysis<br>遗漏变数偏误（英语：Omitted-variable bias）    Omitted-variable bias<br>经费偏误（英语：Funding bias）    Funding bias    选择研究方法或诠释研究结果时，倾向迎合经费提供者的立场。<br>通报偏误（英语：Reporting bias）    Reporting bias<br>社会期许偏误（英语：Social desirability bias）    Social desirability bias    说明自己的看法时，倾向于多报符合社会期许的意愿或实情，而少报不符合的。例如询及是否有不良嗜好、性伴侣数量时，会有意或无意地隐瞒或淡化实情。[104]<br>资料探勘偏误（英语：Data-snooping bias）    Data-snooping bias<br>前导时间偏误（英语：Lead-time bias）    Lead-time bias<br>时距偏误（英语：Length-time bias）    Length-time bias<br>过度诊断偏误（英语：Overdiagnosis bias）    Overdiagnosis bias</p>
<h2 id="成因理论"><a href="#成因理论" class="headerlink" title="成因理论"></a>成因理论</h2><p>以下列出解释认知偏误成因的常见理论：</p>
<p>有限理性 - 理性与最佳化的限制<br>前景理论<br>心理账户<br>适应偏误 - 在资讯有限下做出决策而造成偏误，并以可能的错误为代价<br>属性替代 - 建立复杂、困难的判断，却不自觉地换成简单地判断[105]<br>归因理论<br>显着性<br>素朴实在论<br>认知失调，及相关的：<br>印象管理<br>自我知觉理论<br>判断与决策的捷思，包括：<br>可用性捷思 - 估计哪些比较容易从计忆中取得，例如生动的、不寻常的、或激起情绪的例子[42]<br>代表性捷思 - 根据相似性判断可能性[42]<br>情感捷思 - 根据情绪反应决策，而非计算风险与效益[106]<br>情感的一些其他理论，如：<br>情绪二因论<br>体细胞标记假说<br>内省错觉<br>统计的误解与误用；数学盲。<br>2012年一篇《心理学公报》文章表明，至少有八种看似无关的偏误可由同一种信息论的产生机制产生，此机制假设从人类记忆储存与提取资讯时，杂乱的资讯处理过程导致了偏误。[21]</p>
<h2 id="我不想给你安全感，只想教会你无所畏惧"><a href="#我不想给你安全感，只想教会你无所畏惧" class="headerlink" title="我不想给你安全感，只想教会你无所畏惧"></a><a href="http://www.xinli001.com/info/100366728" target="_blank" rel="external">我不想给你安全感，只想教会你无所畏惧</a></h2><p><img src="http://ossimg.xinli001.com/20170320/059b378d2ad38ac338e3fbe5eaa30aea.jpg" alt=""></p>
<p>人生最黑暗的时刻，就是我们拼刺刀的时候，拼的是什么？拼的就是两个声音：<strong>一个是自我安抚的声音；一个是自我指引的声音。</strong></p>
<p>为什么会有被家暴的女人十几年都无法离开那个施虐的男人？为什么一个男人反复出轨，对一个女人长期冷暴力，她却无法离婚？为什么他总是忍受老板的侮辱，却一直不能辞职离开，哪怕所有人都看到他有足够的能力开创自己的事业？</p>
<p>为什么有那么多人过着其实不值得他们过的生活？</p>
<p>因为，对他们来说，缺少的就是这两点：<strong>安全感和掌控感</strong>。</p>
<p>为什么一个女人受了那么多创伤和背叛，却不能离开这个婚姻？是因为当年他追她的时候，给了她三个月美好贴心的照顾，这3个月成为她人生最巅峰的高光时刻，为此她可以付出13年，甚至30年的代价，因为她无法相信，离开了这个男人，她是否还有可能拥有这样的时刻——<strong>她不相信这温暖可以再次发生，再次拥有，而且可以由她来掌控。</strong></p>
<p><strong>因为她太穷了，她的内在的燃料太少了，不能像弗兰克一样，在完全断绝了外在的供应以后，依然可以自我供给。</strong></p>
<p>直到有一天我忽然想到，也许黑暗没有那么可怕，也许死没有那么可怕，也许到了老了那一天，我可以平静或欣喜地等待它的到来。</p>
<p>也许那时是我内在真正的自由的时候，是我<strong>内在精神的火焰可以永远燃烧下去</strong>的时候，我将终于可以免于无尽的恐惧，和这个世界和解了。</p>
<h2 id="碎片化信息面前，如何保持深度思考能力？"><a href="#碎片化信息面前，如何保持深度思考能力？" class="headerlink" title="碎片化信息面前，如何保持深度思考能力？"></a><a href="http://www.xinli001.com/info/100366339" target="_blank" rel="external">碎片化信息面前，如何保持深度思考能力？</a></h2><p><img src="http://ossimg.xinli001.com/20170316/4c59e9e269ee85ef813d3a4f5646d3a3.jpg" alt=""></p>
<h3 id="1-培养逻辑能力-树状分析任务"><a href="#1-培养逻辑能力-树状分析任务" class="headerlink" title="1.培养逻辑能力 树状分析任务"></a>1.培养逻辑能力 树状分析任务</h3><p>老司机和菜鸟最大的区别就是，当老板下达”一堆”任务工作安排（这些任务工作就好比碎片化信息）之后，老司机会从容悠闲地把任务分个主次，然后再分一个123，主要任务可以理解为树干，次要任务就是主干里的树枝。</p>
<h3 id="2-学会联想“无关”的能力-连接碎片信息"><a href="#2-学会联想“无关”的能力-连接碎片信息" class="headerlink" title="2.学会联想“无关”的能力 连接碎片信息"></a>2.学会联想“无关”的能力 连接碎片信息</h3><h3 id="3-学会批判能力-挑战权威"><a href="#3-学会批判能力-挑战权威" class="headerlink" title="3.学会批判能力 挑战权威"></a>3.学会批判能力 挑战权威</h3><p>这两年我们经常看见这样的话：创业N大军规，但你从来不怀疑，因为他们成功了。但你不知道的是：成功不可复制，失败有迹可循。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://media.xinli001.com/images/logo3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;文章来源：&lt;a href=&quot;http://www.xinli001.com&quot;&gt;壹心理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://om280wrd3.bkt.clouddn.com/psychology.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一念一天堂，一念一地狱，成长的道路上，你并不孤单。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Psychology" scheme="http://ipcreator.me/tags/Psychology/"/>
    
  </entry>
  
  <entry>
    <title>To Live</title>
    <link href="http://ipcreator.me/2017/03/20/MyView/Movie/to-live/"/>
    <id>http://ipcreator.me/2017/03/20/MyView/Movie/to-live/</id>
    <published>2017-03-20T01:18:18.000Z</published>
    <updated>2017-03-28T11:48:39.984Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>To Live, life of ordinary people</strong></p>
</blockquote>
<p><img src="https://img3.doubanio.com/view/photo/photo/public/p1053144335.webp" alt=""></p>
<p>根据余华同名小说改编。<br>　　富少福贵（葛优）嗜赌成性，妻子家珍（巩俐）屡劝无果后带着女儿凤霞离开了他，当夜，福贵输光所有家产气死父亲，被迫靠变卖母亲首饰租间破屋过活。一年后，家珍手拉凤霞怀抱刚出世的儿子有庆回到家中，福贵痛改前非，开始靠演皮影戏过起安份守己的日子。<br>　　但好景不常，内战时期，福贵被国民党抓去当劳工，一番辗转终回到家乡与一家人团圆后，凤霞因病变成哑巴，而在后来的大跃进运动和文化大革命中，他虽获某些小福，逆境却也一直与他如影相随。</p>
<a id="more"></a>
<p>导演: 张艺谋<br>编剧: 余华 / 芦苇<br>主演: 葛优 / 巩俐 / 姜武 / 牛犇 / 郭涛 / 张璐 / 倪大红 / 肖聪 / 董飞 / 刘天池 / 董立范 / 黄宗洛 / 刘燕瑾 / 李连义 / 杨同顺<br>类型: 剧情 / 家庭<br>制片国家/地区: 中国大陆 / 香港<br>语言: 汉语普通话<br>上映日期: 1994-05-18(法国) / 1994-06-30(香港)<br>片长: 132分钟<br>又名: 人生 / Lifetimes / To Live<br>IMDb链接: <a href="http://www.imdb.com/title/tt0110081" target="_blank" rel="external">tt0110081</a></p>
<p> <a href="https://www.douban.com/people/yanshudetudou/" target="_blank" rel="external">]鼹鼠的土豆</a><br>都说落架的凤凰不如鸡，有朝一日毛长齐，凤凰还是凤凰，鸡还是鸡。我们都会死谁也改变不了，但只有活着，你才能得到幸福的机会。</p>
<p>我们不能决定结果，却可以选择面对生活的情绪。</p>
<p>生活其实就是这样，我们努力的把知识转化成技能（就像福贵的皮影戏），在人生的路上打怪升级，也无非是想等到机遇来临时能够把握。</p>
<p><a href="https://www.douban.com/people/quills/" target="_blank" rel="external">八月槎</a><br>命运的悲剧不是无原因的，人为的命运的悲剧也许才是更大的悲剧，在一个个“伟大”的时代中，人是如何的努力也难以把握住自己的命运，人的徒劳，人的无奈，人的卑微的欲求——活着，是如何的被践踏。</p>
<p>王小波先生的一句话，“天空应当是蓝色的，但实际上是红色的；正如我们的生活不应该是我写的这样，但实际上，它正是我写的这个样子。”</p>
<p><a href="https://www.douban.com/people/lengyi/" target="_blank" rel="external">冷翳</a><br>在这部影片中，张艺谋花了最大精力琢磨处理的就是皮影了。通过一开头就出现的皮影戏贯穿整部影片，其实也就是导演在反复把玩的一个主题－－命运的玩偶。赌馆里，福贵少爷到后台去唱上几嗓子，皮影戏的风格就来个大转变，台下人也跟着乐。福贵哪里知道，龙二正在和赌馆老板串通虎视耽耽着他家祖宅，他的命运也从此将有个大转变，而命运在暗处乐和着：游戏开始了！不仅仅是福贵，很多人都从此加入到这个游戏中，成为被命运手中操控的玩偶，无从选择的一步步走下去。皮影再次出现时，是福贵到龙二家借钱，龙二却把整整一箱皮影给了他，两人的角色调了个个儿。这个调个儿的影响龙二不知，福贵也不知，直到多少年后，才知道这只是命运和他们开的一个大玩笑，福贵输掉了家产，也同时输掉了本该戴在他头上的地主的帽子，输掉了那最后在龙二身上开花的“打的死死的”五颗子弹。</p>
<p>福贵的皮影从街道演到国军，从国军演到共军，再演到大炼钢铁和文革时期，他自己也如同身不由己的玩偶在命运中起伏。在影片中，每一次命运的小把戏，都伴随着皮影的特写。国军的刺刀划开白布，福贵和春生被抓了壮丁；共军用刺刀挑起皮影在灿烂的阳光下举向天空，福贵得到了那张支离破碎却恭恭敬敬镶在镜框里挂在墙上的“革命证明”，而春生开上了“死也愿意”的汽车，后来也就是这么开着汽车撞倒了墙，砸死了福贵唯一的儿子有庆。对于有庆的死，皮影戏的象征意义在前面埋了个伏笔，那就是有庆端醋给福贵喝时，福贵喷在白布上的醋，这么蕴染开来，仿佛那块盖着血肉模糊的有庆身上沾满血迹的白布。而那时屏幕上在一旁声嘶力竭叫喊的福贵的特写，身后同样是那幅皮影戏的影窗。</p>
<p>皮影最后在福贵向凤霞大声的说“留不住了，烧！”后，随着跳动的火焰在阳光下扭曲变形。皮影被烧了，可是命运的游戏并没有停止。文革中，因为大夫被关牛棚学生当班，凤霞生产大出血而得不到及时救治，本可以救她一命的王教授却被福贵好心买给他的七个馒头撑得动不了。福贵带着孙子馒头坐在凤霞的坟头前，不停的念叨，我要是没给王教授买七个馒头就好了，正如当年家珍在有庆坟头前不停念叨，我要是拦住你爹不让你去学校就好了一样。命运的强大力量自始至终都没有放过福贵一家，没有放过每个时代的每个人。张艺谋就是这么小心翼翼的处理着每个皮影的细节，每个命运把玩的游戏，不停的展示这种永恒的力量，翻云覆雨，沧海桑田，而一个个这些独立的个体，只是棋子，只是命运手中相互联系的玩偶。</p>
<p>影片最后，福贵把积了灰的皮影箱从床下拉出，打开来，温暖的阳光照射进去，他把小鸡一只只放进去，馒头问了和有庆同样的话，小鸡长大后呢？福贵也答了当年回答有庆的话，小鸡长大之后就会变成鹅，鹅长大之后就会变成羊，羊长大了就会变成了牛。。。。一切开始轮回。。。。。。面对命运，就是这样，我们渺小无奈，我们无法逃脱，只是，仍然要活着，努力的活着，充满希望的活着，因为再无法选择，也要始终相信，“一切都会好起来的”！</p>
<p><a href="https://www.douban.com/people/treesky/" target="_blank" rel="external">人活着，就比什么都强</a><br>王小波说，“中国历史几千年，没有几个人有过自己的个人尊严。。。中华礼仪之邦，一切尊严，都从整体和人与人的关系上定义，一个人不在单位，不在家里，不代表国家，不代表民族，单独存在时，居然不算一个人就只算是一块肉”。</p>
<p>在中国，每个人都在喊着过幸福生活，但却有大部分的人都只是在努力着如何生存，和残酷的现实做激烈的斗争，没有尊严的事情做的太多，也渐渐麻木，以至于后来他自己也想不起来初衷却只是想过个安稳日子。“我跟着你，只是想过着安稳日子”家珍一直在电影里重复着这句话，有家，有人，比什么都好，命运的重重磨难并没有让这个家破灭，福贵的家犹如风雨中飘零的浮萍，摇摇欲坠，始终不倒，面对着残酷的现实，福贵与家珍唯默默承受这些无法言喻的痛苦，撕破脸前的自尊，然后再继续生活，这是中国人最可笑也最谆朴的道德品质。一直以为，我们的眼里只看得到自己和身边的人，再远一些，就已经看不清楚了，连自己都在找寻尊严，更何德何能把别人当人来看呢？都是身体，一具东西罢了。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;To Live, life of ordinary people&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img3.doubanio.com/view/photo/photo/public/p1053144335.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;根据余华同名小说改编。&lt;br&gt;　　富少福贵（葛优）嗜赌成性，妻子家珍（巩俐）屡劝无果后带着女儿凤霞离开了他，当夜，福贵输光所有家产气死父亲，被迫靠变卖母亲首饰租间破屋过活。一年后，家珍手拉凤霞怀抱刚出世的儿子有庆回到家中，福贵痛改前非，开始靠演皮影戏过起安份守己的日子。&lt;br&gt;　　但好景不常，内战时期，福贵被国民党抓去当劳工，一番辗转终回到家乡与一家人团圆后，凤霞因病变成哑巴，而在后来的大跃进运动和文化大革命中，他虽获某些小福，逆境却也一直与他如影相随。&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Movie" scheme="http://ipcreator.me/tags/Movie/"/>
    
  </entry>
  
  <entry>
    <title>OMG，Poor and Cheap Attention</title>
    <link href="http://ipcreator.me/2017/03/19/MyView/books-impacting-me/"/>
    <id>http://ipcreator.me/2017/03/19/MyView/books-impacting-me/</id>
    <published>2017-03-19T14:09:18.000Z</published>
    <updated>2017-03-27T08:20:40.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="那些冲击三观和心灵的书、人、事"><a href="#那些冲击三观和心灵的书、人、事" class="headerlink" title="那些冲击三观和心灵的书、人、事"></a>那些冲击三观和心灵的书、人、事</h1><p><img src="http://omj173lhw.bkt.clouddn.com/impact.jpg" alt=""></p>
<p>总有一些人和事，书和语句，会冲击到你心灵的最深处，使你醍醐灌顶，豁然开朗，并在你生命的长河中掀起一阵涟漪乃至波涛骇浪…</p>
<p>原来我的这个世界还可以是这样的…<br>原来我还可以这样活…<br>原来方法如此简单…<br>原来我也可以做到和坚持下来…</p>
  <a id="more"></a>
<p>  《你的生命有什么可能》——人有很多种活法，每一种活法都有其平等的价值和意义。</p>
<blockquote>
<p><strong>即使在这个不那么公平的现实世界里，每个平凡人也都能活出各自的生命可能。</strong></p>
</blockquote>
<p>《超级个体》——超级个体是未来的第一梯队。创业的指导思想。</p>
<p>《通往财富自由之路》——<strong>成长、价值、耐心</strong>、只字不差地阅读、<strong>注意力&gt;时间&gt;金钱</strong>、安全感、活在未来、<strong>成为自己的贵人</strong>、金额、时间、智慧</p>
<p>《逻辑思维》——知识经济，洞开脑门</p>
<p>《硅谷来信》——真正的大牛，融会贯通</p>
<p>《人人都是工程师》——你也可以</p>
<blockquote>
<p><strong>在中国，对绝大多数人来说，English + Computer Skills = Freedom</strong></p>
</blockquote>
<p>《第一行代码，郭霖》</p>
<blockquote>
<p>做你喜欢做的事情，任何时候都不会太迟，你发现的问题，其实就是你的机会</p>
</blockquote>
<p>《人人都能用英语》——原来如此</p>
<blockquote>
<p>“用140字概括一下怎样才能学好英语？我回复说：其实一个字就够了：“用”。”</p>
</blockquote>
<p><a href="http://www.geekonomics10000.com/870" target="_blank" rel="external">《一点实用主义的学英语心得》</a>——学英语不是一个修身养性的长期活动，要争取在短期内突破。先突击练基本功，再突击准备考试，这并非是我的什么发明，而是大部分考托考G的大学生研究生的做法。只要坚持读完一本书，你就基本过关了。你的第二、第三本书将会越读越快，最后可能只需偶尔翻一下字典。这个关键是在潜移默化中适应英文。</p>
<blockquote>
<p>记忆的关键在于间隔式的重复。过一天复习一次，过三天再复习一次，过一周再复习一次，让间隔的时间越来越长。所以你每天的单词功课实际上是先复习旧的，再学新的。你还可以根据情况设定某些天作为纯粹的复习时间。<br>如果你需要通过什么英语考试，有了单词和精读的基本功之后就可以为考试做准备了。不过在英语考试中取得好成绩的关键是掌握这些考试的特定技能，而不是英语技能。你要做大量的真题，想运动员一样对自己进行有高度针对性的训练。有很大的可能性，你能够在GRE阅读理解部分取得高分，而仍然看不进去一本真正的书，因为前者的秘诀是快速发现考题和文章之间的联系，你甚至不必读完或者读懂那篇文章。<br>先听精益求精地听熟悉的内容，纯粹是为了练习听力。慢慢过渡到直接听没读过的有声书。人脑的适应能力是非常强的</p>
</blockquote>
<p>《正确高效使用 Google》——付出一点翻墙的代价绝对物有所值</p>
<blockquote>
<p>研究这个词，在英文中是research，我把它理解为re-search，实际上各种语言是相通的，所谓re-search其实就是“反复搜索”，就是“上下求索”（路漫漫其修远兮，吾将上下而求索）。<br>所以，如果你想学点什么，就要善于搜索。而在这个时代里，最好的搜索工具就是 Google。</p>
</blockquote>
<p>《坐享其成》——实证有效，贵在坚持</p>
<blockquote>
<p>坐享，也许是最简单的大脑锻炼方式，这也是人类莫名其妙地已经运用了两千五百年以上的大脑锻炼方式。已经有足够多的科学研究证明，它能使你的大脑皮层表面积加大，能使你的灰质变厚，它也能增强人们的免疫系统，它还能让人们摆脱抑郁症……<br>尽管简单，但也相当神奇。<br>虽然神奇，却又非常简单。</p>
</blockquote>
<p>《七年就是一辈子》——重生的理论及信念</p>
<blockquote>
<p><strong><a href="http://zhibimo.com/books/xiaolai/reborn-every-7-years" target="_blank" rel="external">“我们的一生其实可以活很多辈子的…… —-李笑来”</a></strong></p>
</blockquote>
<p>《把时间当朋友》——积累<br><strong>对年轻人来说，成长比成功更重要，而且，这才是人人都可以做到的事情，才是人人都值得追求的事情。而成长其实只有一条路——积累。</strong></p>
<p>《万万没想到》——刻意练习</p>
<blockquote>
<p>学习作为一项总括的技能的话，有一套统一的练习方法，就是“刻意练习”，去除一些不重要的因素，可总结成以下四点:</p>
<p>1.只在“学习区”练习；<br>2.把练习内容分成有针对性的小块，对每一小块重复联系；<br>3.在练习过程中获得即时反馈；<br>4.练习时注意力高度集中。<br>学习的关键就在于“刻意”地在这个领域内，练习。<br>刻意练习就是在大脑中建立长期记忆的过程，把套路二“长”在身上，关键在于两点:<br>1.必须进行大量重复训练；<br>2.训练必须有高度的针对性。</p>
</blockquote>
<p><a href="http://www.geekonomics10000.com/973" target="_blank" rel="external">《想要提高效率，就得不公平》</a><br><img src="http://omj173lhw.bkt.clouddn.com/%E5%B9%82%E7%8E%87%EF%BC%88power%20law%EF%BC%89.png" alt=""><br>马太效应 — “凡有的，还要加给他，叫他有余”！现实世界中富人财富增长的秘密正是如此：更有钱是因为已经很有钱。真正让人进入富豪排行榜的不是按小时计费的高工资，而是投资创办企业。越是有钱的人，越容易在投资中赚到更多的钱，这是一个正反馈过程。从一万赚到十万很难，而从一亿赚到一亿零十万则根本就不算赚钱。幂律分布，最早是在1897年被经济学家维弗雷多·帕累托发现，他正是在考察人群财富的时候发现的这个分布。他认为之所以会有这样的分布，是正反馈造成的，越有钱的人越容易赚钱。</p>
<p>现实世界中有很多东西是幂率分布的：公司的大小、城市的大小、病毒感染的人群、商品畅销程度……甚至有些自然现象也是如此：地震强度、油田大小，等等。</p>
<p>幂率分布到底是什么原因造成的？我看了很多文献，可以说现在没有一个统一的理论，正反馈过程只是其中一个可能的原因[1]。但我们更关心的是，这种分布意味着什么？</p>
<p><strong>它意味着这个世界非常不均匀！</strong></p>
<p>世界上绝大多数人和事都是平庸的，而且最好的东西还都挤在一起。<br>有了这个正确的世界观，我们才能有正确的方法论。这个方法论就是既然世界这么不均匀，我们就不应该“公平”对待世界上的各种东西。</p>
<p><strong> 80/20 做事法</strong><br>做事最关键的战略，就是做好最关键的。</p>
<p>iPhone出来一鸣惊人，但是连最起码的复制粘贴功能都不给，而iPad一出来居然不支持多任务工作。也许市场上的每一个智能手机都有复制粘贴功能，每一台电脑都能多任务，可它们全都没法跟苹果的产品相提并论 — 因为iPhone和iPad上能做其他所有产品都做不到的事。乔布斯不追求大而全，而是先把最有核心竞争力的东西做出来，因为他知道这才是消费者最关心的东西。</p>
<p>很反感的一句话是“××无小事”。事情当然有大小之分，无小事就是无大事。</p>
<p><strong>效率的关键就在于不公平。</strong></p>
<p><strong>极简主义</strong><br>要事优先，尽量只做最重要的事，少干或者不干那些不重要的事，才是出类拔萃的关键。<br>要事优先，第一你得有自由意志，知道自己有选择的权力，不能别人让你做什么就做什么，强调主动性。第二你得学会判断哪些重要哪些不重要。第三你还得有勇气有能力拒绝自己不想干的事，敢跟人说“不”。现代社会中出现很多完美主义者，其实都是不懂轻重缓急的个人评价焦虑症患者。他们关注各种细节，经常能指出别人的小错误。比如给他们看个PPT，他们很容易注意到上面有没有标点错误，却不知道你说的大局是什么。这其实是特别浪费时间的性格。</p>
<p>衣着无比整洁，东西摆放井井有条，对什么事情都有记录存档，这样的作风并不值得学习，这种人设定了错误的优先级。达到这样的状态要花费很多时间去整理生活，这些时间完全可以用来做些更有意思的事。如果你从未错过航班，你在机场浪费了太多时间。如果你从未丢过东西，你在整理上浪费了太多时间。如果你从未做错事，你做的事不够大。</p>
<p>人的精力有限，什么都想要是不可能的。如果真想培养人才，“全面”发展其实是一个错误的思想，天赋树不能乱点。极简主义要求我们培养核心的竞争力，在他喜欢的东西上加大力度。用20%的时间就可能实现这个小孩80%的功能，剩下80%的时间几乎都是浪费，还不如让他去玩。</p>
<p>玩很重要。极简主义的核心思想就是把最关键的事情做好，省出来时间去玩。这也符合特勒布在《反脆弱》一书说的“杠铃原则”：做事要注重两端不管中间 — 我要么做最难的事，要么玩或者什么都不做。</p>
<p>《此生未完成》——幸福的定义<br><strong>我们要用多大的代价，才能认清活着的意义。</strong></p>
<blockquote>
<p>在生死临界点的时候，你会发现，任何的加班，给自己太多的压力，买房买车的需求，这些都是浮云。如果有时间好好陪陪你的孩子，把买车的钱给父母买双鞋子，不要拼命去换什么大房子 ，和爱的人在一起蜗居也温暖……<br>人有个好的心态，才能享受人生。不奢望太多的东西，只要这一生中有自己的居所，有自己的小家，甜蜜而温馨，每天过着快乐的生活就够了。随缘的爱是最幸福的爱，无须计划，无须设计，一切都顺理成章，轻松，自然，流淌着最本真的爱，相爱的人儿自是充满着感动，心喜，激动。</p>
</blockquote>
<p>《向死而生》——健康的价值</p>
<blockquote>
<p><strong>脱去虚名与成就，你的人生还剩下什么?</strong></p>
<p><strong>7 个学分</strong></p>
<ol>
<li>健康无价；</li>
<li>一切事物都是有它的理由；</li>
<li>珍惜缘分，学会感恩和爱；</li>
<li>学会如何生活，活在当下；</li>
<li>经得住诱惑；</li>
<li>人人平等，善待每一个人；</li>
<li>我们的人生究竟是为什么？</li>
</ol>
</blockquote>
<h2 id="IPCreator"><a href="#IPCreator" class="headerlink" title="IPCreator"></a>IPCreator</h2><p><strong>打工与创业</strong></p>
<p>打工是为了实现别人的梦想而奋斗，拿自己的时间和技能去换取金钱，是一种及时的反馈</p>
<p>创业是为了实现自己的人生梦想，是用潜在的打工收入交换未来更大的受益，<br>是一种耐心的持续的针对性的积累，需要明确的目标、可行的计划以及超强的执行力，<br>还有家人的理解和支持，以及自我激励和超强的意志力。</p>
<p>每天唤醒自己的是梦想，而不是闹钟</p>
<p>打工是当下的安全感，稳定<br>创业是摒弃当前安全感去获取未来更大的安全感，自知自控</p>
<p>不以成败论英雄<br>类似经历必有益、读书必有用<br>量力而行，尽力而为，问心无愧<br>不给人生留遗憾</p>
<p>不干用健康换金钱/名利的傻事<br>不干凑热闹、随大流、操他人心的傻事<br>你的事不关他人事<br>他人事关你鸟事<br>只为、只需、只能为自己的选择和行为负责<br>不做烂好人、不做情绪和金钱的奴隶<br>绝不自我消耗，家人内耗<br>不做表现型，要做成长型</p>
<p>不以爱的名义去控制、伤害（我为你负责？）<br>不干以为了他人的名义去行实则为了自我的事情（还不是为了你好？）<br>不干明明可以预防却最后双手一摊谁知道呢的事情（谁知道呢）</p>
<p>他人都有自己的事情和追求，不一定有时间和精力来了解情况<br>他人不了解情况，也就很难理解<br>他人都有自己的立场，不一定能支持和鼓励，结果自找无趣<br>再者，以他们的经历、学识是否又能真正理解？<br>譬如，家人的期望是什么？在老家找份压力不大稳定的收入，然后过一生，只要不务农就行<br>只有一种情况需要他人一定要支持，那就是依赖他人才能生存，才能展开工作…<br>别忘了，这可是一个超级个体时代，是一个AI时代</p>
<p>正确的做法：一方面：理解他人，接纳和包容他人，同时，保持距离，<br>让他们自己为自己的选择和行为负责任，不做烂好人，不擦烂屁股；<br>另一方面，对他人的理解和支持，不期望，不等待，不强求，有更好，没有也行。</p>
<p>前期自己是自己的贵人<br>后期，需要寻找对的贵人</p>
<p>打基础的时候，快不得<br>有了Demo之后慢不得</p>
<p>若不打通理论与实践的环节，如何教学、指导和创业<br>要在正确的方向上持续积累，要有战略眼光、切身践行和持之以恒</p>
<p>别急，慢慢来，一切都来得及<br>相信自己的信念，还有很多机会<br>不凑热闹、不随大流、不操他人心</p>
<p><strong>分阶段</strong></p>
<p>学生<br>职场<br>创业<br>人生</p>
<p>以前学习/奋斗，为了考试、高分、名次、荣誉、肯定、表扬、鲜花、掌声、名利、生存、外在</p>
<p>现在是为了成长、内在、梦想、心智洞开</p>
<p>父母不健康幸福，儿女一般都不怎么健康幸福<br>负能量的源泉</p>
<p>成功是一种习惯<br>幸福也是</p>
<p>开心就好</p>
<p>人不过百岁，常怀千岁忧</p>
<p>人生是一场修行，边修行边前行<br>人生是一场旅行，要学会欣赏沿途风景<br>人生是一场战斗，边学习边战斗，边战斗边学习</p>
<p><strong>分享</strong></p>
<p>先管好自己，过好自己的生活。<br>否则，动不动就分享，一方面别人不会听无效果，另一方面浪费自己的注意力和时间，<br>自寻烦恼，得不偿失，先成长为鸵鸟，再分享给小鸡。</p>
<p><strong>如何减缓压力</strong></p>
<p>自己：化整为零，循序渐进，各个击破<br>他人：让他们各自为自己的选择和行为负责，尽力而为，问心无愧，每个人的人生道路自己选择，自己负责，不贴标签，不做评价</p>
<p>自己知道要摒弃一个别人以前给自己贴的否定标签要多久时间多大代价，就能理解并做到不给他人贴标签的好习惯。</p>
<p>“心甘情愿”</p>
<p>幸福就像蝴蝶，金钱也是<br>先让自己变得健康、积极、阳光，再辐射正能量</p>
<p>注意力&gt;时间&gt;金钱<br>健康&gt;见识&gt;技能</p>
<p>刻意练习+持续积累<br>学之者不如好之者<br>好之者不如乐之者</p>
<p>不以贫富来分人<br>不以长短来筛选</p>
<p>健康、家人、梦想</p>
<p>日行一万步+夜眠八小时+坐享十次<br>一周家庭日，一年一地方</p>
<p>健康基础、磨练意志力</p>
<p>是爱让生活更加美好，生命更加精彩。<br>思想独立的前提是经济独立。</p>
<p>先求生存，后求发展<br>基础不牢，地动山摇<br>做事做人两把刷子<br>不一定要亲自出手，能把问题解决掉的人就是高手，<br>动不动就出手的人是打手<br>量变到质变，自古华山一条路<br>正若不行，反则攻之，条条大道通罗马</p>
<p>没有安全感的人会折磨自己、家人、乃至身边一切人，珍爱生命，远离没有安全感的人</p>
<h2 id="IPCreator的好习惯"><a href="#IPCreator的好习惯" class="headerlink" title="IPCreator的好习惯"></a>IPCreator的好习惯</h2><blockquote>
<p>We make our habits first, then habits make us.<br>One more word/page/book/day<br>What is your point.<br>走出一条属于自己的正常、健康和可持续发展的道路<br>完美==脆弱<br>电子化、系统化、内化、产品服务化<br>整理消化自己的&gt;别人的<br>最大的落后是观念落后，你会给后代留下什么？想留下什么，要留下什么？<br>让自己和家人健康幸福的能力&gt;赚钱的技能<br>心甘情愿、无怨无悔、任劳任怨<br>少干不干让自己后悔的事情，提升自己，自我成长，推迟满足，摒弃完美，表现型进化为成长型<br>不干那些让自己可能引入极端被动的事情，譬如杠杆等</p>
</blockquote>
<h3 id="A、爱读书"><a href="#A、爱读书" class="headerlink" title="A、爱读书"></a>A、爱读书</h3><p>应试教育、高分<br>书柜、多看、豆瓣、知乎</p>
<h3 id="B、记笔记"><a href="#B、记笔记" class="headerlink" title="B、记笔记"></a>B、记笔记</h3><p>笔记本、Evernote、有道云笔记</p>
<h3 id="C、温故而知新"><a href="#C、温故而知新" class="headerlink" title="C、温故而知新"></a>C、温故而知新</h3><p>艾宾浩斯记忆曲线</p>
<h3 id="D、跨界、寻求创新"><a href="#D、跨界、寻求创新" class="headerlink" title="D、跨界、寻求创新"></a>D、跨界、寻求创新</h3><p>点评和视角<br>产品与服务<br>创新想法<br>专利清单</p>
<h3 id="E、持之以恒"><a href="#E、持之以恒" class="headerlink" title="E、持之以恒"></a>E、持之以恒</h3><p>163博客、IPCreator<br>日行一万步<br>夜眠八小时</p>
<p>不积跬步无以至千里<br>不积小流无以成江海</p>
<p>千里之行始于足下</p>
<h3 id="F、学以致用，知行合一"><a href="#F、学以致用，知行合一" class="headerlink" title="F、学以致用，知行合一"></a>F、学以致用，知行合一</h3><p>人生、幸福、读书、技能、创业、投资</p>
<h2 id="G、举一反三，融会贯通，多维竞争"><a href="#G、举一反三，融会贯通，多维竞争" class="headerlink" title="G、举一反三，融会贯通，多维竞争"></a>G、举一反三，融会贯通，多维竞争</h2><p>技术、管理、培训、专利、创业<br>JSON工具、CoolWeather、IPCreator</p>
<h2 id="IPCreator’s-core-competitiveness"><a href="#IPCreator’s-core-competitiveness" class="headerlink" title="IPCreator’s core competitiveness"></a>IPCreator’s core competitiveness</h2><p>成为自己，做自己，创新创造</p>
<p>A、宏观趋势/行业 –&gt;投资理财<br>B、用户体验创新 –&gt;产品/服务开发<br>C、跨界融合–&gt;多维竞争<br>D、教学相长–&gt;职业领域</p>
<p>打基础的时候，快不得，急不得，基础不牢地动山摇<br>有了Demo的时候，慢不得，等不得</p>
<p>health\psychology\brain os\concept\english\mathematics(linear algebra\probability)\program skill(tensorflow\android\java\c\c++\python\git)\investment\wealth<br>smartai\smartui\smartipr</p>
<h2 id="IPCreator’s-diary"><a href="#IPCreator’s-diary" class="headerlink" title="IPCreator’s diary"></a>IPCreator’s diary</h2><h3 id="03-20"><a href="#03-20" class="headerlink" title="03.20"></a>03.20</h3><p>见证美图的疯狂，炒作，多少人又在最高位入场被套，常识的胜利</p>
<p>香港证监会罕见调查股票交易美图(01357.HK)再度跳水 市值重回600亿<br>前期涨幅过猛的美图(01357.HK)[沪港通][深港通]昨日一度被指“妖股”化，由上涨28%到收盘时的收跌11%，股价直接从23.05港元跌至收盘的15.98港元，振幅超40%，今日据香港文汇报的最新消息显示，“香港证监会罕见调查美图交易。美图上市至今，香港证监会起码三度发信予券商索取事务历史记录，最早一次是今年1月份，当时索取的资料早至上市首日的事务历史记录，情况十分罕见。”<br>美图(01357.HK)在早盘还一度上涨7%，看似不受影响，但在11点20后重现昨日的快速跳水行情，最新收报14.6港元，跌8.6%，最新总市值为617亿港元。公司即将在本周五公布业绩，预期2016年度继续处于亏损状态。</p>
<p><a href="http://gelonghui.com/p/115196.html" target="_blank" rel="external">美图股价上窜下跳，内地炒股风经互联互通波及香港</a><br>内地投资者的频繁交易导致美图股价剧烈震荡。随着流入香港股市的内地资金日益增加，这种交易模式越来越多的影响着市场的运行。被纳入沪港通和深港通股票名单后的两周内，美图的股价一直波动较大，不禁让人质疑：面对蜂拥而至的常常凭一时冲动买卖股票的内地投资者，香港将如何应付。“在互联互通机制下，香港股市的某些特性已经变得内地化，”Mirabaud驻香港的交易总监Andrew Clarke说。“作为一位交易员，不应该靠近这些股票。倘若我们见到越来越多类似美图股票这样的交易模式，证监会与交易所很有可能会加强监管。”美图定于3月24日发布2016年业绩，公司预计今年将继续亏损。从3月6日被纳入互联互通股票名单到上周五，该股暴涨了78%。美图的30天期波动率周一升至去年12月上市以来的最高水平。</p>
<p>win10、s7 edge、brain’s os 均再次升级<br>工欲善其事必先利其器，磨刀不误砍柴工<br>《智识分子》、财富自由之路<br>延迟满足感</p>
<h3 id="03-21"><a href="#03-21" class="headerlink" title="03.21"></a>03.21</h3><p>注意力陷阱<br>A、自责，渴求完美 == 接纳并信任自己<br>B、他求，苛求他人 == 聚焦自我成长<br>C、重复，历史遗留 == 消化放下,弱化清除<br>D、急躁，急于求成 == 升级认知，水到渠成</p>
<p>控制不了自己的人才想控制别人<br>本质追逐名利的人才想影响他人<br>脆弱自卑的人才想着追求完美<br>沉溺于过去的人正丢掉现在与未来<br>功利无知的人才想一夜暴富</p>
<p>求学阶段、工作阶段、生活经历<br>那些年、那些人、那些事…<br>与自己、他人及世界和解了…</p>
<p>理顺了之前的模式根源：典型的应试教育者、表现型性格、投机主义者<br>A、死记硬背+应试技巧<br>B、浮于表面+急于求成<br>C、自控力差+苛求他人<br>D、安全感缺失+即时满足</p>
<p>一个人性格的形成，离不开儿时经历、家庭条件、父母性格、学校教育、社会阅历等<br>自己和家人是如何一步一步走到今天的？掉过哪些战略和心智上的坑？<br>面对现实（与他人不一样 –&gt;都是平民老百姓）、直面问题（知足感恩，内省而非外求）、寻求解决之道，治标更治本<br>多问几个凭什么？为什么？拨开表象背后的真相<br>以前种种经历，尤其是苦难，都是自己成长和沉淀的绝佳素材，再出发，七年一辈子</p>
<p>只字不差、一个单词，一页一页，一本一本，一件一件，一步一步，一口一口，一天一天…One More<br>正向循环，量变到质变，线性到非线性，零散到系统，一通到百通…<br>原来这么简单，原来你也可以……</p>
<p>生命宝贵，远离负能量，远离那些没有安全感的人<br>随时切换操作系统，并且降低要求和标准</p>
<p>凭什么？为什么？人与人的社会竞争是靠家庭的综合实力</p>
<p>从农村出来的人又有多少能够坦然面对缺乏眼界和见识这一劣势，<br>遇到问题时，往往只能想到并使用单打独斗和勤劳蛮力这种线性思维，<br>于此同时，心气、标准和要求还比他人要高<br>过程的发展往往是在新的环境中表现出强烈的不适应性，比如，对人的不信任，缺乏多赢思维，不能自制又控制欲强，缺乏耐心和坚持……<br>即使有些到达了他们眼中的所谓成功境地，由于采用了非正常健康可发展方式，往往也是筋疲力尽，毫无幸福快乐可言<br>最终的结局，往往是子欲养而亲不待，有享福的条件而身体消受不起，甚至人财两亏，这给后代留下无尽的痛苦和遗憾</p>
<p>到头来，一句“还不是为了你们”，早知如此结局，倒还不如当初面对现实，循序渐进地逐步升级社会阶层<br>不霸蛮，不强求，保护好自己的同时，量力而行， 问心无愧即可，对最终的结果负责，将眼光放长远<br>将注意力和重点聚焦在儿女心智、见识和成长上，而非金钱、名利等外在因素上，<br>可惜多少人明白这一道理的时候，早已物是人非甚至天各一方了……</p>
<p>一定要早点想清楚这辈子你图的是什么？<br>后代真正需要的是什么？<br>你能付出怎样的代价去换取你所谓的成功？到底值不值？</p>
<p>以牺牲身体健康和家庭幸福为代价的奋斗模式，最好远离之<br>远离缺乏安全感、身体不健康和充满负能量的人，试想：<br>连自我都不爱、保护不了和不珍惜的人，怎么可能爱和珍惜他人，更别谈保护他人以及善于合作等其它事情了。</p>
<p>对于存在这种情况的家人怎么办？尽力而为，问心无愧即可，尽了全力还无用无效，就知难而退，该放弃放弃，该远离远离<br>别过分苛求，以免连自己都搭上。还是上面那条建议，先自保再保人。</p>
<p>自己只需也只能为自己的选择和行为负责，对于其他人也是如此。在这件事情上，苦口婆心地说是没有太大用处的。<br>明知而为之，就是作，而对于作，有句名言：No Zuo No Die，闲的！自作自受</p>
<p>现在不方便，很忙，不要随意打扰，要善于利用，保护自己那宝贵的注意力，<br>更别提那种刷微信、微博等主动浪费注意力的行为了，一旦养成了好习惯，想停都停不下来……</p>
<h3 id="03-22"><a href="#03-22" class="headerlink" title="03.22"></a>03.22</h3><p><strong>注意力&gt;时间&gt;金钱</strong><br>坐享锻炼恢复大脑<br>只字不差地阅读（慢就是快、少就是多）<br>看不懂也要读完<br>刻意练习掌握技能<br>通过朗读攻克听力</p>
<p>数学日</p>
<p>以前是大脑/情绪/金钱/名利的奴隶<br>现在是主人</p>
<p>不再恐惧，害怕，焦虑<br>而是在正确的方向上持续积累</p>
<p>彻底从操作系统中去除智商、情商、坚持、毅力等概念<br>罗永浩、李笑来、古典…新东方老师，圈子</p>
<p>处处升级了<br>health<br>三观<br>大脑os<br>zhuxuanlv –&gt; ipcreator<br>126 –&gt;github<br>打工 –&gt; 创业<br>技能</p>
<p>英语、数学、平台、编程…<br>都是基础</p>
<p>如果自己都弄不清楚，搞不明白，谈何其它<br>如果自己都活不好，没过好，谈何分享和建议？</p>
<p>失眠是闲的？<br>作是闲的？</p>
<p>==兄弟姐妹聚会==<br>有朋自远方来，不亦乐乎？<br>交流、激励、成长、分享、开心<br>职场、投资、生活、人生…</p>
<p>宝贵的注意力和时间资源，除了美食，还得有所收获。<br>不要苛求，大家开心就好。</p>
<h3 id="03-23"><a href="#03-23" class="headerlink" title="03.23"></a>03.23</h3><p>预测未来，不如创造未来<br>一旦行动了，就停不下来</p>
<p>更换Hexo Next主题，优化组织结构</p>
<p>譬如：<br>运动的习惯<br>坐享的习惯<br>践行的习惯</p>
<p>大疆、华为、OPPO式的做法，有自己的目标、行动和坚持，正确的方向上做正确的事情，每天进一步一点点。<br>真正的独立和强大是：不需要依附任何人（包括经济条件、健康快乐、目标行动等…），也不羡慕任何人。<br>做自己喜欢擅长而又有价值的事情，过自己独立充实健康快乐的人生。量力而行，尽力而为，问心无愧。<br>不期待也不需要他人的肯定、表扬和激励，也会一步一步，踏踏实实地朝着自己的既定目标前行。</p>
<p>以前浪费了多少宝贵的注意力，关注了多少不该和不值得关注的人/事/物？<br>舍本逐末地聚焦成功，名利上，而忽视了最根本的自我成长上。</p>
<p>有得必有失，有失必有得，得失平衡，关键是你自己到底想要什么？不可能全部拥有，追求过高过多，往往人财两失。<br>名利背后的付出和牺牲——身边有太多鲜活的例子<br>正常、健康和可持续发展模式，是真正有智慧的人才能做到，尝到甜头之后会停不下来。</p>
<p>简而言之，自知者明，自胜者强。<br>不迷茫，不焦躁，慢慢来，耐心点，一切都来得及，七年就是一辈子，人可以活几辈子。</p>
<p>真的勇士，敢于直面惨淡的生活和残酷的真相，继续前行和奋斗。</p>
<p>RTFC：<a href="https://pan.baidu.com/s/1ngsZs?errno=0&amp;errmsg=Auth%20Login%20Sucess&amp;&amp;bduss=&amp;ssnerror=0#list/path=%2FAndroid%E6%BA%90%E7%A0%81&amp;parentPath=%2F" target="_blank" rel="external">Android7.1.1</a> + <a href="http://download.csdn.net/detail/yi5971/9767765?locationNum=1&amp;fps=1#comment" target="_blank" rel="external">SourceInsight4.0</a></p>
<h2 id="03-24"><a href="#03-24" class="headerlink" title="03.24"></a>03.24</h2><p>你觉得容易的事，别人也觉得容易<br>你觉得困难的事，绝大部分人也会觉得很难<br>知难而退还是迎难而上，选择决定未来</p>
<p>SmartMusicPlayer初具原形，干自己喜欢的事情，挡也挡不住</p>
<h2 id="03-25"><a href="#03-25" class="headerlink" title="03.25"></a>03.25</h2><p>开始深入聚焦历史使用记录专题<br>有好的文章、片段就要一字不差地阅读、思考、践行、笔记</p>
<p>运动锻炼是自己的事情<br>学习工作是自己的事情<br>快乐生活是自己的事情</p>
<p>扩充和巩固自己的武器库<br>传统的简单的往往是最好的</p>
<p>第七套广播体操<br>给女儿的学习视频，现场录制</p>
<h2 id="03-26"><a href="#03-26" class="headerlink" title="03.26"></a>03.26</h2><p>集中精力攻克Fast Android Networking和七牛SDK</p>
<h2 id="03-27"><a href="#03-27" class="headerlink" title="03.27"></a>03.27</h2><p>Reorganize my blog articles.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;那些冲击三观和心灵的书、人、事&quot;&gt;&lt;a href=&quot;#那些冲击三观和心灵的书、人、事&quot; class=&quot;headerlink&quot; title=&quot;那些冲击三观和心灵的书、人、事&quot;&gt;&lt;/a&gt;那些冲击三观和心灵的书、人、事&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://omj173lhw.bkt.clouddn.com/impact.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;总有一些人和事，书和语句，会冲击到你心灵的最深处，使你醍醐灌顶，豁然开朗，并在你生命的长河中掀起一阵涟漪乃至波涛骇浪…&lt;/p&gt;
&lt;p&gt;原来我的这个世界还可以是这样的…&lt;br&gt;原来我还可以这样活…&lt;br&gt;原来方法如此简单…&lt;br&gt;原来我也可以做到和坚持下来…&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Experience Decides Destiny</title>
    <link href="http://ipcreator.me/2017/03/19/MyView/Original/why-stay-in-big-cities/"/>
    <id>http://ipcreator.me/2017/03/19/MyView/Original/why-stay-in-big-cities/</id>
    <published>2017-03-19T13:51:18.000Z</published>
    <updated>2017-03-27T10:06:39.881Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/%E7%BD%97%E6%8C%AF%E5%AE%87.jpg" alt=""></p>
<p><a href="http://bbs.tianya.cn/post-free-3731338-1.shtml" target="_blank" rel="external">罗辑思维文字版No.2 拒绝逃离北上广：见识决定命运</a></p>
<blockquote>
<p><strong>北京随便一小孩，四五岁一男孩站在街边上，什么名车都认识，他们家地库就跟国贸的车展，也没什么区别，对吧。你外地一个农村的大学生，你可能学问很高，但是对不起你没见识，这是城市生活给人的灵魂世界，带来的最丰厚的一笔礼物。</strong></p>
<p><strong>不管北上广深的房价有多贵，居住有多难，北京的空气有多糟糕，道路有多堵，还是要留在这里，等待那种城市以及互联网社会的光芒，照耀到你的天才之上。</strong></p>
</blockquote>
  <a id="more"></a>
<p>　　很多年轻人都说北上广深的房价太贵了，在这个地方长安居大不易了，我还是回老家吧，这个口号在前两年很流行，可这两年怎么样，这些年轻人都蔫不出溜又回来了，为什么？他们发现老家更没有机会，老家真的是叫人民政府，没有人啥事都干不成，相反在北上广深这样的城市，它的制度建设相对来说比较规范，你不必需要熟人，不需要投亲靠友，你就可以正常地生活和工作，这是最大的区别。</p>
<p>　　城市化意味着什么，城市化其实非常简单的概念，就是陌生人的大规模肉身聚集，如果说城市化的定义就是这个，没有什么，有人说这不对呀，很多作家不也是，你看韩少功就跑到长沙的乡下去隐居，我们的莫言不就在高密县东北乡，一直是一个农民的状态生活，他不也可以建功立业嘛，可以写文章，可以协作嘛。没错，但是要知道他们的工作需要的协助度是非常低的，而现代生活的本质，只有聚集才能产生大规模的财富。</p>
<p>　　财富是怎么来的，我们这一代中国人从中小学教科书中得到的经验都是财富是由劳动创造的，没错，锄禾日当午，汗滴禾下土，靠辛勤的劳作，一颗汗珠掉地下摔八半，这可以创造财富，但是对不起，那只是农耕文明的财富，到工业文明的财富就不是这种形态，比如说李约瑟讲中国人发明了水排，又发明了风箱，他为什么就没有走完最后一步，把它们凑起来变成蒸汽机呢，没错，这就是聚集的最后一步，你没完成，水排是水排，风箱是风箱，它就没有促成蒸汽机，财富就没有产生。</p>
<p>　　所以财富是什么，财富是聚集的产物，打一个简单的比方，我们城里人都理解，一栋小区旁边开了一商场，小区房子升值了，可是因为有这个小区的人流，商场的生意也变得好了。所以它们搁一块，各自都得到了好处，这就是城市化聚集带来的财富效应。</p>
<p>　　有人说，互联网可以解决这个问题，我们可以山南海北，通过微信、短信、QQ、电子邮件，我们可以完成协同嘛，没错，但是今天我要告诉你一个新名词，那就叫八分之一秒门槛或者说八分之一秒大限。</p>
<p>　　八分之一秒是什么？是指地球最远两端光速，或者电波传输的这个延时效应。我们知道光速是宇宙间的第一常量，是人类文明和科技不管怎么跨越，怎么发展，你永远跨不过去的一个门槛。八分之一秒，也就是说只要你通过电脑、电波、无线互联网等等你进行联系，八分之一秒延时它永远在。</p>
<p>　　要知道所有精细的体验，当有这八分之一秒延时的时候，都会崩溃。比如说谈恋爱，比如说重要的商业谈判，比如说朋友之间的把杯言欢，像这样的东西，你说我们能靠一边聊着QQ，一边能够完成那种精密的人性之间的贴近吗？是不可能的。</p>
<p>　　如果你不理解这一点，你去看看专业的游戏玩家。我生活中认识一群这样的小孩，他们那个游戏装备，和我们理解就不太一样。他们是无法容忍各种各样的延时的。比如说他们就坚决不会用无线鼠标，因为那带来的延时效应，对我们平时用电脑处理文档，看看视频的人是无所谓的，对他们来说，那真不是分秒必争，是秒秒毫秒必争的。</p>
<p>　　这种游戏搏杀的时候，他们只用有线鼠标，绝不用无线鼠标。而且我还看过他们有一装备，那架子立起来，把鼠标线要搁在架子上，让鼠标线从空中到达桌面。为什么？就是游戏的时候方便，不能因为甩线影响了自己动作的这种灵敏，可见延时对于体验是一个多么重要的事情。</p>
<p>　　如果我们都不在城市，用肉身的方式聚集，不能跟亲朋好友不断地约一咖啡厅去坐一坐，不能去串个门子，不能在重要的决策和谈判和协商的时候，能够完成肉身的直接面对面，八分之一秒的延时会让人类所有精细的体验合作崩溃掉，所以财富也就将不再发生。年轻人来到城市，用肉身的方式来到城市，而不是仅仅通过一根电波线来到城市，这是你未来和他人进行自由协作，也是你终生财富的根本源泉，所以你说你能离开北上广深吗？</p>
<p>　　本段内容参考书目《网络经济的十种策略》 凯文 凯立 著</p>
<p>　　年轻人在城市获得的更多的东西，其实远不仅仅是我们刚才讲的肉身之间的这种非延时的沟通，其实更重要的一个东西是见识。见识这玩意儿跟经济地位，跟什么这个人多聪明，其实没多少关系，就是你是否在大城市生活。</p>
<blockquote>
<p><strong>北京随便一小孩，四五岁一男孩站在街边上，什么名车都认识，他们家地库就跟国贸的车展，也没什么区别，对吧。你外地一个农村的大学生，你可能学问很高，但是对不起你没见识，这是城市生活给人的灵魂世界，带来的最丰厚的一笔礼物。</strong></p>
</blockquote>
<p>　　我们说几个水浒的典故。你比如说宋江出行的时候，他最爱带的是哪几个人？第一个是李逵，打手嘛，最听他的，所以要带着，第二个特务头子戴宗，对吧，这是给他搞情报的，跑得快嘛，这两人带着，另外他最爱带的一个谁呢，一个是燕青，燕青是当时著名的民营大企业家卢俊义的跟班，对吧，大城市生活然后什么歌馆酒楼，到处混的这么一个人，这个人他要带。</p>
<p>　　另外就是柴进，皇族后裔，为什么要带后两个人，这两个人其实后入伙的，因为这两个人有见识，有见识，这个很重要。你比如说到后来他们这个，宋江不是搞招安嘛，就是要跟皇上搞好关系嘛，通过谁呢，通过李师师。所以他们就去找李师师。</p>
<p>　　宋江一个土老帽，他在什么郓城县卡拉OK厅里，可以搞一搞，还是个气派的，对吧，你到天上人间他就歇了吧。李师师是天上人间的小姐，所以一看跟他之间的那个交流，就变得非常地困难。几杯酒下肚，那个水浒传上写说宋江叫什么，捋袖揎拳，把出梁山泊的手段来，搞得人柴进就很不好意思，反复跟这个李师师讲，说我这个表兄喝完酒就这个样子，娘子这个担待，你看这就叫见识。</p>
<p>　　不是说宋江不聪明，不是个英雄，是，你没在大城市混过就是不行。水浒里还讲了一个例子，就是到后来，到后来了，这个蔡九知府他就是蔡京的儿子，给老爹写了一封信。然后吴用就出主意，说咱们把他信给改了，找到什么叫玉臂匠金大坚，新刻了一图章，然后让圣手书生这个萧让，重新模仿蔡京的笔迹写了一封信，然后让戴宗就，没有去相府，直接就送给了这蔡九知府。</p>
<p>　　蔡九差点被骗过，后来旁边有一个人叫黄文炳，黄文炳一看这个信，说这信假的。那怎么是字迹不对还是图章不对，都对，黄文炳说。他说你看，蔡京现在已经老太师已经当了丞相了，他怎么会用翰林蔡京的图章呢，此其一；第二这是老爹给儿子写信，怎么会用蔡京这样的字呢，这叫名讳，对儿子来讲父亲的名字叫名讳，对吧，他肯定是不会用这枚图章，所以此信有诈。</p>
<p>　　蔡九知府一听，有道理，说你把戴宗给我叫来。戴宗送的信嘛，叫来之后就问戴宗，说你到我家去，这信是找谁送进去的，几日得了回信呐。戴宗没去过呀，要知道他只是一般的一个看守所的一小民警，他哪见过相府是什么样的。</p>
<p>　　戴宗说，我就在门口寻，寻了半天寻着了一个门子，然后这个门子就给我递进去了，然后第二日就给了回书，我就带回来了。你看，小地方的人他是不可能理解，在东京汴梁一个相府，那种门庭若市的那个状态的。所以你看他用的词叫寻见一个门子，显得相府这个门厅冷落。</p>
<p>　　怎么回事，蔡九知府勃然大怒，说胡说，我们家所有到我们家送信的人，首先要找到李门子，李门子要送给张干办，张干办要送到里面的李督管，然后才能送到里面，随你多亲多近，必须三日才得回书，一定有诈，给我打，从实招来。</p>
<p>　　那就破了嘛，你说怪戴宗嘛，他没在东京汴梁生活过，他没有这番见识，所以管你是什么萧让的模仿字迹，还是金大坚的新刻图章，所有技术环节都没有错，但是见识上出了错，你最后所有的骗局都不能成功。</p>
<p>　　民间其实有很多这样的笑话。你比如说一个农民，两农民聊天，这是我在秦牧的散文里看到的。两农民吹牛，一个吹牛说我见过皇上金銮殿。那个说金銮殿什么样，说金銮殿那好，左边一个油条铺子，右边一个烧饼铺子，皇上想下来吃哪个就吃哪个，都不给钱的。你看，一个农民他能够想像的世界上最好的生活就那样。一个捡粪的坐路边上叹气，说他妈的，我要是当上了皇上，这捡粪的叉子得是金的，而且路两边的粪都得归我一人捡。</p>
<p>　　然后打倒四人帮之后，民间有传说，说江青腐败，那个老婆娘不是东西，对吧，床头搁着一红糖罐子，床尾搁一白糖罐子，夜里起来都吃。对呀，当时老百姓觉得，能吃上糖就是皇上娘娘的生活，他觉得江青就那样。这就是见识对一个人的妨碍，所以你说你能不留在北上广深吗？</p>
<p>　　本段参考书目《闲看水浒》 十年砍柴 著</p>
<p>　　美国有一个学者叫芒福德，他写过一本书叫《城市文化》。他也在进一步论述，就是城市对一个人生命的好处，其中书中有一小段算了一笔账。他说我们假设一万个人能出一天才，对吧，但是在城市里因为人多，所以出的天才就比较多。你如果是比较孤立的小群体，比如说乡村，可能这个出现一个天才的时间，就会变得非常长，要多少代才能出一个天才。</p>
<p>　　但这不重要，更关键的是当你在一个孤立的小群落的时候，你是天才你没办法知道。比如说你可能出现在一个乡村，你可能具有绘画的天赋，但是你没有办法亲自拜访达芬奇，你没有办法去听陈丹青的讲座，你没有办法周六周日去跑到中国美术馆去参观。你根本不可能知道你有绘画的天赋，也许你终身作为一个铁匠的小徒弟，叮叮当当敲了一生，而根本不知道如果锤头变成了画笔，你将是璀璨的巨星。</p>
<p>　　所以说乡村孤立的生活，小城镇的生活不是说没有天才，而是天才永远没有办法知道自己是天才，只有城市它提供了大量的机会，每个人生命中的那个种子，可以被激发，被照耀，然后才完成一次闪亮，所以</p>
<blockquote>
<p><strong>不管北上广深的房价有多贵，居住有多难，北京的空气有多糟糕，道路有多堵，还是要留在这里，等待那种城市以及互联网社会的光芒，照耀到你的天才之上。</strong></p>
</blockquote>
<p>　　本段内容参考书目《城市文化》 刘易斯 芒福德 著</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/%E7%BD%97%E6%8C%AF%E5%AE%87.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://bbs.tianya.cn/post-free-3731338-1.shtml&quot;&gt;罗辑思维文字版No.2 拒绝逃离北上广：见识决定命运&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;北京随便一小孩，四五岁一男孩站在街边上，什么名车都认识，他们家地库就跟国贸的车展，也没什么区别，对吧。你外地一个农村的大学生，你可能学问很高，但是对不起你没见识，这是城市生活给人的灵魂世界，带来的最丰厚的一笔礼物。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不管北上广深的房价有多贵，居住有多难，北京的空气有多糟糕，道路有多堵，还是要留在这里，等待那种城市以及互联网社会的光芒，照耀到你的天才之上。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Purpose of Reading</title>
    <link href="http://ipcreator.me/2017/03/19/MyView/Original/why-insist-on-reading/"/>
    <id>http://ipcreator.me/2017/03/19/MyView/Original/why-insist-on-reading/</id>
    <published>2017-03-19T13:46:18.000Z</published>
    <updated>2017-03-27T10:23:56.707Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sanwen8.cn/p/6738t3w.html" target="_blank" rel="external">樊登读书会</a></p>
<p><img src="https://w5.sanwen8.cn/mmbiz/TAJQnEXKzCNaTOKOiaI1TicuA6BW4alKEjRicibpR7iaBhc4puArkRZledZ7ZZMLsZenEMWfylxzSseH3icRfFgYKh9g/0?wx_fmt=gif" alt=""></p>
  <a id="more"></a>
<blockquote>
<p>1、脚步不能丈量的地方，文字可以；眼睛到不了的地方，文字可以。</p>
<p>2、今天多学一点知识，明天就少一句求人的话。</p>
<p>3、“我读过很多书，但后来大部分都忘记了，你说这样的阅读究竟有什么意义？”回答“当我还是个孩子时，我吃过很多食物，现在已经记不起来吃过什么了。但可以肯定的是，它们中的一部分已经长成我的骨头和肉。”你读过的书其实早已融进你的骨血，只要一个触动点，就会喷薄而出。</p>
<p>4、有人问，女孩子上那么久的学、读那么多的书，最终不还是要回到一座平凡的城市，打一份平常的工，嫁作人妇，洗衣煮饭，相夫教子，何苦折腾？我想，我们的坚持是为了，就算最终跌入繁琐，洗尽铅华，同样的工作，却有不一样的心境，同样的家庭，却有不一样的情调，同样的后代，却有不一样的素养。</p>
<p>5、拓宽灵魂的广度和宽度，能在跌宕起伏的生活中拥有处变不惊的内心。</p>
<p>6、“你现在的气质里，藏着你走过的路，读过的书，爱过的人。”</p>
<p>7、“读书，让我即使没有富庶的生活，仍有富庶的生命，让我清贫至今也朴素至今，平凡至今也善良至今，渺小至今也强大至今，甚至日后嫁人，此生智慧和善念就是我的嫁妆。我未入过繁华之境，未听过喧嚣之声，未见过太多生灵，未有过**心灵，但书本给了我所有智慧和情感。”</p>
<p>8、“如果你半夜醒来发现自己已经**时间没读书，而且没有任何负罪感的时候，你就必须知道，你已经堕落了。不是说书本本身有多么了不起，而是读书这个行为意味着你没有完全认同这个现世和现实，你还有追求，还在奋斗，你还有不满，你还在寻找另一种可能，另一种生活方式。”</p>
<p>9、我读书为的就是不遇到我不想遇到的人。</p>
<p>10、读书，是为了成为一个有温度懂情趣会思考的人。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://sanwen8.cn/p/6738t3w.html&quot;&gt;樊登读书会&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://w5.sanwen8.cn/mmbiz/TAJQnEXKzCNaTOKOiaI1TicuA6BW4alKEjRicibpR7iaBhc4puArkRZledZ7ZZMLsZenEMWfylxzSseH3icRfFgYKh9g/0?wx_fmt=gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Reading" scheme="http://ipcreator.me/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>My Experience of Cities</title>
    <link href="http://ipcreator.me/2017/03/19/MyView/Journey/vision-of-cities/"/>
    <id>http://ipcreator.me/2017/03/19/MyView/Journey/vision-of-cities/</id>
    <published>2017-03-19T12:00:06.000Z</published>
    <updated>2017-03-27T08:25:11.379Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omj173lhw.bkt.clouddn.com/world.jpg" alt=""></p>
<blockquote>
<p><strong>见多才能识广</strong><br>读万卷书<br>行万里路<br>识万千人</p>
</blockquote>
 <a id="more"></a>
<h2 id="深圳"><a href="#深圳" class="headerlink" title="深圳"></a>深圳</h2><p>2007~</p>
<blockquote>
<p>蓝天白云、开放包容、年轻时尚、创新、快节奏</p>
</blockquote>
<p>时间就是金钱<br>效率就是生命</p>
<p><img src="http://okkntqe2h.bkt.clouddn.com/20170217_133024.jpg" alt=""></p>
<h2 id="长沙"><a href="#长沙" class="headerlink" title="长沙"></a>长沙</h2><p>2000~2007</p>
<blockquote>
<p>高校、美食、慢节奏</p>
</blockquote>
<p>实事求是<br>敢为人先</p>
<h2 id="大庆"><a href="#大庆" class="headerlink" title="大庆"></a>大庆</h2><p>>3months</p>
<blockquote>
<p>石油、关系、面子</p>
</blockquote>
<h2 id="香港"><a href="#香港" class="headerlink" title="香港"></a>香港</h2><p>>1months</p>
<blockquote>
<p>蜗居、发达、质量、法治</p>
</blockquote>
<h2 id="北京"><a href="#北京" class="headerlink" title="北京"></a>北京</h2><p>>20days</p>
<blockquote>
<p>首都、雾霾、拥挤</p>
</blockquote>
<h2 id="驻马店"><a href="#驻马店" class="headerlink" title="驻马店"></a>驻马店</h2><p>>10days</p>
<blockquote>
<p>平原</p>
</blockquote>
<h2 id="西安"><a href="#西安" class="headerlink" title="西安"></a>西安</h2><p>>10days</p>
<blockquote>
<p>古城、高校、面食</p>
</blockquote>
<h2 id="广州"><a href="#广州" class="headerlink" title="广州"></a>广州</h2><p>>10days</p>
<blockquote>
<p>省会、底蕴</p>
</blockquote>
<h2 id="武汉"><a href="#武汉" class="headerlink" title="武汉"></a>武汉</h2><p>>10days</p>
<blockquote>
<p>武昌、汉阳、汉口、武钢</p>
</blockquote>
<h2 id="重庆"><a href="#重庆" class="headerlink" title="重庆"></a>重庆</h2><p>>7days</p>
<blockquote>
<p>火锅、长江</p>
</blockquote>
<p><a href="http://baike.baidu.com/link?url=oFG9lCiJxRnOhAH2ADUlvEDzKOCpSlghUaXhviW4TgYU1IRtDvNYp_KgUXtCva_lTIFEs7BgNHkrwU4v0Zmx5ChPQIiUmKKXzK20wpcg7by" target="_blank" rel="external">因宋淳熙十六年，光宗赵惇先封恭王再即帝位，自诩“双重喜庆”，由此得名。</a></p>
<h2 id="南京"><a href="#南京" class="headerlink" title="南京"></a>南京</h2><p>>7days</p>
<blockquote>
<p>秦淮河畔、鸭血粉丝汤、灌汤包</p>
</blockquote>
<h2 id="杭州"><a href="#杭州" class="headerlink" title="杭州"></a>杭州</h2><p>>7days</p>
<blockquote>
<p>苏杭大运河、西湖</p>
</blockquote>
<p>千年等一回，西湖的水…</p>
<h2 id="庐山"><a href="#庐山" class="headerlink" title="庐山"></a>庐山</h2><p>>2days</p>
<blockquote>
<p>庐山</p>
</blockquote>
<h2 id="丽江"><a href="#丽江" class="headerlink" title="丽江"></a>丽江</h2><p>>2days</p>
<blockquote>
<p>古城、玉龙雪山、虎跳峡</p>
</blockquote>
<h2 id="桂林"><a href="#桂林" class="headerlink" title="桂林"></a>桂林</h2><p>>2days</p>
<blockquote>
<p>漓江</p>
</blockquote>
<p>桂林山水甲天下</p>
<h2 id="韶山"><a href="#韶山" class="headerlink" title="韶山"></a>韶山</h2><p>>1days</p>
<blockquote>
<p>毛泽东故居</p>
</blockquote>
<p>东方红，太阳升，中国出了个毛泽东</p>
<h2 id="惠州"><a href="#惠州" class="headerlink" title="惠州"></a>惠州</h2><p>>1days</p>
<blockquote>
<p>生蚝宴</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omj173lhw.bkt.clouddn.com/world.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;见多才能识广&lt;/strong&gt;&lt;br&gt;读万卷书&lt;br&gt;行万里路&lt;br&gt;识万千人&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Hacksaw Ridge</title>
    <link href="http://ipcreator.me/2017/03/19/MyView/Movie/hacksaw-ridge/"/>
    <id>http://ipcreator.me/2017/03/19/MyView/Movie/hacksaw-ridge/</id>
    <published>2017-03-19T10:30:18.000Z</published>
    <updated>2017-03-29T04:18:01.297Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>Belief、Courage、One More</strong></p>
</blockquote>
<p><img src="https://img1.doubanio.com/view/movie_poster_cover/lpst/public/p2397337958.webp" alt=""></p>
<a id="more"></a>
<p>导演: 梅尔·吉布森<br>编剧: 安德鲁·奈特 / 罗伯特·申坎<br>主演: 安德鲁·加菲尔德 / 萨姆·沃辛顿 / 文斯·沃恩 / 雨果·维文 / 卢克·布雷西 / 更多…<br>类型: 剧情 / 动作 / 传记 / 历史 / 战争<br>官方网站: www.hacksawridge.movie/<br>制片国家/地区: 美国 / 澳大利亚<br>语言: 英语<br>上映日期: 2016-12-08(中国大陆) / 2016-11-04(美国)<br>片长: 139分钟(中国大陆) / 140分钟(美国)<br>又名: 钢锯岭 / 钢铁英雄(台) / The Conscientious Objector<br>IMDb链接: <a href="http://www.imdb.com/title/tt2119532" target="_blank" rel="external">tt2119532</a></p>
<p>1945年，第二次世界大战接近尾声，作为邪恶轴心重要成员的日本，其嚣张态势已成强弩之末。是年，决定战局走向的冲绳岛战役拉开序幕，成千上万斗志昂扬的美国大兵被派往冲绳，等待他们的则是敌军重兵防守、凶险异常的钢锯岭。在这群人中间，却有一个不愿拿起武器的军医。他名叫戴斯蒙德·道斯（安德鲁·加菲尔德 Andrew Garfield 饰），来自美国的弗吉尼亚。太平洋爆发之际，瘦弱的戴斯蒙德志愿成为救死扶伤的军医而应征入伍。可因童年和家庭的原因，他始终不愿拿起枪支操练，为此宁愿背上拒服兵役的罪名被送上军事法庭。几经周折，戴斯蒙德最终和战友来到了钢锯岭。枪林弹雨，转瞬之间无数人应声倒地。在信仰和信念的支持下，戴斯蒙德仅凭一己之力拯救了数十条濒死的生命……<br>　　本片根据真人真事改编。</p>
<p><a href="https://movie.douban.com/review/8276029/" target="_blank" rel="external">为人帅表</a></p>
<p>信仰的力量竟会强大到如此地步，能让一个人舍生忘死。影片的最后，道斯被担架吊下钢锯岭，云层中一道阳光射下来，他就像是上帝派来拯救世人的天使。</p>
<p><a href="https://movie.douban.com/review/8202847/" target="_blank" rel="external">方聿南</a></p>
<p>战场上，每个人都在拼命抓住一把枪，就像溺水的人的把手伸向一把稻草一样急迫。而这个手无寸铁的年轻人，却坚定无畏地穿梭在枪林弹雨中，奔向每一个“医疗兵救救我”的发声之地。</p>
<p>信仰不是一桩可以功利计算的生意，它是文明世界的人们赖以自我支撑的基石。就像道斯对未婚妻说的，如果我连信仰都没有了，无法想象还能怎么活着。<br><img src="https://img1.doubanio.com/view/thing_review/large/public/p384097.jpg" alt=""></p>
<p><a href="https://movie.douban.com/review/8218469/" target="_blank" rel="external">zts</a></p>
<p>我们总是把奖章送给死者和先烈，歌颂他们为国家和后人做出的牺牲。但我们是否曾想过，战士们其实最想要的嘉奖，是活着看到和平与胜利到来的那一天，而不是成为一具被缅怀的冰冷尸体。为国家而战和为自己而战并不矛盾，死亡在大多数情况下都是一件轻而易举的事情，相反，活着却难得多，而救活一个人，则难上加难。这也是为何一个战地医生如此打动人们的原因。他不仅减轻了士兵对死亡的恐惧，更重新定义了什么是勇敢和忠诚。</p>
<p><img src="https://img3.doubanio.com/view/thing_review/large/public/p394215.jpg" alt=""></p>
<p><img src="https://img5.doubanio.com/view/thing_review/large/public/p354266.jpg" alt=""></p>
<p><img src="https://img3.doubanio.com/view/thing_review/large/public/p394221.jpg" alt=""></p>
<p><img src="https://img3.doubanio.com/view/thing_review/large/public/p394234.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Belief、Courage、One More&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img1.doubanio.com/view/movie_poster_cover/lpst/public/p2397337958.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="English" scheme="http://ipcreator.me/tags/English/"/>
    
      <category term="Movie" scheme="http://ipcreator.me/tags/Movie/"/>
    
  </entry>
  
  <entry>
    <title>Great Open Source Frameworks of Android</title>
    <link href="http://ipcreator.me/2017/03/15/Program/Android/good-open-source-framework/"/>
    <id>http://ipcreator.me/2017/03/15/Program/Android/good-open-source-framework/</id>
    <published>2017-03-15T03:07:06.000Z</published>
    <updated>2017-03-27T07:57:10.418Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://static.oschina.net/uploads/space/2016/0630/164213_tgqJ_2652078.png?_=6221380" alt=""></p>
<p>原文出处：<a href="http://www.cnblogs.com/Free-Thinker/" target="_blank" rel="external">brave-sailor</a><br><a href="http://www.cnblogs.com/Free-Thinker/p/6221377.html" target="_blank" rel="external">Android中常用的优秀开源框架</a><br><a href="http://www.cnblogs.com/Free-Thinker/p/6221380.html" target="_blank" rel="external">15 个 Android 通用流行框架大全</a></p>
<p>Android开源框架库分类，挑选出最常用，最实用的开源项目，本篇主要介绍的是优秀开源框架库和项目，UI个性化控件会独立介绍。<br><a href="https://github.com/yeungeek/awesome-android-ui" target="_blank" rel="external">UI个性化控件</a></p>
  <a id="more"></a>
<h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><p>Dependency Injections<br>AndroidAnnotations<br>Butter Knife<br>Dagger<br>Networking<br>Android Lite Http<br>Asynchronous Http Client for Android<br>Async Http Client<br>HttpCache<br>Http Request<br>Ion<br>OkHttp<br>Retrofit<br>Volley<br>Volley OkHttp Android<br>Image Loader<br>Fresco<br>Cube SDK<br>Glide<br>ImageCache<br>Picasso<br>Universal Image Loader for Android<br>O/R Mapping<br>ActiveAndroid<br>GreenDAO<br>OrmLite-Android<br>Realm<br>Sugar ORM<br>Event Buses<br>EventBus<br>Otto<br>AndroidEventBus<br>JSON<br>fastjson<br>GSON<br>Jackson<br>Moshi<br>Background Processing<br>Bolts-Android<br>android-priority-jobqueue<br>Image Processing<br>android-gpuimage<br>ImageFilterForAndroid<br>Camera<br>cwac-camera<br>SquareCamera<br>CameraModule<br>OpenCamera<br>StickerCamera<br>Video<br>AndroidFFmpeg<br>Vitamio<br>Logging<br>Logger<br>DebugLog<br>hugo<br>Android Plugin<br>AndroidDynamicLoader<br>dynamic-load-apk<br>android-pluginmgr<br>Security<br>Conceal<br>SQLCipher<br>Showcases<br>PocketHub<br>iosched<br>Cheesesquare<br>muzei<br>u2020<br>Dependency Injections</p>
<h2 id="AndroidAnnotations"><a href="#AndroidAnnotations" class="headerlink" title="AndroidAnnotations"></a>AndroidAnnotations</h2><p>Repository: <a href="https://github.com/excilys/androidannotations" target="_blank" rel="external">https://github.com/excilys/androidannotations</a><br>Description: Android快速开发框架。<br>Features:</p>
<p>依赖注入：包括view，extras，系统服务，资源等等<br>简单的线程模型，通过annotation表示方法运行在ui线程还是后台线程<br>事件绑定：通过annotation表示view的响应事件，不用在写内部类<br>REST客户端：定义客户端接口，自动生成REST请求的实现<br>没有你想象的复杂：AndroidAnnotations只是在在编译时生成相应子类<br>不影响应用性能：仅50kb，在编译时完成，不会对运行时有性能影响。<br>PS：与roboguice的比较：roboguice通过运行时读取annotations进行反射，所以可能影响应用性能，而AndroidAnnotations在编译时生成子类，所以对性能没有影响。<br>Butter Knife</p>
<p>Repository: <a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">https://github.com/JakeWharton/butterknife</a><br>Description: JakeWharton的开源作品，利用annotation帮你快速完成View的初始化，减少代码。<br>Features:</p>
<p>支持 Activity 中的 View 注入<br>支持 View 中的 View 注入<br>支持 View 事件回调函数注入<br>Dagger</p>
<p>Repository: <a href="https://github.com/square/dagger" target="_blank" rel="external">https://github.com/square/dagger</a><br>Description: sqaure开源的依赖注入框架，是Guice的一个子集，更轻量，更适合在Android平台使用。<br>Features:</p>
<p>使用 JSR-330标准注解进行构造器注入<br>使用@Provides注解创建对象<br>针对依赖树的中心上下文<br>昂贵资源延迟注入<br>同一接口的多种实现<br>静态注入 (针对遗留环境)<br>绑定的编译时验证<br>依赖注入框架的对比：dagger-and-butter-knife-vs-android-annotations,依赖注入浅析</p>
<p>Networking</p>
<p>Android Lite Http</p>
<p>Repository: <a href="https://github.com/litesuits/android-lite-http" target="_blank" rel="external">https://github.com/litesuits/android-lite-http</a><br>Description: 一款‘智能’的HTTP框架类库。国人开发的一套框架。<br>Features:</p>
<p>单线程，所有方法都基于一个线程，绝不会跨线程，多线程的事情交给它自带的AsyncExecutor 或者更专业的框架库来解决。<br>灵活的架构，你可以轻松的替换Json自动化库、参数构建方式甚至默认的apache http client连接方式。<br>轻量级，微小的的开销，core jar包仅约86kb。<br>多种请求类型全面支持：get, post, head, put, delete, trace, options, patch.<br>多文件上传，不需要额外的类库支持。<br>内置的Dataparser支持文件和位图下载，你也可以自由的扩展DataParser来把原始的http inputstream转化为你想要的东西。<br>基于json的全自动对象转化： 框架帮你完成Java Object Model 和 Http Parameter之间的转化，完成Http Response与Java Object Model的转化。<br>自动重定向，基于一定的次数，不会造成死循环。<br>自动gizp压缩，帮你完成request编码和response解码以使http连接更加快速.<br>通过网络探测完成智能重试 ，对复杂的、信号不良的的移动网络做特殊的优化。<br>禁用一种或多种网络, 比如2G，3G。<br>简明且统一的异常处理体系：清晰、准确的抛出客户端、网络、服务器三种异常。<br>内置的AsyncExecutor可以让你轻松实现异步和并发的http请求，如果你喜欢，随意使用你自己的AsyncTask或Thread来完成异步，推荐使用更强大、高效的专业并发库。<br>Asynchronous Http Client for Android</p>
<p>Repository: <a href="https://github.com/loopj/android-async-http" target="_blank" rel="external">https://github.com/loopj/android-async-http</a><br>Description: Android异步Http请求<br>Used By:</p>
<p>Instagram<br>Pinterest<br>Frontline Commando<br>Thousands more apps…<br>Features:</p>
<p>在匿名回调中处理请求结果<br>在UI线程外进行http请求<br>请求使用ThreadPool来处理并非资源的使用<br>文件断点上传<br>智能重试<br>默认gzip压缩<br>内置Json解析<br>可将Cookies持久化到SharedPreferences<br>More<br>Async Http Client</p>
<p>Repository: <a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="external">https://github.com/AsyncHttpClient/async-http-client</a><br>Description: Java异步Http和WebSocket请求。使用NIO实现异步操作，默认的异步实现是基于Netty之上。</p>
<p>HttpCache</p>
<p>Repository: <a href="https://github.com/Trinea/AndroidCommon" target="_blank" rel="external">https://github.com/Trinea/AndroidCommon</a><br>Description: Trinea大神写的Http缓存工具。<br>Features:</p>
<p>根据cache-control、expires缓存http请求<br>支持同步、异步Http请求<br>在匿名回调中处理请求结果<br>在UI线程外进行http请求<br>默认gzip压缩<br>Http Request</p>
<p>Repository: <a href="https://github.com/kevinsawicki/http-request" target="_blank" rel="external">https://github.com/kevinsawicki/http-request</a><br>Description: Java HTTP请求库。</p>
<p>Ion</p>
<p>Repository: <a href="https://github.com/koush/ion" target="_blank" rel="external">https://github.com/koush/ion</a><br>Description: Android异步网络和图片加载. Used By: <a href="https://github.com/koush/ion#projects-using-ion" target="_blank" rel="external">https://github.com/koush/ion#projects-using-ion</a><br>Features: <a href="https://github.com/koush/ion#features" target="_blank" rel="external">https://github.com/koush/ion#features</a></p>
<p>OkHttp</p>
<p>Repository: <a href="https://github.com/square/okhttp" target="_blank" rel="external">https://github.com/square/okhttp</a><br>Description: Square开源的http库，支持http和spdy协议.<br>Features:</p>
<p>支持HTTP2和SPDY<br>如果SPDY不可用，利用连接池减少请求延迟<br>使用GZIP压缩<br>Response缓存减少不必要的请求<br>Retrofit</p>
<p>Repository: <a href="https://github.com/square/retrofit" target="_blank" rel="external">https://github.com/square/retrofit</a><br>Description: Square开源的Android和Java的REST风格请求库.</p>
<p>Volley</p>
<p>Repository: google volley | <a href="https://github.com/mcxiaoke/android-volley" target="_blank" rel="external">https://github.com/mcxiaoke/android-volley</a><br>Description: Google提供的网络通信库，使得网络请求更简单、更快速<br>Features:</p>
<p>JSON，图像等的异步下载<br>网络请求的排序<br>网络请求的优先级处理<br>缓存<br>多级别取消请求<br>和Activity和生命周期的联动（Activity结束时同时取消所有网络请求）<br>More<br>Volley OkHttp Android</p>
<p>Repository: <a href="https://github.com/lxdvs/Volley-OkHttp-Android" target="_blank" rel="external">https://github.com/lxdvs/Volley-OkHttp-Android</a><br>Description: 整合OkHttp和Volley。</p>
<p>Image Loader</p>
<p>Fresco</p>
<p>Repository:</p>
<p><a href="https://github.com/facebook/fresco" target="_blank" rel="external">https://github.com/facebook/fresco</a><br><a href="http://fresco-cn.org/" target="_blank" rel="external">http://fresco-cn.org/</a><br>Description: Facebook 开源的一个强大的图片加载组件。<br>Features:</p>
<p>内存管理，两个内存缓存加上磁盘缓存构成了三级缓存<br>支持流式，图片的渐进式呈现<br>支持Gif图和WebP格式<br>更多样的显示，如圆角、进度条、点击重试、自定义对焦点<br>支持Android2.3+<br>Cube SDK</p>
<p>Repository: <a href="https://github.com/etao-open-source/cube-sdk" target="_blank" rel="external">https://github.com/etao-open-source/cube-sdk</a><br>Description: 一淘开源的一款Android开发包，包括图片加载和网络请求服务，综合了Android-Universal-Image-Loader和square等组件优点。<br>Features:</p>
<p>使用简单<br>加载速度快，节省资源<br>方便定制和改造<br>图片复用<br>只关注请求结果，专注于业务<br>请求缓存 / 本地预设请求数据<br>简单的JsonData，轻松访问接口数据<br>基于Fragment的UI框架<br>屏幕尺寸信息<br>网络状态信息<br>Glide</p>
<p>Repository: <a href="https://github.com/bumptech/glide" target="_blank" rel="external">https://github.com/bumptech/glide</a><br>Description: 一个高效、开源、 Android设备上的媒体管理框架。灵活的API，可以和很多网络框架进行整合。<br>Features:</p>
<p>GIF动画的解码<br>本地视频剧照的解码<br>Activity生命周期的集成<br>转码的支持<br>动画的支持<br>OkHttp和Volley的支持<br>其他功能：图片加载过程中占位符等<br>ImageCache</p>
<p>Repository: <a href="https://github.com/Trinea/AndroidCommon" target="_blank" rel="external">https://github.com/Trinea/AndroidCommon</a><br>Description: Trinea开源的图片缓存，包含内存和Sdcard缓存。 Features:</p>
<p>支持预取新图片，支持等待队列<br>包含二级缓存，可自定义文件名保存规则<br>可选择多种缓存算法(FIFO、LIFO、LRU、MRU、LFU、MFU等13种)或自定义缓存算法<br>可方便的保存及初始化恢复数据<br>支持不同类型网络处理<br>可根据系统配置初始化缓存等<br>Picasso</p>
<p>Repository: <a href="https://github.com/square/picasso" target="_blank" rel="external">https://github.com/square/picasso</a><br>Description: square开源的图片缓存。<br>Features:</p>
<p>可以自动检测adapter的重用并取消之前的下载<br>图片变换<br>可以加载本地资源<br>可以设置占位资源<br>支持debug模式<br>Universal Image Loader for Android</p>
<p>Repository: <a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">https://github.com/nostra13/Android-Universal-Image-Loader</a><br>Description: 应该是使用最多的图片缓存，支持主流图片缓存的绝大多数特性。<br>Features:</p>
<p>多线程图片加载(同步或者异步)<br>尽可能多的配置选项（线程池，加载器，解析器，内存/磁盘缓存，显示参数等等）<br>图片可以缓存在内存中，或者设备文件目录下，或者SD卡中<br>可以监听加载进度<br>可以自定义显示每一张图片时都带不同参数<br>支持Widget<br>Used By:<br>Applications using</p>
<p>O/R Mapping</p>
<p>5个推荐的orm框架</p>
<p>ActiveAndroid</p>
<p>Repository: <a href="https://github.com/pardom/ActiveAndroid" target="_blank" rel="external">https://github.com/pardom/ActiveAndroid</a><br>Description: ActiveAndroid是一个轻量级的orm框架，名称命令方式类似于Yii、Rails等使用的orm框架ActiveRecord。</p>
<p>GreenDAO</p>
<p>Repository: <a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">https://github.com/greenrobot/greenDAO</a><br>Description: GreenDAO是一个轻量级，快速的orm框架。简化建表、查询、更新、插入、事务、索引的操作。<br>Features:</p>
<p>性能突出(比ormlite快4-5倍), performance<br>库小，核心包小于100k<br>简单易用的API<br>支持protobuf<br>自动生成数据库访问代码<br>OrmLite-Android</p>
<p>Repository: <a href="https://github.com/j256/ormlite-android" target="_blank" rel="external">https://github.com/j256/ormlite-android</a><br>Description: OrmLite不是Android平台专用的orm框架，它是一个Java orm，OrmLite For Android增加了对Android平台的支持。</p>
<p>Realm</p>
<p>Repository: <a href="https://github.com/realm/realm-java" target="_blank" rel="external">https://github.com/realm/realm-java</a><br>Description: 移动端的数据库，适用于 Phone、Tablet、Wearable，支持 ORM，线程安全、支持连表及数据库加密，比 SQLite 性能更好。<br>Features:</p>
<p>着重移动端<br>简单易用的API<br>支持线程安全，关系数据库和加密<br>访问快速<br>跨平台<br>Sugar ORM</p>
<p>Repository: <a href="https://github.com/satyan/sugar" target="_blank" rel="external">https://github.com/satyan/sugar</a><br>Description: Android平台专用orm框架。<br>Features:</p>
<p>配置少<br>自动生成表结构<br>支持在不同模式版本直接切换</p>
<p>Event Buses</p>
<p>EventBus</p>
<p>Repository: <a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">https://github.com/greenrobot/EventBus</a> Description: 事件总线框架，非注解，效率非常高，这里是和square的otto的对比。<br>Features:</p>
<p>非注解<br>便利，以onEvent方法来接收<br>性能优化，是android上最快的事件总线框架<br>单例<br>事件继承<br>Otto</p>
<p>Repository: <a href="https://github.com/square/otto" target="_blank" rel="external">https://github.com/square/otto</a><br>Description: Square开源的事件总线框架，在Guava基础上加强，基于注解形式。</p>
<p>AndroidEventBus</p>
<p>Repository: <a href="https://github.com/bboyfeiyu/AndroidEventBus" target="_blank" rel="external">https://github.com/bboyfeiyu/AndroidEventBus</a><br>Description: bboyfeiyu开源的事件总线框架，吸收了greenrobot的EventBus以及square的otto的优点，并在此基础上做出了相应的改进，使得事件总线框架更适合用户的使用习惯，也使得事件的投递更加的精准、灵活。</p>
<p>JSON</p>
<p>fastjson</p>
<p>Repository: <a href="https://github.com/alibaba/fastjson" target="_blank" rel="external">https://github.com/alibaba/fastjson</a><br>Description: 阿里巴巴开源JSON解析库，是一个Java语言编写的高性能功能完善的JSON库。它采用一种“假定有序快速匹配”的算法，把JSON Parse的性能提升到极致，是目前Java语言中最快的JSON库。各种JSON库的比较<br>Features:</p>
<p>速度最快，测试表明，fastjson具有极快的性能，超越任其他的java json parser。包括自称最快的jackson<br>功能强大，完全支持java bean、集合、Map、日期、Enum，支持范型，支持自省<br>无依赖，能够直接运行在Java SE 5.0以上版本<br>支持Android<br>GSON</p>
<p>Repository: <a href="https://github.com/google/gson" target="_blank" rel="external">https://github.com/google/gson</a><br>Description: google开源的JSON解析库</p>
<p>Jackson</p>
<p>Repository: <a href="https://github.com/FasterXML/jackson-core" target="_blank" rel="external">https://github.com/FasterXML/jackson-core</a><br>Description: Jackson可以轻松的将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象</p>
<p>Moshi</p>
<p>Repository: <a href="https://github.com/square/moshi" target="_blank" rel="external">https://github.com/square/moshi</a><br>Description: square开源的JSON库，与GSON相比，更少的内建类型，更少的配置，安全的html转义等。</p>
<p>Background Processing</p>
<p>Bolts-Android</p>
<p>Repository: <a href="https://github.com/BoltsFramework/Bolts-Android" target="_blank" rel="external">https://github.com/BoltsFramework/Bolts-Android</a><br>Description: Parse发布的面向Android的底层库集合，参见parse-announces-bolts</p>
<p>android-priority-jobqueue</p>
<p>Repository: <a href="https://github.com/path/android-priority-jobqueue" target="_blank" rel="external">https://github.com/path/android-priority-jobqueue</a><br>Description: Path开源的android优先级任务队列框架。</p>
<p>Image Processing</p>
<p>android-gpuimage</p>
<p>Repository: <a href="https://github.com/path/android-priority-jobqueue" target="_blank" rel="external">https://github.com/path/android-priority-jobqueue</a><br>Description: GPUImage是个功能十分强大、又十分易用的图像处理库。提供各种各样的图像处理滤镜，并且支持照相机和摄像机的实时滤镜。</p>
<p>ImageFilterForAndroid</p>
<p>Repository: <a href="https://github.com/daizhenjun/ImageFilterForAndroid" target="_blank" rel="external">https://github.com/daizhenjun/ImageFilterForAndroid</a><br>Description: 国内的代震军开源的滤镜效果框架。</p>
<p>Camera</p>
<p>cwac-camera</p>
<p>Repository: <a href="https://github.com/commonsguy/cwac-camera" target="_blank" rel="external">https://github.com/commonsguy/cwac-camera</a><br>Description: commonsguy开源的camera操作封装。</p>
<p>SquareCamera</p>
<p>Repository: <a href="https://github.com/boxme/SquareCamera" target="_blank" rel="external">https://github.com/boxme/SquareCamera</a><br>Description: 正方的摄像机，有前后摄像头等操作。</p>
<p>CameraModule</p>
<p>Repository: <a href="https://github.com/Yalantis/CameraModule" target="_blank" rel="external">https://github.com/Yalantis/CameraModule</a><br>Description: Yalantis开源的摄像机，有自动聚焦功能等。</p>
<p>OpenCamera</p>
<p>Repository: <a href="https://github.com/almalence/OpenCamera" target="_blank" rel="external">https://github.com/almalence/OpenCamera</a><br>Description: 完整的摄像机，功能很全，不过代码有点乱。</p>
<p>StickerCamera</p>
<p>Repository: <a href="https://github.com/Skykai521/StickerCamera" target="_blank" rel="external">https://github.com/Skykai521/StickerCamera</a><br>Description: 这是一款集成了相机,图片裁剪,给图片贴贴图打标签的相机应用。</p>
<p>Video</p>
<p>AndroidFFmpeg</p>
<p>Repository: <a href="https://github.com/appunite/AndroidFFmpeg" target="_blank" rel="external">https://github.com/appunite/AndroidFFmpeg</a><br>Description: FFmpeg视频解析的例子。</p>
<p>Vitamio</p>
<p>Repository: <a href="https://github.com/yixia/VitamioBundle" target="_blank" rel="external">https://github.com/yixia/VitamioBundle</a><br>Description: Vitamio是一款Android 与iOS 平台上的全能多媒体开发框架。<br>Features:</p>
<p>全面支持硬件解码与 GPU 渲染<br>能够流畅播放 720P 甚至 1080P 高清 MKV，FLV，MP4，MOV，TS，RMVB 等常见格式的视频<br>在 Android 与 iOS 上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议，包括点播与直播<br>Logging</p>
<p>Logger</p>
<p>Repository: <a href="https://github.com/orhanobut/logger" target="_blank" rel="external">https://github.com/orhanobut/logger</a><br>Description: 简单、美观而且十分强大的 Android 日志工具。</p>
<p>DebugLog</p>
<p>Repository: <a href="https://github.com/MustafaFerhan/DebugLog" target="_blank" rel="external">https://github.com/MustafaFerhan/DebugLog</a><br>Description: 可以帮你创建更简单和更容易理解的调试日志，能够友好的显示调试信息所在类和函数。</p>
<p>hugo</p>
<p>Repository: <a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">https://github.com/JakeWharton/hugo</a><br>Description: 用于打印函数信息及执行时间的工具，仅在 debug 模式生效。</p>
<p>Android Plugin</p>
<p>AndroidDynamicLoader</p>
<p>Repository: <a href="https://github.com/mmin18/AndroidDynamicLoader" target="_blank" rel="external">https://github.com/mmin18/AndroidDynamicLoader</a><br>Description: 点评的插件化实现方式，是用 Fragment 以及 Schema 的方式实现。</p>
<p>dynamic-load-apk</p>
<p>Repository: <a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">https://github.com/singwhatiwanna/dynamic-load-apk</a><br>Description: Apk动态加载框架，热部署，利用 ClassLoader 以及 Activity 代理的方式解决。</p>
<p>android-pluginmgr</p>
<p>Repository: <a href="https://github.com/houkx/android-pluginmgr" target="_blank" rel="external">https://github.com/houkx/android-pluginmgr</a><br>Description: 一种无须规范限制的动态加载解决方案，插件不需要依赖任何API<br>Features:</p>
<p>插件为普通apk，无须依赖任何jar<br>Activity生命周期由系统自己管理<br>使用简单，只需要了解一个类PluginManager的两个方法<br>启动Activity的效率高<br>不修改插件，被加载的插件仍然可以独立安装。<br>Security</p>
<p>Conceal</p>
<p>Repository: <a href="https://github.com/facebook/conceal" target="_blank" rel="external">https://github.com/facebook/conceal</a><br>Description: Conceal是一套用于Android上的文件加密和鉴权的Java API</p>
<p>SQLCipher</p>
<p>Repository: <a href="https://github.com/sqlcipher/android-database-sqlcipher" target="_blank" rel="external">https://github.com/sqlcipher/android-database-sqlcipher</a><br>Description: Sqlite 加密工具</p>
<p>Showcases</p>
<p>PocketHub</p>
<p>Repository: <a href="https://github.com/pockethub/PocketHub" target="_blank" rel="external">https://github.com/pockethub/PocketHub</a><br>Description: Github 的 Android 客户端项目</p>
<p>iosched</p>
<p>Repository: <a href="https://github.com/google/iosched" target="_blank" rel="external">https://github.com/google/iosched</a><br>Description: The Google I/O 2014 Android App</p>
<p>Cheesesquare</p>
<p>Repository: <a href="https://github.com/chrisbanes/cheesesquare" target="_blank" rel="external">https://github.com/chrisbanes/cheesesquare</a><br>Description: Demos the new Android Design library</p>
<p>muzei</p>
<p>Repository: <a href="https://github.com/romannurik/muzei" target="_blank" rel="external">https://github.com/romannurik/muzei</a><br>Description: 定时更换桌面精美壁纸</p>
<p>u2020</p>
<p>Repository: <a href="https://github.com/JakeWharton/u2020" target="_blank" rel="external">https://github.com/JakeWharton/u2020</a><br>Description: 开源框架集成的demo</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://static.oschina.net/uploads/space/2016/0630/164213_tgqJ_2652078.png?_=6221380&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;原文出处：&lt;a href=&quot;http://www.cnblogs.com/Free-Thinker/&quot;&gt;brave-sailor&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/Free-Thinker/p/6221377.html&quot;&gt;Android中常用的优秀开源框架&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/Free-Thinker/p/6221380.html&quot;&gt;15 个 Android 通用流行框架大全&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android开源框架库分类，挑选出最常用，最实用的开源项目，本篇主要介绍的是优秀开源框架库和项目，UI个性化控件会独立介绍。&lt;br&gt;&lt;a href=&quot;https://github.com/yeungeek/awesome-android-ui&quot;&gt;UI个性化控件&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Framework" scheme="http://ipcreator.me/tags/Framework/"/>
    
      <category term="Open Source" scheme="http://ipcreator.me/tags/Open-Source/"/>
    
  </entry>
  
  <entry>
    <title>House of Cards Season 5</title>
    <link href="http://ipcreator.me/2017/03/14/MyView/Movie/house-of-card/"/>
    <id>http://ipcreator.me/2017/03/14/MyView/Movie/house-of-card/</id>
    <published>2017-03-14T04:39:06.000Z</published>
    <updated>2017-03-29T04:18:01.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>Politics</strong></p>
</blockquote>
<p><img src="https://img5.doubanio.com/view/movie_poster_cover/lpst/public/p2324460286.webp" alt=""></p>
  <a id="more"></a>
<p>导演: 埃里克·萨哈罗夫<br>编剧: 梅丽莎·詹姆斯·吉布森 / 鲍尔·威利蒙<br>主演: 凯文·史派西 / 罗宾·怀特 / 迈克尔·凯利 / 内芙·坎贝尔 / 詹姆斯·马丁内斯 / 安德鲁·波尔克<br>类型: 剧情<br>制片国家/地区: 美国<br>语言: 英语<br>首播: <strong>2017-05-30(美国)</strong><br>季数:<br>集数: 13<br>单集片长: 60分钟<br>又名: 众议院要人<br>IMDb链接: <a href="http://www.imdb.com/title/tt5419058" target="_blank" rel="external">tt5419058</a></p>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://www.7y7.com/yingshi/48/205048.html" target="_blank" rel="external">《纸牌屋》第五季确定新主创阵容 凯文史派西表期待</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Politics&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img5.doubanio.com/view/movie_poster_cover/lpst/public/p2324460286.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="English" scheme="http://ipcreator.me/tags/English/"/>
    
      <category term="Movie" scheme="http://ipcreator.me/tags/Movie/"/>
    
  </entry>
  
  <entry>
    <title>Ways of Update Android UI</title>
    <link href="http://ipcreator.me/2017/03/14/Program/Android/update-ui/"/>
    <id>http://ipcreator.me/2017/03/14/Program/Android/update-ui/</id>
    <published>2017-03-14T01:39:06.000Z</published>
    <updated>2017-03-27T08:09:12.990Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_1489466546.png" alt=""></p>
<p>原文：<a href="http://blog.csdn.net/zxw136511485/article/details/52980006" target="_blank" rel="external">zhangxiaowei</a></p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>1.Activity的runOnUiThread()和 View.post(Runnable r)在本质上都是调用Handler的post()方法处理；<br>2.在子线程中直接更新UI，可以使用 Handler的post()，Activity的runOnUiThread()和 View.post(Runnable r)这三种方法。</p>
 <a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">private void updateUiByHandler() &#123;</div><div class="line"></div><div class="line">        new Thread() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(2 * 1000);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                Message message = new Message();//mMyHandler.obtainMessage()</div><div class="line">                message.what = MSG_WHAT;</div><div class="line">                message.obj = &quot;来自子线程的数据&quot;;</div><div class="line">                mMyHandler.sendMessage(message);</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void updateUiByHandlerPost() &#123;</div><div class="line">        new Thread() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(2 * 1000);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                mMyHandler.post(new Runnable() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void run() &#123;</div><div class="line">                        tv.setText(&quot; Handler.post更新UI&quot;);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void updateUiByRunOnUiThread()&#123;</div><div class="line">        new  Thread()&#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(2*1000);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                runOnUiThread(new Runnable() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void run() &#123;</div><div class="line">                        tv.setText(&quot;runOnUiThread更新UI&quot;);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void updateUiByViewPost()&#123;</div><div class="line">        new Thread()&#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                super.run();</div><div class="line">                tv.post(new Runnable() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void run() &#123;</div><div class="line">                        tv.setText(&quot;view post更新UI&quot;);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p> <a href="http://blog.csdn.net/zxw136511485/article/details/52993021" target="_blank" rel="external">Android 源码解析Handler处理机制（一）</a><br> <a href="http://blog.csdn.net/zxw136511485/article/details/52981108" target="_blank" rel="external">Android 源码解析Handler处理机制（二）</a><br> <a href="http://blog.csdn.net/zxw136511485/article/details/53032658" target="_blank" rel="external">你不知道的Runnable接口，深度解析Runnable接口</a><br> <a href="http://blog.csdn.net/zxw136511485/article/details/53072952" target="_blank" rel="external">Android 源码解析AsyncTask（一）</a><br> <a href="http://blog.csdn.net/zxw136511485/article/details/53036525" target="_blank" rel="external">Android 源码解析AsyncTask（二）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/Screenshot_1489466546.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&quot;http://blog.csdn.net/zxw136511485/article/details/52980006&quot;&gt;zhangxiaowei&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结：&quot;&gt;&lt;a href=&quot;#总结：&quot; class=&quot;headerlink&quot; title=&quot;总结：&quot;&gt;&lt;/a&gt;总结：&lt;/h2&gt;&lt;p&gt;1.Activity的runOnUiThread()和 View.post(Runnable r)在本质上都是调用Handler的post()方法处理；&lt;br&gt;2.在子线程中直接更新UI，可以使用 Handler的post()，Activity的runOnUiThread()和 View.post(Runnable r)这三种方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="UI" scheme="http://ipcreator.me/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>Update of CoolWeather</title>
    <link href="http://ipcreator.me/2017/03/14/Program/Android/MyApp/update-cool-weather/"/>
    <id>http://ipcreator.me/2017/03/14/Program/Android/MyApp/update-cool-weather/</id>
    <published>2017-03-14T00:33:06.000Z</published>
    <updated>2017-03-27T10:22:01.696Z</updated>
    
    <content type="html"><![CDATA[<p> <img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_1489464259.png" alt=""></p>
<p><strong>需求</strong><br>基于郭霖的《第一行代码（第2版）》P544提出的完善需求：<br>1.提供更加完整的天气信息；<br>2.左右滑动切换同一个市的不同区域天气；<br>3.更换不同的背景图。</p>
 <a id="more"></a>
<p><strong>技术要点</strong><br>1.基于<a href="http://dl.download.csdn.net/down11/20170310/97b5b021dfc606bb801e380628b72d9b.exe?response-content-disposition=attachment%3Bfilename%3D%22HiJson%202.1.2_jdk64.exe%22&amp;OSSAccessKeyId=9q6nvzoJGowBj4q1&amp;Expires=1489419928&amp;Signature=HnWxWXVKgMFvrRSysU%2B0LiOngC8%3D" target="_blank" rel="external">HiJsonV2.1.2</a>来可视化。</p>
<p><img src="http://om8nmvpn9.bkt.clouddn.com/2017-03-14_hiJson.jpg" alt=""></p>
<p>另外一个在线工具为：[bejson]<a href="http://www.bejson.com/jsonviewernew/" target="_blank" rel="external">http://www.bejson.com/jsonviewernew/</a></p>
<p><img src="http://om8nmvpn9.bkt.clouddn.com/2017-03-14_bejson.jpg" alt=""></p>
<p>2.基于<a href="http://dl.download.csdn.net/down11/20170313/3c9becc423e29d9f44e32377113fdd35.zip?response-content-disposition=attachment%3Bfilename%3D%22json%E8%BD%AC%E6%8D%A2%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%B7%A5%E5%85%B7.zip%22&amp;OSSAccessKeyId=9q6nvzoJGowBj4q1&amp;Expires=1489419447&amp;Signature=7P%2BSJXqZkeftlkL84ys8A%2BE8daM%3D" target="_blank" rel="external">json转换实体类工具</a> 生成参考实体类</p>
<p><img src="http://om8nmvpn9.bkt.clouddn.com/2017-03-14_generator.jpg" alt=""></p>
<p>3.增加视图<br><img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_1489451502.png" alt=""></p>
<p>技巧：<br>A、善于利用AndroidStudio工具的书签功能，F11是打上/取消书签，shift+f11是显示所有的书签，然后点击快速定位到目标处；<br>B、利用ctrl+shift+f工程内搜索，分析代码逻辑时很有用。</p>
<p>4.利用数据库查询功能<br>5.利用随机库</p>
<p> <img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_1489451512.png" alt=""></p>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://blog.csdn.net/zxw136511485/article/details/51437582" target="_blank" rel="external">JSON 使用讲解</a><br><a href="http://blog.csdn.net/zxw136511485/article/details/51451523" target="_blank" rel="external"> JSON 解析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/Screenshot_1489464259.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;&lt;br&gt;基于郭霖的《第一行代码（第2版）》P544提出的完善需求：&lt;br&gt;1.提供更加完整的天气信息；&lt;br&gt;2.左右滑动切换同一个市的不同区域天气；&lt;br&gt;3.更换不同的背景图。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Application" scheme="http://ipcreator.me/tags/Application/"/>
    
      <category term="Cool Weather" scheme="http://ipcreator.me/tags/Cool-Weather/"/>
    
      <category term="JSON" scheme="http://ipcreator.me/tags/JSON/"/>
    
      <category term="GSON" scheme="http://ipcreator.me/tags/GSON/"/>
    
  </entry>
  
  <entry>
    <title>Regular Expression of C++、Java、JavaScript</title>
    <link href="http://ipcreator.me/2017/03/13/Program/Tools/regular-expression-in-java/"/>
    <id>http://ipcreator.me/2017/03/13/Program/Tools/regular-expression-in-java/</id>
    <published>2017-03-13T12:08:06.000Z</published>
    <updated>2017-03-27T04:44:46.706Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://blog.csdn.net/luoweifu/article/details/42613533" target="_blank" rel="external">阳光日志</a></p>
<p><img src="http://img.blog.csdn.net/20150112222847970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvd2VpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<a id="more"></a>
<h1 id="编程思想之正则表达式"><a href="#编程思想之正则表达式" class="headerlink" title="编程思想之正则表达式"></a>编程思想之正则表达式</h1><h2 id="什么是正则表达式？"><a href="#什么是正则表达式？" class="headerlink" title="什么是正则表达式？"></a>什么是正则表达式？</h2><p>正则表达式(Regular Expression)就是用某种模式去匹配一类字符串的公式。如你要在一篇文章中查找第一个字是“罗”最后一个字是“浩”的三个字的姓名，即“罗<em>浩”；那么“罗</em>浩”就是公式，也称作模式(Pattern)，这篇文章就是要匹配的串(或叫文本text)。再如，你要检查输入的一个字符串是否是126邮箱的格式，你得制定一个规则去查检，这种规则就是正则表达式。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>数据验证：<br>例如，可以检查输入的字符串，看其是否为电话号码格式，或是否为邮箱格式。 这在网页的表单输入中经常用到。<br>查找子串：<br>可以查找文档内(或一个字符串内)符合指定模式的子串。<br>替换文本：<br>可以使用正则表达式来识别文档中的特定内容，完全删除该部分内容或者用其他字符串来替换它。<br>使用工具：<br>如Word、NotePad++、EditPlus等文字编辑器中的查找功能都支持正则表达式，用正则表达式你就可以实现更加多样化的查找。还有像VS、CodeBlock、Eclipse、Intellij Idea等开发工具的IDE的查找替换功能也都支持正则表达式，用它你可以修改变量名，调整代码格式，统计代码行数等。</p>
<h2 id="常用正则表达式总结"><a href="#常用正则表达式总结" class="headerlink" title="常用正则表达式总结"></a>常用正则表达式总结</h2><p>常用的正则表达式已经有很多人做了总结了，在网上能够找到非常多，我就没有再写的必要了。下面贴出我觉得还不错的一个总结。<br>此部分内容为转载，来自：<a href="http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html" target="_blank" rel="external">http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html</a></p>
<p>一、校验数字的表达式</p>
<p> 1 数字：^[0-9]<em>$<br> 2 n位的数字：^\d{n}$<br> 3 至少n位的数字：^\d{n,}$<br> 4 m-n位的数字：^\d{m,n}$<br> 5 零和非零开头的数字：^(0|[1-9][0-9]</em>)$<br> 6 非零开头的最多带两位小数的数字：^([1-9][0-9]<em>)+(.[0-9]{1,2})?$<br> 7 带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$<br> 8 正数、负数、和小数：^(-|+)?\d+(.\d+)?$<br> 9 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$<br>10 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$<br>11 非零的正整数：^[1-9]\d</em>$ 或 ^([1-9][0-9]<em>){1,3}$ 或 ^+?[1-9][0-9]</em>$<br>12 非零的负整数：^-[1-9][]0-9”<em>$ 或 ^-[1-9]\d</em>$<br>13 非负整数：^\d+$ 或 ^[1-9]\d<em>|0$<br>14 非正整数：^-[1-9]\d</em>|0$ 或 ^((-\d+)|(0+))$<br>15 非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0$<br>16 非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>))|0?.0+|0$<br>17 正浮点数：^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>$ 或 ^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>))$<br>18 负浮点数：^-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>)))$<br>19 浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0)$</p>
<p>二、校验字符的表达式</p>
<p> 1 汉字：^[\u4e00-\u9fa5]{0,}$<br> 2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$<br> 3 长度为3-20的所有字符：^.{3,20}$<br> 4 由26个英文字母组成的字符串：^[A-Za-z]+$<br> 5 由26个大写英文字母组成的字符串：^[A-Z]+$<br> 6 由26个小写英文字母组成的字符串：^[a-z]+$<br> 7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$<br> 8 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$<br> 9 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$<br>10 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$<br>11 可以输入含有^%&amp;’,;=?$\”等字符：[^%&amp;’,;=?$\x22]+<br>12 禁止输入含有~的字符：[^~\x22]+</p>
<p>三、特殊需求表达式</p>
<p> 1 Email地址：^\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)<em>$<br> 2 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?<br> 3 InternetURL：[a-zA-z]+://[^\s]</em> 或 ^<a href="http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$" target="_blank" rel="external">http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</a><br> 4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$<br> 5 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$<br> 6 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}<br> 7 身份证号(15位、18位数字)：^\d{15}|\d{18}$<br> 8 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$<br> 9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$<br>10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$<br>11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.<em>[A-Z]).{8,10}$<br>12 日期格式：^\d{4}-\d{1,2}-\d{1,2}<br>13 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$<br>14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$<br>15 钱的输入格式：<br>16    1.有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]</em>$<br>17    2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]<em>)$<br>18    3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]</em>)$<br>19    4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$<br>20    5.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$<br>21    6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$<br>22    7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})<em>(.[0-9]{1,2})?$<br>23    8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})</em>)(.[0-9]{1,2})?$<br>24    备注：这就是最终结果了,别忘了”+”可以用”<em>“替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里<br>25 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$<br>26 中文字符的正则表达式：[\u4e00-\u9fa5]<br>27 双字节字符：[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))<br>28 空白行的正则表达式：\n\s</em>\r    (可以用来删除空白行)<br>29 HTML标记的正则表达式：&lt;(\S<em>?)[^&gt;]</em>&gt;.<em>?&lt;/\1&gt;|&lt;.</em>? /&gt;    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)<br>30 首尾空白字符的正则表达式：^\s<em>|\s</em>$或(^\s<em>)|(\s</em>$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)<br>31 腾讯QQ号：[1-9][0-9]{4,}    (腾讯QQ号从10000开始)<br>32 中国邮政编码：[1-9]\d{5}(?!\d)    (中国邮政编码为6位数字)<br>33 IP地址：\d+.\d+.\d+.\d+    (提取IP地址时有用)<br>34 IP地址：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))    (由@飞龙三少 提供,感谢共享)</p>
<h2 id="从入门开始"><a href="#从入门开始" class="headerlink" title="从入门开始"></a>从入门开始</h2><p>我们就从上面提到的一个例子开始：检查一个字符串是否符合126邮箱的格式。<br>我们从网易的邮箱注册页面可以看到126邮箱的用户名需要符合以下的格式：6~18个字符，可使用字母、数字、下划线，需以字母开头。我们可以定义一个模式：^[a-zA-Z]\w{5,17}@126.com</p>
<p>这个模式可以这样理解：<br>[a-zA-Z]：任何一个a到z或A到Z的英文字母<br>^：      表示以什么开头，则^[a-zA-Z]表示以字母开头<br>\w：     单词字符[a-zA-Z<em>0-9]，即a-z或A-Z或0-9或</em>中的任何一个字符<br>{5,17}：  表示出现5到17次(至少5次，不超过17次)，则\w{5,17}表示5~17个字符。<br>                因为还有一个以非数字字母开头的字符，所以^[a-zA-Z]\w{5,17}表示：“6~18个字符，可使用字母、数字、下划线，需以字母开头”<br>@126.com：表示符合以上规则的用户名后跟上@126.com字符串，即组成一个邮箱地址。</p>
<p>“^[a-zA-Z]\w{5,17}@126.com”就是我们所说的正则表达式，用Java的简单实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String regex = &quot;^[a-zA-Z]\\w&#123;5,17&#125;@126\\.com&quot;;  //定义匹配的规则:正则表达式  </div><div class="line">//说明：126.com中的.需要转义\\.  </div><div class="line">String text = &quot;ZhanSan@126fcom&quot;;    //要检查的字符串  </div><div class="line">boolean isMatched = text.matches(regex);    //判断text是否符合规则regex  </div><div class="line">System.out.println(isMatched);</div></pre></td></tr></table></figure>
<h2 id="正则表达式常用符号"><a href="#正则表达式常用符号" class="headerlink" title="正则表达式常用符号"></a>正则表达式常用符号</h2><p>上面一个示例中用到的“^”、“\w”、“{5,17}”等都是正则表达式中的常用符号，这些符号在正则表达式中都有特殊的含意。下面这个表格是Java中的正则表达式常用符号的含意(只抽取了其常用的部分进行说明，就这些部分其实可以解决关于正则表达式的绝大多数的问题了)。<br>模式<br>匹配的内容(含意)</p>
<p>字符类<br>[abc]<br>a、b 或 c（简单类）<br>[^abc]<br>任何字符，除了 a、b 或 c（否定）<br>[a-zA-Z]<br>a 到 z 或 A 到 Z，两头的字母包括在内（范围）<br>[a-d[m-p]]<br>a 到 d 或 m 到 p：[a-dm-p]（并集）<br>[a-z&amp;&amp;[def]]<br>d、e 或 f（交集）<br>[a-z&amp;&amp;[^bc]]<br>a 到 z，除了 b 和 c：[ad-z]（减去）<br>[a-z&amp;&amp;[^m-p]]<br>a 到 z，而非 m 到 p：[a-lq-z]（减去）</p>
<p>预定义字符类<br>.<br>任何字符（与行结束符可能匹配也可能不匹配）<br>\d<br>数字：[0-9]<br>\D<br>非数字： [^0-9]<br>\s<br>空白字符：[ \t\n\x0B\f\r]<br>\S<br>非空白字符：[^\s]<br>\w<br>单词字符：[a-zA-Z_0-9]<br>\W<br>非单词字符：[^\w]</p>
<p>边界匹配器<br>^<br>行的开头<br>$<br>行的结尾<br>\b<br>单词边界<br>\B<br>非单词边界<br>\A<br>输入的开头<br>\G<br>上一个匹配的结尾<br>\Z<br>输入的结尾，仅用于最后的结束符（如果有的话）<br>\z<br>输入的结尾</p>
<p>数量词(Greedy策略)<br>X?<br>X，一次或一次也没有<br>X*<br>X，零次或多次<br>X+<br>X，一次或多次<br>X{n}<br>X，恰好 n 次<br>X{n,}<br>X，至少 n 次<br>X{n,m}<br>X，至少 n 次，但是不超过 m 次</p>
<p>逻辑运算符<br>XY<br>X 后跟 Y<br>X|Y<br>X 或 Y<br>(X)<br>X，作为捕获组<br>参考文档：Class Pattern</p>
<p>这些常用的符号在各种编程语言的正则表达式中含意基本相同(因为正则表达式的思想是相同的)，所以都可以用来参数。但不同的语言可能会有一些细小的差别，如果要针对各种编程语言，想有更精确和权威的说明，可参考其官方文档：<br>C++(VS2013编译器)：<a href="http://msdn.microsoft.com/zh-cn/library/bb982727.aspx#grammarsummary" target="_blank" rel="external">http://msdn.microsoft.com/zh-cn/library/bb982727.aspx#grammarsummary</a><br>Java：              <a href="http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html" target="_blank" rel="external">http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html</a><br>JavaScript：         <a href="http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp" target="_blank" rel="external">http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp</a></p>
<h2 id="正则表达式的使用"><a href="#正则表达式的使用" class="headerlink" title="正则表达式的使用"></a>正则表达式的使用</h2><p>下面从常见的需求出发讲述C++、Java和JavaScript中正则表达式的使用<br>C++中的正则表达式<br>C++中正则表达式主要有三种实现方式：C语言的实现方式(C regex)，C++标准库的实现(C++ regex)，Boost库的实现(boost regex)。C regex的方式是一种面向过程的编程方式，使用起来不太方便；C++ regex的方式因为是标准库的一部分，所以可以直接使用(好像Linux平台下不支持)，但C++ regex非常难用，语法要求比较严格，而且好多默认的选项和我们正常的想法不一样；Boost是一个开源的第三方库，这个库非常优秀，广泛应用于C++的项目开发中，boost regex非常灵活好用，C++开发时是大家推崇的一种方式。<br>关于boost regex的用法，在后继的文章将会进一步介绍，现在以C++ regex的方式列举一个使用样例。<br>1.验证ip地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#include &lt;regex&gt;  </div><div class="line">#include &lt;iostream&gt;  </div><div class="line">#include &lt;string&gt;  </div><div class="line"></div><div class="line">bool IsIpV4Address(const std::string&amp; strIp)  </div><div class="line">&#123;  </div><div class="line">    //验证IP地址的模式，这里&quot;\.&quot;中的&quot;\&quot;是转义字符,表示这是一个.  </div><div class="line">    const std::regex pattern(&quot;(\\d&#123;1,3&#125;)&#123;1&#125;\.(\\d&#123;1,3&#125;)&#123;1&#125;\.(\\d&#123;1,3&#125;)&#123;1&#125;\.(\\d&#123;1,3&#125;)&#123;1&#125;&quot;);  </div><div class="line">    //匹配验证  </div><div class="line">    return std::regex_match(strIp, pattern);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">int main()  </div><div class="line">&#123;  </div><div class="line">    std::string strIp1 = &quot;134.34.34.4&quot;;//192.168.1.1  </div><div class="line">    std::string strIp2 = &quot;192.168.255&quot;;  </div><div class="line"></div><div class="line">    std::cout &lt;&lt; strIp1 &lt;&lt; &quot; : &quot; &lt;&lt; (IsIpV4Address(strIp1) ? &quot;valid&quot; : &quot;invalid&quot;) &lt;&lt; std::endl;  </div><div class="line">    std::cout &lt;&lt; strIp2 &lt;&lt; &quot; : &quot; &lt;&lt; (IsIpV4Address(strIp2) ? &quot;valid&quot; : &quot;invalid&quot;) &lt;&lt; std::endl;  </div><div class="line">    return 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Java中的正则表达式<br>1.验证一个字符串是否为URL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public static boolean isUrl(String text) &#123;  </div><div class="line">    String regex = &quot;^http://([\\w-]+.)+[\\w-]+(/[\\w-./?%&amp;=#]*)?$&quot;;  </div><div class="line">    return text.matches(regex);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.判断一个文本中有多少个URL，并将所有的URL加上超链接.<br>如以下文本：<br>C++(VS2013编译器)：<a href="http://msdn.microsoft.com/zh-cn/library/bb982727.aspx#grammarsummary" target="_blank" rel="external">http://msdn.microsoft.com/zh-cn/library/bb982727.aspx#grammarsummary</a><br>Java：              <a href="http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html" target="_blank" rel="external">http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html</a><br>JavaScript：         <a href="http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp" target="_blank" rel="external">http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp</a><br>添加链接后变成：<br>C++(VS2013编译器)：<a href="”http://msdn.microsoft.com/zh-cn/library/bb982727.aspx#grammarsummary" ”="">http://msdn.microsoft.com/zh-cn/library/bb982727.aspx#grammarsummary</a><br>Java：              <a href="”http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html" ”="">http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html</a><br>JavaScript：         <a href="”http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp" ”="">http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 给一个字符串添加链接</div><div class="line"> * @param text 要添加链接的字符串</div><div class="line"> * @param url 链接的URL</div><div class="line"> * @return 添加链接后的字符串</div><div class="line"> */  </div><div class="line">public static String AddHref(String text, String url) &#123;  </div><div class="line">    return  &quot;&lt;a href=\&quot;&quot; + url +  &quot;\&quot;&gt;&quot; + text + &quot;&lt;/a&gt;&quot;;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">/**</div><div class="line"> * 查找文本中的URL字符串，并将其添加链接</div><div class="line"> * @param text 需要查找的文本</div><div class="line"> * @return 添加链接后的文本</div><div class="line"> */  </div><div class="line">public static String AddLinkToText(String text) &#123;  </div><div class="line">    Pattern pattern = Pattern.compile(&quot;http://([\\w-]+.)+[\\w-]+(/[\\w-./?%&amp;=#]*)?&quot;);  </div><div class="line">    Matcher matcher = pattern.matcher(text);  </div><div class="line">    StringBuffer sb = new StringBuffer();           //定义一个字符缓冲区，用于保存新的文本  </div><div class="line">    while (matcher.find()) &#123;  </div><div class="line">        String matchedSubStr = matcher.group();     //提取出查找到的子串  </div><div class="line">        matcher.appendReplacement(sb, AddHref(matchedSubStr, matchedSubStr));   //将找到的子串添加链接后塞到字符缓冲区内  </div><div class="line">    &#125;  </div><div class="line">    matcher.appendTail(sb);  </div><div class="line">    return sb.toString();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JavaScript中的正则表达式<br>JavaScript中的正则表达式是通过RegExp对象实现的。RegExp对象的创建有三种方式：<br>精简方式：<br>/pattern/attributes<br>new方式：<br>new RegExp(pattern, attributes);<br>函数调用的方式：<br>RegExp(pattern, attributes);</p>
<pre><code>参数pattern可以是一个模式串，也可以是一个RegExp对象，如果pattern本身就是RegExp的对象，则attributes参数将不起作用(新创建的对象的必发与pattern对象相同。)，需要省略，如果不省略会抛TypeError 异常。
参数attributes有三种属性&quot;g&quot;、&quot;i&quot; 和 &quot;m&quot;，分别用于指定全局匹配、区分大小写的匹配和多行匹配。
</code></pre><p>RegExp主要有三个方法：<br>compile<br>编译正则表达式，可用于改变和重新编译正则表达式。<br>exec<br>检索字符串中指定的值。返回找到的值，并确定其位置。<br>test<br>检索字符串中是否有指定的值。返回 true 或 false。</p>
<p>1.验证字符串是否为数字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;  </div><div class="line">    function isNumber(text) &#123;  </div><div class="line">        var pattern = new RegExp(&quot;^\\d*$&quot;);  </div><div class="line">        return pattern.test(text);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    var value1 = &quot;1234&quot;;  </div><div class="line">    document.write(value1 + &quot; is Numed:&quot; + isNumber(value1));  </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>2.邮箱格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;  </div><div class="line">    function isEmail(text) &#123;  </div><div class="line">        var reg = /^([\w-.])+@([\w-])+((\.[\w-]&#123;2,3&#125;)&#123;1,2&#125;)$/;  </div><div class="line">        return reg.test(text);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    var value2 = &quot;Zhang.San@163.com&quot;;  </div><div class="line">    document.write(value2 + &quot; is Email:&quot; + isEmail(value2));  </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>3.将一个文本中的所有邮箱地址和在文本中的位置打印到页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;  </div><div class="line">    function PrintEmail(text) &#123;  </div><div class="line">    //匹配的模式  </div><div class="line">    var reg = RegExp(&quot;([\\w-.])+@([\\w-])+((\.[\\w-]&#123;2,3&#125;)&#123;1,2&#125;)&quot;, &quot;g&quot;);  </div><div class="line">    var result; //保存结果  </div><div class="line"></div><div class="line">    while ((result = reg.exec(text)) != null)  &#123;  </div><div class="line">        document.write(result[0] + &quot;&lt;br/&gt;&quot; + result.index);  </div><div class="line">        document.write(&quot;&lt;br/&gt;&lt;br/&gt;&quot;);  </div><div class="line">    &#125;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    var text = &quot;张三 Zhang.San@163.com; 李四 Li_si@126.com；王五 WangWu@gmail.com.cn&quot; ;  </div><div class="line">    PrintEmail(text);  </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>正则表达式是一个非常强大而又非常常用的一个编程技术，我以上这片文章也只是抛砖引玉，讲述了其中最常用的一部分。因为其内容实在太庞大，如果要详细描述，每一种编程语言的正则表达式都可以单独成一本书。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://blog.csdn.net/luoweifu/article/details/42613533&quot;&gt;阳光日志&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150112222847970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvd2VpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Java" scheme="http://ipcreator.me/tags/Java/"/>
    
      <category term="C++" scheme="http://ipcreator.me/tags/C/"/>
    
      <category term="JavaScript" scheme="http://ipcreator.me/tags/JavaScript/"/>
    
      <category term="Regular Expression" scheme="http://ipcreator.me/tags/Regular-Expression/"/>
    
  </entry>
  
  <entry>
    <title>Brief Introduction of Regular Expression</title>
    <link href="http://ipcreator.me/2017/03/13/Program/Tools/brief-introduction-of-regular-expression/"/>
    <id>http://ipcreator.me/2017/03/13/Program/Tools/brief-introduction-of-regular-expression/</id>
    <published>2017-03-13T11:59:06.000Z</published>
    <updated>2017-03-27T09:52:38.100Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/2017-03-14_133841.jpg" alt=""></p>
<p>正则表达式（Regular Expression）这个东西，之所以感觉难学，是因为几乎所有关于它的教程都很不友好，不是对初学者不友好，是对所有人不友好 —— 也许是因为绝大多数人即便是掌握了这个东西，也觉得实在它没办法对初学者友好罢。</p>
<a id="more"></a>
<p>瞬间提高自学能力的诀窍在于两个字：</p>
<blockquote>
<p>别怕。</p>
</blockquote>
<p>如果非要用四个字的话，就是：</p>
<blockquote>
<p>啥都别怕。</p>
</blockquote>
<p>不就是学个东西嘛，学不会也不会死人的，<strong>学得会是早晚的事情</strong>。</p>
<p>正则表达式，其实你之前已经用过，虽然当时你可能完全不明白自己再做什么。</p>
<p>通俗点讲，</p>
<p>正则表达式是用来匹配、捕获特定字符串的工具；之后，我们还可以对匹配到、捕获到的对象进行处理，比如替换。</p>
<p>OK，就这样了罢。这里请注意三个概念：</p>
<p><strong>匹配（Match）</strong><br><strong>捕获（Capture）</strong><br><strong>替换（Replace）</strong></p>
<p>这两个概念掌握了，可以开始运用了，就算是入门了。入门之后就好办了，边用边学，边犯错边改进，最终达到精通的地步 —— 无论学什么不都是这样吗？</p>
<p>想象一下，我们有这么一串电话号码：</p>
<p>07700 900166<br>07700 900202<br>07700 900911<br>07700 900284<br>07700 900847<br>07700 900009<br>07700 900754<br>07700 900396<br>07700 900248<br>07700 900408<br>07700 900724<br>07700 900773</p>
<p>现在我们想把它们变成这样的格式显示：</p>
<p>(077)0090-0166<br>(077)0090-0202<br>(077)0090-0911<br>(077)0090-0284<br>(077)0090-0847<br>(077)0090-0009<br>(077)0090-0754<br>(077)0090-0396<br>(077)0090-0248<br>(077)0090-0408<br>(077)0090-0724<br>(077)0090-0773</p>
<p>那我们要怎么做才行呢？显然，手动一行一行地弄很麻烦啊！每行都要添加括号，删除空格，在加上减号作为四位分隔符……</p>
<p>在支持正则表达式的编辑器里（Atom 这方面真的很差，Sublimetext 真的强太多了），搜索(\d\d\d)(\d\d) (\d\d)(\d\d\d\d)，替换为($1)$2$3-$4…… 好神奇，一下子就搞定了!</p>
<p>仔细看看每一个字符：\d 指的的任意数字，所以，07700 900773，其实就可以用 \d\d\d\d\d \d\d\d\d\d\d 搜索到（空格前面五位数字，空格后面六位数字）。</p>
<p>现在我们想要让它被替换为 (077)0090-0773 这样的格式…… 那么：</p>
<p>我们要想办法“捕获”前三位，然后在其前后加上括号；<br>捕获接下来的两位数字，以及空格之后的两位数字，要把他们拼起来（即，相当于把空格去掉）；<br>捕获最后四位数字，然后在此之前加上一个减号……<br>所以，我们在搜索的时候加上了括号（） —— 括号就是用来捕获的……</p>
<p>(\d\d\d)(\d\d) (\d\d)(\d\d\d\d)</p>
<p>翻译成自然语言：</p>
<p>用 \d\d\d\d\d \d\d\d\d\d\d 匹配这些电话号码，以便我们能在文档中搜索到所有能够匹配这个正则表达式的字符串；<br>为了后面能够处理（即，替换），我们分别捕获了四段字符串： (\d\d\d)(\d\d) (\d\d)(\d\d\d\d)；<br>然后，我们用 $1 … $4 来表示我们捕获到的字符串，然后用我们想要的拼接方式去替换匹配到的字符串：($1)$2$3-$4……<br>差不多了，这就是“入门”，后面你要接着研究：</p>
<p>各种为了精确匹配所需要的“符号”；<br>匹配同一个类型的字符串可能有很多种方法；<br>避免错误匹配其实并不容易……<br>而后你就反应过来了，上面用的正则表达式，实在是太愚蠢了！那你就想办法用更聪明的呗…… 谁也拦不住你。</p>
<p>还是那句话：反复使用，反复试错，没多久你就真的精通了。</p>
<p>至于深入一步的教程么，Google 喽……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/2017-03-14_133841.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;正则表达式（Regular Expression）这个东西，之所以感觉难学，是因为几乎所有关于它的教程都很不友好，不是对初学者不友好，是对所有人不友好 —— 也许是因为绝大多数人即便是掌握了这个东西，也觉得实在它没办法对初学者友好罢。&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Regular Expression" scheme="http://ipcreator.me/tags/Regular-Expression/"/>
    
  </entry>
  
  <entry>
    <title>Half of Hour Learning Tutorial of Regular Expression</title>
    <link href="http://ipcreator.me/2017/03/13/Program/Tools/anatomy-of-regular-expression/"/>
    <id>http://ipcreator.me/2017/03/13/Program/Tools/anatomy-of-regular-expression/</id>
    <published>2017-03-13T11:56:06.000Z</published>
    <updated>2017-03-27T09:52:38.115Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://deerchao.net/images/regex_tester.png" alt=""></p>
<h2 id="正则表达式到底是什么东西？"><a href="#正则表达式到底是什么东西？" class="headerlink" title="正则表达式到底是什么东西？"></a>正则表达式到底是什么东西？</h2><p>正则表达式就是记录文本规则的代码。和通配符类似，正则表达式也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求——当然，代价就是更复杂。</p>
<a id="more"></a>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>学习正则表达式的最好方法是从例子开始，理解例子之后再自己对例子进行修改，实验。下面给出了不少简单的例子，并对它们作了详细的说明。<br>假设你在一篇英文小说里查找hi，你可以使用正则表达式hi。<br>这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：由两个字符组成，前一个字符是h,后一个是i。通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配hi,HI,Hi,hI这四种情况中的任意一种。<br>不幸的是，很多单词里包含hi这两个连续的字符，比如him,history,high等等。用hi来查找的话，这里边的hi也会被找出来。如果要精确地查找hi这个单词的话，我们应该使用\bhi\b。<br>\b是正则表达式规定的一个特殊代码（好吧，某些人叫它元字符，metacharacter），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是\b并不匹配这些单词分隔字符中的任何一个，它只匹配一个位置。</p>
<p>假如你要找的是hi后面不远处跟着一个Lucy，你应该用\bhi\b.<em>\bLucy\b。<br>这里，.是另一个元字符，匹配除了换行符以外的任意字符。</em>同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定<em>前边的内容可以连续重复使用任意次以使整个表达式得到匹配。因此，.</em>连在一起就意味着任意数量的不包含换行的字符。现在\bhi\b.*\bLucy\b的意思就很明显了：先是一个单词hi,然后是任意个任意字符(但不能是换行)，最后是Lucy这个单词。</p>
<p>如果同时使用其它元字符，我们就能构造出功能更强大的正则表达式。比如下面这个例子：<br>0\d\d-\d\d\d\d\d\d\d\d匹配这样的字符串：以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字(也就是中国的电话号码。当然，这个例子只能匹配区号为3位的情形)。<br>这里的\d是个新的元字符，匹配一位数字(0，或1，或2，或……)。-不是元字符，只匹配它本身——连字符(或者减号，或者中横线，或者随你怎么称呼它)。<br>为了避免那么多烦人的重复，我们也可以这样写这个表达式：0\d{2}-\d{8}。这里\d后面的{2}({8})的意思是前面\d必须连续重复匹配2次(8次)。</p>
<p>如果需要更精确的说法，\b匹配这样的位置：它的前一个字符和后一个字符不全是(一个是,一个不是或不存在)\w。<br>换行符就是’\n’,ASCII编码为10(十六进制0x0A)的字符。</p>
<h2 id="测试正则表达式"><a href="#测试正则表达式" class="headerlink" title="测试正则表达式"></a>测试正则表达式</h2><p><a href="http://deerchao.net/tools/regex_tester/index.htm" target="_blank" rel="external">正则表达式测试器</a><br><img src="http://deerchao.net/images/regex_tester.png" alt=""></p>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>现在你已经知道几个很有用的元字符了，如\b,.,*，还有\d.正则表达式里还有更多的元字符，比如\s匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等。\w匹配字母或数字或下划线或汉字等。</p>
<p>下面来看看更多的例子：<br>\ba\w<em>\b匹配以字母a开头的单词——先是某个单词开始处(\b)，然后是字母a,然后是任意数量的字母或数字(\w</em>)，最后是单词结束处(\b)。</p>
<p>\d+匹配1个或更多连续的数字。这里的+是和<em>类似的元字符，不同的是</em>匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次。</p>
<p>\b\w{6}\b 匹配刚好6个字符的单词。</p>
<p>表1.常用的元字符<br>代码    说明<br>.    匹配除换行符以外的任意字符<br>\w    匹配字母或数字或下划线或汉字<br>\s    匹配任意的空白符<br>\d    匹配数字<br>\b    匹配单词的开始或结束<br>^    匹配字符串的开始<br>$    匹配字符串的结束</p>
<p>元字符^（和数字6在同一个键位上的符号）和$都匹配一个位置，这和\b有点类似。^匹配你要用来查找的字符串的开头，$匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果要求你填写的QQ号必须为5位到12位数字时，可以使用：^\d{5,12}$。<br>这里的{5,12}和前面介绍过的{2}是类似的，只不过{2}匹配只能不多不少重复2次，{5,12}则是重复的次数不能少于5次，不能多于12次，否则都不匹配。<br>因为使用了^和$，所以输入的整个字符串都要用来和\d{5,12}来匹配，也就是说整个输入必须是5到12个数字，因此如果输入的QQ号能匹配这个正则表达式的话，那就符合要求了。<br>和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。如果选中了这个选项，^和$的意义就变成了匹配行的开始处和结束处。</p>
<p>正则表达式引擎通常会提供一个“测试指定的字符串是否匹配一个正则表达式”的方法，如JavaScript里的RegExp.test()方法或.NET里的Regex.IsMatch()方法。这里的匹配是指是字符串里有没有符合表达式规则的部分。如果不使用^和$的话，对于\d{5,12}而言，使用这样的方法就只能保证字符串里包含5到12连续位数字，而不是整个字符串就是5到12位数字。</p>
<p>注意：对中文/汉字的特殊处理是由.Net提供的正则表达式引擎支持的，其它环境下的具体情况请查看相关文档。<br>正则表达式里的单词是什么意思吧：就是不少于一个的连续的\w。</p>
<h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h2><p>如果你想查找元字符本身的话，比如你查找.,或者<em>,就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这时你就得使用\来取消这些字符的特殊意义。因此，你应该使用.和\</em>。当然，要查找\本身，你也得用\.<br>例如：deerchao.net匹配deerchao.net，C:\Windows匹配C:\Windows。</p>
<h2 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h2><p>你已经看过了前面的<em>,+,{2},{5,12}这几个匹配重复的方式了。下面是正则表达式中所有的限定符(指定数量的代码，例如</em>,{5,12}等)：</p>
<p>表2.常用的限定符<br>代码/语法    说明</p>
<ul>
<li>重复零次或更多次</li>
</ul>
<ul>
<li>重复一次或更多次<br>?    重复零次或一次<br>{n}    重复n次<br>{n,}    重复n次或更多次<br>{n,m}    重复n到m次</li>
</ul>
<p>下面是一些使用重复的例子：<br>Windows\d+匹配Windows后面跟1个或更多数字<br>^\w+匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)</p>
<h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p>要想查找数字，字母或数字，空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),应该怎么办？<br>很简单，你只需要在方括号里列出它们就行了，像[aeiou]就匹配任何一个英文元音字母，[.?!]匹配标点符号(.或?或!)。<br>我们也可以轻松地指定一个字符范围，像[0-9]代表的含意与\d就是完全一致的：一位数字；同理[a-z0-9A-Z_]也完全等同于\w（如果只考虑英文的话）。<br>下面是一个更复杂的表达式：(?0\d{2}[) -]?\d{8}。</p>
<p>这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先是一个转义字符(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\d{2})，然后是)或-或空格中的一个，它出现1次或不出现(?)，最后是8个数字(\d{8})。</p>
<p>“(”和“)”也是元字符，后面的分组节里会提到，所以在这里需要使用转义。</p>
<h2 id="分枝条件"><a href="#分枝条件" class="headerlink" title="分枝条件"></a>分枝条件</h2><p>不幸的是，刚才那个表达式也能匹配010)12345678或(022-87654321这样的“不正确”的格式。要解决这个问题，我们需要用到分枝条件。正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。听不明白？没关系，看例子：<br>0\d{2}-\d{8}|0\d{3}-\d{7}这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)。<br>(?0\d{2})?[- ]?\d{8}|0\d{2}[- ]?\d{8}这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔。你可以试试用分枝条件把这个表达式扩展成也支持4位区号的。<br>\d{5}-\d{4}|\d{5}这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题：使用分枝条件时，要注意各个条件的顺序。如果你把它改成\d{5}|\d{5}-\d{4}的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。</p>
<h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>我们已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了）；但如果想要重复多个字符又该怎么办？你可以用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作(后面会有介绍)。<br>(\d{1,3}.){3}\d{1,3}是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：\d{1,3}匹配1到3位的数字，(\d{1,3}.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(\d{1,3})。</p>
<p>不幸的是，它也将匹配256.300.888.999这种不可能存在的IP地址。如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能，所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)。<br>理解这个表达式的关键是理解2[0-4]\d|25[0-5]|[01]?\d\d?，这里我就不细说了，你自己应该能分析得出来它的意义。</p>
<p>IP地址中每个数字都不能大于255. 经常有人问我, 01.02.03.04 这样前面带有0的数字, 是不是正确的IP地址呢? 答案是: 是的, IP 地址里的数字可以包含有前导 0 (leading zeroes).</p>
<h2 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h2><p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义：</p>
<p>表3.常用的反义代码<br>代码/语法    说明<br>\W    匹配任意不是字母，数字，下划线，汉字的字符<br>\S    匹配任意不是空白符的字符<br>\D    匹配任意非数字的字符<br>\B    匹配不是单词开头或结束的位置<br>[^x]    匹配除了x以外的任意字符<br>[^aeiou]    匹配除了aeiou这几个字母以外的任意字符</p>
<p>例子：\S+匹配不包含空白符的字符串。<br><a[^>]+&gt;匹配用尖括号括起来的以a开头的字符串。</a[^></p>
<h2 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h2><p>使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。</p>
<p>后向引用用于重复搜索前面某个分组匹配的文本。例如，\1代表分组1匹配的文本。难以理解？请看示例：<br>\b(\w+)\b\s+\1\b可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(\b(\w+)\b)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\1)。<br>你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：(?<word>\w+)(或者把尖括号换成’也行：(?’Word’\w+)),这样就把\w+的组名指定为Word了。要反向引用这个分组捕获的内容，你可以使用\k<word>,所以上一个例子也可以写成这样：\b(?<word>\w+)\b\s+\k<word>\b。<br>使用小括号的时候，还有很多特定用途的语法。下面列出了最常用的一些：</word></word></word></word></p>
<p>表4.常用分组语法<br>分类    代码/语法    说明<br>捕获    (exp)    匹配exp,并捕获文本到自动命名的组里<br>(?<name>exp)    匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)<br>(?:exp)    匹配exp,不捕获匹配的文本，也不给此分组分配组号<br>零宽断言    (?=exp)    匹配exp前面的位置<br>(?&lt;=exp)    匹配exp后面的位置<br>(?!exp)    匹配后面跟的不是exp的位置<br>(?&lt;!exp)    匹配前面不是exp的位置<br>注释    (?#comment)    这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</name></p>
<p>我们已经讨论了前两种语法。第三个(?:exp)不会改变正则表达式的处理方式，只是这样的组匹配的内容不会像前两种那样被捕获到某个组里面，也不会拥有组号。“我为什么会想要这样做？”——好问题，你觉得为什么呢？</p>
<p>呃……其实,组号分配还不像我刚说得那么简单：<br>分组0对应整个正则表达式<br>实际上组号分配过程是要从左向右扫描两遍的：第一遍只给未命名组分配，第二遍只给命名组分配－－因此所有命名组的组号都大于未命名的组号<br>你可以使用(?:exp)这样的语法来剥夺一个分组对组号分配的参与权．</p>
<h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>断言用来声明一个应该为真的事实。正则表达式中只有当断言为真时才会继续进行匹配。</p>
<p>接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言。最好还是拿例子来说明吧：</p>
<p>(?=exp)也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。比如\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I’m singing while you’re dancing.时，它会匹配sing和danc。<br>(?&lt;=exp)也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp。比如(?&lt;=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。<br>假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：((?&lt;=\d)\d{3})+\b，用它对1234567890进行查找时结果是234567890。<br>下面这个例子同时使用了这两种断言：(?&lt;=\s)\d+(?=\s)匹配以空白符间隔的数字(再次强调，不包括这些空白符)。</p>
<h2 id="负向零宽断言"><a href="#负向零宽断言" class="headerlink" title="负向零宽断言"></a>负向零宽断言</h2><p>前面我们提到过怎么查找不是某个字符或不在某个字符类里的字符的方法(反义)。但是如果我们只是想要确保某个字符没有出现，但并不想去匹配它时怎么办？例如，如果我们想查找这样的单词–它里面出现了字母q,但是q后面跟的不是字母u,我们可以尝试这样：<br>\b\w<em>q[^u]\w</em>\b匹配包含后面不是字母u的字母q的单词。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的\w<em>\b将会匹配下一个单词，于是\b\w</em>q[^u]\w<em>\b就能匹配整个Iraq fighting。负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题：\b\w</em>q(?!u)\w*\b。<br>零宽度负预测先行断言(?!exp)，断言此位置的后面不能匹配表达式exp。例如：\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。<br>同理，我们可以用(?&lt;!exp),零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：(?&lt;![a-z])\d{7}匹配前面不是小写字母的七位数字。</p>
<p>一个更复杂的例子：(?&lt;=&lt;(\w+)&gt;).<em>(?=&lt;\/\1&gt;)匹配不包含属性的简单HTML标签内里的内容。(?&lt;=&lt;(\w+)&gt;)指定了这样的前缀：被尖括号括起来的单词(比如可能是<b>)，然后是.</b></em>(任意的字符串),最后是一个后缀(?=&lt;\/\1&gt;)。注意后缀里的\/，它用到了前面提过的字符转义；\1则是一个反向引用，引用的正是捕获的第一组，前面的(\w+)匹配的内容，这样如果前缀实际上是<b>的话，后缀就是</b>了。整个表达式匹配的是<b>和</b>之间的内容(再次提醒，不包括前缀和后缀本身)。</p>
<p>请详细分析表达式(?&lt;=&lt;(\w+)&gt;).*(?=&lt;\/\1&gt;)，这个表达式最能表现零宽断言的真正用途。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>小括号的另一种用途是通过语法(?#comment)来包含注释。例如：2[0-4]\d(?#200-249)|25<a href="?#250-255">0-5</a>|[01]?\d\d?(?#0-199)。<br>要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。例如，我们可以前面的一个表达式写成这样：<br>      (?&lt;=    # 断言要匹配的文本的前缀<br>      &lt;(\w+)&gt; # 查找尖括号括起来的字母或数字(即HTML/XML标签)<br>      )       # 前缀结束<br>      .*      # 匹配任意文本<br>      (?=     # 断言要匹配的文本的后缀<br>      &lt;\/\1&gt;  # 查找尖括号括起来的内容：前面是一个”/“，后面是先前捕获的标签<br>      )       # 后缀结束</p>
<h2 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h2><p>当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例：a.<em>b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。<br>有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.</em>?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧：<br>a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。</p>
<p>表5.懒惰限定符<br>代码/语法    说明<br>*?    重复任意次，但尽可能少重复<br>+?    重复1次或更多次，但尽可能少重复<br>??    重复0次或1次，但尽可能少重复<br>{n,m}?    重复n到m次，但尽可能少重复<br>{n,}?    重复n次以上，但尽可能少重复</p>
<p>为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？简单地说，因为正则表达式有另一条规则，比懒惰／贪婪规则的优先级更高：最先开始的匹配拥有最高的优先权——The match that begins earliest wins。</p>
<h2 id="处理选项"><a href="#处理选项" class="headerlink" title="处理选项"></a>处理选项</h2><p>上面介绍了几个选项如忽略大小写，处理多行等，这些选项能用来改变处理正则表达式的方式。下面是.Net中常用的正则表达式选项：<br>表6.常用的处理选项<br>名称    说明<br>IgnoreCase(忽略大小写)    匹配时不区分大小写。<br>Multiline(多行模式)    更改^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)<br>Singleline(单行模式)    更改.的含义，使它与每一个字符匹配（包括换行符\n）。<br>IgnorePatternWhitespace(忽略空白)    忽略表达式中的非转义空白并启用由#标记的注释。<br>ExplicitCapture(显式捕获)    仅捕获已被显式命名的组。</p>
<p>一个经常被问到的问题是：是不是只能同时使用多行模式和单行模式中的一种？答案是：不是。这两个选项之间没有任何关系，除了它们的名字比较相似（以至于让人感到疑惑）以外。</p>
<p>在C#中，你可以使用Regex(String, RegexOptions)构造函数来设置正则表达式的处理选项。如：Regex regex = new Regex(@”\ba\w{6}\b”, RegexOptions.IgnoreCase);</p>
<h2 id="平衡组-递归匹配"><a href="#平衡组-递归匹配" class="headerlink" title="平衡组/递归匹配"></a>平衡组/递归匹配</h2><p>有时我们需要匹配像( 100 * ( 50 + 15 ) )这样的可嵌套的层次性结构，这时简单地使用(.+)则只会匹配到最左边的左括号和最右边的右括号之间的内容(这里我们讨论的是贪婪模式，懒惰模式也有下面的问题)。假如原来的字符串里的左括号和右括号出现的次数不相等，比如( 5 / ( 3 + 2 ) ) )，那我们的匹配结果里两者的个数也不会相等。有没有办法在这样的字符串里匹配到最长的，配对的括号之间的内容呢？<br>为了避免(和(把你的大脑彻底搞糊涂，我们还是用尖括号代替圆括号吧。现在我们的问题变成了如何把xx <aa <bbb=""> <bbb> aa&gt; yy这样的字符串里，最长的配对的尖括号内的内容捕获出来？<br>这里需要用到以下的语法构造：<br>(?’group’) 把捕获的内容命名为group,并压入堆栈(Stack)<br>(?’-group’) 从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败<br>(?(group)yes|no) 如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分<br>(?!) 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败</bbb></aa></p>
<p>我们需要做的是每碰到了左括号，就在压入一个”Open”,每碰到一个右括号，就弹出一个，到了最后就看看堆栈是否为空－－如果不为空那就证明左括号比右括号多，那匹配就应该失败。正则表达式引擎会进行回溯(放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配。<br>&lt;                         #最外层的左括号<br>    [^&lt;&gt;]<em>                #最外层的左括号后面的不是括号的内容<br>    (<br>        (<br>            (?’Open’&lt;)    #碰到了左括号，在黑板上写一个”Open”<br>            [^&lt;&gt;]</em>       #匹配左括号后面的不是括号的内容<br>        )+<br>        (<br>            (?’-Open’&gt;)   #碰到了右括号，擦掉一个”Open”<br>            [^&lt;&gt;]<em>        #匹配右括号后面不是括号的内容<br>        )+<br>    )</em><br>    (?(Open)(?!))         #在遇到最外层的右括号前面，判断黑板上还有没有没擦掉的”Open”；如果还有，则匹配失败</p>
<blockquote>
<pre><code>#最外层的右括号
</code></pre><p>平衡组的一个最常见的应用就是匹配HTML,下面这个例子可以匹配嵌套的<div>标签：<div[^>]<em>&gt;[^&lt;&gt;]</em>(((?’Open’<div[^>]<em>&gt;)[^&lt;&gt;]</em>)+((?’-Open’</div[^></div[^></div>)[^&lt;&gt;]<em>)+)</em>(?(Open)(?!)).</p>
</blockquote>
<p>这里介绍的平衡组语法是由.Net Framework支持的；其它语言／库不一定支持这种功能，或者支持此功能但需要使用不同的语法。</p>
<p>如果你不是一个程序员（或者你自称程序员但是不知道堆栈是什么东西），你就这样理解上面的三种语法吧：第一个就是在黑板上写一个”group”，第二个就是从黑板上擦掉一个”group”，第三个就是看黑板上写的还有没有”group”，如果有就继续匹配yes部分，否则就匹配no部分。</p>
<h2 id="还有些什么东西没提到"><a href="#还有些什么东西没提到" class="headerlink" title="还有些什么东西没提到"></a>还有些什么东西没提到</h2><p>上边已经描述了构造正则表达式的大量元素，但是还有很多没有提到的东西。下面是一些未提到的元素的列表，包含语法和简单的说明。你可以在网上找到更详细的参考资料来学习它们–当你需要用到它们的时候。如果你安装了MSDN Library,你也可以在里面找到.net下正则表达式详细的文档。这里的介绍很简略，如果你需要更详细的信息，而又没有在电脑上安装MSDN Library,可以查看关于正则表达式语言元素的MSDN在线文档。<br>表7.尚未详细讨论的语法<br>代码/语法    说明<br>\a    报警字符(打印它的效果是电脑嘀一声)<br>\b    通常是单词分界位置，但如果在字符类里使用代表退格<br>\t    制表符，Tab<br>\r    回车<br>\v    竖向制表符<br>\f    换页符<br>\n    换行符<br>\e    Escape<br>\0nn    ASCII代码中八进制代码为nn的字符<br>\xnn    ASCII代码中十六进制代码为nn的字符<br>\unnnn    Unicode代码中十六进制代码为nnnn的字符<br>\cN    ASCII控制字符。比如\cC代表Ctrl+C<br>\A    字符串开头(类似^，但不受处理多行选项的影响)<br>\Z    字符串结尾或行尾(不受处理多行选项的影响)<br>\z    字符串结尾(类似$，但不受处理多行选项的影响)<br>\G    当前搜索的开头<br>\p{name}    Unicode中命名为name的字符类，例如\p{IsGreek}<br>(?&gt;exp)    贪婪子表达式<br>(?<x>-<y>exp)    平衡组<br>(?im-nsx:exp)    在子表达式exp中改变处理选项<br>(?im-nsx)    为表达式后面的部分改变处理选项<br>(?(exp)yes|no)    把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no<br>(?(exp)yes)    同上，只是使用空表达式作为no<br>(?(name)yes|no)    如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no<br>(?(name)yes)    同上，只是使用空表达式作为no</y></x></p>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a><br><a href="http://blog.csdn.net/luoweifu/article/details/42613533" target="_blank" rel="external">C++、Java、JavaScript中的正则表达式</a></p>
<p><a href="https://item.jd.com/11070361.html" target="_blank" rel="external">精通正则表达式(第3版)</a><br><a href="https://msdn.microsoft.com/zh-cn/library/hs600312.aspx" target="_blank" rel="external">微软的正则表达式教程</a><br><a href="http://msdn2.microsoft.com/zh-cn/library/system.text.regularexpressions.regex.aspx" target="_blank" rel="external">System.Text.RegularExpressions.Regex类(MSDN)</a><br><a href="http://www.regular-expressions.info/" target="_blank" rel="external">专业的正则表达式教学网站(英文)</a><br><a href="http://weblogs.asp.net/whaggard/archive/2005/02/20/377025.aspx" target="_blank" rel="external">关于.Net下的平衡组的详细讨论（英文）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://deerchao.net/images/regex_tester.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;正则表达式到底是什么东西？&quot;&gt;&lt;a href=&quot;#正则表达式到底是什么东西？&quot; class=&quot;headerlink&quot; title=&quot;正则表达式到底是什么东西？&quot;&gt;&lt;/a&gt;正则表达式到底是什么东西？&lt;/h2&gt;&lt;p&gt;正则表达式就是记录文本规则的代码。和通配符类似，正则表达式也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求——当然，代价就是更复杂。&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Regular Expression" scheme="http://ipcreator.me/tags/Regular-Expression/"/>
    
  </entry>
  
  <entry>
    <title>Differences Between Java and C++</title>
    <link href="http://ipcreator.me/2017/03/13/Program/Java/difference-of-java-and-c++/"/>
    <id>http://ipcreator.me/2017/03/13/Program/Java/difference-of-java-and-c++/</id>
    <published>2017-03-13T11:49:06.000Z</published>
    <updated>2017-03-27T09:58:42.007Z</updated>
    
    <content type="html"><![CDATA[<p>原文出处：<a href="http://blog.csdn.net/luoweifu/article/details/51823518" target="_blank" rel="external">阳光日志</a></p>
<p>1.定义变量和数组时，Java默认初始化，C++不初始化；因为变量未进行初始化，结果是一个任意的值，这将是非常危险的。因此C++的代码在定义变量后必须给其进行初始化。</p>
<p>2.Java中有垃圾回收机制，C++没有。Java中有垃圾回收机制,Java中new对象后不用管，不用考虑释放；虚拟机会自动去回收内存；C++中new了对象或分配内存后一定要记得释放，不然就会内存泄漏；要使C++创建对象自行释放，要自己实现一套引用计数的机制。</p>
<a id="more"></a>
<p>3.Java中只有引用，没有指针；C++中有引用，也有指针。因为没有指针，Java代码的可读性好，更也安全；相较而言，C++就更难懂，但更灵活(特别是算法的一些操作时，指针的存在使数据和内存的操作变得极大的方便和灵活)。</p>
<p>4.在定义类的成员时，Java可以赋初值，C++不可以</p>
<p>5.函数的参数，C++可以有默认形参，Java不可以</p>
<p>6.Java中用final修饰不改变的成员，C++用const修饰不可改变的变量</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文出处：&lt;a href=&quot;http://blog.csdn.net/luoweifu/article/details/51823518&quot;&gt;阳光日志&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.定义变量和数组时，Java默认初始化，C++不初始化；因为变量未进行初始化，结果是一个任意的值，这将是非常危险的。因此C++的代码在定义变量后必须给其进行初始化。&lt;/p&gt;
&lt;p&gt;2.Java中有垃圾回收机制，C++没有。Java中有垃圾回收机制,Java中new对象后不用管，不用考虑释放；虚拟机会自动去回收内存；C++中new了对象或分配内存后一定要记得释放，不然就会内存泄漏；要使C++创建对象自行释放，要自己实现一套引用计数的机制。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ipcreator.me/tags/Java/"/>
    
      <category term="C++" scheme="http://ipcreator.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Android Thread</title>
    <link href="http://ipcreator.me/2017/03/12/Program/Android/multi-thread-in-android/"/>
    <id>http://ipcreator.me/2017/03/12/Program/Android/multi-thread-in-android/</id>
    <published>2017-03-12T14:45:06.000Z</published>
    <updated>2017-03-27T08:01:54.403Z</updated>
    
    <content type="html"><![CDATA[<p>作者: <a href="http://blog.csdn.net/zxw136511485/article/details/51541114" target="_blank" rel="external">zhangxiaowei</a></p>
<p><img src="http://img.blog.csdn.net/20161102120425959?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<a id="more"></a>
<p>Handler拥有下面两个重要的特点：<br>1.handler可以在任意线程发送消息，这些消息会被添加到关联的消息队列上。<br><img src="http://img.blog.csdn.net/20161101134458601?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>2.handler是在它关联的looper线程中处理消息的。<br><img src="http://img.blog.csdn.net/20161101134526023?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>总结：</p>
<pre><code>1. 一个Thread只能有一个Looper对象；
2.每一个线程里可含有一个Looper对象以及一个MessageQueue数据结构；
3.一个线程可以有多个Handler，但是只能有一个Looper；
4.主线程即UI线程是有消息循环的，子线程默认是没有消息循环的；
5.消息循环的本质是，一个线程开启循环模式持续监听并依次处理其他线程给它发的消息；

1 .Android 为什么要设计只能通过 Handler 机制更新 UI 呢?
最根本的目的就是解决多线程并发的问题，假设在一个 Activity 当中，有多个线程去更新 UI，并且对更新的 UI 的操作进行枷锁处理的话又会产生什么样的问题呢? 那就是性能下降，Handler 通过消息队列，保证了消息处理的先后有序。鉴于以上问题的考虑，Android 给我们提供了一套更新 UI 的机制，我们只要使用一套机制就好，所有的更新 UI 的操作都是在主线程中轮询处理。
2.Handler 与 Looper、MessageQueue 的关系。
handler 负责发送消息，Looper 负责接收 Handler 发送消息，并直接把消息回传给 handler 自己，MessageQueue 就是一个存储消息的容器。
3.如果想在子线程中创建一个位于主线程的Handler，该怎么做呢？
其实也很简单，在创建Handler时传入主线程的looper对象即可， Handler mHandler=new Handler( Looper.getMainLooper());
</code></pre><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://blog.csdn.net/zxw136511485/article/details/51541114" target="_blank" rel="external">Android(线程一) 线程</a><br><a href="http://blog.csdn.net/zxw136511485/article/details/51559759" target="_blank" rel="external">Android(线程二) 线程池详解</a><br><a href="http://blog.csdn.net/zxw136511485/article/details/52993021" target="_blank" rel="external">Android 源码解析Handler处理机制（一）</a><br><a href="http://blog.csdn.net/zxw136511485/article/details/52981108" target="_blank" rel="external">Android 源码解析Handler处理机制（二）</a><br><a href="http://blog.csdn.net/zxw136511485/article/details/53072952" target="_blank" rel="external">Android 源码解析AsyncTask（一）</a><br><a href="http://blog.csdn.net/zxw136511485/article/details/53036525" target="_blank" rel="external">Android 源码解析AsyncTask（二）</a><br><a href="http://blog.csdn.net/zxw136511485/article/details/52980006" target="_blank" rel="external">Android 更新UI方法的深度解析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: &lt;a href=&quot;http://blog.csdn.net/zxw136511485/article/details/51541114&quot;&gt;zhangxiaowei&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20161102120425959?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Multithread" scheme="http://ipcreator.me/tags/Multithread/"/>
    
  </entry>
  
  <entry>
    <title>Concepts of Multiprocess and Multithread</title>
    <link href="http://ipcreator.me/2017/03/12/Program/Java/multi-thread/"/>
    <id>http://ipcreator.me/2017/03/12/Program/Java/multi-thread/</id>
    <published>2017-03-12T13:45:06.000Z</published>
    <updated>2017-03-27T07:03:48.998Z</updated>
    
    <content type="html"><![CDATA[<p>作者: <a href="http://blog.csdn.net/luoweifu/article/details/46595285" target="_blank" rel="external">luoweifu</a></p>
<h2 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h2><p>什么是线程？线程与进程与有什么关系？这是一个非常抽象的问题，也是一个特别广的话题，涉及到非常多的知识。我不能确保能把它讲的话，也不能确保讲的内容全部都正确。即使这样，我也希望尽可能地把他讲通俗一点，讲的明白一点，因为这是个一直困扰我很久的，扑朔迷离的知识领域，希望通过我的理解揭开它一层一层神秘的面纱。</p>
<a id="more"></a>
<h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><p>线程是什么？要理解这个概念，须要先了解一下操作系统的一些相关概念。大部分操作系统(如Windows、Linux)的任务调度是采用<strong>时间片轮转的抢占式</strong>调度方式，也就是说一个任务执行一小段时间后强制暂停去执行下一个任务，每个任务轮流执行。任务执行的一小段时间叫做时间片，任务正在执行时的状态叫运行状态，任务执行一段时间后强制暂停去执行下一个任务，被暂停的任务就处于就绪状态等待下一个属于它的时间片的到来。这样每个任务都能得到执行，由于CPU的执行效率非常高，时间片非常短，在各个任务之间快速地切换，给人的感觉就是多个任务在“同时进行”，这也就是我们所说的并发(别觉得并发有多高深，它的实现很复杂，但它的概念很简单，就是一句话：多个任务同时执行)。多任务运行过程的示意图如下：<br><img src="http://img.blog.csdn.net/20150623201226625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvd2VpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>我们都知道计算机的核心是CPU，它承担了所有的计算任务；而操作系统是计算机的管理者，它负责任务的调度、资源的分配和管理，统领整个计算机硬件；应用程序侧是具有某种功能的程序，程序是运行于操作系统之上的。</p>
<p><strong>进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体</strong> 进程是一种抽象的概念，从来没有统一的标准定义。进程一般由<strong>程序、数据集合和进程控制块</strong>三部分组成。程序用于描述进程要完成的功能，是控制进程执行的指令集；数据集合是程序在执行时所需要的数据和工作区；<strong>程序控制块(Program Control Block，简称PCB)，包含进程的描述信息和控制信息，是进程存在的唯一标志。</strong></p>
<p>进程具有的特征：<br><strong>动态性</strong>：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态消亡的；<br><strong>并发性</strong>：任何进程都可以同其他进程一起并发执行；<br><strong>独立性</strong>：进程是系统进行资源分配和调度的一个独立单位；<br><strong>结构性</strong>：进程由程序、数据和进程控制块三部分组成。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>在早期的操作系统中并没有线程的概念，进程是能拥有资源和独立运行的最小单位，也是程序执行的最小单位。任务调度采用的是时间片轮转的抢占式调度方式，而进程是任务调度的最小单位，每个进程有各自独立的一块内存，使得各个进程之间内存地址相互隔离。</p>
<p>后来，随着计算机的发展，对CPU的要求越来越高，进程之间的切换开销较大，已经无法满足越来越复杂的程序的要求了。于是就发明了线程，<strong>线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。</strong> 一个进程可以有一个或多个线程，<strong>各个线程之间共享程序的内存空间(也就是所在进程的内存空间)。</strong> 一个标准的<strong>线程由线程ID、当前指令指针(PC)、寄存器和堆栈组成。而进程由内存空间(代码、数据、进程空间、打开的文件)和一个或多个线程组成。</strong></p>
<h2 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h2><p>前面讲了进程与线程，但可能你还觉得迷糊，感觉他们很类似。的确，进程与线程有着千丝万缕的关系，下面就让我们一起来理一理：<br>1.线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；<br>2.一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；<br>3.进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)，某进程内的线程在其它进程不可见；<br>4.调度和切换：线程上下文切换比进程上下文切换要快得多。</p>
<p>线程与进程关系的示意图：<br><img src="http://img.blog.csdn.net/20150623201304175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvd2VpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>图 2：进程与线程的资源共享关系</p>
<p><img src="http://img.blog.csdn.net/20150623201318513?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvd2VpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>图 3：单线程与多线程的关系</p>
<p>总之，线程和进程都是一种抽象的概念，线程是一种比进程更小的抽象，线程和进程都可用于实现并发。</p>
<p>在早期的操作系统中并没有线程的概念，进程是能拥有资源和独立运行的最小单位，也是程序执行的最小单位。它相当于一个进程里只有一个线程，进程本身就是线程。所以线程有时被称为轻量级进程(Lightweight Process，LWP）。<br><img src="http://img.blog.csdn.net/20150623201335106?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvd2VpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>图 4：早期的操作系统只有进程，没有线程</p>
<p>后来，随着计算机的发展，对多个任务之间上下文切换的效率要求越来越高，就抽象出一个更小的概念——线程，一般一个进程会有多个(也可是一个)线程。<br><img src="http://img.blog.csdn.net/20150623201405456?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvd2VpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>图 5：线程的出现，使得一个进程可以有多个线程</p>
<h2 id="多线程与多核"><a href="#多线程与多核" class="headerlink" title="多线程与多核"></a>多线程与多核</h2><p>上面提到的时间片轮转的调度方式说一个任务执行一小段时间后强制暂停去执行下一个任务，每个任务轮流执行。很多操作系统的书都说“同一时间点只有一个任务在执行”。那有人可能就要问双核处理器呢？难道两个核不是同时运行吗？</p>
<p>其实“同一时间点只有一个任务在执行”这句话是不准确的，至少它是不全面的。那多核处理器的情况下，线程是怎样执行呢？这就需要了解内核线程。<br>多核(心)处理器是指在一个处理器上集成多个运算核心从而提高计算能力，也就是有多个真正并行计算的处理核心，<strong>每一个处理核心对应一个内核线程。内核线程（Kernel Thread， KLT）就是直接由操作系统内核支持的线程，这种线程由内核来完成线程切换，内核通过操作调度器对线程进行调度，并负责将线程的任务映射到各个处理器上。一般一个处理核心对应一个内核线程，比如单核处理器对应一个内核线程，双核处理器对应两个内核线程，四核处理器对应四个内核线程。</strong></p>
<p>现在的电脑一般是双核四线程、四核八线程，是<strong>采用超线程技术将一个物理处理核心模拟成两个逻辑处理核心，对应两个内核线程</strong>，所以在操作系统中看到的CPU数量是实际物理CPU数量的两倍，如你的电脑是双核四线程，打开“任务管理器\性能”可以看到4个CPU的监视器，四核八线程可以看到8个CPU的监视器。<br><img src="http://img.blog.csdn.net/20150623201509399?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvd2VpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>图 6：双核四线程在Windows8下查看的结果</p>
<p>超线程技术就是利用特殊的硬件指令，把一个物理芯片模拟成两个逻辑处理核心，让单个处理器都能使用线程级并行计算，进而兼容多线程操作系统和软件，减少了CPU的闲置时间，提高的CPU的运行效率。这种超线程技术(如双核四线程)由处理器硬件的决定，同时也需要操作系统的支持才能在计算机中表现出来。</p>
<p>程序一般不会直接去使用内核线程，而是去使用内核线程的一种高级接口——轻量级进程（Light Weight Process，LWP），轻量级进程就是我们通常意义上所讲的线程(我们在这称它为用户线程)，由于每个轻量级进程都由一个内核线程支持，因此只有先支持内核线程，才能有轻量级进程。用户线程与内核线程的对应关系有三种模型：一对一模型、多对一模型、多对多模型，在这以4个内核线程、3个用户线程为例对三种模型进行说明。</p>
<h2 id="一对一模型"><a href="#一对一模型" class="headerlink" title="一对一模型"></a>一对一模型</h2><p>对于一对一模型来说，一个用户线程就唯一地对应一个内核线程(反过来不一定成立，一个内核线程不一定有对应的用户线程)。这样，如果CPU没有采用超线程技术(如四核四线程的计算机)，一个用户线程就唯一地映射到一个物理CPU的线程，线程之间的并发是真正的并发。一对一模型使用户线程具有与内核线程一样的优点，一个线程因某种原因阻塞时其他线程的执行不受影响；此处，一对一模型也可以让多线程程序在多处理器的系统上有更好的表现。<br>但一对一模型也有两个缺点：1.许多操作系统限制了内核线程的数量，因此一对一模型会使用户线程的数量受到限制；2.许多操作系统内核线程调度时，上下文切换的开销较大，导致用户线程的执行效率下降。<br><img src="http://img.blog.csdn.net/20150623201531159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvd2VpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>图 7：一对一模型</p>
<h2 id="多对一模型"><a href="#多对一模型" class="headerlink" title="多对一模型"></a>多对一模型</h2><p>多对一模型将多个用户线程映射到一个内核线程上，线程之间的切换由用户态的代码来进行，因此相对一对一模型，多对一模型的线程切换速度要快许多；此外，多对一模型对用户线程的数量几乎无限制。但多对一模型也有两个缺点：1.如果其中一个用户线程阻塞，那么其它所有线程都将无法执行，因为此时内核线程也随之阻塞了；2.在多处理器系统上，处理器数量的增加对多对一模型的线程性能不会有明显的增加，因为所有的用户线程都映射到一个处理器上了。<br><img src="http://img.blog.csdn.net/20150623201543668?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvd2VpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>图 8：多对一模型</p>
<h2 id="多对多模型"><a href="#多对多模型" class="headerlink" title="多对多模型"></a>多对多模型</h2><p>多对多模型结合了一对一模型和多对一模型的优点，将多个用户线程映射到多个内核线程上。多对多模型的优点有：1.一个用户线程的阻塞不会导致所有线程的阻塞，因为此时还有别的内核线程被调度来执行；2.多对多模型对用户线程的数量没有限制；3.在多处理器的操作系统中，多对多模型的线程也能得到一定的性能提升，但提升的幅度不如一对一模型的高。<br>在现在流行的操作系统中，大都采用多对多的模型。<br><img src="http://img.blog.csdn.net/20150623201557825?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvd2VpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>图 9：多对多模型</p>
<h2 id="查看进程与线程"><a href="#查看进程与线程" class="headerlink" title="查看进程与线程"></a>查看进程与线程</h2><p>一个应用程序可能是多线程的，也可能是多进程的，如何查看呢？在Windows下我们只须打开任务管理器就能查看一个应用程序的进程和线程数。按“Ctrl+Alt+Del”或右键快捷工具栏打开任务管理器。<br>查看进程数和线程数：<br><img src="http://img.blog.csdn.net/20150623201615140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvd2VpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>图 10：查看线程数和进程数</p>
<p>在“进程”选项卡下，我们可以看到一个应用程序包含的线程数。如果一个应用程序有多个进程，我们能看到每一个进程，如在上图中，Google的chrome浏览器就有多个进程。同时，如果打开了一个应用程序的多个实例也会有多个进程，如上图中我打开了两个cmd窗口，就有两个cmd进程。如果看不到线程数这一列，可以在点击“查看\选择列”菜单，增加监听的列。</p>
<h2 id="查看CPU和内存的使用率："><a href="#查看CPU和内存的使用率：" class="headerlink" title="查看CPU和内存的使用率："></a>查看CPU和内存的使用率：</h2><p>在性能选项卡中，我们可以查看CPU和内存的使用率，根据CPU使用记录的监视器的个数还能看出逻辑处理核心的个数，如我的双核四线程的计算机就有四个监视器。<br><img src="http://img.blog.csdn.net/20150623201628475?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvd2VpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>图 11：查看CPU和内存的使用率</p>
<h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p>当线程的数量小于处理器的数量时，线程的并发是真正的并发，不同的线程运行在不同的处理器上。但当线程的数量大于处理器的数量时，线程的并发会受到一些阻碍，此时并不是真正的并发，因为此时至少有一个处理器会运行多个线程。<br>在单个处理器运行多个线程时，并发是一种模拟出来的状态。操作系统采用时间片轮转的方式轮流执行每一个线程。现在，几乎所有的现代操作系统采用的都是时间片轮转的抢占式调度方式，如我们熟悉的Unix、Linux、Windows及Mac OS X等流行的操作系统。<br>我们知道线程是程序执行的最小单位，也是任务执行的最小单位。在早期只有进程的操作系统中，进程有五种状态，创建、就绪、运行、阻塞(等待)、退出。早期的进程相当于现在的只有单个线程的进程，那么现在的多线程也有五种状态，现在的多线程的生命周期与早期进程的生命周期类似。<br><img src="http://img.blog.csdn.net/20150629220341018?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvd2VpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>图 12：早期进程的生命周期</p>
<p>进程在运行过程有三种状态：就绪、运行、阻塞，创建和退出状态描述的是进程的创建过程和退出过程。<br>创建：进程正在创建，还不能运行。操作系统在创建进程时要进行的工作包括分配和建立进程控制块表项、建立资源表格并分配资源、加载程序并建立地址空间；<br>就绪：时间片已用完，此线程被强制暂停，等待下一个属于他的时间片到来；<br>运行：此线程正在执行，正在占用时间片；<br>阻塞：也叫等待状态，等待某一事件(如IO或另一个线程)执行完；<br>退出：进程已结束，所以也称结束状态，释放操作系统分配的资源。<br><img src="http://img.blog.csdn.net/20150629220354195?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvd2VpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>图 13：线程的生命周期</p>
<p>创建：一个新的线程被创建，等待该线程被调用执行；<br>就绪：时间片已用完，此线程被强制暂停，等待下一个属于他的时间片到来；<br>运行：此线程正在执行，正在占用时间片；<br>阻塞：也叫等待状态，等待某一事件(如IO或另一个线程)执行完；<br>退出：一个线程完成任务或者其他终止条件发生，该线程终止进入退出状态，退出状态释放该线程所分配的资源。</p>
<h2 id="编程思想之多线程与多进程-2-——线程优先级与线程安全"><a href="#编程思想之多线程与多进程-2-——线程优先级与线程安全" class="headerlink" title="编程思想之多线程与多进程(2)——线程优先级与线程安全"></a>编程思想之多线程与多进程(2)——线程优先级与线程安全</h2><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p>现在主流操作系统(如Windows、Linux、Mac OS X)的任务调度除了具有前面提到的时间片轮转的特点外，还有优先级调度(Priority Schedule)的特点。优先级调度决定了线程按照什么顺序轮流执行，在具有优先级调度的系统中，线程拥有各自的线程优先级(Thread Priority)。具有高优先级的线程会更早地执行，而低优先级的线程通常要等没有更高优先级的可执行线程时才会被执行。</p>
<p>线程的优先级可以由用户手动设置，此外系统也会根据不同情形调整优先级。通常情况下，频繁地进入等待状态(进入等待状态会放弃之前仍可占用的时间份额)的线程(如IO线程)，比频繁进行大量计算以至于每次都把所有时间片全部用尽的线程更受操作系统的欢迎。因为频繁进入等待的线程只会占用很少的时间，这样操作系统可以处理更多的任务。我们把频繁等待的线程称之为IO密集型线程(IO Bound Thread)，而把很少等待的线程称之为CPU密集型线程(CPU Bound Thread)。IO密集型线程总是比CPU密集型线程更容易得到优先级的提升。</p>
<h2 id="线程饿死"><a href="#线程饿死" class="headerlink" title="线程饿死:"></a>线程饿死:</h2><p>在优先级调度下，容易出现一种线程饿死的现象。一个线程饿死是说它的优先级较低，在它执行之前总是有比它优先级更高的线程等待执行，因此这个低优先级的线程始终得不到执行。当CPU密集型的线程优先级较高时，其它低优先级的线程就很可能出现饿死的情况；当IO密集型线程优先级较高时，其它线程相对不容易造成饿死的善，因为IO线程有大量的等待时间。为了避免线程饿死，调度系统通常会逐步提升那些等待了很久而得不到执行的线程的优先级。这样，一个线程只要它等待了足够长的时间，其优先级总会被提升到可以让它执行的程度，也就是说这种情况下线程始终会得到执行，只是时间的问题。</p>
<p>在优先级调度环境下，线程优先级的改变有三种方式：</p>
<ol>
<li>用户指定优先级；</li>
<li>根据进入等待状态的频繁程度提升或降低优先级(由操作系统完成)；</li>
<li>长时间得不到执行而被提升优先级。</li>
</ol>
<h2 id="线程安全与锁"><a href="#线程安全与锁" class="headerlink" title="线程安全与锁"></a>线程安全与锁</h2><p>在多个线程并发执行访问同一个数据时，如果不采取相应的措施，将会是非常危险的。假设你在工行有一个银行账户，两张银联卡(自己手里一张，女朋友手里一张)，里面有100万。假设取钱就两个过程：1.检查账户余额，2.取出现金(如果要取出的金额 &gt; 账户余额，则取现成功，否则取现失败)。有一天你要买房想把钱取出来，而此时你女朋友也想买一辆车(假设你们事先没有商量)。两个人都在取钱，你在A号ATM机取100万，女朋友在B号ATM机取80万。这时A号ATM检查账户余额发现有100万，可以取出；而与此同时，同一时刻B号ATM也在检查账户余额发现有100万，可以取出；这样，A、B都把钱取出来了。</p>
<p>100万的存款取出180万，银行就亏大发了(当然你就笑呵呵了……)！这就是线程并发的不安全性。为避免这种情况发生，我们要将多个线程对同一数据的访问同步，确保线程安全。</p>
<p>所谓 <strong>同步(synchronization)</strong> 就是指一个线程访问数据时，其它线程不得对同一个数据进行访问，即同一时刻只能有一个线程访问该数据，当这一线程访问结束时其它线程才能对这它进行访问。同步最常见的方式就是使用锁(Lock)，也称为线程锁。锁是一种非强制机制，每一个线程在访问数据或资源之前，首先试图获取(Acquire)锁，并在访问结束之后释放(Release)锁。在锁被占用时试图获取锁，线程会进入等待状态，直到锁被释放再次变为可用。</p>
<h2 id="二元信号量"><a href="#二元信号量" class="headerlink" title="二元信号量"></a>二元信号量</h2><p>二元信号量(Binary Semaphore)是一种最简单的锁，它有两种状态：占用和非占用。它 <strong>适合只能被唯一一个线程独占访问的资源</strong>。当二元信号量处于非占用状态时，第一个试图获取该二元信号量锁的线程会获得该锁，并将二元信号量锁置为占用状态，之后其它试图获取该二元信号量的线程会进入等待状态，直到该锁被释放。</p>
<h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><p>多元信号量允许多个线程访问同一个资源，多元信号量简称信号量(Semaphore)，对于允许多个线程并发访问的资源，这是一个很好的选择。一个初始值为N的信号量允许N个线程并发访问。线程访问资源时首先获取信号量锁，进行如下操作：</p>
<ol>
<li>将信号量的值减1；</li>
<li>如果信号量的值小于0，则进入等待状态，否则继续执行；<br>访问资源结束之后，线程释放信号量锁，进行如下操作：</li>
<li>将信号量的值加1；</li>
<li>如果信号量的值小于1(等于0)，唤醒一个等待中的线程；</li>
</ol>
<h2 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h2><p>互斥量(Mutex)和二元信号量类似，资源仅允许一个线程访问。<strong>与二元信号量不同的是，信号量在整个系统中可以被任意线程获取和释放，也就是说，同一个信号量可以由一个线程获取而由另一线程释放。</strong> 而 <strong>互斥量则要求哪个线程获取了该互斥量锁就由哪个线程释放</strong>，其它线程越俎代庖释放互斥量是无效的。</p>
<h2 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h2><p>临界区(Critical Section)是一种比互斥量更加严格的同步手段。互斥量和信号量在系统的任何进程都是可见的，也就是说一个进程创建了一个互斥量或信号量，另一进程试图获取该锁是合法的。而 <strong>临界区的作用范围仅限于本进程，其它的进程无法获取该锁。</strong> 除此之处，临界区与互斥量的性质相同。</p>
<h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><p>读写锁(Read-Write Lock)允许多个线程同时对同一个数据进行读操作，而只允许一个线程进行写操作。这是因为读操作不会改变数据的内容，是安全的；而写操作会改变数据的内容，是不安全的。对同一个读写锁，有两种获取方式：共享的(Shared)和独占的(Exclusive)。当锁处于自由状态时，试图以任何一种方式获取锁都能成功，并将锁置为对应的状态；如果锁处于共享状态，其它线程以共享方式获取该锁，仍然能成功，此时该锁分配给了多个线程；如果其它线程试图如独占的方式获取处于共享状态的锁，它必须等待所有线程释放该锁；处于独占状态的锁阻止任何线程获取该锁，不论它们以何种方式。获取读写锁的方式总结如下：<br>读写锁的状态    以共享方式获取    以独占方式获取<br>自由    成功    成功<br>共享    成功    等待<br>独占    等待    等待<br>表 1 ：获取读写锁的方式</p>
<h2 id="编程思想之多线程与多进程-3-——Java中的多线程"><a href="#编程思想之多线程与多进程-3-——Java中的多线程" class="headerlink" title="编程思想之多线程与多进程(3)——Java中的多线程"></a>编程思想之多线程与多进程(3)——Java中的多线程</h2><h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><p>任何程序至少有一个线程，即使你没有主动地创建线程，程序从一开始执行就有一个默认的线程，被称为主线程，只有一个线程的程序称为单线程程序。如下面这一简单的代码，没有显示地创建一个线程，<strong>程序从main开始执行，main本身就是一个线程(主线程)，单个线程从头执行到尾。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static void main(String args[]) &#123;</div><div class="line">   System.out.println(&quot;输出从1到100的数:&quot;);</div><div class="line">   for (int i = 0; i &lt; 100; i ++) &#123;</div><div class="line">      System.out.println(i + 1);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>单线程程序简单明了，但有时无法满足特定的需求。如一个文字处理的程序，我在打印文章的同时也要能对文字进行编辑，如果是单线程的程序则要等打印机打印完成之后你才能对文字进行编辑，但打印的过程一般比较漫长，这是我们无法容忍的。如果采用多线程，打印的时候可以单独开一个线程去打印，主线程可以继续进行文字编辑。在程序需要同时执行多个任务时，可以采用多线程。</p>
<p>在程序需要同时执行多个任务时，可以采用多线程。<strong>Java给多线程编程提供了内置的支持，提供了两种创建线程方法：1.通过实现Runable接口；2.通过继承Thread类。</strong></p>
<p>Thread是JDK实现的对线程支持的类，Thread类本身实现了Runnable接口，所以Runnable是显示创建线程必须实现的接口; Runnable只有一个run方法，所以不管通过哪种方式创建线程，都必须实现run方法。我们可以看一个例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created with IntelliJ IDEA.</div><div class="line"> * User: luoweifu</div><div class="line"> * Date: 15-5-24</div><div class="line"> * Time: 下午9:30</div><div class="line"> * To change this template use File | Settings | File Templates.</div><div class="line"> */</div><div class="line"></div><div class="line">/**</div><div class="line"> * 通过实现Runnable方法</div><div class="line"> */</div><div class="line">class ThreadA implements Runnable &#123;</div><div class="line">   private Thread thread;</div><div class="line">   private String threadName;</div><div class="line">   public ThreadA(String threadName) &#123;</div><div class="line">      thread = new Thread(this, threadName);</div><div class="line">      this.threadName = threadName;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   //实现run方法</div><div class="line">   public void run() &#123;</div><div class="line">      for (int i = 0; i &lt; 100; i ++) &#123;</div><div class="line">         System.out.println(threadName + &quot;: &quot; + i);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public void start() &#123;</div><div class="line">      thread.start();</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 继承Thread的方法</div><div class="line"> */</div><div class="line">class ThreadB extends Thread &#123;</div><div class="line">   private String threadName;</div><div class="line"></div><div class="line">   public ThreadB(String threadName) &#123;</div><div class="line">      super(threadName);</div><div class="line">      this.threadName = threadName;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   //实现run方法</div><div class="line">   public void run() &#123;</div><div class="line">      for (int i = 0; i &lt; 100; i ++) &#123;</div><div class="line">         System.out.println(threadName + &quot;: &quot; + i);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Multithread&#123;</div><div class="line"></div><div class="line">   public static void main(String args[]) &#123;</div><div class="line">      ThreadA threadA = new ThreadA(&quot;ThreadA&quot;);</div><div class="line">      ThreadB threadB = new ThreadB(&quot;ThreadB&quot;);</div><div class="line">      threadA.start();</div><div class="line">      threadB.start();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明：上面的例子中例举了两种实现线程的方式。<strong>大部分情况下选择实现Runnable接口的方式会优于继承Thread的方式</strong>，因为：</p>
<ol>
<li>从 Thread 类继承会强加类层次；</li>
<li>有些类不能继承Thread类，如要作为线程运行的类已经是某一个类的子类了，但<strong>Java只支持单继承</strong>，所以不能再继承Thread类了。</li>
</ol>
<h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>线程与线程之间的关系，有几种:</p>
<p>模型一：简单的线程，多个线程同时执行，但各个线程处理的任务毫不相干，没有数据和资源的共享，不会出现争抢资源的情况。这种情况下不管有多少个线程同时执行都是安全的，其执行模型如下：</p>
<p><img src="http://img.blog.csdn.net/20150628203010538" alt=""><br>图 1：处理相互独立的任务</p>
<p>模型二：复杂的线程，多个线程共享相同的数据或资源，就会出现多个线程争抢一个资源的情况。这时就容易造成数据的非预期(错误)处理，是线程不安全的，其模型如下:<br><img src="http://img.blog.csdn.net/20150628203115567" alt=""><br>图 2：多个线程共享相同的数据或资源</p>
<p>在出现模型二的情况时就要考虑线程的同步，确保线程的安全。<strong>Java中对线程同步的支持，最常见的方式是添加synchronized同步锁。</strong></p>
<p>我们通过一个例子来看一下线程同步的应用。</p>
<p>买火车票是大家春节回家最为关注的事情，我们就简单模拟一下火车票的售票系统(为使程序简单，我们就抽出最简单的模型进行模拟)：有500张从北京到赣州的火车票，在8个窗口同时出售，保证系统的稳定性和数据的原子性。</p>
<p><img src="http://img.blog.csdn.net/20150628203427692" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 模拟服务器的类</div><div class="line"> */</div><div class="line">class Service &#123;</div><div class="line">   private String ticketName;    //票名</div><div class="line">   private int totalCount;        //总票数</div><div class="line">   private int remaining;        //剩余票数</div><div class="line"></div><div class="line">   public Service(String ticketName, int totalCount) &#123;</div><div class="line">      this.ticketName = ticketName;</div><div class="line">      this.totalCount = totalCount;</div><div class="line">      this.remaining = totalCount;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public synchronized int saleTicket(int ticketNum) &#123;</div><div class="line">      if (remaining &gt; 0) &#123;</div><div class="line">         remaining -= ticketNum;</div><div class="line">         try &#123;        //暂停0.1秒，模拟真实系统中复杂计算所用的时间</div><div class="line">            Thread.sleep(100);</div><div class="line">         &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         if (remaining &gt;= 0) &#123;</div><div class="line">            return remaining;</div><div class="line">         &#125; else &#123;</div><div class="line">            remaining += ticketNum;</div><div class="line">            return -1;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">      return -1;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public synchronized int getRemaining() &#123;</div><div class="line">      return remaining;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public String getTicketName() &#123;</div><div class="line">      return this.ticketName;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 售票程序</div><div class="line"> */</div><div class="line">class TicketSaler implements Runnable &#123;</div><div class="line">   private String name;</div><div class="line">   private Service service;</div><div class="line"></div><div class="line">   public TicketSaler(String windowName, Service service) &#123;</div><div class="line">      this.name = windowName;</div><div class="line">      this.service = service;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   @Override</div><div class="line">   public void run() &#123;</div><div class="line">      while (service.getRemaining() &gt; 0) &#123;</div><div class="line">         synchronized (this)</div><div class="line">         &#123;</div><div class="line">            System.out.print(Thread.currentThread().getName() + &quot;出售第&quot; + service.getRemaining() + &quot;张票，&quot;);</div><div class="line">            int remaining = service.saleTicket(1);</div><div class="line">            if (remaining &gt;= 0) &#123;</div><div class="line">               System.out.println(&quot;出票成功!剩余&quot; + remaining + &quot;张票.&quot;);</div><div class="line">            &#125; else &#123;</div><div class="line">               System.out.println(&quot;出票失败！该票已售完。&quot;);</div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 测试类</div><div class="line"> */</div><div class="line">public class TicketingSystem &#123;</div><div class="line">   public static void main(String args[]) &#123;</div><div class="line">      Service service = new Service(&quot;北京--&gt;赣州&quot;, 500);</div><div class="line">      TicketSaler ticketSaler = new TicketSaler(&quot;售票程序&quot;, service);</div><div class="line">      //创建8个线程，以模拟8个窗口</div><div class="line">      Thread threads[] = new Thread[8];</div><div class="line">      for (int i = 0; i &lt; threads.length; i++) &#123;</div><div class="line">         threads[i] = new Thread(ticketSaler, &quot;窗口&quot; + (i + 1));</div><div class="line">         System.out.println(&quot;窗口&quot; + (i + 1) + &quot;开始出售 &quot; + service.getTicketName() + &quot; 的票...&quot;);</div><div class="line">         threads[i].start();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">窗口1开始出售 北京–&gt;赣州 的票…</div><div class="line">窗口2开始出售 北京–&gt;赣州 的票…</div><div class="line">窗口3开始出售 北京–&gt;赣州 的票…</div><div class="line">窗口4开始出售 北京–&gt;赣州 的票…</div><div class="line">窗口5开始出售 北京–&gt;赣州 的票…</div><div class="line">窗口6开始出售 北京–&gt;赣州 的票…</div><div class="line">窗口7开始出售 北京–&gt;赣州 的票…</div><div class="line">窗口8开始出售 北京–&gt;赣州 的票…</div><div class="line">窗口1出售第500张票，出票成功!剩余499张票.</div><div class="line">窗口1出售第499张票，出票成功!剩余498张票.</div><div class="line">窗口6出售第498张票，出票成功!剩余497张票.</div><div class="line">窗口6出售第497张票，出票成功!剩余496张票.</div><div class="line">窗口1出售第496张票，出票成功!剩余495张票.</div><div class="line">窗口1出售第495张票，出票成功!剩余494张票.</div><div class="line">窗口1出售第494张票，出票成功!剩余493张票.</div><div class="line">窗口2出售第493张票，出票成功!剩余492张票.</div><div class="line">窗口2出售第492张票，出票成功!剩余491张票.</div><div class="line">窗口2出售第491张票，出票成功!剩余490张票.</div><div class="line">窗口2出售第490张票，出票成功!剩余489张票.</div><div class="line">窗口2出售第489张票，出票成功!剩余488张票.</div><div class="line">窗口2出售第488张票，出票成功!剩余487张票.</div><div class="line">窗口6出售第487张票，出票成功!剩余486张票.</div><div class="line">窗口6出售第486张票，出票成功!剩余485张票.</div><div class="line">窗口3出售第485张票，出票成功!剩余484张票.</div><div class="line">……</div></pre></td></tr></table></figure>
<p>在上面的例子中，涉及到<strong>数据的更改的Service类saleTicket方法和TicketSaler类run方法都用了synchronized同步锁</strong>进行同步处理，以保证数据的准确性和原子性。</p>
<p>关于synchronized更详细的用法请参见：<a href="http://blog.csdn.net/luoweifu/article/details/46613015" target="_blank" rel="external">《Java中Synchronized的用法》</a></p>
<h2 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h2><p>在多线程程序中，除了最重要的线程同步外，还有其它的线程控制，如线程的中断、合并、优先级等。</p>
<p>线程等待(wait、notify、notifyAll)</p>
<p>Wait：使当前的线程处于等待状态；<br>Notify：唤醒其中一个等待线程；<br>notifyAll：唤醒所有等待线程。</p>
<p>详细用法参见：<a href="http://blog.csdn.net/luoweifu/article/details/46664809" target="_blank" rel="external">《 Java多线程中wait, notify and notifyAll的使用》</a></p>
<h2 id="线程中断-interrupt"><a href="#线程中断-interrupt" class="headerlink" title="线程中断(interrupt)"></a>线程中断(interrupt)</h2><p>在Java提供的线程支持类Thread中，有三个用于线程中断的方法：<br>public void interrupt(); 中断线程。<br>public static boolean interrupted(); 是一个静态方法，用于测试当前线程是否已经中断，并将线程的中断状态 清除。所以如果线程已经中断，调用两次interrupted，第二次时会返回false，因为第一次返回true后会清除中断状态。<br>public boolean isInterrupted(); 测试线程是否已经中断。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">**</div><div class="line"> * 打印线程</div><div class="line"> */</div><div class="line">class Printer implements Runnable &#123;</div><div class="line">   public void run() &#123;</div><div class="line">      while (!Thread.currentThread().isInterrupted()) &#123;     //如果当前线程未被中断，则执行打印工作</div><div class="line">         System.out.println(Thread.currentThread().getName() + &quot;打印中… …&quot;);</div><div class="line">      &#125;</div><div class="line">      if (Thread.currentThread().isInterrupted()) &#123;</div><div class="line">         System.out.println(&quot;interrupted:&quot; +  Thread.interrupted());       //返回当前线程的状态，并清除状态</div><div class="line">         System.out.println(&quot;isInterrupted:&quot; +  Thread.currentThread().isInterrupted());</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Printer printer = new Printer();</div><div class="line">Thread printerThread = new Thread(printer, &quot;打印线程&quot;);</div><div class="line">printerThread.start();</div><div class="line">try &#123;</div><div class="line">   Thread.sleep(100);</div><div class="line">&#125; catch (InterruptedException e) &#123;</div><div class="line">   e.printStackTrace();</div><div class="line">&#125;</div><div class="line">System.out.println(&quot;有紧急任务出现，需中断打印线程.&quot;);</div><div class="line">System.out.println(&quot;中断前的状态：&quot; + printerThread.isInterrupted());</div><div class="line">printerThread.interrupt();       // 中断打印线程</div><div class="line">System.out.println(&quot;中断前的状态：&quot; + printerThread.isInterrupted());</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">打印线程打印中… …</div><div class="line">… …</div><div class="line">打印线程打印中… …</div><div class="line">有紧急任务出现，需中断打印线程.</div><div class="line">打印线程打印中… …</div><div class="line">中断前的状态：false</div><div class="line">打印线程打印中… …</div><div class="line">中断前的状态：true</div><div class="line">interrupted:true</div><div class="line">isInterrupted:false</div></pre></td></tr></table></figure>
<h2 id="线程合并-join"><a href="#线程合并-join" class="headerlink" title="线程合并(join)"></a>线程合并(join)</h2><p>所谓合并，就是等待其它线程执行完，再执行当前线程，执行起来的效果就好像把其它线程合并到当前线程执行一样。其执行关系如下：</p>
<p><img src="http://img.blog.csdn.net/20150628204041010" alt=""><br>图 4:线程合并的过程</p>
<p>public final void join()<br>等待该线程终止</p>
<p>public final void join(long millis);<br>等待该线程终止的时间最长为 millis 毫秒。超时为 0 意味着要一直等下去。</p>
<p>public final void join(long millis, int nanos)<br>等待该线程终止的时间最长为 millis 毫秒 + nanos 纳秒</p>
<p>这个常见的一个应用就是安装程序，很多大的软件都会包含多个插件，如果选择完整安装，则要等所有的插件都安装完成才能结束，且插件与插件之间还可能会有依赖关系。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 插件1</div><div class="line"> */</div><div class="line">class Plugin1 implements Runnable &#123;</div><div class="line"></div><div class="line">   @Override</div><div class="line">   public void run() &#123;</div><div class="line">      System.out.println(&quot;插件1开始安装.&quot;);</div><div class="line">      System.out.println(&quot;安装中...&quot;);</div><div class="line">      try &#123;</div><div class="line">         Thread.sleep(1000);</div><div class="line">      &#125; catch (InterruptedException e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">      System.out.println(&quot;插件1完成安装.&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 插件2</div><div class="line"> */</div><div class="line">class Plugin2 implements Runnable &#123;</div><div class="line"></div><div class="line">   @Override</div><div class="line">   public void run() &#123;</div><div class="line">      System.out.println(&quot;插件2开始安装.&quot;);</div><div class="line">      System.out.println(&quot;安装中...&quot;);</div><div class="line">      try &#123;</div><div class="line">         Thread.sleep(2000);</div><div class="line">      &#125; catch (InterruptedException e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">      System.out.println(&quot;插件2完成安装.&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">System.out.println(&quot;主线程开启...&quot;);</div><div class="line">Thread thread1 = new Thread(new Plugin1());</div><div class="line">Thread thread2 = new Thread(new Plugin2());</div><div class="line">try &#123;</div><div class="line">   thread1.start();   //开始插件1的安装</div><div class="line">   thread1.join();       //等插件1的安装线程结束</div><div class="line">   thread2.start();   //再开始插件2的安装</div><div class="line">   thread2.join();       //等插件2的安装线程结束,才能回到主线程</div><div class="line">&#125; catch (InterruptedException e) &#123;</div><div class="line">   e.printStackTrace();</div><div class="line">&#125;</div><div class="line">System.out.println(&quot;主线程结束，程序安装完成！&quot;);</div></pre></td></tr></table></figure>
<h2 id="优先级-Priority"><a href="#优先级-Priority" class="headerlink" title="优先级(Priority)"></a>优先级(Priority)</h2><p>线程优先级是指获得CPU资源的优先程序。优先级高的容易获得CPU资源，优先级底的较难获得CPU资源，表现出来的情况就是优先级越高执行的时间越多。</p>
<p>Java中通过getPriority和setPriority方法获取和设置线程的优先级。Thread类提供了三个表示优先级的常量：MIN_PRIORITY优先级最低，为1；NORM_PRIORITY是正常的优先级；为5，MAX_PRIORITY优先级最高，为10。我们创建线程对象后，如果不显示的设置优先级的话，默认为5。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 优先级</div><div class="line"> */</div><div class="line">class PriorityThread implements Runnable&#123;</div><div class="line">   @Override</div><div class="line">   public void run() &#123;</div><div class="line">      for (int i = 0; i &lt; 1000; i ++) &#123;</div><div class="line">         System.out.println(Thread.currentThread().getName() + &quot;: &quot; + i);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//创建三个线程</div><div class="line">Thread thread1 = new Thread(new PriorityThread(), &quot;Thread1&quot;);</div><div class="line">Thread thread2 = new Thread(new PriorityThread(), &quot;Thread2&quot;);</div><div class="line">Thread thread3 = new Thread(new PriorityThread(), &quot;Thread3&quot;);</div><div class="line">//设置优先级</div><div class="line">thread1.setPriority(Thread.MAX_PRIORITY);</div><div class="line">thread2.setPriority(8);</div><div class="line">//开始执行线程</div><div class="line">thread3.start();</div><div class="line">thread2.start();</div><div class="line">thread1.start();</div></pre></td></tr></table></figure>
<p>从结果中我们可以看到线程thread1明显比线程thread3执行的快。</p>
<h2 id="Java多线程中wait-notify-and-notifyAll的使用"><a href="#Java多线程中wait-notify-and-notifyAll的使用" class="headerlink" title="Java多线程中wait, notify and notifyAll的使用"></a>Java多线程中wait, notify and notifyAll的使用</h2><p>在Java的Object类中有三个final的方法允许线程之间进行资源对象锁的通信，他们分别是： wait(), notify() and notifyAll()。</p>
<p>调用这些方法的当前线程必须拥有此对象监视器，否则将会报java.lang.IllegalMonitorStateException exception异常。</p>
<h2 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h2><p>Object的wait方法有三个重载方法，其中一个方法wait() 是无限期(一直)等待，直到其它线程调用notify或notifyAll方法唤醒当前的线程；另外两个方法wait(long timeout) 和wait(long timeout, int nanos)允许传入 当前线程在被唤醒之前需要等待的时间，timeout为毫秒数，nanos为纳秒数。</p>
<h2 id="notify"><a href="#notify" class="headerlink" title="notify"></a>notify</h2><p>notify方法只唤醒一个等待（对象的）线程并使该线程开始执行。所以如果有多个线程等待一个对象，这个方法只会唤醒其中一个线程，选择哪个线程取决于操作系统对多线程管理的实现。</p>
<h2 id="notifyAll"><a href="#notifyAll" class="headerlink" title="notifyAll"></a>notifyAll</h2><p>notifyAll 会唤醒所有等待(对象的)线程，尽管哪一个线程将会第一个处理取决于操作系统的实现。</p>
<p>这些方法可以使用于“生产者-消费者”问题，消费者是在队列中等待对象的线程，生产者是在队列中释放对象并通知其他线程的线程。</p>
<p>让我们来看一个多线程作用于同一个对象的例子，我们使用wait, notify and notifyAll方法。</p>
<h2 id="通过实例来理解"><a href="#通过实例来理解" class="headerlink" title="通过实例来理解"></a>通过实例来理解</h2><p>Message</p>
<p>一个Java bean类，线程将会使用它并调用wait和notify方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.journaldev.concurrency;</div><div class="line"></div><div class="line">public class Message &#123;</div><div class="line">    private String msg;</div><div class="line"></div><div class="line">    public Message(String str)&#123;</div><div class="line">        this.msg=str;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getMsg() &#123;</div><div class="line">        return msg;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMsg(String str) &#123;</div><div class="line">        this.msg=str;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Waiter</p>
<p>一个Waiter类，等待其它的线程调用notify方法以唤醒线程完成处理。注意等待线程必须通过加synchronized同步锁拥有Message对象的监视器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package com.journaldev.concurrency;</div><div class="line"></div><div class="line">public class Waiter implements Runnable&#123;</div><div class="line"></div><div class="line">    private Message msg;</div><div class="line"></div><div class="line">    public Waiter(Message m)&#123;</div><div class="line">        this.msg=m;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        String name = Thread.currentThread().getName();</div><div class="line">        synchronized (msg) &#123;</div><div class="line">            try&#123;</div><div class="line">                System.out.println(name+&quot; waiting to get notified at time:&quot;+System.currentTimeMillis());</div><div class="line">                msg.wait();</div><div class="line">            &#125;catch(InterruptedException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(name+&quot; waiter thread got notified at time:&quot;+System.currentTimeMillis());</div><div class="line">            //process the message now</div><div class="line">            System.out.println(name+&quot; processed: &quot;+msg.getMsg());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Notifier</p>
<p>一个Notifier类，处理Message对象并调用notify方法唤醒等待Message对象的线程。注意synchronized代码块被用于持有Message对象的监视器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package com.journaldev.concurrency;</div><div class="line"></div><div class="line">public class Notifier implements Runnable &#123;</div><div class="line"></div><div class="line">    private Message msg;</div><div class="line"></div><div class="line">    public Notifier(Message msg) &#123;</div><div class="line">        this.msg = msg;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        String name = Thread.currentThread().getName();</div><div class="line">        System.out.println(name+&quot; started&quot;);</div><div class="line">        try &#123;</div><div class="line">            Thread.sleep(1000);</div><div class="line">            synchronized (msg) &#123;</div><div class="line">                msg.setMsg(name+&quot; Notifier work done&quot;);</div><div class="line">                msg.notify();</div><div class="line">                // msg.notifyAll();</div><div class="line">            &#125;</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.journaldev.concurrency;</div><div class="line"></div><div class="line">public class WaitNotifyTest &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Message msg = new Message(&quot;process it&quot;);</div><div class="line">        Waiter waiter = new Waiter(msg);</div><div class="line">        new Thread(waiter,&quot;waiter&quot;).start();</div><div class="line"></div><div class="line">        Waiter waiter1 = new Waiter(msg);</div><div class="line">        new Thread(waiter1, &quot;waiter1&quot;).start();</div><div class="line"></div><div class="line">        Notifier notifier = new Notifier(msg);</div><div class="line">        new Thread(notifier, &quot;notifier&quot;).start();</div><div class="line">        System.out.println(&quot;All the threads are started&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们调用以上的代码时可以看到以下的输出，但并没有结束(完成)，因为有两个线程等待同一个Message对象，但notify()方法只能唤醒一个线程，另一个线程仍然在等待被唤醒。</p>
<p>notify()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">waiter waiting to get notified at time:1356318734009</div><div class="line">waiter1 waiting to get notified at time:1356318734010</div><div class="line">All the threads are started</div><div class="line">notifier started</div><div class="line">waiter waiter thread got notified at time:1356318735011</div><div class="line">waiter processed: notifier Notifying work done</div><div class="line">如果我们注释掉Notifier类中的notify() 方法的调用，并打开notifyAll() 方法的调用，将会有以下的输出信息。</div></pre></td></tr></table></figure></p>
<p>notifyAll()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">waiter waiting to get notified at time:1356318917118</div><div class="line">waiter1 waiting to get notified at time:1356318917118</div><div class="line">All the threads are started</div><div class="line">notifier started</div><div class="line">waiter1 waiter thread got notified at time:1356318918120</div><div class="line">waiter1 processed: notifier Notifying work done</div><div class="line">waiter waiter thread got notified at time:1356318918120</div><div class="line">waiter processed: notifier Notifying work done</div></pre></td></tr></table></figure></p>
<p>一旦notifyAll()方法唤醒所有的Waiter线程，程序将会执行完成并退出。</p>
<p>原文地址：<a href="http://www.journaldev.com/1037/java-thread-wait-notify-and-notifyall-example" target="_blank" rel="external">http://www.journaldev.com/1037/java-thread-wait-notify-and-notifyall-example</a></p>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://blog.csdn.net/luoweifu/article/details/46595285" target="_blank" rel="external">编程思想之多线程与多进程(1)——以操作系统的角度述说线程与进程</a><br><a href="http://blog.csdn.net/luoweifu/article/details/46701167" target="_blank" rel="external">编程思想之多线程与多进程(2)——线程优先级与线程安全</a><br><a href="http://blog.csdn.net/luoweifu/article/details/46673975" target="_blank" rel="external">编程思想之多线程与多进程(3)——Java中的多线程</a><br><a href="http://blog.csdn.net/luoweifu/article/details/46835437" target="_blank" rel="external">编程思想之多线程与多进程(4)——C++中的多线程</a><br><a href="http://blog.csdn.net/luoweifu/article/details/46664809" target="_blank" rel="external">Java多线程中wait, notify and notifyAll的使用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: &lt;a href=&quot;http://blog.csdn.net/luoweifu/article/details/46595285&quot;&gt;luoweifu&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是线程&quot;&gt;&lt;a href=&quot;#什么是线程&quot; class=&quot;headerlink&quot; title=&quot;什么是线程&quot;&gt;&lt;/a&gt;什么是线程&lt;/h2&gt;&lt;p&gt;什么是线程？线程与进程与有什么关系？这是一个非常抽象的问题，也是一个特别广的话题，涉及到非常多的知识。我不能确保能把它讲的话，也不能确保讲的内容全部都正确。即使这样，我也希望尽可能地把他讲通俗一点，讲的明白一点，因为这是个一直困扰我很久的，扑朔迷离的知识领域，希望通过我的理解揭开它一层一层神秘的面纱。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="Multithread" scheme="http://ipcreator.me/tags/Multithread/"/>
    
      <category term="Multiprocess" scheme="http://ipcreator.me/tags/Multiprocess/"/>
    
  </entry>
  
  <entry>
    <title>Ordinary Life</title>
    <link href="http://ipcreator.me/2017/03/12/MyView/Movie/ordinary-life/"/>
    <id>http://ipcreator.me/2017/03/12/MyView/Movie/ordinary-life/</id>
    <published>2017-03-12T10:58:06.000Z</published>
    <updated>2017-03-28T11:47:28.733Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>Life</strong></p>
</blockquote>
<p><img src="https://img1.doubanio.com/view/photo/photo/public/p2232185147.webp" alt=""></p>
<p>这个故事发生在20世纪70年代，文革的余波仍在社会各个角落震荡，无情摧毁着每个人的生活。出身贫寒的农家子弟孙少平（袁弘 饰）有着极强的自尊心，即使在好友田润生（尹智玄饰）面前也不愿展露寒酸的一面。他和地主家的女儿郝红梅（汪芦云 饰）虽然身份有着天壤之别，类似的心境则让他们彼此相知。哥哥孙少安（王雷 饰）是家里的脊梁骨，父亲的意外去世让他必须选择更加坚强，他与润生的姐姐田润叶（佟丽娅 饰）青梅竹马，互有好感，怎奈那时的爱情身不由己，有情人儿往往无法走到一起。两兄弟以各自的方式闯荡生活，经历着爱情、人生的嬗变……<br>　　本片根据路遥的同名小说改编。</p>
<a id="more"></a>
<p>第28届中国电视金鹰奖  (2016)<br>观众最喜爱的电视剧男演员奖 王雷<br>观众最喜爱的电视剧女演员奖 佟丽娅</p>
<p><img src="https://img3.doubanio.com/view/photo/photo/public/p2231528532.jpg" alt=""><br>少安：还是那句话，人，不会总是穷困一辈子。</p>
<p><img src="https://img3.doubanio.com/view/photo/photo/public/p2231528523.jpg" alt=""><br>少平：我是一个平凡的人，但平凡的人可以做到不平凡。</p>
<p><img src="https://img3.doubanio.com/view/photo/photo/public/p2231528540.jpg" alt=""><br>润叶：少平哥，你把我想和自己心爱的人一块生活的梦想彻底破灭了。</p>
<p><img src="https://img3.doubanio.com/view/photo/raw/public/p2231528593.jpg" alt=""><br>秀莲：少安，以后，你笑，我跟着你笑；你流啥眼泪，我都替你抹……</p>
<p><img src="https://img3.doubanio.com/view/photo/photo/public/p2231528553.jpg" alt=""><br>晚霞：只有永不遏制的奋斗，才能使青春之花即使是凋谢，也是壮丽地凋谢。</p>
<p><img src="https://img1.doubanio.com/view/photo/photo/public/p2225355909.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Life&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img1.doubanio.com/view/photo/photo/public/p2232185147.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个故事发生在20世纪70年代，文革的余波仍在社会各个角落震荡，无情摧毁着每个人的生活。出身贫寒的农家子弟孙少平（袁弘 饰）有着极强的自尊心，即使在好友田润生（尹智玄饰）面前也不愿展露寒酸的一面。他和地主家的女儿郝红梅（汪芦云 饰）虽然身份有着天壤之别，类似的心境则让他们彼此相知。哥哥孙少安（王雷 饰）是家里的脊梁骨，父亲的意外去世让他必须选择更加坚强，他与润生的姐姐田润叶（佟丽娅 饰）青梅竹马，互有好感，怎奈那时的爱情身不由己，有情人儿往往无法走到一起。两兄弟以各自的方式闯荡生活，经历着爱情、人生的嬗变……&lt;br&gt;　　本片根据路遥的同名小说改编。&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Movie" scheme="http://ipcreator.me/tags/Movie/"/>
    
  </entry>
  
  <entry>
    <title>My Road of learning Android</title>
    <link href="http://ipcreator.me/2017/03/12/Program/Android/best-practice-of-android-dev/"/>
    <id>http://ipcreator.me/2017/03/12/Program/Android/best-practice-of-android-dev/</id>
    <published>2017-03-12T01:23:06.000Z</published>
    <updated>2017-03-27T10:04:47.031Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/road.jpg" alt=""></p>
<p> 遇到一个问题，搞清楚是什么（What）？为什么（Why）？怎么做（How）？，知其然知其所以然，不知不觉，量变到质变，熟能生出百巧来…</p>
  <a id="more"></a>
<h2 id="避免程序崩溃的常见方法"><a href="#避免程序崩溃的常见方法" class="headerlink" title="避免程序崩溃的常见方法"></a>避免程序崩溃的常见方法</h2><p>  0、四大组件要登记（尤其移植第三方时要注意）<br>  1、引用/销毁对象前，判空<br>  2、合理使用Try/Catch语句<br>  3、…</p>
<h2 id="为什么系列"><a href="#为什么系列" class="headerlink" title="为什么系列"></a>为什么系列</h2><p>  1、为什么要引入内部类？<br>  2、为什么要引入内部匿名类？<br>  3、为什么要引入static变量、方法和类？<br>  4、为什么要新增线程？<br>  5、如何确保多线程安全访问？<br>  6、如何检测及分析内存泄漏？常用工具有哪些？<br>  7、引发内存泄漏的常见错误模式有哪些？如何避免又如何解决？<br>  8、为什么要引入接口？什么是面向接口编程？<br>  9、API接口文档及示范案例学习了没有？为什么不学？<br>        不了解就用，出问题正常，不出问题才怪<br>  10、事前不想清楚，不架构好，后面就等着救火打补丁<br>  11、程序员如何进入心流，有想法有技能，每日能有进展，看得见摸的着<br>  12、看见好代码就手痒，看到好软件/功能/服务，就琢磨着如何实现？<br>  13、利用GitHub，及时备份，大胆尝试<br>  14、高手之路，就是通过模仿、分析、解决一个个问题来练就<br>  15、先易后难，循序渐进，有时候，该突击就突击<br>  16、面向需求找方案，面对问题找答案，效率要好过按部就班地逐章阅读…<br>  17、构建自己的代码库、经验案例库、文档库、工具库，武器越多，办法越多<br>  18、基础越牢，思路越广，方案越好<br>  19、……</p>
<p>  这个单词/句子是什么意思？<br>  为什么取这个名字，内涵是什么？<br>  静态解读<br>  动态调试<br>  日志输出<br>  别人的分析<br>  自己的使用，用起来…学以致用，边学边用</p>
<h2 id="容易导致挫败感的几个原因"><a href="#容易导致挫败感的几个原因" class="headerlink" title="容易导致挫败感的几个原因"></a>容易导致挫败感的几个原因</h2><p>  A、一上手就是较大型项目，陌生无知的知识/技能点太多；<br>  B、求快，有紧迫时间进度要求<br>  C、求好，一开始就要求完美</p>
<h2 id="破解方案"><a href="#破解方案" class="headerlink" title="破解方案"></a>破解方案</h2><p>  A、循序渐进，把握好节奏感，创造成就感<br>  B、检索、复用、请教、协作、沟通<br>  C、一步一步来，水到渠成，功到自然成</p>
<p>  找成就感的一些示例：小型、有用、有趣的</p>
<p>  壁纸、电子书、词典、拼图、五子棋、计算器、BMI、联系人、相机、音乐播放器…</p>
<p>  更新补充到自己的技术体系中<br>  同步到自己的blog中去</p>
<p>  他是如此相信自己，以至于别人不得不相信他——艾伦艾弗森</p>
<p>  大脑中的否定消极的情绪，就如肚子里的大便，一定要及时清理出去，否则只会有百害而无一益。——IPCreator</p>
<p>  <strong>有这样的决心和恒心，何愁事情不成</strong><br>  <strong>功不唐捐，天道酬勤</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/road.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 遇到一个问题，搞清楚是什么（What）？为什么（Why）？怎么做（How）？，知其然知其所以然，不知不觉，量变到质变，熟能生出百巧来…&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Android" scheme="http://ipcreator.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Analyses of Memory Leak</title>
    <link href="http://ipcreator.me/2017/03/12/Program/Android/resolve-memory-leak/"/>
    <id>http://ipcreator.me/2017/03/12/Program/Android/resolve-memory-leak/</id>
    <published>2017-03-11T23:07:06.000Z</published>
    <updated>2017-03-27T08:05:22.113Z</updated>
    
    <content type="html"><![CDATA[<p>测试工具：LeakCanary</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">debugCompile &apos;com.squareup.leakcanary:leakcanary-android:1.5&apos;</div><div class="line">releaseCompile &apos;com.squareup.leakcanary:leakcanary-android-no-op:1.5&apos;</div></pre></td></tr></table></figure>
<p>内存泄漏的主要问题可以分为以下几种类型：</p>
<ol>
<li>静态变量引起的内存泄漏</li>
<li>非静态内部类引起的内存泄漏</li>
<li><p>资源未关闭引起的内存泄漏</p>
<a id="more"></a>
<h2 id="静态变量引起的内存泄漏"><a href="#静态变量引起的内存泄漏" class="headerlink" title="静态变量引起的内存泄漏"></a>静态变量引起的内存泄漏</h2><p>在Java中静态变量的生命周期是在类加载时开始，类卸载时结束。换句话说，在Android中其生命周期是在进程启动时开始，进程死亡时结束。所以在程序的运行期间，如果进程没有被杀死，静态变量就会一直存在，不会被回收掉。<strong>如果静态变量强引用了某个Activity中变量，那么这个Activity就同样也不会被释放,即便是该Activity执行了onDestroy(不要将执行onDestroy和被回收划等号)。</strong> 这类问题的解决方案为：1.寻找与该静态变量生命周期差不多的替代对象。2.若找不到，将强引用方式改成弱引用。</p>
<p><strong>单例引起的Context内存泄漏</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> public class IMManager &#123;</div><div class="line">    private Context context;</div><div class="line">    private static IMManager mInstance;</div><div class="line"></div><div class="line">    public static IMManager getInstance(Context context) &#123;</div><div class="line">        if (mInstance == null) &#123;</div><div class="line">            synchronized (IMManager.class) &#123;</div><div class="line">                if (mInstance == null)</div><div class="line">                    mInstance = new IMManager(context);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return mInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private IMManager(Context context) &#123;</div><div class="line">        this.context = context;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>当调用getInstance时，如果传入的context是Activity的context。只要这个单例没有被释放，这个Activity也不会被释放。</strong></p>
<p><strong>解决方案 </strong><br>传入Application的context,因为Application的context的生命周期比Activity长，可以理解为Application的context与单例的生命周期一样长，传入它是最合适的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class IMManager &#123;</div><div class="line">    private Context context;</div><div class="line">    private static IMManager mInstance;</div><div class="line"></div><div class="line">    public static IMManager getInstance(Context context) &#123;</div><div class="line">        if (mInstance == null) &#123;</div><div class="line">            synchronized (IMManager.class) &#123;</div><div class="line">                if (mInstance == null)</div><div class="line">                    //将传入的context转换成Application的context</div><div class="line">                    **mInstance = new IMManager(context.getApplicationContext());**</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return mInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private IMManager(Context context) &#123;</div><div class="line">        this.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="非静态内部类引起的内存泄漏"><a href="#非静态内部类引起的内存泄漏" class="headerlink" title="非静态内部类引起的内存泄漏"></a>非静态内部类引起的内存泄漏</h2><p><strong>在java中，创建一个非静态的内部类实例，就会引用它的外围实例。</strong>如果这个非静态内部类实例做了一些耗时的操作，就会造成外围对象不会被回收，从而导致内存泄漏。这类问题的解决方案为：1.将内部类变成静态内部类 2.如果有强引用Activity中的属性，则将该属性的引用方式改为弱引用。3.在业务允许的情况下，当Activity执行onDestory时，结束这些耗时任务。</p>
<p><strong>内部线程造成的内存泄漏</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class LeakAty extends Activity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.aty_leak);</div><div class="line">        test();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void test() &#123;</div><div class="line">        //匿名内部类会引用其外围实例LeakAty.this,所以会导致内存泄漏</div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                while (true) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        Thread.sleep(1000);</div><div class="line">                    &#125; catch (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>解决方案 </strong><br>将非静态匿名内部类修改为静态匿名内部类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class LeakAty extends Activity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.aty_leak);</div><div class="line">        test();</div><div class="line">    &#125;</div><div class="line">    //**加上static，变成静态匿名内部类**</div><div class="line">    public static void test() &#123;</div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                while (true) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        Thread.sleep(1000);</div><div class="line">                    &#125; catch (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Handler引起的内存泄漏"><a href="#Handler引起的内存泄漏" class="headerlink" title="Handler引起的内存泄漏"></a>Handler引起的内存泄漏</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class LeakAty extends Activity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.aty_leak);</div><div class="line">        fetchData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Handler mHandler = new Handler() &#123;</div><div class="line">        public void handleMessage(android.os.Message msg) &#123;</div><div class="line">            switch (msg.what) &#123;</div><div class="line">            case 0:</div><div class="line">                // 刷新数据</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    private void fetchData() &#123;</div><div class="line">        //获取数据</div><div class="line">        mHandler.sendEmptyMessage(0);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>mHandler 为匿名内部类实例，会引用外围对象LeakAty.this,如果该Handler在Activity退出时依然还有消息需要处理，那么这个Activity就不会被回收。</strong></p>
<p><strong>解决方案</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">public class LeakAty extends Activity &#123;</div><div class="line">    private TextView tvResult;</div><div class="line">    private MyHandler handler;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.aty_leak);</div><div class="line">        tvResult = (TextView) findViewById(R.id.tvResult);</div><div class="line">        handler = new MyHandler(this);</div><div class="line">        fetchData();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    //第一步，将Handler改成静态内部类。</div><div class="line">    private static class MyHandler extends Handler &#123;</div><div class="line">        //第二步，将需要引用Activity的地方，改成弱引用。</div><div class="line">        private WeakReference&lt;LeakAty&gt; atyInstance;</div><div class="line">        public MyHandler(LeakAty aty) &#123;</div><div class="line">            this.atyInstance = new WeakReference&lt;LeakAty&gt;(aty);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void handleMessage(Message msg) &#123;</div><div class="line">            super.handleMessage(msg);</div><div class="line">            LeakAty aty = atyInstance == null ? null : atyInstance.get();</div><div class="line">            //如果Activity被释放回收了，则不处理这些消息</div><div class="line">            if (aty == null||aty.isFinishing()) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            aty.tvResult.setText(&quot;fetch data success&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void fetchData() &#123;</div><div class="line">        // 获取数据</div><div class="line">        handler.sendEmptyMessage(0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        //第三步，在Activity退出的时候移除回调</div><div class="line">        super.onDestroy();</div><div class="line">        handler.removeCallbacksAndMessages(null);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="资源未关闭引起的内存泄漏"><a href="#资源未关闭引起的内存泄漏" class="headerlink" title="资源未关闭引起的内存泄漏"></a>资源未关闭引起的内存泄漏</h2><p>当使用了BraodcastReceiver、Cursor、Bitmap等资源时，当不需要使用时，需要及时释放掉，若没有释放，则会引起内存泄漏。</p>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p> <a href="http://blog.csdn.net/linghu_java/article/details/39480761" target="_blank" rel="external">Android进程的内存管理分析</a><br> <a href="http://blog.csdn.net/huang_cai_yuan/article/details/50375019" target="_blank" rel="external"> Android内存泄漏终极解决篇（上）</a><br> <a href="http://blog.csdn.net/Huang_Cai_Yuan/article/details/50443385" target="_blank" rel="external"> Android内存泄漏终极解决篇（下）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试工具：LeakCanary&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;debugCompile &amp;apos;com.squareup.leakcanary:leakcanary-android:1.5&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;releaseCompile &amp;apos;com.squareup.leakcanary:leakcanary-android-no-op:1.5&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;内存泄漏的主要问题可以分为以下几种类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;静态变量引起的内存泄漏&lt;/li&gt;
&lt;li&gt;非静态内部类引起的内存泄漏&lt;/li&gt;
&lt;li&gt;&lt;p&gt;资源未关闭引起的内存泄漏&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Memory Leak" scheme="http://ipcreator.me/tags/Memory-Leak/"/>
    
  </entry>
  
  <entry>
    <title>Development of BMI</title>
    <link href="http://ipcreator.me/2017/03/11/Program/Android/MyApp/bmi-app/"/>
    <id>http://ipcreator.me/2017/03/11/Program/Android/MyApp/bmi-app/</id>
    <published>2017-03-11T08:07:06.000Z</published>
    <updated>2017-03-27T09:00:16.904Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/BmiUILayout.PNG" alt=""></p>
<p><strong>需求</strong><br>计算BMI指数，给出结果及建议，支持网络检索</p>
<p><strong>技术要点</strong><br>1、基于ConstraintLayout可视化设计UI界面<br>2、SeekBar、FloatingActionButton、WebView控件的使用<br>3、注意合理使用float数据类型<br>4、逻辑控制，支持数据联动和动态显示隐藏效果<br>5、长文本字符串的定义显示及相关注意事项</p>
 <a id="more"></a>
<p>效果演示图一：<br><img src="http://om8nmvpn9.bkt.clouddn.com/first.png" alt=""><br>效果演示图二：<br><img src="http://om8nmvpn9.bkt.clouddn.com/searchweb.png" alt=""><br>效果演示图三：<br><img src="http://om8nmvpn9.bkt.clouddn.com/dynamic.png" alt=""></p>
<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><p>1、WebView和TextView控件动态显示和隐藏<br>在可视化设计时，先设计好一个，然后将其visibility属性设为GONE，之后再设计另一个；</p>
<p>2、在定好大致框架后，善于利用ConstraintLayout的Inference功能，减少工作量的同时，避免所见非所得情况的发生；</p>
<p>3、在定义字符串文本时，引入了%符号，需要设置相应的属性或者“用%%来表示1个%，和转意符号的用法相同；或者%前加转义\”，否则编译报错。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;string name=&quot;bmi_fat_hint&quot; **formatted=&quot;false&quot;**&gt;</div><div class="line">        &quot;\n\n\n过重：25-28\n\n&quot;</div><div class="line">        &quot;多动，选择有氧运动，有氧运动，是指那些以增强人体吸入、输送氧气以及与使用氧气能力为目的的耐久性运动。\n\n&quot;</div><div class="line">        &quot;有氧锻炼中，心率要达到“有效心率阈值”，并在这个区域保持20分钟以上时，才是最适合消耗脂肪的运动方式。\n\n&quot;</div><div class="line">        &quot;有效心率是指锻炼者达到本人最高心率(最大心率=220－年龄)60%-85%的心率范围。如一个40岁的人其最高心率为220－40=180，其有氧心率阈值为108-153次/分钟。\n\n&quot;</div><div class="line">        &quot;建议进行有氧锻炼时每周进行5次，每次20-30分钟。练习的次数更多时，其效果并不十分明显。\n\n&quot;</div><div class="line">        &quot;有氧运动的方式包括跑步、快步走、有节奏地骑自行车、游泳、爬山、上楼梯、做健身操、扭秧歌、跳健身舞等较长时间的耐力性运动。&quot;</div><div class="line">    &lt;/string&gt;</div></pre></td></tr></table></figure>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://baike.baidu.com/link?url=0ygiXzU86jP3aeueTP6sc0CowQtP_X_rSRbm-c-cdiE0I3M32x-uSeJZv-wUZr9rSVtCT05cIPYmb68XjPXCn5uk1n-pgk7KgJuPfbscKRK" target="_blank" rel="external">BMI指数</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/53122387" target="_blank" rel="external">Android新特性介绍，ConstraintLayout完全解析</a><br><a href="http://blog.csdn.net/jiayou8809/article/details/7394784" target="_blank" rel="external">Android工程编译出现Multiple substitutions specified in non-positional format错误的分析</a><br><a href="http://blog.csdn.net/ganggang1st/article/details/6804086" target="_blank" rel="external">strings.xml文件中提供占位符来格式化数据</a><br><a href="http://www.myexception.cn/android/1995688.html" target="_blank" rel="external">android自定义Seekbar您还将你的拖动数值显示在旁边固定的TextView上么</a><br><a href="http://www.cnblogs.com/xmu-chenming/p/5790621.html" target="_blank" rel="external">【Android学习】android布局中几个距离单位的区别：px、dp、sp</a><br><a href="https://zhidao.baidu.com/question/264201411035450085.html" target="_blank" rel="external">Android的px，dp和sp等单位的区别详解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/BmiUILayout.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;&lt;br&gt;计算BMI指数，给出结果及建议，支持网络检索&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术要点&lt;/strong&gt;&lt;br&gt;1、基于ConstraintLayout可视化设计UI界面&lt;br&gt;2、SeekBar、FloatingActionButton、WebView控件的使用&lt;br&gt;3、注意合理使用float数据类型&lt;br&gt;4、逻辑控制，支持数据联动和动态显示隐藏效果&lt;br&gt;5、长文本字符串的定义显示及相关注意事项&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Application" scheme="http://ipcreator.me/tags/Application/"/>
    
      <category term="BMI" scheme="http://ipcreator.me/tags/BMI/"/>
    
  </entry>
  
  <entry>
    <title>Things about JVM Memory</title>
    <link href="http://ipcreator.me/2017/03/10/Program/Java/ram-of-java/"/>
    <id>http://ipcreator.me/2017/03/10/Program/Java/ram-of-java/</id>
    <published>2017-03-10T03:19:06.000Z</published>
    <updated>2017-03-27T09:58:41.975Z</updated>
    
    <content type="html"><![CDATA[<p>原文出处： <a href="http://www.jianshu.com/p/eaef248b5a2c" target="_blank" rel="external">占小狼</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于C语言开发的程序员来说，在内存管理方面，必须负责每一个对象的生命周期，从有到无。<br>对于Java程序员你来说，在虚拟机内存管理的帮助下，不需要为每个new对象都匹配free操作，内存泄露和内存溢出等问题也不太容易出现，不过也正是因为把内存管理交给了虚拟机，一旦运行中的程序出现了内存泄露问题，给排查过程造成很大困难。所以只有理解了Java虚拟机的运行机制，才能够运筹帷幄于各种代码。本文以HotSpot为例说说虚拟机的那些事。</p>
<p>JAVA虚拟机把管理的内存划分为几个不同的数据区。<br><img src="http://upload-images.jianshu.io/upload_images/2184951-75502fd0f9001ece.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
 <a id="more"></a>
<p>Java堆<br>Java堆是被所有线程共享的一块内存区域，主要用于存放对象实例，Java虚拟机规范中有这样一段描述：所有的对象实例和数据都要在堆上进行分配。为对象分配内存就是把一块大小确定的内存从堆内存中划分出来，通常有两种方法实现：</p>
<p>1 、指针碰撞法<br>假设Java堆中内存时完整的，已分配的内存和空闲内存分别在不同的一侧，通过一个指针作为分界点，需要分配内存时，仅仅需要把指针往空闲的一端移动与对象大小相等的距离。</p>
<p>2、空闲列表法<br>事实上，Java堆的内存并不是完整的，已分配的内存和空闲内存相互交错，JVM通过维护一个列表，记录可用的内存块信息，当分配操作发生时，从列表中找到一个足够大的内存块分配给对象实例，并更新列表上的记录。</p>
<p>对象创建是一个非常频繁的行为，进行堆内存分配时还需要考虑多线程并发问题，可能出现正在给对象A分配内存，指针或记录还未更新，对象B又同时分配到原来的内存，解决这个问题有两种方案：<br>1、采用CAS保证数据更新操作的原子性；<br>2、把内存分配的行为按照线程进行划分，在不同的空间中进行，每个线程在Java堆中预先分配一个内存块，称为本地线程分配缓冲（Thread Local Allocation Buffer, TLAB）;</p>
<p>Java栈<br>Java栈是线程私有的，每个线程对应一个Java栈，每个线程在执行一个方法时会创建一个对应的栈帧（Stack Frame），栈帧负责存储局部变量变量表、操作数栈、动态链接和方法返回地址等信息。每个方法的调用过程，相当于栈帧在Java栈的入栈和出栈过程。<br><img src="http://upload-images.jianshu.io/upload_images/2184951-a72a68ca4967fdd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>局部变量表 用于存放方法参数和方法内部定义的局部变量，其大小在代码编译期间已经确定，在方法运行期间不会改变。局部变量表以变量槽（Slot）为最小存储单位，每个Slot能够存放一个boolean、byte、char、shot、int、float、reference和returnAddress类型的32位数据，对于64位的数据类型long和double，虚拟机会以高位对齐的方式为其分配两个连续的Slot空间。</p>
<p>在方法执行时，如果是实例方法，即非static方法，局部变量表中第0位Slot默认存放对象实例的引用，在方法中可以通过关键字 this 进行访问，方法参数按照参数列表顺序，从第1位Slot开始分配，方法内部变量则按照定义顺序进行分配其余的Slot。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class test &#123;</div><div class="line">    public int calc(int a, int b, String operation) &#123;</div><div class="line">        operation = &quot;+&quot;;</div><div class="line">        return  a + b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void main(String args[]) &#123;</div><div class="line">        calc(100, 200, &quot;+&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对应的局部变量表如下：<br><img src="http://upload-images.jianshu.io/upload_images/2184951-de41c8e6b7e7a36d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>使用 javap -c 命令查看方法calc的字节码<br><img src="http://upload-images.jianshu.io/upload_images/2184951-7b275068f0b4f36f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>其中iload_1和iload_2分别从局部变量表中的第1位和第2位中加载数据。</p>
<p>方法区<br>方法区和Java堆一样，是所有线程共享的内存区域，用于存放已被虚拟机加载的类信息、常量、静态变量和即时编译器编译后的代码等数据。<br>运行时常量池是方法区的一部分，用于存放编译期间生成的各种字面常量和符号引用。</p>
<p>指令计数器<br>指令计数器是线程私有的，每个线程都有独立的指令计数器，计数器记录着虚拟机正在执行的字节码指令的地址，分支、循环、跳转、异常处理和线程恢复等操作都依赖这个计数器完成。如果线程执行的是native方法，这个计数器则为空。</p>
<p>对象的内存布局<br>对象在内存中布局可以分成三块区域：对象头、实例数据和对齐填充。<br>1、对象头<br>对象头包括两部分信息：运行时数据和类型指针，如果对象是一个数组，还需要一块用于记录数组长度的数据。</p>
<p>1.1、运行时数据包括哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向锁ID和偏向时间戳等，这部分数据在32位和64位虚拟机中的长度分别为32bit和64bit，官方称为”Mark Word”。Mark Word被设计成非固定的数据结构，以实现在有限空间内保存尽可能多的数据。<br>32位的虚拟机中，对象未被锁定的状态下，Mark Word的32bit中25bit存储对象的HashCode、4bit存储对象分代年龄、2bit存储锁标志位、1bit固定为0，具体如下：<br><img src="http://upload-images.jianshu.io/upload_images/2184951-5718ab305b056d54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>其它状态（轻量级锁定、重量级锁定、GC锁定、可偏向锁）下Mark Word的存储内容如下：<br><img src="http://upload-images.jianshu.io/upload_images/2184951-3e3fb6dc3ec8253c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>1.2、对象头的类型指针指向该对象的类元数据，虚拟机通过这个指针可以确定该对象是哪个类的实例。</p>
<p>2、实例数据<br>实例数据就是在程序代码中所定义的各种类型的字段，包括从父类继承的，这部分的存储顺序会受到虚拟机分配策略和字段在源码中定义顺序的影响。<br>3、对齐填充<br>由于HotSpot的自动内存管理要求对象的起始地址必须是8字节的整数倍，即对象的大小必须是8字节的整数倍，对象头的数据正好是8的整数倍，所以当实例数据不够8字节整数倍时，需要通过对齐填充进行补全。<br> <!-- more --></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文出处： &lt;a href=&quot;http://www.jianshu.com/p/eaef248b5a2c&quot;&gt;占小狼&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;对于C语言开发的程序员来说，在内存管理方面，必须负责每一个对象的生命周期，从有到无。&lt;br&gt;对于Java程序员你来说，在虚拟机内存管理的帮助下，不需要为每个new对象都匹配free操作，内存泄露和内存溢出等问题也不太容易出现，不过也正是因为把内存管理交给了虚拟机，一旦运行中的程序出现了内存泄露问题，给排查过程造成很大困难。所以只有理解了Java虚拟机的运行机制，才能够运筹帷幄于各种代码。本文以HotSpot为例说说虚拟机的那些事。&lt;/p&gt;
&lt;p&gt;JAVA虚拟机把管理的内存划分为几个不同的数据区。&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2184951-75502fd0f9001ece.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="JVM" scheme="http://ipcreator.me/tags/JVM/"/>
    
      <category term="Memory" scheme="http://ipcreator.me/tags/Memory/"/>
    
  </entry>
  
  <entry>
    <title>The Summary of Java I/O</title>
    <link href="http://ipcreator.me/2017/03/10/Program/Java/anatomy-of-java-io/"/>
    <id>http://ipcreator.me/2017/03/10/Program/Java/anatomy-of-java-io/</id>
    <published>2017-03-10T03:06:06.000Z</published>
    <updated>2017-03-27T09:58:42.012Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1752522-adc85fb95f884363.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>出处：<a href="http://linbingdong.com/" target="_blank" rel="external">LBD’s Blog</a></p>
<p>Java中I/O操作主要是指使用Java进行输入，输出操作. Java所有的I/O机制都是基于数据流进行输入输出，这些数据流表示了字符或者字节数据的流动序列。</p>
<p>数据流是一串连续不断的数据的集合，就象水管里的水流，在水管的一端一点一点地供水，而在水管的另一端看到的是一股连续不断的水流。数据写入程序可以是一段、一段地向数据流管道中写入数据，这些数据段会按先后顺序形成一个长的数据流。对数据读取程序来说，看不到数据流在写入时的分段情况，每次可以读取其中的任意长度的数据，但只能先读取前面的数据后，再读取后面的数据（不能随机读取）。不管写入时是将数据分多次写入，还是作为一个整体一次写入，读取时的效果都是完全一样的。</p>
<p>简而言之：数据流是一组有序，有起点和终点的字节的数据序列。包括输入流和输出流。</p>
<p>当程序需要读取数据的时候，就会建立一个通向数据源的连接，这个数据源可以是文件，内存，或是网络连接。类似的，当程序需要写入数据的时候，就会建立一个通向目的地的连接。</p>
<p>数据流分类：</p>
<p>流序列中的数据既可以是未经加工的原始二进制数据，也可以是经一定编码处理后符合某种格式规定的特定数据。因此Java中的流分为两种： 1) 字节流：数据流中最小的数据单元是字节 2) 字符流：数据流中最小的数据单元是字符， Java中的字符是Unicode编码，一个字符占用两个字节。</p>
 <a id="more"></a>
<p> 概览<br>Java.io包中最重要的就是5个类和一个接口。5个类指的是File、OutputStream、InputStream、Writer、Reader；一个接口指的是Serializable。掌握了这些就掌握了Java I/O的精髓了。</p>
<p>Java I/O主要包括如下3层次：</p>
<p>流式部分——最主要的部分。如：OutputStream、InputStream、Writer、Reader等<br>非流式部分——如：File类、RandomAccessFile类和FileDescriptor等类<br>其他——文件读取部分的与安全相关的类，如：SerializablePermission类，以及与本地操作系统相关的文件系统的类，如：FileSystem类和Win32FileSystem类和WinNTFileSystem类。<br>主要类如下：</p>
<p>File（文件特征与管理）：用于文件或者目录的描述信息，例如生成新目录，修改文件名，删除文件，判断文件所在路径等。<br>InputStream（字节流，二进制格式操作）：抽象类，基于字节的输入操作，是所有输入流的父类。定义了所有输入流都具有的共同特征。<br>OutputStream（字节流，二进制格式操作）：抽象类。基于字节的输出操作。是所有输出流的父类。定义了所有输出流都具有的共同特征。<br>Reader（字符流，文本格式操作）：抽象类，基于字符的输入操作。<br>Writer（字符流，文本格式操作）：抽象类，基于字符的输出操作。<br>RandomAccessFile（随机文件操作）：它的功能丰富，可以从文件的任意位置进行存取（输入输出）操作。<br><img src="http://upload-images.jianshu.io/upload_images/1752522-adc85fb95f884363.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>I/O流<br>java.io包里有4个基本类：InputStream、OutputStream及Reader、Writer类，它们分别处理字节流和字符流。</p>
<p>其他各种各样的流都是由这4个派生出来的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-ee60b12bd1f9a3dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>按来源/去向分类：</p>
<p>File（文件）： FileInputStream, FileOutputStream, FileReader, FileWriter<br>byte[]：ByteArrayInputStream, ByteArrayOutputStream<br>Char[]: CharArrayReader, CharArrayWriter<br>String: StringBufferInputStream, StringReader, StringWriter<br>网络数据流：InputStream, OutputStream, Reader, Writer<br>InputStream<br>InputStream 为字节输入流，它本身为一个抽象类，必须依靠其子类实现各种功能，此抽象类是表示字节输入流的所有类的超类。 继承自InputStream 的流都是向程序中输入数据的，且数据单位为字节（8bit）；</p>
<p>InputStream是输入字节数据用的类，所以InputStream类提供了3种重载的read方法.Inputstream类中的常用方法：</p>
<p>public abstract int read( )：读取一个byte的数据，返回值是高位补0的int类型值。若返回值=-1说明没有读取到任何字节读取工作结束。<br>public int read(byte b[ ])：读取b.length个字节的数据放到b数组中。返回值是读取的字节数。该方法实际上是调用下一个方法实现的<br>public int read(byte b[ ], int off, int len)：从输入流中最多读取len个字节的数据，存放到偏移量为off的b数组中。<br>public int available( )：返回输入流中可以读取的字节数。注意：若输入阻塞，当前线程将被挂起，如果InputStream对象调用这个方法的话，它只会返回0，这个方法必须由继承InputStream类的子类对象调用才有用，<br>public long skip(long n)：忽略输入流中的n个字节，返回值是实际忽略的字节数, 跳过一些字节来读取<br>public int close( ) ：使用完后，必须对我们打开的流进行关闭。<br>来看看几种不同的InputStream：</p>
<p>FileInputStream把一个文件作为InputStream，实现对文件的读取操作<br>ByteArrayInputStream：把内存中的一个缓冲区作为InputStream使用<br>StringBufferInputStream：把一个String对象作为InputStream<br>PipedInputStream：实现了pipe的概念，主要在线程中使用<br>SequenceInputStream：把多个InputStream合并为一个InputStream<br>OutputStream<br>OutputStream提供了3个write方法来做数据的输出，这个是和InputStream是相对应的。 　　</p>
<p>public void write(byte b[ ])：将参数b中的字节写到输出流。<br>public void write(byte b[ ], int off, int len) ：将参数b的从偏移量off开始的len个字节写到输出流。<br>public abstract void write(int b) ：先将int转换为byte类型，把低字节写入到输出流中。<br>public void flush( ) : 将数据缓冲区中数据全部输出，并清空缓冲区。<br>public void close( ) : 关闭输出流并释放与流相关的系统资源。<br>几种不同的OutputStream：</p>
<p>ByteArrayOutputStream：把信息存入内存中的一个缓冲区中<br>FileOutputStream：把信息存入文件中<br>PipedOutputStream：实现了pipe的概念，主要在线程中使用<br>SequenceOutputStream：把多个OutStream合并为一个OutStream<br>Reader和InputStream类似；Writer和OutputStream类似。</p>
<p>有两个需要注意的：</p>
<p>InputStreamReader ： 从输入流读取字节，在将它们转换成字符。<br>BufferReader :接受Reader对象作为参数，并对其添加字符缓冲器，使用readline()方法可以读取一行。<br>如何选择I/O流<br>确定是输入还是输出<br>输入:输入流 InputStream Reader<br>输出:输出流 OutputStream Writer<br>明确操作的数据对象是否是纯文本<br>是:字符流 Reader，Writer<br>否:字节流 InputStream，OutputStream<br>明确具体的设备。<br>文件：<br>读：FileInputStream,, FileReader,<br>写：FileOutputStream，FileWriter<br>数组：<br>byte[ ]：ByteArrayInputStream, ByteArrayOutputStream<br>char[ ]：CharArrayReader, CharArrayWriter<br>String：<br>StringBufferInputStream(已过时，因为其只能用于String的每个字符都是8位的字符串), StringReader, StringWriter<br>Socket流<br>键盘：用System.in（是一个InputStream对象）读取，用System.out（是一个OutoutStream对象）打印<br>是否需要转换流<br>是，就使用转换流，从Stream转化为Reader、Writer：InputStreamReader，OutputStreamWriter<br>是否需要缓冲提高效率<br>是就加上Buffered：BufferedInputStream, BufferedOuputStream, BufferedReader, BufferedWriter<br>是否需要格式化输出<br>示例代码<br>将标准输入（键盘输入）显示到标准输出（显示器），支持字符。<br>char ch;<br>BufferedReader in = new BufferedReader(new InputStreamReader(System.in));  //将字节流转为字符流，带缓冲<br>try {<br>    while ((ch = (char) in.read()) != -1){<br>        System.out.print(ch);<br>    }<br>} catch (IOException e) {<br>    e.printStackTrace();<br>}<br>将AtomicityTest.java的内容打印到显示器<br>方法一：</p>
<p>BufferedReader in = new BufferedReader(new FileReader(“AtomicityTest.java”));<br>String s;<br>try {<br>    while ((s = in.readLine()) != null){<br>        System.out.println(s);<br>    }<br>    in.close();<br>} catch (IOException e) {<br>    e.printStackTrace();<br>}<br>方法二：</p>
<p>FileReader in = new FileReader(“AtomicityTest.java”);<br>int b;<br>try {<br>    while ((b = in.read()) != -1){<br>        System.out.print((char)b);<br>    }<br>    in.close();<br>} catch (IOException e) {<br>    e.printStackTrace();<br>}<br>方法三：(有可能出现乱码）</p>
<p>FileInputStream in = new FileInputStream(“AtomicityTest.java”);<br>int n = 50;<br>byte[] buffer = new byte[n];<br>try {<br>    while ((in.read(buffer,0,n) != -1 &amp;&amp; n &gt; 0)){<br>        System.out.print(new String(buffer));<br>    }<br>    in.close();<br>} catch (IOException e) {<br>    e.printStackTrace();<br>}<br>将文件A的内容拷贝到文件B<br>FileInputStream in = new FileInputStream(“AtomicityTest.java”);<br>FileOutputStream out = new FileOutputStream(“copy.txt”);<br>int b;<br>while ((b = in.read()) != -1){<br>    out.write(b);<br>}<br>out.flush();<br>in.close();<br>out.close();<br>将标准输入的内容写入文件<br>Scanner in = new Scanner(System.in);<br>FileWriter out = new FileWriter(“systemIn.log”);<br>String s;<br>while (!(s = in.nextLine()).equals(“Q”)){<br>    out.write(s + “\n”);<br>}<br>out.flush();<br>out.close();<br>in.close();</p>
<h2 id="Java-I-O-操作示例"><a href="#Java-I-O-操作示例" class="headerlink" title="Java I/O 操作示例"></a>Java I/O 操作示例</h2><p>给出几个Java I/O 操作的示例代码。</p>
<p>创建文件或目录<br>import java.io.File;<br>import java.io.IOException;<br>public class TestFileIO {<br>    public static void main(String[] args) {<br>        File dir = new File(“dir1”);<br>        dir.mkdir();  //创建目录<br>        File file = new File(dir,”file1”);  //目录加文件名<br>        File file2 = new File(“dir1/file2”);  //完整路径<br>        try {<br>            file.createNewFile();  //创建文件,若存在同名文件,不会覆盖<br>            file2.createNewFile();<br>        } catch (IOException e) {<br>            e.printStackTrace();<br>        }<br>    }<br>}<br>删除文件<br>import java.io.File;<br>public class TestFileIO {<br>    public static void main(String[] args) {<br>        File file = new File(“dir1/file2”);<br>        if (file.delete()){<br>            System.out.println(file.getName() + “ is deleted!”);<br>        }else {<br>            System.out.println(“File is not deleted!”);<br>        }<br>    }<br>}<br>向文件逐行写入内容(覆盖写）<br>FileOutputStream</p>
<p>import java.io.*;<br>public class TestFileIO {<br>    public static void main(String[] args) throws IOException {<br>        File fout = new File(“dir1/file1”);<br>        FileOutputStream fos = new FileOutputStream(fout);<br>        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));<br>        for (int i = 0; i &lt; 10; i++){<br>            bw.write(“something”);<br>            bw.newLine();<br>        }<br>        bw.close();<br>    }<br>}<br>FileWriter</p>
<p>import java.io.*;<br>public class TestFileIO {<br>    public static void main(String[] args) throws IOException {<br>        File fout = new File(“dir1/file1”);<br>        FileWriter fw = new FileWriter(fout);<br>        for (int i = 0; i &lt; 10; i++){<br>            fw.write(“something” + System.getProperty(“line.separator”));<br>        }<br>        fw.close();<br>    }<br>}<br>PrintWriter</p>
<p>import java.io.*;<br>public class TestFileIO {<br>    public static void main(String[] args) throws IOException {<br>        File fout = new File(“dir1/file1”);<br>        PrintWriter pw = new PrintWriter(new FileWriter(fout));<br>        for (int i = 0; i &lt; 10; i++){<br>            pw.println(“something”);<br>        }<br>        pw.close();<br>    }<br>}<br>OutputStreamWriter</p>
<p>import java.io.*;<br>public class TestFileIO {<br>    public static void main(String[] args) throws IOException {<br>        File fout = new File(“dir1/file1”);<br>        FileOutputStream fos = new FileOutputStream(fout);<br>        OutputStreamWriter osw = new OutputStreamWriter(fos);<br>        for (int i = 0; i &lt; 10; i++) {<br>            osw.write(“something” + System.getProperty(“line.separator”));<br>        }<br>        osw.close();<br>    }<br>}<br>注：<br>往文本文件里写内容用FileWriter即可，比较方便。但是如果要自己定义字符编号和byte-buffer大小的话就要用FileOutputStream。</p>
<p>PrintWriter跟FileWriter的主要区别是PrintWriter可以格式化输出。该类实现了PrintStream的所有print方法。</p>
<p>追加写<br>import java.io.<em>;<br>public class TestFileIO {<br>    public static void main(String[] args) throws IOException {<br>        File fout = new File(“dir1/file1”);<br>        FileOutputStream fos = new FileOutputStream(fout,true);  //跟覆盖写唯一的区别是这里加了个true参数。<br>        OutputStreamWriter osw = new OutputStreamWriter(fos);<br>        for (int i = 0; i &lt; 10; i++) {<br>            osw.write(“something” + System.getProperty(“line.separator”));<br>        }<br>        osw.close();<br>    }<br>}<br>拷贝文件<br>import java.io.</em>;<br>import java.nio.file.Files;<br>import java.nio.file.Path;<br>import java.nio.file.Paths;<br>public class TestFileIO {<br>    public static void main(String[] args) throws IOException {<br>        Path sour = Paths.get(“dir1/file1”);<br>        Path des = Paths.get(“dir1/file2”);<br>        Files.copy(sour,des);   //Files.copy(a,b)。<br>    }<br>}<br>合并多个文件<br>读取多个文件的内容，写入一个文件。</p>
<p>import java.io.<em>;<br>/*</em></p>
<ul>
<li>Created by lbd on 2017/1/13.<br>*/<br>public class MergeFiles {<br> public static void main(String[] args) throws IOException {<pre><code>String sourceFile1Path = &quot;dir1/file1&quot;;
String sourceFile2Path = &quot;dir1/file2&quot;;
String mergedFilePath = &quot;dir1/mergedFile.txt&quot;;
File[] files = new File[2];
files[0] = new File(sourceFile1Path);
files[1] = new File(sourceFile2Path);
File mergedFile = new File(mergedFilePath);
mergeFiles(files,mergedFile);
</code></pre> }<br> public static void mergeFiles(File[] files,File mergedFile) throws IOException {<pre><code>FileWriter fw = new FileWriter(mergedFile,true);
BufferedWriter bw = new BufferedWriter(fw);
for (File f : files){
    System.out.println(&quot;merging: &quot; + f.getName());
    FileReader fr = new FileReader(f);
    BufferedReader br = new BufferedReader(fr);
    String aLine;
    while ((aLine = br.readLine()) != null){
        bw.write(aLine);
        bw.newLine();
    }
    br.close();
}
bw.close();
</code></pre> }<br>}<br>移动文件<br>调用的是File.renameTo()方法。</li>
</ul>
<p>import java.io.*;<br>public class MoveFile {<br>    public static void main(String[] args) throws IOException {<br>        File f1 = new File(“dir1/file1”);<br>        File f2 = new File(“dir1/dir2/file3”);  //dir2目录必须存在,否则无法移动成功<br>        f1.renameTo(f2);<br>    }<br>}<br>对文件内容排序<br>file1内容如下：</p>
<p>dog<br>cat<br>–windows<br>–kankan<br>pps<br>game<br>–annot be guaranteed<br>as it is, generally speaking,<br>–impossible to make any hard gu<br>arantees in the p<br>–resence of unsynchr<br>对行进行排序，以上面的文本为例，排序后arantees in the p应该在第一行</p>
<p>import java.io.<em>;<br>import java.util.ArrayList;<br>import java.util.Collections;<br>/*</em></p>
<ul>
<li>Created by lbd on 2017/1/13.<br>*/<br>public class TestJavaIO {<br> public static void main(String[] args) throws IOException {<pre><code>File fin = new File(&quot;file1&quot;);
File fout = new File(&quot;file2&quot;);
String s;
FileWriter fw = new FileWriter(fout);
FileReader fr = new FileReader(fin);
BufferedReader br = new BufferedReader(fr);
BufferedWriter bw = new BufferedWriter(fw);
ArrayList&lt;String&gt; al = new ArrayList&lt;&gt;();
while ((s = br.readLine()) != null ){
    if (!s.trim().startsWith(&quot;-&quot;) &amp;&amp; s.trim().length() &gt; 0){
        al.add(s);
    }
}
Collections.sort(al);
for (String line : al){
    bw.write(line);
    bw.newLine();
    bw.write(&quot;------------------------------&quot;);
    bw.newLine();
}
br.close();
bw.close();
</code></pre> }<br>}<br>file2内容如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">arantees in the p</div><div class="line">------------------------------</div><div class="line">as it is, generally speaking,</div><div class="line">------------------------------</div><div class="line">cat</div><div class="line">------------------------------</div><div class="line">dog</div><div class="line">------------------------------</div><div class="line">game</div><div class="line">------------------------------</div><div class="line">pps</div><div class="line">------------------------------</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Java-I-O底层是如何工作的？"><a href="#Java-I-O底层是如何工作的？" class="headerlink" title="Java I/O底层是如何工作的？"></a><a href="http://www.importnew.com/14111.html" target="_blank" rel="external">Java I/O底层是如何工作的？</a></h2><p>本博文主要讨论I/O在底层是如何工作的。本文服务的读者，迫切希望了解Java I/O操作是在机器层面如何进行映射，以及应用运行时硬件都做了什么。假定你熟悉基本的I/O操作，比如通过Java I/O API读写文件。这些内容不在本文的讨论范围。</p>
<p>目录</p>
<p>缓存处理和内核vs用户空间<br>虚拟内存<br>内存分页<br>面向文件、块的I/O<br>文件锁定<br>面向流的I/O<br>缓存处理和内核vs用户空间</p>
<p>缓冲与缓冲的处理方式,是所有I/O操作的基础。术语“输入、输出”只对数据移入和移出缓存有意义。任何时候都要把它记在心中。通常，进程执行操作系统的I/O请求包括数据从缓冲区排出（写操作）和数据填充缓冲区（读操作）。这就是I/O的整体概念。在操作系统内部执行这些传输操作的机制可以非常复杂，但从概念上讲非常简单。我们将在文中用一小部分来讨论它。</p>
<p>上图显示了一个简化的“逻辑”图，它表示块数据如何从外部源，例如一个磁盘，移动到进程的存储区域（例如RAM）中。首先，进程要求其缓冲通过read()系统调用填满。这个系统调用导致内核向磁盘控 制硬件发出一条命令要从磁盘获取数据。磁盘控制器通过DMA直接将数据写入内核的内存缓冲区，不需要主CPU进一步帮助。当请求read()操作时，一旦磁盘控制器完成了缓存的填 写，内核从内核空间的临时缓存拷贝数据到进程指定的缓存中。</p>
<p>有一点需要注意，在内核试图缓存及预取数据时，内核空间中进程请求的数据可能已经就绪了。如果这样，进程请求的数据会被拷贝出来。如果数据不可用，则进程被挂起。内核将把数据读入内存。</p>
<p>虚拟内存</p>
<p>你可能已经多次听说过虚拟内存了。让我再介绍一下。</p>
<p>所有现代操作系统都使用虚拟内存。虚拟内存意味着人工或者虚拟地址代替物理（硬件RAM）内存地址。虚拟地址有两个重要优势：</p>
<p>多个虚拟地址可以映射到相同的物理地址。<br>一个虚拟地址空间可以大于实际可用硬件内存。<br>在上面介绍中，从内核空间拷贝到最终用户缓存看起来增加了额外的工作。为什么不告诉磁盘控制器直接发送数据到用户空间的缓存呢？好吧，这是由虚拟内存实现的。用到了上面的优势1。</p>
<p>通过将内核空间地址映射到相同的物理地址作为一个用户空间的虚拟地址，DMA硬件（只能访问物理内存地址）可以填充缓存。这个缓存同时对内核和用户空间进程可见。<br><img src="http://incdn1.b0.upaiyun.com/2014/12/3efe3d5db9fe2e9bee8b0e27c9de60d3.png" alt=""></p>
<p>这就消除了内核和用户空间之间的拷贝，但是需要内核和用户缓冲区使用相同的页面对齐方式。缓冲区必须使用的块大小的倍数磁盘控制器（通常是512字节的磁盘扇区）。操作系统将其内存地址空间划分为页面，这是固定大小的字节组。这些内存页总是磁盘块大小的倍数和通常为2倍（简化寻址）。典型的内存页面大小是1024、2048和4096字节。虚拟和物理内存页面大小总是相同的。</p>
<p>内存分页</p>
<p>为了支持虚拟内存的第2个优势（拥有大于物理内 存的可寻址空间）需要进行虚拟内存分页（通常称为页交换）。这种机制凭借虚拟内存空间的页可以持久保存在外部磁盘存储，从而为其他虚拟页放入物理内存提供了空间。本质上讲，物理内存担当了分页区域的缓存。分页区是磁盘上的空间，内存页的内容被强迫交换出物理内存时会保存到这里。</p>
<p>调整内存页面大小为磁盘块大小的倍数，让内核可以直接发送指令到磁盘控制器硬件，将内存页写到磁盘或者在需要时重新加载。事实证明，所有的磁盘I/O操作都是在页面级别上完成的。这是数据在现代分页操作系统上在磁盘与物理内存之间移动的唯一方式。</p>
<p>现代CPU包含一个名为内存管理单元（MMU）的子系统。这 个设备逻辑上位于CPU与物理内存之间。它包含从虚拟地址向物理内存地址转化的映射信息。当CPU引用一个内存位置时，MMU决定哪些页需要驻留（通常通过移位或屏蔽地址的某些位）以及转化虚拟页号到物理页号（由硬件实现，速度奇快）。</p>
<p>面向文件、块I/O</p>
<p>文件I/O总是发生在文件系统的上下文切换中。文件系统跟磁盘是完全不同的事物。磁盘按段存储数据，每段512字节。它是硬件设备，对保存的文件语义一无所知。它们只是提供了一定数量的可以保存数据的插槽。从这方面来说，一个磁盘的段与 内存分页类似。它们都有统一的大小并且是个可寻址的大数组。</p>
<p>另一方面，文件系统是更高层抽象。文件系统是安排和翻译保存磁盘（或其它可随机访问，面向块的设备）数据的一种特殊方法。你写的代码几乎总是与文件系统交互，而不与磁盘直接交互。文件系统定义了文件名、路径、文件、文件属性等抽象。</p>
<p>一个文件系统组织（在硬盘中）了一系列均匀大小的数据块。有些块保存元信息，如空闲块的映射、目录、索引等。其它块包含实际的文件数据。单个文件的元信息描述哪些块包含文件数据、数据结束位置、最后更新时间等。当用户进程发送请求来读取文件数据时，文件系统实现准确定位数据在磁盘上的位置。然后采取行动将这些磁盘扇区放入内存中。</p>
<p>文件系统也有页的概念，它的大小可能与一个基本内存页面大小相同或者是它的倍数。典型的文件系统页面大小范围从2048到8192字节，并且总是一个基本内存页面大小的倍数。</p>
<p>分页文件系统执行I/O可以归结为以下逻辑步骤：</p>
<p>确定请求跨越了哪些文件系统分页（磁盘段的集合）。磁盘上的文件内容及元数据可能分布在多个文件系统页面上，这些页面可能是不连续的。<br>分配足够多的内核空间内存页面来保存相同的文件系统页面。<br>建立这些内存分页与磁盘上文件系统分页的映射。<br>对每一个内存分页产生分页错误。<br>虚拟内存系统陷入分页错误并且调度pagins（页面调入），通过从磁盘读取内容来验证这些页面。<br>一旦pageins完成，文件系统分解原始数据来提取请求的文件内容或属性信息。<br>需要注意的是，这个文件系统数据将像其它内存页一样被缓存起来。在随后的I/O请求中，一些数据或所有文件数据仍然保存在物理内存中，可以直接重用不需要从磁盘重读。</p>
<p>文件锁定</p>
<p>文件加锁是一种机制，一个进程可以阻止其它进程访问一个文件或限制其它进程访问该文件。虽然名为“文件锁定”，意味着锁定整个文件（经常做的）。锁定通常可以在一个更细粒度的水平。随着粒度下降到字节级，文件的区域通常会被锁定。锁与特定文件相关联，起始于文件的指定字节位置并运行到指定的字节范围。这一点很重要，因为它允许多个进程协作访问文件的特定区域而不妨碍别的进程在文件其它位置操作。</p>
<p>文件锁有两种形式：共享和独占。多个共享锁可以同时在相同的文件区域有效。另一方面，独占锁要求没有其它锁对请求的区域有效。</p>
<p>流I/O</p>
<p>并非所有的I/O是面向块的。还有流I/O，它是管道的原型，必须顺序访问I/O数据流的字节。常见的数据流有TTY（控制台）设备、打印端口和网络连接。</p>
<p>数据流通常但不一定比块设备慢，提供间歇性输入。大多数操作系统允许在非阻塞模式下工作。允许一个进程检查数据流的输入是否可用，不必在不可用时发生阻塞。这种管理允许进程在输入到达时进行处理，在输入流空闲时可以执行其他功能。</p>
<p>比非阻塞模式更进一步的是有条件的选择（readiness selection）。它类似于非阻塞模式（并且通常建立在非阻塞模式基础上），但是减轻了操作系统检查流是否就绪准的负担。操作系统可以被告知观察流集合，并向进程返回哪个流准备好的指令。这种能力允许进程通过利用操作系统返回 的准备信息，使用通用代码和单个线程复用多个活动流。这种方式被广泛用于网络服务器，以便处理大量的网络连接。准备选择对于大容量扩展是至关重要的。</p>
<p>到此为止，对这个非常复杂的话题有一大堆技术术语。</p>
<p>如果你有想法和疑问，请给给我发评论。</p>
<p>学习快乐！！</p>
<p>原文链接： howtodoinjava 翻译： ImportNew.com - liken<br>译文链接： <a href="http://www.importnew.com/14111.html" target="_blank" rel="external">http://www.importnew.com/14111.html</a><br>[ 转载请保留原文出处、译者和译文链接。]</p>
<h2 id="Java-I-O-操作及优化建议"><a href="#Java-I-O-操作及优化建议" class="headerlink" title="Java I/O 操作及优化建议"></a>Java I/O 操作及优化建议</h2><p>原文出处： <a href="http://www.importnew.com/16481.html" target="_blank" rel="external">IBM － 周明耀</a></p>
<p>Java I/O</p>
<p>I/O，即 Input/Output(输入/输出) 的简称。就 I/O 而言，概念上有 5 种模型：blocking I/O，nonblocking I/O，I/O multiplexing (select and poll)，signal driven I/O (SIGIO)，asynchronous I/O (the POSIX aio_functions)。不同的操作系统对上述模型支持不同，UNIX 支持 IO 多路复用。不同系统叫法不同，freebsd 里面叫 kqueue，Linux 叫 epoll。而 Windows2000 的时候就诞生了 IOCP 用以支持 asynchronous I/O。</p>
<p>Java 是一种跨平台语言，为了支持异步 I/O，诞生了 NIO，Java1.4 引入的 NIO1.0 是基于 I/O 复用的，它在各个平台上会选择不同的复用方式。Linux 用的 epoll，BSD 上用 kqueue，Windows 上是重叠 I/O。</p>
<p>Java I/O 的相关方法如下所述：</p>
<p>同步并阻塞 (I/O 方法)：服务器实现模式为一个连接启动一个线程，每个线程亲自处理 I/O 并且一直等待 I/O 直到完成，即客户端有连接请求时服务器端就需要启动一个线程进行处理。但是如果这个连接不做任何事情就会造成不必要的线程开销，当然可以通过线程池机制改善这个缺点。I/O 的局限是它是面向流的、阻塞式的、串行的一个过程。对每一个客户端的 Socket 连接 I/O 都需要一个线程来处理，而且在此期间，这个线程一直被占用，直到 Socket 关闭。在这期间，TCP 的连接、数据的读取、数据的返回都是被阻塞的。也就是说这期间大量浪费了 CPU 的时间片和线程占用的内存资源。此外，每建立一个 Socket 连接时，同时创建一个新线程对该 Socket 进行单独通信 (采用阻塞的方式通信)。这种方式具有很快的响应速度，并且控制起来也很简单。在连接数较少的时候非常有效，但是如果对每一个连接都产生一个线程无疑是对系统资源的一种浪费，如果连接数较多将会出现资源不足的情况；<br>同步非阻塞 (NIO 方法)：服务器实现模式为一个请求启动一个线程，每个线程亲自处理 I/O，但是另外的线程轮询检查是否 I/O 准备完毕，不必等待 I/O 完成，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有 I/O 请求时才启动一个线程进行处理。NIO 则是面向缓冲区，非阻塞式的，基于选择器的，用一个线程来轮询监控多个数据传输通道，哪个通道准备好了 (即有一组可以处理的数据) 就处理哪个通道。服务器端保存一个 Socket 连接列表，然后对这个列表进行轮询，如果发现某个 Socket 端口上有数据可读时，则调用该 Socket 连接的相应读操作；如果发现某个 Socket 端口上有数据可写时，则调用该 Socket 连接的相应写操作；如果某个端口的 Socket 连接已经中断，则调用相应的析构方法关闭该端口。这样能充分利用服务器资源，效率得到大幅度提高；<br>异步非阻塞 (AIO 方法，JDK7 发布)：服务器实现模式为一个有效请求启动一个线程，客户端的 I/O 请求都是由操作系统先完成了再通知服务器应用去启动线程进行处理，每个线程不必亲自处理 I/O，而是委派操作系统来处理，并且也不需要等待 I/O 完成，如果完成了操作系统会另行通知的。该模式采用了 Linux 的 epoll 模型。<br>在连接数不多的情况下，传统 I/O 模式编写较为容易，使用上也较为简单。但是随着连接数的不断增多，传统 I/O 处理每个连接都需要消耗一个线程，而程序的效率，当线程数不多时是随着线程数的增加而增加，但是到一定的数量之后，是随着线程数的增加而减少的。所以传统阻塞式 I/O 的瓶颈在于不能处理过多的连接。非阻塞式 I/O 出现的目的就是为了解决这个瓶颈。非阻塞 IO 处理连接的线程数和连接数没有联系，例如系统处理 10000 个连接，非阻塞 I/O 不需要启动 10000 个线程，你可以用 1000 个，也可以用 2000 个线程来处理。因为非阻塞 IO 处理连接是异步的，当某个连接发送请求到服务器，服务器把这个连接请求当作一个请求“事件”，并把这个“事件”分配给相应的函数处理。我们可以把这个处理函数放到线程中去执行，执行完就把线程归还，这样一个线程就可以异步的处理多个事件。而阻塞式 I/O 的线程的大部分时间都被浪费在等待请求上了。</p>
<p>Java NIO</p>
<p>Java.nio 包是 Java 在 1.4 版本之后新增加的包，专门用来提高 I/O 操作的效率。</p>
<p>表 1 所示是 I/O 与 NIO 之间的对比内容。</p>
<p>表 1. I/O VS NIO</p>
<p>I/O    NIO<br>面向流    面向缓冲<br>阻塞 IO    非阻塞 IO<br>无    选择器<br>NIO 是基于块 (Block) 的，它以块为基本单位处理数据。在 NIO 中，最为重要的两个组件是缓冲 Buffer 和通道 Channel。缓冲是一块连续的内存块，是 NIO 读写数据的中转地。通道标识缓冲数据的源头或者目的地，它用于向缓冲读取或者写入数据，是访问缓冲的接口。Channel 是一个双向通道，即可读，也可写。Stream 是单向的。应用程序不能直接对 Channel 进行读写操作，而必须通过 Buffer 来进行，即 Channel 是通过 Buffer 来读写数据的。</p>
<p>使用 Buffer 读写数据一般遵循以下四个步骤：</p>
<p>写入数据到 Buffer；<br>调用 flip() 方法；<br>从 Buffer 中读取数据；<br>调用 clear() 方法或者 compact() 方法。<br>当向 Buffer 写入数据时，Buffer 会记录下写了多少数据。一旦要读取数据，需要通过 flip() 方法将 Buffer 从写模式切换到读模式。在读模式下，可以读取之前写入到 Buffer 的所有数据。</p>
<p>一旦读完了所有的数据，就需要清空缓冲区，让它可以再次被写入。有两种方式能清空缓冲区：调用 clear() 或 compact() 方法。clear() 方法会清空整个缓冲区。compact() 方法只会清除已经读过的数据。任何未读的数据都被移到缓冲区的起始处，新写入的数据将放到缓冲区未读数据的后面。</p>
<p>Buffer 有多种类型，不同的 Buffer 提供不同的方式操作 Buffer 中的数据。</p>
<p>图 1 Buffer 接口层次图</p>
<p><img src="http://ww3.sinaimg.cn/mw690/b254dc71gw1euwt5ygfecj208606jaa2.jpg" alt=""></p>
<p>Buffer 写数据有两种情况：</p>
<p>从 Channel 写到 Buffer，如例子中 Channel 从文件中读取数据，写到 Channel；<br>直接调用 put 方法，往里面写数据。<br>从 Buffer 中读取数据有两种方式：</p>
<p>从 Buffer 读取数据到 Channel；<br>使用 get() 方法从 Buffer 中读取数据。<br>Buffer 的 rewin 方法将 position 设回 0，所以你可以重读 Buffer 中的所有数据。limit 保持不变，仍然表示能从 Buffer 中读取多少个元素（byte、char 等）。</p>
<p>clear() 和 compact() 方法</p>
<p>一旦读完 Buffer 中的数据，需要让 Buffer 准备好再次被写入。可以通过 clear() 或 compact() 方法来完成。</p>
<p>如果调用的是 clear() 方法，position 将被设回 0，limit 被设置成 capacity 的值。换句话说，Buffer 被清空了。Buffer 中的数据并未清除，只是这些标记告诉我们可以从哪里开始往 Buffer 里写数据。</p>
<p>如果 Buffer 中有一些未读的数据，调用 clear() 方法，数据将“被遗忘”，意味着不再有任何标记会告诉你哪些数据被读过，哪些还没有。如果 Buffer 中仍有未读的数据，且后续还需要这些数据，但是此时想要先写些数据，那么使用 compact() 方法。compact() 方法将所有未读的数据拷贝到 Buffer 起始处。然后将 position 设到最后一个未读元素正后面。limit 属性依然像 clear() 方法一样，设置成 capacity。现在 Buffer 准备好写数据了，但是不会覆盖未读的数据。</p>
<p>Buffer 参数</p>
<p>Buffer 有 3 个重要的参数：位置 (position)、容量 (capacity) 和上限 (limit)。</p>
<p>capacity 是指 Buffer 的大小，在 Buffer 建立的时候已经确定。</p>
<p>limit 当 Buffer 处于写模式，指还可以写入多少数据；处于读模式，指还有多少数据可以读。</p>
<p>position 当 Buffer 处于写模式，指下一个写数据的位置；处于读模式，当前将要读取的数据的位置。每读写一个数据，position+1，也就是 limit 和 position 在 Buffer 的读/写时的含义不一样。当调用 Buffer 的 flip 方法，由写模式变为读模式时，limit(读)=position(写)，position(读) =0。</p>
<p>散射&amp;聚集</p>
<p>NIO 提供了处理结构化数据的方法，称之为散射 (Scattering) 和聚集 (Gathering)。散射是指将数据读入一组 Buffer 中，而不仅仅是一个。聚集与之相反，指将数据写入一组 Buffer 中。散射和聚集的基本使用方法和对单个 Buffer 操作时的使用方法相当类似。在散射读取中，通道依次填充每个缓冲区。填满一个缓冲区后，它就开始填充下一个，在某种意义上，缓冲区数组就像一个大缓冲区。在已知文件具体结构的情况下，可以构造若干个符合文件结构的 Buffer，使得各个 Buffer 的大小恰好符合文件各段结构的大小。此时，通过散射读的方式可以一次将内容装配到各个对应的 Buffer 中，从而简化操作。如果需要创建指定格式的文件，只要先构造好大小合适的 Buffer 对象，使用聚集写的方式，便可以很快地创建出文件。清单 1 以 FileChannel 为例，展示如何使用散射和聚集读写结构化文件。</p>
<p>清单 1. 使用散射和聚集读写结构化文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileInputStream;</div><div class="line">import java.io.FileNotFoundException;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.nio.ByteBuffer;</div><div class="line">import java.nio.channels.FileChannel;</div><div class="line"></div><div class="line">public class NIOScatteringandGathering &#123;</div><div class="line"> public void createFiles(String TPATH)&#123;</div><div class="line"> try &#123;</div><div class="line"> ByteBuffer bookBuf = ByteBuffer.wrap(&quot;java 性能优化技巧&quot;.getBytes(&quot;utf-8&quot;));</div><div class="line">ByteBuffer autBuf = ByteBuffer.wrap(&quot;test&quot;.getBytes(&quot;utf-8&quot;));</div><div class="line">int booklen = bookBuf.limit();</div><div class="line">int autlen = autBuf.limit();</div><div class="line">ByteBuffer[] bufs = new ByteBuffer[]&#123;bookBuf,autBuf&#125;;</div><div class="line">File file = new File(TPATH);</div><div class="line">if(!file.exists())&#123;</div><div class="line">try &#123;</div><div class="line">file.createNewFile();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">try &#123;</div><div class="line">FileOutputStream fos = new FileOutputStream(file);</div><div class="line">FileChannel fc = fos.getChannel();</div><div class="line">fc.write(bufs);</div><div class="line">fos.close();</div><div class="line">&#125; catch (FileNotFoundException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">ByteBuffer b1 = ByteBuffer.allocate(booklen);</div><div class="line">ByteBuffer b2 = ByteBuffer.allocate(autlen);</div><div class="line">ByteBuffer[] bufs1 = new ByteBuffer[]&#123;b1,b2&#125;;</div><div class="line">File file1 = new File(TPATH);</div><div class="line">try &#123;</div><div class="line">FileInputStream fis = new FileInputStream(file);</div><div class="line">FileChannel fc = fis.getChannel();</div><div class="line">fc.read(bufs1);</div><div class="line">String bookname = new String(bufs1[0].array(),&quot;utf-8&quot;);</div><div class="line">String autname = new String(bufs1[1].array(),&quot;utf-8&quot;);</div><div class="line">System.out.println(bookname+&quot; &quot;+autname);</div><div class="line">&#125; catch (FileNotFoundException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public static void main(String[] args)&#123;</div><div class="line"> NIOScatteringandGathering nio = new NIOScatteringandGathering();</div><div class="line"> nio.createFiles(&quot;C:\\1.TXT&quot;);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出如下清单 2 所示。</p>
<p>清单 2. 运行结果</p>
<blockquote>
<p>java 性能优化技巧 test</p>
</blockquote>
<p>清单 3 所示代码对传统 I/O、基于 Byte 的 NIO、基于内存映射的 NIO 三种方式进行了性能上的对比，使用一个有 400 万数据的文件的读、写操作耗时作为评测依据。</p>
<p>清单 3. I/O 的三种方式对比试验<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line">import java.io.BufferedInputStream;</div><div class="line">import java.io.BufferedOutputStream;</div><div class="line">import java.io.DataInputStream;</div><div class="line">import java.io.DataOutputStream;</div><div class="line">import java.io.File;</div><div class="line">import java.io.FileInputStream;</div><div class="line">import java.io.FileNotFoundException;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.RandomAccessFile;</div><div class="line">import java.nio.ByteBuffer;</div><div class="line">import java.nio.IntBuffer;</div><div class="line">import java.nio.MappedByteBuffer;</div><div class="line">import java.nio.channels.FileChannel;</div><div class="line"></div><div class="line">public class NIOComparator &#123;</div><div class="line"> public void IOMethod(String TPATH)&#123;</div><div class="line"> long start = System.currentTimeMillis();</div><div class="line"> try &#123;</div><div class="line">DataOutputStream dos = new DataOutputStream(</div><div class="line"> new BufferedOutputStream(new FileOutputStream(new File(TPATH))));</div><div class="line">for(int i=0;i&lt;4000000;i++)&#123;</div><div class="line">dos.writeInt(i);//写入 4000000 个整数</div><div class="line">&#125;</div><div class="line">if(dos!=null)&#123;</div><div class="line">dos.close();</div><div class="line">&#125;</div><div class="line"> &#125; catch (FileNotFoundException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line"> &#125; catch (IOException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line"> &#125;</div><div class="line"> long end = System.currentTimeMillis();</div><div class="line"> System.out.println(end - start);</div><div class="line"> start = System.currentTimeMillis();</div><div class="line"> try &#123;</div><div class="line">DataInputStream dis = new DataInputStream(</div><div class="line"> new BufferedInputStream(new FileInputStream(new File(TPATH))));</div><div class="line">for(int i=0;i&lt;4000000;i++)&#123;</div><div class="line">dis.readInt();</div><div class="line">&#125;</div><div class="line">if(dis!=null)&#123;</div><div class="line">dis.close();</div><div class="line">&#125;</div><div class="line">&#125; catch (FileNotFoundException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line"> end = System.currentTimeMillis();</div><div class="line"> System.out.println(end - start);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public void ByteMethod(String TPATH)&#123;</div><div class="line"> long start = System.currentTimeMillis();</div><div class="line"> try &#123;</div><div class="line">FileOutputStream fout = new FileOutputStream(new File(TPATH));</div><div class="line">FileChannel fc = fout.getChannel();//得到文件通道</div><div class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(4000000*4);//分配 Buffer</div><div class="line">for(int i=0;i&lt;4000000;i++)&#123;</div><div class="line">byteBuffer.put(int2byte(i));//将整数转为数组</div><div class="line">&#125;</div><div class="line">byteBuffer.flip();//准备写</div><div class="line">fc.write(byteBuffer);</div><div class="line">&#125; catch (FileNotFoundException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"> long end = System.currentTimeMillis();</div><div class="line"> System.out.println(end - start);</div><div class="line"></div><div class="line"> start = System.currentTimeMillis();</div><div class="line"> FileInputStream fin;</div><div class="line">try &#123;</div><div class="line">fin = new FileInputStream(new File(TPATH));</div><div class="line">FileChannel fc = fin.getChannel();//取得文件通道</div><div class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(4000000*4);//分配 Buffer</div><div class="line">fc.read(byteBuffer);//读取文件数据</div><div class="line">fc.close();</div><div class="line">byteBuffer.flip();//准备读取数据</div><div class="line">while(byteBuffer.hasRemaining())&#123;</div><div class="line">byte2int(byteBuffer.get(),byteBuffer.get(),byteBuffer.get(),byteBuffer.get());//将 byte 转为整数</div><div class="line">&#125;</div><div class="line">&#125; catch (FileNotFoundException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"> end = System.currentTimeMillis();</div><div class="line"> System.out.println(end - start);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public void mapMethod(String TPATH)&#123;</div><div class="line"> long start = System.currentTimeMillis();</div><div class="line"> //将文件直接映射到内存的方法</div><div class="line"> try &#123;</div><div class="line">FileChannel fc = new RandomAccessFile(TPATH,&quot;rw&quot;).getChannel();</div><div class="line">IntBuffer ib = fc.map(FileChannel.MapMode.READ_WRITE, 0, 4000000*4).asIntBuffer();</div><div class="line">for(int i=0;i&lt;4000000;i++)&#123;</div><div class="line">ib.put(i);</div><div class="line">&#125;</div><div class="line">if(fc!=null)&#123;</div><div class="line">fc.close();</div><div class="line">&#125;</div><div class="line">&#125; catch (FileNotFoundException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"> long end = System.currentTimeMillis();</div><div class="line"> System.out.println(end - start);</div><div class="line"></div><div class="line"> start = System.currentTimeMillis();</div><div class="line"> try &#123;</div><div class="line">FileChannel fc = new FileInputStream(TPATH).getChannel();</div><div class="line">MappedByteBuffer lib = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());</div><div class="line">lib.asIntBuffer();</div><div class="line">while(lib.hasRemaining())&#123;</div><div class="line">lib.get();</div><div class="line">&#125;</div><div class="line">if(fc!=null)&#123;</div><div class="line">fc.close();</div><div class="line">&#125;</div><div class="line">&#125; catch (FileNotFoundException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"> end = System.currentTimeMillis();</div><div class="line"> System.out.println(end - start);</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public static byte[] int2byte(int res)&#123;</div><div class="line"> byte[] targets = new byte[4];</div><div class="line"> targets[3] = (byte)(res &amp; 0xff);//最低位</div><div class="line"> targets[2] = (byte)((res&gt;&gt;8)&amp;0xff);//次低位</div><div class="line"> targets[1] = (byte)((res&gt;&gt;16)&amp;0xff);//次高位</div><div class="line"> targets[0] = (byte)((res&gt;&gt;&gt;24));//最高位，无符号右移</div><div class="line"> return targets;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public static int byte2int(byte b1,byte b2,byte b3,byte b4)&#123;</div><div class="line"> return ((b1 &amp; 0xff)&lt;&lt;24)|((b2 &amp; 0xff)&lt;&lt;16)|((b3 &amp; 0xff)&lt;&lt;8)|(b4 &amp; 0xff);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public static void main(String[] args)&#123;</div><div class="line"> NIOComparator nio = new NIOComparator();</div><div class="line"> nio.IOMethod(&quot;c:\\1.txt&quot;);</div><div class="line"> nio.ByteMethod(&quot;c:\\2.txt&quot;);</div><div class="line"> nio.ByteMethod(&quot;c:\\3.txt&quot;);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>清单 3 运行输出如清单 4 所示。</p>
<p>清单 4. 运行输出</p>
<blockquote>
<p>1139<br>906<br>296<br>157<br>234<br>125</p>
</blockquote>
<p>除上述描述及清单 3 所示代码以外，NIO 的 Buffer 还提供了一个可以直接访问系统物理内存的类 DirectBuffer。DirectBuffer 继承自 ByteBuffer，但和普通的 ByteBuffer 不同。普通的 ByteBuffer 仍然在 JVM 堆上分配空间，其最大内存受到最大堆的限制，而 DirectBuffer 直接分配在物理内存上，并不占用堆空间。在对普通的 ByteBuffer 访问时，系统总是会使用一个“内核缓冲区”进行间接的操作。而 DirectrBuffer 所处的位置，相当于这个“内核缓冲区”。因此，使用 DirectBuffer 是一种更加接近系统底层的方法，所以，它的速度比普通的 ByteBuffer 更快。DirectBuffer 相对于 ByteBuffer 而言，读写访问速度快很多，但是创建和销毁 DirectrBuffer 的花费却比 ByteBuffer 高。DirectBuffer 与 ByteBuffer 相比较的代码如清单 5 所示。</p>
<p>清单 5. DirectBuffer VS ByteBuffer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">import java.nio.ByteBuffer;</div><div class="line"></div><div class="line">public class DirectBuffervsByteBuffer &#123;</div><div class="line"> public void DirectBufferPerform()&#123;</div><div class="line"> long start = System.currentTimeMillis();</div><div class="line"> ByteBuffer bb = ByteBuffer.allocateDirect(500);//分配 DirectBuffer</div><div class="line"> for(int i=0;i&lt;100000;i++)&#123;</div><div class="line"> for(int j=0;j&lt;99;j++)&#123;</div><div class="line"> bb.putInt(j);</div><div class="line"> &#125;</div><div class="line"> bb.flip();</div><div class="line"> for(int j=0;j&lt;99;j++)&#123;</div><div class="line"> bb.getInt(j);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> bb.clear();</div><div class="line"> long end = System.currentTimeMillis();</div><div class="line"> System.out.println(end-start);</div><div class="line"> start = System.currentTimeMillis();</div><div class="line"> for(int i=0;i&lt;20000;i++)&#123;</div><div class="line"> ByteBuffer b = ByteBuffer.allocateDirect(10000);//创建 DirectBuffer</div><div class="line"> &#125;</div><div class="line"> end = System.currentTimeMillis();</div><div class="line"> System.out.println(end-start);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public void ByteBufferPerform()&#123;</div><div class="line"> long start = System.currentTimeMillis();</div><div class="line"> ByteBuffer bb = ByteBuffer.allocate(500);//分配 DirectBuffer</div><div class="line"> for(int i=0;i&lt;100000;i++)&#123;</div><div class="line"> for(int j=0;j&lt;99;j++)&#123;</div><div class="line"> bb.putInt(j);</div><div class="line"> &#125;</div><div class="line"> bb.flip();</div><div class="line"> for(int j=0;j&lt;99;j++)&#123;</div><div class="line"> bb.getInt(j);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> bb.clear();</div><div class="line"> long end = System.currentTimeMillis();</div><div class="line"> System.out.println(end-start);</div><div class="line"> start = System.currentTimeMillis();</div><div class="line"> for(int i=0;i&lt;20000;i++)&#123;</div><div class="line"> ByteBuffer b = ByteBuffer.allocate(10000);//创建 ByteBuffer</div><div class="line"> &#125;</div><div class="line"> end = System.currentTimeMillis();</div><div class="line"> System.out.println(end-start);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public static void main(String[] args)&#123;</div><div class="line"> DirectBuffervsByteBuffer db = new DirectBuffervsByteBuffer();</div><div class="line"> db.ByteBufferPerform();</div><div class="line"> db.DirectBufferPerform();</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行输出如清单 6 所示。</p>
<p>清单 6. 运行输出</p>
<blockquote>
<p>920<br>110<br>531<br>390<br>由清单 6 可知，频繁创建和销毁 DirectBuffer 的代价远远大于在堆上分配内存空间。使用参数-XX:MaxDirectMemorySize=200M –Xmx200M 在 VM Arguments 里面配置最大 DirectBuffer 和最大堆空间，代码中分别请求了 200M 的空间，如果设置的堆空间过小，例如设置 1M，会抛出错误如清单 7 所示。</p>
</blockquote>
<p>清单 7. 运行错误</p>
<blockquote>
<p>Error occurred during initialization of VM<br>Too small initial heap for new size specified</p>
</blockquote>
<p>DirectBuffer 的信息不会打印在 GC 里面，因为 GC 只记录了堆空间的内存回收。可以看到，由于 ByteBuffer 在堆上分配空间，因此其 GC 数组相对非常频繁，在需要频繁创建 Buffer 的场合，由于创建和销毁 DirectBuffer 的代码比较高昂，不宜使用 DirectBuffer。但是如果能将 DirectBuffer 进行复用，可以大幅改善系统性能。清单 8 是一段对 DirectBuffer 进行监控代码。</p>
<p>清单 8. 对 DirectBuffer 监控代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">import java.lang.reflect.Field;</div><div class="line"></div><div class="line">public class monDirectBuffer &#123;</div><div class="line"></div><div class="line">public static void main(String[] args)&#123;</div><div class="line">try &#123;</div><div class="line">Class c = Class.forName(&quot;java.nio.Bits&quot;);//通过反射取得私有数据</div><div class="line">Field maxMemory = c.getDeclaredField(&quot;maxMemory&quot;);</div><div class="line">maxMemory.setAccessible(true);</div><div class="line">Field reservedMemory = c.getDeclaredField(&quot;reservedMemory&quot;);</div><div class="line">reservedMemory.setAccessible(true);</div><div class="line">synchronized(c)&#123;</div><div class="line">Long maxMemoryValue = (Long)maxMemory.get(null);</div><div class="line">Long reservedMemoryValue = (Long)reservedMemory.get(null);</div><div class="line">System.out.println(&quot;maxMemoryValue=&quot;+maxMemoryValue);</div><div class="line">System.out.println(&quot;reservedMemoryValue=&quot;+reservedMemoryValue);</div><div class="line">&#125;</div><div class="line">&#125; catch (ClassNotFoundException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (SecurityException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (NoSuchFieldException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (IllegalArgumentException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (IllegalAccessException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行输出如清单 9 所示。</p>
<p>清单 9. 运行输出</p>
<blockquote>
<p>maxMemoryValue=67108864<br>reservedMemoryValue=0</p>
</blockquote>
<p>由于 NIO 使用起来较为困难，所以许多公司推出了自己封装 JDK NIO 的框架，例如 Apache 的 Mina，JBoss 的 Netty，Sun 的 Grizzly 等等，这些框架都直接封装了传输层的 TCP 或 UDP 协议，其中 Netty 只是一个 NIO 框架，它不需要 Web 容器的额外支持，也就是说不限定 Web 容器。</p>
<p>Java AIO</p>
<p>AIO 相关的类和接口：</p>
<p>java.nio.channels.AsynchronousChannel：标记一个 Channel 支持异步 IO 操作；<br>java.nio.channels.AsynchronousServerSocketChannel：ServerSocket 的 AIO 版本，创建 TCP 服务端，绑定地址，监听端口等；<br>java.nio.channels.AsynchronousSocketChannel：面向流的异步 Socket Channel，表示一个连接；<br>java.nio.channels.AsynchronousChannelGroup：异步 Channel 的分组管理，目的是为了资源共享。一个 AsynchronousChannelGroup 绑定一个线程池，这个线程池执行两个任务：处理 IO 事件和派发 CompletionHandler。AsynchronousServerSocketChannel 创建的时候可以传入一个 AsynchronousChannelGroup，那么通过 AsynchronousServerSocketChannel 创建的 AsynchronousSocketChannel 将同属于一个组，共享资源；<br>java.nio.channels.CompletionHandler：异步 IO 操作结果的回调接口，用于定义在 IO 操作完成后所作的回调工作。AIO 的 API 允许两种方式来处理异步操作的结果：返回的 Future 模式或者注册 CompletionHandler，推荐用 CompletionHandler 的方式，这些 handler 的调用是由 AsynchronousChannelGroup 的线程池派发的。这里线程池的大小是性能的关键因素。<br>这里举一个程序范例，简单介绍一下 AIO 如何运作。</p>
<p>清单 10. 服务端程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">import java.io.IOException;</div><div class="line">import java.net.InetSocketAddress;</div><div class="line">import java.nio.ByteBuffer;</div><div class="line">import java.nio.channels.AsynchronousServerSocketChannel;</div><div class="line">import java.nio.channels.AsynchronousSocketChannel;</div><div class="line">import java.nio.channels.CompletionHandler;</div><div class="line">import java.util.concurrent.ExecutionException;</div><div class="line"></div><div class="line">public class SimpleServer &#123;</div><div class="line">public SimpleServer(int port) throws IOException &#123;</div><div class="line">final AsynchronousServerSocketChannel listener =</div><div class="line"> AsynchronousServerSocketChannel.open().bind(new InetSocketAddress(port));</div><div class="line">//监听消息，收到后启动 Handle 处理模块</div><div class="line">listener.accept(null, new CompletionHandler&lt;AsynchronousSocketChannel, Void&gt;() &#123;</div><div class="line">public void completed(AsynchronousSocketChannel ch, Void att) &#123;</div><div class="line">listener.accept(null, this);// 接受下一个连接</div><div class="line">handle(ch);// 处理当前连接</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void failed(Throwable exc, Void attachment) &#123;</div><div class="line">// TODO Auto-generated method stub</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void handle(AsynchronousSocketChannel ch) &#123;</div><div class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(32);//开一个 Buffer</div><div class="line">try &#123;</div><div class="line"> ch.read(byteBuffer).get();//读取输入</div><div class="line">&#125; catch (InterruptedException e) &#123;</div><div class="line"> // TODO Auto-generated catch block</div><div class="line"> e.printStackTrace();</div><div class="line">&#125; catch (ExecutionException e) &#123;</div><div class="line"> // TODO Auto-generated catch block</div><div class="line"> e.printStackTrace();</div><div class="line">&#125;</div><div class="line">byteBuffer.flip();</div><div class="line">System.out.println(byteBuffer.get());</div><div class="line">// Do something</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>清单 11. 客户端程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">import java.io.IOException;</div><div class="line">import java.net.InetSocketAddress;</div><div class="line">import java.nio.ByteBuffer;</div><div class="line">import java.nio.channels.AsynchronousSocketChannel;</div><div class="line">import java.util.concurrent.ExecutionException;</div><div class="line">import java.util.concurrent.Future;</div><div class="line"></div><div class="line">public class SimpleClientClass &#123;</div><div class="line">private AsynchronousSocketChannel client;</div><div class="line">public SimpleClientClass(String host, int port) throws IOException,</div><div class="line">                                    InterruptedException, ExecutionException &#123;</div><div class="line"> this.client = AsynchronousSocketChannel.open();</div><div class="line"> Future&lt;?&gt; future = client.connect(new InetSocketAddress(host, port));</div><div class="line"> future.get();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void write(byte b) &#123;</div><div class="line"> ByteBuffer byteBuffer = ByteBuffer.allocate(32);</div><div class="line"> System.out.println(&quot;byteBuffer=&quot;+byteBuffer);</div><div class="line"> byteBuffer.put(b);//向 buffer 写入读取到的字符</div><div class="line"> byteBuffer.flip();</div><div class="line"> System.out.println(&quot;byteBuffer=&quot;+byteBuffer);</div><div class="line"> client.write(byteBuffer);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>清单 12.Main 函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">import java.io.IOException;</div><div class="line">import java.util.concurrent.ExecutionException;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line"></div><div class="line">public class AIODemoTest &#123;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testServer() throws IOException, InterruptedException &#123;</div><div class="line"> SimpleServer server = new SimpleServer(9021);</div><div class="line"> Thread.sleep(10000);//由于是异步操作，所以睡眠一定时间，以免程序很快结束</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testClient() throws IOException, InterruptedException, ExecutionException &#123;</div><div class="line">SimpleClientClass client = new SimpleClientClass(&quot;localhost&quot;, 9021);</div><div class="line"> client.write((byte) 11);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args)&#123;</div><div class="line">AIODemoTest demoTest = new AIODemoTest();</div><div class="line">try &#123;</div><div class="line">demoTest.testServer();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (InterruptedException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">try &#123;</div><div class="line">demoTest.testClient();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (InterruptedException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (ExecutionException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>后续会专门出文章具体深入介绍 AIO 的源代码、设计理念、设计模式等等。</p>
<p>结束语</p>
<p>I/O 与 NIO 一个比较重要的区别是我们使用 I/O 的时候往往会引入多线程，每个连接使用一个单独的线程，而 NIO 则是使用单线程或者只使用少量的多线程，每个连接共用一个线程。而由于 NIO 的非阻塞需要一直轮询，比较消耗系统资源，所以异步非阻塞模式 AIO 就诞生了。本文对 I/O、NIO、AIO 等三种输入输出操作方式进行一一介绍，力求通过简单的描述和实例让读者能够掌握基本的操作、优化方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1752522-adc85fb95f884363.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;出处：&lt;a href=&quot;http://linbingdong.com/&quot;&gt;LBD’s Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Java中I/O操作主要是指使用Java进行输入，输出操作. Java所有的I/O机制都是基于数据流进行输入输出，这些数据流表示了字符或者字节数据的流动序列。&lt;/p&gt;
&lt;p&gt;数据流是一串连续不断的数据的集合，就象水管里的水流，在水管的一端一点一点地供水，而在水管的另一端看到的是一股连续不断的水流。数据写入程序可以是一段、一段地向数据流管道中写入数据，这些数据段会按先后顺序形成一个长的数据流。对数据读取程序来说，看不到数据流在写入时的分段情况，每次可以读取其中的任意长度的数据，但只能先读取前面的数据后，再读取后面的数据（不能随机读取）。不管写入时是将数据分多次写入，还是作为一个整体一次写入，读取时的效果都是完全一样的。&lt;/p&gt;
&lt;p&gt;简而言之：数据流是一组有序，有起点和终点的字节的数据序列。包括输入流和输出流。&lt;/p&gt;
&lt;p&gt;当程序需要读取数据的时候，就会建立一个通向数据源的连接，这个数据源可以是文件，内存，或是网络连接。类似的，当程序需要写入数据的时候，就会建立一个通向目的地的连接。&lt;/p&gt;
&lt;p&gt;数据流分类：&lt;/p&gt;
&lt;p&gt;流序列中的数据既可以是未经加工的原始二进制数据，也可以是经一定编码处理后符合某种格式规定的特定数据。因此Java中的流分为两种： 1) 字节流：数据流中最小的数据单元是字节 2) 字符流：数据流中最小的数据单元是字符， Java中的字符是Unicode编码，一个字符占用两个字节。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="IO" scheme="http://ipcreator.me/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>The Way of Solving Charset Problem in Java.</title>
    <link href="http://ipcreator.me/2017/03/10/Program/Java/improper-code-of-chinese-in-java/"/>
    <id>http://ipcreator.me/2017/03/10/Program/Java/improper-code-of-chinese-in-java/</id>
    <published>2017-03-10T02:41:06.000Z</published>
    <updated>2017-03-27T09:58:41.996Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://images.cnitblog.com/blog/381060/201501/101407282656882.png" alt=""></p>
<p>出处：<a href="http://www.cnblogs.com/chenssy/" target="_blank" rel="external">树上月</a></p>
<p>出现乱码的原因各式各样但根本原因就是编码转换过程中的格式不一样，所以我们只需要了解了java在运行过程中是如何来完成编码和解码的，乱码也许就真不是什么问题了。</p>
<p>在前面三篇博客中LZ说明了各种编码的来由、编码规则，尤其是Unicode编码更是重点阐述。接着两篇是说明java内部是如何来完成编码解码工作的，分三种情况（IO、servlet/JSP、数据库）来阐述编码转换过程。最后就是java产生乱码的重灾区了：javaWeb，在这几篇博客中LZ介绍了URL编码，服务器端是如何来完成了解码工作的，JSP在转换过程中编码情况，URL产生乱码情况总结。</p>
<p><a href="http://www.cnblogs.com/chenssy/p/4200277.html" target="_blank" rel="external">JAVA中文乱码解决之道（一）—–认识字符集</a><br><a href="http://www.cnblogs.com/chenssy/p/4202688.html" target="_blank" rel="external">JAVA中文乱码解决之道（二）—–字符编码详解：基础知识 + ASCII + GB**</a><br><a href="http://www.cnblogs.com/chenssy/p/4205130.html" target="_blank" rel="external">JAVA中文乱码解决之道（三）—–编码详情：伟大的创想—Unicode编码</a><br><a href="http://www.cnblogs.com/chenssy/p/4207554.html" target="_blank" rel="external">java中文乱码解决之道（四）—–java编码转换过程</a><br><a href="http://www.cnblogs.com/chenssy/p/4214835.html" target="_blank" rel="external">java中文乱码解决之道（五）—–java是如何编码解码的</a><br><a href="http://www.cnblogs.com/chenssy/p/4220400.html" target="_blank" rel="external">Java中文乱码解决之道（六）—–javaWeb中的编码解码</a><br><a href="http://www.cnblogs.com/chenssy/p/4235191.html" target="_blank" rel="external">java中文乱码解决之道（七）—–JSP页面编码过程</a><br><a href="http://www.cnblogs.com/chenssy/p/4237953.html" target="_blank" rel="external">java中文乱码解决之道（八）—–解决URL中文乱码问题</a></p>
 <a id="more"></a>
<h2 id="java中文乱码解决之道（一）—–认识字符集"><a href="#java中文乱码解决之道（一）—–认识字符集" class="headerlink" title="java中文乱码解决之道（一）—–认识字符集"></a>java中文乱码解决之道（一）—–认识字符集</h2><p>沉寂了许久（大概有三个多月了吧），LZ“按捺不住”开始写博了！</p>
<p>java编码中的中文问题是一个老生常谈的问题了，每次遇到中文乱码LZ要么是按照以前的经验修改，要么则是baidu.com来解决问题。阅读许多关于中文乱码的解决办法的博文后，发现对于该问题我们都（更加包括我自己）没有一个清晰明了的认识，于是LZ想通过这系列博文（估计只有几篇）来彻底分析、解决java中文乱码问题，如有错误之处望各位同仁指出！当然，此系列博文并非LZ完全原创，都是在前辈基础上总结，归纳，如果雷同纯属借鉴……</p>
<p>问题起源</p>
<p>对于计算机而言，它仅认识两个0和1，不管是在内存中还是外部存储设备上，我们所看到的文字、图片、视频等等“数据”在计算机中都是已二进制形式存在的。不同字符对应二进制数的规则，就是字符的编码。字符编码的集合称为字符集。</p>
<p>在早期的计算机系统中，使用的字符是非常少的，他们只包括26个英文字母、数字符号和一些常用符号，对于这些字符进行编码，用1个字节就足够了，但是随着计算机的不断发展，为了适应全世界其他各国民族的语言，这些少得可怜的字符编码肯定是不够的。于是人们提出了UNICODE编码，它采用双字节编码，兼容英文字符和其他国家民族的双字节字符编码。</p>
<p>每个国家为了统一编码都会规定该国家/地区计算机信息交换用的字符集编码，为了解决本地字符信息的计算机处理，于是出现了各种本地化版本，引进LANG, Codepage 等概念。现在大部分具有国际化特征的软件核心字符处理都是以 Unicode 为基础的，在软件运行时根据当时的 Locale/Lang/Codepage 设置确定相应的本地字符编码设置，并依此处理本地字符。在处理过程中需要实现 Unicode 和本地字符集的相互转换。</p>
<p>同然，java内部采用的就是Unicode编码，所以在java运行的过程中就必然存在从Unicode编码与相应的计算机操作系统或者浏览器支持的编码格式相互转化的过程，这个转换的过程有一系列的步骤，如果某个步骤出现错误，则输出的文字就会是乱码。</p>
<p>所以产生java乱码的问题就在于JVM与对应的操作系统/浏览器进行编码格式转换时出现了错误。</p>
<p>其实要解决java乱码问题的方法还是比较简单的，但是要究其原因，理解背后的原理还是需要了解</p>
<p>其实解决 JAVA 程序中的汉字编码问题的方法往往很简单，但理解其背后的原因，定位问题，还需要了解现有的汉字编码和编码转换。</p>
<p>常见字符编码</p>
<p>计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。常见的字符编码主要包括：ASCII编码、GB**编码、Unicode。下面LZ就简单地介绍下！（为什么是简单介绍？因为LZ在网上查找资料想去了解字符编码时，发现这个问题比我想象的复杂太多了，所以LZ需要另起一篇详细介绍，所以各位看客就简单看看吧！！）</p>
<p>1.ASCII编码</p>
<p>ASCII，American Standard Code for Information Interchange，是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。它是现今最通用的单字节编码系统。</p>
<p>ASCII码使用指定的7位或者8为二进制数字组合表示128或者256种可能的字符。标准的ASCII编码使用的是7（2^7 = 128）位二进制数来表示所有的大小写字母、数字和标点符号已经一些特殊的控制字符，最前面的一位统一规定为0。其中0～31及127(共33个)是控制字符或通信专用字符，32～126(共95个)是字符(32是空格），其中48～57为0到9十个阿拉伯数字，65～90为26个大写英文字母，97～122号为26个小写英文字母，其余为一些标点符号、运算符号等。</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/040813305914025.png" alt=""></p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/040813449662800.png" alt=""></p>
<p>2.GBK<em>*</em>编码</p>
<p>ASCII最大的缺点就是显示字符有限，他虽然解决了部分西欧语言的显示问题，但是对更多的其他语言他实在是无能为了。随着计算机技术的发展，使用范围越来越广泛了，ASCII的缺陷越来越明显了，其他国家和地区需要使用计算机，必须要设计一套符合本国/本地区的编码规则。例如为了显示中文，我们就必须要设计一套编码规则用于将汉字转换为计算机可以接受的数字系统的数。</p>
<p>GB2312，用于汉字处理、汉字通信等系统之间的信息交换，通行于中国大陆。它的编码规则是：小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。虽然GB2312收录了这么多汉子，他所覆盖的使用率可以达到99%，但是对于那些不常见的汉字，例如人名、地名、古汉语，它就不能处理了，于是就有下面的GBK、GB 18030的出现。（点击GB2312简体中文编码表查看）。</p>
<p>GB18030，全称：国家标准GB 18030-2005《信息技术 中文编码字符集》,是我国计算机系统必须遵循的基础性标准之一,GB18030有两个版本：GB18030-2000和GB18030-2005。GB18030-2000是GBK的取代版本，它的主要特点是在GBK基础上增加了CJK统一汉字扩充A的汉字。</p>
<p>GB 18030主要有以下特点：</p>
<pre><code>与UTF-8相同，采用多字节编码，每个字可以由1个、2个或4个字节组成。

编码空间庞大，最多可定义161万个字符。

支持中国国内少数民族的文字，不需要动用造字区。

汉字收录范围包含繁体汉字以及日韩汉字
</code></pre><p>2014112400003</p>
<p>GBK，汉字编码标准之一，全称《汉字内码扩展规范》，它 向下与 GB 2312 编码兼容，向上支持 ISO 10646.1 国际标准，是前者向后者过渡过程中的一个承上启下的标准。它的编码范围如下图：</p>
<p>2014112400004</p>
<p>3.Unicode编码</p>
<p>正如前面前面所提到的一样，世界存在这么多国家，也存在着多种编码风格，像中文的GB232、GBK、GB18030，这样乱搞一套，虽然在本地运行没有问题，但是一旦出现在网络上，由于互不兼容，访问则会出现乱码。为了解决这个问题，伟大的Unicode编码腾空出世。</p>
<p>Unicode编码的作用就是能够使计算机实现夸平台、跨语言的文本转换和处理。它几乎包含了世界上所有的符号，并且每个符号都是独一无二的。在它的编码世界里，每一个数字代表一个符号，每一个符号代表了一个数字，不存在二义性。</p>
<p>Unicode编码又称统一码、万国码、单一码，它是业界的一种标准，是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。同时Unicode是字符集，它存在很多几种实现方式如：UTF-8、UTF-16.</p>
<p>UTF-8</p>
<p>互联网的普及，强烈要求出现一种统一的编码方式。UTF-8就是在互联网上使用最广的一种unicode的实现方式。其他实现方式还包括UTF-16和UTF-32，不过在互联网上基本不用。重复一遍：UTF-8是Unicode的实现方式之一。</p>
<p>UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。<br>UTF-8的编码规则很简单，只有两条：<br>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。<br>2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p>
<h2 id="java中文乱码解决之道（二）—–字符编码详解：基础知识-ASCII-GB"><a href="#java中文乱码解决之道（二）—–字符编码详解：基础知识-ASCII-GB" class="headerlink" title="java中文乱码解决之道（二）—–字符编码详解：基础知识 + ASCII + GB**"></a>java中文乱码解决之道（二）—–字符编码详解：基础知识 + ASCII + GB**</h2><p>在上篇博文（java中文乱码解决之道（一）—–认识字符集）中，LZ简单介绍了主流的字符编码，对各种编码都是点到为止，以下LZ将详细阐述字符集、字符编码等基础知识和ASCII、GB的详情。</p>
<p>一、基础知识</p>
<p>在了解各种字符集之前我们需要了解一些最基础的知识，如：编码、字符、字符集、字符编码基础知识。</p>
<p>编码</p>
<p>计算机中存储的信息都是用二进制表示的，我们在屏幕上所看到文字、图片等都是通过二进制转换的结果。编码是信息从一种形式或格式转换为另一种形式的过程，通俗点讲就是就是将我们看到的文字、图片等信息按照某种规则存储在计算机中，例如‘c’在计算机中怎么表达，‘陈’在计算机中怎么表达，这个过程就称之为编码。解码是编码的逆过程，它是将存储在计算机的二进制转换为我们可以看到的文字、图片等信息，它体现的是视觉上的刺激。</p>
<p>n位二进制数可以组合成2的n次方个不同的信息，给每个信息规定一个具体码组，这种过程也叫编码。</p>
<p>在编码和解码中，他们就如加密、解密一般，他们一定会遵循某个规则，即y  = f(x)，那么x = f(y)；否则在解密过程就会导致‘a’解析成‘b’或者乱码。</p>
<p>字符</p>
<p>字符是可使用多种不同字符方案或代码页来表示的抽象实体，它是一个单位的字形、类字形单位或符号的基本信息，也是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等。</p>
<p>字符是指计算机中使用的字母、数字、字和符号，包括：1、2、3、A、B、C、~！·#￥%……—*（）——+等等。在 ASCII 编码中，一个英文字母字符存储需要1个字节。在 GB 2312 编码或 GBK 编码中，一个汉字字符存储需要2个字节。在UTF-8编码中，一个英文字母字符存储需要1个字节，一个汉字字符储存需要3到4个字节。在UTF-16编码中，一个英文字母字符或一个汉字字符存储都需要2个字节（Unicode扩展区的一些汉字存储需要4个字节）。在UTF-32编码中，世界上任何字符的存储都需要4个字节。</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/050842153282426.png" alt=""></p>
<p>字符集</p>
<p>字符是各种文字和符号的总称，而字符集则是多个字符的集合，字符集种类较多，每个字符集包含的字符个数不同。而计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。</p>
<p>常见字符集名称：ASCII字符集、GB2312字符集、BIG5字符集、 GB18030字符集、Unicode字符集等。</p>
<p>字符编码</p>
<p>计算机中的信息包括数据信息和控制信息，然而不管是那种信息，他们都是以二进制编码的方式存入计算机中，但是他们是怎么展示在屏幕上的呢？同时在展现过程中如何才能保证他们不出错？这个时候字符编码就起到了重要作用！字符编码是一套规则，一套建立在符合集合与数字系统之间的对应关系之上的规则，它是信息处理的基本技术。</p>
<p>使用字符编码这套规则能够对自然语言的字符的一个集合（如字母表或音节表），与其他东西的一个集合（如号码或电脉冲）进行配对。</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/050842237035234.png" alt=""></p>
<p>二、ASCII</p>
<p>2.1、标准ASCII码</p>
<p>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语和其他西欧英语，它是现今最通用的单字节编码系统。</p>
<p>ASCII使用7位或者8位来表示128或者256种可能的字符。标准的ASCII码则是使用7位二进制数来表示所有的大小写字母、数字、标点符合和一些控制字符，其中：</p>
<p>0~31、127（共33个）是控制字符或者通信专用字符，如控制符：LF（换行）、CR（回车）、DEL（删除）等；通信专用字符：SOH（文头）、EOT（文尾）、ACK（确认）等。ASCII值为8、9、10、13分别表示退格、制表、换号、回车字符。</p>
<p>32~126（共95个）字符，32为空格、48~57为阿拉伯数字、65~90为大写字母、97~122为小写字母，其余为一些标点符号和运算符号！</p>
<p>前面提过标准的ASCII码是使用七位来表示字符的，而最高位（b7）则是用作奇偶校验的。所谓奇偶校验，是指在代码传送过程中用来检验是否出现错误的一种方法，一般分奇校验和偶校验两种。奇校验规定：正确的代码一个字节中1的个数必须是奇数，若非奇数，则在最高位b7添1；偶校验规定：正确的代码一个字节中1的个数必须是偶数，若非偶数，则在最高位b7添1。 （参考百度百科）</p>
<p>下面是ASCII字符对照表，更多详情请关注：》》 <a href="http://www.asciima.com/" target="_blank" rel="external">ASCII码表</a> 《《</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/050842597182265.png" alt=""></p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/050843159062454.png" alt=""></p>
<p>2.2、扩展ASCII码</p>
<p>标准的ASCII是用七位来表示的，那么它的缺陷就非常明显了：只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号，基本上只能应用于现代美国英语，对于其他国家，128个字符肯定不够。于是，这些欧洲国家决定利用字节中闲置的最高位编入新的符号，这样一来，可以表达的字符数最多就为256个，但是随着产生的问题也就来了：不同的国家有不同的字母，可能同一个编码在不同的国家所表示的字符不同。但是不管怎么样，在这些编码中0~127所表示的字符肯定是一样的，不一样的也只是128~255这一段。</p>
<p>8位的ASCII在欧洲国家表现的不尽人意，那么在其他国家就更加不用说了，我们拥有五千年历史文化的中华名族所包含的汉字多大10多万，不知道是多少个256。所以一个字节8位表示的256个字符肯定是不够的，那么两个字节呢？可能够了吧！我们常见的汉字就是用两个字节表示的，如GB2312。</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/050843193591866.jpg" alt=""></p>
<p>三、GB**</p>
<p>对于欧美国家来说，ASCII能够很好的满足用户的需求，但是当我们中华名族使用计算机时，ASCII明显就不满足需求了，有5000年历史文化的我们，拥有的汉字达到将近10万，所以为了显示中文，我们必须设计一套编码规则用于将汉字转换为计算机可以接受的数字系统的数。显示中文的常用字符编码有：GB2312、GBK、GB18030。</p>
<p>GB2312</p>
<p>GB2312，中国国家标准简体中文字符集，全称《信息交换用汉字编码字符集·基本集》，由中国国家标准总局发布，1981年5月1日实施。</p>
<p>GB2312编码的规则：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127 号以下的那些就叫”半角”字符了。</p>
<p>在GB2312中，GB2312共收录6763个汉字，其中一级汉字3755个，二级汉字3008个，还收录了拉丁字母、希腊字母、日文等682个全角字符。由于GB2312的出现，它基本上解决了我们日常的需要，它所收录的汉子已经覆盖了中国大陆99.75%的使用平率。但是我国文化博大精深，对于人名、古汉语等方面出现的罕用字，GB2312还是不能处理，于是后面的GBK和GB18030汉字字符集出现了。</p>
<p>GB2312字符集库非常庞大，详情：GB2312简体中文编码表。</p>
<p>GBK</p>
<p>GBK，全称《汉字内码扩展规范》，由中华人民共和国全国信息技术标准化技术委员会1995年12月1日制订，也是汉字编码的标准之一。</p>
<p>GBK是GB2312的扩展，他向下与GB2312兼容，，向上支持 ISO 10646.1 国际标准，是前者向后者过渡过程中的一个承上启下的标准。同时它是使用双字节编码方案，其编码范围从8140至FEFE（剔除xx7F），首字节在 81-FE 之间，尾字节在 40-FE 之间，共23940个码位，共收录了21003个汉字。</p>
<p>GB18030</p>
<p>GB18030，国家标准GB18030《信息技术 中文编码字符集》，是我国计算机系统必须遵循的基础性标准之一。它有两个版本：GB18030-2000、GB18030-2005。其中GB18030-2000仅规定了常用非汉字符号和27533个汉字（包括部首、部件等）的编码，而GB18030-2005是全文强制性标准，市场上销售的产品必须符合，它是GB18030-2000的基础上增加了42711个汉字和多种我国少数民族文字的编码。</p>
<p>GB18030标准采用单字节、双字节和四字节三种方式对字符编码。（码位总体结构见下图）</p>
<p>单字节部分采用GB/T 11383的编码结构与规则，使用0×00至0×7F码位(对应于ASCII码的相应码位)。双字节部分，首字节码位从0×81至0×FE，尾字节码位分别是0×40至0×7E和0×80至0×FE。四字节部分采用GB/T 11383未采用的0×30到0×39作为对双字节编码扩充的后缀，这样扩充的四字节编码，其范围为0×81308130到0×FE39FE39。其中第一、三个字节编码码位均为0×81至0×FE，第二、四个字节编码码位均为0×30至0×39。</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/050843234064163.jpg" alt=""></p>
<h2 id="java中文乱码解决之道（三）—–编码详情：伟大的创想—Unicode编码"><a href="#java中文乱码解决之道（三）—–编码详情：伟大的创想—Unicode编码" class="headerlink" title="java中文乱码解决之道（三）—–编码详情：伟大的创想—Unicode编码"></a>java中文乱码解决之道（三）—–编码详情：伟大的创想—Unicode编码</h2><p>随着计算机的发展、普及，世界各国为了适应本国的语言和字符都会自己设计一套自己的编码风格，正是由于这种乱，导致存在很多种编码方式，以至于同一个二进制数字可能会被解释成不同的符号。为了解决这种不兼容的问题，伟大的创想Unicode编码应时而生！！</p>
<p>Unicode</p>
<p>Unicode又称为统一码、万国码、单一码，它是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。可以想象Unicode作为一个“字符大容器”，它将世界上所有的符号都包含其中，并且每一个符号都有自己独一无二的编码，这样就从根本上解决了乱码的问题。所以Unicode是一种所有符号的编码[2]。</p>
<p>Unicode伴随着通用字符集的标准而发展，同时也以书本的形式对外发表，它是业界的标准，对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。Unicode至今仍在不断增修，迄今而至已收入超过十万个字符，它备受业界认可，并广泛地应用于电脑软件的国际化与本地化过程。</p>
<p>我们知道Unicode是为了解决传统的字符编码方案的局限而产生的，对于传统的编码方式而言，他们都存在一个共同的问题：无法支持多语言环境，这对于互联网这个开放的环境是不允许的。而目前几乎所有的电脑系统都支持基本拉丁字母，并各自支持不同的其他编码方式。Unicode为了和它们相互兼容，其首256字符保留给ISO 8859-1所定义的字符，使既有的西欧语系文字的转换不需特别考量；并且把大量相同的字符重复编到不同的字符码中去，使得旧有纷杂的编码方式得以和Unicode编码间互相直接转换，而不会丢失任何信息[1]。</p>
<p>实现方式</p>
<p>一个字符的Unicode编码是确定的，但是在实际传输过程中，由于不同系统平台的设计不一定一致，以及出于节省空间的目的，对Unicode编码的实现方式有所不同。Unicode的实现方式称为Unicode转换格式（Unicode Transformation Format，简称为UTF）[1]。</p>
<p>Unicode是字符集，它主要有UTF-8、UTF-16、UTF-32三种实现方式。由于UTF-8是目前主流的实现方式，UTF-16、UTF-32相对而言使用较少，所以下面就主要介绍UTF-8。</p>
<p>UCS</p>
<p>提到Unicode可能有必要了解下，UCS。UCS（Universal Character Set，通用字符集），是由ISO制定的ISO 10646（或称ISO/IEC 10646）标准所定义的标准字符集。它包括了其他所有字符集，保证了与其他字符集的双向兼容，即，如果你将任何文本字符串翻译到UCS格式，然后再翻译回原编码，你不会丢失任何信息。</p>
<p>UCS不仅给每个字符分配一个代码，而且赋予了一个正式的名字。表示一个UCS或Unicode值的十六进制数通常在前面加上“U+”，例如“U+0041”代表字符“A”。</p>
<p>Little endian &amp; Big endian</p>
<p>由于各个系统平台的设计不同，可能会导致某些平台对字符的理解不同（比如字节顺序的理解）。这时将会导致同意字节流可能会被解释为不同的内容。如某个字符的十六进制为4E59，拆分为4E、59，在MAC上读取时是欧诺个低位开始的，那么MAC在遇到该字节流时会被解析为594E，找到的字符为“奎”，但是在Windows平台是从高字节开始读取，为4E59，找到的字符为“乙”。也就是说在Windows平台保存的“乙”跑到MAC平台上就变成了“奎”。这样势必会引起混乱，于是在Unicode编码中采用了大头（Big endian）、小头（Little endian）两种方式来进行区分。即第一个字节在前，就是大头方式，第二个字节在前就是小头方式。那么这个时候就出现了一个问题：计算机怎么知道某个文件到底是采用哪种编码方式的呢？</p>
<p>Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做”零宽度非换行空格”（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。</p>
<p>如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。</p>
<p>UTF-8</p>
<p>UTF-8是一种针对Unicode的可变长度字符编码,可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。它可以用来表示Unicode标准中的任何字符，且其编码中的第一个字节仍与ASCII兼容，这使得原来处理ASCII字符的系统无须或只须做少部份修改，即可继续使用。因此，它逐渐成为电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。</p>
<p>UTF-8使用一到四个字节为每个字符编码，编码规则如下：</p>
<p>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</p>
<p>2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p>
<p>转换表如下：</p>
<p>Unicode</p>
<p>UTF-8</p>
<p>0000 ~007F</p>
<p>0XXX XXXX</p>
<p>0080 ~07FF</p>
<p>110X XXXX 10XX XXXX</p>
<p>0800 ~FFFF</p>
<p>1110XXXX 10XX XXXX 10XX XXXX</p>
<p>1 0000 ~1F FFFF</p>
<p>1111 0XXX 10XX XXXX 10XX XXXX 10XX XXXX</p>
<p>20 0000 ~3FF FFFF</p>
<p>1111 10XX 10XX XXXX 10XX XXXX 10XX XXXX 10XX XXXX</p>
<p>400 0000 ~7FFF FFFF</p>
<p>1111 110X 10XX XXXX 10XX XXXX 10XX XXXX 10XX XXXX 10XX XXXX</p>
<p>根据上面的转换表，理解UTF-8的转换编码规则就变得非常简单了：第一个字节的第一位如果为0，则表示这个字节单独就是一个字符;如果为1，连续多少个1就表示该字符占有多少个字节。</p>
<p>以汉字”严”为例，演示如何实现UTF-8编码[3]。</p>
<p>已知”严”的unicode是4E25（100111000100101），根据上表，可以发现4E25处在第三行的范围内（0000 0800-0000 FFFF），因此”严”的UTF-8编码需要三个字节，即格式是”1110xxxx 10xxxxxx 10xxxxxx”。然后，从”严”的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，”严”的UTF-8编码是”11100100 10111000 10100101”，转换成十六进制就是E4B8A5。</p>
<p>Unicode与UTF-8之间的转换</p>
<p>通过上面的例子我们可以看到”严”的Unicode码为4E25，UTF-8编码为E4B8A5，他们两者是不一样的，需要通过程序的转换来实现，在Window平台最简单的直观的方法就是记事本。</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/060826186874166.png" alt=""></p>
<p>在最下面的”编码（E）”处有四个选项：ANSI、Unicode、Unicode big endian、UTF-8。</p>
<p>ANSI：记事本的默认的编码方式，对于英文文件是ASCII编码，对于简体中文文件是GB2312编码。注意：不同 ANSI 编码之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中</p>
<p>Unicode：UCS-2编码方式，即直接用两个字节存入字符的Unicode码。该方式是”小头”little endian方式。</p>
<p>Unicode big endian：UCS-2编码方式，”大头”方式。</p>
<p>UTF-8：阅读上面（UTF-8）。</p>
<blockquote>
<blockquote>
<blockquote>
<p>实例：在记事本中输入”严”字，依次选择ANSI、Unicode、Unicode big endian、UTF-8四种编码风格，然后另存为，使用EditPlus文本工具使用”16进制查看器”进行查看，得到如下结果：</p>
</blockquote>
</blockquote>
</blockquote>
<p><img src="http://images.cnitblog.com/blog/381060/201501/060826285623716.png" alt=""></p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/060826298435757.png" alt=""></p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/060826305934128.png" alt=""></p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/060826312035541.png" alt=""></p>
<p>ANSI：两个字节”D1 CF”正是”严”的GB2312编码。</p>
<p>Unicode：四个字节”FF FE 25 4E”，其中”FF FE”表示小头存储方式，真正的编码为”25 4E”。</p>
<p>Unicode big endian：四个字节”FE FF 4E 25”，”FE FF”表示大头存储方式，真正编码为”4E 25”。</p>
<p>UTF-8：编码是六个字节”EF BB BF E4 B8 A5”，前三个字节”EF BB BF”表示这是UTF-8编码，后三个”E4B8A5”就是”严”的具体编码，它的存储顺序与编码顺序是一致的。</p>
<h2 id="java中文乱码解决之道（四）—–java编码转换过程"><a href="#java中文乱码解决之道（四）—–java编码转换过程" class="headerlink" title="java中文乱码解决之道（四）—–java编码转换过程"></a>java中文乱码解决之道（四）—–java编码转换过程</h2><p>前面三篇博客侧重介绍字符、编码问题，通过这三篇博客各位博友对各种字符编码有了一个初步的了解，要了解java的中文问题这是必须要了解的。但是了解这些仅仅只是一个开始，以下博客将侧重介绍java乱码是如何产生的、存在哪些乱码的情况、该如何从根本上解决乱码问题。各位随博主一起征服令人厌烦的java乱码问题吧！！！</p>
<p>java编码转换过程</p>
<p>我们总是用一个java类文件和用户进行最直接的交互（输入、输出），这些交互内容包含的文字可能会包含中文。无论这些java类是与数据库交互，还是与前端页面交互，他们的生命周期总是这样的：</p>
<p>1、程序员在操作系统上通过编辑器编写程序代码并且以.java的格式保存操作系统中，这些文件我们称之为源文件。</p>
<p>2、通过JDK中的javac.exe编译这些源文件形成.class类。</p>
<p>3、直接运行这些类或者部署在WEB容器中运行，得到输出结果。</p>
<p>这些过程是从宏观上面来观察的，了解这个肯定是不行的，我们需要真正来了解java是如何来编码和被解码的：</p>
<p>第一步：当我们用编辑器编写java源文件，程序文件在保存时会采用操作系统默认的编码格式（一般我们中文的操作系统采用的是GBK编码格式）形成一个.java文件。java源文件是采用操作系统默认支持的file.encoding编码格式保存的。下面代码可以查看系统的file.encoding参数值。</p>
<p>System.out.println(System.getProperty(“file.encoding”));<br>第二步：当我们使用javac.exe编译我们的java文件时，JDK首先会确认它的编译参数encoding来确定源代码字符集，如果我们不指定该编译参数，JDK首先会获取操作系统默认的file.encoding参数，然后JDK就会把我们编写的java源程序从file.encoding编码格式转化为JAVA内部默认的UNICODE格式放入内存中。</p>
<p>第三步：JDK将上面编译好的且保存在内存中信息写入class文件中，形成.class文件。此时.class文件是Unicode编码的，也就是说我们常见的.class文件中的内容无论是中文字符还是英文字符，他们都已经转换为Unicode编码格式了。</p>
<p>在这一步中对对JSP源文件的处理方式有点儿不同：WEB容器调用JSP编译器，JSP编译器首先会查看JSP文件是否设置了文件编码格式，如果没有设置则JSP编译器会调用调用JDK采用默认的编码方式将JSP文件转化为临时的servlet类，然后再编译为.class文件并保持到临时文件夹中。</p>
<p>第四步：运行编译的类：在这里会存在一下几种情况</p>
<p>1、直接在console上运行。</p>
<p>2、JSP/Servlet类。</p>
<p>3、java类与数据库之间。</p>
<p>这三种情况每种情况的方式都会不同，</p>
<p>1.Console上运行的类</p>
<p>这种情况下，JVM首先会把保存在操作系统中的class文件读入到内存中，这个时候内存中class文件编码格式为Unicode，然后JVM运行它。如果需要用户输入信息，则会采用file.encoding编码格式对用户输入的信息进行编码同时转换为Unicode编码格式保存到内存中。程序运行后，将产生的结果再转化为file.encoding格式返回给操作系统并输出到界面去。整个流程如下：</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/070910152968046.png" alt=""></p>
<p>在上面整个流程中，凡是涉及的编码转换都不能出现错误，否则将会产生乱码。</p>
<p>2.Servlet类</p>
<p>由于JSP文件最终也会转换为servlet文件（只不过存储的位置不同而已），所以这里我们也将JSP文件纳入其中。</p>
<p>当用户请求Servlet时，WEB容器会调用它的JVM来运行Servlet。首先JVM会把servlet的class加载到内存中去，内存中的servlet代码是Unicode编码格式的。然后JVM在内存中运行该Servlet，在运行过程中如果需要接受从客户端传递过来的数据（如表单和URL传递的数据），则WEB容器会接受传入的数据，在接收过程中如果程序设定了传入参数的的编码则采用设定的编码格式，如果没有设置则采用默认的ISO-8859-1编码格式，接收的数据后JVM会将这些数据进行编码格式转换为Unicode并且存入到内存中。运行Servlet后产生输出结果，同时这些输出结果的编码格式仍然为Unicode。紧接着WEB容器会将产生的Unicode编码格式的字符串直接发送置客户端，如果程序指定了输出时的编码格式，则按照指定的编码格式输出到浏览器，否则采用默认的ISO-8859-1编码格式。整个过程流程图如下：</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/070910186873945.png" alt=""></p>
<p>3.数据库部分</p>
<p>我们知道java程序与数据库的连接都是通过JDBC驱动程序来连接的，而JDBC驱动程序默认的是ISO-8859-1编码格式的，也就是说我们通过java程序向数据库传递数据时，JDBC首先会将Unicode编码格式的数据转换为ISO-8859-1的编码格式，然后在存储在数据库中，即在数据库保存数据时，默认格式为ISO-8859-1。</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/070910203756928.png" alt=""></p>
<h2 id="java中文乱码解决之道（五）—–java是如何编码解码的"><a href="#java中文乱码解决之道（五）—–java是如何编码解码的" class="headerlink" title="java中文乱码解决之道（五）—–java是如何编码解码的"></a>java中文乱码解决之道（五）—–java是如何编码解码的</h2><p>在上篇博客中LZ阐述了java各个渠道转码的过程，阐述了java在运行过程中那些步骤在进行转码，在这些转码过程中如果一处出现问题就很有可能会产生乱码！下面LZ就讲述java在转码过程中是如何来进行编码和解码操作的。</p>
<p>编码&amp;解码</p>
<p>在上篇博客中LZ阐述了三个渠道的编码转换过程，下面LZ将结束java在那些场合需要进行编码和解码操作，并详序中间的过程，进一步掌握java的编码和解码过程。在java中主要有四个场景需要进行编码解码操作：</p>
<p>1：I/O操作</p>
<p>2：内存</p>
<p>3：数据库</p>
<p>4：javaWeb</p>
<p>下面主要介绍前面两种场景，数据库部分只要设置正确编码格式就不会有什么问题，javaWeb场景过多需要了解URL、get、POST的编码，servlet的解码，所以javaWeb场景下节LZ介绍。</p>
<p>I/O操作</p>
<p>在前面LZ就提过乱码问题无非就是转码过程中编码格式的不统一产生的，比如编码时采用UTF-8，解码采用GBK，但最根本的原因是字符到字节或者字节到字符的转换出问题了，而这中情况的转换最主要的场景就是I/O操作的时候。当然I/O操作主要包括网络I/O（也就是javaWeb）和磁盘I/O。网络I/O下节介绍。</p>
<p>首先我们先看I/O的编码操作。</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/101407282656882.png" alt=""></p>
<p>InputStream为字节输入流的所有类的超类，Reader为读取字符流的抽象类。java读取文件的方式分为按字节流读取和按字符流读取，其中InputStream、Reader是这两种读取方式的超类。</p>
<p>按字节</p>
<p>我们一般都是使用InputStream.read()方法在数据流中读取字节（read()每次都只读取一个字节，效率非常慢，我们一般都是使用read(byte[])），然后保存在一个byte[]数组中，最后转换为String。在我们读取文件时，读取字节的编码取决于文件所使用的编码格式，而在转换为String过程中也会涉及到编码的问题，如果两者之间的编码格式不同可能会出现问题。例如存在一个问题test.txt编码格式为UTF-8，那么通过字节流读取文件时所获得的数据流编码格式就是UTF-8，而我们在转化成String过程中如果不指定编码格式，则默认使用系统编码格式（GBK）来解码操作，由于两者编码格式不一致，那么在构造String过程肯定会产生乱码，如下：</p>
<p>File file = new File(“C:\test.txt”);        InputStream input = new FileInputStream(file);        StringBuffer buffer = new StringBuffer();        byte[] bytes = new byte[1024];        for(int n ; (n = input.read(bytes))!=-1 ; ){            buffer.append(new String(bytes,0,n));        }        System.out.println(buffer);<br>输出结果：锘挎垜鏄?cm</p>
<p>test.txt中的内容为：我是 cm。</p>
<p>要想不出现乱码，在构造String过程中指定编码格式，使得编码解码时两者编码格式保持一致即可：</p>
<p>buffer.append(new String(bytes,0,n,”UTF-8”));<br>按字符</p>
<p>其实字符流可以看做是一种包装流，它的底层还是采用字节流来读取字节，然后它使用指定的编码方式将读取字节解码为字符。在java中Reader是读取字符流的超类。所以从底层上来看按字节读取文件和按字符读取没什么区别。在读取的时候字符读取每次是读取留个字节，字节流每次读取一个字节。</p>
<p>字节&amp;字符转换</p>
<p>字节转换为字符一定少不了InputStreamReader。API解释如下：InputStreamReader 是字节流通向字符流的桥梁：它使用指定的 charset 读取字节并将其解码为字符。它使用的字符集可以由名称指定或显式给定，或者可以接受平台默认的字符集。 每次调用 InputStreamReader 中的一个 read() 方法都会导致从底层输入流读取一个或多个字节。要启用从字节到字符的有效转换，可以提前从底层流读取更多的字节，使其超过满足当前读取操作所需的字节。API解释非常清楚，InputStreamReader在底层读取文件时仍然采用字节读取，读取字节后它需要根据一个指定的编码格式来解析为字符，如果没有指定编码格式则采用系统默认编码格式。</p>
<p>复制代码<br>String file = “C:\test.txt”;          String charset = “UTF-8”;          // 写字符换转成字节流         FileOutputStream outputStream = new FileOutputStream(file);          OutputStreamWriter writer = new OutputStreamWriter(outputStream, charset);          try {             writer.write(“我是 cm”);          } finally {             writer.close();          }                   // 读取字节转换成字符         FileInputStream inputStream = new FileInputStream(file);          InputStreamReader reader = new InputStreamReader(          inputStream, charset);          StringBuffer buffer = new StringBuffer();          char[] buf = new char[64];          int count = 0;          try {             while ((count = reader.read(buf)) != -1) {                 buffer.append(buf, 0, count);             }          } finally {             reader.close();          }         System.out.println(buffer);<br>复制代码<br>内存</p>
<p>首先我们看下面这段简单的代码</p>
<p>String s = “我是 cm”;          byte[] bytes = s.getBytes();          String s1 = new String(bytes,”GBK”);          String s2 = new String(bytes);<br>在这段代码中我们看到了三处编码转换过程（一次编码，两次解码）。先看String.getTytes():</p>
<p>public byte[] getBytes() {        return StringCoding.encode(value, 0, value.length);    }<br>内部调用StringCoding.encode()方法操作：</p>
<p>复制代码<br>static byte[] encode(char[] ca, int off, int len) {        String csn = Charset.defaultCharset().name();        try {            // use charset name encode() variant which provides caching.            return encode(csn, ca, off, len);        } catch (UnsupportedEncodingException x) {            warnUnsupportedCharset(csn);        }        try {            return encode(“ISO-8859-1”, ca, off, len);        } catch (UnsupportedEncodingException x) {            // If this code is hit during VM initialization, MessageUtils is            // the only way we will be able to get any kind of error message.            MessageUtils.err(“ISO-8859-1 charset not available: “                             + x.toString());            // If we can not find ISO-8859-1 (a required encoding) then things            // are seriously wrong with the installation.            System.exit(1);            return null;        }    }<br>复制代码<br>encode(char[] paramArrayOfChar, int paramInt1, int paramInt2)方法首先调用系统的默认编码格式，如果没有指定编码格式则默认使用ISO-8859-1编码格式进行编码操作，进一步深入如下：</p>
<p>String csn = (charsetName == null) ? “ISO-8859-1” : charsetName;<br>同样的方法可以看到new String 的构造函数内部是调用StringCoding.decode()方法：</p>
<p>public String(byte bytes[], int offset, int length, Charset charset) {        if (charset == null)            throw new NullPointerException(“charset”);        checkBounds(bytes, offset, length);        this.value =  StringCoding.decode(charset, bytes, offset, length);    }<br>decode方法和encode对编码格式的处理是一样的。</p>
<p>对于以上两种情况我们只需要设置统一的编码格式一般都不会产生乱码问题。</p>
<p>编码&amp;编码格式</p>
<p>首先先看看java编码类图[1]</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/101407294845410.jpg" alt=""></p>
<p>首先根据指定的chart设置ChartSet类，然后根据ChartSet创建ChartSetEncoder对象，最后再调用 CharsetEncoder.encode 对字符串进行编码，不同的编码类型都会对应到一个类中，实际的编码过程是在这些类中完成的。下面时序图展示详细的编码过程：</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/101407511565423.jpg" alt=""></p>
<p>通过这编码的类图和时序图可以了解编码的详细过程。下面将通过一段简单的代码对ISO-8859-1、GBK、UTF-8编码</p>
<p>复制代码<br>public class Test02 {    public static void main(String[] args) throws UnsupportedEncodingException {        String string = “我是 cm”;        Test02.printChart(string.toCharArray());        Test02.printChart(string.getBytes(“ISO-8859-1”));        Test02.printChart(string.getBytes(“GBK”));        Test02.printChart(string.getBytes(“UTF-8”));    }        /<strong>     <em> char转换为16进制     </em>/    public static void printChart(char[] chars){        for(int i = 0 ; i &lt; chars.length ; i++){            System.out.print(Integer.toHexString(chars[i]) + “ “);         }        System.out.println(“”);    }        /</strong>     <em> byte转换为16进制     </em>/    public static void printChart(byte[] bytes){        for(int i = 0 ; i &lt; bytes.length ; i++){            String hex = Integer.toHexString(bytes[i] &amp; 0xFF);              if (hex.length() == 1) {                hex = ‘0’ + hex;              }              System.out.print(hex.toUpperCase() + “ “);         }        System.out.println(“”);    }}————————-outPut:6211 662f 20 63 6d 3F 3F 20 63 6D CE D2 CA C7 20 63 6D E6 88 91 E6 98 AF 20 63 6D<br>复制代码<br>通过程序我们可以看到“我是 cm”的结果为：</p>
<p>char[]：6211 662f 20 63 6d</p>
<p>ISO-8859-1：3F 3F 20 63 6D<br>GBK：CE D2 CA C7 20 63 6D<br>UTF-8：E6 88 91 E6 98 AF 20 63 6D</p>
<p>图如下：</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/101407533287091.png" alt=""></p>
<p>更多&amp;参考文献</p>
<p>对于这两种场景我们只需要设置一致正确的编码一般都不会产生乱码问题，通过LZ上面的阐述对于java编码解码的过程应该会有一个比较清楚的认识。其实在java中产生乱码的主要场景是在javaWeb中，所以LZ下篇博文就来讲解javaWeb中的乱码产生情形。</p>
<p>1、Java 编程技术中汉字问题的分析及解决：<a href="http://www.ibm.com/developerworks/cn/java/java_chinese/。" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/java/java_chinese/。</a></p>
<h2 id="java中文乱码解决之道（六）—–javaWeb中的编码解码"><a href="#java中文乱码解决之道（六）—–javaWeb中的编码解码" class="headerlink" title="java中文乱码解决之道（六）—–javaWeb中的编码解码"></a>java中文乱码解决之道（六）—–javaWeb中的编码解码</h2><p>在上篇博客中LZ介绍了前面两种场景（IO、内存）中的java编码解码操作，其实在这两种场景中我们只需要在编码解码过程中设置正确的编码解码方式一般而言是不会出现乱码的。对于我们从事java开发的人而言，其实最容易也是产生乱码最多的地方就是web部分。首先我们来看在javaWeb中有哪些地方存在编码转换操作。</p>
<p>编码&amp;解码</p>
<p>通过下图我们可以了解在javaWeb中有哪些地方有转码：</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/130915002928345.png" alt=""></p>
<p>用户想服务器发送一个HTTP请求，需要编码的地方有url、cookie、parameter，经过编码后服务器接受HTTP请求，解析HTTP请求，然后对url、cookie、parameter进行解码。在服务器进行业务逻辑处理过程中可能需要读取数据库、本地文件或者网络中的其他文件等等，这些过程都需要进行编码解码。当处理完成后，服务器将数据进行编码后发送给客户端，浏览器经过解码后显示给用户。在这个整个过程中涉及的编码解码的地方较多，其中最容易出现乱码的位置就在于服务器与客户端进行交互的过程。</p>
<p>上面整个过程可以概括成这样，页面编码数据传递给服务器，服务器对获得的数据进行解码操作，经过一番业务逻辑处理后将最终结果编码处理后传递给客户端，客户端解码展示给用户。所以下面我就请求对javaweb的编码&amp;解码进行阐述。</p>
<p>请求</p>
<p>客户端想服务器发送请求无非就通过四中情况：</p>
<p>1、URL方式直接访问。</p>
<p>2、页面链接。</p>
<p>3、表单get提交</p>
<p>4、表单post提交</p>
<p>URL方式</p>
<p>对于URL，如果该URL中全部都是英文的那倒是没有什么问题，如果有中文就要涉及到编码了。如何编码？根据什么规则来编码？又如何来解码呢？下面LZ将一一解答！首先看URL的组成部分：</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/130915019792329.png" alt=""></p>
<p>在这URL中浏览器将会对path和parameter进行编码操作。为了更好地解释编码过程，使用如下URL</p>
<p><a href="http://127.0.0.1:8080/perbank/我是cm?name=我是cm" target="_blank" rel="external">http://127.0.0.1:8080/perbank/我是cm?name=我是cm</a></p>
<p>将以上地址输入到浏览器URL输入框中，通过查看http 报文头信息我们可以看到浏览器是如何进行编码的。下面是IE、Firefox、Chrome三个浏览器的编码情况：</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/130915064954784.png" alt=""></p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/130915102455638.png" alt=""></p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/130915119171095.png" alt=""></p>
<p>可以看到各大浏览器对“我是”的编码情况如下：</p>
<p>path部分</p>
<p>Query String</p>
<p>Firefox</p>
<p>E6 88 91 E6 98 AF</p>
<p>E6 88 91 E6 98 AF</p>
<p>Chrome</p>
<p>E6 88 91 E6 98 AF</p>
<p>E6 88 91 E6 98 AF</p>
<p>IE</p>
<p>E6 88 91 E6 98 AF</p>
<p>CE D2 CA C7</p>
<p>查阅上篇博客的编码可知对于path部分Firefox、chrome、IE都是采用UTF-8编码格式，对于Query String部分Firefox、chrome采用UTF-8，IE采用GBK。至于为什么会加上%，这是因为URL的编码规范规定浏览器将ASCII字符非 ASCII 字符按照某种编码格式编码成 16 进制数字然后将每个 16 进制表示的字节前加上“%”。</p>
<p>当然对于不同的浏览器，相同浏览器不同版本，不同的操作系统等环境都会导致编码结果不同，上表某一种情况，对于URL编码规则下任何结论都是过早的。由于各大浏览器、各个操作系统对URL的URI、QueryString编码都可能存在不同，这样对服务器的解码势必会造成很大的困扰，下面我们将已tomcat，看tomcat是如何对URL进行解码操作的。</p>
<p>解析请求的 URL 是在 org.apache.coyote.HTTP11.InternalInputBuffer 的 parseRequestLine 方法中，这个方法把传过来的 URL 的 byte[] 设置到 org.apache.coyote.Request 的相应的属性中。这里的 URL 仍然是 byte 格式，转成 char 是在 org.apache.catalina.connector.CoyoteAdapter 的 convertURI 方法中完成的：</p>
<p>复制代码<br>protected void convertURI(MessageBytes uri, Request request)              throws Exception {                     ByteChunk bc = uri.getByteChunk();                     int length = bc.getLength();                     CharChunk cc = uri.getCharChunk();                     cc.allocate(length, -1);                     String enc = connector.getURIEncoding();     //获取URI解码集                    if (enc != null) {                         B2CConverter conv = request.getURIConverter();                         try {                             if (conv == null) {                                 conv = new B2CConverter(enc);                                 request.setURIConverter(conv);                             }                         } catch (IOException e) {…}                         if (conv != null) {                             try {                                 conv.convert(bc, cc, cc.getBuffer().length - cc.getEnd());                                 uri.setChars(cc.getBuffer(), cc.getStart(), cc.getLength());                                 return;                             } catch (IOException e) {…}                         }                     }                     // Default encoding: fast conversion                     byte[] bbuf = bc.getBuffer();                     char[] cbuf = cc.getBuffer();                     int start = bc.getStart();                     for (int i = 0; i &lt; length; i++) {                         cbuf[i] = (char) (bbuf[i + start] &amp; 0xff);                     }                     uri.setChars(cbuf, 0, length);     }<br>复制代码<br>从上面的代码可知，对URI的解码操作是首先获取Connector的解码集，该配置在server.xml中</p>
<p><connector uriencoding="utf-8"><br>如果没有定义则会采用默认编码ISO-8859-1来解析。</connector></p>
<p>对于Query String部分，我们知道无论我们是通过get方式还是POST方式提交，所有的参数都是保存在Parameters，然后我们通过request.getParameter，解码工作就是在第一次调用getParameter方法时进行的。在getParameter方法内部它调用org.apache.catalina.connector.Request 的 parseParameters 方法，这个方法将会对传递的参数进行解码。下面代码只是parseParameters方法的一部分：</p>
<p>复制代码<br>          //获取编码             String enc = getCharacterEncoding();            //获取ContentType 中定义的 Charset            boolean useBodyEncodingForURI = connector.getUseBodyEncodingForURI();            if (enc != null) {    //如果设置编码不为空，则设置编码为enc                parameters.setEncoding(enc);                if (useBodyEncodingForURI) {   //如果设置了Chartset，则设置queryString的解码为ChartSet                    parameters.setQueryStringEncoding(enc);                    }            } else {     //设置默认解码方式                parameters.setEncoding(org.apache.coyote.Constants.DEFAULT_CHARACTER_ENCODING);                if (useBodyEncodingForURI) {                    parameters.setQueryStringEncoding(org.apache.coyote.Constants.DEFAULT_CHARACTER_ENCODING);                }            }<br>复制代码<br>从上面代码可以看出对query String的解码格式要么采用设置的ChartSet要么采用默认的解码格式ISO-8859-1。注意这个设置的ChartSet是在 http Header中定义的ContentType，同时如果我们需要改指定属性生效，还需要进行如下配置：</p>
<p><connector uriencoding="UTF-8" usebodyencodingforuri="true"><br>上面部分详细介绍了URL方式请求的编码解码过程。其实对于我们而言，我们更多的方式是通过表单的形式来提交。</connector></p>
<p>表单GET</p>
<p>我们知道通过URL方式提交数据是很容易产生乱码问题的，所以我们更加倾向于通过表单形式。当用户点击submit提交表单时，浏览器会更加设定的编码来编码数据传递给服务器。通过GET方式提交的数据都是拼接在URL后面（可以当做query String？？）来提交的，所以tomcat服务器在进行解码过程中URIEncoding就起到作用了。tomcat服务器会根据设置的URIEncoding来进行解码，如果没有设置则会使用默认的ISO-8859-1来解码。假如我们在页面将编码设置为UTF-8，而URIEncoding设置的不是或者没有设置，那么服务器进行解码时就会产生乱码。这个时候我们一般可以通过new String(request.getParameter(“name”).getBytes(“iso-8859-1”),”utf-8”) 的形式来获取正确数据。</p>
<p>表单POST</p>
<p>对于POST方式，它采用的编码也是由页面来决定的即contentType。当我通过点击页面的submit按钮来提交表单时，浏览器首先会根据ontentType的charset编码格式来对POST表单的参数进行编码然后提交给服务器，在服务器端同样也是用contentType中设置的字符集来进行解码（这里与get方式就不同了），这就是通过POST表单提交的参数一般而言都不会出现乱码问题。当然这个字符集编码我们是可以自己设定的：request.setCharacterEncoding(charset) 。</p>
<h2 id="java中文乱码解决之道（七）—–JSP页面编码过程"><a href="#java中文乱码解决之道（七）—–JSP页面编码过程" class="headerlink" title="java中文乱码解决之道（七）—–JSP页面编码过程"></a>java中文乱码解决之道（七）—–JSP页面编码过程</h2><p>我们知道JSP页面是需要转换为servlet的，在转换过程中肯定是要进行编码的。在JSP转换为servlet过程中下面一段代码起到至关重要的作用。</p>
<p>&lt;%@ page language=”java” contentType=”text/html; charset=UTF-8” pageEncoding=”GBK” %&gt;<br>在上面代码中有两个地方存在编码：pageEncoding、contentType的charset。其中pageEncoding是jsp文件本身的编码，而contentType的charset是指服务器发送给客户端时的内容编码。</p>
<p>在前面一篇博客中就提到过（java中文乱码解决之道（四）—–java编码转换过程）jsp在转换为Servlet的过程中是需要经过主要的三次编码转换过程（除去数据库编码转换、页面参数输入编码转换）：</p>
<p>第一次：转换为.java文件；</p>
<p>第二次：转换为.class文件；</p>
<p>第三次：业务逻辑处理后输出。</p>
<p>第一阶段</p>
<p>JVM将JSP编译为.jsp文件。在这个过程中pageEncoding就起到作用了，JVM首先会获取pageEncoding的值，如果该值存在则采用它设定的编码来编译，否则则采用file.encoding编码来编译。</p>
<p>第二阶段</p>
<p>JVM将.java文件转换为.class文件。在这个过程就与任何编码的设置都没有关系了，不管JSP采用了什么样的编码格式都将无效。经过这个阶段后.jsp文件就转换成了统一的Unicode格式的.class文件了。</p>
<p>第三阶段</p>
<p>后台经过业务逻辑处理后将产生的结果输出到客户端。在这个过程中contentType的charset就发挥了功效。如果设置了charset则浏览器就会使用指定的编码格式进行解码，否则采用默认的ISO-8859-1编码格式进行解码处理。<br>流程如如下：</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/200900337195704.jpg" alt=""></p>
<h2 id="java中文乱码解决之道（八）—–解决URL中文乱码问题"><a href="#java中文乱码解决之道（八）—–解决URL中文乱码问题" class="headerlink" title="java中文乱码解决之道（八）—–解决URL中文乱码问题"></a>java中文乱码解决之道（八）—–解决URL中文乱码问题</h2><p>我们主要通过两种形式提交向服务器发送请求：URL、表单。而表单形式一般都不会出现乱码问题，乱码问题主要是在URL上面。通过前面几篇博客的介绍我们知道URL向服务器发送请求编码过程实在是实在太混乱了。不同的操作系统、不同的浏览器、不同的网页字符集，将导致完全不同的编码结果。如果程序员要把每一种结果都考虑进去，是不是太恐怖了？有没有办法，能够保证客户端只用一种编码方法向服务器发出请求？</p>
<p>有！这里我主要提供以下几种方法</p>
<p>一、javascript</p>
<p>使用javascript编码不给浏览器插手的机会，编码之后再向服务器发送请求，然后在服务器中解码。在掌握该方法的时候，我们需要料及javascript编码的三个方法：escape()、encodeURI()、encodeURIComponent()。</p>
<p>escape</p>
<p>采用SIO Latin字符集对指定的字符串进行编码。所有非ASCII字符都会被编码为%xx格式的字符串，其中xx表示该字符在字符集中所对应的16进制数字。例如，格式对应的编码为%20。它对应的解码方法为unescape()。</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/151917069013985.png" alt=""></p>
<p>事实上escape()不能直接用于URL编码，它的真正作用是返回一个字符的Unicode编码值。比如上面“我是cm”的结果为%u6211%u662Fcm，其中“我”对应的编码为6211，“是”的编码为662F，“cm”编码为cm。</p>
<p>注意，escape()不对”+”编码。但是我们知道，网页在提交表单的时候，如果有空格，则会被转化为+字符。服务器处理数据的时候，会把+号处理成空格。所以，使用的时候要小心。</p>
<p>encodeURI</p>
<p>对整个URL进行编码，它采用的是UTF-8格式输出编码后的字符串。不过encodeURI除了ASCII编码外对于一些特殊的字符也不会进行编码如：! @ # $&amp; * ( ) = : / ; ? + ‘。</p>
<p><img src="http://images.cnitblog.com/blog/381060/201501/210902582502811.png" alt=""></p>
<p>encodeURIComponent()</p>
<p>把URI字符串采用UTF-8编码格式转化成escape格式的字符串。相对于encodeURI，encodeURIComponent会更加强大，它会对那些在encodeURI()中不被编码的符号（; / ? : @ &amp; = + $ , #）统统会被编码。但是encodeURIComponent只会对URL的组成部分进行个别编码，而不用于对整个URL进行编码。对应解码函数方法decodeURIComponent。</p>
<p>当然我们一般都是使用encodeURI方来进行编码操作。所谓的javascript两次编码后台两次解码就是使用该方法。javascript解决该问题有一次转码、两次转码两种解决方法。</p>
<p>一次转码</p>
<p>javascript转码：</p>
<p>var url = ‘<s:property value="webPath">/ShowMoblieQRCode.servlet?name=我是cm’;window.location.href = encodeURI(url);<br>转码后的URL：<a href="http://127.0.0.1:8080/perbank/ShowMoblieQRCode.servlet?name=%E6%88%91%E6%98%AFcm" target="_blank" rel="external">http://127.0.0.1:8080/perbank/ShowMoblieQRCode.servlet?name=%E6%88%91%E6%98%AFcm</a></s:property></p>
<p>后台处理:</p>
<p>String name = request.getParameter(“name”);        System.out.println(“前台传入参数：” + name);        name  = new String(name.getBytes(“ISO-8859-1”),”UTF-8”);        System.out.println(“经过解码后参数：” + name);<br>输出结果：</p>
<p>前台传入参数：??????cm<br>经过解码后参数：我是cm</p>
<p>二次转码</p>
<p>javascript</p>
<p>var url = ‘<s:property value="webPath">/ShowMoblieQRCode.servlet?name=我是cm’;window.location.href = encodeURI(encodeURI(url));<br>转码后的url:<a href="http://127.0.0.1:8080/perbank/ShowMoblieQRCode.servlet?name=%25E6%2588%2591%25E6%2598%25AFcm" target="_blank" rel="external">http://127.0.0.1:8080/perbank/ShowMoblieQRCode.servlet?name=%25E6%2588%2591%25E6%2598%25AFcm</a></s:property></p>
<p>后台处理：</p>
<pre><code>String name = request.getParameter(&quot;name&quot;);        System.out.println(&quot;前台传入参数：&quot; + name);        name  = URLDecoder.decode(name,&quot;UTF-8&quot;);        System.out.println(&quot;经过解码后参数：&quot; + name);
</code></pre><p>输出结果：</p>
<p>前台传入参数：E68891E698AFcm</p>
<p>经过解码后参数：我是cm</p>
<p>filter</p>
<p>使用过滤器，过滤器LZ提供两种，第一种设置编码，第二种直接在过滤器中进行解码操作。</p>
<p>过滤器1</p>
<p>该过滤器是直接设置request的编码格式的。</p>
<p>复制代码<br>public class CharacterEncoding implements Filter {    private FilterConfig config ;    String encoding = null;        public void destroy() {        config = null;    }    public void doFilter(ServletRequest request, ServletResponse response,            FilterChain chain) throws IOException, ServletException {        request.setCharacterEncoding(encoding);        chain.doFilter(request, response);    }    public void init(FilterConfig config) throws ServletException {        this.config = config;        //获取配置参数        String str = config.getInitParameter(“encoding”);        if(str!=null){            encoding = str;        }    }}<br>复制代码<br>配置：</p>
<p>复制代码<br><!-- 中文过滤器的配置 -->    <filter>        <filter-name>chineseEncoding</filter-name>        <filter-class>com.test.filter.CharacterEncoding</filter-class>                <init-param>            <param-name>encoding</param-name>            <param-value>utf-8</param-value>        </init-param>    </filter>        <filter-mapping>        <filter-name>chineseEncoding</filter-name>        <url-pattern>/*</url-pattern>    </filter-mapping><br>复制代码<br>过滤器2</p>
<p>该过滤器在处理方法中将参数直接进行解码操作，然后将解码后的参数重新设置到request的attribute中。</p>
<p>复制代码<br>public class CharacterEncoding implements Filter {    protected FilterConfig filterConfig ;    String encoding = null;        public void destroy() {        this.filterConfig = null;    }    /<strong>     <em> 初始化     </em>/    public void init(FilterConfig filterConfig) {        this.filterConfig = filterConfig;    }    /</strong>     <em> 将 inStr 转为 UTF-8 的编码形式     </em>      <em> @param inStr 输入字符串     </em> @return UTF - 8 的编码形式的字符串     <em> @throws UnsupportedEncodingException     </em>/    private String toUTF(String inStr) throws UnsupportedEncodingException {        String outStr = “”;        if (inStr != null) {            outStr = new String(inStr.getBytes(“iso-8859-1”), “UTF-8”);        }        return outStr;    }    /<em>*     </em> 中文乱码过滤处理     */    public void doFilter(ServletRequest servletRequest,            ServletResponse servletResponse, FilterChain chain) throws IOException,            ServletException {        HttpServletRequest request = (HttpServletRequest) servletRequest;        HttpServletResponse response = (HttpServletResponse) servletResponse;        // 获得请求的方式 (1.post or 2.get), 根据不同请求方式进行不同处理        String method = request.getMethod();        // 1. 以 post 方式提交的请求 , 直接设置编码为 UTF-8        if (method.equalsIgnoreCase(“post”)) {            try {                request.setCharacterEncoding(“UTF-8”);            } catch (UnsupportedEncodingException e) {                e.printStackTrace();            }        }        // 2. 以 get 方式提交的请求        else {            // 取出客户提交的参数集            Enumeration<string> paramNames = request.getParameterNames();            // 遍历参数集取出每个参数的名称及值            while (paramNames.hasMoreElements()) {                String name = paramNames.nextElement(); // 取出参数名称                String values[] = request.getParameterValues(name); // 根据参数名称取出其值                // 如果参数值集不为空                if (values != null) {                    // 遍历参数值集                    for (int i = 0; i &lt; values.length; i++) {                        try {                            // 回圈依次将每个值调用 toUTF(values[i]) 方法转换参数值的字元编码                            String vlustr = toUTF(values[i]);                            values[i] = vlustr;                        } catch (UnsupportedEncodingException e) {                            e.printStackTrace();                        }                    }                    // 将该值以属性的形式藏在 request                    request.setAttribute(name, values);                }            }        }        // 设置响应方式和支持中文的字元集        response.setContentType(“text/html;charset=UTF-8”);        // 继续执行下一个 filter, 无一下个 filter 则执行请求        chain.doFilter(request, response);    }}<br>复制代码<br>配置：</string></p>
<p><!-- 中文过滤器的配置 -->    <filter>        <filter-name>chineseEncoding</filter-name>        <filter-class>com.test.filter.CharacterEncoding</filter-class>    </filter>        <filter-mapping>        <filter-name>chineseEncoding</filter-name>        <url-pattern>/*</url-pattern>    </filter-mapping><br>其他</p>
<p>1、设置pageEncoding、contentType</p>
<p>&lt;%@ page language=”java” contentType=”text/html;charset=UTF-8” pageEncoding=”UTF-8”%&gt;<br>2、设置tomcat的URIEncoding</p>
<p>在默认情况下，tomcat服务器使用的是ISO-8859-1编码格式来编码的，URIEncoding参数对get请求的URL进行编码，所以我们只需要在tomcat的server.xml文件的<connector>标签中加上URIEncoding=”utf-8”即可。</connector></p>
<h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p>字符集和字符编码：<a href="http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html" target="_blank" rel="external">http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html</a><br>百度百科 ASCII:<a href="http://baike.baidu.com/view/15482.htm" target="_blank" rel="external">http://baike.baidu.com/view/15482.htm</a><br>百度百科：GB2312：<a href="http://baike.baidu.com/view/443268.htm?fromtitle=GB2312&amp;fromid=483170&amp;type=syn" target="_blank" rel="external">http://baike.baidu.com/view/443268.htm?fromtitle=GB2312&amp;fromid=483170&amp;type=syn</a><br>百度百科：GB18030：<a href="http://baike.baidu.com/view/889058.htm" target="_blank" rel="external">http://baike.baidu.com/view/889058.htm</a><br>百度百科：GBK：<a href="http://baike.baidu.com/view/931619.htm?fromtitle=GBK&amp;fromid=481954&amp;type=search" target="_blank" rel="external">http://baike.baidu.com/view/931619.htm?fromtitle=GBK&amp;fromid=481954&amp;type=search</a><br>百度百科：Unicode：<a href="http://baike.baidu.com/view/40801.htm" target="_blank" rel="external">http://baike.baidu.com/view/40801.htm</a><br>百度百科：UTF-8：<a href="http://baike.baidu.com/view/25412.htm" target="_blank" rel="external">http://baike.baidu.com/view/25412.htm</a><br>编码：<a href="http://baike.baidu.com/subview/237708/11062012.htm（百度百科）" target="_blank" rel="external">http://baike.baidu.com/subview/237708/11062012.htm（百度百科）</a><br>字符：<a href="http://baike.baidu.com/view/263416.htm（百度百科）" target="_blank" rel="external">http://baike.baidu.com/view/263416.htm（百度百科）</a><br>字符集：<a href="http://baike.baidu.com/view/51987.htm（百度百科）" target="_blank" rel="external">http://baike.baidu.com/view/51987.htm（百度百科）</a><br>字符编码：<a href="http://baike.baidu.com/view/1204863.htm（百度百科）" target="_blank" rel="external">http://baike.baidu.com/view/1204863.htm（百度百科）</a><br>字符集和字符编码：<a href="http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html（吴秦）" target="_blank" rel="external">http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html（吴秦）</a><br>ASCII：<a href="http://baike.baidu.com/view/15482.htm" target="_blank" rel="external">http://baike.baidu.com/view/15482.htm</a><br>GB2312：<a href="http://baike.baidu.com/view/443268.htm" target="_blank" rel="external">http://baike.baidu.com/view/443268.htm</a><br>GBK：<a href="http://baike.baidu.com/view/931619.htm" target="_blank" rel="external">http://baike.baidu.com/view/931619.htm</a><br>GB18030：<a href="http://baike.baidu.com/view/889058.htm" target="_blank" rel="external">http://baike.baidu.com/view/889058.htm</a><br>1、Unicode维基百科：<a href="http://zh.wikipedia.org/wiki/Unicode" target="_blank" rel="external">http://zh.wikipedia.org/wiki/Unicode</a><br>2、Unicode百度百科：<a href="http://baike.baidu.com/view/40801.htm" target="_blank" rel="external">http://baike.baidu.com/view/40801.htm</a><br>3、字符编码笔记：ASCII，Unicode和UTF-8：<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a><br>4、UTF-8百度百科：<a href="http://baike.baidu.com/view/25412.htm" target="_blank" rel="external">http://baike.baidu.com/view/25412.htm</a></p>
<p> 1、字符编码笔记：ASCII，Unicode和UTF-8：<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a><br>2、字符集和字符编码：<a href="http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html（吴秦）" target="_blank" rel="external">http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html（吴秦）</a><br>3、Java 编程技术中汉字问题的分析及解决：<a href="http://www.ibm.com/developerworks/cn/java/java_chinese/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/java/java_chinese/</a><br>—–原文出自:<a href="http://cmsblogs.com/?p=1530,请尊重作者辛勤劳动成果,转载说明出处" target="_blank" rel="external">http://cmsblogs.com/?p=1530,请尊重作者辛勤劳动成果,转载说明出处</a>.<br>—–个人站点:<a href="http://cmsblogs.com" target="_blank" rel="external">http://cmsblogs.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://images.cnitblog.com/blog/381060/201501/101407282656882.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;出处：&lt;a href=&quot;http://www.cnblogs.com/chenssy/&quot;&gt;树上月&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;出现乱码的原因各式各样但根本原因就是编码转换过程中的格式不一样，所以我们只需要了解了java在运行过程中是如何来完成编码和解码的，乱码也许就真不是什么问题了。&lt;/p&gt;
&lt;p&gt;在前面三篇博客中LZ说明了各种编码的来由、编码规则，尤其是Unicode编码更是重点阐述。接着两篇是说明java内部是如何来完成编码解码工作的，分三种情况（IO、servlet/JSP、数据库）来阐述编码转换过程。最后就是java产生乱码的重灾区了：javaWeb，在这几篇博客中LZ介绍了URL编码，服务器端是如何来完成了解码工作的，JSP在转换过程中编码情况，URL产生乱码情况总结。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/chenssy/p/4200277.html&quot;&gt;JAVA中文乱码解决之道（一）—–认识字符集&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/chenssy/p/4202688.html&quot;&gt;JAVA中文乱码解决之道（二）—–字符编码详解：基础知识 + ASCII + GB**&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/chenssy/p/4205130.html&quot;&gt;JAVA中文乱码解决之道（三）—–编码详情：伟大的创想—Unicode编码&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/chenssy/p/4207554.html&quot;&gt;java中文乱码解决之道（四）—–java编码转换过程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/chenssy/p/4214835.html&quot;&gt;java中文乱码解决之道（五）—–java是如何编码解码的&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/chenssy/p/4220400.html&quot;&gt;Java中文乱码解决之道（六）—–javaWeb中的编码解码&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/chenssy/p/4235191.html&quot;&gt;java中文乱码解决之道（七）—–JSP页面编码过程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/chenssy/p/4237953.html&quot;&gt;java中文乱码解决之道（八）—–解决URL中文乱码问题&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="Charset" scheme="http://ipcreator.me/tags/Charset/"/>
    
      <category term="ASCII" scheme="http://ipcreator.me/tags/ASCII/"/>
    
      <category term="GBK" scheme="http://ipcreator.me/tags/GBK/"/>
    
      <category term="Unicode" scheme="http://ipcreator.me/tags/Unicode/"/>
    
      <category term="UTF8" scheme="http://ipcreator.me/tags/UTF8/"/>
    
  </entry>
  
  <entry>
    <title>Java Douban Crawler</title>
    <link href="http://ipcreator.me/2017/03/10/Program/Java/java-crawler/"/>
    <id>http://ipcreator.me/2017/03/10/Program/Java/java-crawler/</id>
    <published>2017-03-10T02:08:06.000Z</published>
    <updated>2017-03-27T09:58:41.991Z</updated>
    
    <content type="html"><![CDATA[<p>原文作者：<a href="http://www.cnblogs.com/bigdataZJ/p/doubanmovie3.html" target="_blank" rel="external">杰锅锅（Jackie）</a></p>
<p>源码已经上传至Github：<a href="https://github.com/DMinerJackie/JewelCrawler" target="_blank" rel="external">https://github.com/DMinerJackie/JewelCrawler</a></p>
<p>Word2Vec是什么，有什么用，怎么用<br>常用的中文分词器以及具体用法，如何加载停用词库等<br>Word2Vec如何训练数据得到模型<br>Word2Vec如何使用训练的模型分析有趣的维度</p>
 <a id="more"></a>
<p>Word2Ve是google 推出的做词嵌入（word embedding）的开源工具。 简单的说，它在给定的语料库上训练一个模型，然后会输出所有出现在语料库上的单词的向量表示，这个向量称为”word embedding”。基于这个向量表示，可以计算词与词之间的关系，例如相似性(同义词等)，语义关联性（中国 - 北京 = 英国 - 伦敦）等。</p>
<p>算法的原理如果有兴趣，可以找资料了解。<br>这里使用Word2Vec的大致流程如下：</p>
<ol>
<li>获取数据（这里是豆瓣电影短评数据）</li>
<li>数据处理（将短评数据使用分词器分词，并以空格连接分词结果）</li>
<li>训练数据（将上述处理好符合要求的数据作为输入进行训练，得到训练模型）</li>
<li>载入训练模型，分析感兴趣的维度（比如，近义词分词，关联词分析）<br>Github： <a href="https://github.com/NLPchina/Word2VEC_java" target="_blank" rel="external">https://github.com/NLPchina/Word2VEC_java</a></li>
</ol>
<p>开发工具：Intellij idea 14<br>数据库: Mysql 5.5 + 数据库管理工具Navicat（可用来连接查询数据库）<br>语言：Java<br>Jar包管理：Maven<br>版本管理：Git<br>IKAnalyzer完成了短评分词<br>通过Jsoup和正则表达式来解析相应字段</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文作者：&lt;a href=&quot;http://www.cnblogs.com/bigdataZJ/p/doubanmovie3.html&quot;&gt;杰锅锅（Jackie）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;源码已经上传至Github：&lt;a href=&quot;https://github.com/DMinerJackie/JewelCrawler&quot;&gt;https://github.com/DMinerJackie/JewelCrawler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Word2Vec是什么，有什么用，怎么用&lt;br&gt;常用的中文分词器以及具体用法，如何加载停用词库等&lt;br&gt;Word2Vec如何训练数据得到模型&lt;br&gt;Word2Vec如何使用训练的模型分析有趣的维度&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="Crawler" scheme="http://ipcreator.me/tags/Crawler/"/>
    
  </entry>
  
  <entry>
    <title>Knowledge of JVM</title>
    <link href="http://ipcreator.me/2017/03/09/Program/Java/senior-engineer-java/"/>
    <id>http://ipcreator.me/2017/03/09/Program/Java/senior-engineer-java/</id>
    <published>2017-03-09T14:04:06.000Z</published>
    <updated>2017-03-27T05:52:09.213Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.ityouknow.com/assets/images/2017/jvm/JVM.jpg" alt=""></p>
<p>在江湖中要练就绝世武功必须内外兼备，精妙的招式和深厚的内功，武功的基础是内功。对于武功低（就像江南七怪）的人，招式更重要，因为他们不能靠内功直接去伤人，只能靠招式，利刃上优势来取胜了，但是练到高手之后，内功就更主要了。一个内功低的人招式在奇妙也打不过一个内功高的人。比如，你剑法再厉害，一剑刺过来，别人一掌打断你的剑，你还怎么使剑法，你一掌打到一个武功高的人身上，那人没什么事，却把你震伤了，你还怎么打。同样两者也是相辅相成的，内功深厚之后，原来普通的一招一式威力也会倍增。</p>
 <a id="more"></a>
<p>对于搞开发的我们其实也是一样，现在流行的框架越来越多，封装的也越来越完善，各种框架可以搞定一切，几乎不用关注底层的实现，初级程序员只要熟悉基本的使用方法，便可以快速的开发上线；但对于高级程序员来讲，内功的修炼却越发的重要，比如算法、设计模式、底层原理等，只有把这些基础熟练之后，才能在开发过程中<strong>知其然知其所以然</strong>，出现问题时能快速定位到问题的本质。</p>
<p>对于Java程序员来讲，spring全家桶几乎可以搞定一切，spring全家桶便是精妙的招式，jvm就是内功心法很重要的一块，线上出现性能问题，jvm调优更是不可回避的问题。因此JVM基础知识对于高级程序员的重要性不必言语，我司在面试高级开发的时候，jvm相关知识也必定是考核的标准之一。本篇文章会根据之前写的jvm系列文章梳理出jvm需要关注的所有考察点。</p>
<h2 id="jvm-总体梳理"><a href="#jvm-总体梳理" class="headerlink" title="jvm 总体梳理"></a>jvm 总体梳理</h2><p>jvm体系总体分四大块：</p>
<ol>
<li>类的加载机制</li>
<li>jvm内存结构</li>
<li>GC算法 垃圾回收</li>
<li>GC分析 命令调优<br>当然这些知识点在之前的文章中都有详细的介绍，这里只做主干的梳理</li>
</ol>
<p>这里画了一个思维导图，将所有的知识点进行了陈列，因为图比较大可以点击右键下载了放大查看。<br><img src="http://www.ityouknow.com/assets/images/2017/jvm/JVM.jpg" alt=""></p>
<h2 id="类的加载机制"><a href="#类的加载机制" class="headerlink" title="类的加载机制"></a>类的加载机制</h2><p>主要关注点：</p>
<ol>
<li>什么是类的加载</li>
<li>类的生命周期</li>
<li>类加载器</li>
<li>双亲委派模型</li>
</ol>
<h3 id="什么是类的加载"><a href="#什么是类的加载" class="headerlink" title="什么是类的加载"></a>什么是类的加载</h3><p>类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。</p>
<h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><p>类的生命周期包括这几个部分，加载、连接、初始化、使用和卸载，其中前三部是类的加载的过程,如下图；<br><img src="http://www.ityouknow.com/assets/images/2017/jvm/class.png" alt=""></p>
<p><strong>加载</strong>，查找并加载类的二进制数据，在Java堆中也创建一个java.lang.Class类的对象<br><strong>连接</strong>，连接又包含三块内容：验证、准备、初始化。<br>1）验证，文件格式、元数据、字节码、符号引用验证；<br>2）准备，为类的<strong>静态变量分配内存，并将其初始化为默认值</strong>；<br>3）解析，把类中的<strong>符号引用转换为直接引用</strong><br><strong>初始化</strong>，为类的静态变量赋予正确的初始值<br><strong>使用</strong>，new出对象程序中使用<br><strong>卸载</strong>，执行垃圾回收<br>几个小问题？<br>1、JVM初始化步骤 ？ 2、类初始化时机 ？3、哪几种情况下，Java虚拟机将结束生命周期？<br>答案参考这篇文章<a href="http://www.cnblogs.com/ityouknow/p/5603287.html" target="_blank" rel="external">jvm系列(一):java类的加载机制</a></p>
<h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p><img src="http://www.ityouknow.com/assets/images/2017/jvm/calssloader.png" alt=""></p>
<p><strong>启动类加载器</strong>：Bootstrap ClassLoader，负责加载存放在JDK\jre\lib(JDK代表JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库<br><strong>扩展类加载器</strong>：Extension ClassLoader，该加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载DK\jre\lib\ext目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.<em>开头的类），开发者可以直接使用扩展类加载器。<br><em>*应用程序类加载器</em></em>：Application ClassLoader，该类加载器由sun.misc.Launcher$AppClassLoader来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器</p>
<h3 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h3><p><strong>全盘负责</strong>，当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入<br><strong>父类委托</strong>，先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类<br><strong>缓存机制</strong>，缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区寻找该Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存区。这就是为什么修改了Class后，必须重启JVM，程序的修改才会生效</p>
<h3 id="jvm内存结构"><a href="#jvm内存结构" class="headerlink" title="jvm内存结构"></a>jvm内存结构</h3><p>主要关注点：</p>
<ol>
<li>jvm内存结构都是什么</li>
<li>对象分配规则</li>
<li>jvm内存结构<br><img src="http://www.ityouknow.com/assets/images/2017/jvm/structure.png" alt=""></li>
</ol>
<p><strong>方法区和堆</strong>是所有线程共享的内存区域；而<strong>java栈、本地方法栈和程序员计数器</strong>是运行线程私有的内存区域。</p>
<p>Java堆（Heap）,是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，<strong>在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</strong><br><strong>方法区（Method Area）</strong>,方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的<strong>类信息、常量、静态变量、即时编译器编译后的代码等数据</strong><br><strong>程序计数器（Program Counter Register）</strong>,程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。<br><strong>JVM栈（JVM Stacks）</strong>,与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。<br><strong>本地方法栈（Native Method Stacks）</strong>,本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。</p>
<h3 id="对象分配规则"><a href="#对象分配规则" class="headerlink" title="对象分配规则"></a>对象分配规则</h3><p>对象优先分配在Eden区，如果Eden区没有足够的空间时，虚拟机执行一次Minor GC。<br>大对象直接进入老年代（大对象是指需要大量连续内存空间的对象）。这样做的目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝（新生代采用复制算法收集内存）。<br>长期存活的对象进入老年代。虚拟机为每个对象定义了一个年龄计数器，如果对象经过了1次Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC那么对象的年龄加1，知道达到阀值对象进入老年区。<br>动态判断对象的年龄。如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代。<br>空间分配担保。每次进行Minor GC时，JVM会计算Survivor区移至老年区的对象的平均大小，如果这个值大于老年区的剩余值大小则进行一次Full GC，如果小于检查HandlePromotionFailure设置，如果true则只进行Monitor GC,如果false则进行Full GC。<br>如何通过参数来控制个各个内存区域<br>参考此文章：<a href="http://www.cnblogs.com/ityouknow/p/5610232.html" target="_blank" rel="external">jvm系列(二):JVM内存结构</a></p>
<h3 id="GC算法-垃圾回收"><a href="#GC算法-垃圾回收" class="headerlink" title="GC算法 垃圾回收"></a>GC算法 垃圾回收</h3><p>主要关注点：</p>
<ol>
<li>对象存活判断</li>
<li>GC算法</li>
<li>垃圾回收器</li>
</ol>
<h3 id="对象存活判断"><a href="#对象存活判断" class="headerlink" title="对象存活判断"></a>对象存活判断</h3><p>判断对象是否存活一般有两种方式：</p>
<p><strong>引用计数</strong>：每个对象有一个引用计数属性，新增一个引用时计数加1，引用释放时计数减1，计数为0时可以回收。此方法简单，无法解决对象相互循环引用的问题。<br><strong>可达性分析（Reachability Analysis）</strong>：从GC Roots开始向下搜索，搜索所走过的路径称为引用链。当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的，不可达对象。</p>
<h3 id="GC算法"><a href="#GC算法" class="headerlink" title="GC算法"></a>GC算法</h3><p>GC最基础的算法有三种：标记 -清除算法、复制算法、标记-压缩算法，我们常用的垃圾回收器一般都采用分代收集算法。</p>
<p>标记 -清除算法，“标记-清除”（Mark-Sweep）算法，如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。<br>复制算法，“复制”（Copying）的收集算法，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。<br>标记-压缩算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存<br>分代收集算法，“分代收集”（Generational Collection）算法，把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。</p>
<h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><p>Serial收集器，串行收集器是最古老，最稳定以及效率高的收集器，可能会产生较长的停顿，只使用一个线程去回收。<br>ParNew收集器，ParNew收集器其实就是Serial收集器的多线程版本。<br>Parallel收集器，Parallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。<br>Parallel Old 收集器，Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记－整理”算法<br>CMS收集器，CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。<br>G1收集器，G1 (Garbage-First)是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足GC停顿时间要求的同时,还具备高吞吐量性能特征<br>GC算法和垃圾回收器算法图解以及更详细内容参考 <a href="http://www.cnblogs.com/ityouknow/p/5614961.html" target="_blank" rel="external">jvm系列(三):GC算法 垃圾收集器</a></p>
<h2 id="GC分析-命令调优"><a href="#GC分析-命令调优" class="headerlink" title="GC分析 命令调优"></a>GC分析 命令调优</h2><p>主要关注点：</p>
<ol>
<li>GC日志分析</li>
<li>调优命令</li>
<li>调优工具</li>
<li>GC日志分析</li>
</ol>
<p>摘录GC日志一部分（前部分为年轻代gc回收；后部分为full gc回收）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2016-07-05T10:43:18.093+0800: 25.395: [GC [PSYoungGen: 274931K-&gt;10738K(274944K)] 371093K-&gt;147186K(450048K), 0.0668480 secs] [Times: user=0.17 sys=0.08, real=0.07 secs]</div><div class="line">2016-07-05T10:43:18.160+0800: 25.462: [Full GC [PSYoungGen: 10738K-&gt;0K(274944K)] [ParOldGen: 136447K-&gt;140379K(302592K)] 147186K-&gt;140379K(577536K) [PSPermGen: 85411K-&gt;85376K(171008K)], 0.6763541 secs] [Times: user=1.75 sys=0.02, real=0.68 secs]</div></pre></td></tr></table></figure></p>
<p>通过上面日志分析得出，PSYoungGen、ParOldGen、PSPermGen属于Parallel收集器。其中PSYoungGen表示gc回收前后年轻代的内存变化；ParOldGen表示gc回收前后老年代的内存变化；PSPermGen表示gc回收前后永久区的内存变化。young gc 主要是针对年轻代进行内存回收比较频繁，耗时短；full gc 会对整个堆内存进行回城，耗时长，因此一般尽量减少full gc的次数</p>
<p>young gc 日志:<br><img src="http://www.ityouknow.com/assets/images/2017/jvm/yong.jpg" alt=""></p>
<p>Full GC日志:<br><img src="http://www.ityouknow.com/assets/images/2017/jvm/full.jpg" alt=""></p>
<h3 id="调优命令"><a href="#调优命令" class="headerlink" title="调优命令"></a>调优命令</h3><p>Sun JDK监控和故障处理命令有jps jstat jmap jhat jstack jinfo</p>
<p>jps，JVM Process Status Tool,显示指定系统内所有的HotSpot虚拟机进程。<br>jstat，JVM statistics Monitoring是用于监视虚拟机运行时状态信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。<br>jmap，JVM Memory Map命令用于生成heap dump文件<br>jhat，JVM Heap Analysis Tool命令是与jmap搭配使用，用来分析jmap生成的dump，jhat内置了一个微型的HTTP/HTML服务器，生成dump的分析结果后，可以在浏览器中查看<br>jstack，用于生成java虚拟机当前时刻的线程快照。<br>jinfo，JVM Configuration info 这个命令作用是实时查看和调整虚拟机运行参数。<br>详细的命令使用参考这里<a href="http://www.ityouknow.com/java/2016/01/01/jvm%E8%B0%83%E4%BC%98-%E5%91%BD%E4%BB%A4%E7%AF%87.html" target="_blank" rel="external">jvm系列(四):jvm调优-命令篇</a></p>
<h3 id="调优工具"><a href="#调优工具" class="headerlink" title="调优工具"></a>调优工具</h3><p>常用调优工具分为两类,jdk自带监控工具：jconsole和jvisualvm，第三方有：MAT(Memory Analyzer Tool)、GChisto。</p>
<p>jconsole，Java Monitoring and Management Console是从java5开始，在JDK中自带的java监控和管理控制台，用于对JVM中内存，线程和类等的监控<br>jvisualvm，jdk自带全能工具，可以分析内存快照、线程快照；监控内存变化、GC变化等。<br>MAT，Memory Analyzer Tool，一个基于Eclipse的内存分析工具，是一个快速、功能丰富的Java heap分析工具，它可以帮助我们查找内存泄漏和减少内存消耗<br>GChisto，一款专业分析gc日志的工具<br>工具使用参考 <a href="http://www.ityouknow.com/java/2017/02/22/jvm-tool.html" target="_blank" rel="external">jvm系列(七):jvm调优-工具篇</a><br>作者：纯洁的微笑<br>出处：<a href="http://www.ityouknow.com/" target="_blank" rel="external">http://www.ityouknow.com/</a><br>版权归作者所有，转载请注明出处</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.ityouknow.com/assets/images/2017/jvm/JVM.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在江湖中要练就绝世武功必须内外兼备，精妙的招式和深厚的内功，武功的基础是内功。对于武功低（就像江南七怪）的人，招式更重要，因为他们不能靠内功直接去伤人，只能靠招式，利刃上优势来取胜了，但是练到高手之后，内功就更主要了。一个内功低的人招式在奇妙也打不过一个内功高的人。比如，你剑法再厉害，一剑刺过来，别人一掌打断你的剑，你还怎么使剑法，你一掌打到一个武功高的人身上，那人没什么事，却把你震伤了，你还怎么打。同样两者也是相辅相成的，内功深厚之后，原来普通的一招一式威力也会倍增。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="JVM" scheme="http://ipcreator.me/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning Basing on Java</title>
    <link href="http://ipcreator.me/2017/03/09/Program/TensorFlow/ai-in-java/"/>
    <id>http://ipcreator.me/2017/03/09/Program/TensorFlow/ai-in-java/</id>
    <published>2017-03-09T11:46:06.000Z</published>
    <updated>2017-03-27T09:54:57.236Z</updated>
    
    <content type="html"><![CDATA[<p>译文出处： <a href="https://coyee.com/article/10592-how-to-get-started-with-java-machine-learning" target="_blank" rel="external">coyee</a>   原文出处：<a href="https://dzone.com/articles/how-to-get-started-with-java-machine-learning" target="_blank" rel="external">Henn Idan</a></p>
<p>开始Java机器学习的最好工具是什么？</p>
<p>这个问题已经有一段时间了，但最近这些日子几乎每个人都在谈论人工智能和机器学习。这已经不再是一个保留给科学家和研究者的秘密，而是几乎实现于每一项新兴技术中。</p>
<p>在下面的章节中，我们会做一个java的机器学习的主要框架的快速概述，并证明Java机器学习是多么容易上手，不需要你另起炉灶或者从头开始创建算法。</p>
   <a id="more"></a>
<p>人类的人工智能人工智能在一段时间以来是一个广泛并且炫酷的领域，但总是感觉有点难以触及，是特别为科学家所做。如果你想创造一个人工智能系统，你必须实现你自己的核心算法，并且训练它们能识别模式，理解图像并且处理自然语言。<br>最近关于这领域的演变使得其对于非研究者能更容易触及。你现在能容易触及到相关算法和工具。你不需要知道你正在做什么，但是能很轻松的提升你应用的机器学习能力。</p>
<p>让机器运转为了更简单的阐述，我们决定选出3个项目帮助你开始：<br>1.<a href="http://deeplearning4j.org/" target="_blank" rel="external">Deeplearning4J (DL4J)</a> –开源，分布式，JVM的商业深度学习lib库</p>
<ol>
<li><p><a href="http://bid2.berkeley.edu/bid-data-project/" target="_blank" rel="external">BID Data Project</a> –能够运行快速、大规模的机器学习和数据挖掘的模式集合</p>
</li>
<li><p><a href="http://neuroph.sourceforge.net/index.html" target="_blank" rel="external">Neuroph</a> –面向对象的神经网络</p>
</li>
</ol>
<p>顺便说一下, 我们最近发布了另外一些吸引我们注意的有趣的开源GitHub库. 下载.</p>
<h2 id="DL4J-–-深度学习"><a href="#DL4J-–-深度学习" class="headerlink" title="DL4J – 深度学习"></a>DL4J – 深度学习</h2><p>DL4J是一个能帮助你配置多层神经网络的工具。它为JVM提供了深度学习且伴随快速原型设计和大规模定制，同时注重比配置更多的约定。</p>
<p>这个工具是为了帮助已经拥有创建和使用神经网络的理论，但不想亲自实现算法的那些人。你可以在海量数据上解决特定问题和自定义神经网络属性。DL4J 是由Java语言编写的，可以兼容任何JVM语言比如 Clojure, Scala, ,Kotlin，并且可以与Hadoop和Spark集成。<br>可能的使用案例包括评价或推荐系统如（CRM，adtech， churn prevention），预测分析甚至欺诈检测。如果你要寻找真实的案例，你可以下载 Rapidminer. 这是使用DL4J的开源平台，用来为用户简化预测分析过程。</p>
<p>创建一个新的神经网络如同创建一个新项目一样容易。</p>
<h2 id="BID-Data-Project-（大数据项目）"><a href="#BID-Data-Project-（大数据项目）" class="headerlink" title="BID Data Project （大数据项目）"></a>BID Data Project （大数据项目）</h2><p>大数据项目是由那些需要处理大量数据并且对性能敏感的人创建的。 UC Berkeley项目是由许多硬件、软件和设计模式集合而成，能在上使用快速、大规模的数据挖掘。</p>
<p>第一个库是 BIDMach，在单节点或集群上的常规机器学习问题都有记录。你可以使用这个库管理数据源，在CPU或者GPU上优化、分配数据。</p>
<p>BidMach 里面包括许多流行的机器学习算法，他们团队正致力于开发分布式神经网络、图形算法和其他模型</p>
<p>其他两个库分别是BIDMat和 BIDParse。BIDMat是关注与数据挖掘的快速数学矩阵库，BIDParse是GPU加速的自然语言解析。大数据项目的其他类库还包括可视化工具，能够支持在Spark甚至在安卓运行的类库。BIDMach基准比其他解决方案持续表现出更好的结果。甚至将其在单一机器上的运行与其他方案在大集群上的运行相比也是如此。在这里可以找到一个完整的基准列表。</p>
<h2 id="Neuroph"><a href="#Neuroph" class="headerlink" title="Neuroph"></a>Neuroph</h2><p>neuroph是用来开发常用的神经网络构架的轻量级java框架。该框架提供了一个java库以及一个GUI工具（称为easyNeurons），你可以用它来在java项目中创建和训练自己的神经网络。</p>
<p>Neuroph包含一个开源的java类库和少量对应基本神经网络概念的基类。对于刚开始使用神经网络，或者想知道它们如何工作的人来说，Neuroph是个非常好的垫脚石。你可以尝试Neuroph的在线演示，看看它是怎么运行的。提示：界面看起来很旧且过时，但你可以用它来创建美妙的东西。它还得过2013的 <a href="http://neuroph.sourceforge.net/dukes_choice_award_2013.html" target="_blank" rel="external">Duke’s Choice</a>的奖项。</p>
<p><img src="http://www.coyee.com/uploads/img/20160723/073352_WVGg.png" alt=""><br>网络视图</p>
<p>其他项目如何呢?</p>
<p>万一以上三个项目不是你所需要的，你想为你的项目寻找一些不同的，也没关系。如果你在GitHub上搜索“机器学习”，将有1506个Java资源让你找到合适的工具。</p>
<p>举个例子， Airbnb中有个有趣的项目是aerosolve,一个设计成具有人类友好性的机器学习库。开始学习一项新的技术很麻烦，如果您期望得到一些帮助，确保你已经下载了Takipi的错误分析工具。<br>最后的思考</p>
<p>每隔几年就会有些关于人工智能的新声音。这一次，它伴随着机器学习，数据挖掘，神经网络等等的强化来了，我们都很支持。这些类库开源的事实意味着这些信息和能力正待价而沽，而你所有所做的是思考拥有这个能力可以做成什么。</p>
<p>如果你知道其他有趣的项目或者你认为我们漏掉点什么，我们期待在下面的评论里见到它们。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;译文出处： &lt;a href=&quot;https://coyee.com/article/10592-how-to-get-started-with-java-machine-learning&quot;&gt;coyee&lt;/a&gt;   原文出处：&lt;a href=&quot;https://dzone.com/articles/how-to-get-started-with-java-machine-learning&quot;&gt;Henn Idan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始Java机器学习的最好工具是什么？&lt;/p&gt;
&lt;p&gt;这个问题已经有一段时间了，但最近这些日子几乎每个人都在谈论人工智能和机器学习。这已经不再是一个保留给科学家和研究者的秘密，而是几乎实现于每一项新兴技术中。&lt;/p&gt;
&lt;p&gt;在下面的章节中，我们会做一个java的机器学习的主要框架的快速概述，并证明Java机器学习是多么容易上手，不需要你另起炉灶或者从头开始创建算法。&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Machine Learning" scheme="http://ipcreator.me/tags/Machine-Learning/"/>
    
      <category term="Java" scheme="http://ipcreator.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Pics for Java Understanding</title>
    <link href="http://ipcreator.me/2017/03/09/Program/Java/picture-for-java-learning/"/>
    <id>http://ipcreator.me/2017/03/09/Program/Java/picture-for-java-learning/</id>
    <published>2017-03-09T06:45:06.000Z</published>
    <updated>2017-03-27T09:58:41.982Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.importnew.com/wp-content/uploads/2014/12/6c537425c9ad078efe656a346e5facec.png" alt=""></p>
<p>文章来源：<a href="http://www.importnew.com" target="_blank" rel="external">importnew</a></p>
<p>一图胜千言，下面图解均来自Program Creek 网站的Java教程，目前它们拥有最多的票选。如果图解没有阐明问题，那么你可以借助它的标题来一窥究竟。</p>
 <a id="more"></a>
<p>1、字符串不变性</p>
<p>下面这张图展示了这段代码做了什么</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String s = &quot;abcd&quot;;</div><div class="line">s = s.concat(&quot;ef&quot;);</div></pre></td></tr></table></figure>
<p><img src="http://incdn1.b0.upaiyun.com/2014/06/866816a69119a9ca24232d753ef537b8.jpeg" alt=""></p>
<p>2、equals()方法、hashCode()方法的区别</p>
<p>HashCode被设计用来提高性能。equals()方法与hashCode()方法的区别在于：</p>
<p><img src="http://incdn1.b0.upaiyun.com/2014/06/0954391ddfaad41dd3ead5037bfdc1eb.jpeg" alt=""></p>
<p>如果两个对象相等(equal)，那么他们一定有相同的哈希值。<br>如果两个对象的哈希值相同，但他们未必相等(equal)。</p>
<p>3、Java异常类的层次结构<br><img src="http://incdn1.b0.upaiyun.com/2014/06/fbddd02451798ed512e142809d02bc0c-498x1024.jpeg" alt=""><br>图中红色部分为受检查异常。它们必须被捕获，或者在函数中声明为抛出该异常。</p>
<p>4、集合类的层次结构<br><img src="http://incdn1.b0.upaiyun.com/2014/06/647d134fddb1872cf1f5a8facbb41557.jpeg" alt=""><br>注意Collections和Collection的区别。（Collections包含有各种有关集合操作的静态多态方法）</p>
<p>5、Java同步<br><img src="http://incdn1.b0.upaiyun.com/2014/06/b8d387a03337e0a37f0df743507c5f26.jpg" alt=""><br>Java同步机制可通过类比建筑物来阐明。</p>
<p>6、别名<br><img src="http://incdn1.b0.upaiyun.com/2014/06/5ff0d9d66dd85d01cee8a423544d3b21.jpeg" alt=""><br>别名意味着有多个变量指向同一可被更新的内存块，这些别名分别是不同的对象类型。</p>
<p>7、堆和栈<br><img src="http://incdn1.b0.upaiyun.com/2014/06/cc55bbfe947afccc45c18dee9cbb8112.png" alt=""><br>图解表明了方法和对象在运行时内存中的位置。</p>
<p>8、Java虚拟机运行时数据区域<br><img src="http://incdn1.b0.upaiyun.com/2014/06/80c7346c554563d5738537a353f2bc0b.jpg" alt=""><br>图解展示了整个虚拟机运行时数据区域的情况。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.importnew.com/wp-content/uploads/2014/12/6c537425c9ad078efe656a346e5facec.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;文章来源：&lt;a href=&quot;http://www.importnew.com&quot;&gt;importnew&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一图胜千言，下面图解均来自Program Creek 网站的Java教程，目前它们拥有最多的票选。如果图解没有阐明问题，那么你可以借助它的标题来一窥究竟。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ipcreator.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Codota——Find the Right Code</title>
    <link href="http://ipcreator.me/2017/03/09/Program/codota-ai-programming/"/>
    <id>http://ipcreator.me/2017/03/09/Program/codota-ai-programming/</id>
    <published>2017-03-09T01:55:06.000Z</published>
    <updated>2017-03-27T09:48:27.500Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.amazonaws.com/codota_pages/images/codebrain.gif" alt=""></p>
<p>The AI pair programmer.Anywhere you read or write code.<br><a href="https://www.codota.com/" target="_blank" rel="external">Codota</a> helps developers create better software, faster by providing insights learned from all the code in the world. The CodeBrain is an evolving model that reflects Codota’s unique knowledge of how software is built.</p>
 <a id="more"></a>
<p><img src="https://searchcode.com/static/searchcode_logo.png" alt=""><br><a href="https://searchcode.com/" target="_blank" rel="external">https://searchcode.com/</a><br>Search over 20 billion lines of code from 7,000,000 projects</p>
<p><img src="https://ssl.gstatic.com/codesite/ph/images/search-48.gif" alt=""><br>Android Open Source Project - Issue Tracker<br><a href="https://code.google.com/p/android/issues/list" target="_blank" rel="external">https://code.google.com/p/android/issues/list</a></p>
<p><img src="http://androidxref.com/images/title.png" alt=""><br><a href="http://androidxref.com/" target="_blank" rel="external">http://androidxref.com/</a></p>
<p><img src="http://grepcode.com/static/app/images/logo-rel.gif" alt=""><br>You could try searching for list, hadoop, android, or something else</p>
<p><img src="http://xref.opersys.com/img/Android-Logo-Alpha.png" alt=""><br><a href="http://xref.opersys.com/" target="_blank" rel="external">http://xref.opersys.com/</a><br>Welcome to the Android Cross Reference !<br>Browse Google AOSP source tree and search for references.</p>
<p><a href="http://androiddrawables.com/#" target="_blank" rel="external">Android™ Drawables</a><br>Compare and contrast drawables, based on version.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/codota_pages/images/codebrain.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The AI pair programmer.Anywhere you read or write code.&lt;br&gt;&lt;a href=&quot;https://www.codota.com/&quot;&gt;Codota&lt;/a&gt; helps developers create better software, faster by providing insights learned from all the code in the world. The CodeBrain is an evolving model that reflects Codota’s unique knowledge of how software is built.&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Codota" scheme="http://ipcreator.me/tags/Codota/"/>
    
  </entry>
  
  <entry>
    <title>Git Automatically</title>
    <link href="http://ipcreator.me/2017/03/09/Program/Tools/auto-git-daily/"/>
    <id>http://ipcreator.me/2017/03/09/Program/Tools/auto-git-daily/</id>
    <published>2017-03-08T23:30:06.000Z</published>
    <updated>2017-03-27T09:52:38.109Z</updated>
    
    <content type="html"><![CDATA[<p>能够用命令行或者批处理的，尽量自动化，提高效率，时间就是生命…</p>
 <a id="more"></a>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line">@title auto update blog articles and git push</div><div class="line"></div><div class="line">set fileSource=D:\IPCreatorBlog\source</div><div class="line">set fileDestination=C:\IPCreatorBlogGit\blog\source</div><div class="line">set gitDir=C:\IPCreatorBlogGit\blog</div><div class="line"></div><div class="line">cls</div><div class="line"></div><div class="line">cd %fileDestination%</div><div class="line">rd /s/q %fileDestination%</div><div class="line">Xcopy /e %fileSource% %fileDestination%</div><div class="line"></div><div class="line">cd %gitDir%</div><div class="line">git add -v .</div><div class="line">git commit -m &quot;Update blog daily&quot;</div><div class="line">git push</div><div class="line"></div><div class="line">pause</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> user@LAPTOP-082RQVIH MINGW64 /c/IPCreatorBlogGit/blog (master)</div><div class="line">$ **git config --global alias.blog &apos;!git add . &amp;&amp; git commit -m &quot;blog update&quot; &amp;&amp; git push&apos;**                                                                                                                          </div><div class="line">user@LAPTOP-082RQVIH MINGW64 /c/IPCreatorBlogGit/blog (master)</div><div class="line">$ **git blog**</div><div class="line">On branch master</div><div class="line">Your branch is up-to-date with &apos;origin/master&apos;.</div><div class="line">nothing to commit, working tree clean</div></pre></td></tr></table></figure>
<p> 更多参考：<br> <a href="https://www.zybuluo.com/yangfch3/note/338252" target="_blank" rel="external">Windows批处理(cmd/bat)使用小记</a><br> <a href="http://xstarcd.github.io/wiki/windows/windows_cmd_summary_commands.html" target="_blank" rel="external">批处理常用命令总结 - 批处理命令简介</a><br> <a href="https://segmentfault.com/q/1010000000263597" target="_blank" rel="external">Git批处理脚本</a><br> <a href="https://www.zhihu.com/question/38962022" target="_blank" rel="external">请问如何写一个批处理自动打开 gitbash，然后自动执行一系列git命令（windows平台）？</a><br> <a href="https://docs.google.com/document/d/1IjrCvTqL3J92DPXNzkCPYRi6Ftb2v6aCbncpxh9ozy4/edit" target="_blank" rel="external">Chrome-启动参数</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;能够用命令行或者批处理的，尽量自动化，提高效率，时间就是生命…&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Git" scheme="http://ipcreator.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Java</title>
    <link href="http://ipcreator.me/2017/03/09/Program/Java/thinking-in-java/"/>
    <id>http://ipcreator.me/2017/03/09/Program/Java/thinking-in-java/</id>
    <published>2017-03-08T23:30:06.000Z</published>
    <updated>2017-03-27T05:50:44.870Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img3.doubanio.com/lpic/s27243455.jpg" alt=""><br>本书赢得了全球程序员的广泛赞誉，即使是最晦涩的概念，在Bruce Eckel的文字亲和力和小而直接的编程示例面前也会化解于无形。从Java的基础语法到最高级特性（深入的面向对象概念、多线程、自动项目构建、单元测试和调试等），本书都能逐步指导你轻松掌握。<br>从本书获得的各项大奖以及来自世界各地的读者评论中，不难看出这是一本经典之作。本书的作者拥有多年教学经验，对C、C++以及Java语言都有独到、深入的见解，以通俗易懂及小而直接的示例解释了一个个晦涩抽象的概念。本书共22章，包括操作符、控制执行流程、访问权限控制、复用类、多态、接口、通过异常处理错误、字符串、泛型、数组、容器深入研究、Java I/O系统、枚举类型、并发以及图形化用户界面等内容。这些丰富的内容，包含了Java语言基础语法以及高级特性，适合各个层次的Java程序员阅读，同时也是高等院校讲授面向对象程序设计语言以及Java语言的绝佳教材和参考书。<br><a href="https://book.douban.com/subject/2130190/" target="_blank" rel="external">]第4版</a>特点：<br>适合初学者与专业人员的经典的面向对象叙述方式，为更新的Java SE5/6增加了新的示例和章节。<br> 测验框架显示程序输出。</p>
 <a id="more"></a>
<p>作者简介  · · · · · ·<br>Bruce Eckel是MindView公司（www.MindView.net）的总裁，该公司向客户提供软件咨询和培训。他是C++标准委员会拥有表决权的成员之一，拥有应用物理学学士和计算机工程硕士学位。除本书外，他还是《C++编程思想》的作者，并与人合著了《C++编程思想 第2卷》（这两本书的英文影印版及中文版均已由机械工业出版社引进出版）及其他著作。他已经发表了150多篇论文，还经常参加世界各地的研讨会并进行演讲。</p>
<p>目录  · · · · · ·<br>读者评论<br>前言<br>简介</p>
<p>第1章 对象导论<br>1.1 抽象过程<br>1.2 每个对象都有一个接口<br>1.3 每个对象都提供服务<br>1.4 被隐藏的具体实现<br>1.5 复用具体实现<br>1.6 继承<br>1.6.1 “是一个”（is-a）与“像是一个”（is-like-a）关系<br>1.7 伴随多态的可互换对象<br>1.8 单根继承结构<br>1.9 容器<br>1.9.1 参数化类型（范型）<br>1.10 对象的创建和生命期<br>1.11 异常处理：处理错误<br>1.12 并发编程<br>1.13 Java与Internet<br>1.13.1 Web是什么<br>1.13.2 客户端编程<br>1.13.3 服务器端编程<br>1.22 总结</p>
<p>第2章 一切都是对象<br>2.1 用引用操纵对象<br>2.2 必须由你创建所有对象<br>2.2.1 存储到什么地方<br>2.2.2 特例：基本类型<br>2.2.3 Java中的数组<br>2.3 永远不需要销毁对象<br>2.3.1 作用域<br>2.3.2 对象的作用域<br>2.4 创建新的数据类型：类<br>2.4.1 域和方法<br>2.4.2 基本成员默认值<br>2.5 方法、参数和返回值<br>2.5.1 参数列表<br>2.6 构建一个Java程序<br>2.6.1 名字可见性<br>2.6.2 运用其他构件<br>2.6.3 static 关键字<br>2.7 你的第一个Java程序<br>编译和运行<br>2.8 注释和嵌入式文档<br>2.8.1 注释文档<br>2.8.2 语法<br>2.8.3 嵌入式HTML<br>2.8.4 一些标签示例<br>2.8.5 文档示例<br>2.9 编码风格<br>2.10 总结<br>2.11 练习</p>
<p>第3章 操作符<br>3.1 更简单的打印语句<br>3.2 使用Java操作符<br>3.3 优先级<br>3.4 赋值<br>3.4.1 方法调用中的别名问题<br>3.5 算术操作符<br>3.5.1 一元加、减操作符<br>3.6 自动递增和递减<br>3.7 关系操作符<br>3.7.1 测试对象的等价性<br>3.8 逻辑操作符<br>3.8.1 短路<br>3.9 直接常量<br>3.9.1 指数记数法<br>3.10 按位操作符<br>3.11 移位操作符<br>3.12 三元操作符 if-else<br>3.13 字符串操作符 + 和 +=<br>3.14 使用操作符时常犯的错误<br>3.15 类型转换操作符<br>3.15.1 截尾和舍入<br>3.15.2提升<br>3.16 Java没有“sizeof”<br>3.17 操作符小结<br>3.18 总结</p>
<p>第4章 控制执行流程<br>4.1 true和false<br>4.2 if-else<br>4.3 迭代<br>4.3.1 do-while<br>4.3.2 for<br>4.3.3 逗号操作符<br>4.4 Foreach语法<br>4.5 return<br>4.6 break和 continue<br>4.7 臭名昭著的“goto”<br>4.8 switch<br>4.9 总结</p>
<p>第5章 初始化与清理<br>5.1 用构造器确保初始化<br>5.2 方法重载<br>5.2.1 区分重载方法<br>5.2.2 涉及基本类型的重载<br>5.2.3 以返回值区分重载方法<br>5.3 缺省构造器<br>5.4 this关键字<br>5.4.1 在构造器中调用构造器<br>5.4.2 static的含义<br>5.5 清理：终结处理和垃圾回收<br>5.5.1 finalize()的用途何在<br>5.5.2 你必须实施清理<br>5.5.3 终结条件<br>5.5.4 垃圾回收器如何工作<br>5.6 成员初始化<br>5.6.1 指定初始化<br>5.7 构造器初始化<br>5.7.1 初始化顺序<br>5.7.2. 静态数据的初始化<br>5.7.3. 显式的静态初始化<br>5.7.4. 非静态实例初始化<br>5.8 数组初始化<br>5.8.1 可变参数列表<br>5.9 枚举类型<br>5.10 总结</p>
<p>第6章 访问权限控制<br>第7章 复用类<br>第8章 多态<br>第9章 接口<br>第10章 内部类<br>第11章 持有对象<br>第12章 通过异常处理错误<br>第13章 字符串<br>第14章 类型信息<br>第15章 泛型<br>第16章 数组<br>第17章 容器深入研究<br>第18章 Java I/O系统<br>第19章 枚举类型<br>第20章 注解<br>第21章 并发<br>第22章 图形化用户界面</p>
<p>附录A 补充材料<br>可下载的补充材料<br>Thinking in C：Java的基础<br>Java编程思想 研讨课<br>Hands-on Java研讨课CD<br>Thinking in Objects研讨课<br>Thinking in Enterprise Java<br>Thinking in Patterns(with Java)<br>Thinking in Patterns研讨课<br>设计咨询与复审</p>
<p>附录B 资源<br>软件<br>编辑器与IDE<br>书籍<br>分析与设计<br>Python<br>我的著作列表<br>索引</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img3.doubanio.com/lpic/s27243455.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;本书赢得了全球程序员的广泛赞誉，即使是最晦涩的概念，在Bruce Eckel的文字亲和力和小而直接的编程示例面前也会化解于无形。从Java的基础语法到最高级特性（深入的面向对象概念、多线程、自动项目构建、单元测试和调试等），本书都能逐步指导你轻松掌握。&lt;br&gt;从本书获得的各项大奖以及来自世界各地的读者评论中，不难看出这是一本经典之作。本书的作者拥有多年教学经验，对C、C++以及Java语言都有独到、深入的见解，以通俗易懂及小而直接的示例解释了一个个晦涩抽象的概念。本书共22章，包括操作符、控制执行流程、访问权限控制、复用类、多态、接口、通过异常处理错误、字符串、泛型、数组、容器深入研究、Java I/O系统、枚举类型、并发以及图形化用户界面等内容。这些丰富的内容，包含了Java语言基础语法以及高级特性，适合各个层次的Java程序员阅读，同时也是高等院校讲授面向对象程序设计语言以及Java语言的绝佳教材和参考书。&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/2130190/&quot;&gt;]第4版&lt;/a&gt;特点：&lt;br&gt;适合初学者与专业人员的经典的面向对象叙述方式，为更新的Java SE5/6增加了新的示例和章节。&lt;br&gt; 测验框架显示程序输出。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ipcreator.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Billy Lynn&#39;s Long Halftime Walk</title>
    <link href="http://ipcreator.me/2017/03/08/MyView/Movie/billy-lynn&#39;s-long-halftime-walk/"/>
    <id>http://ipcreator.me/2017/03/08/MyView/Movie/billy-lynn&#39;s-long-halftime-walk/</id>
    <published>2017-03-08T15:30:06.000Z</published>
    <updated>2017-03-29T04:18:01.293Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>War, Soldier, People</strong></p>
</blockquote>
<p><img src="https://img3.doubanio.com/view/movie_poster_cover/lpst/public/p2391542403.jpg" alt=""></p>
<p>比利·林恩的中场战事的剧情简介  ·  ·  ·  ·  ·  ·</p>
<p>　　伊拉克战争时期，来自美国德州的19岁技术兵比利·林恩（乔·阿尔文 Joe Alwyn 饰）因为一段偶然拍摄的视频而家喻户晓。那是一次规模不大却激烈非常的遭遇战，战斗中林恩所在的B班班长（范·迪塞尔 Vin Diesel 饰）遭到当地武装分子的伏击和劫持，而林恩为了营救班长不惜铤而走险冲锋陷阵。视频公布于世让他成为全美民众所崇拜的英雄，然而却鲜有人理解他和战友们所经历的一切。为了安葬班长，B班得到了短暂的休假，因此他们得以受邀参加一场在德州举行的橄榄球比赛。林恩的姐姐因某事件深感愧疚，她希望弟弟能借此机缘回归普通生活。而周围的经纪人、球迷、大老板、普通民众则对战争、卫国、士兵有着各种各样想当然的理解。球场上的庆典盛大开幕，林恩和战友们的心却愈加沉重与焦躁……<br>　　本片根据作家本·方丹（Ben Fountain）的同名小说改编。</p>
<a id="more"></a>
<p>导演: 李安<br>编剧: 让-克里斯托弗·卡斯特里 / 本·方丹<br>主演: 乔·阿尔文 / 加内特·赫德兰 / 克里斯汀·斯图尔特 / 范·迪塞尔 / 李淳 / 麦肯兹·利 / 史蒂夫·马丁 / 克里斯·塔克 / 本·普拉特 / 阿图罗·卡斯特罗 / 亚斯特罗 / 博·纳普 / 伊斯梅尔·克鲁兹·科尔多瓦 / 巴尼·哈里斯 / 布鲁斯·麦金农<br>类型: 剧情 / 战争<br>制片国家/地区: 美国 / 英国 / 中国大陆<br>语言: 英语<br>上映日期: 2016-11-11(美国/中国大陆) / 2016-10-15(纽约电影节)<br>片长: 110分钟(中国大陆) / 113分钟<br>又名: 半场无战事 / 比利·林恩漫长的中场休息 / 比利·林漫长的中场行走 / 中场休息<br>IMDb链接: <a href="http://www.imdb.com/title/tt2513074" target="_blank" rel="external">tt2513074</a></p>
<p><a href="https://www.douban.com/people/pinkonion/" target="_blank" rel="external">水木丁 </a><br>不要随便对经历过苦难的人说“我能理解你的心情。”，因为你理解不了。也不要对他们说”我懂你的感受”，因为你感受不到。比利从遥远的敌国，回到自己的祖国，他从前是一个普通人家的不引人注目的男孩，他的内心也许是孤独的。但是他现在成为了整个美国家喻户晓的英雄，他终于被人看见了，人人都知道他的名字，可他的孤独没有消失，反而膨胀起来，变成了和他的名气一样的大的东西。荣誉，爱情，金钱……在短短的几个小时之内一一从他身边经过，但是他感到的却是越来越孤独，人人觉得自己懂他，他们赞扬他，评价他，定义他，人人看到他站在眼前，但是没有谁真的能体会他的感受，人人在看他这他，却没有人看得到，他的悲伤那么大。（写下这句话，真是好想配张搞笑的图片，配合一下我们这个荒唐的人生啊）。用他自己的话来讲，人们在赞扬你生命中最惨的一天，那感觉真是……</p>
<p><a href="https://www.douban.com/people/54332107/" target="_blank" rel="external">Prufrock的情歌</a></p>
<p>一些小数据：<br>美国17%的流浪人口是退役军人。<br>曾在伊拉克和阿富汗服役的160万退役军人中，有45%正在申请残疾补助。33%已确认具有和役期相关的残疾。<br>这些军人里，20%左右被确诊患有PTSD或抑郁症，剩下的80%里有许多人不愿意进医院，不愿意看心理医生，不愿意承认自己”有问题“。</p>
<p><a href="https://www.douban.com/people/wangranran/" target="_blank" rel="external">惘然 </a></p>
<p>版权归作者所有，任何形式转载请联系作者。<br>作者：惘然（来自豆瓣）<br>来源：<a href="https://movie.douban.com/review/8165734/" target="_blank" rel="external">https://movie.douban.com/review/8165734/</a></p>
<p>电影有些情节很讽刺，比如比利·林恩对着国旗敬礼，看台上的大银幕对着他，他泪流满面。现场观众一定被他的爱国情怀所感染了。可实际上，李安的镜头一转，还是处男的比利·林恩脑海中正在想象和刚刚认识的啦啦队女孩在自家的床上翻云覆雨。<br>电影有些情节很无奈，比如比利·林恩说：“有人来表扬你这辈子最惨的一天”。他成为英雄是因为一段战场上舍身救队长的视频。那一天他为了救队长与敌人近身肉搏，终于把敌人杀了。然后一回头，早已中枪的队长也已经咽气。没有什么胜利可言，大家都一败涂地。<br>电影有些情节很伤感，比如比利·林恩对那个主动投怀送抱，对他表现出各种不舍的啦啦队女孩佐恩深情地说：“我差点带着你跑掉！”<br>结果佐恩的反应是：“你怎么可以说这种话？怎么可以说不回伊拉克，你是英雄啊！”<br>于是比利·林恩只能表示自己其实是开的一个玩笑。佐恩这才心满意足离去。<br>哪怕是对你说“我爱你”的人，有可能爱的也只是他们想要的那个你。</p>
<p>《比利·林恩的中场战事》甚至几乎没有设置悬念，不走大片惯有的逻辑。就像李安说的：“观众一开始就知道他不可能不回去（伊拉克）的，可是我们还是要思索这个问题，想知道他发生了什么。基本上他的决定不是决定，而是一个了解，对他命运本身的了解。”<br>比利·林恩最后对开车来想接他去找心理医生努力让他留在美国的姐姐说：“我想这就是我的命运”。<br>所以这就是一部非常李安的电影。<br>我们当然知道高伟同最后会办喜宴，李安想要拍出的是他发生了什么。<br>我们当然知道王佳芝一定会放了易先生，李安想要拍出的是她发生了什么。<br>我们当然知道比利·林恩还是要回到战场……李安从来拍的不只是故事，而是情绪，而是一个个鲜活饱满，甚至矛盾重重，但却是真实的人。<br>是他们的选择，和他们的别无选择。</p>
<p><a href="https://www.douban.com/people/dreamfox/" target="_blank" rel="external">乌鸦火堂</a></p>
<p>现在正在打仗吗？跟我无关。<br>我管你是什么战争英雄还是什么高级人物，我们所关心的，就是作为老板的我，能不能挣到更多钱。作为制片人的我，能不能接到下一单有噱头的生意。作为工作人员的我，能不能顺利让中场秀顺利结束。作为粉丝的我，能不能看到真命天女，能不能让我支持的球队获胜。<br>你们从哪来，回哪儿去吧，该干什么干什么</p>
<p>版权归作者所有，任何形式转载请联系作者。<br>作者：乌鸦火堂（来自豆瓣）<br>来源：<a href="https://movie.douban.com/review/8173028/" target="_blank" rel="external">https://movie.douban.com/review/8173028/</a></p>
<p>战争与表演，你都无法左右<br>中国有句俗语：“用得着你，你就是孙猴子；用不着你，你就是猴孙子。”<br>不比二战时期美国民众群情激昂，不比越战时期一边倒的反对。如今这个时代，美国人的危机感不在强烈，“战争英雄”这个头衔已经好久不见了。<br>你之所以上战场，就是因为你是一名士兵，你救人，是你应该的。我之所以揍你，就是你们装逼，阻碍我们的工作。<br>总之，他们不该在这里出现<br>就像比利·林恩，之所以参军，是因为给姐姐报仇，而不得不入伍。电影开场悍马车中，几位都将自己入伍的原因说了一遍，理由五花八门，但没有一个是传统意义上的那种“热血青年”。</p>
<p><img src="https://img1.doubanio.com/view/thing_review/large/public/p361769.jpg" alt=""></p>
<p><img src="https://img3.doubanio.com/view/thing_review/large/public/p361770.jpg" alt=""></p>
<p><img src="https://img3.doubanio.com/view/thing_review/large/public/p361773.jpg" alt=""></p>
<p><img src="https://img3.doubanio.com/view/thing_review/large/public/p361775.jpg" alt=""></p>
<p><img src="https://img3.doubanio.com/view/thing_review/large/public/p361774.jpg" alt=""></p>
<p><img src="https://img1.doubanio.com/view/thing_review/large/public/p361777.jpg" alt=""></p>
<p><img src="https://img1.doubanio.com/view/thing_review/large/public/p361779.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;War, Soldier, People&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img3.doubanio.com/view/movie_poster_cover/lpst/public/p2391542403.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;比利·林恩的中场战事的剧情简介  ·  ·  ·  ·  ·  ·&lt;/p&gt;
&lt;p&gt;　　伊拉克战争时期，来自美国德州的19岁技术兵比利·林恩（乔·阿尔文 Joe Alwyn 饰）因为一段偶然拍摄的视频而家喻户晓。那是一次规模不大却激烈非常的遭遇战，战斗中林恩所在的B班班长（范·迪塞尔 Vin Diesel 饰）遭到当地武装分子的伏击和劫持，而林恩为了营救班长不惜铤而走险冲锋陷阵。视频公布于世让他成为全美民众所崇拜的英雄，然而却鲜有人理解他和战友们所经历的一切。为了安葬班长，B班得到了短暂的休假，因此他们得以受邀参加一场在德州举行的橄榄球比赛。林恩的姐姐因某事件深感愧疚，她希望弟弟能借此机缘回归普通生活。而周围的经纪人、球迷、大老板、普通民众则对战争、卫国、士兵有着各种各样想当然的理解。球场上的庆典盛大开幕，林恩和战友们的心却愈加沉重与焦躁……&lt;br&gt;　　本片根据作家本·方丹（Ben Fountain）的同名小说改编。&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="English" scheme="http://ipcreator.me/tags/English/"/>
    
      <category term="Movie" scheme="http://ipcreator.me/tags/Movie/"/>
    
  </entry>
  
  <entry>
    <title>Android Dev Bugs</title>
    <link href="http://ipcreator.me/2017/03/08/Program/Android/android-trouble-resolver/"/>
    <id>http://ipcreator.me/2017/03/08/Program/Android/android-trouble-resolver/</id>
    <published>2017-03-08T14:59:06.000Z</published>
    <updated>2017-03-30T13:36:23.271Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/wiseman.jpeg" alt=""></p>
<p>什么是智者？就是一个坑不跌两回呗</p>
<p>The wiser man doesn’t fall into the same pit twice.</p>
<p>基础不牢、地动山摇</p>
<p> Without a solid foundation, the earth will shake.</p>
<a id="more"></a>
<h2 id="android-framework-用来快速开发的android框架"><a href="#android-framework-用来快速开发的android框架" class="headerlink" title="android framework 用来快速开发的android框架"></a><a href="https://github.com/zhaozepeng/Android_framework" target="_blank" rel="external">android framework 用来快速开发的android框架</a></h2><p>android_framework<br><em>an android framework in order for rapid development</em></p>
<h2 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1.开发环境"></a>1.开发环境</h2><p>环境为<em>android studio</em> + <em>jdk1.7</em></p>
<h2 id="2-框架结构"><a href="#2-框架结构" class="headerlink" title="2.框架结构"></a>2.框架结构</h2><p>该框架分为三个部分：<br><br><strong> libcore </strong>层<br><br><strong> libcore-ui </strong>层<br><br><strong> testsample </strong>层<br><br>第三层为测试代码，重点在第一和第二层…<br></p>
<h2 id="3-框架详细概述"><a href="#3-框架详细概述" class="headerlink" title="3.框架详细概述"></a>3.框架详细概述</h2><h3 id="第一层libcore"><a href="#第一层libcore" class="headerlink" title="第一层libcore"></a>第一层libcore</h3><p>该层为基础核心代码层，该层的代码特点是封装了应用所应该使用的基础功能，好处是封装的功能仅仅提供简单的接口，使得应用只需要更改libcore的封装实现，而不用修改底层的代码，从而轻松实现功能的变更，功能列表如下所示</p>
<ol><br><li>Application封装，使用了weakRefrence指向当前Activity的context，方便使用，还增加了应用crash，应用关闭等处理</li><br><li>最基础的Activity和Fragment类，配合Application类和ActivityManager类进行Activity的集中管理</li><br><li>ActivityManager类，使用栈来管理所有的activity</li><br><li>BaseNetApi类，实现了网络请求，网络访问的底层使用的是volley框架。现在提供两种方案：第一种就是可更换的网络框架，为了可更换，就要对volley进行大程度的封装，所有子module不可直接使用volley相关类，以后网络框架更改，只需要修改这几个相关类即可，由于volley功能的复杂性，只能封装最基本的网络访问功能，tag和cache等功能由于不通用性，暂时不封装；</li><br><li>BaseVolleyApi类，第二种就是纯粹的volley框架，不会更换网络访问框架，只需对其进行最基本的封装，所有功能类都可在子module中使用，所以会增大项目对volley框架的耦合性</li><br><li>ImageLoader类，用来进行图片的加载，封装的是volley的imageloader功能，支持lrucache和sd卡二级存储功能</li><br><li>log类，用来打印log，打印的日志信息非常完整</li><br><li>Toast类，该类用来弹出toast，支持弹出toast的位置</li><br><li>GuideManager类，用来显示指引蒙版，支持全屏展示和只在内容区域展示</li><br><li>BaseDialog类，定义了一个应用dialog所应该具备的基础行为</li><br><li>数据库相关类，将数据库类进行了非常便捷的封装，创建数据库应该继承自BaseDB类，为了该数据库的访问应该再创建一个helper类继承自BaseDBHelper，封装该数据库的所有操作，另外还需要对表名和列名进行了枚举的封装，这样使用该数据库直接使用该枚举类获取表名和表的相关列名。对数据库的版本升级也做了相应快捷的处理</li><br><li>CacheManager类，这个类使用SharedPreference来存储基本对象，有临时和永久两种，临时存储将会在每次应用退出之后自动清空，永久存储则永久存储</li><br><li>FileDownloadManager类，用来下载相关文件，为多线程断点续传式下载，支持开始，停止和删除操作</li><br><li>Utils类：<br><ul><br><li>CommonUtils，用来集中管理一些杂项函数，比如dp2px等</li><br><li>FileUtils，用来管理文件的相关操作</li><br><li>ImageUtils，用来处理图片的相关操作</li><br></ul><br></li><br></ol>

<h3 id="第二层libcore-ui层"><a href="#第二层libcore-ui层" class="headerlink" title="第二层libcore-ui层"></a>第二层libcore-ui层</h3><p>该层为基础核心扩展层，扩展libcore的层的代码，并且定义应用的基本样式，够统一样式，方便管理</p>
<ol><br><li>扩展实现的Activity和Fragment类，BaseActivity类中定义了整个应用的基本简单样式（现在提供两种样式，顶部透明样式和底部透明样式），顶部bar的样式(顶部bar有自定义bar和系统控件toolbar)等，BaseActivityWithPopWindow类继承BaseActivity类，实现了底部的弹出框；Fragment类定义了fragment和activity之间的通信方式和topbar的交互，</li><br><li>NetApi类，NetApi继承自BaseNetApi类，在原来的基础上扩展相关的功能，支持自定义继承自volley request的请求，额外的处理就只是在NetApi类中添加相应的函数</li><br><li>VolleyApi类，用来对BaseVolleyApi类进行功能扩展</li><br><li>PermanentCacheDB类，用来存储一些和应用生命周期相关的变量，写入数据库，永久保存</li><br><li>WebFragment类，该fragment用来显示网页，可以单独作为一个fragment嵌入一个页面的任何地方</li><br><li>WebActivity类，该activity用来展示网页，传入url即可显示网页，有进度条和刷新操作</li><br><li>AppDialog类，该类继承自父类BaseDialog类，定义了基本的样式，实现了基础的行为</li><br><li>DialogCreator类，该类用来生成基本样式的dialog</li><br><li>LoadingDialog类，用来定义一个应用最基本的加载框</li><br><li>基本实用的控件：<br><ul><br><li>SimpleGridLayout类，自定义网格布局，自动换行，自定义attr</li><br><li>FlowLayout类，自定义流式布局，支持方向选择，自动换行，自定义attr</li><br></ul><br></li><br></ol>

<h3 id="第三层应用层"><a href="#第三层应用层" class="headerlink" title="第三层应用层"></a>第三层应用层</h3><p>该层为模拟应用层，用来测试下层的代码。一个应用在使用了libcore层和libcore-ui层之后，可能还需要在封装一层或几层module，但是保证最基础的两层是应用所通用的module即可</p>
<h2 id="android-特殊用户通知用法汇总–Notification源码分析"><a href="#android-特殊用户通知用法汇总–Notification源码分析" class="headerlink" title="android 特殊用户通知用法汇总–Notification源码分析"></a><a href="http://blog.csdn.net/self_study/article/details/51055769" target="_blank" rel="external">android 特殊用户通知用法汇总–Notification源码分析</a></h2><p><a href="https://github.com/zhaozepeng/notification" target="_blank" rel="external">notification</a><br><a href="http://www.tutorialsface.com/2015/08/android-custom-notification-tutorial/" target="_blank" rel="external">android-custom-notification-tutorial</a></p>
<h2 id="编译时替换资源-Android重叠包与资源合并一见"><a href="#编译时替换资源-Android重叠包与资源合并一见" class="headerlink" title="编译时替换资源 - Android重叠包与资源合并一见"></a><a href="http://blog.zhaiyifan.cn/2016/02/18/android-resource-overlay/" target="_blank" rel="external">编译时替换资源 - Android重叠包与资源合并一见</a></h2><h3 id="处理多个资源文件夹"><a href="#处理多个资源文件夹" class="headerlink" title="处理多个资源文件夹"></a>处理多个资源文件夹</h3><p>每个sourceSet可以定义多个资源文件夹，举个例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">android.sourceSets &#123;</div><div class="line">   main.res.srcDirs = [&apos;src/main/res&apos;, &apos;src/main/res2&apos;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">  ...</div><div class="line">  aaptOptions &#123;</div><div class="line">      additionalParameters &apos;-S&apos;,</div><div class="line">              &apos;/Users/yifan/dev/github/Testapp/app/src/main/res3&apos;,</div><div class="line">              &apos;-S&apos;,</div><div class="line">              &apos;/Users/yifan/dev/github/Testapp/app/src/main/res2&apos;,</div><div class="line">              &apos;--auto-add-overlay&apos;</div><div class="line">      noCompress &apos;foo&apos;, &apos;bar&apos;</div><div class="line">      ignoreAssetsPattern &apos;!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir&gt;_*:!CVS:!thumbs.db:!picasa.ini:!*~&apos;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种情况下，两个资源文件夹具有相同优先级，即如果一个资源在两个文件夹都声明了，合并会报错。</p>
<p><a href="http://blog.csdn.net/u011156012/article/details/50575117" target="_blank" rel="external">分类整理res/Layouts中的布局文件(创建子目录)</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;  </div><div class="line">        main &#123;  </div><div class="line">            res.srcDirs =  </div><div class="line">                    [  </div><div class="line">                            &apos;src/main/res/layouts/mainpage&apos;,  </div><div class="line">                            &apos;src/main/res/layouts/investment&apos;,  </div><div class="line">                            &apos;src/main/res/layouts/productlist&apos;,  </div><div class="line">                            &apos;src/main/res/layouts/myaccount&apos;,  </div><div class="line">                            &apos;src/main/res/layouts/setting&apos;,  </div><div class="line">                            &apos;src/main/res/layouts&apos;,  </div><div class="line">                            &apos;src/main/res&apos;  </div><div class="line">                    ]  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="java中用正则表达式解析LRC文件"><a href="#java中用正则表达式解析LRC文件" class="headerlink" title="java中用正则表达式解析LRC文件"></a><a href="http://java-mzd.iteye.com/blog/811374" target="_blank" rel="external">java中用正则表达式解析LRC文件</a></h2><h2 id="正则表达式应用之提炼百度歌词的实现代码"><a href="#正则表达式应用之提炼百度歌词的实现代码" class="headerlink" title="正则表达式应用之提炼百度歌词的实现代码"></a><a href="http://www.jb51.net/article/27450.htm" target="_blank" rel="external">正则表达式应用之提炼百度歌词的实现代码</a></h2><p>时间段很有规律，一般以“[”开头以“]”结尾，有重复的时候就会出现两段时间段。第一时间想到了正则表达式，于是就用正则表达式写了如下的程序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;&lt;/title&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</div><div class="line">&lt;meta name=&quot;author&quot; content=&quot;&quot; /&gt;</div><div class="line">&lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;</div><div class="line">&lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;?php</div><div class="line">$contents2 = &quot;&quot;;</div><div class="line">$filename = &quot;html/tingshuo.lrc&quot;;</div><div class="line">$contents = file_get_contents($filename);</div><div class="line">echo nl2br($contents);</div><div class="line">echo &quot;&lt;br /&gt;&lt;br /&gt;&quot;;</div><div class="line">preg_match_all(&quot;/\][^\[].*+/&quot;,$contents,$array);</div><div class="line">$numArray = count($array[0]);</div><div class="line">for($i = 0;$i&lt;$numArray;$i++)&#123;</div><div class="line">$contents2.=trim($array[0][$i],&quot;\]&quot;);//去除左边的“]”</div><div class="line">$contents2.=&quot;&lt;br /&gt;&quot;;</div><div class="line">&#125;</div><div class="line">echo &quot;&lt;br /&gt;&lt;h2&gt;这是处理后的歌词记录&lt;/h2&gt;&lt;br /&gt;&quot;;</div><div class="line">echo $contents2;</div><div class="line">echo &quot;&lt;br /&gt;&lt;h2&gt;这是未处理的歌词记录&lt;/h2&gt;&lt;br /&gt;&quot;;</div><div class="line">echo &quot;&lt;br /&gt;&quot;;</div><div class="line">echo &quot;&lt;pre&gt;&quot;;</div><div class="line">print_r($array);</div><div class="line">echo &quot;&lt;/pre&gt;&quot;;</div><div class="line">?&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="Java-里把-InputStream-转换成-String-的几种方法"><a href="#Java-里把-InputStream-转换成-String-的几种方法" class="headerlink" title="Java 里把 InputStream 转换成 String 的几种方法"></a><a href="http://unmi.cc/java-convert-inputstream-to-string/" target="_blank" rel="external">Java 里把 InputStream 转换成 String 的几种方法</a></h2><ol>
<li>使用 JDK 5 的 Scanner</li>
<li>JDK1.4 及之前的 BufferedReader 法</li>
<li>JDK1.4 及之前的 readBytes 法</li>
<li>Apache commons IOUtils.toString 法</li>
<li>Google guava 的  CharStreams 方法</li>
<li>JDK 7 的 NIO readAllBytes</li>
</ol>
<h2 id="Android-指定销毁一个Activity"><a href="#Android-指定销毁一个Activity" class="headerlink" title="Android 指定销毁一个Activity"></a>Android 指定销毁一个Activity</h2><p>static MessagePushActivity instance;<br>instance=this;//在onCreate里面写<br>instance = null;//在onDestroy里面写<br>MessagePushActivity.instance.finish();//在其它的activity里面使用  </p>
<h2 id="在android程序中使用配置文件properties"><a href="#在android程序中使用配置文件properties" class="headerlink" title="在android程序中使用配置文件properties"></a><a href="http://www.cnblogs.com/SummerRain/archive/2013/08/18/3266584.html" target="_blank" rel="external">在android程序中使用配置文件properties</a></h2><p>在Android中，比起用纯字符串读写并自行解析，或是用xml来保存配置，<br>Properties显得更简单和直观，因为自行解析需要大量代码，而xml的操作又远不及Properties方便</p>
<h2 id="android读取工程根目录下文件内容"><a href="#android读取工程根目录下文件内容" class="headerlink" title="android读取工程根目录下文件内容"></a><a href="http://blog.csdn.net/z_sawyer/article/details/17918371" target="_blank" rel="external">android读取工程根目录下文件内容</a></h2><p>安卓某些资源目录，RAW目录以及ASSETS目录下的文件都能轻易读取，但是工程根目录下的文件Android确没有提供方法读取，只能自己想办法，曲线救国了android应用的后缀名称为.apk其实就是一个压缩文件，可以用解压缩工具查看里面的文件信息，那我想也可以通过读取压缩包文件的方式读取工程根目录下的文件的内容，android也提供了读取压缩文件信息的接口。那么就需要找到这个压缩包的存在，还好android提供了一个方法可以读取到apk的信息context.getPackageCodePath()，下面是详细代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">private static File findFile(Context context) &#123;  </div><div class="line">        String str3 = context.getPackageCodePath();  </div><div class="line">        try &#123;  </div><div class="line">            ZipInputStream zipInput=new ZipInputStream(new FileInputStream(str3));  </div><div class="line">            ZipEntry currentZipEntry = null;  </div><div class="line">            while ((currentZipEntry=zipInput.getNextEntry())!=null) &#123;  </div><div class="line">                String name = currentZipEntry.getName();  </div><div class="line">                if (!currentZipEntry.isDirectory()) &#123;  </div><div class="line">                    Log.d(&quot;zengnengxin&quot;, name + &quot;is a normal file&quot;);    </div><div class="line">                    if( name.equalsIgnoreCase(&quot;AndroidManifest.xml&quot;))&#123;  </div><div class="line">                        File file = new File(context.getFilesDir() + File.separator + name);    </div><div class="line">                        file.createNewFile();    </div><div class="line">                        // get the output stream of the file    </div><div class="line">                        FileOutputStream out = new FileOutputStream(file);    </div><div class="line">                        int ch;    </div><div class="line">                        byte[] buffer = new byte[1024];    </div><div class="line">                        //read (ch) bytes into buffer    </div><div class="line">                        while ((ch = zipInput.read(buffer)) != -1)&#123;    </div><div class="line">                            // write (ch) byte from buffer at the position 0    </div><div class="line">                            out.write(buffer, 0, ch);    </div><div class="line">                            out.flush();    </div><div class="line">                        &#125;    </div><div class="line">                        out.close();    </div><div class="line">                        return file;  </div><div class="line">                    &#125;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            zipInput.close();  </div><div class="line">        &#125; catch (Exception e) &#123;  </div><div class="line">            // TODO: handle exception  </div><div class="line">        &#125;     </div><div class="line">        return null;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="Android开发中获取assets文件夹下Xml文件的问题。"><a href="#Android开发中获取assets文件夹下Xml文件的问题。" class="headerlink" title="Android开发中获取assets文件夹下Xml文件的问题。"></a><a href="http://blog.csdn.net/rzleilei/article/details/11069587" target="_blank" rel="external">Android开发中获取assets文件夹下Xml文件的问题。</a></h2><p><strong>assets文件里面的文件在工程被运行的时候是不会被编译的。</strong></p>
<h3 id="直接使用XmlPullParser"><a href="#直接使用XmlPullParser" class="headerlink" title="直接使用XmlPullParser"></a>直接使用XmlPullParser</h3><p>我们查看XmlResourceParser源码的时候，就会发现XmlResourceParser实现了两个接口，AttributeSet和XmlPullParser，而实际上XmlPullParser就是帮助我们去读xml文件的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">InputStream in = DBHelper.getDBHelper().getContext().getResources()  </div><div class="line">                    .getAssets().open(&quot;province.xml&quot;);  </div><div class="line">            InputStream is = IOHelper.fromInputStreamToInputStreamInCharset(in,&quot;utf-8&quot;);  </div><div class="line"></div><div class="line">public void test(InputStream in) &#123;  </div><div class="line">        XmlPullParserFactory factory;  </div><div class="line">        try &#123;  </div><div class="line">            factory = XmlPullParserFactory.newInstance();  </div><div class="line">            factory.setNamespaceAware(true);  </div><div class="line">            XmlPullParser xpp = factory.newPullParser();  </div><div class="line">            xpp.setInput(in, &quot;UTF-8&quot;);  </div><div class="line">            int evtType = xpp.getEventType();  </div><div class="line">            // 一直循环，直到文档结束  </div><div class="line">            while (evtType != XmlPullParser.END_DOCUMENT) &#123;  </div><div class="line">                switch (evtType) &#123;  </div><div class="line">                case XmlPullParser.START_TAG:  </div><div class="line">                    String tag = xpp.getName();  </div><div class="line">                    System.out.println(tag);  </div><div class="line">                    break;  </div><div class="line">                case XmlPullParser.END_TAG:  </div><div class="line">                    break;  </div><div class="line">                default:  </div><div class="line">                    break;  </div><div class="line">                &#125;  </div><div class="line">                    //获得下一个节点的信息  </div><div class="line">                evtType = xpp.next();  </div><div class="line">            &#125;  </div><div class="line">        &#125; catch (Exception e) &#123;  </div><div class="line">            // TODO Auto-generated catch block  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="assets文件夹资源的访问"><a href="#assets文件夹资源的访问" class="headerlink" title="assets文件夹资源的访问"></a><a href="http://www.cnblogs.com/greatverve/archive/2012/03/08/android-assets.html" target="_blank" rel="external">assets文件夹资源的访问</a></h2><p>assets文件夹里面的文件都是保持原始的文件格式，需要用AssetManager以字节流的形式读取文件。</p>
<ol>
<li>先在Activity里面调用getAssets() 来获取AssetManager引用。</li>
<li>再用AssetManager的open(String fileName, int accessMode) 方法则指定读取的文件以及访问模式就能得到输入流InputStream。</li>
<li>然后就是用已经open file 的inputStream读取文件，读取完成后记得inputStream.close() 。<br>4.调用AssetManager.close() 关闭AssetManager。<br>需要注意的是，<strong>来自Resources和Assets 中的文件只可以读取而不能进行写的操作</strong></li>
</ol>
<h3 id="Android获取assets文件夹中的数据并写入SD卡示例"><a href="#Android获取assets文件夹中的数据并写入SD卡示例" class="headerlink" title="Android获取assets文件夹中的数据并写入SD卡示例"></a><a href="http://www.jb51.net/article/52689.htm" target="_blank" rel="external">Android获取assets文件夹中的数据并写入SD卡示例</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">/*将assets文件夹下的数据库写入SD卡中</div><div class="line"> * @author Dave */</div><div class="line">public class WriteToSD &#123;</div><div class="line"> private Context context;</div><div class="line"> String filePath = android.os.Environment.getExternalStorageDirectory()+&quot;/weather&quot;;</div><div class="line"> public WriteToSD(Context context)&#123;</div><div class="line"> this.context = context;</div><div class="line"> if(!isExist())&#123;</div><div class="line">  write();</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> private void write()&#123;</div><div class="line"> InputStream inputStream;</div><div class="line"> try &#123;</div><div class="line">  inputStream = context.getResources().getAssets().open(&quot;addressId.db&quot;);</div><div class="line">  File file = new File(filePath);</div><div class="line">  if(!file.exists())&#123;</div><div class="line">  file.mkdirs();</div><div class="line">  &#125;</div><div class="line">  FileOutputStream fileOutputStream = new FileOutputStream(filePath + &quot;/database.db&quot;);</div><div class="line">  byte[] buffer = new byte[512];</div><div class="line">  int count = 0;</div><div class="line">  while((count = inputStream.read(buffer)) &gt; 0)&#123;</div><div class="line">  fileOutputStream.write(buffer, 0 ,count);</div><div class="line">  &#125;</div><div class="line">  fileOutputStream.flush();</div><div class="line">  fileOutputStream.close();</div><div class="line">  inputStream.close();</div><div class="line">  System.out.println(&quot;success&quot;);</div><div class="line"> &#125; catch (IOException e) &#123;</div><div class="line">  e.printStackTrace();</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> private boolean isExist()&#123;</div><div class="line"> File file = new File(filePath + &quot;/database.db&quot;);</div><div class="line"> if(file.exists())&#123;</div><div class="line">  return true;</div><div class="line"> &#125;else&#123;</div><div class="line">  return false;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="android如何打印当前的线程及进程"><a href="#android如何打印当前的线程及进程" class="headerlink" title="android如何打印当前的线程及进程"></a><a href="http://blog.csdn.net/shi_xin/article/details/48180995" target="_blank" rel="external">android如何打印当前的线程及进程</a></h2><p>常用语句：<br>   Android.os.Process<br>    //获取当前进程的方法<br>    android.os.Process.getElapsedCpuTime()：获取消耗的时间。<br>android.os.Process.myPid()：获取该进程的ID。<br>android.os.Process.myTid()：获取该线程的ID。<br>android.os.Process.myUid()：获取该进程的用户ID。<br>    android.os.Process.supportsProcesses：判断该进程是否支持多进程。</p>
<pre><code>// 获取/设置线程优先级
getThreadPriority(int tid)：获取指定ID的线程的优先级。
setThreadPriority(int priority)：设置当前线程的优先级。
setThreadPriority(int tid,int priority)：设置指定ID的线程的优先级。

//管理进程
killProcess(int pid)：杀死指定的进程。
sendSignal(int pid,int singal)：向指定的进程发送信号。

android.os.Environment
//获取系统环境变量
getDataDirectory()：获取当前系统中数据文件夹环境变量。
getDownloadCacheDirectory()：获取当前系统中下载缓存文件环境变量。
getExternalStorageDirectory()：获取当前系统中外部存储文件环境变量。
getRootDirectory()：获取当前系统中根文件环境变量。
</code></pre><h2 id="Android-setTag和getTag-的使用"><a href="#Android-setTag和getTag-的使用" class="headerlink" title="Android setTag和getTag()的使用"></a><a href="http://blog.csdn.net/yelangjueqi/article/details/9666037" target="_blank" rel="external">Android setTag和getTag()的使用</a></h2><p> Tag不像ID是用标示view的。Tag从本质上来讲是就是相关联的view的额外的信息。它们经常用来存储一些view的数据，这样做非常方便而不用存入另外的单独结构。<br> convertView中的TAG</p>
<ol>
<li><p>对于使用了LayoutInflater对象进行View扩充的Tag的使用<br>在之前，在adapter中，我们在getView中是这么些的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public View getView(int position, View convertView, ViewGroup parent) &#123;</div><div class="line"></div><div class="line">       ViewHolder holder =null;</div><div class="line">      if (convertView ==null) &#123;</div><div class="line"></div><div class="line">          holder =new ViewHolder();</div><div class="line"></div><div class="line">          convertView =inflater.inflate(R.layout.vlist2,null);</div><div class="line">          holder.img = (ImageView) convertView.findViewById(R.id.img);</div><div class="line">          holder.title = (TextView) convertView.findViewById(R.id.title);</div><div class="line">           holder.info = (TextView)</div><div class="line">convertView.findViewById(R.id.info);</div><div class="line">         // setTag的妙用</div><div class="line">         convertView.setTag(holder);</div><div class="line"></div><div class="line">       &#125;else &#123;</div><div class="line">         // setTag的妙用</div><div class="line">         holder = (ViewHolder) convertView.getTag();</div><div class="line">       &#125;</div><div class="line"></div><div class="line"> ……略</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意标红的地方，他们是使用了Tag的。<br>首先我们要知道setTag方法是干什么的，他是给View对象的一个标签，标签可以是任何内容，我们这里把他设置成了一个对象，因为我们是把vlist2.xml的元素抽象出来成为一个类ViewHolder，用了setTag，这个标签就是ViewHolder实例化后对象的一个属性。我们之后对于ViewHolder实例化的对象holder的操作，都会因为Java的引用机制而一直存活并改变convertView的内容，而不是每次都是去new一个。我们就这样达到的重用——我希望我说清楚了。如果有更简单的解释，请指教。<br>这是我们在Adapter中的使用，那么我们在这里不使用Tag标签会怎么样呢？<br>我们试想，如果我们不用Tag标签，那么我们的对象如何与convertView缓存结合并达到合理的效率利用？貌似答案并不明朗——所以使用Tag是比较明智的做法。</p>
</li>
<li><p>对于没有使用LayoutInflater对象进行View扩充的Tag的使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (convertView != null) &#123;</div><div class="line">  view = convertView;</div><div class="line">  ...</div><div class="line">  &#125; else &#123;</div><div class="line">  view = new Xxx(...);</div><div class="line">  ...</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这是我们的程序，我们看到，貌似没有用Tag——是的，当没有使用LayoutInflater进行View的扩充的时候，是没有必要用的，虽然也可以用。</p>
</li>
<li><p>对于其他View的Tag使用<br>我们可以对所有的View对象进行操作，至于怎么用，就看作者怎么想的了，下面举例说一个View的子类button对于tag的一个使用。<br>直接贴代码了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">publicclass ButtonTagTestActivityextends Activityimplements OnClickListener &#123;</div><div class="line">   /** Called when the activity is first created. */</div><div class="line">   @Override</div><div class="line">   publicvoid onCreate(Bundle savedInstanceState) &#123;</div><div class="line">      super.onCreate(savedInstanceState);</div><div class="line">       setContentView(R.layout.main);</div><div class="line"></div><div class="line">       Button button1 = (Button) findViewById(R.id.button1);</div><div class="line">       Button button2 = (Button) findViewById(R.id.button2);</div><div class="line">       Button button3 = (Button) findViewById(R.id.button3);</div><div class="line"></div><div class="line">      button1.setTag(1);</div><div class="line">       button2.setTag(2);</div><div class="line">       button3.setTag(3);</div><div class="line"></div><div class="line">       button1.setOnClickListener(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   @Override</div><div class="line">   publicvoid onClick(View arg0) &#123;</div><div class="line">      // TODO Auto-generated method stub</div><div class="line">      int tag = (Integer) arg0.getTag();</div><div class="line">      switch (tag) &#123;</div><div class="line">      case 1: &#123;</div><div class="line">           Toast.makeText(this,&quot;我是button1&quot;, Toast.LENGTH_LONG).show();</div><div class="line">          break;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">      case 2: &#123;</div><div class="line">           Toast.makeText(this,&quot;我是button2&quot;, Toast.LENGTH_LONG).show();</div><div class="line">          break;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">      case 3: &#123;</div><div class="line">           Toast.makeText(this,&quot;我是button3&quot;, Toast.LENGTH_LONG).show();</div><div class="line">          break;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">      default: &#123;</div><div class="line">          break;</div><div class="line">       &#125;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Xml页面代码就不贴了。这个例子是点击界面上的3个button然后会显示用户点击的按钮。我们的程序是实现了页面全局监听，在监听前设置了每个button的tag，之后我们在switch的时候，使用getTag取出的标签来看是什么操作。<br>这样做的好处是可以将监听集中管理，提高代码的易读性——当然，这是我的自我理解。</p>
</li>
</ol>
<p> 看了这么多的实例，我想已经明白了Tag以及convertView。</p>
<p> 对我们知道了Tag的作用就是设置标签，标签可以是任意玩意。<br> 以及convertView是如何在程序中使代码运行变的效率的：利用缓存convertView尽可能少实例化同样结构体的对象；</p>
<p> 源码地址：<a href="http://download.csdn.net/detail/dadaxiaoxiaode/5844903" target="_blank" rel="external">http://download.csdn.net/detail/dadaxiaoxiaode/5844903</a></p>
<h2 id="充分挖掘AndroidMonitor的功能"><a href="#充分挖掘AndroidMonitor的功能" class="headerlink" title="充分挖掘AndroidMonitor的功能"></a>充分挖掘AndroidMonitor的功能</h2><h2 id="AndroidStudio-显示不出logcat日志"><a href="#AndroidStudio-显示不出logcat日志" class="headerlink" title="AndroidStudio 显示不出logcat日志"></a>AndroidStudio 显示不出logcat日志</h2><p> AndroidMonitor，若logcat 的Restart还不行，就重启IDE<br> 较早前不稳定的bug<a href="https://www.oschina.net/question/54100_33210" target="_blank" rel="external">解决android logcat不打印信息</a><br> <a href="http://www.cnblogs.com/JohnTsai/p/3983936.html" target="_blank" rel="external">Android学习笔记——log无法输出的解决方法和命令行查看log日志</a></p>
<h2 id="java中File类的getPath-getAbsolutePath-getCanonicalPath-区别"><a href="#java中File类的getPath-getAbsolutePath-getCanonicalPath-区别" class="headerlink" title="java中File类的getPath(),getAbsolutePath(),getCanonicalPath()区别"></a><a href="http://handd.blog.51cto.com/2796632/1173823" target="_blank" rel="external">java中File类的getPath(),getAbsolutePath(),getCanonicalPath()区别</a></h2><h3 id="getPath"><a href="#getPath" class="headerlink" title="getPath():"></a>getPath():</h3><p>返回的是定义时的路径，可能是相对路径，也可能是绝对路径，这个取决于定义时用的是相对路径还是绝对路径。如果定义时用的是绝对路径，那么使用getPath()返回的结果跟用getAbsolutePath()返回的结果一样</p>
<h3 id="getAbsolutePath"><a href="#getAbsolutePath" class="headerlink" title="getAbsolutePath():"></a>getAbsolutePath():</h3><p>返回的是定义时的路径对应的相对路径，但不会处理“.”和“..”的情况</p>
<h3 id="getCanonicalPath"><a href="#getCanonicalPath" class="headerlink" title="getCanonicalPath():"></a>getCanonicalPath():</h3><p>返回的是规范化的绝对路径，相当于将getAbsolutePath()中的“.”和“..”解析成对应的正确的路径<br>举例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">File file = new File(&quot;.\\test.txt&quot;);</div><div class="line">System.out.println(file.getPath());</div><div class="line">System.out.println(file.getAbsolutePath());</div><div class="line">System.out.println(file.getCanonicalPath());</div></pre></td></tr></table></figure></p>
<p>返回的结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.\test.txt</div><div class="line">E:\workspace\Test\.\test.txt</div><div class="line">E:\workspace\Test\test.txt</div></pre></td></tr></table></figure></p>
<p>“..”的情况类似</p>
<h2 id="Android如何检测网络的类型为3G、2G、wap、wifi"><a href="#Android如何检测网络的类型为3G、2G、wap、wifi" class="headerlink" title="Android如何检测网络的类型为3G、2G、wap、wifi"></a><a href="http://blog.csdn.net/nanzhiwen666/article/details/8288433" target="_blank" rel="external">Android如何检测网络的类型为3G、2G、wap、wifi</a></h2><p><a href="http://www.cnblogs.com/meteoric_cry/p/4627075.html" target="_blank" rel="external">Android判断用户的网络类型(2/3/4G、wifi) </a><br><a href="http://blog.csdn.net/s04103037/article/details/9636957" target="_blank" rel="external">android 开发中判断网络是否连接的代码</a></p>
<h2 id="android-设置textView水平居中显示"><a href="#android-设置textView水平居中显示" class="headerlink" title="android 设置textView水平居中显示"></a>android 设置textView水平居中显示</h2><ol>
<li><p>让textView里面的内容水平居中 :    android:gravity=”center_horizontal”</p>
<ol>
<li>让textView控件在它的父布局里水平居中     android:layout_gravity=”center_horizontal”</li>
</ol>
<h2 id="Java-编程下正则表达式判断字符串是否包含中文"><a href="#Java-编程下正则表达式判断字符串是否包含中文" class="headerlink" title="Java 编程下正则表达式判断字符串是否包含中文"></a><a href="http://www.cnblogs.com/sunzn/archive/2013/07/12/3186518.html" target="_blank" rel="external">Java 编程下正则表达式判断字符串是否包含中文</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> public static boolean isContainChinese(String str) &#123;</div><div class="line"></div><div class="line">    Pattern p = Pattern.compile(&quot;[\u4e00-\u9fa5]&quot;);</div><div class="line">    Matcher m = p.matcher(str);</div><div class="line">    if (m.find()) &#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Android里面多行字符串怎么一行行读取？"><a href="#Android里面多行字符串怎么一行行读取？" class="headerlink" title="Android里面多行字符串怎么一行行读取？"></a>Android里面多行字符串怎么一行行读取？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> String[] lines = 内容.split(&quot;\n&quot;);</div><div class="line">for(String line : lines) &#123;</div><div class="line">    //line就是每一行</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Java-list对象列表排序-实例"><a href="#Java-list对象列表排序-实例" class="headerlink" title="Java list对象列表排序 实例"></a><a href="http://www.cnblogs.com/qqzy168/p/4098031.html" target="_blank" rel="external">Java list对象列表排序 实例</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Collections.sort(list, new Comparator() &#123;</div><div class="line">           public int compare(Object a, Object b) &#123;</div><div class="line">               int one = ((Bean) a).getPriority();</div><div class="line">               int two = ((Bean) b).getPriority();</div><div class="line">               return one - two;</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<h2 id="JAVA编程有一个小数-如何去掉小数部分"><a href="#JAVA编程有一个小数-如何去掉小数部分" class="headerlink" title="JAVA编程有一个小数,如何去掉小数部分?"></a>JAVA编程有一个小数,如何去掉小数部分?</h2><p>向上取整:Math.ceil() //只要有小数都+1<br>向下取整:Math.floor() //不取小数<br>四舍五入:Math.round() //四舍五入</p>
<h2 id="Android-最简单的SD卡文件遍历程序"><a href="#Android-最简单的SD卡文件遍历程序" class="headerlink" title="Android 最简单的SD卡文件遍历程序"></a><a href="http://www.cnblogs.com/hnrainll/archive/2012/05/18/2507801.html" target="_blank" rel="external">Android 最简单的SD卡文件遍历程序</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">//检测SD卡是否存在</div><div class="line">if (Environment.getExternalStorageState().equals(</div><div class="line">        Environment.MEDIA_MOUNTED)) &#123;</div><div class="line">    path = Environment.getExternalStorageDirectory();</div><div class="line">&#125;else&#123;</div><div class="line">    Toast.makeText(this, &quot;没有SD卡&quot;, Toast.LENGTH_LONG).show();</div><div class="line">    finish();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 遍历接收一个文件路径，然后把文件子目录中的所有文件遍历并输出来</div><div class="line">   private void getAllFiles(File root)&#123;  </div><div class="line">       File files[] = root.listFiles();  </div><div class="line">       if(files != null)&#123;  </div><div class="line">           for (File f : files)&#123;  </div><div class="line">               if(f.isDirectory())&#123;  </div><div class="line">                   getAllFiles(f);  </div><div class="line">               &#125;else&#123;  </div><div class="line">                   System.out.println(f);  </div><div class="line">               &#125;  </div><div class="line">           &#125;  </div><div class="line">       &#125;  </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="android-程序中代码如何判断模拟器和真机"><a href="#android-程序中代码如何判断模拟器和真机" class="headerlink" title="android 程序中代码如何判断模拟器和真机"></a><a href="http://blog.csdn.net/shangxinlei88/article/details/44807415" target="_blank" rel="external">android 程序中代码如何判断模拟器和真机</a></h2><p>一般真机的imei码是唯一的所以可以采用这种方法！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/** 判断是否模拟器。如果返回TRUE，则当前是模拟器</div><div class="line">     * @param context</div><div class="line">     * @return</div><div class="line">*/</div><div class="line">public static boolean isEmulator(Context context)&#123;  </div><div class="line">        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);  </div><div class="line">        String imei = tm.getDeviceId();  </div><div class="line">        if (imei == null || imei.equals(&quot;000000000000000&quot;))&#123;  </div><div class="line">            return true;  </div><div class="line">        &#125;  </div><div class="line">        return false;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>提醒：记得要申请READ_PHONE_STATE权限哦</p>
<h2 id="android中arraylist插入数据到第一个位置"><a href="#android中arraylist插入数据到第一个位置" class="headerlink" title="android中arraylist插入数据到第一个位置"></a>android中arraylist插入数据到第一个位置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> ArrayList m = new ArrayList();</div><div class="line">m.add(0, Integer.valueOf(1));</div></pre></td></tr></table></figure>
<p>add方法可以指定位置</p>
<h2 id="android设置Activity背景色为透明的3种方法"><a href="#android设置Activity背景色为透明的3种方法" class="headerlink" title="android设置Activity背景色为透明的3种方法"></a><a href="http://blog.csdn.net/lily9/article/details/11983221" target="_blank" rel="external">android设置Activity背景色为透明的3种方法</a></h2><p> 方法一：这种方法比较简单，只有一个步骤，只需要在配置文件中把需要设置为透明的activity的样式设置为<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Android:theme=&quot;@android:style/Theme.Translucent&quot;</div></pre></td></tr></table></figure></p>
<p>即可，这种方式只改变背景的颜色，对其他控件没有影响。但是它只能把背景设置为完全透明。如果要设置为半透明或者要设置透明的程度无法实现。</p>
<p>方法二：这种方法也比较简单，只需要在方法一的基础上，再布局文件中配置背景颜色就可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:background=&quot;#01000000&quot;</div></pre></td></tr></table></figure></p>
<p> “ #01000000”中“01”表示的是背景透明的程度，这个值只能设置01及以上的值，不能设置为00，及不能设置为完全透明，不过设置为01其实和透明的效果也很接近了，肉眼几乎看不出来区别了。这种方法同样对其他控件没有影响。</p>
<p> 方法三：这种方法稍微复杂些，有几个步骤，这种方法对其他控件的透明度也会产生影响，并且可以自己设置透明的程度，相对来说要灵活一些。<br>第一步，在res/values下建立colors.xml文件，设置一个背景颜色，在这里可以设置你背景的颜色和透明度。<br>      添加上自定义的颜色<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;color name=&quot;transparent&quot;&gt;#55ff&lt;/color&gt;</div></pre></td></tr></table></figure></p>
<p>第二步，在res/values/下建styles.xml,设置程序的风格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;Transparent&quot;&gt;  </div><div class="line">        &lt;item name=&quot;android:windowBackground&quot;&gt;@color/transparent&lt;/item&gt;  </div><div class="line">        &lt;item name=&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;  </div><div class="line">        &lt;item name=&quot;android:windowAnimationStyle&quot;&gt;@+android:style/Animation.Translucent&lt;/item&gt;  </div><div class="line">    &lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>第三步，把这个styles.xml用在相应的Activity上。即在AndroidManifest.xml中的任意<activity>标签中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:theme=&quot;@style/Transparent&quot;</div></pre></td></tr></table></figure></activity></p>
<p>如果想设置所有的activity都使用这个风格，可以把这句标签语句添加在<application>中。<br>这个方法不仅对背景透明有效，而且对其他控件也有效，如果其他控件没有设置背景颜色，会呈现出透明的效果。这种方法比较复杂些，如果不是需要对整个页面及控件都有透明度要求，建议使用前面2中方法。        </application></p>
<h2 id="Android图片加载框架最全解析（一），Glide的基本用法"><a href="#Android图片加载框架最全解析（一），Glide的基本用法" class="headerlink" title="Android图片加载框架最全解析（一），Glide的基本用法"></a><a href="http://blog.csdn.net/guolin_blog/article/details/53759439" target="_blank" rel="external">Android图片加载框架最全解析（一），Glide的基本用法</a></h2><p>with()方法可以接收Context、Activity或者Fragment类型的参数。也就是说我们选择的范围非常广，不管是在Activity还是Fragment中调用with()方法，都可以直接传this。那如果调用的地方既不在Activity中也不在Fragment中呢？也没关系，我们可以获取当前应用程序的ApplicationContext，传入到with()方法当中。注意with()方法中传入的实例会决定Glide加载图片的生命周期，如果传入的是Activity或者Fragment的实例，那么当这个Activity或Fragment被销毁的时候，图片加载也会停止。如果传入的是ApplicationContext，那么只有当应用程序被杀掉的时候，图片加载才会停止。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">Glide.with(this).load(url).into(imageView);</div><div class="line"></div><div class="line">String url = &quot;http://cn.bing.com/az/hprichbg/rb/Dongdaemun_ZH-CN10736487148_1920x1080.jpg&quot;;</div><div class="line">Glide.with(this).load(url).into(imageView);</div><div class="line"></div><div class="line">// 加载本地图片</div><div class="line">File file = new File(getExternalCacheDir() + &quot;/image.jpg&quot;);</div><div class="line">Glide.with(this).load(file).into(imageView);</div><div class="line"></div><div class="line">// 加载应用资源</div><div class="line">int resource = R.drawable.image;</div><div class="line">Glide.with(this).load(resource).into(imageView);</div><div class="line"></div><div class="line">// 加载二进制流</div><div class="line">byte[] image = getImageBytes();</div><div class="line">Glide.with(this).load(image).into(imageView);</div><div class="line"></div><div class="line">// 加载Uri对象</div><div class="line">Uri imageUri = getImageUri();</div><div class="line">Glide.with(this).load(imageUri).into(imageView);</div><div class="line"></div><div class="line">// 占位图就是指在图片的加载过程中，我们先显示一张临时的图片，等图片加载出来了再替换成要加载的图片。</div><div class="line">Glide.with(this)</div><div class="line">     .load(url)</div><div class="line">     .placeholder(R.drawable.loading)</div><div class="line">     .into(imageView);</div><div class="line"></div><div class="line">// 因为Glide有非常强大的缓存机制，我们刚才加载那张必应美图的时候Glide自动就已经将它缓存下来了，下次加载的时候将会直接从缓存中读取，不会再去网络下载了，因而加载的速度非常快，所以占位图可能根本来不及显示。</div><div class="line">// 串接了一个diskCacheStrategy()方法，并传入DiskCacheStrategy.NONE参数，这样就可以禁用掉Glide的缓存功能。</div><div class="line">     Glide.with(this)</div><div class="line">     .load(url)</div><div class="line">     .placeholder(R.drawable.loading)</div><div class="line">     .diskCacheStrategy(DiskCacheStrategy.NONE)</div><div class="line">     .into(imageView);</div><div class="line"></div><div class="line">// 异常占位图就是指，如果因为某些异常情况导致图片加载失败，比如说手机网络信号不好，这个时候就显示这张异常占位图。</div><div class="line">     Glide.with(this)</div><div class="line">          .load(url)</div><div class="line">          .placeholder(R.drawable.loading)</div><div class="line">          .error(R.drawable.error)</div><div class="line">          .diskCacheStrategy(DiskCacheStrategy.NONE)</div><div class="line">          .into(imageView);</div><div class="line"></div><div class="line">不管我们传入的是一张普通图片，还是一张GIF图片，Glide都会自动进行判断，并且可以正确地把它解析并展示出来。</div><div class="line"></div><div class="line">// load()方法的后面加入了一个asBitmap()方法，这个方法的意思就是说这里只允许加载静态图片，不需要Glide去帮我们自动进行图片格式的判断了。</div><div class="line">          Glide.with(this)</div><div class="line">               .load(url)</div><div class="line">               .asBitmap()</div><div class="line">               .placeholder(R.drawable.loading)</div><div class="line">               .error(R.drawable.error)</div><div class="line">               .diskCacheStrategy(DiskCacheStrategy.NONE)</div><div class="line">               .into(imageView);</div><div class="line"></div><div class="line">// 既然我们能强制指定加载静态图片，就也能强制指定加载动态图片。用了asGif()方法替代了asBitmap()方法</div><div class="line">               Glide.with(this)</div><div class="line">                    .load(url)</div><div class="line">                    .asGif()</div><div class="line">                    .placeholder(R.drawable.loading)</div><div class="line">                    .error(R.drawable.error)</div><div class="line">                    .diskCacheStrategy(DiskCacheStrategy.NONE)</div><div class="line">                    .into(imageView);      </div><div class="line"></div><div class="line">//使用Glide在绝大多数情况下我们都是不需要指定图片大小的。</div><div class="line"></div><div class="line">                    Glide.with(this)</div><div class="line">                         .load(url)</div><div class="line">                         .placeholder(R.drawable.loading)</div><div class="line">                         .error(R.drawable.error)</div><div class="line">                         .diskCacheStrategy(DiskCacheStrategy.NONE)</div><div class="line">                         .override(100, 100)</div><div class="line">                         .into(imageView);</div></pre></td></tr></table></figure>
<p>什么叫内存浪费呢？比如说一张图片的尺寸是1000<em>1000像素，但是我们界面上的ImageView可能只有200</em>200像素，这个时候如果你不对图片进行任何压缩就直接读取到内存中，这就属于内存浪费了，因为程序中根本就用不到这么高像素的图片。Glide从来都不会直接将图片的完整尺寸全部加载到内存中，而是用多少加载多少。Glide会自动判断ImageView的大小，然后只将这么大的图片像素加载到内存当中，帮助我们节省内存开支。内部的实现原理其实就是<a href="http://blog.csdn.net/guolin_blog/article/details/9316683" target="_blank" rel="external"> Android高效加载大图、多图解决方案，有效避免程序OOM</a>当中介绍的技术</p>
<h2 id="video-player-android"><a href="#video-player-android" class="headerlink" title="video-player-android"></a><a href="https://github.com/appunite/video-player-android" target="_blank" rel="external">video-player-android</a></h2><h2 id="How-to-integrate-with-your-project"><a href="#How-to-integrate-with-your-project" class="headerlink" title="How to integrate with your project"></a>How to integrate with your project</h2><p> Add library to project dependencies.<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    jcenter()</div><div class="line">    maven &#123; url &quot;https://jitpack.io&quot; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line"></div><div class="line">    // snapshot version</div><div class="line">    compile &apos;com.github.appunite:video-player-android:master-SNAPSHOT&apos;</div><div class="line"></div><div class="line">    // or use specific version</div><div class="line">    compile &apos;com.github.appunite:video-player-android:1.0.1&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Start-video"><a href="#Start-video" class="headerlink" title="Start video"></a>Start video</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">startActivity(PlayerActivity.getVideoPlayerIntent(context,</div><div class="line">    &quot;https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/bipbop_4x3_variant.m3u8&quot;,</div><div class="line">    &quot;Video title&quot;));</div></pre></td></tr></table></figure>
<h2 id="Android项目实战（三十）：Fresco加载gif图片并播放"><a href="#Android项目实战（三十）：Fresco加载gif图片并播放" class="headerlink" title="Android项目实战（三十）：Fresco加载gif图片并播放"></a><a href="http://www.cnblogs.com/xqxacm/p/4982267.html" target="_blank" rel="external">Android项目实战（三十）：Fresco加载gif图片并播放</a></h2><p> <a href="https://github.com/koral--/android-gif-drawable" target="_blank" rel="external">android-gif-drawable</a>  Views and Drawable for displaying animated GIFs on Android</p>
<p> <img src="https://github.com/bumptech/glide/raw/master/static/glide_logo.png" alt=""></p>
<p> <a href="https://github.com/bumptech/glide" target="_blank" rel="external">Glide</a> An image loading and caching library for Android focused on smooth scrolling</p>
<p> <a href="https://github.com/qiushi123/QclGlide" target="_blank" rel="external">Glide加载gif动图，Glide带加载动画（动画可以自定义）比imageloader更好用的安卓图片加载库</a></p>
<p><img src="http://files.jb51.net/file_images/article/201604/2016427154541538.jpg?2016327154553" alt=""><br><a href="http://m.jb51.net/article/83155.htm" target="_blank" rel="external">Android App中使用Glide加载图片的教程</a></p>
<p><img src="http://files.jb51.net/file_images/article/201604/2016427150437442.png?201632715446" alt=""><br><img src="http://files.jb51.net/file_images/article/201604/2016427150459886.png?20163271556" alt=""><br><img src="http://files.jb51.net/file_images/article/201604/2016427150542660.png?201632715552" alt=""><br><a href="http://m.jb51.net/article/83153.htm" target="_blank" rel="external">从源码分析Android的Glide库的图片加载流程及特点</a></p>
<h2 id="如何使视频在VideoView中居中显示"><a href="#如何使视频在VideoView中居中显示" class="headerlink" title="如何使视频在VideoView中居中显示"></a><a href="http://blog.sina.com.cn/s/blog_6988593e0101j3pu.html" target="_blank" rel="external">如何使视频在VideoView中居中显示</a></h2><p> 默认情况下，如果视频分辨率小于设备的屏幕分辨率，VideoView在播放视频时都是在左上角显示的，影响美观。如何让居中显示呢？<br> 下面给出解决方法：<br> 1、修改VideoView组件的Layout Parameters的Gravity属性<br> <img src="http://s8.sinaimg.cn/mw690/001VP1dYzy6Je3KTVpZf7&amp;690" alt=""><br>2、使用“格式工厂”视频处理软件修改视频分辨率，使其等于或大于设备的屏幕分辨率。</p>
<h2 id="Android-设置TextView滑动滚动条和滑动效果"><a href="#Android-设置TextView滑动滚动条和滑动效果" class="headerlink" title="Android 设置TextView滑动滚动条和滑动效果"></a><a href="http://blog.csdn.net/whu_zhangmin/article/details/29808339" target="_blank" rel="external">Android 设置TextView滑动滚动条和滑动效果</a></h2><p><a href="http://jingyan.baidu.com/article/c85b7a640641dc003aac9562.html" target="_blank" rel="external">Android TextView属性大全</a></p>
<p> 1、单独的TextView控件设置滚动条<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">        Android:id=&quot;@+id/content&quot;</div><div class="line">        android:layout_width=&quot;fill_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;file content is empty!&quot;</div><div class="line">        android:scrollbars=&quot;vertical&quot;</div><div class="line">        android:fadeScrollbars=&quot;false&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>在activity中为这个TextView设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mFileContentView = (TextView) findViewById(R.id.content);</div><div class="line">mFileContentView.setMovementMethod(ScrollingMovementMethod.getInstance());</div></pre></td></tr></table></figure></p>
<p>经过上面两个步骤，TextView就可以上下滚动了，如果想自定义滚动条，接着在xml里面加入属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">android:scrollbarThumbVertical=&quot;@drawable/ic_launcher&quot;   //滑块的图片</div><div class="line">android:scrollbarTrackVertical=&quot;@drawable/ic_launcher&quot;   //滑道的图片</div></pre></td></tr></table></figure></p>
<p>ScrollBar由两部分组成，一个是Track（滑道），一个是Thumb(滑块)</p>
<p>2、也可以用ScrollView<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;ScrollView</div><div class="line">        android:layout_width=&quot;fill_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:scrollbars=&quot;vertical&quot;</div><div class="line">        android:fadingEdge=&quot;vertical&quot;&gt;</div><div class="line">    &lt;TextView</div><div class="line">            android:id=&quot;@+id/content&quot;</div><div class="line">            android:layout_width=&quot;fill_parent&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:text=&quot;file content is empty!&quot;/&gt;</div><div class="line">&lt;/ScrollView&gt;</div></pre></td></tr></table></figure></p>
<h2 id="删除联系人"><a href="#删除联系人" class="headerlink" title="删除联系人"></a>删除联系人</h2><p><a href="http://blog.csdn.net/u010800530/article/details/39455347" target="_blank" rel="external">Android开发系列（十一）：对手机通讯录的读取、添加、删除、查找</a><br><a href="http://www.cnblogs.com/weilf/p/4851872.html" target="_blank" rel="external">android通讯录开发及优化</a></p>
<h2 id="利用Android-Studio中集成的Android-Link"><a href="#利用Android-Studio中集成的Android-Link" class="headerlink" title="利用Android Studio中集成的Android Link"></a>利用Android Studio中集成的Android Link</h2><p>打开AS，点击工具栏的Analyze-Run Inspection by Name-输入unused resources-选择要搜索的范围回车-查看搜索结果并删除无用的资源文件</p>
<h2 id="android-parentActivityName"><a href="#android-parentActivityName" class="headerlink" title="android:parentActivityName"></a>android:parentActivityName</h2><p> android:parentActivityName的作用，就是为了左上角给子Activity加一个返回按钮，具体信息如下：</p>
<blockquote>
<p>Android 4.1提高性能、增强用户体验<br>App 栈导航：通过设置android:parentActivityName改变回退栈的内容，如果栈中没有parentActivity，则合成栈，通过onPrepareNavigateUpTaskStack()改变parentActivity中的内容。</p>
</blockquote>
<h2 id="解析网络数据"><a href="#解析网络数据" class="headerlink" title="解析网络数据"></a>解析网络数据</h2><p><a href="http://www.open-open.com/jsoup/" target="_blank" rel="external">jsoup Cookbook(中文版)</a><br><a href="https://jsoup.org/download" target="_blank" rel="external">Download jsoup</a></p>
<h2 id="Android图片缩放-压缩总结-inSampleSize-Matrix比较"><a href="#Android图片缩放-压缩总结-inSampleSize-Matrix比较" class="headerlink" title="Android图片缩放,压缩总结(inSampleSize,Matrix比较)"></a><a href="http://blog.csdn.net/roby1818/article/details/51801748" target="_blank" rel="external">Android图片缩放,压缩总结(inSampleSize,Matrix比较)</a></h2><p> Android中经常会遇到需要对图片进行缩放及压缩的操作,下面列出3种图片缩放方法:</p>
<p>一.图片缩放</p>
<p>1.inSampleSize(采样率)</p>
<p>优点:效率较高,解析速度快</p>
<p>缺点:采样率inSampleSize的取值只能是2的次方数(例如:inSampleSize=15,实际取值为8;inSampleSize=17,实际取值为16;实际取值会往2的次方结算),因此该方法不能精确的指定图片的大小</p>
<p>2.Matrix</p>
<p>优点:可以精确地指定图片的缩放大小</p>
<p>缺点:是在原bitmap的基础之上生成的,占内存,效率低.</p>
<p>3.ThumbnailUtils</p>
<p>2.2新加的类,实际上是将上述两种方法进行结合并做了封装.</p>
<p>二.图片压缩</p>
<p>往往图片压缩是为了节省网络流量,进行网络传输,一般需要将图片压缩成byte[] 数组.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static byte[] BitmapToByte(Bitmap bitmap) &#123;  </div><div class="line">    ByteArrayOutputStream baos = new ByteArrayOutputStream();  </div><div class="line">    bitmap.compress(CompressFormat.PNG, 80, baos);//其中80参数表示要压缩的比例  </div><div class="line">    return baos.toByteArray();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><p>自己先构想好，树形结构，嵌套/复用，图形化工具验证辅助<br>知其然，知其所以然</p>
<h2 id="Hello-World-Program-in-Eight-Different-Popular-Programming-Languages"><a href="#Hello-World-Program-in-Eight-Different-Popular-Programming-Languages" class="headerlink" title="Hello World Program in Eight Different Popular Programming Languages"></a><a href="http://www.thecrazyprogrammer.com/2014/07/hello-world-program-in-eight-different-popular-programming-languages.html" target="_blank" rel="external">Hello World Program in Eight Different Popular Programming Languages</a></h2><p>This fact is true that Hello World program is the first program that a programmer writes when he/she start learning a new programming language. Today I thought that I should share the hello world program in different languages. A video is also added for easy understanding of the programs. Let’s take a look on these programs.</p>
<h2 id="Android-Studio-之-JNI-开发详解"><a href="#Android-Studio-之-JNI-开发详解" class="headerlink" title="Android Studio 之 JNI 开发详解"></a><a href="http://www.jianshu.com/p/bc2b46381d88" target="_blank" rel="external">Android Studio 之 JNI 开发详解</a></h2><p> <a href="http://www.jianshu.com/p/2690c9964110" target="_blank" rel="external">使用Android Studio 进行NDK开发和调试</a><br><a href="http://blog.csdn.net/roby1818/article/details/51841104" target="_blank" rel="external">Jni接口-深入研究参数的传递</a><br>在app level的build.gradle中添加com.android.tools.build:gradle-experimental依赖。<br>在./app/build.gradle中添加gradle-experimental依赖</p>
<pre><code>dependencies {
    compile &apos;com.android.tools.build:gradle-experimental:0.7.0&apos;
}
</code></pre><p>再次在testJni()方法上按快捷键Alt +　Enter并回车</p>
<pre><code>#include &lt;jni.h&gt;

JNIEXPORT jstring JNICALL
Java_com_connorlin_jnitest_MainActivity_testJni(JNIEnv *env, jobject instance) {
    // TODO
    return (*env)-&gt;NewStringUTF(env, &quot;returnValue&quot;);
}
</code></pre><p>你会发现成功自动生成JNI方法了。</p>
<p>副作用</p>
<p>这种方式有个副作用是 Run app 时可能会报错</p>
<p>此时，只要将gradle-experimental依赖注释掉即可正常运行，同时会保持自动生成代码的功能，直到关闭工程。<br>这样我们在需要自动生成代码的时候，将gradle-experimental依赖再次打开即可。</p>
<p> <strong>什么是NDK？</strong><br>NDK全称是Native Development Kit，NDK提供了一系列的工具，帮助开发者快速开发C（或C++）的动态库，并能自动将so和java应用一起打包成apk。NDK集成了交叉编译器（交叉编译器需要UNIX或LINUX系统环境），并提供了相应的mk文件隔离CPU、平台、ABI等差异，开发人员只需要简单修改mk文件（指出“哪些文件需要编译”、“编译特性要求”等），就可以创建出so。</p>
<p> <strong>为什么使用NDK？</strong><br>1.)代码的保护。由于apk的java层代码很容易被反编译，而C/C++库反汇难度较大。<br>2.)可以方便地使用现存的开源库。大部分现存的开源库都是用C/C++代码编写的。<br>3.)提高程序的执行效率。将要求高性能的应用逻辑使用C开发，从而提高应用程序的执行效率。<br>4.)便于移植。用C/C++写得库可以方便在其他的嵌入式平台上再次使用。</p>
<p> <strong>什么是JNI？</strong><br>JNI全称为：Java Native Interface。JNI 是本地编程接口，它使得在 Java 虚拟机内部运行的 Java 代码能够与用其它语言(如 C、C++)编写的代码进行交互。</p>
<p> <strong>为什么使用JNI？</strong><br>JNI的目的是使java方法能够调用c实现的一些函数。</p>
<p> <strong>安卓中的so文件是什么？</strong><br>Android中用到的so文件是一个c++的函数库。在android的JNI中，要先将相应的C语言打包成so库，然后导入到lib文件夹中供java调用。</p>
<p>编译运行前，别忘了把打开了\app\build\intermediates\classes\debug\的Terminal命令行工具关掉，否则占用这个文件夹会导致编译不成功。因为编译的时候，会把build里的东西全部删除再重新生成，如果占用的话，删除不了就会出错。</p>
<p><a href="https://developer.android.com/studio/projects/add-native-code.html" target="_blank" rel="external">向您的项目添加 C 和 C++ 代码</a></p>
<h2 id="从当前的activity获得根视图"><a href="#从当前的activity获得根视图" class="headerlink" title="从当前的activity获得根视图"></a>从当前的activity获得根视图</h2><p> getWindow().getDecorView()</p>
<h2 id="无标题风格"><a href="#无标题风格" class="headerlink" title="无标题风格"></a>无标题风格</h2><p> 在指定的activity中设定 android:theme=”@style/Theme.AppCompat.Light.NoActionBar”</p>
<p><a href="http://m.2cto.com/kf/201607/524895.html" target="_blank" rel="external">Android实现无标题栏全屏的三种方法</a><br><a href="http://blog.csdn.net/rodulf/article/details/53785632" target="_blank" rel="external">You need to use a Theme.AppCompat theme (or descendant) with this activity.</a></p>
<p><a href="http://blog.csdn.net/shulianghan/article/details/39204393" target="_blank" rel="external">【Android 应用开发】 ActionBar 基础</a></p>
<h2 id="Android存储访问及目录"><a href="#Android存储访问及目录" class="headerlink" title="Android存储访问及目录"></a><a href="http://www.cnblogs.com/mengdd/p/3742623.html" target="_blank" rel="external">Android存储访问及目录</a></h2><p><a href="http://blog.csdn.net/yuzhiboyi/article/details/8645730" target="_blank" rel="external">Android中的Environment.getExternalStorageState使用</a></p>
<p><a href="http://www.cnblogs.com/wsine/p/5177372.html" target="_blank" rel="external">Android实现简单音乐播放器(MediaPlayer)</a><br><a href="http://www.runoob.com/w3cnote/android-tutorial-mediaplayer.html" target="_blank" rel="external">MediaPlayer播放音频与视频</a></p>
<h2 id="Gson使用指南"><a href="#Gson使用指南" class="headerlink" title="Gson使用指南"></a><a href="http://www.jianshu.com/p/e740196225a4" target="_blank" rel="external">Gson使用指南</a></h2><p> JSON (官网) 是一种文本形式的数据交换格式，它比XML更轻量、比二进制容易阅读和编写，调式也更加方便。其重要性不言而喻。解析和生成的方式很多，Java中最常用的类库有：JSON-Java、Gson、Jackson、FastJson等。</p>
<p> 期望的json格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;name&quot;:&quot;怪盗kidou&quot;,&quot;age&quot;:24,&quot;emailAddress&quot;:&quot;ikidou@example.com&quot;&#125;</div></pre></td></tr></table></figure></p>
<p>实际<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;name&quot;:&quot;怪盗kidou&quot;,&quot;age&quot;:24,&quot;email_address&quot;:&quot;ikidou@example.com&quot;&#125;</div></pre></td></tr></table></figure></p>
<p>这对于使用PHP作为后台开发语言时很常见的情况，php和js在命名时一般采用下划线风格，而Java中一般采用的驼峰法，让后台的哥们改吧 前端和后台都不爽，但要自己使用下划线风格时我会感到不适应，怎么办?难到没有两全齐美的方法么?</p>
<p>我们知道Gson在序列化和反序列化时需要使用反射，说到反射就不得不想到注解,一般各类库都将注解放到annotations包下，打开源码在com.google.gson包下果然有一个annotations，里面有一个SerializedName的注解类，这应该就是我们要找的。</p>
<p>那么对于json中email_address这个属性对应POJO的属性则变成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@SerializedName(&quot;email_address&quot;)</div><div class="line">public String emailAddress;</div></pre></td></tr></table></figure></p>
<p>这样的话，很好的保留了前端、后台、Android/java各自的命名习惯。</p>
<p>你以为这样就完了么?</p>
<p>如果接中设计不严谨或者其它地方可以重用该类，其它字段都一样，就emailAddress 字段不一样，比如有下面三种情况那怎么?重新写一个?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;name&quot;:&quot;怪盗kidou&quot;,&quot;age&quot;:24,&quot;emailAddress&quot;:&quot;ikidou@example.com&quot;&#125;</div><div class="line">&#123;&quot;name&quot;:&quot;怪盗kidou&quot;,&quot;age&quot;:24,&quot;email_address&quot;:&quot;ikidou@example.com&quot;&#125;</div><div class="line">&#123;&quot;name&quot;:&quot;怪盗kidou&quot;,&quot;age&quot;:24,&quot;email&quot;:&quot;ikidou@example.com&quot;&#125;</div></pre></td></tr></table></figure></p>
<p>为POJO字段提供备选属性名<br>SerializedName注解提供了两个属性，上面用到了其中一个，别外还有一个属性alternate，接收一个String数组。<br>注：<strong>alternate需要2.4版本</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@SerializedName(value = &quot;emailAddress&quot;, alternate = &#123;&quot;email&quot;, &quot;email_address&quot;&#125;)</div><div class="line">public String emailAddress;</div></pre></td></tr></table></figure></p>
<p>当上面的三个属性(email_address、email、emailAddress)都中出现任意一个时均可以得到正确的结果。<br>注：当多种情况同时出时，以最后一个出现的值为准。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Gson gson = new Gson();</div><div class="line">String json = &quot;&#123;\&quot;name\&quot;:\&quot;怪盗kidou\&quot;,\&quot;age\&quot;:24,\&quot;emailAddress\&quot;:\&quot;ikidou_1@example.com\&quot;,\&quot;email\&quot;:\&quot;ikidou_2@example.com\&quot;,\&quot;email_address\&quot;:\&quot;ikidou_3@example.com\&quot;&#125;&quot;;</div><div class="line">User user = gson.fromJson(json, User.class);</div><div class="line">System.out.println(user.emailAddress); // ikidou_3@example.com</div></pre></td></tr></table></figure></p>
<h2 id="你们要的多数据库功能终于来了"><a href="#你们要的多数据库功能终于来了" class="headerlink" title="你们要的多数据库功能终于来了"></a><a href="http://www.10tiao.com/html/227/201611/2650237709/1.html" target="_blank" rel="external">你们要的多数据库功能终于来了</a></h2><p> <a href="http://www.jianshu.com/p/4cb9696b906a" target="_blank" rel="external">数据库框架LitePal使用指南</a><br> <a href="http://blog.csdn.net/guolin_blog/article/details/39207945" target="_blank" rel="external">Android数据库高手秘籍(四)——使用LitePal建立表关联</a></p>
<h2 id="TouchListener-PK-OnTouchEvent-多点触碰"><a href="#TouchListener-PK-OnTouchEvent-多点触碰" class="headerlink" title="TouchListener PK OnTouchEvent + 多点触碰"></a><a href="http://www.runoob.com/w3cnote/android-tutorial-touchlistener-ontouchevent.html" target="_blank" rel="external">TouchListener PK OnTouchEvent + 多点触碰</a></h2><p> TouchListener是基于监听的，而OnTouchEvent则是基于回调的！<br> OnTouchListener相关方法与属性<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> onTouch(View v, MotionEvent event):这里面的参数依次是触发触摸事件的组件,触碰事件event 封装了触发事件的详细信息，同样包括事件的类型、触发时间等信息。比如event.getX(),event.getY()</div><div class="line">我们也可以对触摸的动作类型进行判断,使用event.getAction( )再进行判断;如:</div><div class="line">event.getAction == MotionEvent.ACTION_DOWN：按下事件</div><div class="line">event.getAction == MotionEvent.ACTION_MOVE:移动事件</div><div class="line">event.getAction == MotionEvent.ACTION_UP:弹起事件</div></pre></td></tr></table></figure></p>
<p> onTouchEvent更多的是用于自定义的view,所有的view类中都重写了该方法,而这种触摸事件是基于回调的,也就是说:如果我们返回的值是false的话,那么事件会继续向外传播,由外面的容器或者Activity进行处理!当然还涉及到了手势(Gesture),这个我们会在后面进行详细的讲解!onTouchEvent其实和onTouchListener是类似的,只是处理机制不用,前者是回调,后者是监听模式！</p>
<h2 id="多点触碰"><a href="#多点触碰" class="headerlink" title="多点触碰"></a>多点触碰</h2><p> 多点触碰就是多个手指在屏幕上进行操作，用的最多的估计是放大缩功能吧，比如很多的图片浏览器都支持缩放！理论上Android系统本身可以处理多达256个手指的触摸，当然这取决于手机硬件的支持；不过支持多点触摸的手机一般支持2-4个点，当然有些更多！我们发现前面两点都有用到MotionEvent，MotionEvent代表的是一个触摸事件；前我们可以根据event.getAction() &amp; MotionEvent.ACTION_MASK来判断是哪种操作，除了上面介绍的三种单点操作外，还有两个多点专用的操作：<br>MotionEvent.ACTION_POINTER_DOWN:当屏幕上已经有一个点被按住，此时再按下其他点时触发。<br>MotionEvent.ACTION_POINTER_UP:当屏幕上有多个点被按住，松开其中一个点时触发（即非最后一个点被放开时）。</p>
<p><strong>简单的流程</strong>大概是这样：<br>当我们一个手指触摸屏幕 ——&gt; 触发ACTION_DOWN事件<br>接着有另一个手指也触摸屏幕 ——&gt; 触发ACTION_POINTER_DOWN事件,如果还有其他手指触摸，继续触发<br>有一个手指离开屏幕 ——&gt; 触发ACTION_POINTER_UP事件，继续有手指离开，继续触发<br>当最后一个手指离开屏幕 ——&gt; 触发ACTION_UP事件<br>而且在整个过程中，ACTION_MOVE事件会一直不停地被触发<br>我们可以通过event.getX(int)或者event.getY(int)来获得不同触摸点的位置： 比如event.getX(0)可以获得第一个接触点的X坐标，event.getX(1)获得第二个接触点的X坐标这样… 另外，我们还可以在调用MotionEvent对象的getPointerCount()方法判断当前有多少个手指在触摸~</p>
<h2 id="Bitmap-位图-全解析"><a href="#Bitmap-位图-全解析" class="headerlink" title="Bitmap(位图)全解析"></a><a href="http://www.runoob.com/w3cnote/android-tutorial-bitmap1.html" target="_blank" rel="external">Bitmap(位图)全解析</a></h2><p> <strong>Drawable</strong>：通用的图形对象，用于装载常用格式的图像，既可以是PNG，JPG这样的图像， 也是前面学的那13种Drawable类型的可视化对象！我们可以理解成 <strong>一个用来放画的——画框</strong>！<br><strong>Bitmap(位图)</strong>：我们可以把他看作 <strong>一个画架，我们先把画放到上面，然后我们可以 进行一些处理，比如获取图像文件信息，做旋转切割，放大缩小等操作</strong>！<br><strong>Canvas(画布)</strong>：如其名，画布，我们可以在上面作画(绘制)，你 <strong>既可以用Paint(画笔)， 来画各种形状或者写字，又可以用Path(路径)来绘制多个点，然后连接成各种图形！</strong><br><strong>Matrix(矩阵)</strong>：用于图形特效处理的，颜色矩阵(ColorMatrix)，还有 <strong>使用Matrix进行图像的 平移，缩放，旋转，倾斜等</strong>！<br>而上述的这些都是Android中的底层图形类：android.graphics给我们提供的接口</p>
<h2 id="Drawable资源使用注意事项"><a href="#Drawable资源使用注意事项" class="headerlink" title="Drawable资源使用注意事项"></a><a href="http://www.runoob.com/w3cnote/android-tutorial-drawable1.html" target="_blank" rel="external">Drawable资源使用注意事项</a></h2><p>Drawable分为两种： 一种是我们普通的图片资源，在Android Studio中我们一般放到res/mipmap目录下， 和以前的Eclipse不一样哦！另外我们如果把工程切换成Android项目模式，我们直接 往mipmap目录下丢图片即可，AS会自动分hdpi，xhdpi…！ 另一种是我们编写的XML形式的Drawable资源，我们一般把他们放到res/drawable目录 下，比如最常见的按钮点击背景切换的Selctor！</p>
<p>在XML我们直接通过@mipmap或者@drawable设置Drawable即可 比如: android:background = “@mipmap/iv_icon_zhu” / “@drawable/btn_back_selctor” 而在Java代码中我们可以通过Resource的getDrawable(R.mipmap.xxx)可以获得drawable资源 如果是为某个控件设置背景，比如ImageView，我们可以直接调用控件.getDrawale()同样 可以获得drawable对象！</p>
<p>Android中drawable中的资源名称有约束，必须是：[a-z0-9_.]（即：只能是字母数字及和.）， 而且不能以数字开头，否则编译会报错： Invalid file name: must contain only [a-z0-9.]！ 小写啊！！！！小写！！！小写！——重要事情说三遍~</p>
<h2 id="圆形图片CircleImageView的使用和分析"><a href="#圆形图片CircleImageView的使用和分析" class="headerlink" title="圆形图片CircleImageView的使用和分析"></a><a href="http://blog.csdn.net/ruancoder/article/details/51889505" target="_blank" rel="external">圆形图片CircleImageView的使用和分析</a></h2><p><a href="http://blog.csdn.net/zhangphil/article/details/52130212" target="_blank" rel="external">Android CircleImageView圆形ImageView</a><br>CircleImageView项目下载地址：<br><a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="external">https://github.com/hdodenhof/CircleImageView</a></p>
<p>自定义属性attrs：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;CircleImageView&quot;&gt;  </div><div class="line">        &lt;attr name=&quot;civ_border_width&quot; format=&quot;dimension&quot; /&gt;  </div><div class="line">        &lt;attr name=&quot;civ_border_color&quot; format=&quot;color&quot; /&gt;  </div><div class="line">        &lt;attr name=&quot;civ_border_overlay&quot; format=&quot;boolean&quot; /&gt;  </div><div class="line">        &lt;attr name=&quot;civ_fill_color&quot; format=&quot;color&quot; /&gt;  </div><div class="line">    &lt;/declare-styleable&gt;</div></pre></td></tr></table></figure></p>
<p>属性介绍：civ_border_width：   设置边框的宽度，默认为0，即无边框。<br>civ_border_color：    设置边框的颜色，默认为黑色。<br>civ_border_overlay：设置边框是否覆盖在图片上，默认为false，即边框在图片外圈。<br>civ_fill_color：           设置图片的底色，默认透明。<br><strong>注意：CircleImageView的默认ScaleType为CENTER_CROP，且只能为CENTER_CROP。</strong></p>
<p><strong>Limitations</strong></p>
<ol>
<li>The ScaleType is always CENTER_CROP and you’ll get an exception if you try to change it. This is (currently) by design as it’s perfectly fine for profile images.</li>
<li>Enabling adjustViewBounds is not supported as this requires an unsupported ScaleType</li>
<li>If you use an image loading library like Picasso or Glide, you need to disable their fade animations to avoid messed up images. For Picasso use the noFade() option, for Glide use dontAnimate(). If you want to keep the fadeIn animation, you have to fetch the image into a Target and apply a custom animation yourself when receiving the Bitmap.</li>
<li>Using a TransitionDrawable with CircleImageView doesn’t work properly and leads to messed up images.</li>
</ol>
<h2 id="三个绘图工具类"><a href="#三个绘图工具类" class="headerlink" title="三个绘图工具类"></a><a href="http://www.runoob.com/w3cnote/android-tutorial-drawable-tool.html" target="_blank" rel="external">三个绘图工具类</a></h2><p>Drawable以及Bitmap，都是加载好图片的，而本节我们要学习的绘图相关的 一些API，他们分别是Canvas(画布)，Paint(画笔)，Path(路径)！本节非常重要，同时也是我们 自定义View的基础</p>
<h2 id="Intent之复杂数据的传递"><a href="#Intent之复杂数据的传递" class="headerlink" title="Intent之复杂数据的传递"></a>Intent之复杂数据的传递</h2><p><a href="http://www.runoob.com/w3cnote/android-tutorial-intent-pass-data.html" target="_blank" rel="external">Android 基础入门教程</a></p>
<h3 id="Intent传递数组"><a href="#Intent传递数组" class="headerlink" title="Intent传递数组"></a>Intent传递数组</h3><p><strong>写入数组</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bd.putStringArray(&quot;StringArray&quot;, new String[]&#123;&quot;呵呵&quot;,&quot;哈哈&quot;&#125;);</div></pre></td></tr></table></figure></p>
<p>//可把StringArray换成其他数据类型,比如int,float等等…<br><strong>读取数组</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String[] str = bd.getStringArray(&quot;StringArray&quot;)</div></pre></td></tr></table></figure></p>
<h3 id="Intent传递集合"><a href="#Intent传递集合" class="headerlink" title="Intent传递集合"></a>Intent传递集合</h3><p><strong>List&lt;基本数据类型或String&gt;</strong><br>写入集合：<br>intent.putStringArrayListExtra(name, value)<br>intent.putIntegerArrayListExtra(name, value)<br>读取集合：<br>intent.getStringArrayListExtra(name)<br>intent.getIntegerArrayListExtra(name)</p>
<p><strong>List&lt; Object&gt;</strong><br>将list强转成Serializable类型,然后传入(可用Bundle做媒介)<br>写入集合：<br>putExtras(key, (Serializable)list)<br>读取集合：<br>(List<object>) getIntent().getSerializable(key)<br>PS:Object类需要实现Serializable接口</object></p>
<h2 id="MediaPlayer播放音频与视频"><a href="#MediaPlayer播放音频与视频" class="headerlink" title="MediaPlayer播放音频与视频"></a><a href="http://www.runoob.com/w3cnote/android-tutorial-mediaplayer.html" target="_blank" rel="external">MediaPlayer播放音频与视频</a></h2><p>Android多媒体中的——MediaPlayer，我们可以通过这个API来播放音频和视频 该类是Androd多媒体框架中的一个重要组件，<br>通过该类，我们可以以最小的步骤来获取，解码 和播放音视频。它支持三种不同的媒体来源：</p>
<ol>
<li>本地资源</li>
<li>内部的URI，比如你可以通过ContentResolver来获取</li>
<li>外部URL(流) 对于Android所支持的的媒体格式列表</li>
</ol>
<p><a href="http://www.jianshu.com/p/a00389c04887" target="_blank" rel="external">Android小项目之“音乐播放器”</a><br>设置播放器的监听器：<br>MediaPlayer提供了一些设置不同监听器的方法来更好地对播放器的工作状态进行监听，以期及时处理各种情况，<br>如： setOnCompletionListener(MediaPlayer.OnCompletionListener listener)、<br>setOnErrorListener(MediaPlayer.OnErrorListener listener)等,设置播放器时需要考虑到播放器可能出现的情况设置好监听和处理逻辑，以保持播放器的健壮性。</p>
<h2 id="安装Apache服务器"><a href="#安装Apache服务器" class="headerlink" title="安装Apache服务器"></a>安装Apache服务器</h2><p> 一句话，通过官方网站和集成包，最为简单快捷<br> <a href="https://www.apachefriends.org/zh_cn/index.html" target="_blank" rel="external">XAMPP Apache + MariaDB + PHP + Perl</a></p>
<h2 id="上传文件到7牛，删除后服务器未能及时刷新"><a href="#上传文件到7牛，删除后服务器未能及时刷新" class="headerlink" title="上传文件到7牛，删除后服务器未能及时刷新"></a>上传文件到7牛，删除后服务器未能及时刷新</h2><p>如果调试需要，只能重命名后再上传，更换新的路径</p>
<h2 id="JAVA中，字符串拼接尽量使用StringBuilder的append方法"><a href="#JAVA中，字符串拼接尽量使用StringBuilder的append方法" class="headerlink" title="JAVA中，字符串拼接尽量使用StringBuilder的append方法"></a>JAVA中，字符串拼接尽量使用StringBuilder的append方法</h2><p>效率测试可参看<a href="http://www.cnblogs.com/focusj/archive/2011/02/16/2057630.html" target="_blank" rel="external">java五种拼接字符串的方法</a></p>
<h2 id="“”和null的差别"><a href="#“”和null的差别" class="headerlink" title="“”和null的差别"></a>“”和null的差别</h2><p>s是一个String类的引用，null表示它不指向任何字符串对象，””表示s指向一个长度为0的字符串对象。如果调用s.length()之类的方法，s为null时会抛出NullPointerException，而””则能进行正常的计算。  </p>
<h2 id="模拟器离线"><a href="#模拟器离线" class="headerlink" title="模拟器离线"></a>模拟器离线</h2><p>通过DDMS的File Explorer查看文件提示<br>com.android.ddmlib.AdbCommandRejectedException: device offline</p>
<p>【解决办法】在cmd下输入：<br>Step1：  adb kill-server<br>Step2： adb start-server<br>或者打开进程管理器，把adb关掉，再重启adb。</p>
<h2 id="button透明"><a href="#button透明" class="headerlink" title="button透明"></a>button透明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">半透明&lt;Button android:background=&quot;#11000000&quot;  /&gt;</div><div class="line">透明&lt;Button android:background=&quot;#00000000&quot; /&gt;</div></pre></td></tr></table></figure>
<p><strong>原理</strong>：颜色和不透明度 (alpha) 值以十六进制表示法表示。任何一种颜色的值范围都是 0 到 255（00 到 ff）。对于 alpha，00 表示完全透明，ff 表示完全不透明。表达式顺序是“aabbggrr”，其中“aa=alpha”（00 到 ff）；“bb=blue”（00 到 ff）；“gg=green”（00 到 ff)；“rr=red”（00 到 ff）。所以要实现半透明只需将‘bb’,‘gg’,‘rr’的值都设为‘00’，只调节‘aa’的值（00到方法）就可以控制不同的透明度。</p>
<h2 id="按钮点击效果变化"><a href="#按钮点击效果变化" class="headerlink" title="按钮点击效果变化"></a>按钮点击效果变化</h2><p><a href="http://blog.csdn.net/jiaruihua_blog/article/details/12615267" target="_blank" rel="external"> android selector 背景选择器的使用， button （未点击，点击，选中保持状态）效果实现</a><br><a href="http://blog.sina.com.cn/s/blog_777c69930100zij8.html" target="_blank" rel="external">Android Button、ImageView等自定义选中、按下、未选中等效果</a></p>
<h2 id="android获取string-xml的值"><a href="#android获取string-xml的值" class="headerlink" title="android获取string.xml的值"></a>android获取string.xml的值</h2><p>更多参考：<a href="http://blog.sina.com.cn/s/blog_618199e601011bst.html" target="_blank" rel="external">android获取string.xml的值</a><br>获取string.xml文件里面的值有几个不同的地方。<br>1.在AndroidManifest.xml与layout等xml文件里:<br>android:text=”@string/resource_name”</p>
<p>2.在activity里：<br>方法一:this.getString(R.string.resource_name);<br>方法二:getResources().getString(R.string.resource_name);</p>
<p>3.在其他java文件（必须有Context或pplication）<br>方法一: context.getString(R.string.resource_name);<br>方法二: application.getString(R.string.resource_name);</p>
<h2 id="Android-Button、ImageView等自定义选中、按下、未选中等效果"><a href="#Android-Button、ImageView等自定义选中、按下、未选中等效果" class="headerlink" title="Android Button、ImageView等自定义选中、按下、未选中等效果"></a>Android Button、ImageView等自定义选中、按下、未选中等效果</h2><p><a href="http://blog.sina.com.cn/s/blog_777c69930100zij8.html" target="_blank" rel="external">原文</a><br>方法：自定义状态效果可以通过代码实现，也可以通过xml定义style实现。<br><a href="http://blog.csdn.net/jiaruihua_blog/article/details/12615267" target="_blank" rel="external"> android selector 背景选择器的使用， button （未点击，点击，选中保持状态）效果实现</a></p>
<h2 id="升级到AndroidStudio2-3之后，添加ListView控件，程序异常"><a href="#升级到AndroidStudio2-3之后，添加ListView控件，程序异常" class="headerlink" title="升级到AndroidStudio2.3之后，添加ListView控件，程序异常"></a>升级到AndroidStudio2.3之后，添加ListView控件，程序异常</h2><p><strong>原因</strong>：ListView控件使用了MATCH_PARENT，而该属性在ConstraintLayout布局中是不支持的<br>Exception raised during rendering: MATCH_PARENT is not supported in ConstraintLayout (Details)   Tip: Try to refresh the layout.  </p>
<p><strong>解决方案</strong>：去除该属性，或者改成LinearLayout<br><strong>提前检测</strong>：通过“Design”预览，看能否正常显示出来，如果不能，详细分析其警告信息</p>
<h2 id="新建资源文件目录问题"><a href="#新建资源文件目录问题" class="headerlink" title="新建资源文件目录问题"></a>新建资源文件目录问题</h2><p>res目录下，新建layout目录文件，不能解析控件，在layout目录下，也不能新建目录，提示其只支持xml文件</p>
<h2 id="AndroidStudio2-3不能显示logcat的问题"><a href="#AndroidStudio2-3不能显示logcat的问题" class="headerlink" title="AndroidStudio2.3不能显示logcat的问题"></a>AndroidStudio2.3不能显示logcat的问题</h2><p>可以通过Restart logging来恢复，另外，充分利用选中进程、filter和日志级别来第一时间找出有用的日志信息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/wiseman.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;什么是智者？就是一个坑不跌两回呗&lt;/p&gt;
&lt;p&gt;The wiser man doesn’t fall into the same pit twice.&lt;/p&gt;
&lt;p&gt;基础不牢、地动山摇&lt;/p&gt;
&lt;p&gt; Without a solid foundation, the earth will shake.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Bugs" scheme="http://ipcreator.me/tags/Bugs/"/>
    
  </entry>
  
  <entry>
    <title>Glance of File Directory in Android</title>
    <link href="http://ipcreator.me/2017/03/08/Program/Android/glance-of-file-directory/"/>
    <id>http://ipcreator.me/2017/03/08/Program/Android/glance-of-file-directory/</id>
    <published>2017-03-08T14:59:06.000Z</published>
    <updated>2017-03-30T03:23:00.028Z</updated>
    
    <content type="html"><![CDATA[<p>Android 开发中基本都要使用到文件的保存和读取操作，我们一般遇见的文件读写问题有几个：文件保存在哪？以及如何使用相关函数，目录权限的问题？以及删除应用之后目录是否会随之删除的问题？接下来就来解析一下这几个相关目录的操作函数。</p>
<a id="more"></a>
<h1 id="android-最全缓存目录获取方式和函数解析-1"><a href="#android-最全缓存目录获取方式和函数解析-1" class="headerlink" title="[android 最全缓存目录获取方式和函数解析][1]"></a>[android 最全缓存目录获取方式和函数解析]<sup>[1]</sup></h1><p>我们这里假设应用的名字叫做 com.android.framework：</p>
<h2 id="data-data-package-name-目录"><a href="#data-data-package-name-目录" class="headerlink" title="/data/data/package_name/ 目录"></a>/data/data/package_name/ 目录</h2><p>　　对应的目录名字为 /data/data/com.android.framework/。</p>
<p>　　该目录是只对应用可见的，而且如果手机没有 root，用普通权限的 adb 也看不了这个目录，该目录用来存储和应用周期相关的文件，会随着应用的卸载一起删除，相关的子目录如下所示：</p>
<p>/data/data/com.android.framework/shared_prefs/<br>用来存储 SharedPreference，对应函数为：<strong>getSharedPreferences(String fileName, int mode)</strong>；</p>
<p>/data/data/com.android.framework/databases/<br>用来存储数据库 DB，相关函数还有 <strong>getDatabasePath()</strong>；</p>
<p>/data/data/com.android.framework/app_webview 和 /data/data/com.android.framework/xxxwebviewcachexxx<br>来存储应用内置 webview 所产生的 cache 和 cookies 等，该目录由于 android 版本不同名字和位置也可能不同；</p>
<p>/data/data/com.android.framework/lib<br>用来存储该应用的 .so 静态库文件；</p>
<p>/data/data/com.android.framework/cache<br>该目录可以使用函数 <strong>getCacheDir() </strong>获取；</p>
<p>/data/data/com.android.framework/files<br>该目录可以使用函数 <strong>getFilesDir()</strong> 获取，openFileInput() 和 openFileOutput() 函数也是在该目录下操作文件， fileList() 函数是用来列出该 files 目录下的所有文件，<strong>deleteFile(String name)</strong> 用来删除该 files 目录下的文件；</p>
<p>/data/data/com.android.framework/XXXX<br>这个目录下面当然也能够创建子集的目录，使用的方法就是 getDir(String name, int mode)，参数中的 name 就是需要在该目录下创建的子目录名字。<br>如果能够打开应用的该目录，一般会在该目录下看到很多子目录。</p>
<p>　　PS：还有一个特别奇怪的函数，无意中看见的 getCodeCacheDir() 函数，该函数的解释为 This location is optimal for storing compiled or optimized code generated by your application at runtime，该目录适合在运行时存放应用产生的编译或者优化的代码，但是我调用就报了 NoSuchMethodError，不知道为什么，知道的可以告诉我。</p>
<p>　　另外还有其他两个相关函数：<br><strong>getPackageCodePath() </strong>= /data/app/com.android.framework-1.apk；</p>
<p><strong>getPackageResourcePath()</strong> = /data/app/com.android.framework-1.apk。</p>
<p>　　注：以上函数没有明确指定的都是<strong>使用 Context 调用</strong>。</p>
<h2 id="SD-卡下的目录"><a href="#SD-卡下的目录" class="headerlink" title="SD 卡下的目录"></a>SD 卡下的目录</h2><p>SD 卡下的目录，顾名思义就是需要插入 SD 卡，当 SD 卡不可用时这两个目录都是无效的，SD 卡下面也分为应用的私有目录和共有目录，私有目录的生命周期也是和应用挂钩的，卸载之后就会被删除，共有目录不会随着应用的卸载而删除。</p>
<p>　　可以通过 Environment.getExternalStorageState() 函数来获取 SD 卡的挂载状态，当该函数返回 mounted 的时候，代表 SD 卡可用。</p>
<p>　　注意 SD 卡使用时需要注册相关权限：<uses-permission android:name="”android.permission.WRITE_EXTERNAL_STORAGE”/">。</uses-permission></p>
<h3 id="SD-卡私有目录"><a href="#SD-卡私有目录" class="headerlink" title="SD 卡私有目录"></a>SD 卡私有目录</h3><p>该目录下的文件卸载应用之后会自动删除。</p>
<p>/sdcard/Android/data/package_name/</p>
<p>　　对应为 /sdcard/Android/data/com.android.framework/。</p>
<p>Android/data/com.android.framework/files/<br>该目录可用 <strong>getExternalFilesDir(String type)</strong> 和  <strong>getExternalFilesDirs(String type)</strong> 获取，参数 type 为子目录名字，null 则为根目录，后者调用之后会自动生成该目录，并且后者返回的是一个数组，如果插入外置存储卡，外置存储卡目录也会一并返回，具体区别可以查看后面的源码和结果；</p>
<p>Android/data/com.android.framework/cache/</p>
<p>该目录可用 <strong>getExternalCacheDir()</strong> 和 <strong>getExternalCacheDirs()</strong> 获取，后者调用之后自动生成该目录，和上面一样，后者返回的是一个数组，如果插入外置存储卡，外置存储卡目录也会一并返回，具体区别可以查看后面的源码和结果。</p>
<p>/sdcard/Android/obb/package_name/<br>　　对应为 /sdcard/Android/obb/com.android.framework/。</p>
<p>　　需要注意的是，obb 目录也可能不存在，原文：Note if the application does not have any OBB files, this directory may not exist，一般游戏 APP 会将游戏相关的数据包放到这个目录下。</p>
<p>　　该目录的的相关函数简单只有两个：<strong>getObbDirs()</strong> 和 <strong>getObbDir()</strong>，前者调用之后会自动生成该目录，后者在插入外置存储卡之后会在前者的基础上另外返回外置存储卡的 obb 目录，具体的结果可以查看后面的源码和结果。</p>
<h3 id="SD-卡共有目录"><a href="#SD-卡共有目录" class="headerlink" title="SD 卡共有目录"></a>SD 卡共有目录</h3><p>该目录下的文件卸载应用之后还会留存，所以为了 SD 卡的整洁度，不要随便在 SD 卡的根目录下面创建文件，最好以应用名字创建一个目录，所有的需要卸载之后留存或者需要给其他应用共享的文件都放到该目录下，不要在根目录下创建文件，还有一个公司的多个应用最好共享一个目录，特别讨厌 360 ，恨不得把 360XXX 式的目录全部创建完才行，极其讨厌和反对。</p>
<p>/sdcard/(any_folder_name)</p>
<p>　　对应为 /sdcard/XXX。</p>
<p><strong>Environment.getExternalStorageState()</strong></p>
<p>这个函数用来获取 SD 卡的挂载状态，如果传入参数 path 则是获取该路径的的挂载状态，比如这个目录被用户的 PC 挂载，或者从设备中移除，或者其他问题发生，状态的返回是不一样的；</p>
<p><strong>Environment.getExternalStorageDirectory()</strong><br>该函数用来返回 SD 卡的根目录，即 /storage/emulated/0，注意不要在根目录下创建文件，强烈建立创建一个子目录去操作，要不然会污染 SD 卡的主目录，该目录所有应用都可操作，为共享目录；</p>
<p><strong>Environment.getDownloadCacheDirectory()</strong><br>该函数用来返回 SD 卡下面的下载缓存目录；</p>
<p><strong>Environment.getDataDirectory()</strong><br>该函数用来获取用户的数据目录；</p>
<p><strong>Environment.getExternalStoragePublicDirectory(String type)</strong><br>该函数用来根据类型返回相关目录，类型为 Environment 的一些变量，传入的类型参数不能是 null，返回的目录路径有可能不存在，所以必须在使用之前确认一下，没有就创建该目录；</p>
<p><strong>Environment.getRootDirectory()</strong><br>该函数用来返回根 System 目录，只挂载为只读;</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://blog.csdn.net/self_study/article/details/58587412" target="_blank" rel="external">android 最全缓存目录获取方式和函数解析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 开发中基本都要使用到文件的保存和读取操作，我们一般遇见的文件读写问题有几个：文件保存在哪？以及如何使用相关函数，目录权限的问题？以及删除应用之后目录是否会随之删除的问题？接下来就来解析一下这几个相关目录的操作函数。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="File Directory" scheme="http://ipcreator.me/tags/File-Directory/"/>
    
  </entry>
  
  <entry>
    <title>Java Snippets</title>
    <link href="http://ipcreator.me/2017/03/08/Program/Java/java-trouble-solver/"/>
    <id>http://ipcreator.me/2017/03/08/Program/Java/java-trouble-solver/</id>
    <published>2017-03-08T13:59:06.000Z</published>
    <updated>2017-03-27T05:56:39.072Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/JAVA.jpg" alt=""></p>
<p>咖啡需要慢慢品，Java也如此…</p>
 <a id="more"></a>
<h2 id="Java中字符串中子串的查找共有四种方法-indexof"><a href="#Java中字符串中子串的查找共有四种方法-indexof" class="headerlink" title="Java中字符串中子串的查找共有四种方法(indexof())"></a><a href="http://www.cnblogs.com/gzggyy/archive/2013/06/21/3148610.html" target="_blank" rel="external">Java中字符串中子串的查找共有四种方法(indexof())</a></h2><p> Java中字符串中子串的查找共有四种方法，如下：<br>1、int indexOf(String str) ：返回第一次出现的指定子字符串在此字符串中的索引。<br>2、int indexOf(String str, int startIndex)：从指定的索引处开始，返回第一次出现的指定子字符串在此字符串中的索引。<br>3、int lastIndexOf(String str) ：返回在此字符串中最右边出现的指定子字符串的索引。<br>4、int lastIndexOf(String str, int startIndex) ：从指定的索引处开始向后搜索，返回在此字符串中最后一次出现的指定子字符串的索引。</p>
<p>indexof()用法说明<br>indexof()</p>
<p>返回 String 对象内第一次出现子字符串的字符位置。</p>
<p>string.indexOf(subString[, startIndex])</p>
<p>参数<br>string</p>
<p>必选项。String 对象或文字。</p>
<p>subString 必选项。</p>
<p>要在 String 对象中查找的子字符串。</p>
<p>starIndex 可选项。</p>
<p>该整数值指出在 String 对象内开始查找的索引。如果省略，则从字符串的开始处查找。</p>
<p>说明<br>indexOf 方法返回一个整数值，指出 String 对象内子字符串的开始位置。如果没有找到子字符串，则返回-1。</p>
<p>如果 startindex 是负数，则 startindex 被当作零。如果它比最大的字符位置索引还大，则它被当作最大的可能索引。</p>
<p>从左向右执行查找。否则，该方法与 lastIndexOf 相同。</p>
<p>示例<br>下面的示例说明了 indexOf 方法的用法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function IndexDemo(str2)&#123;</div><div class="line">var str1 = &quot;BABEBIBOBUBABEBIBOBU&quot;</div><div class="line">var s = str1.indexOf(str2);</div><div class="line">return(s);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class FirstDemo &#123;</div><div class="line"></div><div class="line">  /**</div><div class="line">    *API中String的常用方法</div><div class="line">    */</div><div class="line">  // 查找指定字符串是否存在</div><div class="line">  public static void main(String[] args) &#123;</div><div class="line">    String str1 = &quot;abcdefghijklmnabc&quot;;</div><div class="line">    // 从头开始查找是否存在指定的字符</div><div class="line">    System.out.println(str1.indexOf(&quot;c&quot;));</div><div class="line">    // 从第四个字符位置开始往后继续查找</div><div class="line">    System.out.println(str1.indexOf(&quot;c&quot;, 3));</div><div class="line">    //若指定字符串中没有该字符则系统返回-1</div><div class="line">    System.out.println(str1.indexOf(&quot;x&quot;));</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="Java字符串验证"><a href="#Java字符串验证" class="headerlink" title="Java字符串验证"></a>Java字符串验证</h2><p><a href="http://www.cnblogs.com/lbangel/p/3247440.html" target="_blank" rel="external">java常见验证邮箱、电话号码、日期等格式</a></p>
<h2 id="Java字符串操作"><a href="#Java字符串操作" class="headerlink" title="Java字符串操作"></a>Java字符串操作</h2><p><a href="http://www.cnblogs.com/freeabyss/archive/2013/05/15/3187057.html" target="_blank" rel="external">Java 字符串常用操作（String类）</a><br><a href="http://decentway.iteye.com/blog/1336904" target="_blank" rel="external">java字符串处理（分割截取替换等）</a><br><a href="http://mxdxm.iteye.com/blog/1071208" target="_blank" rel="external">java中去掉字符串中间的空格</a></p>
<h2 id="去空格"><a href="#去空格" class="headerlink" title="去空格"></a>去空格</h2><p> 比如 时间字符串，去掉‘-’，‘：’，与空格<br>  String x = “2008-09-08 11:12:23”;<br>  x=x.replace(‘-‘, ‘ ‘).replace(‘:’, ‘ ‘).replaceAll(“ “,””);</p>
<h2 id="用正则表达式"><a href="#用正则表达式" class="headerlink" title="用正则表达式"></a>用正则表达式</h2><p><a href="http://decentway.iteye.com/blog/1336904" target="_blank" rel="external">java字符串处理（分割截取替换等）</a><br><a href="http://www.cnblogs.com/freeabyss/archive/2013/05/15/3187057.html" target="_blank" rel="external">Java 字符串常用操作（String类）</a></p>
<p>输出：20080908111223</p>
<h2 id="Java核心技术点之注解"><a href="#Java核心技术点之注解" class="headerlink" title="Java核心技术点之注解"></a><a href="http://www.importnew.com/23816.html" target="_blank" rel="external">Java核心技术点之注解</a></h2><p> 关于注解有点我们需要明确的是，作为描述代码本身的一种元数据，注解是一种”被动“的信息。也就是说，必须由编译器或虚拟机来“主动”解析它，它才能发挥自己的作用。</p>
<p> 注解是描述Java代码的代码，它能够被编译器解析，注解处理工具在运行时也能够解析注解。我们在Java源文件中使用注释，是为了以后我们或他人再来读这段代码时，能够更好地理解它。Javadoc工具可以解析我们在源代码中为类、方法、变量等添加的描述信息，并根据这些描述信息自动生成一个HTML文档，这些自动生成的文档即可作为API帮助文档。只要我们为类、方法等添加的描述信息符合Javadoc要求的语法，我们就能够使用Javadoc工具根据我们的描述信息自动生成一个帮助文档。而注解比java注释和Javadoc要强大得多，它们三者之间的重大的区别在于，Java注释和Javadoc描述所发挥的作用仅仅到编译时就止步了，而注解直到运行时都能够发挥作用。</p>
<p>我们知道，使用“transient”关键字可以告诉编译器这个域不可序列化。相比于用”transient“这样的关键字修饰一个属性，注解为我们提供了为类/方法/属性/变量添加描述信息的更通用的方式，而这些描述信息对于开发者、自动化工具、Java编译器和Java运行时来说都是有意义的，也就是说他们都能“读懂”注解信息。”transient“关键字是一个修饰符，而注解也是一种修饰符。除了传递信息，我们也可以使用注解生成代码。我们可以使用注解，然后让注解解析工具来解析它们，以此来生成一些”模板化“的代码。比如Hibernate、Spring、Axis这些框架大量使用了注解，来避免一些重复的工作。</p>
<h2 id="Digester解析xml文件"><a href="#Digester解析xml文件" class="headerlink" title="Digester解析xml文件"></a><a href="http://blog.csdn.net/caihaijiang/article/details/5944955" target="_blank" rel="external">Digester解析xml文件</a></h2><p><a href="https://www.ibm.com/developerworks/cn/xml/dm-1208gub/#ibm-pcon" target="_blank" rel="external">Java 处理 XML 的三种主流技术及介绍</a></p>
<p>DOM 易于上手，程序易于理解，但缺点在于占用内存大，不适合于解析较大的 XML 文件； SAX 基于事件模型占用系统资源少，能够胜任较大的 XML 文件解析，但解析过程较为繁琐查找元素不方便； Digester/JAXB 基于上述两种技术衍生而来。</p>
<p>Digester 就是一种用来把一个 XML 转化为一个与该 XML 结构类似的 JavaBean。你可以把 XML 根元素想象成一个 JavaBean， 该根元素的 attribute 就是这个 JavaBean 的各种 Field，当该根元素有其他子 tag 时，又要把这个子 tag 想象成一个个新的 XML，将其视为一个新的 JavaBean， 并作为一个 Field 加入到父 Bean 当中，然后以此类推，通过循环的方式将整个 XML 进行解析。</p>
<h2 id="Java中static作用及用法详解"><a href="#Java中static作用及用法详解" class="headerlink" title="Java中static作用及用法详解"></a><a href="http://blog.csdn.net/fengyuzhengfan/article/details/38082999" target="_blank" rel="external">Java中static作用及用法详解</a></h2><h2 id="static表示不要实例化就可以使用"><a href="#static表示不要实例化就可以使用" class="headerlink" title="static表示不要实例化就可以使用"></a>static表示不要实例化就可以使用</h2><p> static是静态修饰符，静态就是指在编译后所分配的内存会一直存在，直到程序退出内存才会释放这个空间，也就是只要程序在运行，那么这块内存就会一直存在。这样做有什么意义呢？在Java程序里面，所有的东西都是对象，而对象的抽象就是类，对于一个类而言，如果要使用他的成员，那么普通情况下必须先实例化对象后，通过对象的引用才能够访问这些成员，但是用static修饰的成员可以通过类名加“.”进行直接访问。static对象可以在它的任何对象创建之前访问，无需引用任何对象。</p>
<p>用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象市，不生成static变量的副本，而是类的所有实例共享同一个static变量。</p>
<p>用static修饰的代码块表示静态代码块，当Java虚拟机（JVM）加载类时，就会执行该代码块</p>
<p>static代码块也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。</p>
<h2 id="static和final一块用表示什么"><a href="#static和final一块用表示什么" class="headerlink" title="static和final一块用表示什么"></a>static和final一块用表示什么</h2><p>static final用来修饰成员变量和成员方法，可简单理解为“<strong>全局常量</strong>”！<br>       对于变量，表示一旦给值就不可修改，并且通过类名可以访问。<br> 对于方法，表示不可覆盖，并且可以通过类名直接访问。      </p>
<p>特别要注意一个问题：<br>对于被static和final修饰过的实例常量，实例本身不能再改变了，但对于一些容器类型（比如，ArrayList、HashMap）的实例变量，不可以改变容器变量本身，但可以修改容器中存放的对象，这一点在编程中用到很多。</p>
<p>静态代码块和静态方法的区别是：<br>• 静态代码块是自动执行的;<br>• 静态方法是被调用的时候才执行的.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果一个成员被声明为static，它就能够在它的类的任何对象创建之前被访问，而不必引用任何对象。你可以将方法和变量都声明为static。static 成员的最常见的例子是main( ) 。因为在程序开始执行时必须调用main() ，所以它被声明为static。<br>声明为static的变量实质上就是全局变量。当声明一个对象时，并不产生static变量的拷贝，而是该类所有的实例变量共用同一个static变量。声明为static的方法有以下几条限制：<br>• 它们仅能调用其他的static方法。<br>• 它们只能访问static数据。<br>• 它们不能以任何方式引用this或super（关键字super 与继承有关，在下一章中描述）。<br>如果你需要通过计算来初始化你的static变量，你可以声明一个static块，Static 块仅在该类被加载时执行一次。</p>
<h2 id="深入理解Java中的final关键字"><a href="#深入理解Java中的final关键字" class="headerlink" title="深入理解Java中的final关键字"></a><a href="http://www.importnew.com/7553.html" target="_blank" rel="external">深入理解Java中的final关键字</a></h2><h3 id="final关键字的含义"><a href="#final关键字的含义" class="headerlink" title="final关键字的含义?"></a>final关键字的含义?</h3><p>final在Java中是一个保留的关键字，可以声明成员变量、方法、类以及本地变量。一旦你将引用声明作final，你将不能改变这个引用了，编译器会检查代码，如果你试图将变量再次初始化的话，编译器会报编译错误。</p>
<h3 id="什么是final变量？"><a href="#什么是final变量？" class="headerlink" title="什么是final变量？"></a>什么是final变量？</h3><p>凡是对成员变量或者本地变量(在方法中的或者代码块中的变量称为本地变量)声明为final的都叫作final变量。final变量经常和static关键字一起使用，作为常量。下面是final变量的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public static final String LOAN = &quot;loan&quot;;</div><div class="line">LOAN = new String(&quot;loan&quot;) //invalid compilation error</div></pre></td></tr></table></figure></p>
<p>final变量是只读的。</p>
<h3 id="什么是final方法"><a href="#什么是final方法" class="headerlink" title="什么是final方法?"></a>什么是final方法?</h3><p>final也可以声明方法。方法前面加上final关键字，代表这个方法不可以被子类的方法重写。如果你认为一个方法的功能已经足够完整了，子类中不需要改变的话，你可以声明此方法为final。final方法比非final方法要快，因为在编译的时候已经静态绑定了，不需要在运行时再动态绑定。下面是final方法的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class PersonalLoan&#123;</div><div class="line">    public final String getName()&#123;</div><div class="line">        return &quot;personal loan&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class CheapPersonalLoan extends PersonalLoan&#123;</div><div class="line">    @Override</div><div class="line">    public final String getName()&#123;</div><div class="line">        return &quot;cheap personal loan&quot;; //compilation error: overridden method is final</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="什么是final类？"><a href="#什么是final类？" class="headerlink" title="什么是final类？"></a>什么是final类？</h3><p>使用final来修饰的类叫作final类。final类通常功能是完整的，它们不能被继承。Java中有许多类是final的，譬如String, Interger以及其他包装类。下面是final类的实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    final class PersonalLoan&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class CheapPersonalLoan extends PersonalLoan&#123;  //compilation error: cannot inherit from final class</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="final关键字的好处"><a href="#final关键字的好处" class="headerlink" title="final关键字的好处"></a>final关键字的好处</h3><p>下面总结了一些使用final关键字的好处</p>
<ol>
<li>final关键字提高了性能。JVM和Java应用都会缓存final变量。</li>
<li>final变量可以安全的在多线程环境下进行共享，而不需要额外的同步开销。</li>
<li>使用final关键字，JVM会对方法、变量及类进行优化。</li>
</ol>
<h3 id="不可变类"><a href="#不可变类" class="headerlink" title="不可变类"></a>不可变类</h3><p>创建不可变类要使用final关键字。不可变类是指它的对象一旦被创建了就不能被更改了。String是不可变类的代表。不可变类有很多好处，譬如它们的对象是只读的，可以在多线程环境下安全的共享，不用额外的同步开销等等。</p>
<p>相关阅读：<a href="http://www.importnew.com/7440.html" target="_blank" rel="external">为什么String是不可变的</a>以及<a href="http://www.importnew.com/7535.html" target="_blank" rel="external">如何写一个不可变类</a>。</p>
<h3 id="关于final的重要知识点"><a href="#关于final的重要知识点" class="headerlink" title="关于final的重要知识点"></a>关于final的重要知识点</h3><ul>
<li>final关键字可以用于成员变量、本地变量、方法以及类。</li>
<li>final成员变量必须在声明的时候初始化或者在构造器中初始化，否则就会报编译错误。</li>
<li>你不能够对final变量再次赋值。</li>
<li>本地变量必须在声明时赋值。</li>
<li>在匿名类中所有变量都必须是final变量。</li>
<li>final方法不能被重写。</li>
<li>final类不能被继承。</li>
<li>final关键字不同于finally关键字，后者用于异常处理。</li>
<li>final关键字容易与finalize()方法搞混，后者是在Object类中定义的方法，是在垃圾回收之前被JVM调用的方法。</li>
<li>接口中声明的所有变量本身是final的。</li>
<li>final和abstract这两个关键字是反相关的，final类就不可能是abstract的。</li>
<li>final方法在编译阶段绑定，称为静态绑定(static binding)。</li>
<li>没有在声明时初始化final变量的称为空白final变量(blank final variable)，它们必须在构造器中初始化，或者调用this()初始化。不这么做的话，编译器会报错“final变量(变量名)需要进行初始化”。</li>
<li>将类、方法、变量声明为final能够提高性能，这样JVM就有机会进行估计，然后优化。</li>
<li><p>按照Java代码惯例，final变量就是常量，而且通常常量名要大写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private final int COUNT = 10;</div></pre></td></tr></table></figure>
</li>
<li><p>对于集合对象声明为final指的是引用不能被更改，但是你可以向其中增加，删除或者改变内容。譬如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private final List Loans = new ArrayList();</div><div class="line">list.add(“home loan”);  //valid</div><div class="line">list.add(&quot;personal loan&quot;); //valid</div><div class="line">loans = new Vector();  //not valid</div></pre></td></tr></table></figure>
</li>
</ul>
<p>我们已经知道final变量、final方法以及final类是什么了。必要的时候使用final，能写出更快、更好的代码的。</p>
<h2 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h2><p><a href="http://www.cnblogs.com/chenssy/p/3390871.html" target="_blank" rel="external">java提高篇(十)—–详解匿名内部类</a></p>
<p>匿名类是不能有名字的类，它们不能被引用，只能在创建时用New语句来声明它们。匿名类的声明是在编译时进行的，实例化在运行时进行，这意味着for循环中的一个new语句会创建相同匿名类的几个实例，而不是创建几个不同匿名类的一个实例。<br>匿名类的目的是在某个地方需要特殊的实现，因此在该处编写其实现，并获取它的实例，调用它的方法。不要在匿名内部类编写其他的方法，是不可见的。<br>形式为：new &lt;类或接口&gt; &lt;类的主体&gt;</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>在使用匿名内部类的过程中，我们需要注意如下几点：</p>
<p>1、使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。<br>2、匿名内部类中是不能定义构造函数的。<br>3、匿名内部类中不能存在任何的静态成员变量和静态方法。<br>4、匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。<br>5、匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。</p>
<h3 id="使用的形参为何要为final"><a href="#使用的形参为何要为final" class="headerlink" title="使用的形参为何要为final"></a>使用的形参为何要为final</h3><p>我们给匿名内部类传递参数的时候，若该形参在内部类中需要被使用，那么该形参必须要为final。也就是说：当所在的方法的形参需要被内部类里面使用时，该形参必须为final。</p>
<p>为什么必须要为final呢？</p>
<p>首先我们知道在内部类编译成功后，它会产生一个class文件，该class文件与外部类并不是同一class文件，仅仅只保留对外部类的引用。当外部类传入的参数需要被内部类调用时，从java程序的角度来看是直接被调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class OuterClass &#123;</div><div class="line">    public void display(final String name,String age)&#123;</div><div class="line">        class InnerClass&#123;</div><div class="line">            void display()&#123;</div><div class="line">                System.out.println(name);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面代码中看好像name参数应该是被内部类直接调用？其实不然，在java编译之后实际的操作如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class OuterClass$InnerClass &#123;</div><div class="line">    public InnerClass(String name,String age)&#123;</div><div class="line">        this.InnerClass$name = name;</div><div class="line">        this.InnerClass$age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public void display()&#123;</div><div class="line">        System.out.println(this.InnerClass$name + &quot;----&quot; + this.InnerClass$age );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以从上面代码来看，内部类并不是直接调用方法传递的参数，而是利用自身的构造器对传入的参数进行备份，自己内部方法调用的实际上时自己的属性而不是外部方法传递进来的参数。</p>
<p>直到这里还没有解释为什么是final？在内部类中的属性和外部方法的参数两者从外表上看是同一个东西，但实际上却不是，所以他们两者是可以任意变化的，也就是说在内部类中我对属性的改变并不会影响到外部的形参，而然这从程序员的角度来看这是不可行的，毕竟站在程序的角度来看这两个根本就是同一个，如果内部类该变了，而外部方法的形参却没有改变这是难以理解和不可接受的，所以为了保持参数的一致性，就规定使用final来避免形参的不改变。</p>
<p><strong>简单理解就是，拷贝引用，为了避免引用值发生改变，例如被外部类的方法修改等，而导致内部类得到的值不一致，于是用final来让该引用不可改变。</strong></p>
<p>故如果定义了一个匿名内部类，并且希望它使用一个其外部定义的参数，那么编译器会要求该参数引用是final的。</p>
<h3 id="匿名内部类初始化"><a href="#匿名内部类初始化" class="headerlink" title="匿名内部类初始化"></a>匿名内部类初始化</h3><p>我们一般都是利用构造器来完成某个实例的初始化工作的，但是匿名内部类是没有构造器的！那怎么来初始化匿名内部类呢？使用构造代码块！利用构造代码块能够达到为匿名内部类创建一个构造器的效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class OutClass &#123;</div><div class="line">    public InnerClass getInnerClass(final int age,final String name)&#123;</div><div class="line">        return new InnerClass() &#123;</div><div class="line">            int age_ ;</div><div class="line">            String name_;</div><div class="line">            //构造代码块完成初始化工作</div><div class="line">            &#123;</div><div class="line">                if(0 &lt; age &amp;&amp; age &lt; 200)&#123;</div><div class="line">                    age_ = age;</div><div class="line">                    name_ = name;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            public String getName() &#123;</div><div class="line">                return name_;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            public int getAge() &#123;</div><div class="line">                return age_;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        OutClass out = new OutClass();</div><div class="line"></div><div class="line">        InnerClass inner_1 = out.getInnerClass(201, &quot;chenssy&quot;);</div><div class="line">        System.out.println(inner_1.getName());</div><div class="line"></div><div class="line">        InnerClass inner_2 = out.getInnerClass(23, &quot;chenssy&quot;);</div><div class="line">        System.out.println(inner_2.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Java中匿名类的两种实现方式"><a href="#Java中匿名类的两种实现方式" class="headerlink" title="Java中匿名类的两种实现方式"></a><a href="http://blog.csdn.net/cntanghai/article/details/6094481" target="_blank" rel="external">Java中匿名类的两种实现方式</a></h2><p>使用匿名内部类课使代码更加简洁、紧凑，模块化程度更高。内部类能够访问外部内的一切成员变量和方法，包括私有的，而实现接口或继承类做不到。然而这个不是我说的重点，我说的很简单，就是匿名内部类的两种实现方式：第一种，继承一个类，重写其方法；第二种，实现一个接口（可以是多个），实现其方法。下面通过代码来说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class TestAnonymousInterClass&#123;     </div><div class="line">    public static void main(String args[])&#123;     </div><div class="line">        TestAnonymousInterClass test=new TestAnonymousInterClass();     </div><div class="line">        test.show();     </div><div class="line">    &#125;     </div><div class="line">    //在这个方法中构造了一个匿名内部类     </div><div class="line">    private void show()&#123;     </div><div class="line">        Out anonyInter=new Out()&#123;// 获取匿名内部类实例     </div><div class="line"></div><div class="line">            void show()&#123;//重写父类的方法     </div><div class="line">                System.out.println(&quot;this is Anonymous InterClass showing.&quot;);     </div><div class="line">            &#125;     </div><div class="line">        &#125;;     </div><div class="line">        anonyInter.show();// 调用其方法     </div><div class="line">    &#125;     </div><div class="line">&#125;      </div><div class="line"></div><div class="line">// 这是一个已经存在的类，匿名内部类通过重写其方法，将会获得另外的实现     </div><div class="line">class Out&#123;     </div><div class="line">    void show()&#123;     </div><div class="line">        System.out.println(&quot;this is Out showing.&quot;);     </div><div class="line">    &#125;     </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>程序运行的输出结果为：</p>
<p>this is Anonymous InterClass showing.</p>
<p> 所以在这里看出，匿名内部类有了自己的实现。其实很简单，使用匿名内部类是因为我这地方需要有点什么特殊的实现，所以我就在这地方把具体实现也给了出来了。然后我就在这地方获取它的实例，调用它的方法。<br>   接口的方式，只要把父类换成接口就行了，没必要给出代码了。</p>
<p> 使用匿名内部类时我们不要忘了我们的目的，我们只是在这地方想对某个类有特殊的实现。而不要想得太多，在匿名内部编写其它的方法。在匿名内部类中编写的自己的方法是不可见的。此种做法是毫无意义的，当然一般也不会这么做。在这里只是告诉初学者对于匿名内部类不要想的太多，而要这么想：匿名内部类就是重写父类或接口的方法。</p>
<p> 匿名内部类是没有名字的，所以我们没办法获得其类型，而只能把它当作超类或接口类型来使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/JAVA.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;咖啡需要慢慢品，Java也如此…&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="Java Snippet" scheme="http://ipcreator.me/tags/Java-Snippet/"/>
    
  </entry>
  
  <entry>
    <title>Top Commands of Linux</title>
    <link href="http://ipcreator.me/2017/03/05/Program/Android/linux-tips/"/>
    <id>http://ipcreator.me/2017/03/05/Program/Android/linux-tips/</id>
    <published>2017-03-05T08:42:06.000Z</published>
    <updated>2017-03-27T10:04:47.020Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://rumorscity.com/wp-content/uploads/2014/08/10-Linux-Unix-Command-Cheat-Sheet.jpg" alt=""></p>
<p>mkdir、rmdir、cd、ls、cat、less、cp、mv、rm 、chmod</p>
<p>cd ..  返回上级目录（若当前目录为“/“，则执行完后还在“/“；”..”为上级目录的意思）；<br>cd ../..  返回上两级目录；</p>
<a id="more"></a>
<p>更多参考：<a href="https://rumorscity.com/2014/08/16/6-best-linuxunix-command-cheat-sheet/" target="_blank" rel="external">6 Best Linux/Unix Command Cheat Sheet</a></p>
<p><img src="https://rumorscity.com/wp-content/uploads/2014/08/10-Linux-Unix-Command-Cheat-Sheet-011-720x1018.jpg" alt=""></p>
<p>No 命令 功 能 实 例</p>
<p>1 mkdir 创建目录 mkdir do<br>mkdir do/align<br>mkdir –p blast/hba/209</p>
<p>2 rmdir 删除目录 rmdir tmp</p>
<p>3 cd 改变目录 Cd<br>cd do<br>cd ..<br>cd ../do/tree/7hba</p>
<p>4 ls 显示文件信息 ls<br>ls -l<br>ls <em>.fasta<br>ls /tmp/seq</em><br>ls –lR</p>
<p>5 cat 编辑文件 cat seq1<br>cat &gt; seq1<br>cat &gt;&gt; seq1</p>
<p>6 less 显示文件内容 more myseq</p>
<p>7 cp 复制文件 cp seq1 seq2<br>cp ../seq/hba_human.sw .<br>cp /tmp/seq1 .<br>cp *.fasta ../keep/</p>
<p>8 mv 更改文件名 mv seq1 seq2</p>
<p>9 rm 删除文件 rm seq2<br>rm <em>.txt<br>rm tmp/seq.</em><br>rm –rf tmp</p>
<p>10 chmod 改变权限 chmod –w seq1.fasta<br>chmod +w <em>.needle<br>chmod 755 </em></p>
<h2 id="命令-1：mkdir"><a href="#命令-1：mkdir" class="headerlink" title="命令 1：mkdir"></a>命令 1：mkdir</h2><p>用途：创建目录<br>实例 1：mkdir do<br>含义：在当前目录下创建名为 do 的子目录<br>实例 2：mkdir do/align<br>含义：在子目录 do 下创建名为 align 的子目录（子目录 do 已经存在）<br>实例 3：mkdir –p hba/tree<br>含义：在当前目录下创建名为 hba 的子目录，并在子目录 hba 下创建名为 tree 的子目录</p>
<h2 id="命令-2：rmdir"><a href="#命令-2：rmdir" class="headerlink" title="命令 2：rmdir"></a>命令 2：rmdir</h2><p>用途：删除目录<br>实例 1：rmdir tmp<br>含义：删除当前目录下名为 tmp 的子目录，该子目录中没有文件和子目录<br>命令 3：cd<br>用途：改变目录<br>实例 1：cd<br>含义：回到用户主目录，即登录时进入的目录<br>实例 2：cd do<br>含义：进入子目录 do</p>
<h2 id="实例-3：cd"><a href="#实例-3：cd" class="headerlink" title="实例 3：cd .."></a>实例 3：cd ..</h2><p>含义：回到上级目录<br>实例 4：cd hba/tree<br>含义：直接进入子目录 hba 下的 tree 子目录<br>实例 5：cd ../do/align<br>含义：进入上级目录 do 下的 align 子目录</p>
<h2 id="命令-4：ls"><a href="#命令-4：ls" class="headerlink" title="命令 4：ls"></a>命令 4：ls</h2><p>用途：显示文件或目录<br>实例 1：ls<br>含义：显示当前目录下子目录和文件名<br>实例 2：ls -l<br>含义：显示当前目录下子目录和文件名详细信息，包括属性、权限、大小和创建日期等<br>实例 3：ls <em>.fasta<br>含义：显示当前目录下所有以.fasta 结尾的文件<br>实例 4：ls hba/hba_</em><br>含义：显示子目录 hba 下所有以 hba_起始的文件<br>实例 5：ls /tmp<br>含义：显示/tmp 目录所有子目录和文件<br>实例 6：ls –lR<br>含义：逐级显示当前目录及子目录下所有子目录和文件</p>
<h2 id="命令-5：cat"><a href="#命令-5：cat" class="headerlink" title="命令 5：cat"></a>命令 5：cat</h2><p>用途：显示或编辑文本文件<br>实例 1：cat &gt; cat1<br>含义：往 cat1 中逐行输入文本，用 Ctrl-D 结束输入<br>实例 2：cat &gt;&gt; cat1<br>含义：往 cat1 中逐行追加文本，用 Ctrl-D 结束输入<br>实例 3：cat cat1<br>含义：显示文本文件 cat1 中的内容</p>
<h2 id="命令-6：less"><a href="#命令-6：less" class="headerlink" title="命令 6：less"></a>命令 6：less</h2><p>用途：显示文件内容<br>实例 1：less 209hba.list<br>含义：逐屏显示文件 209hba.list 内容，回车进一行，空格进一页，q 终止显示</p>
<h2 id="命令-7：cp"><a href="#命令-7：cp" class="headerlink" title="命令 7：cp"></a>命令 7：cp</h2><p>用途：复制文件<br>实例 1：cp seq1 seq2<br>含义：将文件 seq1 复制到文件 seq2 中，保留 seq1<br>实例 2：cp *.fasta ../keep/<br>含义：将所有文件名以.fasta 结尾的文件复制到上级目录的 keep 子目录中<br>实例 3：cp ../seq/hba_human.sw .<br>含义：将上级目录的 seq 子目录中名为 hba_human.sw 的文件复制到当前目录中<br>实例 4：cp /tmp/tf/zmtf-pep.fasta blast/<br>含义：将/tmp 目录中 tf 子目录中名为 zmtf-pep.fasta 的文件复制到当前目录中名为blast 的子目录中</p>
<h2 id="命令-8：mv"><a href="#命令-8：mv" class="headerlink" title="命令 8：mv"></a>命令 8：mv</h2><p>用途：更改文件名<br>实例 1：mv seq1 seq2<br>含义：将文件 seq1 改名为 seq2，不保留 seq1<br>实例 2：mv hba_human.fasta pku08s1/hba<br>含义：将当前目录下文件 hba_human.fasta 移到子目录 pku08s1 下的子目录hba 中</p>
<h2 id="命令-9：rm"><a href="#命令-9：rm" class="headerlink" title="命令 9：rm"></a>命令 9：rm</h2><p>用途：删除文件或目录<br>实例 1：rm seq2<br>含义：删除文件 seq2<br>实例 2：rm <em>.txt<br>含义：删除所有以.txt 结尾的文件<br>实例 3：rm –r temp/</em><br>含义：删除子目录 temp 下所有子目录和文件，保留该目录<br>实例 4：rm –r temp<br>含义：删除子目录 temp 和该目录下所有子目录和文件</p>
<h2 id="命令-10：chmod"><a href="#命令-10：chmod" class="headerlink" title="命令 10：chmod"></a>命令 10：chmod</h2><p>用途：改变文件或目录权限<br>实例 1：chmod –w ppf1.fas<br>含义：取消所有用户对 ppf1.fas 的写权限<br>实例 2：chmod +w seq1<br>含义：将当前目录下 seq1 设置为本用户可写，其他用户权限不变<br>实例 3：chmod -w keep/<br>含义：取消子目录 keep 写权限，不能在该目录下创建和删除文件或子目录<br>实例 4：chmod 755 bin/*<br>含义：将子目录 bin 下所有文件设置为本用户可读可写可执行，其它用户可读可执行</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://rumorscity.com/wp-content/uploads/2014/08/10-Linux-Unix-Command-Cheat-Sheet.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;mkdir、rmdir、cd、ls、cat、less、cp、mv、rm 、chmod&lt;/p&gt;
&lt;p&gt;cd ..  返回上级目录（若当前目录为“/“，则执行完后还在“/“；”..”为上级目录的意思）；&lt;br&gt;cd ../..  返回上两级目录；&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Linux" scheme="http://ipcreator.me/tags/Linux/"/>
    
      <category term="Command" scheme="http://ipcreator.me/tags/Command/"/>
    
  </entry>
  
  <entry>
    <title>Android Debug Bridge Tips</title>
    <link href="http://ipcreator.me/2017/03/05/Program/Android/adb-tips/"/>
    <id>http://ipcreator.me/2017/03/05/Program/Android/adb-tips/</id>
    <published>2017-03-05T07:25:06.000Z</published>
    <updated>2017-03-27T10:04:47.040Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/ipcreator/awesome-adb/raw/master/assets/title.png" alt=""></p>
<p>图形化界面太低效，还存在DDMS连接不稳定的隐患，尽量通过命令行方式高效解决</p>
<a id="more"></a>
<p>原文详细请参考：<a href="https://github.com/ipcreator/awesome-adb" target="_blank" rel="external">ADB Usage Complete</a></p>
<h2 id="常用命令的简单描述"><a href="#常用命令的简单描述" class="headerlink" title="常用命令的简单描述"></a>常用命令的简单描述</h2><p>cat    显示文件内容<br>cd    切换目录<br>chmod    改变文件的存取模式/访问权限<br>df    查看磁盘空间使用情况<br>grep    过滤输出<br>kill    杀死指定 PID 的进程<br>ls    列举目录内容<br>mount    挂载目录的查看和管理<br>mv    移动或重命名文件<br>ps    查看正在运行的进程<br>rm    删除文件<br>top    查看进程的资源占用情况</p>
<h2 id="USB-连接"><a href="#USB-连接" class="headerlink" title="USB 连接"></a>USB 连接</h2><p>通过 USB 连接来正常使用 adb 需要保证几点：</p>
<p>硬件状态正常。</p>
<p>包括 Android 设备处于正常开机状态，USB 连接线和各种接口完好。</p>
<p>Android 设备的开发者选项和 USB 调试模式已开启。</p>
<p>可以到「设置」-「开发者选项」-「Android 调试」查看。</p>
<p>如果在设置里找不到开发者选项，那需要通过一个彩蛋来让它显示出来：在「设置」-「关于手机」连续点击「版本号」7 次。</p>
<p>设备驱动状态正常。</p>
<p>这一点貌似在 Linux 和 Mac OS X 下不用操心，在 Windows 下有可能遇到需要安装驱动的情况，确认这一点可以右键「计算机」-「属性」，到「设备管理器」里查看相关设备上是否有黄色感叹号或问号，如果没有就说明驱动状态已经好了。否则可以下载一个手机助手类程序来安装驱动先。</p>
<p>通过 USB 线连接好电脑和设备后确认状态。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb devices</div></pre></td></tr></table></figure></p>
<p>如果能看到</p>
<p>xxxxxx device<br>说明连接成功。</p>
<h2 id="以-root-权限运行-adbd"><a href="#以-root-权限运行-adbd" class="headerlink" title="以 root 权限运行 adbd"></a>以 root 权限运行 adbd</h2><p>adb 的运行原理是 PC 端的 adb server 与手机端的守护进程 adbd 建立连接，然后 PC 端的 adb client 通过 adb server 转发命令，adbd 接收命令后解析运行。</p>
<p>所以如果 adbd 以普通权限执行，有些需要 root 权限才能执行的命令无法直接用 adb xxx 执行。这时可以 adb shell 然后 su 后执行命令，也可以让 adbd 以 root 权限执行，这个就能随意执行高权限命令了。</p>
<p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb root</div></pre></td></tr></table></figure></p>
<p>现在再运行 adb shell，看看命令行提示符是不是变成 # 了？</p>
<p>有些手机 root 后也无法通过 adb root 命令让 adbd 以 root 权限执行，比如三星的部分机型，会提示 adbd cannot run as root in production builds，此时可以先安装 adbd Insecure，然后 adb root 试试。</p>
<p>相应地，如果要恢复 adbd 为非 root 权限的话，可以使用 adb unroot 命令。</p>
<h2 id="安装-APK"><a href="#安装-APK" class="headerlink" title="安装 APK"></a>安装 APK</h2><p>命令格式：</p>
<p>adb install [-lrtsdg] <path_to_apk><br>参数：</path_to_apk></p>
<p>adb install 后面可以跟一些可选参数来控制安装 APK 的行为，可用参数及含义如下：</p>
<p>参数    含义<br>-l    将应用安装到保护目录 /mnt/asec<br>-r    允许覆盖安装<br>-t    允许安装 AndroidManifest.xml 里 application 指定 android:testOnly=”true” 的应用<br>-s    将应用安装到 sdcard<br>-d    允许降级覆盖安装<br>-g    授予所有运行时权限<br>运行命令后如果见到类似如下输出（状态为 Success）代表安装成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[100%] /data/local/tmp/1.apk</div><div class="line">    pkg: /data/local/tmp/1.apk</div><div class="line">Success</div></pre></td></tr></table></figure>
<p>参考：<a href="https://github.com/android/platform_frameworks_base/blob/master/core%2Fjava%2Fandroid%2Fcontent%2Fpm%2FPackageManager.java" target="_blank" rel="external">PackageManager.java</a></p>
<p>adb install 内部原理简介</p>
<p>adb install 实际是分三步完成：</p>
<p>push apk 文件到 /data/local/tmp。</p>
<p>调用 pm install 安装。</p>
<p>删除 /data/local/tmp 下的对应 apk 文件。</p>
<p>所以，必要的时候也可以根据这个步骤，手动分步执行安装过程。</p>
<h2 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h2><p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb uninstall [-k] &lt;packagename&gt;</div></pre></td></tr></table></figure></p>
<p><packagename> 表示应用的包名，-k 参数可选，表示卸载应用但保留数据和缓存目录。</packagename></p>
<p>命令示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb uninstall com.qihoo360.mobilesafe</div></pre></td></tr></table></figure></p>
<p>表示卸载 360 手机卫士。</p>
<h2 id="复制设备里的文件到电脑"><a href="#复制设备里的文件到电脑" class="headerlink" title="复制设备里的文件到电脑"></a>复制设备里的文件到电脑</h2><p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</div></pre></td></tr></table></figure></p>
<p>其中 电脑上的目录 参数可以省略，默认复制到当前目录。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /sdcard/sr.mp4 ~/tmp/</div></pre></td></tr></table></figure></p>
<p>小技巧：设备上的文件路径可能需要 root 权限才能访问，如果你的设备已经 root 过，可以先使用 adb shell 和 su 命令在 adb shell 里获取 root 权限后，先 cp /path/on/device /sdcard/filename 将文件复制到 sdcard，然后 adb pull /sdcard/filename /path/on/pc。</p>
<h2 id="复制电脑里的文件到设备"><a href="#复制电脑里的文件到设备" class="headerlink" title="复制电脑里的文件到设备"></a>复制电脑里的文件到设备</h2><p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</div></pre></td></tr></table></figure></p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb push ~/sr.mp4 /sdcard/</div></pre></td></tr></table></figure></p>
<p>小技巧：设备上的文件路径普通权限可能无法直接写入，如果你的设备已经 root 过，可以先 adb push /path/on/pc /sdcard/filename，然后 adb shell 和 su 在 adb shell 里获取 root 权限后，cp /sdcard/filename /path/on/device。</p>
<p>实战派：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb push AdbTest\. /sdcard/Download</div><div class="line">/sdcard/Download/./: 4 files pushed. 0 files skipped. 0.1 MB/s (3726 bytes in 0.057s)</div></pre></td></tr></table></figure></p>
<p>关键点：使用 “.”是可以一次性 push一个文件目录的。<br>如果AdbTest有子目录会如何？如果子目录中有文件，则会将子目录和其中的文件一起推送过去，如果子目录是空的，则会跳过</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb push comment12031715.txt commenttest.txt userLibrary.dic /sdcard/Download</div></pre></td></tr></table></figure>
<p>adb 一次性推送多个文件，如果目标文件夹中存在同名文件，会如何？默认是直接覆盖的，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">C:\Users\user\Desktop&gt;adb push smile.lrc /storage/sdcard/Download</div><div class="line">smile.lrc: 1 file pushed. 0.0 MB/s (1061 bytes in 0.100s)</div><div class="line"></div><div class="line">C:\Users\user\Desktop&gt;adb push smile.jpg /storage/sdcard/Download</div><div class="line">smile.jpg: 1 file pushed. 0.6 MB/s (51419 bytes in 0.088s)</div></pre></td></tr></table></figure>
<h2 id="遇到读写权限问题的解决办法"><a href="#遇到读写权限问题的解决办法" class="headerlink" title="遇到读写权限问题的解决办法"></a>遇到读写权限问题的解决办法</h2><p>在shell命令行中输入：adb root<br>切换到root用户<br>然后执行如下命令：（注意 /表示的是根目录，因此这个不仅仅是对sdcard，其他文件也可以读写。rw表示读写权限，mount重挂载文件系统）<br>adb shell mount -o remount rw / , 修改系统读写权限</p>
<p>注意系统文件在push后需要修改权限，以framework-res.apk为例，输入：adb shell chmod 644 /system/framework/framework-res.apk回车，然后设备重启下就替换完成了。</p>
<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>Android 系统的日志分为两部分，底层的 Linux 内核日志输出到 /proc/kmsg，Android 的日志输出到 /dev/log。</p>
<h3 id="Android-日志"><a href="#Android-日志" class="headerlink" title="Android 日志"></a>Android 日志</h3><p>命令格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[adb] logcat [&lt;option&gt;] ... [&lt;filter-spec&gt;] ...</div></pre></td></tr></table></figure></p>
<p>常用用法列举如下：</p>
<p>按级别过滤日志</p>
<p>Android 的日志分为如下几个优先级（priority）：</p>
<p>V —— Verbose（最低，输出得最多）<br>D —— Debug<br>I —— Info<br>W —— Warning<br>E —— Error<br>F —— Fatal<br>S —— Silent（最高，啥也不输出）<br>按某级别过滤日志则会将该级别及以上的日志输出。</p>
<p>比如，命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat *:W</div></pre></td></tr></table></figure></p>
<p>会将 Warning、Error、Fatal 和 Silent 日志输出。</p>
<p>（注：在 macOS 下需要给 <em>:W 这样以 </em> 作为 tag 的参数加双引号，如 adb logcat “<em>:W”，不然会报错 no matches found: </em>:W。）</p>
<p>按 tag 和级别过滤日志</p>
<p><filter-spec> 可以由多个 <tag>[:priority] 组成。</tag></filter-spec></p>
<p>比如，命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat ActivityManager:I MyApp:D *:S</div></pre></td></tr></table></figure></p>
<p>表示输出 tag ActivityManager 的 Info 以上级别日志，输出 tag MyApp 的 Debug 以上级别日志，及其它 tag 的 Silent 级别日志（即屏蔽其它 tag 日志）。</p>
<p><strong>清空日志</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat -c</div></pre></td></tr></table></figure></p>
<h2 id="内核日志"><a href="#内核日志" class="headerlink" title="内核日志"></a>内核日志</h2><p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dmesg</div></pre></td></tr></table></figure></p>
<p>输出示例：</p>
<p><6>[14201.684016] PM: noirq resume of devices complete after 0.982 msecs</6></p>
<p><6>[14201.685525] PM: early resume of devices complete after 0.838 msecs</6></p>
<p><6>[14201.753642] PM: resume of devices complete after 68.106 msecs</6></p>
<p><4>[14201.755954] Restarting tasks … done.</4></p>
<p><6>[14201.771229] PM: suspend exit 2016-08-28 13:31:32.679217193 UTC</6></p>
<p><6>[14201.872373] PM: suspend entry 2016-08-28 13:31:32.780363596 UTC</6></p>
<p><6>[14201.872498] PM: Syncing filesystems … done.<br>中括号里的 [14201.684016] 代表内核开始启动后的时间，单位为秒。</6></p>
<p>通过内核日志我们可以做一些事情，比如衡量内核启动时间，在系统启动完毕后的内核日志里找到 Freeing init memory 那一行前面的时间就是。</p>
<h2 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h2><p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screencap -p /sdcard/sc.png</div></pre></td></tr></table></figure></p>
<p>然后将 png 文件导出到电脑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /sdcard/sc.png</div></pre></td></tr></table></figure></p>
<p>可以使用 adb shell screencap -h 查看 screencap 命令的帮助信息，下面是两个有意义的参数及含义：</p>
<p>参数    含义<br>-p    指定保存文件为 png 格式<br>-d display-id    指定截图的显示屏编号（有多显示屏的情况下）<br>实测如果指定文件名以 .png 结尾时可以省略 -p 参数；否则需要使用 -p 参数。如果不指定文件名，截图文件的内容将直接输出到 stdout。</p>
<p>直接一行命令截图并保存到电脑的方法：</p>
<p>Linux 和 Windows<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screencap -p | sed &quot;s/\r$//&quot; &gt; sc.png</div></pre></td></tr></table></figure></p>
<p>Mac OS X<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screencap -p | gsed &quot;s/\r$//&quot; &gt; sc.png</div></pre></td></tr></table></figure></p>
<p>这个方法需要用到 gnu sed 命令，在 Linux 下直接就有，在 Windows 下 Git 安装目录的 bin 文件夹下也有。如果确实找不到该命令，可以下载 <a href="http://gnuwin32.sourceforge.net/packages/sed.htm" target="_blank" rel="external">sed for Windows</a> 并将 sed.exe 所在文件夹添加到 PATH 环境变量里。</p>
<p>而在 Mac 下使用系统自带的 sed 命令会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed: RE error: illegal byte sequence</div></pre></td></tr></table></figure></p>
<p>需要安装 gnu-sed，然后使用 gsed 命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install gnu-sed</div></pre></td></tr></table></figure></p>
<h2 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h2><p>录制屏幕以 mp4 格式保存到 /sdcard：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screenrecord /sdcard/filename.mp4</div></pre></td></tr></table></figure></p>
<p>需要停止时按 Ctrl-C，默认录制时间和最长录制时间都是 180 秒。</p>
<p>如果需要导出到电脑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /sdcard/filename.mp4</div></pre></td></tr></table></figure></p>
<p>可以使用 adb shell screenrecord –help 查看 screenrecord 命令的帮助信息，下面是常见参数及含义：</p>
<p>参数    含义<br>–size WIDTHxHEIGHT    视频的尺寸，比如 1280x720，默认是屏幕分辨率。<br>–bit-rate RATE    视频的比特率，默认是 4Mbps。<br>–time-limit TIME    录制时长，单位秒。<br>–verbose    输出更多信息。</p>
<h2 id="重新挂载-system-分区为可写"><a href="#重新挂载-system-分区为可写" class="headerlink" title="重新挂载 system 分区为可写"></a>重新挂载 system 分区为可写</h2><p>注：需要 root 权限。</p>
<p>/system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 /system 进行写操作，所以需要重新挂载它为可读写。</p>
<p>步骤：</p>
<p>进入 shell 并切换到 root 用户权限。</p>
<p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div></pre></td></tr></table></figure></p>
<p>查看当前分区挂载情况。</p>
<p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount</div></pre></td></tr></table></figure></p>
<p>输出示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">rootfs / rootfs ro,relatime 0 0</div><div class="line">tmpfs /dev tmpfs rw,seclabel,nosuid,relatime,mode=755 0 0</div><div class="line">devpts /dev/pts devpts rw,seclabel,relatime,mode=600 0 0</div><div class="line">proc /proc proc rw,relatime 0 0</div><div class="line">sysfs /sys sysfs rw,seclabel,relatime 0 0</div><div class="line">selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0</div><div class="line">debugfs /sys/kernel/debug debugfs rw,relatime 0 0</div><div class="line">none /var tmpfs rw,seclabel,relatime,mode=770,gid=1000 0 0</div><div class="line">none /acct cgroup rw,relatime,cpuacct 0 0</div><div class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</div><div class="line">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</div><div class="line">tmpfs /mnt/asec tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</div><div class="line">tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</div><div class="line">none /dev/memcg cgroup rw,relatime,memory 0 0</div><div class="line">none /dev/cpuctl cgroup rw,relatime,cpu 0 0</div><div class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</div><div class="line">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</div><div class="line">none /sys/fs/cgroup/freezer cgroup rw,relatime,freezer 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 rw,seclabel,nosuid,nodev,relatime,noauto_da_alloc,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/cache /cache ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/persist /persist ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/modem /firmware vfat ro,context=u:object_r:firmware_file:s0,relatime,uid=1000,gid=1000,fmask=0337,dmask=0227,codepage=cp437,iocharset=iso8859-1,shortname=lower,errors=remount-ro 0 0</div><div class="line">/dev/fuse /mnt/shell/emulated fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</div><div class="line">/dev/fuse /mnt/shell/emulated/0 fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</div></pre></td></tr></table></figure></p>
<p>找到其中我们关注的带 /system 的那一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</div></pre></td></tr></table></figure></p>
<p>重新挂载。</p>
<p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount -o remount,rw -t yaffs2 /dev/block/platform/msm_sdcc.1/by-name/system /system</div></pre></td></tr></table></figure></p>
<p>这里的 /dev/block/platform/msm_sdcc.1/by-name/system 就是我们从上一步的输出里得到的文件路径。</p>
<p>如果输出没有提示错误的话，操作就成功了，可以对 /system 下的文件为所欲为了。</p>
<h2 id="重启手机"><a href="#重启手机" class="headerlink" title="重启手机"></a>重启手机</h2><p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot</div></pre></td></tr></table></figure></p>
<h2 id="检测设备是否已-root"><a href="#检测设备是否已-root" class="headerlink" title="检测设备是否已 root"></a>检测设备是否已 root</h2><p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div></pre></td></tr></table></figure></p>
<p>此时命令行提示符是 $ 则表示没有 root 权限，是 # 则表示已 root。</p>
<h2 id="使用-Monkey-进行压力测试"><a href="#使用-Monkey-进行压力测试" class="headerlink" title="使用 Monkey 进行压力测试"></a>使用 Monkey 进行压力测试</h2><p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p>
<p>简单用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell monkey -p &lt;packagename&gt; -v 500</div></pre></td></tr></table></figure></p>
<p>表示向 <packagename> 指定的应用程序发送 500 个伪随机事件。</packagename></p>
<p>Monkey 的详细用法参考 <a href="https://developer.android.com/studio/test/monkey.html" target="_blank" rel="external">官方文档</a>。</p>
<h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell ps</div></pre></td></tr></table></figure></p>
<p>输出示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">USER     PID   PPID  VSIZE  RSS     WCHAN    PC        NAME</div><div class="line">root      1     0     8904   788   ffffffff 00000000 S /init</div><div class="line">root      2     0     0      0     ffffffff 00000000 S kthreadd</div><div class="line">...</div><div class="line">u0_a71    7779  5926  1538748 48896 ffffffff 00000000 S com.sohu.inputmethod.sogou:classic</div><div class="line">u0_a58    7963  5926  1561916 59568 ffffffff 00000000 S org.mazhuang.boottimemeasure</div><div class="line">...</div><div class="line">shell     8750  217   10640  740   00000000 b6f28340 R ps</div></pre></td></tr></table></figure></p>
<p>各列含义：</p>
<p>列名    含义<br>USER    所属用户<br>PID    进程 ID<br>PPID    父进程 ID<br>NAME    进程名</p>
<h2 id="查看实时资源占用情况"><a href="#查看实时资源占用情况" class="headerlink" title="查看实时资源占用情况"></a>查看实时资源占用情况</h2><p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell top</div></pre></td></tr></table></figure></p>
<p>输出示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">User 0%, System 6%, IOW 0%, IRQ 0%</div><div class="line">User 3 + Nice 0 + Sys 21 + Idle 280 + IOW 0 + IRQ 0 + SIRQ 3 = 307</div><div class="line"></div><div class="line">  PID PR CPU% S  #THR     VSS     RSS PCY UID      Name</div><div class="line"> 8763  0   3% R     1  10640K   1064K  fg shell    top</div><div class="line">  131  0   3% S     1      0K      0K  fg root     dhd_dpc</div><div class="line"> 6144  0   0% S   115 1682004K 115916K  fg system   system_server</div><div class="line">  132  0   0% S     1      0K      0K  fg root     dhd_rxf</div><div class="line"> 1731  0   0% S     6  20288K    788K  fg root     /system/bin/mpdecision</div><div class="line">  217  0   0% S     6  18008K    356K  fg shell    /sbin/adbd</div><div class="line"> ...</div><div class="line"> 7779  2   0% S    19 1538748K  48896K  bg u0_a71   com.sohu.inputmethod.sogou:classic</div><div class="line"> 7963  0   0% S    18 1561916K  59568K  fg u0_a58   org.mazhuang.boottimemeasure</div><div class="line"> ...</div></pre></td></tr></table></figure></p>
<p>各列含义：</p>
<p>列名    含义<br>PID    进程 ID<br>PR    优先级<br>CPU%    当前瞬间占用 CPU 百分比<br>S    进程状态（R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）</p>
<p>#THR    线程数<br>VSS    Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）<br>RSS    Resident Set Size 实际使用物理内存（包含共享库占用的内存）<br>PCY    调度策略优先级，SP_BACKGROUND/SPFOREGROUND<br>UID    进程所有者的用户 ID<br>NAME    进程名<br>top 命令还支持一些命令行参数，详细用法如下：</p>
<p>Usage: top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ]<br>    -m num  最多显示多少个进程<br>    -n num  刷新多少次后退出<br>    -d num  刷新时间间隔（单位秒，默认值 5）<br>    -s col  按某列排序（可用 col 值：cpu, vss, rss, thr）<br>    -t      显示线程信息<br>    -h      显示帮助文档</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/ipcreator/awesome-adb/raw/master/assets/title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;图形化界面太低效，还存在DDMS连接不稳定的隐患，尽量通过命令行方式高效解决&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="ADB" scheme="http://ipcreator.me/tags/ADB/"/>
    
  </entry>
  
  <entry>
    <title>APK Signature Scheme v2</title>
    <link href="http://ipcreator.me/2017/03/04/Program/Android/android_signature_v1_and_v2/"/>
    <id>http://ipcreator.me/2017/03/04/Program/Android/android_signature_v1_and_v2/</id>
    <published>2017-03-04T05:30:06.000Z</published>
    <updated>2017-03-27T07:47:41.144Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://tech.meituan.com/img/android-v2-signature/apk-before-after-signing.png" alt=""></p>
<p><a href="https://developer.android.com/about/versions/nougat/android-7.0.html#scoped_directory_access" target="_blank" rel="external"></a></p>
<p>Android 7.0 introduces APK Signature Scheme v2, a new app-signing scheme that offers faster app install times and more protection against unauthorized alterations to APK files. By default, Android Studio 2.2 and the Android Plugin for Gradle 2.2 sign your app using both APK Signature Scheme v2 and the traditional signing scheme, which uses JAR signing.</p>
<p><a href="https://github.com/ipcreator/walle" target="_blank" rel="external">Android Signature V2 Scheme签名下的新一代渠道包打包神器</a><br><a href="http://tech.meituan.com/android-apk-v2-signature-scheme.html" target="_blank" rel="external">新一代开源Android渠道包生成工具Walle</a><br><a href="http://tech.meituan.com/mt-apk-packaging.html" target="_blank" rel="external">美团Android自动化之旅—生成渠道包</a></p>
 <a id="more"></a>
<p>Although we recommend applying APK Signature Scheme v2 to your app, this new scheme is not mandatory. If your app doesn’t build properly when using APK Signature Scheme v2, you can disable the new scheme. The disabling process causes Android Studio 2.2 and the Android Plugin for Gradle 2.2 to sign your app using only the traditional signing scheme. To sign with only the traditional scheme, open the module-level build.gradle file, then add the line v2SigningEnabled false to your release signing configuration:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    defaultConfig &#123; ... &#125;</div><div class="line">    signingConfigs &#123;</div><div class="line">      release &#123;</div><div class="line">        storeFile file(&quot;myreleasekey.keystore&quot;)</div><div class="line">        storePassword &quot;password&quot;</div><div class="line">        keyAlias &quot;MyReleaseKey&quot;</div><div class="line">        keyPassword &quot;password&quot;</div><div class="line">        v2SigningEnabled false</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Caution: If you sign your app using APK Signature Scheme v2 and make further changes to the app, the app’s signature is invalidated. For this reason, use tools such as zipalign before signing your app using APK Signature Scheme v2, not after.</p>
</blockquote>
<p> For more information, read the Android Studio documents that describe how to <a href="https://developer.android.com/studio/publish/app-signing.html#release-mode" target="_blank" rel="external">sign an app</a> in Android Studio and how to <a href="https://developer.android.com/studio/build/build-variants.html#signing" target="_blank" rel="external">configure the build file for signing apps</a> using the Android Plugin for Gradle.</p>
<p> <a href="http://www.jianshu.com/p/3a179acc7c4a" target="_blank" rel="external">APK Signature Scheme v2</a></p>
<h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>老司机要开车了，你准备好了吗？<br>Android Studio 2.2 最近发布了许多新增功能和改进功能（详情请戳这里）<br>对于Android开发者来说，我想大家应该都知道，在 Android 7.0 Nougat 中引入了全新的 APK Signature Scheme v2，所以我大致总结一下，我们开发者需要了解的新的打包的方式和签名步骤。</p>
<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>用于验证 APK 完整性的 APK 加密签名现在直接位于 ZIP Central Directory 前面。<br>在 v1 中，签名通过整个 APK 文件的二进制内容进行计算并验证，而不是通过归档中每个文件的已解压文件内容。<br>可同时通过 v1 和 v2 签名对 APK 进行签署，以使其仍能向后兼容以前的 Android 版本。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>为什么谷歌要做这个事情呢？第一点毋庸置疑，肯定是处于安全性的考虑，之前的校验方式开发者可以在打包之后对apk做很多处理，第二为了性能考虑，安装校验的时候不需要再解压缩校验，从而提升安装速度（说句玩笑话，个人感觉没什么鸟用，也不需要关系）</p>
<h2 id="那么问题来了"><a href="#那么问题来了" class="headerlink" title="那么问题来了"></a>那么问题来了</h2><p>全新的签名给我们程序员带来的麻烦却很大：</p>
<ol>
<li>由于在 v1 中仅验证未解压的文件内容，因此，在 APK 签署后可进行许多修改 - 可以移动甚至重新压缩文件。事实上，编译过程中要用到的 zipalign 工具就是这么做的，它用于根据正确的字节限制调整 ZIP 条目，以改进运行时性能。而且我们也可以利用这个东西，在打包之后修改META-INF目录下面的内容，或者修改Zip的注释来实现多渠道的打包，在v1签名中都可以校验通过</li>
<li>v2 签名将验证归档中的所有字节，而不是单个 ZIP 条目，因此，在签署后无法再运行 zipalign。正因如此，现在，在编译过程中，Google将压缩、调整和签署合并成一步完成。</li>
<li>如有任何自定义任务篡改 APK 文件或对其进行后处理（无论以任何方式），那么v2 签名会有作废的风险，从而导致您的 APK 与 Android 7.0 及更高版本不兼容。</li>
</ol>
<h2 id="解决途径"><a href="#解决途径" class="headerlink" title="解决途径"></a>解决途径</h2><ol>
<li>如果我们选择手动签名（比如使用命令行）那么 Android SDK 中提供了一个名为 apksigner 的新工具，该工具可同时提供 v1 和 v2 APK 签署与验证。请注意，如果您使用 v2 签名，则在运行 apksigner之前，必须先运行 zipalign。</li>
<li>来自 JDK 的 jarsigner 工具与 Android v2 签名不兼容，因此，如果您要保留 v2 签名，您不能用它来重新签署 APK。</li>
<li>如果我们还想使用之前的打包方式，不做修改，那么Google也是为我们提供了配置方法的用来关闭v2签名：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">v1SigningEnabled false</div><div class="line">v2SigningEnabled false</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然说现在Google有提供方法来关闭v2校验，但是我相信，一旦等到这种方式成熟之后，它会成为一个必需品，毕竟安全第一嘛，我们还是要接纳新事物的，好了，大概就讲这么多，有需要的可以看看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://tech.meituan.com/img/android-v2-signature/apk-before-after-signing.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/about/versions/nougat/android-7.0.html#scoped_directory_access&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android 7.0 introduces APK Signature Scheme v2, a new app-signing scheme that offers faster app install times and more protection against unauthorized alterations to APK files. By default, Android Studio 2.2 and the Android Plugin for Gradle 2.2 sign your app using both APK Signature Scheme v2 and the traditional signing scheme, which uses JAR signing.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ipcreator/walle&quot;&gt;Android Signature V2 Scheme签名下的新一代渠道包打包神器&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://tech.meituan.com/android-apk-v2-signature-scheme.html&quot;&gt;新一代开源Android渠道包生成工具Walle&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://tech.meituan.com/mt-apk-packaging.html&quot;&gt;美团Android自动化之旅—生成渠道包&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Signature" scheme="http://ipcreator.me/tags/Signature/"/>
    
  </entry>
  
  <entry>
    <title>Tips of  Android Studio</title>
    <link href="http://ipcreator.me/2017/03/03/Program/Android/tips-of-androidstudio/"/>
    <id>http://ipcreator.me/2017/03/03/Program/Android/tips-of-androidstudio/</id>
    <published>2017-03-03T00:31:06.000Z</published>
    <updated>2017-03-29T22:49:01.069Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.codeceo.com/article/android-studio-skills.html" target="_blank" rel="external">提高效率的 Android Studio 技巧汇总</a></p>
<p><img src="http://static.codeceo.com/images/2015/08/android-studio-logo.png" alt=""></p>
<p>工欲善其事必先利其器，磨刀不误砍柴工</p>
 <a id="more"></a>
<p> ctrl+/ 注释一行代码<br> ctrl+shift+/注释代码块<br> ctrl+b查看声明<br> ctrl+f查找<br> ctrl+r替换<br> ctrl+shif+f 全路径查找<br> ctrl+shift+r 全路径替换</p>
<p> ctrl+number-minus 代码折叠<br> ctrl+number-plus代码展开<br> ctrl+shift+minus折叠窗口内所有代码<br> ctrl+shift+plus展开窗口内所有代码</p>
<p> ctrl+o复写方法<br> ctrl+alt+o清除无效包引用<br> ctrl+alt+l 格式化代码</p>
<p> <strong>Ctrl+E</strong> (View | Recent Files) brings a popup list of the recently visited files. Choose the desired file and press Enter to open it.</p>
<p> Besides recent files, you can bring up results of the usage searches you have performed recently. To do that, use the same Ctrl+E shortcut with the Find tool window having the focus, and select the desired find usages result from the Recent Find Usages popup.</p>
<p> Press <strong>Alt+Q</strong> (View | Context Info) to see the declaration of the current method without the need to scroll to it.</p>
<p> ctrl+shift+backspace 返回上次编辑点<br> Ctrl+Shift+Backspace (Navigate | Last Edit Location) brings you back to the last place where you made changes in the code.<br> Pressing Ctrl+Shift+Backspace a few times moves you deeper into your changes history.</p>
<p> The CodeCompletion feature can suggest a name for a variable when you declare it. For example, start typing<br>private FileOutputStream<br>and press <strong>Ctrl+Space</strong>.<br>You can customize name prefixes for local variables, parameters, instance and static fields in File | Settings | Code Style.</p>
<p>When you need to cast an expression value to the required type the SmartType code completion will help you. For example, type</p>
<blockquote>
<p>String s = (<caret is="" here=""></caret></p>
</blockquote>
<p>and press <strong>Ctrl+Shift+Space</strong> to see what happens.</p>
<p> You can comment or uncomment lines and blocks of code using <strong>Ctrl+Slash</strong> and <strong>Ctrl+Shift+Slash</strong>.<br> Ctrl+Slash comments or uncomments the current line or selected block with single line comments (//…).<br> Ctrl+Shift+Slash encloses the selected block in a block comment (/<em>…</em>/).<br> To uncomment a commented block press Ctrl+Shift+Slash anywhere inside it.</p>
<p>To navigate to the implementation(s) of an abstract method, position the caret at its usage or its name in the declaration and press <strong>Ctrl+Alt+B</strong>.</p>
<p>The SmartType code completion may be used after the new keyword, to instantiate an object of the expected type. For example, type</p>
<p>and press <strong>Ctrl+Shift+Space</strong>:</p>
<p> When you want to catch exceptions thrown by some code fragment, select it in the editor, press <strong>Ctrl+Alt+T</strong> (Code | Surround With) and choose try / catch. The catch blocks for all the exceptions thrown inside the block will be generated automatically.<br>You can customize the bodies of the generated catch blocks on the Code tab of File | Settings | File and Code Templates.<br>Use other items in the list to surround with other constructs.</p>
<p> Using <strong>Alt+Insert</strong> (Code | Generate) in the editor, you can easily generate getter and setter methods for any fields of your class.</p>
<h2 id="使用Gradle设置layout子目录"><a href="#使用Gradle设置layout子目录" class="headerlink" title="使用Gradle设置layout子目录"></a>使用Gradle设置layout子目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        jni.srcDirs = [&apos;src/main/jni&apos;,]</div><div class="line">        res.srcDirs = [&apos;src/main/res&apos;,</div><div class="line">                       &apos;src/main/res/layout/activity&apos;,</div><div class="line">                      &apos;src/main/res/layout/fragment&apos;,</div><div class="line">                       &apos;src/main/res/layout/item&apos;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Ctrl-Shift-Space"><a href="#Ctrl-Shift-Space" class="headerlink" title="Ctrl+Shift+Space"></a>Ctrl+Shift+Space</h2><p>The SmartType code completion greatly helps to find methods and variables that are suitable in the current context, by analyzing the expected type of the whole expression. So doing, Android Studio pinpoints the top five most suitable results and highlights them on the blue background. For example, type</p>
<p>and press <strong>Ctrl+Shift+Space</strong>:</p>
<p>The SmartType completion also works after the return keyword, in an assignment, in an argument list of a method call and other places.</p>
<h2 id="Ctrl-O"><a href="#Ctrl-O" class="headerlink" title="Ctrl+O"></a>Ctrl+O</h2><p>You may easily override methods of the base class by pressing Ctrl+O (Code | Override Methods).</p>
<h2 id="Ctrl-I"><a href="#Ctrl-I" class="headerlink" title="Ctrl+I"></a>Ctrl+I</h2><p>To implement methods of the interfaces that the current class implements (or of the abstract base class), use Ctrl+I (Code | Implement methods).</p>
<h2 id="Android-studio-插件安装"><a href="#Android-studio-插件安装" class="headerlink" title="Android studio 插件安装"></a><a href="http://blog.csdn.net/aaawqqq/article/details/50772720" target="_blank" rel="external">Android studio 插件安装</a></h2><p>安装插件的入口有两个地方:<br>1) Preferences  &gt;  Plugins   选择  Browse repositories 联网安装插件<br>2)启动界面的configure选项  -&gt;  plugins  -&gt; 弹出plugins 菜单</p>
<h2 id="添加依赖库"><a href="#添加依赖库" class="headerlink" title="添加依赖库"></a>添加依赖库</h2><p>A、在build.Gradle文件中手工添加<br>B、选中工程文件，F4，选择app的Dependencies标签页面，然后+，搜索关键字并下载</p>
<h2 id="Shift-F6-Refactor-Rename"><a href="#Shift-F6-Refactor-Rename" class="headerlink" title="Shift+F6 (Refactor | Rename)"></a>Shift+F6 (Refactor | Rename)</h2><p>To try it, place the caret at the symbol you want to rename, and press <strong>Shift+F6 (Refactor | Rename)</strong>. Type the new name in the popup window that appears, or select one of the suggested names, and press Enter.</p>
<h2 id="Enter和Tab在代码提示时的区别"><a href="#Enter和Tab在代码提示时的区别" class="headerlink" title="Enter和Tab在代码提示时的区别"></a>Enter和Tab在代码提示时的区别</h2><p> 看图!<br> <img src="http://static.codeceo.com/images/2015/11/0ff1495a69e7f791a6f664f279016617.gif" alt=""></p>
<p> When using Code Completion, you can accept the currently highlighted selection in the popup list with Tab key.<br>Unlike accepting with the Enter key, the selected name will overwrite the rest of the name to the right of the caret. This can be especially useful for replacing one method or variable name with another.</p>
<h2 id="Bookmarks"><a href="#Bookmarks" class="headerlink" title="Bookmarks!"></a>Bookmarks!</h2><p>如其名，书签。帮助快速回到指定的位置，实际使用中简直爽得不行。</p>
<p><strong>f11</strong></p>
<p>将当前位置添加到书签中或者从书签中移除。</p>
<p><strong>shift+f11</strong></p>
<p>显示有哪些书签。</p>
<p><img src="http://static.codeceo.com/images/2015/11/6d48930da07ca6c8858aad67e9be48c1.gif" alt=""></p>
<p><strong>ctrl + h</strong><br>显示大纲</p>
<h2 id="The-File-Structure-Popup"><a href="#The-File-Structure-Popup" class="headerlink" title="The File Structure Popup"></a>The File Structure Popup</h2><p><strong>ctrl+f12</strong></p>
<p>此快捷键可以调出当前文件的大纲，并通过模糊匹配快速跳转至指定的方法。<br>勾选上“show anonymous classes”后其功能相当于Eclipse中的ctrl+o</p>
<p><img src="http://static.codeceo.com/images/2015/11/b9a22088dd4c98e411f2a2b1329fee16.gif" alt=""></p>
<h2 id="Hide-All-Panels"><a href="#Hide-All-Panels" class="headerlink" title="Hide All Panels"></a>Hide All Panels</h2><p><strong>ctrl + shit +F12</strong></p>
<p>关闭或者恢复其他窗口。在编写代码的时候非常方便的全屏编辑框，可以更加专心的coding…</p>
<p><img src="http://static.codeceo.com/images/2015/11/04e27f2ff4e98ae04802bb81b8ca54ab.gif" alt=""></p>
<h2 id="Parameter-Info"><a href="#Parameter-Info" class="headerlink" title="Parameter Info"></a>Parameter Info</h2><p><strong>ctrl+p</strong></p>
<p>在调用一些方法的时候免不了会忘记或者不知道此方法需要哪些参数。ctrl+p可以显示出此方法需要的参数。必备技能之一。</p>
<h2 id="Lines-Edit"><a href="#Lines-Edit" class="headerlink" title="Lines Edit"></a>Lines Edit</h2><p><strong>ctrl+y</strong><br>删除行</p>
<h2 id="Find-Actions"><a href="#Find-Actions" class="headerlink" title="Find Actions"></a>Find Actions</h2><p><strong>ctrl+shift+a</strong></p>
<p>对于没有设置快捷键或者忘记快捷键的菜单或者动作（Action），可能通过输入其名字快速调用。神技！！！</p>
<p>例如想要编译，只需要输入”release”，则列表框中就会出现”assembleRelease”选项，选择就可以进行编译。</p>
<p><img src="http://static.codeceo.com/images/2015/11/4e600b142e3e4d86398b7b4db66db33f.gif" alt=""></p>
<p><strong>分析堆栈信息</strong></p>
<p>Find Actions(ctrl+shift+a)输入 <strong>analyze stacktrace”</strong> 即可查看堆栈信息。<br><img src="http://static.codeceo.com/images/2015/11/3a824abd46773ba887c577f4cff1ff0c.gif" alt=""></p>
<p><strong>分析某个值的来源</strong><br>Find Actions(ctrl+shift+a)输入”Analyze Data Flow to Here”，可以查看某个变量某个参数其值是如何一路赋值过来的。<br>对于分析代码非常有用。<br><img src="http://static.codeceo.com/images/2015/11/2f68ddf53a1e6506c42e84b766ab6005.gif" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.codeceo.com/article/android-studio-skills.html&quot;&gt;提高效率的 Android Studio 技巧汇总&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.codeceo.com/images/2015/08/android-studio-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;工欲善其事必先利其器，磨刀不误砍柴工&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Android Studio" scheme="http://ipcreator.me/tags/Android-Studio/"/>
    
      <category term="Tip" scheme="http://ipcreator.me/tags/Tip/"/>
    
  </entry>
  
  <entry>
    <title>How to Write Right Singleton</title>
    <link href="http://ipcreator.me/2017/03/03/Program/Java/how-to-write-singe-instance/"/>
    <id>http://ipcreator.me/2017/03/03/Program/Java/how-to-write-singe-instance/</id>
    <published>2017-03-03T00:31:06.000Z</published>
    <updated>2017-03-27T09:58:42.002Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/" target="_blank" rel="external">Jark’s Blog
</a></p>
<p>单例模式算是设计模式中最容易理解，也是最容易手写代码的模式了吧。但是其中的坑却不少，所以也常作为面试题来考。本文主要对几种单例写法的整理，并分析其优缺点。很多都是一些老生常谈的问题，但如果你不知道如何创建一个线程安全的单例，不知道什么是双检锁，那这篇文章可能会帮助到你。</p>
 <a id="more"></a>
<h2 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h2><p>当被问到要实现一个单例模式时，很多人的第一反应是写出如下的代码，包括教科书上也是这样教我们的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton instance;</div><div class="line">    private Singleton ()&#123;&#125;</div><div class="line"></div><div class="line">    public static Singleton getInstance() &#123;</div><div class="line">     if (instance == null) &#123;</div><div class="line">         instance = new Singleton();</div><div class="line">     &#125;</div><div class="line">     return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这段代码简单明了，而且使用了懒加载模式，但是却存在致命的问题。当有多个线程并行调用 getInstance() 的时候，就会创建多个实例。也就是说在多线程下不能正常工作。</p>
<p>懒汉式，线程安全<br>为了解决上面的问题，最简单的方法是将整个 getInstance() 方法设为同步（synchronized）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static synchronized Singleton getInstance() &#123;</div><div class="line">    if (instance == null) &#123;</div><div class="line">        instance = new Singleton();</div><div class="line">    &#125;</div><div class="line">    return instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。因为在任何时候只能有一个线程调用 getInstance() 方法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。这就引出了双重检验锁。</p>
<p><strong>双重检验锁</strong><br>双重检验锁模式（double checked locking pattern），是一种使用同步块加锁的方法。程序员称其为双重检查锁，因为会有两次检查 instance == null，一次是在同步块外，一次是在同步块内。为什么在同步块内还要再检验一次？因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public static Singleton getSingleton() &#123;</div><div class="line">    if (instance == null) &#123;                         //Single Checked</div><div class="line">        synchronized (Singleton.class) &#123;</div><div class="line">            if (instance == null) &#123;                 //Double Checked</div><div class="line">                instance = new Singleton();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return instance ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这段代码看起来很完美，很可惜，它是有问题。主要在于instance = new Singleton()这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。</p>
<ol>
<li>给 instance 分配内存</li>
<li>调用 Singleton 的构造函数来初始化成员变量</li>
<li>将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了）<br>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。</li>
</ol>
<p>我们只需要将 instance 变量声明成 volatile 就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private volatile static Singleton instance; //声明成 volatile</div><div class="line">    private Singleton ()&#123;&#125;</div><div class="line"></div><div class="line">    public static Singleton getSingleton() &#123;</div><div class="line">        if (instance == null) &#123;                         </div><div class="line">            synchronized (Singleton.class) &#123;</div><div class="line">                if (instance == null) &#123;       </div><div class="line">                    instance = new Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有些人认为使用 volatile 的原因是可见性，也就是可以保证线程在本地不会存有 instance 的副本，每次都是去主内存中读取。但其实是不对的。使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 volatile 变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。</p>
<p>但是特别注意在 Java 5 以前的版本使用了 volatile 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即时将变量声明成 volatile 也不能完全避免重排序，主要是 volatile 变量前后的代码仍然存在重排序问题。这个 volatile 屏蔽重排序的问题在 Java 5 中才得以修复，所以在这之后才可以放心使用 volatile。</p>
<p>相信你不会喜欢这种复杂又隐含问题的方式，当然我们有更好的实现线程安全的单例模式的办法。</p>
<h2 id="饿汉式-static-final-field"><a href="#饿汉式-static-final-field" class="headerlink" title="饿汉式 static final field"></a>饿汉式 static final field</h2><p>这种方法非常简单，因为单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Singleton&#123;</div><div class="line">    //类加载时就初始化</div><div class="line">    private static final Singleton instance = new Singleton();</div><div class="line"></div><div class="line">    private Singleton()&#123;&#125;</div><div class="line"></div><div class="line">    public static Singleton getInstance()&#123;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种写法如果完美的话，就没必要在啰嗦那么多双检锁的问题了。缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。饿汉式的创建方式在一些场景中将无法使用：譬如 Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance() 之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。</p>
<h2 id="静态内部类-static-nested-class"><a href="#静态内部类-static-nested-class" class="headerlink" title="静态内部类 static nested class"></a>静态内部类 static nested class</h2><p>我比较倾向于使用静态内部类的方法，这种方法也是《Effective Java》上所推荐的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;  </div><div class="line">    private static class SingletonHolder &#123;  </div><div class="line">        private static final Singleton INSTANCE = new Singleton();  </div><div class="line">    &#125;  </div><div class="line">    private Singleton ()&#123;&#125;  </div><div class="line">    public static final Singleton getInstance() &#123;  </div><div class="line">        return SingletonHolder.INSTANCE;</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种写法仍然使用JVM本身机制保证了线程安全问题；由于 SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本。</p>
<h2 id="枚举-Enum"><a href="#枚举-Enum" class="headerlink" title="枚举 Enum"></a>枚举 Enum</h2><p>用枚举写单例实在太简单了！这也是它最大的优点。下面这段代码就是声明枚举实例的通常做法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public enum EasySingleton&#123;</div><div class="line">    INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们可以通过EasySingleton.INSTANCE来访问实例，这比调用getInstance()方法简单多了。创建枚举默认就是线程安全的，所以不需要担心double checked locking，而且还能防止反序列化导致重新创建新的对象。但是还是很少看到有人这样写，可能是因为不太熟悉吧。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般来说，单例模式有五种写法：懒汉、饿汉、双重检验锁、静态内部类、枚举。上述所说都是线程安全的实现，文章开头给出的第一种方法不算正确的写法。</p>
<p>就我个人而言，一般情况下直接使用饿汉式就好了，如果明确要求要懒加载（lazy initialization）会倾向于使用静态内部类，如果涉及到反序列化创建对象时会试着使用枚举的方式来实现单例。</p>
<h2 id="Read-More"><a href="#Read-More" class="headerlink" title="Read More"></a>Read More</h2><p><a href="http://javarevisited.blogspot.sg/2014/05/double-checked-locking-on-singleton-in-java.html" target="_blank" rel="external">Double Checked Locking on Singleton Class in Java</a><br><a href="http://javarevisited.blogspot.sg/2012/07/why-enum-singleton-are-better-in-java.html" target="_blank" rel="external">Why Enum Singleton are better in Java</a><br><a href="http://javarevisited.blogspot.com/2012/12/how-to-create-thread-safe-singleton-in-java-example.html" target="_blank" rel="external">How to create thread safe Singleton in Java</a><br><a href="http://javarevisited.blogspot.com/2011/03/10-interview-questions-on-singleton.html" target="_blank" rel="external">10 Singleton Pattern Interview questions in Java</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/&quot;&gt;Jark’s Blog
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;单例模式算是设计模式中最容易理解，也是最容易手写代码的模式了吧。但是其中的坑却不少，所以也常作为面试题来考。本文主要对几种单例写法的整理，并分析其优缺点。很多都是一些老生常谈的问题，但如果你不知道如何创建一个线程安全的单例，不知道什么是双检锁，那这篇文章可能会帮助到你。&lt;/p&gt;
    
    </summary>
    
      <category term="Program" scheme="http://ipcreator.me/categories/Program/"/>
    
    
      <category term="Design Pattern" scheme="http://ipcreator.me/tags/Design-Pattern/"/>
    
      <category term="Singleton" scheme="http://ipcreator.me/tags/Singleton/"/>
    
  </entry>
  
  <entry>
    <title>History and Development of Open Source in China</title>
    <link href="http://ipcreator.me/2017/03/02/Program/Concepts/history-of-open-source/"/>
    <id>http://ipcreator.me/2017/03/02/Program/Concepts/history-of-open-source/</id>
    <published>2017-03-02T01:33:06.000Z</published>
    <updated>2017-03-27T10:02:18.856Z</updated>
    
    <content type="html"><![CDATA[<p>作者：<a href="http://www.fmsoft.cn/zhcn/about/blog/185/" target="_blank" rel="external">魏永明</a>（飞漫软件CEO）。本文经章文嵩、陈渝审阅。</p>
<p><img src="http://cms.csdnimg.cn/article/201306/21/51c411d5c48fa.jpg" alt=""></p>
 <a id="more"></a>
<h2 id="1-开源是大势所趋"><a href="#1-开源是大势所趋" class="headerlink" title="1 开源是大势所趋"></a>1 开源是大势所趋</h2><p>随着计算机技术的发展，尤其是互联网技术和相关企业的兴起，开源软件在操作系统、编译工具链、数据库、WEB服务器、移动操作系统等各个方面已经成为主流。而且许多企业利用开源软件形成了独特的商业模式。比如谷歌的 Android 操作系统，从 2007 年开源发布第一个版本起，到今天已经发展到 4.1 版本，占据了智能手机操作系统一半以上的市场份额，谷歌也通过 Android 操作系统在移动互联网这一新兴行业中占据了领先和主导地位。再比如在服务器端广泛使用的关系型数据库 MySQL，在以开源软件和商业许可并行的模式下，得到了快速发展，并在 2008 年作价 10 亿美金由 Sun 收购（后者又在 2009 年被 Oracle 公司以 74 亿美金的高价收购）。相反，以前一直和开源软件做斗争的微软公司，却因为无法快速推出适应市场的 Windows Phone 操作系统，在移动互联网竞争中处于下风。为顺应潮流，微软也开始拥抱开源，比如向Samba项目贡献代码，放弃自己研发多年的大数据项目而选择Hadoop为其大数据的核心等。</p>
<p>显然，纵观 IT 行业这二十多年的发展，开源软件从黑客的理想之国，已经形成了一股推进计算机及相关行业不停进步的巨大力量。很多人可能尚未意识到，我们使用的电脑中运行有开源软件，手机中运行有开源软件，家里的电视也运行有开源软件，甚至小小的数码产品（如电子相框）中也运行有开源软件，尤其是互联网服务器端软件，几乎全部是开源软件。毫不夸张地说，开源软件已经渗透到了我们日常生活的方方面面。那么，开源软件到底什么，开源软件尤其是国内的开源软件及社区的现状如何，发展面临哪些困难和问题？</p>
<h2 id="2-开源软件的基本概念"><a href="#2-开源软件的基本概念" class="headerlink" title="2 开源软件的基本概念"></a>2 开源软件的基本概念</h2><p>在讲述国内开源软件的发展情况之前，我们先就开源软件的一些基本概念做一些普及。</p>
<h3 id="2-1-为什么会有开源软件？"><a href="#2-1-为什么会有开源软件？" class="headerlink" title="2.1 为什么会有开源软件？"></a>2.1 为什么会有开源软件？</h3><p>广义上讲，开源软件指所有公开源代码的软件，包括某些商业软件也可能是开源的。但我们通常所说的开源软件，是狭义上的，指任何人可以通过极低的成本（如仅仅访问互联网而无需其他额外费用）获得该软件源代码的软件，也就是其源代码向公众开放。和狭义上的开源软件相对应的，就是那些不向公众公开源代码的软件，通常就是商业软件。</p>
<p>实质上，在计算机出现的最初年代，几乎所有的软件都是开源的。那时的计算机企业，主要是以销售硬件产品为主，软件几乎都是附送的，加上那时的软件规模都不大，以源代码形式提供给用户还可以缓解一定的技术支持压力——有问题由用户自己修改解决。所以，最初的软件几乎都是以开源的方式提供的。因此，对着迷于计算机编程的工程师来讲，获得软件的源代码几乎是天经地义的事情。这样，当以微软为代表的企业开始实践纯软件产品的商业模式（核心思想是提供二进制可执行程序的使用许可，而不提供源代码），就引起了许多计算机编程爱好者的不满：给我一堆二进制程序，我如何才能按我自己的想法改进程序？在这种背景下，真正意义上的开源软件就自然而然地产生了。</p>
<h3 id="2-2-开源软件的发展历程"><a href="#2-2-开源软件的发展历程" class="headerlink" title="2.2 开源软件的发展历程"></a>2.2 开源软件的发展历程</h3><p>开源软件的发展，和互联网的发展密不可分。真正有规模的开源软件，应该是从上个世纪 90 年代开始进入公众视线，也就是互联网开始兴起的年代。我们大致可以将开源软件的发展分为如下三个阶段：</p>
<p>萌芽阶段（上世纪九十年代之前）。这个阶段主要以个人和大学为主，因为发布条件受限，大多数开源软件无法得到有效传播，而仅仅流传于互相熟悉的程序员和老师、学生之间。这个阶段的典型开源软件为 BSD 操作系统。</p>
<p>以非盈利组织为主的阶段。这个阶段应从上个世纪九十年代算起，说起这个阶段，我们不得不提到 Richard Stallman 发起的自由软件基金会，还有 Apache 基金会等。前者发起的 GNU 项目（1983 年发起，九十年代后随 Linux普及），成就了 Linux 操作系统；后者维护的 Apache WEB服务器，在互联网上几乎占据了统治地位。</p>
<p>以大型IT企业为主的阶段。这个阶段出现于 2005 年之后，以谷歌为代表的大型互联网企业，开始以各种方式发布开源软件，最为著名的是 Chrome 浏览器以及 Android 操作系统；当然还有 Intel、Nokia 等企业主导的 Moblin、MeeGo 等基于 Linux 的智能手机操作系统。</p>
<h3 id="2-3-开源软件许可证"><a href="#2-3-开源软件许可证" class="headerlink" title="2.3 开源软件许可证"></a>2.3 开源软件许可证</h3><p>笔者看来，软件作者选择向公众开放源代码，其理由无外乎如下三种：</p>
<p>第一，那些认为所有软件都应该以源代码方式发布的。如 Richard Stallman，他认为所有的软件都应该是开放源代码的，甚至为了建造一个理想中的全开源软件世界，创立了自由软件基金会，发明了 GPL 许可证，发起了 GNU 项目。</p>
<p>第二，通过开源软件展示自己的软件设计、算法和编码水平，并期望获得他人认可的。大部分小型软件或者程序的作者，或者由大学主持和维护的开源软件，出于这种目的向公众开放源代码。</p>
<p>第三，通过开源软件谋求获得广泛推广，并通过提供增值的产品或者服务来获得商业收益的。这通常是商业企业选择开源软件的原因。如 FireFox、MySQL、Android、WebKit 等属于这种情形。</p>
<p>为了达到上述三种不同的目的，人们在现有软件著作权的法律框架内，发明了多种用于开源软件的许可证。这些许可证从法律上帮助对开源软件有不同诉求的软件作者，获得自己想要的结果。要想具体了解这些许可证的实质内容，我们首先需要更加深入地了解软件著作权。</p>
<p>许多开发者对软件著作权只有一个初步的、模糊的认知。我们经常会在各种软件的启动画面或者关于对话框中刚看到类似“版权所有 (C) 2012 某公司；保留所有权利”的用语。这说明，软件著作权包含了很多权利，所以才有“保留所有权利”这样的说法。具体而言，软件著作权大致包括如下几个权利：</p>
<p><strong>署名权</strong>。就是署上自己大名的权利，向人们说明这是我的作品。这里的“我”，可能是个人，也可能是法人单位。</p>
<p><strong>修改权</strong>。就是是否可以修改软件，比如翻译软件界面中的文字。对非开源软件，就是是否允许你反编译软件并修改的权利。对开源软件来讲，就是修改其中可能存在的缺陷，或对一些代码进行优化、重构等等。</p>
<p><strong>复制权</strong>。就是将软件进行复制的权利。和图书类比，就是你能不能抄写和/或复印图书。</p>
<p><strong>发布权</strong>。就是将软件副本交给他人的权利，不管是收费的还是不收费的。</p>
<p>对商业软件而言，这些权利都被保留，意思是什么呢？就是说，你不能修改，也不能复制，还不能随便发布给别人。那用户能做什么，唯一的就是安装和使用这个软件了。当然，大部分商业软件都附带有一个《最终用户许可协议》，其中告诉了你能做什么，不能做什么。比如，你可以因为备份的原因复制这个软件。另外，还定义了很多免责条款，比如，如果 90 天内软件的存储介质损坏，可以免费替换；如果因为使用本软件导致数据丢失或损坏，概不负责之类的。</p>
<p>对开源软件而言，因为任何人可以几乎无成本获得软件的源代码或者最终程序，用户使用这个软件要是有了问题，都去询问作者，那作者就吃不消了。所以，开源软件也通常使用某个特定的许可证来约定作者以及使用者所承担的权利和义务。</p>
<p>自由软件基金会制定的 GPL 许可证，应该是开源软件使用的各种许可证中最为严格的。为了区别于其他开源软件，Richard Stallman 将使用 GPL 许可证的开源软件称为自由软件。GPL 许可证的核心内容是：</p>
<p>你可以随意复制和发布软件。如果以二进制方式发布软件，则必须能够让获得二进制版本的人，以不付出额外成本的方式获得其源代码。<br>你可以随意修改源代码。一旦要发布修改后的软件，必须同时发布修改后的源代码。也就是说，修改版本也必须以 GPL 许可证发布。这就是 GPL 许可证被称为病毒许可证的一个最重要原因。<br><strong>如果 GPL 软件作为其他软件的一部分使用（后者称为 GPL 软件的衍生作品），不论是静态链接还是动态链接，衍生作品也要遵循 GPL 许可证。这是 GPL 许可证被称为病毒许可证的另外一个重要原因。</strong><br>无任何担保。就是说，使用 GPL 软件，出了问题不要找原作者，你需要自己负责。</p>
<p>Richard Stallman 希望通过这样严格的 GPL 许可证，来建立一个所有软件均遵循 GPL 的理想软件世界。除了 Richard Stallman 所倡导的理想王国之外，还有许多个人和组织，以不同于自由软件的方式来发展开源软件。这些开源软件所使用的许可证相比 GPL 要宽松一些，或者很宽松。这些开源软件作者，通常属于本节前面所讲的第二、第三种人，所以他们使用的许可证有如下共同点：</p>
<p>&gt;<br>免担保，责任由使用者自负。<br>随便复制和发布。<br>不限制商用。</p>
<p>这些许可证的不同点在于：</p>
<p><strong>Apache 许可证</strong>：如有修改，必须保留已有的版权声明，且必须包含新的版权声明。通俗理解，就是要 <strong>保留原作者信息，也就是署名权</strong>。</p>
<p><strong>BSD 许可证</strong>：<strong>不允许在衍生软件作品中提原作者的名字</strong>，其理由是，因为你的修改可能污染原有代码，破坏原作品的品质。</p>
<p><strong>MIT 许可证</strong>：在衍生软件作品中，<strong>必须提原作者的名字</strong>；其理由是，原有代码作者应得到充分尊重。</p>
<p><strong>Mozilla 许可证（MPL）</strong>：就原有软件所做修改，必须可以以各种可能的方式发布其源代码（包括使用 GPL 许可证），且应该有修改说明。</p>
<p>除了上述许可证之外，还有一个广泛使用的 LGPL 许可证。该许可证最初是针对函数库专门制定的。为了避免类似 C 基础库这样的软件因为采用 GPL 许可证而让使用它的软件（衍生作品）成为 GPL 软件，从而定义了 LGPL 许可证。试想，如果 C 基础库也采用 GPL 许可证，那就失去了它本身存在的实际价值，因为其他任何非 GPL 软件都不能使用采用 GPL 的 C 基础库。所以，<strong>LGPL 定义，当 C 基础库这样的软件以动态链接的形式由其他软件使用时，这些软件就可以不遵守 GPL 许可证，甚至可以是商业软件。</strong> 另外，本某种角度看，LGPL 和 MPL 本质上是一样的。</p>
<p>当然，除了上面的各种许可证，还有的开源软件作者根本不关心保留什么权利，或者对其作品做什么样的约束，相反，这些作者开源其软件，就是为了“有用”，任何人拿这种软件做什么，对原作者来讲，都是无所谓的。这种软件亦称为“礼物软件”，相当于作者放弃了有关软件著作权的所有权利，也就是所谓置于“公共领域（public domain）”当中——随你怎么用。</p>
<h3 id="2-4-为什么开源软件会得到快速发展并广泛应用？"><a href="#2-4-为什么开源软件会得到快速发展并广泛应用？" class="headerlink" title="2.4 为什么开源软件会得到快速发展并广泛应用？"></a>2.4 为什么开源软件会得到快速发展并广泛应用？</h3><p>很多人不理解，既然作者这么大方地将源代码都公开了，只是为了“有用”，且不提供任何“担保”，看起来原作者是无法直接获利的，那为什么没有直接的利益驱动，开源软件却能够得到这么快速的发展和广泛应用呢？</p>
<p>笔者初探其原因，大致有四：</p>
<ol>
<li><p>开源软件虽说不提供任何担保，但既然原作者愿意公开源代码，说明作者对代码的质量还是非常有信心的。实际上，开源软件的作者通常都是编码高手（俗称“黑客”），其质量甚至超过某些商业软件。</p>
</li>
<li><p>开源软件因为其免费特征，能够得到大量用户的使用和验证，通过形成和用户（往往也是编码高手）之间的互动和交流，能够以最快的速度修复可能的缺陷，改善软件设计。Linux 内核的发展就形成了一个以全世界内核高手为主的松散社区，通过快速迭代开发，加上其免费特征，迅速占据了原先由商业 UNIX 系统控制的服务器操作系统领域。</p>
</li>
<li><p>因为任何人都可以得到其源代码，所以很多用户就可以自行修改其源代码，以满足自己的一些特别需求。</p>
</li>
<li><p>因为开源软件的涉及面非常广，利用已有的各种成熟开源软件，任何具有一定实力的组织，均可在较短时间内形成一个基本成熟的软件平台，进而可和已有的商业软件平台进行竞争。谷歌的 Android 系统属于此种情况的典型。</p>
</li>
</ol>
<p>所以，尽管开源软件的发展历程并不是一帆风顺的，但基于以上原因，开源软件显现出了其强大的生命力。各种基于开源软件的成功商业模式，也为开源软件的发展注入了加速剂。有关围绕开源软件的成功商业模式，可见本文第 4 章。</p>
<h2 id="3-国内开源软件的发展及社区现状"><a href="#3-国内开源软件的发展及社区现状" class="headerlink" title="3 国内开源软件的发展及社区现状"></a>3 国内开源软件的发展及社区现状</h2><h3 id="3-1-国内开源软件的发展简史"><a href="#3-1-国内开源软件的发展简史" class="headerlink" title="3.1 国内开源软件的发展简史"></a>3.1 国内开源软件的发展简史</h3><p>国内开源软件的发展大致始于 1997 年前后。那时，中国第一个（局部）互联网（CERNET）刚刚建立不久，1995 年在清华大学建立的著名水木清华 BBS 就是开源软件。自那之后，Linux 内核以及 GNU 项目中的成百上千个开源软件突然展现在国人的面前。在这之前，国内软件开发者，几乎没有人会认为获得程序的源代码是天经地义的事情（写到此处，笔者再次感叹文化和背景的不同所带来的认知差别）。但随着带有源代码的 Linux 操作系统随着互联网以及廉价光盘的广泛传播，当你能看到这些优秀的软件是如何设计和编写出来的的时候，我相信，大部分程序开发者都会和笔者一样——那心情岂止是“激动”两个字可以形容的？</p>
<p>在这样的背景下，中国也出现了一些开源软件。最初由国人开发的开源软件，主要解决的是 Linux 系统的汉化问题，流传最为广泛的应该是可以显示和输入中文的伪终端应用程序 CCE。在 1998 年之后的两三年内，出现了如下三个开源软件：</p>
<p>章文嵩博士开发的 LVS（Linux Virtual Server），后来被 Linux 内核收录，成为使用 Linux 操作系统搭建集群服务器的重要核心软件组件。</p>
<p>当时的清华大学博士生苏哲开发的 Smart Boot Manager，是一种引导管理器，类似现在流行的 GRUB，主要解决引导多种操作系统的问题。苏哲后来主持开发的 SCIM 系统，被各种流行的 Linux 发行版收录，成为了 Linux 操作系统上提供多语种输入法支持的标准框架。</p>
<p>笔者开发的 MiniGUI，后来由笔者创立的北京飞漫软件技术有限公司继续维护和发展，在功能手机、数码相框、工业控制系统和工业仪表中得到了广泛应用。</p>
<p>上述三个开源软件，成为中国开源软件早期的代表作，在国际上具有较强的影响力，很多台湾同行也知道这些软件，提起来往往是赞不绝口。</p>
<p>在此之后，国内开源软件的发展长期处于停滞状态，这和 2000 年左右 DotCOM 泡沫的破裂有一定的关系。DotCOM 泡沫的破裂，让许多梦想通过开源软件来创造商业奇迹的 Linux 发行版厂商很是受伤。比如，笔者曾经供职过的蓝点软件，在 NASDAQ OTCBB 板借壳上市，半年之内股价从 20 多美金跌到 0.2 美金，后于 2001 年贱卖。RedHat 等知名 Linux 发行版厂商也深受其害，另外一些抗跌能力不强的从事开源软件相关业务的企业更是一蹶不振，甚至关门大吉。</p>
<p>DotCOM 泡沫的破裂，给很多支持开源软件的理想主义者浇了一桶凉水，开源软件的商业化发展步伐减缓，从而影响了国内开源软件的发展。2000年前后几年，以北京、武汉等地的 LUG（Linux User Group）为代表的各类开源软件组织非常活跃，而从 2003 年开始，逐渐降温甚至消失。</p>
<p>但是，国际上深信理想主义的黑客文化并没有因为 Linux 发行版厂商的商业化遇阻而停止发展，Linux 内核、GNU 项目、GNOME 和 KDE 等等软件继续向前发展。同时，2005 年后，又出现了如下在当前 IT 领域有着举足轻重影响力的几款开源软件：</p>
<p><strong>Mozilla 基金会（以 Mozilla 基金会下属 Mozilla 公司的成立为准）以及 FireFox 浏览器</strong>。Mozilla 公司通过 FireFox 浏览器获得了来自谷歌等公司的大量合作收入，从而实践了没有赞助也能自负盈亏的商业模式。</p>
<p><strong>WebKit 浏览器引擎</strong>。WebKit 浏览器是苹果 Safari 浏览器、谷歌 Chrome 浏览器使用的浏览器核心引擎。WebKit 其实是由苹果公司发起的开源项目，在早期 KDE 系统的 KHTML 和 KJS 两个子系统基础上发展而来。</p>
<p><strong>谷歌的 Android 操作系统</strong>。Android 操作系统的上层虽然是虚拟机和 Java 应用，但底层却使用了大量开源软件，如 Linux 内核、SQLite 内嵌式数据库、FreeType 矢量字体渲染库等等。</p>
<p>显然，从 2005 年起，开源软件的发展从一个低谷重新引来了发展的高潮，而这次，与前述的第三个阶段吻合，即以大型 IT 企业为主导进行发展。在此期间，国内也出现了为数不多的一些开源软件项目，其中以清华大学陈渝副教授主持的 SkyEye 最具代表性。该项目旨在提供一个面向嵌入式软件开发和调试的 ARM 或其他架构的纯软件仿真器（虚拟机）。该项目持续活跃长达七年时间，吸引了许多来自海外的高手参与，是为数不多具有国际影响力，且充分体现了国际化协作、分享的开源软件项目。</p>
<p>与此同时，RedHat 以及国内的红旗等公司，也开始通过提供针对服务器的 Linux 定制版本而获得可观收入，之后，Ubuntu 这一在桌面系统上广泛应用的 Linux 发行版也实践了其成功的商业模式，占据了绝大部分 Linux 桌面发行版的市场份额。</p>
<p>2008年金融危机后，传统企业为了降低IT的总拥有成本逐步使用Linux和开源软件，尤其是金融企业，世界上主要证券交易所如纽约交易所、NASDAQ、东京交易所、伦敦交易所等先后迁移到Linux。这标志着开源软件进入了不可逆转的发展通道。</p>
<p>从 2005 年开始，国内的开源软件也开始进入上面所说的由大型企业主导的第三个阶段，参与开源项目的企业当中，最为活跃的是淘宝，接下来是新浪、百度、腾讯和华为等。同时，随着“开源中国”等社区的兴起，个人主持或者参与的开源软件逐渐多了起来。根据“开源中国”收录的开源软件，当前已经有一千多个由国人开发或者主持的开源软件。这和十年前相比，已经有了非常大的进步。有兴趣的读者可访问 <a href="http://www.oschina.net" target="_blank" rel="external">http://www.oschina.net</a> 了解。其中值得一提的开源软件有：</p>
<p><strong>TFS</strong>。TFS是一款由淘宝开发的分布式对象存储系统，于2010年9月开源，在淘宝它存储了几百亿张图片和交易快照。新浪微博已在生产系统中使用TFS作图片等对象存储。淘宝承诺发布的开源版本与自身使用的版本保持高度一致，并同步更新，这为国内开源软件的发展起到了积极的推动作用，TFS已经成为国内企业利用开源方式形成核心竞争力的典范。</p>
<p><strong>TAIR</strong>。TAIR 是一个高性能、可扩展、高可靠的分布式key/value存储系统，淘宝在2010年6月开源。在淘宝约有600台TAIR服务器广泛应用在Web服务器和数据库中间作对象缓存。国内的豆丁网等公司已使用TAIR。</p>
<p><strong>OceanBase</strong>。OceanBase是一个高性能海量数据库系统，由淘宝开发，于 2011 年 5 月开源。淘宝在其收藏夹等多项功能中使用该数据库，已经历实际应用的检验。</p>
<p><strong>RT-Thread</strong>。这是一个由国人主持开发的开源实时操作系统，曾获得“第六届中日韩开源软件竞赛”的技术优胜奖（其他两个技术优胜奖获得者为淘宝OceanBase 和红旗Qomo Linux）。RT-Thread 目前也获得了诸多商业应用。</p>
<p><strong>Linux Deepin</strong>。这是近几年发展起来的面向桌面的中文 Linux 发行版，由一群来自武汉的 Linux 高手发起并维护。</p>
<p><strong>ucore</strong>：2010 年暑假开始，陈渝博士组织清华大学学生开展教学用开源操作系统ucore的设计与实现，并直接用于清华大学的操作系统课程，学生可参考实验文档和ucore源码通过实践逐步深入掌握操作系统。这相对国内操作系统旧有的教学方法有较大改变，获得了国内外操作系统教学领域专家的认可，并将在教育部的支持下进行更大范围内的推广。</p>
<h3 id="3-2-国内开源软件的特点和问题"><a href="#3-2-国内开源软件的特点和问题" class="headerlink" title="3.2 国内开源软件的特点和问题"></a>3.2 国内开源软件的特点和问题</h3><p>但国内开源软件也存在很多问题，如缺乏重量级软件，缺乏持续维护和更新，质量一般，用户不多等等。另外，如开源中国创始人所言，国人所开发的这些开源软件，和国际主流开源软件脱节严重，绝大多数的状态是单打独斗。</p>
<p>比如淘宝主导或参与的开源软件，大多数和互联网服务器后台、云计算相关，这些项目的主要用户是淘宝自己。因为门户之见，这些软件很难被其他的互联网企业所使用，大家不停地“造轮子”而忽视了开源软件发展必须具备的“共享”、“协作”之精神。当然，这种情况正在改变，比如上面提到的淘宝 TFS 系统已被其他互联网企业使用，ucore 项目也得到了诸多国内、国外大学积极响应和支持。</p>
<p>笔者希望国内的开源软件作者能够和国际主流的开源软件步伐保持一致，摒弃门户之见，要么加入国际化的开源软件，要么将自己主持的开源软件逐步国际化。这样，我们的开源软件才能得到源源不断的前进动力，也才能在国际化舞台上扮演更加重要的角色。</p>
<h3 id="3-3-新的力量"><a href="#3-3-新的力量" class="headerlink" title="3.3 新的力量"></a>3.3 新的力量</h3><p>但不论如何，国内大型 IT 企业参与开源软件本身就是一个良好的开端，将为中国开源软件的发展起到非常大的促进作用。</p>
<p>与此同时，各种开源社区活动也越来越活跃，比如具有政府背景的“开源软件高峰论坛”和草根性质的“我们的开源软件”巡回展演等。在最近的“我们的开源软件”巡回展演中，参与介绍的开源软件多达几十种，参会人员众多，而这一切都是社区成员通过“微博”等方式发起和组织的。</p>
<p>这表明，开源软件即将在国内引起新一轮的发展浪潮。</p>
<h2 id="4-开源我的软件？"><a href="#4-开源我的软件？" class="headerlink" title="4 开源我的软件？"></a>4 开源我的软件？</h2><p>在高物价、高房价的今天，大部分人对此问题的第一反应是：“我就一刚解决温饱的码农，我开源，谁养我？”这问题，和我们在十年前推广开源软件理念时遇到的问题几乎一样。但其实，这话已经大大落后于时代了！我们不仅仅可以通过使用其他人的开源软件赚钱，还可以通过开源自己的软件来赚钱。</p>
<h3 id="4-1-别人靠开源软件如何赚钱？"><a href="#4-1-别人靠开源软件如何赚钱？" class="headerlink" title="4.1 别人靠开源软件如何赚钱？"></a>4.1 别人靠开源软件如何赚钱？</h3><p>在证明上述论点之前，我们先看看别人是如何利用开源软件赚钱的。靠开源软件赚钱的方式（经过验证的）无外乎有如下几种：</p>
<p><strong>双许可证模式</strong>。即在采取严格的开源软件许可证的同时（通常选择 GPL），给商业用户提供非 GPL 许可方式。这本质上是一种贩卖软件许可的行为，但开源软件带给开发者一个很大的好处，即传播迅速，快速迭代。笔者主持的 MiniGUI 项目就采用这种模式，在过去的五年当中，获得了几千万元的软件许可收费。当然，使用这个模式最成功的当属MySQL。</p>
<p><strong>基础软件采用宽松许可证，同时向基础软件的商业用户贩卖增值服务或者增强组件、开发工具等的许可。</strong> 这种模式可用于类似 RT-Thread 这类的基础性软件上，RT-Thread 本身可以是开源且可无偿商用的，但其上的各种增值组件，如网络、文件系统、图形系统等，可以是商业软件。国外采用这种模式的以各类 CMS 系统为主。比如 Drupal 和 Concrete 系统，其基本系统是开源且免费的，但其上的许多插件、主题、模版等是收费的。有兴趣的读者可访问 <a href="http://www.concrete5.org" target="_blank" rel="external">http://www.concrete5.org</a> 网站，其中还有“Marketplace（市场）”频道。</p>
<p><strong>混合模式，既贩卖工具等软件的许可，同时还向用户提供付费服务的模式。</strong> 比如 Ubuntu Linux 发行版。</p>
<p><strong>成为平台型软件，并承载自己的互联网业务</strong>。这种模式在大型互联网企业中应用广泛。比如谷歌开发并开源 Chrome 浏览器，短短几年抢占了微软的很多市场份额，通过在 Chrome 中默认使用谷歌搜索引擎而获得极大的收入；再比如谷歌开源 Android，一方面为了遏制苹果 iOS 的增长势头，一方面通过预置 Google 搜索而获得了大量来自移动互联网的流量收入。</p>
<p>显然，有了先驱们的成功案例，作为开源软件参与者，不论是企业还是个人，都可能名利双收。</p>
<h3 id="4-2-IT-企业为何要参与开源软件？"><a href="#4-2-IT-企业为何要参与开源软件？" class="headerlink" title="4.2 IT 企业为何要参与开源软件？"></a>4.2 IT 企业为何要参与开源软件？</h3><p>IT 行业中的企业，即使是销售硬件产品的企业，也在不停地开发各种软件，同时也大量使用各种开源软件。对这类企业，开源自己开发的软件其动力是什么？</p>
<p>作为企业，参与或者主导一个开源软件，其最为明显的动力应该是上述的第四个商业模式，即打造一个平台型软件。但是，就中国 IT 企业来讲，笔者尚未看到有此种实力，或者此种抱负的企业存在，毕竟，打造一个平台需要长期的投入，一般情况需要五年或者更长的时间。貌似中国没有一个企业有这个耐心来投入五年这么长的时间在一个软件上。</p>
<p>那么为什么企业还要参与到开源软件的开发中？笔者认为，谋不了大利就谋点小利，企业主导或参与开源软件，至少有如下几个好处：</p>
<p>提高企业的美誉度。在利用开源软件的同时，也参与到开源软件当中，企业的美誉度会得到很大的提升。</p>
<p>员工更有激情。因为自己的作品能够公之于众，虽然著作权本质上属于企业，但作为实际的编码者，可以通过开源自己的作品来获得额外的成就感和满足感。这对于稳定开发团队、提高开发人员的积极性会有很大的帮助。</p>
<p>当然，也许过不了几年，中国也能出现实践第四种商业模式的大型 IT 企业，让我们拭目以待吧！</p>
<h3 id="4-3-个人开发者如何利用开源软件获益？"><a href="#4-3-个人开发者如何利用开源软件获益？" class="headerlink" title="4.3 个人开发者如何利用开源软件获益？"></a>4.3 个人开发者如何利用开源软件获益？</h3><p>如果你是一名开源软件的开发者，打算利用自己的软件开创一家软件公司，该如何做？第一，我们要确定好自己的商业模式；第二，为自己的开源软件选择恰当的许可证。</p>
<p>如果决定选择双许可证模式，应选择 GPL 这样较为严格的许可证，这是这种商业模式能够成功的基础。当然，选择双许可证会阻碍产品在商业用户中的推广。尤其是对初生的开源软件来讲，显然是一种两难的境地。MiniGUI 之所以可以采用双许可证模式，是因为在成立公司之前和最初的一段时间内，MiniGUI 采取的是 LGPL 许可证，之后在软件足够成熟的时候才改为 GPL 许可证，另外，MiniGUI 用于功能手机等系统中时，因为这种设备一般使用实时操作系统，缺乏应用 LGPL/GPL 许可证的技术条件，所以面向这种设备收取许可费也是天经地义的事情。MySQL 采用双许可证模式得以成功的原因，在于 MySQL AB 公司并不会对仅仅用于WEB服务器的 MySQL 商用行为收费，因为这种情况下，商业用户并不会发布 MySQL 的副本——它只是在服务器上运行而已。</p>
<p>所以，看起来上面提到的第二种、第三种商业模式是最适合个人开发者或者初创公司的商业模式，能够很快的速度推广和迭代软件本身，还能够确保有足够的收入来保证下一步的发展。在这种模式下，应该选择较为宽松的许可证。但大部分开源软件作者，因为并不真正理解开源软件的许可证，所以采取了错误的许可证（指在法律上是错误的）。比如 RT-Thread，一方面采用 GPL V2 许可证，一方面又承诺不会对商业使用收费。这其实没有解决根本的法律问题，也就是，使用 RT-Thread 开发的衍生作品，到底要不要遵循 GPL？这个问题和是否收费没有直接关系。要解决这个问题，其实很简单，采用类似 Apache、BSD 或者 MIT 许可证即可。有读者会问，那为什么不能采用 LGPL 许可证？就 RT-Thread 这样的软件来讲，采用 LGPL 和 GPL 没有本质的区别，因为 RT-Thread 的应用场合下一般不支持函数库的动态链接，这导致失去了适用 LGPL 许可证的技术条件。</p>
<p>那么上面提到的最后一种模式，是否适用于个人开发者或者初创公司？笔者的答案是，这种模式是大公司的玩法，小团队或者小公司是没法做这类事情的。</p>
<p>当然，一家软件公司的成败所涉及因素很多，不仅仅取决于产品和服务等技术因素，也取决于很多其他的因素，比如大的市场环境、政策因素等等。因此，真正拿自己的开源软件经营一家企业的并不多，更多人开发开源软件，还是因为个人兴趣，以及对获得业界尊重和名望的驱使。</p>
<p>但真正能够获得业界尊重的开源软件开发者及其开源软件，其实也并不多。也就是说，要通过开发开源软件获得上面所说的“名”，需要开发者具有较高的开发水平和相关能力。这其中主要的能力有：</p>
<p><strong>好的选题</strong>。好的选题应该能够跟得上 IT 领域的前沿技术，最好避免重复造轮子的尴尬境地。</p>
<p><strong>较高水平的软件架构设计能力以及编码能力</strong>。既然开放了软件的源代码，那自然希望有人去看，并欣赏这些源代码。所以，拥有较高水平的软件架构设计能力、编码能力，是开源软件能够获得用户青睐的一大条件。<br>较高水平的文档能力。除了编码之外，要让你的开源软件得到大量的用户，你还需要能够编写漂亮的文档，起码要能够撰写很好的安装指导说明文件。</p>
<p><strong>适度的宣传能力</strong>。不论好坏，适当宣传自己的开源软件，是获得公众认知的一个良好方式。宣传并不意味着需要花钱，你可以参加各种开源会议，或者在微博上进行宣传，或者通过一些开源社区帮助你来宣传自己的作品。</p>
<p><strong>适度的坚持</strong>。好的软件是打磨出来的，如果仅仅靠一时兴趣弄个软件并开源，并没有持续改善，那肯定会半途而废。</p>
<p>当然，除了自己创作一个全新的开源软件之外，要获得上面所说的“名”，还有一个办法是加入到已有的知名开源软件的开发中，尤其是海外的知名开源软件开发中。你可以从帮助他们“汉化”软件开始，然后提交补丁，最后成为主要的开发者。</p>
<h2 id="5-大专院校应该成为开源软件的主力军"><a href="#5-大专院校应该成为开源软件的主力军" class="headerlink" title="5 大专院校应该成为开源软件的主力军"></a>5 大专院校应该成为开源软件的主力军</h2><p>一个有趣的现象是，很多开源软件其实就是作者在大专院校或者研究机构工作或学习时发起的，比如本文提到的三个国内早期的开源软件项目。甚至某些开源软件由特定的大学主持和维护，如 BSD 操作系统、PostgreSQL 关系数据库、Minix 操作系统等等。</p>
<p>从国际视角看，开源软件的发展离不开一些知名大学的参与，BSD 和 MIT 许可证分别由加州大学伯克利分校和麻省理工学院定义，并由两所大学在其众多开源软件中使用，也被其他开源软件广泛应用。值得一提的是，<strong>苹果公司 Mac 操作系统和 iOS 操作系统，均使用了加州大学伯克利分校开发的 BSD 操作系统内核。</strong></p>
<p>从现实情况看，国内在各大公司工作的程序员们，除非因为供职单位支持，否则很难独立发起和维护一个大型的开源软件，但在大专院校和科研机构工作的老师和学生，则有得天独厚的条件（主要是有大量的时间，并可能和科研课题和教学任务相结合）来发起和持续维护一个开源软件项目。清华大学陈渝副教授主持的 SkyEye 和 ucore 两个开源项目就是典型的案例。笔者希望国内有更多的大专院校和科研单位（尤其是教师）能够积极参与到开源软件的发展当中，并成为国内开源软件的主力军。</p>
<h2 id="6-政府和开源社区应该做什么？"><a href="#6-政府和开源社区应该做什么？" class="headerlink" title="6 政府和开源社区应该做什么？"></a>6 政府和开源社区应该做什么？</h2><p>说实话，笔者并不认为政府在开源软件的发展中应该起主导作用。政府要做的就是制定公平、合理的规则，促进相关法律法规的完善。</p>
<p>从法律上讲，你编写了一个程序，你就自动获得这个程序的软件著作权。在实际操作中，<strong>法律要求进行软件著作权的登记，就如同房产证一样，你非要有个政府颁发的证书才能得到法律的承认</strong>。我们暂且不论这个做法是否合理，也不论登记收费这事儿，你需要了解的是，在中国，如果你打算遵循 GPL 许可证开源你的软件，你就无法登记著作权！</p>
<p>当然，众所周知，中国的知识产权保护力度不够，不仅仅阻碍了软件产业的发展，也阻碍了开源软件的发展。</p>
<p>还有，在中国，要注册一家非公益性的 NGO 组织（国外各种软件基金会都是这类组织），是非常非常困难的。这导致截止今天，中国没有任何一家支持开源软件为己任的非营利性基金会组织。</p>
<p>政府所要做的，就是撤销那些违背历史发展大潮的法规和规定，并建立完善的知识产权保护制度，加强对盗版等的打击力度，教育国民尊重他人劳动成果，而不是仅仅停留在口头上。</p>
<p>政府，把上面这些问题解决好了，比直接参与推动开源软件什么的，要强许多倍！比如，加大知识产权的保护力度，一方面可以让商业软件在传统贩卖软件使用许可的商业模式下得到良性发展的机会，也可以让一部分人转向使用免费的开源软件，进而促进开源软件的发展。</p>
<p>当然，在现阶段，通过从财政中拿出来一些钱，设立一些奖励基金之类的东西，给开源软件的作者以一些奖励，也许是更有效的途径。</p>
<p>开源软件本就应该是以松散、自组织的形式开发和发展，开源社区的存在，为开源软件开发者和使用者提供赖以生存的土壤。开源社区可以是网站、论坛，也可以是松散的交流、展演等。当然，开源社区第一步要解决的问题就是自己的生存问题。</p>
<p>笔者的建议是，开源社区应该尝试在现有法律框架下，以有限责任公司的治理结构来做国外开源基金会所做的工作。通过这样一种方式，可以有效避免无法注册 NGO 组织的问题，然后从企业（尤其是那些大型互联网企业）当中募集捐款，通过赞助一些开源项目，逐步推进开源软件社区的良性发展。</p>
<p>另外，国内开源社区还需要从使用者社区转向开发者社区，为开发者参与开源软件提供便利，如建立类似 GitHub/SourceForge 那样的开源软件托管站点，为开源软件项目提供邮件列表、论坛、博客服务等等。</p>
<h2 id="7-结语——给那些仅仅使用开源软件但不做贡献的企业"><a href="#7-结语——给那些仅仅使用开源软件但不做贡献的企业" class="headerlink" title="7 结语——给那些仅仅使用开源软件但不做贡献的企业"></a>7 结语——给那些仅仅使用开源软件但不做贡献的企业</h2><p>将开源软件和商业结合，不管是在自己的项目中使用开源软件，还是靠自己的开源软件来赚钱，都无可厚非。关键是，我们需要 <strong>尊重开源软件著作权的拥有者，按照开源软件所采纳的许可证办事</strong>，只有这样，开源软件才能得到长足发展。</p>
<p>通常，开源软件的作者发布开源软件，是希望获得最多用户使用的，在此基础上，作者要么会获得业界的追捧而一夜成名，要么获得一定的商业利益。所以，从某种角度上讲，使用开源软件本身就是对开源软件的一种支持。</p>
<p>但是，这并不意味着你可以随意使用他人的开源软件。合法使用开源软件的前提，就是遵守开源软件的许可证规定的各种义务。</p>
<p>当然，更有积极意义的方式是，将使用开源软件中遇到的问题或者修正、增强代码提交给开源软件的作者，帮助其改善作品。其实，这是任何使用开源软件的企业都能做到的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：&lt;a href=&quot;http://www.fmsoft.cn/zhcn/about/blog/185/&quot;&gt;魏永明&lt;/a&gt;（飞漫软件CEO）。本文经章文嵩、陈渝审阅。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cms.csdnimg.cn/article/201306/21/51c411d5c48fa.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Program" scheme="http://ipcreator.me/categories/Program/"/>
    
    
      <category term="History" scheme="http://ipcreator.me/tags/History/"/>
    
      <category term="Open Source" scheme="http://ipcreator.me/tags/Open-Source/"/>
    
      <category term="China" scheme="http://ipcreator.me/tags/China/"/>
    
  </entry>
  
  <entry>
    <title>Solving Ways of Android Emulator&#39;s Sound Problem</title>
    <link href="http://ipcreator.me/2017/03/01/Program/Android/android-emulator-system-sound/"/>
    <id>http://ipcreator.me/2017/03/01/Program/Android/android-emulator-system-sound/</id>
    <published>2017-03-01T13:06:06.000Z</published>
    <updated>2017-03-27T10:04:47.035Z</updated>
    
    <content type="html"><![CDATA[<p> <img src="http://okkntqe2h.bkt.clouddn.com/volume.PNG" alt=""></p>
<p>用常识思维解决问题，既简单又快捷…有时候离解决方案只有一步之遥。</p>
 <a id="more"></a>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p> 系统配置：Acer Predator G9-593<br> AndroidStudio：2.2.3<br> AndroidSDK：更新到2017.03.01的最新版本<br> AndroidStudio一打开模拟器，正在播放的音乐音量瞬间变小<br> 程序员离开了音乐，就如烟鬼离开了烟，不解决不痛快</p>
<h2 id="常识思维"><a href="#常识思维" class="headerlink" title="常识思维"></a>常识思维</h2><p>Google一下，相关页面较少，表明这是个不常见的问题，另外，阅读他人给出的解决方案，譬如：重装AndroidStudio、SDK甚至Win10系统等，一看还就是“电脑出问题，不是重启就是关机后再开机”的老套路，不明所以又爱自以为是。</p>
<p>稍微有个靠谱的推荐解决方案，就是设置”系统检测到通讯活动存在时，自动降低音量“选项，但我尝试之后，结果仍是“鞋子虽好，但不适合我”。<br><img src="http://okkntqe2h.bkt.clouddn.com/way1.PNG" alt=""></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p> 自己动手，丰衣足食，既然是音量高低的问题，那就先到系统设置查找声音相关选项，按照自己的习惯，先遍历各个按钮和选项…等下，这不就是音量设置选项吗？拉大一点尝试一下，还不行，切换到杜比音效选项，发现处于关闭状态，打开尝试一下，OK…“你知不知道，我等到花儿也谢了…”歌神的歌声又开始飘扬了…<br> <img src="http://okkntqe2h.bkt.clouddn.com/way2-1.PNG" alt=""></p>
<p>   <img src="http://okkntqe2h.bkt.clouddn.com/way2-2.PNG" alt=""></p>
<p><strong>注意一个坑，要选中“Speakers”，Properties按钮才可用</strong></p>
<blockquote>
<p>不要怕点怕设置，要敢于尝试，大不了再恢复默认设置嘛…从电脑和手机，从系统到应用，一般都支持恢复默认选项，如果你开发的软件还不支持该功能，建议还是尽快纳入TODO List…</p>
</blockquote>
<p><img src="http://okkntqe2h.bkt.clouddn.com/dolby.PNG" alt=""></p>
<p>其实，音量设置的总开关在Volume Mixer，可以自由设定…<br> <img src="http://okkntqe2h.bkt.clouddn.com/volume.PNG" alt=""></p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p> Google上找到了一样的解决方案…又一个GG远胜于BD的例子<br> <img src="http://okkntqe2h.bkt.clouddn.com/Another%20problem.PNG" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/volume.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;用常识思维解决问题，既简单又快捷…有时候离解决方案只有一步之遥。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Emulator" scheme="http://ipcreator.me/tags/Emulator/"/>
    
  </entry>
  
  <entry>
    <title>Android Safety Battle——Anti-Compilation and Proguard</title>
    <link href="http://ipcreator.me/2017/02/27/Program/Android/awesome-articles-of-android/"/>
    <id>http://ipcreator.me/2017/02/27/Program/Android/awesome-articles-of-android/</id>
    <published>2017-02-27T05:57:06.000Z</published>
    <updated>2017-03-27T07:52:13.708Z</updated>
    
    <content type="html"><![CDATA[<p> <a href="http://blog.csdn.net/guolin_blog/article/details/49738023" target="_blank" rel="external">Android安全攻防战，反编译与混淆技术完全解析（上）</a><br> <a href="http://blog.csdn.net/guolin_blog/article/details/50451259" target="_blank" rel="external"> Android安全攻防战，反编译与混淆技术完全解析（下）</a></p>
<p> <img src="http://img.blog.csdn.net/20160312190016290" alt=""></p>
<p> 之前一直有犹豫过要不要写这篇文章，毕竟去反编译人家的程序并不是什么值得骄傲的事情。不过单纯从技术角度上来讲，掌握反编译功能确实是一项非常有用的技能，可能平常不太会用得到，但是一旦真的需要用到的了，而你却不会的话，那就非常头疼了。另外既然别人可以反编译程序，我们当然有理由应该对程序进行一定程度的保护，因此代码混淆也是我们必须要掌握的一项技术。那么最近的两篇文章我们就围绕反编译和混淆这两个主题来进行一次完全解析。</p>
 <a id="more"></a>
<h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p>我们都知道，Android程序打完包之后得到的是一个APK文件，这个文件是可以直接安装到任何Android手机上的，我们反编译其实也就是对这个APK文件进行反编译。Android的反编译主要又分为两个部分，一个是对代码的反编译，一个是对资源的反编译，我们马上来逐个学习一下。</p>
<p>在开始学习之前，首先我们需要准备一个APK文件，为了尊重所有开发者，我就不拿任何一个市面上的软件来演示了，而是自己写一个Demo用来测试。</p>
<p>这里我希望代码越简单越好，因此我们建立一个新项目，在Activity里加入一个按钮，当点击按钮时弹出一个Toast，就这么简单，代码如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Button button = (Button) findViewById(R.id.button);</div><div class="line">        button.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                Toast.makeText(MainActivity.this, &quot;you clicked button&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>activity_main.xml中的资源如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;RelativeLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:paddingBottom=&quot;@dimen/activity_vertical_margin&quot;</div><div class="line">    android:paddingLeft=&quot;@dimen/activity_horizontal_margin&quot;</div><div class="line">    android:paddingRight=&quot;@dimen/activity_horizontal_margin&quot;</div><div class="line">    android:paddingTop=&quot;@dimen/activity_vertical_margin&quot;&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/button&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;Button&quot;/&gt;</div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure></p>
<p>然后我们将代码打成一个APK包，并命名成Demo.apk，再把它安装到手机上，结果如下所示：<br><img src="http://img.blog.csdn.net/20160204142511216" alt=""></p>
<p>好的，到这里准备工作就已经基本完成了，接下来就让我们开始对这个Demo程序进行反编译吧。</p>
<h2 id="反编译代码"><a href="#反编译代码" class="headerlink" title="反编译代码"></a>反编译代码</h2><p>要想将APK文件中的代码反编译出来，我们需要用到以下两款工具：</p>
<p><strong>dex2jar</strong> 这个工具用于将dex文件转换成jar文件<br>下载地址：<a href="http://sourceforge.net/projects/dex2jar/files/" target="_blank" rel="external">http://sourceforge.net/projects/dex2jar/files/</a><br><strong>jd-gui</strong> 这个工具用于将jar文件转换成java代码<br>下载地址：<a href="http://jd.benow.ca/" target="_blank" rel="external">http://jd.benow.ca/</a><br>将这两个工具都下载好并解压，然后我们就开始对Demo程序进行反编译。解压dex2jar压缩包后，你会发现有很多个文件，如下图所示：<br><img src="http://img.blog.csdn.net/20160204153609614" alt=""></p>
<p>其中我们要用到的是d2j-dex2jar.bat这个文件，当然如果你是linux或mac系统的话就要用d2j-dex2jar.sh这个文件。<br>然后我们将Demo.apk文件也进行解压，如果不知道怎么直接解压的可以先将文件重命名成Demo.zip，然后用解压软件打开。解压之后你会发现里面有一个classes.dex文件，如下图所示：<br><img src="http://img.blog.csdn.net/20160204160337530" alt=""></p>
<p>这个classes.dex文件就是存放所有java代码的地方了，我们将它拷贝到dex2jar解压后的目录下，并在cmd中也进入到同样的目录，然后执行：</p>
<blockquote>
<p>d2j-dex2jar classes.dex</p>
</blockquote>
<p>执行结果如下图所示：<br><img src="http://img.blog.csdn.net/20160204160725801" alt=""></p>
<p>没有报任何错误，这就说明我们已经转换成功了。现在观察dex2jar目录，你会发现多了一个文件，如下图所示：<br><img src="http://img.blog.csdn.net/20160204161831426" alt=""></p>
<p>可以看到，classes-dex2jar.jar这个文件就是我们借助工具之后成功转换出来的jar文件了。但是对于我们而言，jar文件也不是可读的，因此这里还需要再借助一下jd-gui这个工具来将jar文件转换成java代码。<br>下面就很简单了，使用jd-gui工具打开classes-dex2jar.jar这个文件，结果如下图所示：<br><img src="http://img.blog.csdn.net/20160204162548914" alt=""></p>
<p>OK，由此可见，我们的代码反编译工作已经成功了，MainActivity中的代码非常清晰，基本已经做到了90%以上的还原工作。但是如果想要做到100%的代码还原还是非常有难度的，因为像setContentView()方法传入的参数，其实就是一个资源的id值而已，那么这里反编译也就只能将相应的id值进行还原，而无法变成像R.layout.activity_main这样直观的代码展示。<br>另外，除了MainActivity之外，还有很多其它的代码也被反编译出来了，因为当前项目有引用support-v4和support-v7的包，这些引用的library也会作为代码的一部分被打包到classes.dex文件当中，因此反编译的时候这些代码也会一起被还原。<br>好的，学完了反编译代码，接下来我们看一下如何反编译资源。</p>
<h2 id="反编译资源"><a href="#反编译资源" class="headerlink" title="反编译资源"></a>反编译资源</h2><p>其实细心的朋友可能已经观察到了，刚才Demo.apk的解压目录当中不是已经有资源文件了吗，有AndroidManifest.xml文件，也有res目录。进入res目录当中，内容如下图所示：<br><img src="http://img.blog.csdn.net/20160205114006588" alt=""></p>
<p>这不是所有资源文件都在这里了么？其实这些资源文件都是在打包的时候被编译过了，我们直接打开的话是看不到明文的，不信的话我们打开AndroidManifest.xml文件来瞧一瞧，内容如下图所示：<br><img src="http://img.blog.csdn.net/20160205114422374" alt=""></p>
<p>可以看到，这代码是完全没法阅读的。当然如果你去打开activity_main.xml看看，结果也不会好到哪儿去：<br><img src="http://img.blog.csdn.net/20160205114648290" alt=""></p>
<p>由此可见，直接对APK包进行解压是无法得到它的原始资源文件的，因此我们还需要对资源进行反编译才行。<br>要想将APK文件中的资源反编译出来，又要用到另外一个工具了：<br><strong>apktool</strong> 这个工具用于最大幅度地还原APK文件中的9-patch图片、布局、字符串等等一系列的资源。<br>下载地址：<a href="http://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="external">http://ibotpeaches.github.io/Apktool/install/</a><br>关于这个工具的下载我还要再补充几句，我们需要的就是apktool.bat和apktool.jar这两个文件。目前apktool.jar的最新版本是2.0.3，这里我就下载最新的了，然后将apktool_2.0.3.jar重命名成apktool.jar，并将它们放到同一个文件夹下就可以了，如下图所示：<br><img src="http://img.blog.csdn.net/20160205125449076" alt=""></p>
<p>接下来的工作就很简单了，我们将Demo.apk拷贝到和这两个文件同样的目录当中，然后cmd也进入到这个目录下，并在cmd中执行如下命令：</p>
<blockquote>
<p>apktool d Demo.apk</p>
</blockquote>
<p>其中d是decode的意思，表示我们要对Demo.apk这个文件进行解码。那除了这个基本用法之外，我们还可以再加上一些附加参数来控制decode的更多行为：</p>
<p>-f 如果目标文件夹已存在，则强制删除现有文件夹（默认如果目标文件夹已存在，则解码失败）。<br>-o 指定解码目标文件夹的名称（默认使用APK文件的名字来命名目标文件夹）。<br>-s 不反编译dex文件，也就是说classes.dex文件会被保留（默认会将dex文件解码成smali文件）。<br>-r 不反编译资源文件，也就是说resources.arsc文件会被保留（默认会将resources.arsc解码成具体的资源文件）。<br>常用用法就这么多了，那么上述命令的执行结果如下图所示：<br><img src="http://img.blog.csdn.net/20160205130623698" alt=""></p>
<p>这就说明反编译资源已经成功了。<br>当然即使你在和我执行一模一样的操作，也有可能会在这里反编译失败，比如说会报如下错误：<br><img src="http://img.blog.csdn.net/20160205131116809" alt=""></p>
<p>出现这个错误的原因很有可能是你之前使用过apktool的老版本进行过反编译操作，然后apktool就会在你系统的C:\Users\Administrator\apktool\framework这个目录下生成一个名字为1.apk的缓存文件，将这个缓存文件删除掉，然后再重新执行反编译命令应该就可以成功了。<br>现在你会发现在当前目录下多了一个Demo文件夹，这个文件夹中存放的就是反编译的结果了。我们可以打开AndroidManifest.xml来瞧一瞧，如下图所示：<br><img src="http://img.blog.csdn.net/20160205184526870" alt=""></p>
<p>怎么样？这样就完全能看得懂了吧，然后可以再到res/layout中看一下activity_main.xml文件，如下图所示：<br><img src="http://img.blog.csdn.net/20160205185353442" alt=""></p>
<p>可以看到，activity_main.xml中的内容基本和源代码中的内容是一致的，外层是一个RelativeLayout，里面则是一个Button。你可以再到其它目录中去看一看别的资源，基本上都是可以正常还原的，这样我们就把反编译资源的方法也已经掌握了。</p>
<h2 id="重新打包"><a href="#重新打包" class="headerlink" title="重新打包"></a>重新打包</h2><p>那么对于反编译出来的文件夹，我们能不能重新把它打包成APK文件呢？答案是肯定的，只不过我实在想不出有什么义正言辞的理由可以让我们这么做。有的人会说汉化，没错，汉化的方式确实就是将一个APK进行反编译，然后翻译其中的资源再重新打包，但是不管怎么说这仍然是将别人的程序进行破解，所以我并不认为这是什么光荣的事情。那么我们就不去讨论本身这件事情的对或错，这里只是站在技术的角度来学习一下重新打包的相关知识。<br>首先我们来看一下通过apktool反编译后的包目录情况，如下图所示：<br><img src="http://img.blog.csdn.net/20160208234027946" alt=""></p>
<p>其中，original文件夹下存放的是未经反编译过、原始的AndroidManifest.xml文件，res文件夹下存放的是反编译出来的所有资源，smali文件夹下存放的是反编译出来的所有代码，AndroidManifest.xml则是经过反编译还原后的manifest文件。这里值得一提的是smali文件夹，如果你进入到这个文件夹中你会发现它的目录结构和我们源码中src的目录结构是几乎一样的，主要的区别就是所有的java文件都变成了smali文件。<strong>smali文件其实也是真正的源代码，只不过它的语法和java完全不同，它有点类似于汇编的语法，是Android虚拟机所使用的寄存器语言</strong>，语法结构大概如下所示：<br><img src="http://img.blog.csdn.net/20160208235859750" alt=""></p>
<p>看上去有点晕头转向是吗？但是如果你一旦能够看得懂smali文件的话，那么你就可以做很恐怖的事情了——你可以随意修改应用程序内的逻辑，将其进行破解！<br>不过我对这种黑技术并没有什么太大的兴趣，因此我也没有去做具体研究，但即使是这样，也已经可以对程序的逻辑做一定程度的修改了。比如说当我们点击按钮时会弹出you clicked button这样一句Toast，逻辑是写在MainActivity按钮点击事件的匿名类当中的，因此这段代码反编译之后一定就会在MainActivity$1.smali这个文件当中，让我们打开瞧一瞧，部分代码如下所示：<br><img src="http://img.blog.csdn.net/20160209154620278" alt=""></p>
<p>虽说多数的代码我是看不懂的，但其中第47行实在太明显了，Toast显示的内容不就是在这里定义的么，那么如果我们想把Demo程序hack掉，就可以将这段字符串给改掉，比如说我把它改成Your app is been hacked。<br>关于smali的语法，网上的资料也非常多，如果你对这门技术十分感兴趣的话可以直接上网去搜，这里我只是简单介绍一下，就不再深入讲解相关知识了。<br>改了一处代码后我们再来改一处资源吧，比如这里想要把Demo的应用图标给换掉，那么首先我们要准备好一张新的图片，如下图所示：<br><img src="http://img.blog.csdn.net/20160209161422695" alt=""><br>然后从AndroidManifest.xml文件中可以看出，应用图标使用的是ic_launcher.png这张图片，那么我们将上面篮球这张图片命名成ic_launcher.png，然后拷贝到所有以res/mipmap开头的文件夹当中完成替换操作。<br>在做了两处改动之后，我们现在来把反编译后的Demo文件夹重新打包成APK吧，其实非常简单，只需要在cmd中执行如下命令：</p>
<blockquote>
<p>apktool b Demo -o New_Demo.apk</p>
</blockquote>
<p>其中b是build的意思，表示我们要将Demo文件夹打包成APK文件，-o用于指定新生成的APK文件名，这里新的文件叫作New_Demo.apk。执行结果如下图所示：<br><img src="http://img.blog.csdn.net/20160209163551554" alt=""></p>
<p>现在你会发现在同级目录下面生成了一个新的APK文件：<br><img src="http://img.blog.csdn.net/20160209175505785" alt=""></p>
<p>不过不要高兴得太早了，目前这个New_Demo.apk还是不能安装的，因为它还没有进行签名。那么如果这是别人的程序的话，我们从哪儿能拿到它原来的签名文件呢？很显然，这是根本没有办法拿到的，因此我们只能拿自己的签名文件来对这个APK文件重新进行签名，但同时也表明我们重新打包出来的软件就是个十足的盗版软件。这里大家学学技术就好了，希望不要有任何人去做什么坏事情。<br>那么这里我就用一个之前生成好的签名文件了，使用Android Studio或者Eclipse都可以非常简单地生成一个签名文件。<br>有了签名文件之后在cmd中执行签名命令就可以进行签名了，命令格式如下：</p>
<blockquote>
<p>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore 签名文件名 -storepass 签名密码 待签名的APK文件名 签名的别名</p>
</blockquote>
<p>其中jarsigner命令文件是存放在jdk的bin目录下的，需要将bin目录配置在系统的环境变量当中才可以在任何位置执行此命令。<br>签名之后的APK文件现在已经可以安装到手机上了，不过在此之前Android还极度建议我们对签名后的APK文件进行一次对齐操作，因为这样可以使得我们的程序在Android系统中运行得更快。对齐操作使用的是zipalign工具，该工具存放于<android sdk="">/build-tools/<version>目录下，将这个目录配置到系统环境变量当中就可以在任何位置执行此命令了。命令格式如下：</version></android></p>
<blockquote>
<p>zipalign 4 New_Demo.apk New_Demo_aligned.apk</p>
</blockquote>
<p>其中4是固定值不能改变，后面指定待对齐的APK文件名和对齐后的APK文件名。运行这段命令之后就会生成一个New_Demo_aligned.apk文件，如下所示：<br><img src="http://img.blog.csdn.net/20160209175645990" alt=""></p>
<p>这个New_Demo_aligned.apk就是我们重新打包签名对齐后的文件了，现在把它安装到手机上，效果如下图所示：<br><img src="http://img.blog.csdn.net/20160212105044897" alt=""></p>
<p>可以看到，应用图标已经成功改成了篮球，另外点击按钮后弹出的Toast的提示也变成了我们修改后的文字，说明重新打包操作确实已经成功了。<br>好的，我们把反编译代码、反编译资源、重新打包这三大主题的内容都已经掌握了，关于反编译相关的内容就到这里，下篇文章会介绍Android代码混淆方面的相关技术，感兴趣的朋友请继续阅读： Android安全攻防战，反编译与混淆技术完全解析（下） 。</p>
<p>在上一篇文章当中，我们学习了Android程序反编译方面的知识，包括反编译代码、反编译资源、以及重新打包等内容。通过这些内容我们也能看出来，其实我们的程序并没有那么的安全。可能资源被反编译影响还不是很大，重新打包又由于有签名的保护导致很难被盗版，但代码被反编译就有可能会泄漏核心技术了，因此一款安全性高的程序最起码要做到的一件事就是：对代码进行混淆。</p>
<p>混淆代码并不是让代码无法被反编译，而是将代码中的类、方法、变量等信息进行重命名，把它们改成一些毫无意义的名字。因为对于我们而言可能Cellphone类的call()方法意味着很多信息，而A类的b()方法则没有任何意义，但是对于计算机而言，它们都是平等的，计算机不会试图去理解Cellphone是什么意思，它只会按照设定好的逻辑来去执行这些代码。所以说混淆代码可以在不影响程序正常运行的前提下让破解者很头疼，从而大大提升了程序的安全性。</p>
<p>今天是我们Android安全攻防战系列的下篇，本篇文章的内容建立在上篇的基础之上，还没有阅读过的朋友可以先去参考 <a href="http://blog.csdn.net/guolin_blog/article/details/49738023" target="_blank" rel="external">Android安全攻防战，反编译与混淆技术完全解析（上）</a> 。</p>
<p>混淆</p>
<p>本篇文章中介绍的混淆技术都是基于Android Studio的，Eclipse的用法也基本类似，但是就不再为Eclipse专门做讲解了。</p>
<p>我们要建立一个Android Studio项目，并在项目中添加一些能够帮助我们理解混淆知识的代码。这里我准备好了一些，我们将它们添加到Android Studio当中。</p>
<p>首先新建一个MyFragment类，代码如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class MyFragment extends Fragment &#123;</div><div class="line"></div><div class="line">    private String toastTip = &quot;toast in MyFragment&quot;;</div><div class="line"></div><div class="line">    @Nullable</div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_layout, container, false);</div><div class="line">        methodWithGlobalVariable();</div><div class="line">        methodWithLocalVariable();</div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void methodWithGlobalVariable() &#123;</div><div class="line">        Toast.makeText(getActivity(), toastTip, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void methodWithLocalVariable() &#123;</div><div class="line">        String logMessage = &quot;log in MyFragment&quot;;</div><div class="line">        logMessage = logMessage.toLowerCase();</div><div class="line">        System.out.println(logMessage);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，MyFragment是继承自Fragment的，并且MyFragment中有一个全局变量。onCreateView()方法是Fragment的生命周期函数，这个不用多说，在onCreateView()方法中又调用了methodWithGlobalVariable()和methodWithLocalVariable()方法，这两个方法的内部分别引用了一个全局变量和一个局部变量。</p>
<p>接下来新建一个Utils类，代码如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Utils &#123;</div><div class="line"></div><div class="line">    public void methodNormal() &#123;</div><div class="line">        String logMessage = &quot;this is normal method&quot;;</div><div class="line">        logMessage = logMessage.toLowerCase();</div><div class="line">        System.out.println(logMessage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void methodUnused() &#123;</div><div class="line">        String logMessage = &quot;this is unused method&quot;;</div><div class="line">        logMessage = logMessage.toLowerCase();</div><div class="line">        System.out.println(logMessage);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是一个非常普通的工具类，没有任何继承关系。Utils中有两个方法methodNormal()和methodUnused()，它们的内部逻辑都是一样的，唯一的据别是稍后methodNormal()方法会被调用，而methodUnused()方法不会被调用。</p>
<p>下面再新建一个NativeUtils类，代码如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class NativeUtils &#123;</div><div class="line"></div><div class="line">    public static native void methodNative();</div><div class="line"></div><div class="line">    public static void methodNotNative() &#123;</div><div class="line">        String logMessage = &quot;this is not native method&quot;;</div><div class="line">        logMessage = logMessage.toLowerCase();</div><div class="line">        System.out.println(logMessage);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个类中同样有两个方法，一个是native方法，一个是非native方法。<br>最后，修改MainActivity中的代码，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private String toastTip = &quot;toast in MainActivity&quot;;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        getSupportFragmentManager().beginTransaction().add(R.id.fragment, new MyFragment()).commit();</div><div class="line">        Button button = (Button) findViewById(R.id.button);</div><div class="line">        button.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                methodWithGlobalVariable();</div><div class="line">                methodWithLocalVariable();</div><div class="line">                Utils utils = new Utils();</div><div class="line">                utils.methodNormal();</div><div class="line">                NativeUtils.methodNative();</div><div class="line">                NativeUtils.methodNotNative();</div><div class="line">                Connector.getDatabase();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void methodWithGlobalVariable() &#123;</div><div class="line">        Toast.makeText(MainActivity.this, toastTip, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void methodWithLocalVariable() &#123;</div><div class="line">        String logMessage = &quot;log in MainActivity&quot;;</div><div class="line">        logMessage = logMessage.toLowerCase();</div><div class="line">        System.out.println(logMessage);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，MainActivity和MyFragment类似，也是定义了methodWithGlobalVariable()和methodWithLocalVariable()这两个方法，然后MainActivity对MyFragment进行了添加，并在Button的点击事件里面调用了自身的、Utils的、以及NativeUtils中的方法。注意调用native方法需要有相应的so库实现，不然的话就会报UnsatisefiedLinkError，不过这里其实我也并没有真正的so库实现，只是演示一下让大家看看混淆结果。点击事件的最后一行调用的是LitePal中的方法，因为我们还要测试一下引用第三方Jar包的场景，到LitePal项目的主页去下载最新的Jar包，然后放到libs目录下即可。</p>
<p>完整的build.gradle内容如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.application&apos;</div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion 23</div><div class="line">    buildToolsVersion &quot;23.0.2&quot;</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId &quot;com.example.guolin.androidtest&quot;</div><div class="line">        minSdkVersion 15</div><div class="line">        targetSdkVersion 23</div><div class="line">        versionCode 1</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</div><div class="line">    compile &apos;com.android.support:appcompat-v7:23.2.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好的，到这里准备工作就已经基本完成了，接下来我们就开始对代码进行混淆吧。</p>
<h2 id="混淆APK"><a href="#混淆APK" class="headerlink" title="混淆APK"></a>混淆APK</h2><p>在Android Studio当中混淆APK实在是太简单了，借助SDK中自带的Proguard工具，只需要修改build.gradle中的一行配置即可。可以看到，现在build.gradle中minifyEnabled的值是false，这里我们只需要把值改成true，打出来的APK包就会是混淆过的了。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">release &#123;</div><div class="line">    minifyEnabled true</div><div class="line">    proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中minifyEnabled用于设置是否启用混淆，proguardFiles用于选定混淆配置文件。注意这里是在release闭包内进行配置的，因此只有打出正式版的APK才会进行混淆，Debug版的APK是不会混淆的。当然这也是非常合理的，因为Debug版的APK文件我们只会用来内部测试，不用担心被人破解。<br>那么现在我们来打一个正式版的APK文件，在Android Studio导航栏中点击Build-&gt;Generate Signed APK，然后选择签名文件并输入密码，如果没有签名文件就创建一个，最终点击Finish完成打包，生成的APK文件会自动存放在app目录下。除此之外也可以在build.gradle文件当中添加签名文件配置，然后通过gradlew assembleRelease来打出一个正式版的APK文件，这种方式APK文件会自动存放在app/build/outputs/apk目录下。<br>那么现在已经得到了APK文件，接下来就用上篇文章中学到的反编译知识来对这个文件进行反编译吧，结果如下图所示：<br><img src="http://img.blog.csdn.net/20160307204433418" alt=""></p>
<p>很明显可以看出，我们的代码混淆功能已经生效了。</p>
<p>下面我们尝试来阅读一下这个混淆过后的代码，最顶层的包名结构主要分为三部分，第一个a.a已经被混淆的面目全非了，但是可以猜测出这个包下是LitePal的所有代码。第二个android.support可以猜测出是我们引用的android support库的代码，第三个com.example.guolin.androidtest则很明显就是我们项目的主包名了，下面将里面所有的类一个个打开看一下。<br>首先MainActivity中的代码如下所示：<br><img src="http://img.blog.csdn.net/20160307210746838" alt=""></p>
<p>可以看到，MainActivity的类名是没有混淆的，onCreate()方法也没有被混淆，但是我们定义的方法、全局变量、局部变量都被混淆了。<br>再来打开下一个类NativeUtils，如下所示：<br><img src="http://img.blog.csdn.net/20160307211556583" alt=""></p>
<p>NativeUtils的类名没有被混淆，其中声明成native的方法也没有被混淆，但是非native方法的方法名和局部变量都被混淆了。<br>接下来是a类的代码，如下所示：<br><img src="http://img.blog.csdn.net/20160307211929322" alt=""></p>
<p>很明显，这个是MainActivity中按钮点击事件的匿名类，在onClick()方法中的调用代码虽然都被混淆了，但是调用顺序是不会改变的，对照源代码就可以看出哪一行是调用的什么方法了。<br>再接下来是b类，代码如下所示：<br><img src="http://img.blog.csdn.net/20160307212322827" alt=""></p>
<p>虽然被混淆的很严重，但是我们还是可以看出这个是MyFragment类。其中所有的方法名、全局变量、局部变量都被混淆了。<br>最后再来看下c类，代码如下所示：<br><img src="http://img.blog.csdn.net/20160307212639769" alt=""></p>
<p>c类中只有一个a方法，从字符串的内容我们可以看出，这个是Utils类中的methodNormal()方法。</p>
<p>我为什么要创建这样的一个项目呢？因为从这几个类当中很能看出一些问题，接下来我们就分析一下上面的混淆结果。</p>
<p>首先像Utils这样的普通类肯定是会被混淆的，不管是类名、方法名还是变量都不会放过。除了混淆之外Utils类还说明了一个问题，就是minifyEnabled会对资源进行压缩，因为Utils类中我们明明定义了两个方法，但是反编译之后就只剩一个方法了，因为另外一个方法没有被调用，所以认为是多余的代码，在打包的时候就给移除掉了。不仅仅是代码，没有被调用的资源同样也会被移除掉，因此minifyEnabled除了混淆代码之外，还可以起到压缩APK包的作用。</p>
<p>接着看一下MyFragment，这个类也是混淆的比较彻底的，基本没有任何保留。那有些朋友可能会有疑问，Fragment怎么说也算是系统组件吧，就算普通方法名被混淆了，至少像onCreateView()这样的生命周期方法不应该被混淆吧？其实生命周期方法会不会被混淆和我们使用Fragment的方式有关，比如在本项目中，我使用的是android.support.v4.app.Fragment，support-v4包下的，就连Fragment的源码都被一起混淆了，因此生命周期方法当然也不例外了。但如果你使用的是android.app.Fragment，这就是调用手机系统中预编译好的代码了，很明显我们的混淆无法影响到系统内置的代码，因此这种情况下onCreateView()方法名就不会被混淆，但其它的方法以及变量仍然会被混淆。</p>
<p>接下来看一下MainActivity，同样也是系统组件之一，但MainActivity的保留程度就比MyFragment好多了，至少像类名、生命周期方法名都没有被混淆，这是为什么呢？根据我亲身测试得出结论，凡是需要在AndroidManifest.xml中去注册的所有类的类名以及从父类重写的方法名都自动不会被混淆。因此，除了Activity之外，这份规则同样也适用于Service、BroadcastReceiver和ContentProvider。</p>
<p>最后看一下NativeUtils类，这个类的类名也没有被混淆，这是由于它有一个声明成native的方法。只要一个类中有存在native方法，它的类名就不会被混淆，native方法的方法名也不会被混淆，因为C++代码要通过包名+类名+方法名来进行交互。 但是类中的别的代码还是会被混淆的。</p>
<p>除此之外，第三方的Jar包都是会被混淆的，LitePal不管是包名还是类名还是方法名都被完完全全混淆掉了。</p>
<p>这些就是Android Studio打正式APK时默认的混淆规则。</p>
<p>那么这些混淆规则是在哪里定义的呢？其实就是刚才在build.gradle的release闭包下配置的proguard-android.txt文件，这个文件存放于<android sdk="">/tools/proguard目录下，我们打开来看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"># This is a configuration file for ProGuard.</div><div class="line"># http://proguard.sourceforge.net/index.html#manual/usage.html</div><div class="line"></div><div class="line">-dontusemixedcaseclassnames</div><div class="line">-dontskipnonpubliclibraryclasses</div><div class="line">-verbose</div><div class="line"></div><div class="line"># Optimization is turned off by default. Dex does not like code run</div><div class="line"># through the ProGuard optimize and preverify steps (and performs some</div><div class="line"># of these optimizations on its own).</div><div class="line">-dontoptimize</div><div class="line">-dontpreverify</div><div class="line"># Note that if you want to enable optimization, you cannot just</div><div class="line"># include optimization flags in your own project configuration file;</div><div class="line"># instead you will need to point to the</div><div class="line"># &quot;proguard-android-optimize.txt&quot; file instead of this one from your</div><div class="line"># project.properties file.</div><div class="line"></div><div class="line">-keepattributes *Annotation*</div><div class="line">-keep public class com.google.vending.licensing.ILicensingService</div><div class="line">-keep public class com.android.vending.licensing.ILicensingService</div><div class="line"></div><div class="line"># For native methods, see http://proguard.sourceforge.net/manual/examples.html#native</div><div class="line">-keepclasseswithmembernames class * &#123;</div><div class="line">    native &lt;methods&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># keep setters in Views so that animations can still work.</div><div class="line"># see http://proguard.sourceforge.net/manual/examples.html#beans</div><div class="line">-keepclassmembers public class * extends android.view.View &#123;</div><div class="line">   void set*(***);</div><div class="line">   *** get*();</div><div class="line">&#125;</div><div class="line"></div><div class="line"># We want to keep methods in Activity that could be used in the XML attribute onClick</div><div class="line">-keepclassmembers class * extends android.app.Activity &#123;</div><div class="line">   public void *(android.view.View);</div><div class="line">&#125;</div><div class="line"></div><div class="line"># For enumeration classes, see http://proguard.sourceforge.net/manual/examples.html#enumerations</div><div class="line">-keepclassmembers enum * &#123;</div><div class="line">    public static **[] values();</div><div class="line">    public static ** valueOf(java.lang.String);</div><div class="line">&#125;</div><div class="line"></div><div class="line">-keepclassmembers class * implements android.os.Parcelable &#123;</div><div class="line">  public static final android.os.Parcelable$Creator CREATOR;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-keepclassmembers class **.R$* &#123;</div><div class="line">    public static &lt;fields&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># The support library contains references to newer platform versions.</div><div class="line"># Dont warn about those in case this app is linking against an older</div><div class="line"># platform version.  We know about them, and they are safe.</div><div class="line">-dontwarn android.support.**</div></pre></td></tr></table></figure></android></p>
<p>这个就是默认的混淆配置文件了，我们来一起逐行阅读一下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">-dontusemixedcaseclassnames 表示混淆时不使用大小写混合类名。</div><div class="line">-dontskipnonpubliclibraryclasses 表示不跳过library中的非public的类。</div><div class="line">-verbose 表示打印混淆的详细信息。</div><div class="line">-dontoptimize 表示不进行优化，建议使用此选项，因为根据proguard-android-optimize.txt中的描述，优化可能会造成一些潜在风险，不能保证在所有版本的Dalvik上都正常运行。</div><div class="line">-dontpreverify 表示不进行预校验。这个预校验是作用在Java平台上的，Android平台上不需要这项功能，去掉之后还可以加快混淆速度。</div><div class="line">-keepattributes *Annotation* 表示对注解中的参数进行保留。</div><div class="line"></div><div class="line">-keep public class com.google.vending.licensing.ILicensingService</div><div class="line">-keep public class com.android.vending.licensing.ILicensingService</div><div class="line"></div><div class="line">表示不混淆上述声明的两个类，这两个类我们基本也用不上，是接入Google原生的一些服务时使用的。</div><div class="line"></div><div class="line">-keepclasseswithmembernames class * &#123;</div><div class="line">    native &lt;methods&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">表示不混淆任何包含native方法的类的类名以及native方法名，这个和我们刚才验证的结果是一致的。</div><div class="line"></div><div class="line">-keepclassmembers public class * extends android.view.View &#123;</div><div class="line">   void set*(***);</div><div class="line">   *** get*();</div><div class="line">&#125;</div><div class="line"></div><div class="line">表示不混淆任何一个View中的setXxx()和getXxx()方法，因为属性动画需要有相应的setter和getter的方法实现，混淆了就无法工作了。</div><div class="line"></div><div class="line">-keepclassmembers class * extends android.app.Activity &#123;</div><div class="line">   public void *(android.view.View);</div><div class="line">&#125;</div><div class="line"></div><div class="line">表示不混淆Activity中参数是View的方法，因为有这样一种用法，在XML中配置android:onClick=”buttonClick”属性，当用户点击该按钮时就会调用Activity中的buttonClick(View view)方法，如果这个方法被混淆的话就找不到了。</div><div class="line"></div><div class="line">-keepclassmembers enum * &#123;</div><div class="line">    public static **[] values();</div><div class="line">    public static ** valueOf(java.lang.String);</div><div class="line">&#125;</div><div class="line"></div><div class="line">表示不混淆枚举中的values()和valueOf()方法，枚举我用的非常少，这个就不评论了。</div><div class="line"></div><div class="line">-keepclassmembers class * implements android.os.Parcelable &#123;</div><div class="line">  public static final android.os.Parcelable$Creator CREATOR;</div><div class="line">&#125;</div><div class="line"></div><div class="line">表示不混淆Parcelable实现类中的CREATOR字段，毫无疑问，CREATOR字段是绝对不能改变的，包括大小写都不能变，不然整个Parcelable工作机制都会失败。</div><div class="line"></div><div class="line">-keepclassmembers class **.R$* &#123;</div><div class="line">    public static &lt;fields&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">表示不混淆R文件中的所有静态字段，我们都知道R文件是通过字段来记录每个资源的id的，字段名要是被混淆了，id也就找不着了。</div><div class="line">-dontwarn android.support.** 表示对android.support包下的代码不警告，因为support包中有很多代码都是在高版本中使用的，如果我们的项目指定的版本比较低在打包时就会给予警告。不过support包中所有的代码都在版本兼容性上做足了判断，因此不用担心代码会出问题，所以直接忽略警告就可以了。</div></pre></td></tr></table></figure>
<p>好了，这就是proguard-android.txt文件中所有默认的配置，而我们混淆代码也是按照这些配置的规则来进行混淆的。经过我上面的讲解之后，相信大家对这些配置的内容基本都能理解了。不过proguard语法中还真有几处非常难理解的地方，我自己也是研究了好久才搞明白，下面和大家分享一下这些难懂的语法部分。</p>
<p>proguard中一共有三组六个keep关键字，很多人搞不清楚它们的区别，这里我们通过一个表格来直观地看下：</p>
<p>关键字    描述<br>keep    保留类和类中的成员，防止它们被混淆或移除。<br>keepnames    保留类和类中的成员，防止它们被混淆，但当成员没有被引用时会被移除。<br>keepclassmembers    只保留类中的成员，防止它们被混淆或移除。<br>keepclassmembernames    只保留类中的成员，防止它们被混淆，但当成员没有被引用时会被移除。<br>keepclasseswithmembers    保留类和类中的成员，防止它们被混淆或移除，前提是指名的类中的成员必须存在，如果不存在则还是会混淆。<br>keepclasseswithmembernames    保留类和类中的成员，防止它们被混淆，但当成员没有被引用时会被移除，前提是指名的类中的成员必须存在，如果不存在则还是会混淆。</p>
<p>除此之外，proguard中的通配符也比较让人难懂，proguard-android.txt中就使用到了很多通配符，我们来看一下它们之间的区别：</p>
<p>通配符    描述</p>
<p><field>    匹配类中的所有字段</field></p>
<p><method>    匹配类中的所有方法</method></p>
<p><init>    匹配类中的所有构造函数</init></p>
<ul>
<li>匹配任意长度字符，但不含包名分隔符(.)。比如说我们的完整类名是com.example.test.MyActivity，使用com.<em>，或者com.exmaple.</em>都是无法匹配的，因为<em>无法匹配包名中的分隔符，正确的匹配方式是com.exmaple.</em>.<em>，或者com.exmaple.test.</em>，这些都是可以的。但如果你不写任何其它内容，只有一个<em>，那就表示匹配所有的东西。<br><strong>    匹配任意长度字符，并且包含包名分隔符(.)。比如proguard-android.txt中使用的-dontwarn android.support.</strong>就可以匹配android.support包下的所有内容，包括任意长度的子包。<br>**</em>    匹配任意参数类型。比如void set<em>(**</em>)就能匹配任意传入的参数类型，<em>** get</em>()就能匹配任意返回值的类型。<br>…    匹配任意长度的任意类型参数。比如void test(…)就能匹配任意void test(String a)或者是void test(int a, String b)这些方法。</li>
</ul>
<p>虽说上面表格已经解释的很详细了，但是很多人对于keep和keepclasseswithmembers这两个关键字的区别还是搞不懂。确实，它们之间用法有点太像了，我做了很多次试验它们的结果都是相同的。其实唯一的区别就在于类中声明的成员存不存在，我们还是通过一个例子来直接地看一下，先看keepclasseswithmember关键字：</p>
<p>-keepclasseswithmember class * {<br>    native <methods>;<br>}</methods></p>
<p>这段代码的意思其实很明显，就是保留所有含有native方法的类的类名和native方法名，而如果某个类中没有含有native方法，那就还是会被混淆。</p>
<p>但是如果改成keep关键字，结果会完全不一样：</p>
<p>-keep class * {<br>    native <methods>;<br>}</methods></p>
<p>使用keep关键字后，你会发现代码中所有类的类名都不会被混淆了，因为keep关键字看到class *就认为应该将所有类名进行保留，而不会关心该类中是否含有native方法。当然这样写只会保证类名不会被混淆，类中的成员还是会被混淆的。</p>
<p>比较难懂的用法大概就这些吧，掌握了这些内容之后我们就能继续前进了。</p>
<p>回到Android Studio项目当中，刚才打出的APK虽然已经成功混淆了，但是混淆的规则都是按照proguard-android.txt中默认的规则来的，当然我们也可以修改proguard-android.txt中的规则，但是直接在proguard-android.txt中修改会对我们本机上所有项目的混淆规则都生效，那么有没有什么办法只针对当前项目的混淆规则做修改呢？当然是有办法的了，你会发现任何一个Android Studio项目在app模块目录下都有一个proguard-rules.pro文件，这个文件就是用于让我们编写只适用于当前项目的混淆规则的，那么接下来我们就利用刚才学到的所有知识来对混淆规则做修改吧。</p>
<p>这里我们先列出来要实现的目标：</p>
<p>对MyFragment类进行完全保留，不混淆其类名、方法名、以及变量名。<br>对Utils类中的未调用方法进行保留，防止其被移除掉。<br>对第三方库进行保留，不混淆android-support库，以及LitePal库中的代码。</p>
<p>下面我们就来逐一实现这些目标。<br>首先要对MyFragment类进行完全保留可以使用keep关键字，keep后声明完整的类名，然后保留类中的所有内容可以使用*通配符实现，如下所示：</p>
<p>-keep class com.example.guolin.androidtest.MyFragment {<br>    *;<br>}</p>
<p>然后保留Utils类中的未调用方法可以使用keepclassmembers关键字，后跟Utils完整类名，然后在内部声明未调用的方法，如下所示：</p>
<p>-keepclassmembers class com.example.guolin.androidtest.Utils {<br>    public void methodUnused();<br>}</p>
<p>最后不要混淆第三方库，目前我们使用了两种方式来引入第三方库，一种是通过本地jar包引入的，一种是通过remote引入的，其实这两种方式没什么区别，要保留代码都可以使用**这种通配符来实现，如下所示：</p>
<p>-keep class org.litepal.<em>* {
    </em>;<br>}</p>
<p>-keep class android.support.<em>* {
    </em>;<br>}</p>
<p>所有内容都在这里了，现在我们重新打一个正式版的APK文件，然后再反编译看看效果：<br><img src="http://img.blog.csdn.net/20160309225842296" alt=""></p>
<p>可以看到，现在android-support包中所有代码都被保留下来了，不管是包名、类名、还是方法名都没有被混淆。LitePal中的代码也是同样的情况：<br><img src="http://img.blog.csdn.net/20160309230132784" alt=""></p>
<p>再来看下MyFragment中的代码，如下所示：<br><img src="http://img.blog.csdn.net/20160309230332887" alt=""></p>
<p>可以看到，MyFragment中的代码也没有被混淆，按照我们的要求被完全保留下来了。<br>最后再来看一下Utils类中的代码：<br><img src="http://img.blog.csdn.net/20160309230528216" alt=""></p>
<p>很明显，Utils类并没有被完全保留下来，类名还是被混淆了，methodNormal()方法也被混淆了，但是methodUnused()没有被混淆，当然也没有被移除，因为我们的混淆配置生效了。</p>
<p>经过这些例子的演示，相信大家已经对Proguard的用法有了相当不错的理解了，那么根据自己的业务需求来去编写混淆配置相信也不是什么难事了吧？</p>
<p>Progaurd的使用非常灵活，基本上能够覆盖你所能想到的所有业务逻辑。这里再举个例子，之前一直有人问我使用LitePal时的混淆配置怎么写，其实真的很简单，LitePal作为开源库并不需要混淆，上面的配置已经演示了如何不混淆LitePal代码，然后所有代码中的Model是需要进行反射的，也不能混淆，那么只需要这样写就行了：<br>-keep class <em> extends org.litepal.crud.DataSupport {
    </em>;<br>}</p>
<p>因为LitePal中所有的Model都是应该继承DataSupport类的，所以这里我们将所有继承自DataSupport的类都进行保留就可以了。<br>关于混淆APK的用法就讲这么多，如果你还想继续了解关于Proguard的更多用法，可以参考官方文档：<a href="http://proguard.sourceforge.net/index.html#manual/usage.html" target="_blank" rel="external">http://proguard.sourceforge.net/index.html#manual/usage.html</a></p>
<h2 id="混淆Jar"><a href="#混淆Jar" class="headerlink" title="混淆Jar"></a>混淆Jar</h2><p>在本篇文章的第二部分我想讲一讲混淆Jar包的内容，因为APK不一定是我们交付的唯一产品。就比如说我自己，我在公司是负责写SDK的，对于我来说交付出去的产品就是Jar包，而如果Jar包不混淆的话将会很容易就被别人反编译出来，从而泄漏程序逻辑。</p>
<p>实际上Android对混淆Jar包的支持在很早之前就有了，不管你使用多老版本的SDK，都能在 <android sdk="">/tools目录下找到proguard这个文件夹。然后打开里面的bin目录，你会看到如下文件：<br><img src="http://img.blog.csdn.net/20160310231053316" alt=""></android></p>
<p>其中proguardgui.bat文件是允许我们以图形化的方式来对Jar包进行混淆的一个工具，今天我们就来讲解一下这个工具的用法。<br>在开始讲解这个工具之前，首先我们需要先准备一个Jar包，当然你从哪里搞到一个Jar包都是可以的，不过这里为了和刚才的混淆逻辑统一，我们就把本篇文章中的项目代码打成一个Jar包吧。<br>Eclipse中导出Jar包的方法非常简单，相信所有人都会，可是Android Studio当中就比较让人头疼了，因为Android Studio并没有提供一个专门用于导出Jar包的工具，因此我们只能自己动手了。<br>我们需要知道，任何一个Android Studio项目，只要编译成功之后就会在项目模块的build/intermediates/classes/debug目录下生成代码编译过后的class文件，因此只需通过打包命令将这些class文件打包成Jar包就行了，打开cmd，切换到项目的根目录，然后输入如下命令：</p>
<blockquote>
<p>jar -cvf androidtest.jar -C app/build/intermediates/classes/debug .</p>
</blockquote>
<p>在项目的根目录下就会生成androidtest.jar这个文件，这样我们就把Jar包准备好了。<br>现在双击proguardgui.bat打开混淆工具，如果是Mac或Ubuntu系统则使用sh proguardgui.sh命令打开混淆工具，界面如下图所示：<br><img src="http://img.blog.csdn.net/20160312190016290" alt=""></p>
<p>其实从主界面上我们就能看出，这个Proguard工具支持Shrinking、Optimization、Obfuscation、Preverification四项操作，在左侧的侧边栏上也能看到相应的这些选项。Proguard的工作机制仍然还是要依赖于配置文件，当然我们也可以通过proguardgui工具来生成配置文件，不过由于配置选项太多了，每个都去一一设置太复杂，而且大多数还都是我们用不到的配置。因此最简单的方式就是直接拿现有的配置文件，然后再做些修改就行了。<br>那么我们从<android sdk="">/tools/proguard目录下将proguard-android.txt文件复制一份出来，然后点击主界面上的Load configuration按钮来加载复制出来的这份proguard-android.txt文件，完成后点击Next将进入Input/Output界面。<br>Input/Output界面是用于导入要混淆的Jar包、配置混淆后文件的输出路径、以及导入该Jar包所依赖的所有其它Jar包的。我们要混淆的当然就是androidtest.jar这个文件，那么这个Jar包又依赖了哪些Jar包呢？这里就需要整理一下了。<br>首先我们写的都是Java代码，Java代码的运行要基于Jre基础之上，没有Jre计算机将无法识别Java的语法，因此第一个要依赖的就是Jre的rt.jar。<br>然后由于我们导出的Jar包中有Android相关的代码，比如Activity、Fragment等，因此还需要添加Android的编译库，android.jar。<br>除此之外，我们使用的AppCompatActivity和Fragment分别来自于appcompat-v7包和support-v4包，那么这两个Jar包也是需要引入的。<br>最后就是代码中还引入了litepal-1.3.1.jar。<br>整理清楚了之后我们就来一个个添加，Input/Output有上下两个操作界面，上面是用于导入要混淆的Jar包和配置混淆后文件的输出路径的，下面则是导入该Jar包所依赖的所有其它Jar包的，全部导入后结果如下图所示：<br><img src="http://img.blog.csdn.net/20160312201710712" alt=""></android></p>
<p>这些依赖的Jar包所存在的路径每台电脑都不一样，你所需要做的就是在你自己的电脑上成功找到这些依赖的Jar包并导入即可。<br>不过细心的朋友可能会发现，我在上面整理出了五个依赖的Jar包，但是在图中却添加了六个。这是我在写这篇文章时碰到的一个新的坑，也是定位了好久才解决的，我觉得有必要重点提一下。由于我平时混淆Jar包时里面很少会有Activity，所以没遇到过这个问题，但是本篇文章中的演示Jar包中不仅包含了Activty，还是继承自AppCompatActivity的。而AppCompatActivity的继承结构并不简单，如下图所示：<br><img src="http://img.blog.csdn.net/20160312204407738" alt=""></p>
<p>其中AppCompatActivity是在appcompat-v7包中的，它的父类FragmentActivity是在support-v4包中的，这两个包我们都已经添加依赖了。但是FragmentActivity的父类就坑爹了，如果你去看BaseFragmentActivityHoneycomb和BaseFragmentActivityDonut这两个类的源码，你会发现它们都是在support-v4包中的：<br><img src="http://img.blog.csdn.net/20160312205140269" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160312205157303" alt=""></p>
<p>可是如果你去support-v4的Jar包中找一下，你会发现压根就没有这两个类，所以我当时一直混淆报错就是因为这两个类不存在，继承结构在这里断掉了。而这两个类其实被规整到了另外一个internal的Jar包中，所以当你要混淆的Jar包中有Activity，并且还是继承自AppCompatActivity或FragmentActivity的话，那么就一定要记得导入这个internal Jar包的依赖，如下图所示：<br><img src="http://img.blog.csdn.net/20160312210100619" alt=""></p>
<p>接下来点击Next进入Shrink界面，这个界面没什么需要配置的东西，但记得要将Shrink选项钩掉，因为我们这个Jar包是独立存在的，没有任何项目引用，如果钩中Shrink选项的话就会认为我们所有的代码都是无用的，从而把所有代码全压缩掉，导出一个空的Jar包。<br>继续点击Next进入Obfuscation界面，在这里可以添加一些混淆的逻辑，和混淆APK时不同的是，这里并不会自动帮我们排除混淆四大组件，因此必须要手动声明一下才行。点击最下方的Add按钮，然后在弹出的界面上编写排除逻辑，如下图所示：<br><img src="http://img.blog.csdn.net/20160312220931102" alt=""></p>
<p>很简单，就是在继承那一栏写上android.app.Activity就行了，其它的组件原理也相同。<br>继续点击Next进入Optimiazation界面，不用修改任何东西，因为我们本身就不启用Optimization功能。继续点击Next进入Information界面，也不用修改任何东西，因为我们也不启用Preverification功能。<br>接着点击Next，进入Process界面，在这里可以通过点击View configuration按钮来预览一下目前我们的混淆配置文件，内容如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">-injars /Users/guolin/AndroidStudioProjects/AndroidTest/androidtest.jar</div><div class="line">-outjars /Users/guolin/androidtest_obfuscated.jar</div><div class="line"></div><div class="line">-libraryjars /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home/jre/lib/rt.jar</div><div class="line">-libraryjars /Users/guolin/Library/Android/sdk/platforms/android-23/android.jar</div><div class="line">-libraryjars /Users/guolin/AndroidStudioProjects/AndroidTest/app/build/intermediates/exploded-aar/com.android.support/appcompat-v7/23.2.0/jars/classes.jar</div><div class="line">-libraryjars /Users/guolin/AndroidStudioProjects/AndroidTest/app/build/intermediates/exploded-aar/com.android.support/support-v4/23.2.0/jars/classes.jar</div><div class="line">-libraryjars /Users/guolin/AndroidStudioProjects/AndroidTest/app/build/intermediates/exploded-aar/com.android.support/support-v4/23.2.0/jars/libs/internal_impl-23.2.0.jar</div><div class="line">-libraryjars /Users/guolin/AndroidStudioProjects/AndroidTest/app/libs/litepal-1.3.1.jar</div><div class="line"></div><div class="line">-dontshrink</div><div class="line">-dontoptimize</div><div class="line">-dontusemixedcaseclassnames</div><div class="line">-keepattributes *Annotation*</div><div class="line">-dontpreverify</div><div class="line">-verbose</div><div class="line">-dontwarn android.support.**</div><div class="line"></div><div class="line"></div><div class="line">-keep public class com.google.vending.licensing.ILicensingService</div><div class="line"></div><div class="line">-keep public class com.android.vending.licensing.ILicensingService</div><div class="line"></div><div class="line"># keep setters in Views so that animations can still work.</div><div class="line"># see http://proguard.sourceforge.net/manual/examples.html#beans</div><div class="line">-keepclassmembers public class * extends android.view.View &#123;</div><div class="line">    void set*(***);</div><div class="line">    *** get*();</div><div class="line">&#125;</div><div class="line"></div><div class="line"># We want to keep methods in Activity that could be used in the XML attribute onClick</div><div class="line">-keepclassmembers class * extends android.app.Activity &#123;</div><div class="line">    public void *(android.view.View);</div><div class="line">&#125;</div><div class="line"></div><div class="line">-keepclassmembers class * extends android.os.Parcelable &#123;</div><div class="line">    public static final android.os.Parcelable$Creator CREATOR;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-keepclassmembers class **.R$* &#123;</div><div class="line">    public static &lt;fields&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-keep class * extends android.app.Activity</div><div class="line"></div><div class="line">-keep class * extends android.app.Service</div><div class="line"></div><div class="line">-keep class * extends android.content.BroadcastReceiver</div><div class="line"></div><div class="line">-keep class * extends android.content.ContentProvider</div><div class="line"></div><div class="line"># Also keep - Enumerations. Keep the special static methods that are required in</div><div class="line"># enumeration classes.</div><div class="line">-keepclassmembers enum  * &#123;</div><div class="line">    public static **[] values();</div><div class="line">    public static ** valueOf(java.lang.String);</div><div class="line">&#125;</div><div class="line"></div><div class="line"># Keep names - Native method names. Keep all native class/method names.</div><div class="line">-keepclasseswithmembers,allowshrinking class * &#123;</div><div class="line">    native &lt;methods&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>恩，由此可见其实GUI工具只是给我们提供了一个方便操作的平台，背后工作的原理还是通过这些配置来实现的，相信上面的配置内容大家应该都能看得懂了吧。<br>接下来我们还可以点击Save configuration按钮来保存一下当前的配置文件，这样下次混淆的时候就可以直接Load进来而不用修改任何东西了。<br>最后点击Process!按钮来开始混淆处理，中间会提示一大堆的Note信息，我们不用理会，只要看到最终显示Processing completed successfully，就说明混淆Jar包已经成功了，如下图所示：<br><img src="http://img.blog.csdn.net/20160312223044035" alt=""></p>
<p>混淆后的文件我将它配置在了/Users/guolin/androidtest_obfuscated.jar这里，如果反编译一下这个文件，你会发现和刚才反编译APK得到的结果是差不多的：MainActivity的类名以及从父类继承的方法名不会被混淆，NativeUtils的类名和其中的native方法名不会被混淆，Utils的methodUnsed方法不会被移除，因为我们禁用了Shrink功能，其余的代码都会被混淆。由于结果实在是太相似了，我就不再贴图了，参考本篇文章第一部分的截图即可。</p>
<p>好了，本篇文章的内容就到这里，混淆技术掌握这么多相信已经足够大家在平时的工作当中使用了。当然除了使用混淆之外，还有一些加固软件也能提升程序的安全性，不过这些软件都是第三方的，并非Google原生支持，所以我就不进行讲解和推荐了。那么我们Android安全攻防战系列的文章到此结束，感谢大家有耐心看到最后。</p>
<p>关注我的技术公众号，每天都有优质技术文章推送。关注我的娱乐公众号，工作、学习累了的时候放松一下自己。</p>
<p>微信扫一扫下方二维码即可关注：<br><img src="http://img.blog.csdn.net/20160507110203928" alt=""><br><img src="http://img.blog.csdn.net/20161011100137978" alt="">         </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/49738023&quot;&gt;Android安全攻防战，反编译与混淆技术完全解析（上）&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/50451259&quot;&gt; Android安全攻防战，反编译与混淆技术完全解析（下）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20160312190016290&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 之前一直有犹豫过要不要写这篇文章，毕竟去反编译人家的程序并不是什么值得骄傲的事情。不过单纯从技术角度上来讲，掌握反编译功能确实是一项非常有用的技能，可能平常不太会用得到，但是一旦真的需要用到的了，而你却不会的话，那就非常头疼了。另外既然别人可以反编译程序，我们当然有理由应该对程序进行一定程度的保护，因此代码混淆也是我们必须要掌握的一项技术。那么最近的两篇文章我们就围绕反编译和混淆这两个主题来进行一次完全解析。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Anti-Compilation" scheme="http://ipcreator.me/tags/Anti-Compilation/"/>
    
      <category term="Proguard" scheme="http://ipcreator.me/tags/Proguard/"/>
    
  </entry>
  
</feed>
