<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>For life</title>
  <subtitle>Growing up is the only password.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ipcreator.me/"/>
  <updated>2017-04-11T11:43:48.101Z</updated>
  <id>http://ipcreator.me/</id>
  
  <author>
    <name>IPCreator</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Domain Names of Blog</title>
    <link href="http://ipcreator.me/2017/04/11/MyView/Original/domain-name/"/>
    <id>http://ipcreator.me/2017/04/11/MyView/Original/domain-name/</id>
    <published>2017-04-11T11:43:18.000Z</published>
    <updated>2017-04-11T11:43:48.101Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/2017-04-11_192447.jpg" alt=""></p>
<blockquote>
<p>Short, Unforgettable, Meaningful</p>
</blockquote>
<ol>
<li>ipcreator.me</li>
<li>ipcreator.org</li>
<li>deepcreator.com</li>
<li>smartai.me</li>
</ol>
<a id="more"></a>
<h2 id="Step-One-Own-your-Web-Space"><a href="#Step-One-Own-your-Web-Space" class="headerlink" title="Step One: Own your Web Space"></a>Step One: Own your Web Space</h2><p>save your content , such as imges, articles etc<br><img src="http://okkntqe2h.bkt.clouddn.com/2017-04-11_190009.jpg" alt=""></p>
<h2 id="Step-Two-Buy-a-Domain-Name"><a href="#Step-Two-Buy-a-Domain-Name" class="headerlink" title="Step Two: Buy a Domain Name"></a>Step Two: Buy a Domain Name</h2><p>by Goddy or Wan Wang</p>
<h2 id="Step-Three-Link-your-web-space-and-your-domain-name"><a href="#Step-Three-Link-your-web-space-and-your-domain-name" class="headerlink" title="Step Three: Link your web space and your domain name"></a>Step Three: Link your web space and your domain name</h2><h3 id="Domain-Name-Server"><a href="#Domain-Name-Server" class="headerlink" title="Domain Name Server"></a>Domain Name Server</h3><p>Set your domain name point to your space web</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ ping ipcreator.github.io</div><div class="line"></div><div class="line">Pinging github.<span class="built_in">map</span>.fastly.net [<span class="number">151.101</span><span class="number">.72</span><span class="number">.133</span>] with <span class="number">32</span> bytes of data:</div><div class="line">Reply from <span class="number">151.101</span><span class="number">.72</span><span class="number">.133</span>: bytes=<span class="number">32</span> time=<span class="number">177</span>ms TTL=<span class="number">51</span></div><div class="line">Reply from <span class="number">151.101</span><span class="number">.72</span><span class="number">.133</span>: bytes=<span class="number">32</span> time=<span class="number">177</span>ms TTL=<span class="number">51</span></div><div class="line">Reply from <span class="number">151.101</span><span class="number">.72</span><span class="number">.133</span>: bytes=<span class="number">32</span> time=<span class="number">176</span>ms TTL=<span class="number">51</span></div><div class="line">Reply from <span class="number">151.101</span><span class="number">.72</span><span class="number">.133</span>: bytes=<span class="number">32</span> time=<span class="number">177</span>ms TTL=<span class="number">51</span></div><div class="line"></div><div class="line">Ping statistics <span class="keyword">for</span> <span class="number">151.101</span><span class="number">.72</span><span class="number">.133</span>:</div><div class="line">    Packets: Sent = <span class="number">4</span>, Received = <span class="number">4</span>, Lost = <span class="number">0</span> (<span class="number">0</span>% loss),</div><div class="line">Approximate round trip times in milli-seconds:</div><div class="line">    Minimum = <span class="number">176</span>ms, Maximum = <span class="number">177</span>ms, Average = <span class="number">176</span>ms</div></pre></td></tr></table></figure>
<p><img src="http://okkntqe2h.bkt.clouddn.com/2017-04-11_190337.jpg" alt=""></p>
<h3 id="Web-Space-Server"><a href="#Web-Space-Server" class="headerlink" title="Web Space Server"></a>Web Space Server</h3><p>Set your CNAME file<br><img src="http://okkntqe2h.bkt.clouddn.com/2017-04-11_190108.jpg" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://www.jianshu.com/p/169aa8765b3f" target="_blank" rel="external">手把手，静态博客搭起来！！从未这么细过（GitHub Pages + Hexo）</a><br>[2]<a href="http://xiaopingblog.cn/2016/04/08/untitled-1460084538799/" target="_blank" rel="external">我的博客是如何搭建的（github pages + HEXO + 域名绑定）</a><br>[3]<a href="http://www.imooc.com/article/3423" target="_blank" rel="external">如何使用10个小时搭建出个人域名而又Geek的独立博客？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/2017-04-11_192447.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Short, Unforgettable, Meaningful&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;ipcreator.me&lt;/li&gt;
&lt;li&gt;ipcreator.org&lt;/li&gt;
&lt;li&gt;deepcreator.com&lt;/li&gt;
&lt;li&gt;smartai.me&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
      <category term="Domain Name" scheme="http://ipcreator.me/tags/Domain-Name/"/>
    
  </entry>
  
  <entry>
    <title>Meta Skill——Deliberate Practice</title>
    <link href="http://ipcreator.me/2017/04/11/Meta%20Skill/meta-skill-deliberately-practice/"/>
    <id>http://ipcreator.me/2017/04/11/Meta Skill/meta-skill-deliberately-practice/</id>
    <published>2017-04-11T00:29:06.000Z</published>
    <updated>2017-04-11T02:03:51.830Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/DeliberatePractice.png" alt=""></p>
<blockquote>
<p>Accumulation is powerful.<br>More Skills, More Weapons, More Ways<br>Deliberate Practice makes perfect</p>
</blockquote>
<ol>
<li>Designed to Improve Performance.</li>
<li>Repeated a Lot.</li>
<li><strong>Feedback</strong> Continuously Available.</li>
<li>Mentally Hightly Demanding.</li>
<li>Not Much Fun.</li>
</ol>
<blockquote>
<p>Concept –&gt; Framework –&gt;System –&gt; Application –&gt; Innovation</p>
</blockquote>
<p><strong>With the upgrading of skills, rhythm and feeling are getting better and better</strong></p>
<a id="more"></a>
<h2 id="Update-Concept"><a href="#Update-Concept" class="headerlink" title="Update Concept"></a>Update Concept</h2><ol>
<li>Avoid wrong ways of growing up.</li>
<li>Improve quality of your life.</li>
</ol>
<h2 id="Deep-Thinking"><a href="#Deep-Thinking" class="headerlink" title="Deep Thinking"></a>Deep Thinking</h2><ol>
<li>Keep attention focused  on Goal.</li>
<li>Relax and control yourself.</li>
<li>Train your brain.</li>
<li>Improve your deep sleep.</li>
<li>Excercise of mental faculties is as important as bodily Excercise.</li>
</ol>
<h2 id="Deep-Reading"><a href="#Deep-Reading" class="headerlink" title="Deep Reading"></a>Deep Reading</h2><ol>
<li>Read word by word</li>
<li>.Less is more.</li>
<li>Slow is quick.</li>
<li>Practice , practice ,practice.</li>
</ol>
<h3 id="Deliberate-Reading"><a href="#Deliberate-Reading" class="headerlink" title="Deliberate Reading"></a><a href="http://zhibimo.com/read/xiaolai/everyone-can-use-english/chapter7.html" target="_blank" rel="external">Deliberate Reading</a></h3><h2 id="Using-English"><a href="#Using-English" class="headerlink" title="Using English"></a>Using English</h2><ol>
<li>Master a powerful meta skill.</li>
<li>One more word, one more sentence.</li>
</ol>
<h2 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h2><ol>
<li>Realize your Innovative Thinking</li>
<li>Maxmize your valuable skills.</li>
</ol>
<h2 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h2><ol>
<li>Insist on Writing Blog.</li>
<li>Summarizing daily.</li>
<li>Reorganize and optimize by review.</li>
</ol>
<h2 id="Walking"><a href="#Walking" class="headerlink" title="Walking"></a>Walking</h2><ol>
<li>Keep completing ten thousand steps every day.</li>
<li>It is not only physical training, but also a way of strengthening willpower.</li>
</ol>
<h2 id="Investment"><a href="#Investment" class="headerlink" title="Investment"></a>Investment</h2><ol>
<li>To get the most out of money, you have to invest.</li>
<li>For capital, money should be sentenced to  life imprisonment.</li>
<li>In long term, Invest  the growing up  of yourself is the best way.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/DeliberatePractice.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Accumulation is powerful.&lt;br&gt;More Skills, More Weapons, More Ways&lt;br&gt;Deliberate Practice makes perfect&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Designed to Improve Performance.&lt;/li&gt;
&lt;li&gt;Repeated a Lot.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feedback&lt;/strong&gt; Continuously Available.&lt;/li&gt;
&lt;li&gt;Mentally Hightly Demanding.&lt;/li&gt;
&lt;li&gt;Not Much Fun.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Concept –&amp;gt; Framework –&amp;gt;System –&amp;gt; Application –&amp;gt; Innovation&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;With the upgrading of skills, rhythm and feeling are getting better and better&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Meta Skill" scheme="http://ipcreator.me/tags/Meta-Skill/"/>
    
      <category term="Deliberate Practice" scheme="http://ipcreator.me/tags/Deliberate-Practice/"/>
    
  </entry>
  
  <entry>
    <title>Basic Concept of English——Grammar</title>
    <link href="http://ipcreator.me/2017/04/11/English/basic-concept-of-grammar/"/>
    <id>http://ipcreator.me/2017/04/11/English/basic-concept-of-grammar/</id>
    <published>2017-04-11T00:27:10.000Z</published>
    <updated>2017-04-11T03:48:02.077Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/grammar.jpg" alt=""></p>
<blockquote>
<p>Grammar is the rules of English.<br>No grammar , no sentence.</p>
</blockquote>
<p>要了解语法的本质。本质上来看，语法并不是“规定你应该怎么说”，而是“尽量”“系统地”解释“人们为什么普遍这么说”。所以，不能把语法规则当作数学公式，语法规则并不保证按照它拼凑出来的句子一定有意义并且正确。</p>
<a id="more"></a>
<p>学英语或者干脆直接用英语没有什么捷径，但肯定有窍门。重要的窍门之一就是保持耐心。这么说太笼统。重要的是，凭什么保持耐心呢？凭了解，透彻的了解。刚刚提到语法的本质只是解释“人们为什么普遍这么说”，如此看来，就真没有什么理由去“背”语法规则了；应该做的是去尝试着<strong>“理解”语法规则</strong>，理解了，就等于记住了。采用“理解”这个动作的人，显然比采用“背”这个动作的人更容易拥有耐心。再比如，了解到语法不过是“<strong>尽量地系统化了的有例外的规则之集合</strong>”，就更容易保持耐心了。不再会觉得那些例外可恨了，只觉得那些例外只是自然存在的而已。不再为语法书的体系而感到困惑了，而是清楚能做到这样“颇有体系”已经非常不容易了。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a><a href="http://zhibimo.com/read/xiaolai/everyone-can-use-english/chapter6.html" target="_blank" rel="external">语法</a></h2><p>短视其实是人类的本性，所以，我们总是不由自主地被它所左右。人们学骑自行车比学语法快，并不仅仅是因为语法更为复杂，还可能更是因为骑自行车很快就能学会，而后就可以马上体会到各种便捷；而学习语法不仅单调枯燥、耗时费力，而且最要命的是总是觉得“不知道学它究竟有什么用？”这个问题，是很多人放弃学习的根本原因——我在《把时间当作朋友》里有详尽的论述。</p>
<p>多少本科毕业生（甚至包括相当部分的研究生、博士）走入社会之后，竟然写不出一份像样的租房合同，或者竟然不能够完全读懂自己所签写的雇佣协议。很多人听人讲话、读人文章之后常常断章取义，其实并非出自故意，只不过是文字理解水平太差乃至于经常“听不到”、“看不到”一些重要内容而已。不妨想像一下，绝大多数人（这个比例绝对会超过99%）无论多么认真地写一篇文稿，无论自己反复修改过多少次，能够正式出版之前，拿到编辑手里之后“一字都不需改动”的可能性几乎是零——更可能的存在着一些有意无意的错别字、或隐蔽或明显的语法错误、自以为是的表达等等，往往需要另外一个人反复推敲才行。很多人忽视母语的修炼，像鸵鸟遇到危险时只顾着把头埋起来一样一头扎到英语学习中去，其实不见得是有意而为之，更深层次的原因很可能仅仅是对自己母语水平的错误估计。</p>
<p>调查表明，在任何文化中，人们最为恐惧的第一件事儿是死亡，而紧随其后的就是当众讲话。不过，能够意识到自己的语法差还算是清醒的，绝大多数人把自己的糟糕表现归咎于诸如心理素质不好、发挥太差、准备不充分之类听起来相对“冠冕堂皇”得多的理由，而回避自己在两个最重要的方面彻底不及格的事实：语法和思维能力。为了能够有效表达，就算是林肯不也老老实实地去钻研了好几年的语法才放心大胆参加竞选的么？</p>
<h3 id="语法书的结构和查询方法"><a href="#语法书的结构和查询方法" class="headerlink" title="语法书的结构和查询方法"></a>语法书的结构和查询方法</h3><p>读语法书还是有一点点方法的。很多人搞不定语法的原因只不过是因为心太急。总想一下子把一本语法书翻完，结果欲速不仅不达，并且还永远停滞不前。拿来一本语法书，应该先把它想象成地图。你见过谁买来一张地图之后闷头坐在那里把那地图的每一个角落都看上一遍之后直接把那地图背下来？绝大多数人又不是训练有素的特种兵，一生都无必要那么做。</p>
<p>拿来一张地图的时候，我们已经知道个大概：那地图是上北下南左西右东，什么样的线条是公路，什么样的线条是地铁，什么样的标志是公交站……我们有这样的常识，是因为过去看过一些地图。拿来语法书也一样，大多数语法书的结构都差不多，从“冠词”开始讲起，而后名词、代词、动词、形容词、副词、连词等等，而其中关于动词的那一章几乎占语法书的2/3篇幅（因为有时态、语态、语气等等诸多细节要讲解）……</p>
<p>正如我们想去某个地方的时候要去查地图一样，我们想要了解哪一方面的语法知识，就去查语法书。语法书不可能看一遍就全记住，正如地图看一遍不大可能全记住一样。语法书基本上都是查着查着看完并谙熟于心的，就好像地图也是查着查着就不用再查了一样。地图上总是有一些地方我们一辈子都不需要去，而语法点之中也有一些人们一辈子都可能用不到。把最常用的语法知识经过反复查阅应用牢记于心，剩下的，需要的时候拿出语法书查得到就好了。</p>
<p>语法书当然要比一般的地图更为复杂一些。除了告诉我们该书的基本结构的目录之外，重要的还有书尾的“索引”（index）。通过索引，我们可以查得到重要的关键词都在哪些页面出现过。当我们遇到一个没有生词却读不懂的句子之时，我们就可能会猜“究竟是哪个语法点我没弄清楚才导致这句话我看不懂呢？”首先要锁定“功能词”。所谓功能词是指语法书里面专门讲解过的那些词，比如“that”、“and”、“as”、“of”等等。</p>
<p>查语法书就这么简单：</p>
<blockquote>
<ol>
<li>锁定功能词，</li>
<li>检索索引，</li>
<li>逐一翻阅相应内容，看看能否找到合适的解答。</li>
</ol>
</blockquote>
<p>如果一本语法书中没有找到满意的答案，那就再换一本语法书，最终总能找到答案。有时就算在一本语法书中找到了答案，也可以再翻翻另外一本语法书，因为这么做总是可以找到一些补充的信息。</p>
<h3 id="数学式语法而不是英语语法"><a href="#数学式语法而不是英语语法" class="headerlink" title="数学式语法而不是英语语法"></a>数学式语法而不是英语语法</h3><p>很多人用对待初等数学的方式对待英语，这是一种过分简单化的看法，或者说是一种不切实际的想法和做法。</p>
<p>初等数学其实没什么意思，因为太简单。一切都是确定的，无懈可击的。了解一些无须理解争论的“公理”，然后再推演或者干脆记忆一堆“定理”和“公式”，而后就可以做到“无懈可击”的证明，或者“正确无误”的结果。英语语法（事实上所有语言的语法都如此）则很复杂。语法里面很少有公理、定理，更多的是带有众多例外的“规则”。从这个意义上来说，学好语法显然要比学好初等数学难出许多，干脆不是同一个层面上的事情。</p>
<p>到了微积分和概率统计，数学才真正妙趣横生。因为这个时候，数学已经开始处理复杂性与不确定性——生活的关键本质就在于其复杂性与不确定性。然而那些当初“充满优越感幻觉的理科生”早就不再对数学“感兴趣”了。</p>
<p>数学也好，英语也罢（或者说任何其他一种语言），其实各自都是描述这个世界的众多方式之一。初等数学（例如算术、代数、几何等等）只是被用来描述这个世界的某一部分，而语言则担负着“尽量描述整个世界”的任务，所以显然要比初等数学复杂得多，并且无法做到“完美”或者“相对完美”。</p>
<p>要了解语法的本质。本质上来看，语法并不是“规定你应该怎么说”，而是“尽量”“系统地”解释“人们为什么普遍这么说”。所以，不能把语法规则当作数学公式，语法规则并不保证按照它拼凑出来的句子一定有意义并且正确。</p>
<h3 id="反复通读至少一本语法书"><a href="#反复通读至少一本语法书" class="headerlink" title="反复通读至少一本语法书"></a>反复通读至少一本语法书</h3><p>如果一个人学会查词典，学会查语法书，再肯于多查几部词典、多查几本语法书，他基本上就具备在中国的任何一所民办英语培训机构做老师的基本素质了。在大多数短期英语培训机构里，英语老师所谓的备课，90%以上的工作只不过是查查词典、翻翻语法书而已。这样的老师都算是敬业的，更多的所谓“老师”能不查就不查词典，能不翻就不翻语法书，因为他们把自己的90%时间精力放在琢磨如何才能使课堂气氛更加活跃——唱唱歌啊，跳跳舞啊，讲讲笑话啊什么的。当然更多的人连这些都做不好，于是只好吹牛，（并且只能）往死了吹……</p>
<p>如果读者爱惜自己的时间精力（“视金钱如粪土”确实颇有些气势），那最好还是靠自己吧。只有尽早反复通读一本语法书，才可能快速摆脱对老师的依赖，而后做自己的明师。尽管语法知识看起来非常枯燥，但是只要换一种读法，就可能会有很大的改观。</p>
<p>学习外语的真正难点在于母语和外语这两种语言之间的非一一对应之处。两种语言重合、一一对应的部分，是容易学会的。“apple-苹果”、“table-桌子”、“fatigue-疲乏”、“sophisticated-精细的”之类的单词，由于其所表达的概念在两种语言中都存在，并一一对应，记忆起来并不难。然而，像英文的“vary”，在中文中就很难找到对应的词汇，比如这个例句中的vary这个词：“People’s opinions vary from individual to individual.”，用英汉词典的释义“变化”来理解好像并不那么准确，这句话的意思是“人们的看法各不相同。”再比如，中文中的“确实”这个副词，在英文中其实没有一个同等作用同等用法的对应，比如这个例句中“I do hate going out alone.”，是用附加一个助动词“do”的结构来表示中文“确实”这个含义；再比如，“Who could’ve considered such a possibility?”这个英文句子中，是用“could have done”的形式在疑问句中表达中文副词“居然”的含义的——而非汉英辞典里给出的“actually”和“virtually”。</p>
<p>“This is a table.”或者“That’s a book.”之类的句子，不仅容易理解，并且容易运用。其实只不过是因为它们的结构与逻辑与我们的母语几乎一一对应。日常使用中，近乎“一一对应”的文字其实占大多数，比如之前我们曾读过的“Evolution itself has no foresight.”之类的句子。（读者应该在“5.2 无论如何都要学语法”中读到过这个句子——如果没有的话，说明您读书太不认真了。）</p>
<p>句子结构、表达方法在两种语言之间也有很多并非一一对应的情况，尽管数量上是少数，却给语言的熟练运用带来很多的麻烦。比如，“请问，这个座位有人么？”对应的不是“Please ask, is there anyone at this seat?”，而是“Excuse me, is this seat taken?”；“如果我没有记错的话……”不是“If I didn’t remember wrong, …”，而可能是“If my memory serves, …”</p>
<p>有这么一个句子我曾印象深刻：“The impact that technologies have had on our daily life and society in general, is undeniable.”这是大学英语精读教材里某一篇文章中的句子。我当时愣了一下，想，要是让我来表达“什么什么的影响”，很可能用的就是“the influence of 什么什么”，而不是用“impact”这个词，也不会用一个从句，更不会用那么个时态——想想是有道理的，这位作者在表达的是：“一直以来，技术对……的影响”，其中的“一直以来”，是用现在完成时表达的。也就是说，这句话里有很多对于我来说，英语与母语非一一对应的地方。</p>
<p>于是，我就拿出我的惯用伎俩：</p>
<p>把这个于我来讲“非一一对应”的句子做个标记；<br>把它摘抄到笔记本上；<br>再想想这个句子能否当作替换练习模板——即，看看我能不能把这个句子变成这样一个“填空”句型：<br>The impact that <em> have/has had on </em> , is undeniable.<br>之后，我就可以不停地用这个“模板”造句了：</p>
<p>The impact that the internet has had on every respect of our daily life, is undeniable.<br>The impact that parents and their attitudes have had on their children’s personality development, is undeniable.<br>The impact that one’s early education has had on his or her later life, is undeniable.<br>…<br>造上几个句子之后，这种表达法就已经牢牢刻在我的脑子里，可以不加思索地运用了（其实，所谓“地道”也不过就是应该这样学的吧？）。而不再用考虑 “我究竟应该用从句呢？还是要用介词结构？”或者“我究竟是不是应该使用现在完成时呢？”之类必须用各种语法概念才能理顺的问题。其实，类似的手段我曾经在之前的文中演示过：“I have lost my key.”这句话，就可以当作一个模板：“I have lost my _.”；而后反复造句，直至把这种表达法谙熟于心。</p>
<p>我建议学生通读语法书的方法是这样：</p>
<blockquote>
<ol>
<li>逐页浏览；</li>
<li>仔细阅读每一个例句（而那些语法概念能不能完全理解，能不能一次就记住倒在其次）；</li>
<li>判断这个例句的英文表达与中文表达是否相当地“非一一对应”？如果是，则做出标记（要是有“呀，让我用英语表达这个意思，可能说出来的就不是这样了！”的念头的话，就应该做标记了）；</li>
<li>积累到一定数量，就把这类句子摘录出来，做成替换练习模板，反复造句并朗读，直至熟练；</li>
<li>继续浏览；</li>
<li>通读一遍之后，如此这般再反复几次……</li>
</ol>
</blockquote>
<p>那些语法概念并非不重要，只不过我们并不需要像患了强迫症一般非要一次就把它们全部彻底搞定。在反复的浏览过程中，那些曾经艰涩的概念大多都会潜移默化地被吸收，不再那么难缠。并且，有些概念就算搞不清，其实也无所谓。例如“独立主格结构”这个概念，不了解又怎么样呢？只要遇到那样的句子之时能够正确理解其意（因为做过好几遍那么多例句的替换练习）不就可以了么？有些人好不容易搞清楚了“独立主格结构”这个概念，换一本语法书（比如Collins Cobuild的《英语语法大全》）之后，才发现那个概念在这些书里叫另外一个名字，于是就痛苦不堪……</p>
<p>别想了，开始行动吧。</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_081559.jpg" alt=""></p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_082227.jpg" alt=""></p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_110139.jpg" alt=""></p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_110422.jpg" alt=""></p>
<h2 id="英语语法超图解"><a href="#英语语法超图解" class="headerlink" title="英语语法超图解"></a>英语语法超图解</h2><p>我们都相信学习是必须的，是生活中每天都要做的事。但正因为如此，学习应该是一件轻松且容易达成的事，而不是一件一想到就痛苦而难以坚持的事。</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_082418.jpg" alt=""></p>
<blockquote>
<p>英语语法，指英语中语言的结构规律，主要包括“单词、短语、句型和语法”四个要素。以下就根据这四个要素做细节说明：</p>
</blockquote>
<h3 id="1-单词"><a href="#1-单词" class="headerlink" title="1. 单词"></a>1. 单词</h3><p>英语单词依据在句子中的作用，可分为八大词类，分别为名词、代词、形容词、动词、副词、介词、连词和感叹词。</p>
<h4 id="1-1-名词"><a href="#1-1-名词" class="headerlink" title="1-1. 名词"></a>1-1. 名词</h4><p>表示人、地、事、物等的词。名词分为可数名词和不可数名词，可数名词前要加冠词a/an，不可数名词前要加定冠词the，例如：a book,an apple, the air。</p>
<h4 id="1-2-代名词"><a href="#1-2-代名词" class="headerlink" title="1-2. 代名词"></a>1-2. 代名词</h4><p>表示代替名词或名词短语的形式用词。代名词可以分为：<br><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_082656.jpg" alt=""></p>
<h4 id="1-3-形容词"><a href="#1-3-形容词" class="headerlink" title="1-3. 形容词"></a>1-3. 形容词</h4><p>用来修饰名词或代词的词。形容词可分为：<br><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_083205.jpg" alt=""></p>
<h4 id="1-4-动词"><a href="#1-4-动词" class="headerlink" title="1-4. 动词"></a>1-4. 动词</h4><p>是用以表示动作或状态的词，例如：be, go, get, have, run, send等。另外，动词在使用上，要特别注意时态和语态的变化。<br><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_083321.jpg" alt=""></p>
<h4 id="1-5-副词"><a href="#1-5-副词" class="headerlink" title="1-5. 副词"></a>1-5. 副词</h4><p>可用来修饰动词、形容词和其他副词，也可以用来修饰短语。副词分为：<br><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_083408.jpg" alt=""></p>
<h4 id="1-6-介词"><a href="#1-6-介词" class="headerlink" title="1-6. 介词"></a>1-6. 介词</h4><p>通常放在名词和代词之前，用来表示名词或代词和其前面词的关系。介词从形式上来分有四种：<br><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_083455.jpg" alt=""></p>
<h4 id="1-7-连词"><a href="#1-7-连词" class="headerlink" title="1-7. 连词"></a>1-7. 连词</h4><p>用来连接单词、短语、从句和句子的词。连词分为：<br><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_083541.jpg" alt=""></p>
<h4 id="1-8-感叹词"><a href="#1-8-感叹词" class="headerlink" title="1-8. 感叹词"></a>1-8. 感叹词</h4><p>用以表示强烈的情绪和感情的一种声音或叫喊。例如：Hello! Hurrah! Hi! Oh!等等。</p>
<h3 id="2-短语"><a href="#2-短语" class="headerlink" title="2.短语"></a>2.短语</h3><p>短语是由两个或两个以上的英语单词所组合的词语，不包含主语和动词，可以构成句子的一部分，也可以用来当名词、形容词和副词使用。短语主要分为以下五大种类：<br><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_084025.jpg" alt=""></p>
<h3 id="3-句型"><a href="#3-句型" class="headerlink" title="3. 句型"></a>3. 句型</h3><p>句子是按照一定的语法规律组成的，表达一个完整的意义。一个句子一般由两部分构成，即主语部分和动词部分，这两部分也是句子中最主要的成分。而句子的次要成分包括宾语，形容词，副词，主语补语等。首先介绍一下，在一般语法说明中容易使用到的英语缩写：</p>
<p>S subject 主语</p>
<p>V verb 动词</p>
<ol>
<li><p>vt. transitive verb 及物动词<br>Verbs that take object are called transitive verbs.</p>
</li>
<li><p>vi. intransitive verb不及物动词</p>
</li>
</ol>
<p>O object宾语</p>
<ol>
<li>d.o. direct object 直接宾语</li>
<li>i.o. indirect object 间接宾语</li>
</ol>
<p>C complement 补语</p>
<ol>
<li>S.C subject complement主语补语</li>
<li>O.C object complement宾语补语</li>
</ol>
<p>以下为英语五大基本句型：</p>
<h4 id="句型01：S＋V（主语＋不及物动词）"><a href="#句型01：S＋V（主语＋不及物动词）" class="headerlink" title="句型01：S＋V（主语＋不及物动词）"></a>句型01：S＋V（主语＋不及物动词）</h4><blockquote>
<p>Everybody laughed</p>
</blockquote>
<h4 id="句型02：S＋V＋SC（主语＋系动词＋表语）"><a href="#句型02：S＋V＋SC（主语＋系动词＋表语）" class="headerlink" title="句型02：S＋V＋SC（主语＋系动词＋表语）"></a>句型02：S＋V＋SC（主语＋系动词＋表语）</h4><p>句型02：S＋V＋SC（主语＋系动词＋表语）此结构中的动词常为系动词，例如：look,seem, appear, prove, become, turn, sound, taste,keep, stay…等。</p>
<blockquote>
<p>The girl in red dress looks cute.</p>
</blockquote>
<h4 id="句型03：S＋V＋O（主语＋及物动词＋宾语）"><a href="#句型03：S＋V＋O（主语＋及物动词＋宾语）" class="headerlink" title="句型03：S＋V＋O（主语＋及物动词＋宾语）"></a>句型03：S＋V＋O（主语＋及物动词＋宾语）</h4><blockquote>
<p>Nobody could answer the question.</p>
</blockquote>
<h4 id="句型04：S＋V＋O1＋O2（主语＋双宾动词＋间接宾语＋直接宾语）"><a href="#句型04：S＋V＋O1＋O2（主语＋双宾动词＋间接宾语＋直接宾语）" class="headerlink" title="句型04：S＋V＋O1＋O2（主语＋双宾动词＋间接宾语＋直接宾语）"></a>句型04：S＋V＋O1＋O2（主语＋双宾动词＋间接宾语＋直接宾语）</h4><p>间接宾语通常会是“人”，直接宾语通常会是“物品”。</p>
<blockquote>
<p>Mary lent me her car.</p>
</blockquote>
<h4 id="句型05：-S＋V＋O＋OC（主语＋使役动词＋宾语＋宾语补语）"><a href="#句型05：-S＋V＋O＋OC（主语＋使役动词＋宾语＋宾语补语）" class="headerlink" title="句型05： S＋V＋O＋OC（主语＋使役动词＋宾语＋宾语补语）"></a>句型05： S＋V＋O＋OC（主语＋使役动词＋宾语＋宾语补语）</h4><p>They named this cat “Tiger”.</p>
<h3 id="4-语法"><a href="#4-语法" class="headerlink" title="4. 语法"></a>4. 语法</h3><p>英语语法有一定的规则，它是客观存在的，而不是语言学家规定的。语言学家只是对其进行归纳、整理，并选择恰当的方式把它们描述出来。学习英语语法得注意如下基本规则：</p>
<h4 id="规则01：两个动词是不能连在一起的。"><a href="#规则01：两个动词是不能连在一起的。" class="headerlink" title="规则01：两个动词是不能连在一起的。"></a>规则01：两个动词是不能连在一起的。</h4><blockquote>
<p>I like to play the piano.</p>
</blockquote>
<h4 id="规则02：如果一定要同时用两个动词，第二个动词的前面必须加“to”，或是加上“-ing”。"><a href="#规则02：如果一定要同时用两个动词，第二个动词的前面必须加“to”，或是加上“-ing”。" class="headerlink" title="规则02：如果一定要同时用两个动词，第二个动词的前面必须加“to”，或是加上“-ing”。"></a>规则02：如果一定要同时用两个动词，第二个动词的前面必须加“to”，或是加上“-ing”。</h4><blockquote>
<p>I like to swim./I like swimming.</p>
</blockquote>
<h4 id="规则03：主语如果是第三人称单数，现在时中的动词必须加“s”"><a href="#规则03：主语如果是第三人称单数，现在时中的动词必须加“s”" class="headerlink" title="规则03：主语如果是第三人称单数，现在时中的动词必须加“s”"></a>规则03：主语如果是第三人称单数，现在时中的动词必须加“s”</h4><blockquote>
<p>She sings very well.</p>
</blockquote>
<h4 id="规则04：绝大多数的否定句，不能直接加-not，必须加上助动词或使役动词动词。"><a href="#规则04：绝大多数的否定句，不能直接加-not，必须加上助动词或使役动词动词。" class="headerlink" title="规则04：绝大多数的否定句，不能直接加 not，必须加上助动词或使役动词动词。"></a>规则04：绝大多数的否定句，不能直接加 not，必须加上助动词或使役动词动词。</h4><blockquote>
<p>I don’t want to go.</p>
</blockquote>
<h4 id="规则05：-在不定式“to”的后面，必须用动词原形"><a href="#规则05：-在不定式“to”的后面，必须用动词原形" class="headerlink" title="规则05： 在不定式“to”的后面，必须用动词原形"></a>规则05： 在不定式“to”的后面，必须用动词原形</h4><blockquote>
<p>She wants to become a good teacher.</p>
</blockquote>
<h4 id="规则06：英语中有所谓的助动词。英语中有很多助动词，除了-do外，can-may-might-would-will-must-也是助动词。"><a href="#规则06：英语中有所谓的助动词。英语中有很多助动词，除了-do外，can-may-might-would-will-must-也是助动词。" class="headerlink" title="规则06：英语中有所谓的助动词。英语中有很多助动词，除了 do外，can, may, might, would,will, must 也是助动词。"></a>规则06：英语中有所谓的助动词。英语中有很多助动词，除了 do外，can, may, might, would,will, must 也是助动词。</h4><blockquote>
<p>You must practice your English every day.</p>
</blockquote>
<h4 id="规则07：大部分的英语问句都要包含助动词"><a href="#规则07：大部分的英语问句都要包含助动词" class="headerlink" title="规则07：大部分的英语问句都要包含助动词"></a>规则07：大部分的英语问句都要包含助动词</h4><blockquote>
<p>Do you like playing basketball?（你喜欢打篮球吗？）<br>How many books do you have?（你有多少本书？）</p>
</blockquote>
<h4 id="规则08：特殊动词随主语变化，另外，英语中有些动词因主语不同而有所变形，例如-be-动词。"><a href="#规则08：特殊动词随主语变化，另外，英语中有些动词因主语不同而有所变形，例如-be-动词。" class="headerlink" title="规则08：特殊动词随主语变化，另外，英语中有些动词因主语不同而有所变形，例如 be 动词。"></a>规则08：特殊动词随主语变化，另外，英语中有些动词因主语不同而有所变形，例如 be 动词。</h4><blockquote>
<p>I am a good student.（我是一位好学生。）<br>She has a big heart.（她有宽大的胸襟。）<br>They have been to Paris.（他们去过巴黎。）</p>
</blockquote>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_093109.jpg" alt=""></p>
<h3 id="一般现在时-vs-一般过去时"><a href="#一般现在时-vs-一般过去时" class="headerlink" title="一般现在时 vs. 一般过去时"></a>一般现在时 vs. 一般过去时</h3><p>一般现在时表示经常性、习惯性的动作、行为或者现在的某种状况；一般过去时表示过去某一时间内发生的动作或存在的状态，常与表示过去的时间副词连用，例如：yesterday, last night/week, amonth ago, in 1990’s等。</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_093249.jpg" alt=""></p>
<h3 id="将来时"><a href="#将来时" class="headerlink" title="将来时"></a>将来时</h3><p>将来时表示将来某个时间要发生的动作或存在的状态，也表示将来经常或者重复发生的动作，常与表示将来的时间副词连用，例如：tomorrow,soon, next week, this afternoon…。</p>
<h3 id="现在进行时vs-过去进行时vs-将来进行时"><a href="#现在进行时vs-过去进行时vs-将来进行时" class="headerlink" title="现在进行时vs.过去进行时vs.将来进行时"></a>现在进行时vs.过去进行时vs.将来进行时</h3><p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_093444.jpg" alt=""></p>
<h4 id="进行时的句型构成"><a href="#进行时的句型构成" class="headerlink" title="进行时的句型构成"></a>进行时的句型构成</h4><p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_093544.jpg" alt=""></p>
<h4 id="进行时的使用时机"><a href="#进行时的使用时机" class="headerlink" title="进行时的使用时机"></a>进行时的使用时机</h4><h3 id="现在完成时vs-过去完成时vs-将来完成时"><a href="#现在完成时vs-过去完成时vs-将来完成时" class="headerlink" title="现在完成时vs.过去完成时vs.将来完成时"></a>现在完成时vs.过去完成时vs.将来完成时</h3><p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_093739.jpg" alt=""></p>
<h4 id="完成时的句型构成"><a href="#完成时的句型构成" class="headerlink" title="完成时的句型构成"></a>完成时的句型构成</h4><p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_094053.jpg" alt=""></p>
<h4 id="完成时的使用时机"><a href="#完成时的使用时机" class="headerlink" title="完成时的使用时机"></a>完成时的使用时机</h4><h3 id="完成进行时（现在-vs-过去-vs-将来）"><a href="#完成进行时（现在-vs-过去-vs-将来）" class="headerlink" title="完成进行时（现在 vs. 过去 vs. 将来）"></a>完成进行时（现在 vs. 过去 vs. 将来）</h3><p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_094030.jpg" alt=""></p>
<h4 id="完成时的句型构成-1"><a href="#完成时的句型构成-1" class="headerlink" title="完成时的句型构成"></a>完成时的句型构成</h4><p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_094906.jpg" alt=""></p>
<h4 id="完成时的使用时机-1"><a href="#完成时的使用时机-1" class="headerlink" title="完成时的使用时机"></a>完成时的使用时机</h4><h3 id="形容词（含比较级-amp-最高级）"><a href="#形容词（含比较级-amp-最高级）" class="headerlink" title="形容词（含比较级&amp;最高级）"></a>形容词（含比较级&amp;最高级）</h3><p>形容词主要用来修饰名词或不定代词，表示人或事物的性质、状态和特征的词。形容词在句中作定语、补语及修饰从句等。<br><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_095854.jpg" alt=""></p>
<h4 id="形容词的用法"><a href="#形容词的用法" class="headerlink" title="形容词的用法"></a>形容词的用法</h4><p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_100452.jpg" alt=""></p>
<h4 id="形容词的比较级、最高级"><a href="#形容词的比较级、最高级" class="headerlink" title="形容词的比较级、最高级"></a>形容词的比较级、最高级</h4><p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_101509.jpg" alt=""></p>
<h3 id="副词（含比较级-amp-最高级）"><a href="#副词（含比较级-amp-最高级）" class="headerlink" title="副词（含比较级&amp;最高级）"></a>副词（含比较级&amp;最高级）</h3><p>副词主要用来修饰动词、形容词、其他副词或全句，用来说明时间、地点、程度、方式等概念的词。副词在句中主要作状语。副词可以分为时间副词、地点副词、方式副词、程度副词、频率副词等。</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_102148.jpg" alt=""></p>
<h3 id="动词短语（不可分离vs-可分离）"><a href="#动词短语（不可分离vs-可分离）" class="headerlink" title="动词短语（不可分离vs.可分离）"></a>动词短语（不可分离vs.可分离）</h3><p>所谓的动词短语，是指由动词加上介词∕副词所组成的短语。其短语意义有时与原先单独动词的字义不同，并且有多种字义。英语中的动词短语依照结构分为两种：不可分离的动词短语（动词＋介词），及可分离的动词短语（动词＋副词）。</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_102328.jpg" alt=""></p>
<h3 id="系动词vs-感官动词"><a href="#系动词vs-感官动词" class="headerlink" title="系动词vs.感官动词"></a>系动词vs.感官动词</h3><p>系动词是用来补充描述和指明事物的，常用形容词来补充说明主语的不足，使得整句意思更完整，常用的系动词有seem, appear, look, feel,sound ,taste, become, get ,turn, smell, grow等；</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_102444.jpg" alt=""><br>感官动词是表示人的感觉的动词, 常见的感官动词有feel, hear, sound ,see, taste, smell, look at等。</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_102859.jpg" alt=""></p>
<h3 id="动名词与不定式"><a href="#动名词与不定式" class="headerlink" title="动名词与不定式"></a>动名词与不定式</h3><p>当一个句子中出现两个动词时，通常会用两种形式呈现。</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_103306.jpg" alt=""><br>一、动名词：动词＋ing→具有动词及名词的特性，在句子中作为名词使用。</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_103332.jpg" alt=""><br>二、不定式：to＋动词原形→具有名词、形容</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_103445.jpg" alt=""></p>
<h3 id="连词"><a href="#连词" class="headerlink" title="连词"></a>连词</h3><p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_103528.jpg" alt=""></p>
<h3 id="介词"><a href="#介词" class="headerlink" title="介词"></a>介词</h3><p>介词。是用来表明单词与单词之间的各种关系，主要是用来引出具有名词作用的单词，例如名词、动名词、代名词及名词从句。</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_103848.jpg" alt=""></p>
<h3 id="短语"><a href="#短语" class="headerlink" title="短语"></a>短语</h3><p>短语是指由两个或两个以上的英语单词所组合的词语，其中不包含主语和动词，连在一起具有类似一种词类作用的字群。</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_104033.jpg" alt=""></p>
<h3 id="虚拟语气"><a href="#虚拟语气" class="headerlink" title="虚拟语气"></a>虚拟语气</h3><p>虚拟语气用来表示说的话不是事实或者是不可能发生的情况，而是一种愿望、建议、假设。虚拟语气有三种基本类型：与现在事实相反，与过去事实相反，与将来事实相反。</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_105324.jpg" alt=""></p>
<h3 id="被动语态"><a href="#被动语态" class="headerlink" title="被动语态"></a>被动语态</h3><p>英语中有两种语态：主动语态和被动语态。主动语态表示主语是动作的执行者。被动语态表示主语是动作的承受者，即行为动作的物件。</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_105418.jpg" alt=""></p>
<h3 id="附加问句"><a href="#附加问句" class="headerlink" title="附加问句"></a>附加问句</h3><h3 id="关系代名词"><a href="#关系代名词" class="headerlink" title="关系代名词"></a>关系代名词</h3><p>关系代名词是指兼具代名词与连词双重作用的代名词。关系代名词所代表的名词或代名词就做“先行词”，句中该用何种代名词视先行词的种类而定。关系代名词的人称、格、数应该与先行词一致。</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_105518.jpg" alt=""></p>
<h4 id="普通关系代名词"><a href="#普通关系代名词" class="headerlink" title="普通关系代名词"></a>普通关系代名词</h4><p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_105601.jpg" alt=""></p>
<h4 id="表示人和物品的关系代名词－that"><a href="#表示人和物品的关系代名词－that" class="headerlink" title="表示人和物品的关系代名词－that"></a>表示人和物品的关系代名词－that</h4><p>关系代名词that 既可以表示人又可以表示物，可以做主格或宾格，不能为所有格。有些场合关系代名词只能用 that，有的场合则不能用that。</p>
<p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_105828.jpg" alt=""></p>
<h3 id="从句（名词从句、形容词从句、副词从句……）"><a href="#从句（名词从句、形容词从句、副词从句……）" class="headerlink" title="从句（名词从句、形容词从句、副词从句……）"></a>从句（名词从句、形容词从句、副词从句……）</h3><h3 id="倒装句"><a href="#倒装句" class="headerlink" title="倒装句"></a>倒装句</h3><p>英语句子通常有两种语序：一种是自然语序，一种是倒装语序。将谓语的一部分或全部置于主语之前的语序叫做倒装语序。<br><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_105856.jpg" alt=""></p>
<h4 id="全部倒装"><a href="#全部倒装" class="headerlink" title="全部倒装"></a>全部倒装</h4><p><img src="http://oo851m2j1.bkt.clouddn.com/2017-04-11_110004.jpg" alt=""></p>
<h4 id="部分倒装"><a href="#部分倒装" class="headerlink" title="部分倒装"></a>部分倒装</h4><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://zhibimo.com/read/xiaolai/everyone-can-use-english/" target="_blank" rel="external">everyone-can-use-english</a><br>[2]<a href="http://zhibimo.com/read/xiaolai/a-new-english-reading-handbook/" target="_blank" rel="external">a-new-english-reading-handbook</a><br>[3]<a href="http://www.duokan.com/reader/www/app.html?id=96b2fcc60e3b442595c87aa4f289908c" target="_blank" rel="external">英语语法超图解</a><br>[4]<a href="http://www.duokan.com/reader/www/app.html?id=151c181f133e4bf795835e5f05e6780d" target="_blank" rel="external">零基础英语语法</a><br>[5]<a href="http://www.duokan.com/reader/www/app.html?id=47e26632bb224d89891b2c58590dad01" target="_blank" rel="external">新东方·英语语法新思维</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/grammar.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Grammar is the rules of English.&lt;br&gt;No grammar , no sentence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要了解语法的本质。本质上来看，语法并不是“规定你应该怎么说”，而是“尽量”“系统地”解释“人们为什么普遍这么说”。所以，不能把语法规则当作数学公式，语法规则并不保证按照它拼凑出来的句子一定有意义并且正确。&lt;/p&gt;
    
    </summary>
    
      <category term="English" scheme="http://ipcreator.me/categories/English/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Grammar" scheme="http://ipcreator.me/tags/Grammar/"/>
    
  </entry>
  
  <entry>
    <title>My Using of English</title>
    <link href="http://ipcreator.me/2017/04/11/English/my-using-of-english/"/>
    <id>http://ipcreator.me/2017/04/11/English/my-using-of-english/</id>
    <published>2017-04-10T23:02:06.000Z</published>
    <updated>2017-04-11T00:19:17.403Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/language-v-population.png" alt=""><br>Top Languages of the Internet, Today and Tomorrow<sup>[1]</sup></p>
<blockquote>
<p>Learning. Teaching. Using. Enjoying English!</p>
</blockquote>
<p>Whether it’s easy or difficult , just do it right now.</p>
<a id="more"></a>
<h2 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h2><p>One more, one more<br>Accumulation<br>Review</p>
<h2 id="Grammar"><a href="#Grammar" class="headerlink" title="Grammar"></a>Grammar</h2><p>Deliberate Learn and Practice</p>
<h2 id="Sentence"><a href="#Sentence" class="headerlink" title="Sentence"></a>Sentence</h2><p>Daily Sentence<br>Translation of Quotes</p>
<h2 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h2><p>Search the Info<br>Download the Files<br>Use the tools</p>
<h2 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h2><p>Improve Reading Skill<br>Read the Doc(API…)<br>Read the Code<br>Write the Code</p>
<h2 id="Write-Blog"><a href="#Write-Blog" class="headerlink" title="Write Blog"></a>Write Blog</h2><p>Improve Writing Skill</p>
<h2 id="Smartphone"><a href="#Smartphone" class="headerlink" title="Smartphone"></a>Smartphone</h2><p>Switch the Language of OS to English</p>
<h2 id="Notebook"><a href="#Notebook" class="headerlink" title="Notebook"></a>Notebook</h2><p>Switch the Language of OS to English</p>
<h2 id="Music"><a href="#Music" class="headerlink" title="Music"></a>Music</h2><p>Taste the fabulous Music</p>
<h2 id="Movie"><a href="#Movie" class="headerlink" title="Movie"></a>Movie</h2><p>Appreciate the wonderful Movie</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://unbabel.com/blog/top-languages-of-the-internet/#" target="_blank" rel="external">Top Languages of the Internet, Today and Tomorrow</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/language-v-population.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;Top Languages of the Internet, Today and Tomorrow&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Learning. Teaching. Using. Enjoying English!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whether it’s easy or difficult , just do it right now.&lt;/p&gt;
    
    </summary>
    
      <category term="English" scheme="http://ipcreator.me/categories/English/"/>
    
    
      <category term="Music" scheme="http://ipcreator.me/tags/Music/"/>
    
      <category term="Movie" scheme="http://ipcreator.me/tags/Movie/"/>
    
      <category term="Smartphone" scheme="http://ipcreator.me/tags/Smartphone/"/>
    
      <category term="Notebook" scheme="http://ipcreator.me/tags/Notebook/"/>
    
      <category term="Write Blog" scheme="http://ipcreator.me/tags/Write-Blog/"/>
    
      <category term="Program" scheme="http://ipcreator.me/tags/Program/"/>
    
  </entry>
  
  <entry>
    <title>Support the Feature of Searching</title>
    <link href="http://ipcreator.me/2017/04/11/Program/Android/MyApp/search-my-blog/"/>
    <id>http://ipcreator.me/2017/04/11/Program/Android/MyApp/search-my-blog/</id>
    <published>2017-04-10T22:20:06.000Z</published>
    <updated>2017-04-10T22:57:47.916Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/2017-04-11_062124.jpg" alt=""></p>
<blockquote>
<p>Search the F**king Web<br>Read the F**king Manual<br>Keep Deliberate Practice</p>
</blockquote>
 <a id="more"></a>
<h2 id="Offical-Web-Site"><a href="#Offical-Web-Site" class="headerlink" title="Offical Web Site"></a>Offical Web Site</h2><p>Find the Same Problem<br><img src="http://om8nmvpn9.bkt.clouddn.com/2017-04-11_064554.jpg" alt=""></p>
<h2 id="Analysis-of-My-Blog"><a href="#Analysis-of-My-Blog" class="headerlink" title="Analysis of My Blog"></a>Analysis of My Blog</h2><p>Search.xml parse error<br><img src="http://om8nmvpn9.bkt.clouddn.com/2017-04-11_064611.jpg" alt=""></p>
<h2 id="Correct-the-Error"><a href="#Correct-the-Error" class="headerlink" title="Correct the Error"></a>Correct the Error</h2><p>Delete the error part<br><img src="http://om8nmvpn9.bkt.clouddn.com/2017-04-11_064803.jpg" alt=""></p>
<h2 id="Display-the-Search-Widget"><a href="#Display-the-Search-Widget" class="headerlink" title="Display the Search Widget"></a>Display the Search Widget</h2><p><img src="http://om8nmvpn9.bkt.clouddn.com/2017-04-11_064919.jpg" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p> [1]<a href="https://www.v2ex.com/t/298727" target="_blank" rel="external">Hexo next 主题的 local search 功能失效，点击搜索链接无法弹出叠加层</a><br> [2]<a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a><br> [3]<a href="https://www.npmjs.com/package/hexo-generator-searchdb" target="_blank" rel="external">hexo-generator-searchdb</a><br> [4]<a href="https://github.com/iissnan/hexo-theme-next/issues/1165" target="_blank" rel="external">点击搜索（local search）没反应啊啊啊 #1165</a><br> [5]<a href="[修正]Local search plugin update #1168">https://github.com/iissnan/hexo-theme-next/issues/1168</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/2017-04-11_062124.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Search the F**king Web&lt;br&gt;Read the F**king Manual&lt;br&gt;Keep Deliberate Practice&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Chrome" scheme="http://ipcreator.me/tags/Chrome/"/>
    
      <category term="Hexo" scheme="http://ipcreator.me/tags/Hexo/"/>
    
      <category term="Next" scheme="http://ipcreator.me/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>UI</title>
    <link href="http://ipcreator.me/2017/04/10/Program/Android/MyApp/ui/"/>
    <id>http://ipcreator.me/2017/04/10/Program/Android/MyApp/ui/</id>
    <published>2017-04-10T13:12:06.000Z</published>
    <updated>2017-04-10T13:38:42.751Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_20170410-210933.png" alt=""></p>
<blockquote>
<p>Roll with the punches<br>Down to earth, step by step towards the ultimate goal</p>
</blockquote>
 <a id="more"></a>
<h2 id="Music"><a href="#Music" class="headerlink" title="Music"></a>Music</h2><p><img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_20170410-210750.png" alt=""></p>
<h2 id="Usage-Statistics"><a href="#Usage-Statistics" class="headerlink" title="Usage Statistics"></a>Usage Statistics</h2><p><img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_20170410-210856.png" alt=""></p>
<h2 id="Small-Tools"><a href="#Small-Tools" class="headerlink" title="Small Tools"></a>Small Tools</h2><p><img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_20170410-210833.png" alt=""></p>
<h2 id="Weather"><a href="#Weather" class="headerlink" title="Weather"></a>Weather</h2><p><img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_20170410-210923.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/Screenshot_20170410-210933.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Roll with the punches&lt;br&gt;Down to earth, step by step towards the ultimate goal&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Application" scheme="http://ipcreator.me/tags/Application/"/>
    
      <category term="Milestone" scheme="http://ipcreator.me/tags/Milestone/"/>
    
  </entry>
  
  <entry>
    <title>Analysis of Android Studio Debug Problem</title>
    <link href="http://ipcreator.me/2017/04/10/Program/Android/analysis-of-debug-problem/"/>
    <id>http://ipcreator.me/2017/04/10/Program/Android/analysis-of-debug-problem/</id>
    <published>2017-04-10T02:50:06.000Z</published>
    <updated>2017-04-10T02:52:50.640Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/android_debug_bridge-600x338.png" alt=""></p>
<ol>
<li>Fetch the log info</li>
<li>Analyze the crash info</li>
<li>Search the Google/Stack Overflow</li>
<li>Summarize the process</li>
</ol>
<a id="more"></a>
<h2 id="Fetch-the-log-info"><a href="#Fetch-the-log-info" class="headerlink" title="Fetch the log info"></a>Fetch the log info</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">--------- beginning of crash</div><div class="line">04-10 10:03:48.492 7348-7355/me.ipcreator.ui.debug A/libc: Fatal signal 6 (SIGABRT), code -6 in tid 7355 (JDWP)</div><div class="line"></div><div class="line">                                                           [ 04-10 10:03:48.493  1282: 1282 W/         ]</div><div class="line">                                                           debuggerd: handling request: pid=7348 uid=10100 gid=10100 tid=7355</div><div class="line">04-10 10:03:48.551 7366-7366/? A/DEBUG: *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***</div><div class="line">04-10 10:03:48.551 7366-7366/? A/DEBUG: Build fingerprint: 'Android/sdk_google_phone_x86/generic_x86:7.1.1/NYC/3756122:userdebug/test-keys'</div><div class="line">04-10 10:03:48.551 7366-7366/? A/DEBUG: Revision: '0'</div><div class="line">04-10 10:03:48.551 7366-7366/? A/DEBUG: ABI: 'x86'</div><div class="line">04-10 10:03:48.551 7366-7366/? A/DEBUG: pid: 7348, tid: 7355, name: JDWP  &gt;&gt;&gt; me.ipcreator.ui.debug &lt;&lt;&lt;</div><div class="line">04-10 10:03:48.551 7366-7366/? A/DEBUG: signal 6 (SIGABRT), code -6 (SI_TKILL), fault addr --------</div><div class="line">04-10 10:03:48.551 7366-7366/? A/DEBUG: Abort message: 'art/runtime/jdwp/jdwp_event.cc:661] Check failed: Thread::Current() != GetDebugThread() (Thread::Current()=0xac58f400, GetDebugThread()=0xac58f400) Expected event thread'</div><div class="line">04-10 10:03:48.551 7366-7366/? A/DEBUG:     eax 00000000  ebx 00001cb4  ecx 00001cbb  edx 00000006</div><div class="line">04-10 10:03:48.551 7366-7366/? A/DEBUG:     esi b12d0978  edi b12d0920</div><div class="line">04-10 10:03:48.551 7366-7366/? A/DEBUG:     xcs 00000073  xds 0000007b  xes 0000007b  xfs 0000003b  xss 0000007b</div><div class="line">04-10 10:03:48.551 7366-7366/? A/DEBUG:     eip b6366424  ebp b12ceac8  esp b12cea6c  flags 00000296</div><div class="line">04-10 10:03:48.555 7366-7366/? A/DEBUG: backtrace:</div><div class="line">04-10 10:03:48.555 7366-7366/? A/DEBUG:     #00 pc ffffe424  [vdso:b6366000] (__kernel_vsyscall+16)</div><div class="line">04-10 10:03:48.555 7366-7366/? A/DEBUG:     #01 pc 0007a03c  /system/lib/libc.so (tgkill+28)</div><div class="line">04-10 10:03:48.555 7366-7366/? A/DEBUG:     #02 pc 00075885  /system/lib/libc.so (pthread_kill+85)</div><div class="line">04-10 10:03:48.555 7366-7366/? A/DEBUG:     #03 pc 0002785a  /system/lib/libc.so (raise+42)</div><div class="line">04-10 10:03:48.555 7366-7366/? A/DEBUG:     #04 pc 0001ee36  /system/lib/libc.so (abort+86)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #05 pc 005183c5  /system/lib/libart.so (_ZN3art7Runtime5AbortEPKc+565)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #06 pc 0011a5b3  /system/lib/libart.so (_ZN3art10LogMessageD1Ev+1747)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #07 pc 0039b74d  /system/lib/libart.so (_ZN3art4JDWP9JdwpState24AcquireJdwpTokenForEventEy+733)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #08 pc 0039acf3  /system/lib/libart.so (_ZN3art4JDWP9JdwpState29SendRequestAndPossiblySuspendEPNS0_9ExpandBufENS0_17JdwpSuspendPolicyEy+211)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #09 pc 003a0ec9  /system/lib/libart.so (_ZN3art4JDWP9JdwpState16PostClassPrepareEPNS_6mirror5ClassE+1705)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #10 pc 001c2a85  /system/lib/libart.so (_ZN3art3Dbg16PostClassPrepareEPNS_6mirror5ClassE+53)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #11 pc 001689fc  /system/lib/libart.so (_ZN3art11ClassLinker11DefineClassEPNS_6ThreadEPKcjNS_6HandleINS_6mirror11ClassLoaderEEERKNS_7DexFileERKNS9_8ClassDefE+1116)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #12 pc 001683e9  /system/lib/libart.so (_ZN3art11ClassLinker26FindClassInPathClassLoaderERNS_33ScopedObjectAccessAlreadyRunnableEPNS_6ThreadEPKcjNS_6HandleINS_6mirror11ClassLoaderEEEPPNS8_5ClassE+1865)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #13 pc 0016979b  /system/lib/libart.so (_ZN3art11ClassLinker9FindClassEPNS_6ThreadEPKcNS_6HandleINS_6mirror11ClassLoaderEEE+1163)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #14 pc 005a7a7a  /system/lib/libart.so (_ZN3art8verifier12RegTypeCache12ResolveClassEPKcPNS_6mirror11ClassLoaderE+186)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #15 pc 005a742d  /system/lib/libart.so (_ZN3art8verifier12RegTypeCache4FromEPNS_6mirror11ClassLoaderEPKcb+701)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #16 pc 005a70fd  /system/lib/libart.so (_ZN3art8verifier12RegTypeCache14FromDescriptorEPNS_6mirror11ClassLoaderEPKcb+77)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #17 pc 005862ed  /system/lib/libart.so (_ZN3art8verifier14MethodVerifier26ResolveClassAndCheckAccessEj+173)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #18 pc 005960c4  /system/lib/libart.so (_ZN3art8verifier14MethodVerifier27ResolveMethodAndCheckAccessEjNS0_10MethodTypeE+84)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #19 pc 0059265c  /system/lib/libart.so (_ZN3art8verifier14MethodVerifier20VerifyInvocationArgsEPKNS_11InstructionENS0_10MethodTypeEb+76)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #20 pc 00587e02  /system/lib/libart.so (_ZN3art8verifier14MethodVerifier25CodeFlowVerifyInstructionEPj+4914)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #21 pc 00585f96  /system/lib/libart.so (_ZN3art8verifier14MethodVerifier20CodeFlowVerifyMethodEv+358)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #22 pc 00581c9d  /system/lib/libart.so (_ZN3art8verifier14MethodVerifier14VerifyCodeFlowEv+973)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #23 pc 0057da56  /system/lib/libart.so (_ZN3art8verifier14MethodVerifier6VerifyEv+854)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #24 pc 0057c742  /system/lib/libart.so (_ZN3art8verifier14MethodVerifier12VerifyMethodEPNS_6ThreadEjPKNS_7DexFileENS_6HandleINS_6mirror8DexCacheEEENS7_INS8_11ClassLoaderEEEPKNS4_8ClassDefEPKNS4_8CodeItemEPNS_9ArtMethodEjPNS_17CompilerCallbacksEbNS_11LogSeverityEbPNSt3__112basic_stringIcNSO_11char_traitsIcEENSO_9allocatorIcEEEE+226)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #25 pc 0057c1c7  /system/lib/libart.so (_ZN3art8verifier14MethodVerifier13VerifyMethodsILb0EEENS1_11FailureDataEPNS_6ThreadEPNS_11ClassLinkerEPKNS_7DexFileEPKNS8_8ClassDefEPNS_21ClassDataItemIteratorENS_6HandleINS_6mirror8DexCacheEEENSG_INSH_11ClassLoaderEEEPNS_17CompilerCallbacksEbNS_11LogSeverityEbPNSt3__112basic_stringIcNSP_11char_traitsIcEENSP_9allocatorIcEEEE+791)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #26 pc 0057b1f9  /system/lib/libart.so (_ZN3art8verifier14MethodVerifier11VerifyClassEPNS_6ThreadEPKNS_7DexFileENS_6HandleINS_6mirror8DexCacheEEENS7_INS8_11ClassLoaderEEEPKNS4_8ClassDefEPNS_17CompilerCallbacksEbNS_11LogSeverityEPNSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEE+921)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #27 pc 0057a4b9  /system/lib/libart.so (_ZN3art8verifier14MethodVerifier11VerifyClassEPNS_6ThreadEPNS_6mirror5ClassEPNS_17CompilerCallbacksEbNS_11LogSeverityEPNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE+841)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #28 pc 00174386  /system/lib/libart.so (_ZN3art11ClassLinker11VerifyClassEPNS_6ThreadENS_6HandleINS_6mirror5ClassEEENS_11LogSeverityE+2102)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #29 pc 0017a406  /system/lib/libart.so (_ZN3art11ClassLinker15InitializeClassEPNS_6ThreadENS_6HandleINS_6mirror5ClassEEEbb+326)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #30 pc 00158dde  /system/lib/libart.so (_ZN3art11ClassLinker17EnsureInitializedEPNS_6ThreadENS_6HandleINS_6mirror5ClassEEEbb+222)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #31 pc 001b60da  /system/lib/libart.so (_ZN3artL17GetFieldValueImplEyyyPNS_4JDWP9ExpandBufEb+1866)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #32 pc 001b667e  /system/lib/libart.so (_ZN3art3Dbg19GetStaticFieldValueEyyPNS_4JDWP9ExpandBufE+78)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #33 pc 003a4c5d  /system/lib/libart.so (_ZN3art4JDWPL12RT_GetValuesEPNS0_9JdwpStateEPNS0_7RequestEPNS0_9ExpandBufE+141)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #34 pc 003a2ea4  /system/lib/libart.so (_ZN3art4JDWP9JdwpState14ProcessRequestEPNS0_7RequestEPNS0_9ExpandBufEPb+1044)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #35 pc 003ab570  /system/lib/libart.so (_ZN3art4JDWP9JdwpState12HandlePacketEv+192)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #36 pc 00678df3  /system/lib/libart.so (_ZN3art4JDWP12JdwpAdbState15ProcessIncomingEv+1139)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #37 pc 003ab9d1  /system/lib/libart.so (_ZN3art4JDWP9JdwpState3RunEv+593)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #38 pc 003aae50  /system/lib/libart.so (_ZN3art4JDWPL15StartJdwpThreadEPv+48)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #39 pc 00074fe2  /system/lib/libc.so (_ZL15__pthread_startPv+210)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #40 pc 0002029e  /system/lib/libc.so (__start_thread+30)</div><div class="line">04-10 10:03:48.556 7366-7366/? A/DEBUG:     #41 pc 0001e076  /system/lib/libc.so (__bionic_clone+70)</div><div class="line">04-10 10:03:48.863 1607-7371/system_process W/ActivityManager:   Force finishing activity me.ipcreator.ui.debug/org.ipcreator.ui.MainActivity</div></pre></td></tr></table></figure>
<h2 id="Analyze-the-crash-info"><a href="#Analyze-the-crash-info" class="headerlink" title="Analyze the crash info"></a>Analyze the crash info</h2><blockquote>
<p>04-10 10:03:48.551 7366-7366/? A/DEBUG: Abort message: ‘art/runtime/jdwp/jdwp_event.cc:661] Check failed: Thread::Current() != GetDebugThread() (Thread::Current()=0xac58f400, GetDebugThread()=0xac58f400) Expected event thread’</p>
</blockquote>
<h2 id="Search-the-Google-Stack-Overflow"><a href="#Search-the-Google-Stack-Overflow" class="headerlink" title="Search the Google/Stack Overflow"></a>Search the Google/Stack Overflow</h2><p>Problem could be related with Android version 7.x, i removed all the breakpoints in nested functions and it worked, tested with Android version 6.0 too, and it is working without problem.</p>
<p>According to google developers team response, it was fixed on 12/1/2016 and will be applied in next release.</p>
<p>In my case i had to disable Instant Run. It seems like Instant Run has all sorts of side effects and this can be one of them.<br>Note, in Android Studio, the is under File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Instant Run</p>
<h2 id="Summarize-the-process"><a href="#Summarize-the-process" class="headerlink" title="Summarize the process"></a>Summarize the process</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://stackoverflow.com/questions/40618803/android-app-crashes-when-launched-in-debug-mode" target="_blank" rel="external">Android app crashes when launched in debug mode</a><br><a href="https://code.google.com/p/android/issues/detail?id=227513" target="_blank" rel="external"><br>Issue 227513:    art/runtime/jdwp/jdwp_event.cc:661] Check failed: Thread::Current() != GetDebugThread() (Thread::Current()=0x7ffeecc19400, GetDebugThread()=0x7ffeecc19400) Expected event thread</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/android_debug_bridge-600x338.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fetch the log info&lt;/li&gt;
&lt;li&gt;Analyze the crash info&lt;/li&gt;
&lt;li&gt;Search the Google/Stack Overflow&lt;/li&gt;
&lt;li&gt;Summarize the process&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Debug" scheme="http://ipcreator.me/tags/Debug/"/>
    
      <category term="Android Studio" scheme="http://ipcreator.me/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Become Your Master of Life</title>
    <link href="http://ipcreator.me/2017/04/09/MyView/to-be-the-master-of-yourself/"/>
    <id>http://ipcreator.me/2017/04/09/MyView/to-be-the-master-of-yourself/</id>
    <published>2017-04-09T11:26:06.000Z</published>
    <updated>2017-04-09T11:47:43.960Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/masteringlifelogo-800.jpg" alt=""></p>
<blockquote>
<p>Master of your brain<br>Master of your emotion<br>Master of your mind<br>Master of your action<br>Master of your habit<br>Master of your life</p>
</blockquote>
<ol>
<li>Keep Deliberate Practice Day by Day.</li>
<li>Break time-consuming tasks into smaller tasks and work on them one at a time.</li>
<li>Learn and Organize more Basic  Concepts.</li>
<li>Master more meta skills.</li>
</ol>
<a id="more"></a>
<h2 id="Brain"><a href="#Brain" class="headerlink" title="Brain"></a>Brain</h2><p>Deep thinking changes my life.</p>
<h2 id="Emotion"><a href="#Emotion" class="headerlink" title="Emotion"></a>Emotion</h2><p>Positive, Sunny</p>
<h2 id="Mind"><a href="#Mind" class="headerlink" title="Mind"></a>Mind</h2><p>Wise</p>
<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>Focus your Ultimate Goal</p>
<h2 id="Habit"><a href="#Habit" class="headerlink" title="Habit"></a>Habit</h2><p>Good habits</p>
<h2 id="Life"><a href="#Life" class="headerlink" title="Life"></a>Life</h2><p>Healthy, Harmony, Meaningful, Valuable</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/masteringlifelogo-800.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Master of your brain&lt;br&gt;Master of your emotion&lt;br&gt;Master of your mind&lt;br&gt;Master of your action&lt;br&gt;Master of your habit&lt;br&gt;Master of your life&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Keep Deliberate Practice Day by Day.&lt;/li&gt;
&lt;li&gt;Break time-consuming tasks into smaller tasks and work on them one at a time.&lt;/li&gt;
&lt;li&gt;Learn and Organize more Basic  Concepts.&lt;/li&gt;
&lt;li&gt;Master more meta skills.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>The Basic Concepts of C Compiler</title>
    <link href="http://ipcreator.me/2017/04/09/Program/Tools/C&amp;C++/the-basic-concepts-of-c-compiler/"/>
    <id>http://ipcreator.me/2017/04/09/Program/Tools/C&amp;C++/the-basic-concepts-of-c-compiler/</id>
    <published>2017-04-09T00:48:06.000Z</published>
    <updated>2017-04-09T01:24:43.600Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/GCC_CompilationProcess.png" alt=""></p>
<p>见过最多的，也最可悲的是—— 永远不相信自己所有的问题就出在自己从来都不肯耐心把最基础的东西弄清楚弄明白。<sup>[1]<sup></sup></sup></p>
<a id="more"></a>
<h1 id="手把手教你构建-C-语言编译器"><a href="#手把手教你构建-C-语言编译器" class="headerlink" title="手把手教你构建 C 语言编译器"></a><a href="http://lotabout.me/2015/write-a-C-interpreter-0/" target="_blank" rel="external">手把手教你构建 C 语言编译器</a></h1><h2 id="手把手教你构建-C-语言编译器（0）——前言"><a href="#手把手教你构建-C-语言编译器（0）——前言" class="headerlink" title="手把手教你构建 C 语言编译器（0）——前言"></a>手把手教你构建 C 语言编译器（0）——前言</h2><h2 id="手把手教你构建-C-语言编译器（1）——设计"><a href="#手把手教你构建-C-语言编译器（1）——设计" class="headerlink" title="手把手教你构建 C 语言编译器（1）——设计"></a>手把手教你构建 C 语言编译器（1）——设计</h2><h2 id="手把手教你构建-C-语言编译器（2）——虚拟机"><a href="#手把手教你构建-C-语言编译器（2）——虚拟机" class="headerlink" title="手把手教你构建 C 语言编译器（2）——虚拟机"></a>手把手教你构建 C 语言编译器（2）——虚拟机</h2><h2 id="手把手教你构建-C-语言编译器（3）——词法分析器"><a href="#手把手教你构建-C-语言编译器（3）——词法分析器" class="headerlink" title="手把手教你构建 C 语言编译器（3）——词法分析器"></a>手把手教你构建 C 语言编译器（3）——词法分析器</h2><h2 id="手把手教你构建-C-语言编译器（4）——递归下降"><a href="#手把手教你构建-C-语言编译器（4）——递归下降" class="headerlink" title="手把手教你构建 C 语言编译器（4）——递归下降"></a>手把手教你构建 C 语言编译器（4）——递归下降</h2><h2 id="手把手教你构建-C-语言编译器（5）——变量定义"><a href="#手把手教你构建-C-语言编译器（5）——变量定义" class="headerlink" title="手把手教你构建 C 语言编译器（5）——变量定义"></a>手把手教你构建 C 语言编译器（5）——变量定义</h2><h2 id="手把手教你构建-C-语言编译器（6）——函数定义"><a href="#手把手教你构建-C-语言编译器（6）——函数定义" class="headerlink" title="手把手教你构建 C 语言编译器（6）——函数定义"></a>手把手教你构建 C 语言编译器（6）——函数定义</h2><h2 id="手把手教你构建-C-语言编译器（7）——语句"><a href="#手把手教你构建-C-语言编译器（7）——语句" class="headerlink" title="手把手教你构建 C 语言编译器（7）——语句"></a>手把手教你构建 C 语言编译器（7）——语句</h2><h2 id="手把手教你构建-C-语言编译器（8）——表达式"><a href="#手把手教你构建-C-语言编译器（8）——表达式" class="headerlink" title="手把手教你构建 C 语言编译器（8）——表达式"></a>手把手教你构建 C 语言编译器（8）——表达式</h2><h2 id="手把手教你构建-C-语言编译器（9）——总结"><a href="#手把手教你构建-C-语言编译器（9）——总结" class="headerlink" title="手把手教你构建 C 语言编译器（9）——总结"></a>手把手教你构建 C 语言编译器（9）——总结</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]<a href="http://zhibimo.com/read/xiaolai/everyone-can-use-english/chapter6.html" target="_blank" rel="external">everyone-can-use-english</a><br>[2]<a href="http://lotabout.me/2015/write-a-C-interpreter-0/" target="_blank" rel="external">手把手教你构建 C 语言编译器</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/GCC_CompilationProcess.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;见过最多的，也最可悲的是—— 永远不相信自己所有的问题就出在自己从来都不肯耐心把最基础的东西弄清楚弄明白。&lt;sup&gt;[1]&lt;sup&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="C" scheme="http://ipcreator.me/tags/C/"/>
    
      <category term="Compiler" scheme="http://ipcreator.me/tags/Compiler/"/>
    
  </entry>
  
  <entry>
    <title>The Basic Concepts of Memory</title>
    <link href="http://ipcreator.me/2017/04/09/Program/Tools/Computer/the-basic-concepts-of-memory/"/>
    <id>http://ipcreator.me/2017/04/09/Program/Tools/Computer/the-basic-concepts-of-memory/</id>
    <published>2017-04-08T23:52:06.000Z</published>
    <updated>2017-04-09T01:24:45.784Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/Memory.jpg" alt=""></p>
<p>见过最多的，也最可悲的是—— 永远不相信自己所有的问题就出在自己从来都不肯耐心把最基础的东西弄清楚弄明白。<sup>[1]<sup></sup></sup></p>
<a id="more"></a>
<h2 id="通俗计算机工作原理"><a href="#通俗计算机工作原理" class="headerlink" title="通俗计算机工作原理"></a><a href="http://book.51cto.com/art/201311/416397.htm" target="_blank" rel="external">通俗计算机工作原理</a></h2><p>首先，我们从计算机工作原理谈起。</p>
<p>在启动Excel程序之前，Excel程序以可执行文件的形式存储在计算机硬盘里，这时候它什么也做不了，只是计算机硬盘里的二进制代码而已，就像密封在魔瓶里的小怪兽，等待着拔开魔瓶盖子的那个人。</p>
<p>那么，谁是那个打开魔瓶盖子的人呢？这个人就是作为Excel使用者的我们！我们双击Excel图标启动Excel，就相当于打开魔瓶盖子，Excel小怪兽从计算机硬盘加载到计算机内存中，小怪兽获得了自由，而计算机内存就是Excel小怪兽施展本领的地方。</p>
<p><img src="http://s7.51cto.com/wyfs01/M00/32/5C/wKioJlJ-GFOSIhFHAACUWrKyWBo821.jpg" alt=""></p>
<p>可以这样比喻：Excel程序启动之前存在于计算机硬盘中时，它是扁平的、僵硬的、毫无生命的二进制代码，但是，当Excel程序启动并加载到计算机内存以后，它就变成了立体的、鲜活的、有生命的Excel程序。</p>
<p>内存是计算机的重要组成部分，我们可以把它想象成工作台边上的一排排立体货架，程序从计算机硬盘加载到内存的过程就相当于把货物从“紧锁的”库房（计算机硬盘）中取出，摆放到工作台边的一排排货架（内存）上，以方便计算机中央处理器（又称为CPU）随时加工取用。</p>
<p>为了更清楚地说明问题，我们用Excel工作表模拟计算机的内存结构。假设图1-2所示的工作表就是计算机内存，工作表中的每个单元格相当于计算机内存中的一个存储位置，我们发现计算机内存中已经加载了如下数据：</p>
<p>内存B2位置（B2单元格）存储了一个数值12；</p>
<p>内存B3位置（B3单元格）存储了一个数值5；</p>
<p>内存B5位置（B5单元格）存储了一个字符”Jack”；</p>
<p>内存B6位置（B6单元格）存储了一个字符串”Lin”；</p>
<p>内存B10:H19位置存储了一个Excel工作簿WorkBook(1)。</p>
<p>还有很多已经加载到计算机内存中的其他各种内容。<br><img src="http://s4.51cto.com/wyfs01/M01/32/5C/wKioJlJ-GJfQg45FAAD3o3s6pVI252.jpg" alt=""></p>
<p>像车间工作台旁边的货架一样，计算机内存中的每个存储位置都有一个位置坐标（或者称作“存储地址”），比如位置B2就是数值12存储的地址；位置B5就是字符串”Jack”存储的地址。</p>
<p>简单地了解了计算机内存后，我们再来了解另一个重要的计算机部件的功用，那就是：计算机中央处理器，也叫CPU。</p>
<p>当我们双击Excel图标启动Excel时，是谁把Excel加载到计算机内存中的一个个存储位置上的呢？具体做这件事的人是我们吗？不是，我们只是双击了一下Excel图标，给计算机发出了一个启动Excel程序的命令而已，具体做这件事的是计算机中央处理器（CPU）。</p>
<p>计算机中央处理器是计算机中最勤劳的部件，计算机的绝大部分工作都由它来完成，比如，把Excel程序从计算机硬盘加载到计算机内存中；执行VBA程序等。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://zhibimo.com/read/xiaolai/everyone-can-use-english/chapter6.html" target="_blank" rel="external">everyone-can-use-english</a><br>[2]<a href="http://book.51cto.com/art/201311/416397.htm" target="_blank" rel="external">通俗计算机工作原理</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/Memory.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;见过最多的，也最可悲的是—— 永远不相信自己所有的问题就出在自己从来都不肯耐心把最基础的东西弄清楚弄明白。&lt;sup&gt;[1]&lt;sup&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Memory" scheme="http://ipcreator.me/tags/Memory/"/>
    
  </entry>
  
  <entry>
    <title>The Basic Concepts of Python</title>
    <link href="http://ipcreator.me/2017/04/09/Program/Tools/Python/the-basic-concepts-of-python/"/>
    <id>http://ipcreator.me/2017/04/09/Program/Tools/Python/the-basic-concepts-of-python/</id>
    <published>2017-04-08T23:15:06.000Z</published>
    <updated>2017-04-08T23:17:53.192Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/python-logo-master-v3-TM.png" alt=""></p>
<p>见过最多的，也最可悲的是—— 永远不相信自己所有的问题就出在自己从来都不肯耐心把最基础的东西弄清楚弄明白。<sup>[1]<sup></sup></sup></p>
<a id="more"></a>
<h1 id="Python教程"><a href="#Python教程" class="headerlink" title="Python教程"></a><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python教程</a></h1><h2 id="Python简介"><a href="#Python简介" class="headerlink" title="Python简介"></a>Python简介</h2><h2 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h2><h3 id="Python解释器"><a href="#Python解释器" class="headerlink" title="Python解释器"></a>Python解释器</h3><h2 id="第一个Python程序"><a href="#第一个Python程序" class="headerlink" title="第一个Python程序"></a>第一个Python程序</h2><h3 id="使用文本编辑器"><a href="#使用文本编辑器" class="headerlink" title="使用文本编辑器"></a>使用文本编辑器</h3><h3 id="Python代码运行助手"><a href="#Python代码运行助手" class="headerlink" title="Python代码运行助手"></a>Python代码运行助手</h3><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><h2 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h2><h3 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h3><h3 id="字符串和编码"><a href="#字符串和编码" class="headerlink" title="字符串和编码"></a>字符串和编码</h3><h3 id="使用list和tuple"><a href="#使用list和tuple" class="headerlink" title="使用list和tuple"></a>使用list和tuple</h3><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h3 id="使用dict和set"><a href="#使用dict和set" class="headerlink" title="使用dict和set"></a>使用dict和set</h3><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><h3 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h3><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h3><h3 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h3><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h3><h3 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h3><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h3><h3 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h3><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><h3 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h3><h3 id="实例属性和类属性"><a href="#实例属性和类属性" class="headerlink" title="实例属性和类属性"></a>实例属性和类属性</h3><h3 id="面向对象高级编程"><a href="#面向对象高级编程" class="headerlink" title="面向对象高级编程"></a>面向对象高级编程</h3><h3 id="使用slots"><a href="#使用slots" class="headerlink" title="使用slots"></a>使用<strong>slots</strong></h3><h3 id="使用-property"><a href="#使用-property" class="headerlink" title="使用@property"></a>使用@property</h3><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><h3 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h3><h3 id="使用枚举类"><a href="#使用枚举类" class="headerlink" title="使用枚举类"></a>使用枚举类</h3><h3 id="使用元类"><a href="#使用元类" class="headerlink" title="使用元类"></a>使用元类</h3><h2 id="错误、调试和测试"><a href="#错误、调试和测试" class="headerlink" title="错误、调试和测试"></a>错误、调试和测试</h2><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><h3 id="文档测试"><a href="#文档测试" class="headerlink" title="文档测试"></a>文档测试</h3><h2 id="IO编程"><a href="#IO编程" class="headerlink" title="IO编程"></a>IO编程</h2><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><h3 id="StringIO和BytesIO"><a href="#StringIO和BytesIO" class="headerlink" title="StringIO和BytesIO"></a>StringIO和BytesIO</h3><h3 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h3><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><h3 id="进程-vs-线程"><a href="#进程-vs-线程" class="headerlink" title="进程 vs. 线程"></a>进程 vs. 线程</h3><h3 id="分布式进程"><a href="#分布式进程" class="headerlink" title="分布式进程"></a>分布式进程</h3><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h2 id="常用内建模块"><a href="#常用内建模块" class="headerlink" title="常用内建模块"></a>常用内建模块</h2><h3 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h3><h3 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h3><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><h3 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h3><h3 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h3><h3 id="contextlib"><a href="#contextlib" class="headerlink" title="contextlib"></a>contextlib</h3><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><h3 id="HTMLParser"><a href="#HTMLParser" class="headerlink" title="HTMLParser"></a>HTMLParser</h3><h3 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h3><h2 id="常用第三方模块"><a href="#常用第三方模块" class="headerlink" title="常用第三方模块"></a>常用第三方模块</h2><h3 id="PIL"><a href="#PIL" class="headerlink" title="PIL"></a>PIL</h3><h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><h2 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h2><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="TCP-IP简介"><a href="#TCP-IP简介" class="headerlink" title="TCP/IP简介"></a>TCP/IP简介</h3><h3 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h3><h3 id="UDP编程"><a href="#UDP编程" class="headerlink" title="UDP编程"></a>UDP编程</h3><h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><h3 id="SMTP发送邮件"><a href="#SMTP发送邮件" class="headerlink" title="SMTP发送邮件"></a>SMTP发送邮件</h3><h3 id="POP3收取邮件"><a href="#POP3收取邮件" class="headerlink" title="POP3收取邮件"></a>POP3收取邮件</h3><h2 id="访问数据库"><a href="#访问数据库" class="headerlink" title="访问数据库"></a>访问数据库</h2><h3 id="使用SQLite"><a href="#使用SQLite" class="headerlink" title="使用SQLite"></a>使用SQLite</h3><h3 id="使用MySQL"><a href="#使用MySQL" class="headerlink" title="使用MySQL"></a>使用MySQL</h3><h3 id="使用SQLAlchemy"><a href="#使用SQLAlchemy" class="headerlink" title="使用SQLAlchemy"></a>使用SQLAlchemy</h3><h2 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h2><h3 id="HTTP协议简介"><a href="#HTTP协议简介" class="headerlink" title="HTTP协议简介"></a>HTTP协议简介</h3><h3 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h3><h3 id="WSGI接口"><a href="#WSGI接口" class="headerlink" title="WSGI接口"></a>WSGI接口</h3><h3 id="使用Web框架"><a href="#使用Web框架" class="headerlink" title="使用Web框架"></a>使用Web框架</h3><h3 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h3><h2 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h2><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><h3 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h3><h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><h3 id="aiohttp"><a href="#aiohttp" class="headerlink" title="aiohttp"></a>aiohttp</h3><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="Day-1-搭建开发环境"><a href="#Day-1-搭建开发环境" class="headerlink" title="Day 1 - 搭建开发环境"></a>Day 1 - 搭建开发环境</h3><h3 id="Day-2-编写Web-App骨架"><a href="#Day-2-编写Web-App骨架" class="headerlink" title="Day 2 - 编写Web App骨架"></a>Day 2 - 编写Web App骨架</h3><h3 id="Day-3-编写ORM"><a href="#Day-3-编写ORM" class="headerlink" title="Day 3 - 编写ORM"></a>Day 3 - 编写ORM</h3><h3 id="Day-4-编写Model"><a href="#Day-4-编写Model" class="headerlink" title="Day 4 - 编写Model"></a>Day 4 - 编写Model</h3><h3 id="Day-5-编写Web框架"><a href="#Day-5-编写Web框架" class="headerlink" title="Day 5 - 编写Web框架"></a>Day 5 - 编写Web框架</h3><h3 id="Day-6-编写配置文件"><a href="#Day-6-编写配置文件" class="headerlink" title="Day 6 - 编写配置文件"></a>Day 6 - 编写配置文件</h3><h3 id="Day-7-编写MVC"><a href="#Day-7-编写MVC" class="headerlink" title="Day 7 - 编写MVC"></a>Day 7 - 编写MVC</h3><h3 id="Day-8-构建前端"><a href="#Day-8-构建前端" class="headerlink" title="Day 8 - 构建前端"></a>Day 8 - 构建前端</h3><h3 id="Day-9-编写API"><a href="#Day-9-编写API" class="headerlink" title="Day 9 - 编写API"></a>Day 9 - 编写API</h3><h3 id="Day-10-用户注册和登录"><a href="#Day-10-用户注册和登录" class="headerlink" title="Day 10 - 用户注册和登录"></a>Day 10 - 用户注册和登录</h3><h3 id="Day-11-编写日志创建页"><a href="#Day-11-编写日志创建页" class="headerlink" title="Day 11 - 编写日志创建页"></a>Day 11 - 编写日志创建页</h3><h3 id="Day-12-编写日志列表页"><a href="#Day-12-编写日志列表页" class="headerlink" title="Day 12 - 编写日志列表页"></a>Day 12 - 编写日志列表页</h3><h3 id="Day-13-提升开发效率"><a href="#Day-13-提升开发效率" class="headerlink" title="Day 13 - 提升开发效率"></a>Day 13 - 提升开发效率</h3><h3 id="Day-14-完成Web-App"><a href="#Day-14-完成Web-App" class="headerlink" title="Day 14 - 完成Web App"></a>Day 14 - 完成Web App</h3><h3 id="Day-15-部署Web-App"><a href="#Day-15-部署Web-App" class="headerlink" title="Day 15 - 部署Web App"></a>Day 15 - 部署Web App</h3><h3 id="Day-16-编写移动App"><a href="#Day-16-编写移动App" class="headerlink" title="Day 16 - 编写移动App"></a>Day 16 - 编写移动App</h3><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h2 id="期末总结"><a href="#期末总结" class="headerlink" title="期末总结"></a>期末总结</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://zhibimo.com/read/xiaolai/everyone-can-use-english/chapter6.html" target="_blank" rel="external">everyone-can-use-english</a><br>[2]<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/python-logo-master-v3-TM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;见过最多的，也最可悲的是—— 永远不相信自己所有的问题就出在自己从来都不肯耐心把最基础的东西弄清楚弄明白。&lt;sup&gt;[1]&lt;sup&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Python" scheme="http://ipcreator.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>The Basic Concepts of Linux Server</title>
    <link href="http://ipcreator.me/2017/04/09/Program/Tools/Linux/the-basic-concepts-of-linux-server/"/>
    <id>http://ipcreator.me/2017/04/09/Program/Tools/Linux/the-basic-concepts-of-linux-server/</id>
    <published>2017-04-08T22:43:06.000Z</published>
    <updated>2017-04-08T23:16:22.651Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/linux-server.jpg" alt=""></p>
<p>见过最多的，也最可悲的是—— 永远不相信自己所有的问题就出在自己从来都不肯耐心把最基础的东西弄清楚弄明白。<sup>[1]<sup></sup></sup></p>
<a id="more"></a>
<h1 id="鸟哥的-Linux-私房菜-–-服务器架设篇"><a href="#鸟哥的-Linux-私房菜-–-服务器架设篇" class="headerlink" title="鸟哥的 Linux 私房菜 – 服务器架设篇"></a><a href="http://cn.linux.vbird.org/" target="_blank" rel="external">鸟哥的 Linux 私房菜 – 服务器架设篇</a></h1><p><a href="http://cn.linux.vbird.org/image/title/title_03.png" target="_blank" rel="external">http://cn.linux.vbird.org/image/title/title_03.png</a></p>
<p><a href="http://cn.linux.vbird.org/linux_server/#part1" target="_blank" rel="external">第一部份：架站前的进修专区</a><br><a href="http://cn.linux.vbird.org/linux_server/#part2" target="_blank" rel="external">第二部分：主机的简易防火措施</a><br><a href="http://cn.linux.vbird.org/linux_server/#part3" target="_blank" rel="external">第三部分：局域网络内常见的服务器架设</a><br><a href="http://cn.linux.vbird.org/linux_server/#part4" target="_blank" rel="external">第四部分：常见因特网服务器架设</a><br><a href="http://cn.linux.vbird.org/linux_server/#part5" target="_blank" rel="external">第五部分：一些旧数据</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://zhibimo.com/read/xiaolai/everyone-can-use-english/chapter6.html" target="_blank" rel="external">everyone-can-use-english</a><br>[2]<a href="http://cn.linux.vbird.org/" target="_blank" rel="external">鸟哥的 Linux 私房菜 – 服务器架设篇</a><br><a href="http://cn.linux.vbird.org/image/title/title_03.png" target="_blank" rel="external">http://cn.linux.vbird.org/image/title/title_03.png</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/linux-server.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;见过最多的，也最可悲的是—— 永远不相信自己所有的问题就出在自己从来都不肯耐心把最基础的东西弄清楚弄明白。&lt;sup&gt;[1]&lt;sup&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Linux" scheme="http://ipcreator.me/tags/Linux/"/>
    
      <category term="Server" scheme="http://ipcreator.me/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>The Basic Concepts of Linux</title>
    <link href="http://ipcreator.me/2017/04/09/Program/Tools/Linux/the-basic-concepts-of-linux/"/>
    <id>http://ipcreator.me/2017/04/09/Program/Tools/Linux/the-basic-concepts-of-linux/</id>
    <published>2017-04-08T22:43:06.000Z</published>
    <updated>2017-04-08T23:06:41.252Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/linux-1-638.jpg" alt=""></p>
<p>见过最多的，也最可悲的是—— 永远不相信自己所有的问题就出在自己从来都不肯耐心把最基础的东西弄清楚弄明白。<sup>[1]<sup></sup></sup></p>
<a id="more"></a>
<h1 id="鸟哥的-Linux-私房菜-–-基础学习篇"><a href="#鸟哥的-Linux-私房菜-–-基础学习篇" class="headerlink" title="鸟哥的 Linux 私房菜 – 基础学习篇"></a><a href="http://cn.linux.vbird.org/" target="_blank" rel="external">鸟哥的 Linux 私房菜 – 基础学习篇</a></h1><p><a href="http://cn.linux.vbird.org/image/title/title_03.png" target="_blank" rel="external">http://cn.linux.vbird.org/image/title/title_03.png</a></p>
<h2 id="第一部份：Linux的规划与安装"><a href="#第一部份：Linux的规划与安装" class="headerlink" title="第一部份：Linux的规划与安装"></a><a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php#part1" target="_blank" rel="external">第一部份：Linux的规划与安装</a></h2><h2 id="第二部份：Linux文件、目录与磁盘格式"><a href="#第二部份：Linux文件、目录与磁盘格式" class="headerlink" title="第二部份：Linux文件、目录与磁盘格式"></a><a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php#part2" target="_blank" rel="external">第二部份：Linux文件、目录与磁盘格式</a></h2><h2 id="第三部份：学习Shell与Shell-Scripts"><a href="#第三部份：学习Shell与Shell-Scripts" class="headerlink" title="第三部份：学习Shell与Shell Scripts"></a><a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php#part3" target="_blank" rel="external">第三部份：学习Shell与Shell Scripts</a></h2><h2 id="第四部份：Linux使用者管理"><a href="#第四部份：Linux使用者管理" class="headerlink" title="第四部份：Linux使用者管理"></a><a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php#part4" target="_blank" rel="external">第四部份：Linux使用者管理</a></h2><h2 id="第五部份：Linux系统管理员"><a href="#第五部份：Linux系统管理员" class="headerlink" title="第五部份：Linux系统管理员"></a><a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php#part5" target="_blank" rel="external">第五部份：Linux系统管理员</a></h2><h2 id="第六部份：其他备份文章"><a href="#第六部份：其他备份文章" class="headerlink" title="第六部份：其他备份文章"></a><a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php#part6" target="_blank" rel="external">第六部份：其他备份文章</a></h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://zhibimo.com/read/xiaolai/everyone-can-use-english/chapter6.html" target="_blank" rel="external">everyone-can-use-english</a><br>[2]<a href="http://cn.linux.vbird.org/" target="_blank" rel="external">鸟哥的Linux私房菜</a><br>[3]<a href="https://wizardforcel.gitbooks.io/vbird-linux-basic-4e/content/index.html" target="_blank" rel="external">鸟哥的Linux私房菜：基础学习篇 第四版</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/linux-1-638.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;见过最多的，也最可悲的是—— 永远不相信自己所有的问题就出在自己从来都不肯耐心把最基础的东西弄清楚弄明白。&lt;sup&gt;[1]&lt;sup&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Linux" scheme="http://ipcreator.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Life of Pi</title>
    <link href="http://ipcreator.me/2017/04/08/MyView/Movie/life-of-pi/"/>
    <id>http://ipcreator.me/2017/04/08/MyView/Movie/life-of-pi/</id>
    <published>2017-04-07T23:03:18.000Z</published>
    <updated>2017-04-08T14:36:48.508Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img3.doubanio.com/view/movie_poster_cover/lpst/public/p1784592701.webp" alt=""></p>
<p>故事开始于蒙特娄，也结束于蒙特娄。一名在找寻灵感的作家（拉菲·斯波 Rafe Spall 饰）无意间得知派·帕帖尔（伊尔凡·可汗 Irrfan Khan 饰）的传奇故事。派的父亲（阿迪勒·侯赛因 Adil Hussain 饰）开了一家动物园。因这样特殊的生活环境，少年派（苏拉·沙玛 Suraj Sharma 饰 ）对信仰与人的本性自有一套看法。在派17岁那一年，他的父母决定举家移民加拿大以追求更好的生活，而他也必须离开他的初恋情人。在前往加拿大的船上，他们遇见一位残忍成性的法国厨师（杰拉尔·德帕迪约 Gérard Depardieu 饰）。当天深夜在茫茫大海中，原本令派感到刺激无比的暴风雨一瞬间就成了吞噬货船的大灾难。派却奇迹般地活了下来，搭着救生船在太平洋上漂流，而且有一名最令人意想不到的同伴——理查德·帕克，一只孟加拉老虎。神奇的冒险旅程就这样意外开始了……</p>
<a id="more"></a>
<p>导演: 李安<br>编剧: 扬·马特尔 / 大卫·麦基<br>主演: 苏拉·沙玛 / 拉菲·斯波 / 伊尔凡·可汗 / 杰拉尔·德帕迪约 / 塔布 / 更多…<br>类型: 剧情 / 奇幻 / 冒险<br>官方网站: www.lifeofpimovie.com<br>制片国家/地区: 美国 / 台湾 / 英国 / 加拿大<br>语言: 英语 / 泰米尔语 / 法语 / 日语 / 印地语 / 汉语普通话<br>上映日期: 2012-11-22(中国大陆) / 2012-09-28(纽约电影节) / 2012-11-21(美国)<br>片长: 127分钟<br>又名: 少年Pi的奇幻漂流 / 漂流少年Pi<br>IMDb链接: <a href="http://www.imdb.com/title/tt0454876" target="_blank" rel="external">tt0454876</a><br>官方小站: <a href="https://site.douban.com/foxmovies/" target="_blank" rel="external">《少年派的奇幻漂流》官方小站</a></p>
<h2 id="还原故事的真相：少年派毫不奇幻的残酷漂流"><a href="#还原故事的真相：少年派毫不奇幻的残酷漂流" class="headerlink" title="还原故事的真相：少年派毫不奇幻的残酷漂流"></a><a href="https://movie.douban.com/review/5666816/" target="_blank" rel="external">还原故事的真相：少年派毫不奇幻的残酷漂流</a></h2><p>版权归作者所有，任何形式转载请联系作者。<br>作者：水长东（来自豆瓣）<br>来源：<a href="https://movie.douban.com/review/5666816/" target="_blank" rel="external">https://movie.douban.com/review/5666816/</a></p>
<p> 还原故事的真相：少年派毫不奇幻的残酷漂流</p>
<p>少年Pi的奇幻漂流，听来是奇幻冒险的视觉大片，看过了则更是感叹大饱眼福。这并非3D效果运用的最好的一部电影，但炫目的视觉效果， 使整部电影浑然天成丝毫没有做作缀余之感。整部电影叙事虽无太大的情节波动，但其情节之间的起承转合并加上绝妙的摄影及特效依然让人十分震撼。</p>
<p>Pi是一个生于印度并且同时信仰基督教、伊斯兰教和印度教的少年，他的父亲经营着一个动物园，所以派从小就了解动物的习性……坦白说，这个故事的开头并不算吸引人，混合着宗教信仰的一个少年的成长经历。不过随后剧情正式进入到“奇幻漂流”。 派举家迁往加拿大，与他们同船的还有动物园的动物，Pi的父亲想把它们带到异国他乡卖个好价钱。但是动物园园长一家经历了一次类似泰坦尼克号式的沉船事件，除了Pi，家人全部遇难。Pi侥幸落在救生艇的舱盖布上得以生存，与他同处一艇的还有一条鬣狗、一只断了一条腿的斑马、一只母猩猩，以及一只成年孟加拉虎“理查德-帕克”。<br>在漂流的最初3天，鬣狗咬死了猩猩，活吃了斑马，老虎又杀死了鬣狗。接下来这个少年在海上求生的故事，就是如何对付理查德-帕克的故事。自知无法战胜老虎的Pi最终选择与它一起面对漂流生活。7个月中，他要收集淡水、捕鱼捉虾，他要使用一切海上生存技能喂饱老虎，也让自己活下来。当然，这场漂流也遇到了暴风雨、鲨鱼的袭击以及各种精彩而血腥的险境。在Pi与老虎所剩的食物耗尽后，陷入绝望的他们已准备从容赴死。但奇迹的是他们随着小船漂到了一座天堂般的岛屿。在短暂的停留休整之后，他发现这儿是个食人岛。惊恐的Pi与老虎再次开始了漂流，直到在墨西哥的海滩上获救，那只老虎却头也不回地消失了。</p>
<p>但是如果这部《少年和老虎海上历险记》情节发展到此为止，确实只是乏善可陈的无力写一篇影评了。但是直到少年派讲出最后那个所谓杜撰出来的第二个故事之后，往复的镜头便一幕一幕在脑海中闪现，之前的所有好像并无深意的打趣的细节都成为了伏笔，使这整个故事融会贯通的串联起来，打破了原本充满和谐和爱心并且奇幻的冒险故事，而只一个有些残酷无情的血淋淋的故事展现在眼前。</p>
<p>让我们先从电影的结尾说起。当派与两个日本的公司代表讲述了他的奇幻冒险之后，两个日本人并不相信且视为儿戏，并希望派讲出一个没有动物，没有小岛，没有狐鼬的真实故事。然后派讲出了另一个版本的海上求生记——其实，救生艇上并没有动物，只有一个厨子、一个断了腿的水手、Pi和他的母亲。厨子先后杀害并吃掉了水手，然后又杀死了母亲，最终派忍无可忍同样杀害并吃掉了水手。最后的现实是，最终只有Pi活了下来。这个故事伴随着两个日本人惊恐的表情讲完了，也许我们理所当然的会以为他们会选择这个第二个故事。但是当采访Pi的记者打开当时事件的档案时，写在后面的是“最后他和这只动物共同相伴走到了最后”这样一句话，显然他们采用了第一个不那么残酷而残忍的故事。接着Pi又问来访的记者，这两个故事，你相信哪个？记者说，有老虎的那个（第一个）。Pi回答：所以你跟随上帝。</p>
<p>当故事讲到这里的时候，相信很多观众已经意识到了，这个故事中的四个人与第一个故事中的四个动物是一一对应的。此刻导演担心观众不能联想到其联系，还让采访Pi的记者此时发问以一一对应：水手是斑马、厨子是鬣狗、猩猩是母亲、而Pi自己是老虎。也许可能你还不能接受第二个残酷的故事，但是导演在讲述第一个故事发生的过程中已经数次暗示我们，第二个故事才是真是发生的：1、大船遇到风暴，当Pi跳上救生船之后，在中国船员用汉语大喊“斑马！斑马！”后，斑马跳进了救生船。此处暗示中国船员的角色对应。2、当Pi的母亲想换素的菜品时，厨子表现的极为恶劣戏谑，刚好符合鬣狗穷凶极恶的品性。3、 猩猩是漂流很久之后才找到救生船并在Pi的帮助下上船，并且只有猩猩是在Pi的帮助下上船。4、在猩猩被鬣狗咬死之后，老虎才突然出现反扑了鬣狗。这与第二个故事中Pi的母亲被厨子杀了之后Pi终于忍无可忍杀了厨子的出场顺序一致。</p>
<p>如此看来，我们知道了第一个故事就是现实的隐喻，它含有两层：一是对真实事件的隐喻，二是经过自己的感悟而升华出对人性思考的隐喻。这第二层便是电影的核心，也是导演和主人公想要表达的核心。</p>
<p>先说说PI这个名字。它代表了无穷数位的无理数。当他在最后一节数学课上写了整整三个黑板的π值的时候，学生和老师们都在欢呼，每增加一个数字都代表了一个成就，而这就是人类的衡量文明进步的标志。如他父亲所说，科技带领人类在这几百年取得的成就抵得上信仰于人类文明几千年的成就。而在这个成就之上，影射的则是人类无穷无尽的欲望，就像π值的无穷尽一样。与此处对应的隐喻还有Pi小时候听到的那个神话，那个神张开嘴就是整个宇宙。这个隐喻同样出现在他看到了鲸鱼吃水母，看到了老虎的嘴，看到了幻境里鱼类的相残和张开的血盆大嘴。</p>
<p>Pi年幼是信仰多种宗教，印度教（家庭背景）、基督教（跟哥哥打赌去教堂里喝圣水，从而和牧师交谈）、伊斯兰教（被伊斯兰教的诵经所感染）。他认为这些宗教是可以兼容的，他认为自己这样就接近了神，了解了神。其实主人公Pi就是全人类的象征，无论哪种信仰，哪种宗教，作者和导演就是要在这里引起全人类对于信仰的反思。此处的隐喻是：1、在船上吃饭的时候，母亲因为是素食主义者，想跟厨子换全素的菜品。厨子先后指着肠和肉汁说：它以前是吃素的，它以前也是吃素的，随后引起了父亲的不满并险与其大打出手。2、饭桌上一个中国水手前来想要安慰这一家人，解释到：我是信佛的，但是这个肉汁我也吃。因为在船上，肉汁不算肉，只是调味品。3、Pi在饿极之后为了一条大鱼与老虎进行了殊死搏斗，全然不顾自己先前素食主义的信条。4、当Pi找到了那个小岛之后，饿极了的抛开地上的土寻找的植物的根茎满足的吃着。而老虎上岛之后看见大量狐鼬之后则是一顿猛抓猛吃，奇怪的是其他的狐鼬居然没有逃跑而是直立而视，这场景与Pi吃植物何其相似。</p>
<p>也许这是对素食主义以及素食主义者的一种讽刺的暗示。万物皆由造物主所创，动物与植物皆为生物，并无本质区别，所以老虎吃狐鼬就像吃一般。而此素食主义（或宗教信仰）则是建立在物质条件相对丰富的情况下，如果人在物质匮乏食不果腹境地就会放下束缚，正如在船上佛教徒会吃肉汁，Pi为了吃鱼肉不惜与老虎搏命一样。</p>
<p>与前面人类欲望无尽的隐喻相联系，则是暗示人类盲目的信仰，却同时做着违背神性的事；有着无穷的欲望，始终无法脱离心中的兽性。正如在饭桌上，爸爸教导Pi的这个桥段：一个人不能同时信仰这么多宗教，如果你什么都信就代表什么都不信。然后又告诉Pi，希望Pi拥有自己理性的思维，甚至与老爸信的冲突都没关系，只要是出于理性的。也许观众或许认为影片在批判宗教信仰而宣扬绝对理性，神在危机的时候没有向Pi深处援手，正如在暴风雨来的时候Pi跪地长啸“你带走了我的所有，你还想要什么？！”对神的质疑。</p>
<p>但个人认为影片向我们真是传递的信息恰恰是与上述相反的。还记的这前后两个故事的角色对应之后，第一个故事中的老虎就是主人公，那么故事中的Pi又是谁呢？传递给我的是一个明确的答案：心中的神性，在现实中引导人类的无形的神。它既独立于人类，又是人类的一部分。人类在很多时候抛弃了他，却又在关键的时刻接受他的指引，渡向脱离兽性的彼岸。在第一个故事中，老虎就代表着Pi甚至是人类罪恶和兽性的一面。当漂流初期的时候，老虎生猛无比，对Pi寸步不让；后面老虎因为饿极了之后又受惠于Pi食物的赏赐渐渐被驯化；一个最重要的桥段是当暴风雨来临的时候，Pi看见了穿破乌云从天而降的圣光，高呼神迹并极力要向老虎展示，但老虎畏惧不前，充满畏惧的蜷缩在角落里。</p>
<p>主人公在岛上获救，白天有着无穷的食物，干净的淡水，以致于他钟情于这个小岛，不想离开，因为对未知和死亡的恐惧让他想在这个岛永远生存下去，他甚至将女朋友送给他的红绳系到了那棵树上表达了他的依恋。然而黑夜降临，他看到了白天的湖水开始吞噬鱼类，那深不可测的湖水在吃着自己养育的动物，同时他又看到了那个仿佛莲花的树叶，一层层剥开后看到了人类的牙齿。白天和黑夜，馈赠与索取，吃和被吃。这就是此岸。这就是人类，这就是生存的残酷。</p>
<p>人不信了神了吗？你抛弃了我了吗？还记得影片前面Pi跑到教堂里与神父的对话吗？PI问神父，神将自己的儿子派到世上，让他为人类受尽了苦难，这叫爱吗？神父回答，你所要知道的就是，他爱我们。电影的结局也回答了这个问题：神的儿子带领拯救了人，脱离了自相残杀的苦海，一步步消除兽性，这就是上帝的爱。</p>
<p>Pi毅然的逃离的那个小岛，因为他不想继续活在过去，吃着同类生存下去。他跟随着神的指引，乘着小船，向着脱离兽性的彼岸。但此时，他仍然无法完全脱离兽性的一面，载着老虎继续出发。直到最后，那只老虎走进了丛林里，消失了。Pi哭很厉害，因为人类的兽性帮助人类生存了下来，在最危难的时刻生存了下来。而当人无限的追求并接近神性的时候，兽性会在不被察觉时离去了。他告诉作家，在老虎的眼里看到了另一个灵魂。而父亲告诉他，在老虎的眼睛里，你只能看到自己。父亲没有错，兽性没有情感和怜悯，与神性是毫不相容的。起初Pi并不相信，但是在漂流的过程中他渐渐明白了，这两者是不可能融汇调和的。“我以为它会回头，但它只是朝着森林深处望去，然后永远消失了。也许父亲说得对，它根本没有把我当成朋友，但我非常确定，我在它眼中看到的，绝对不只是我自己目光投射的倒影。它就那么头也不回的走了，但在我内心深处，它永远与我同在。”</p>
<p>让我对上述推断深信不疑的是这个真实的故事：“理查德•帕克”原是历史上真实吃人海难故事的主人公名字。1884年，Mignonette号沉没，4名船员被困在南大西洋，除了3名船员，还有一个名叫理查德•帕克的17岁男仆。在茫茫的海上漂流中，3名成年船员杀死了孤儿理查德•帕克，分食了他的肉，因此得以生还。这部影片讲述的不是一个美的令人发指的奇幻故事，也不是纠结于宗教信仰和理性思考的一个拧巴的人生选择。原著作者和导演委婉而又明确的向观众用近乎疯狂而又含蓄的手法讲述了这个残酷的事实，是对生活的悔悟、信仰的拷问，和人性的反思。</p>
<p>因为这部影片真的不叫《少年派的奇幻漂流》，而是 &lt; Life of Pi &gt;。</p>
<p>最后想说的是李安导演的功力让我佩服的五体投地，因为无论观众看懂与否出了电影院都会精神亢奋的竖起大拇哥并说一句“牛逼！”。</p>
<p>“我心里有猛虎，在细嗅着蔷薇，审视我的心灵吧，亲爱的朋友，你应战栗，因为那里才是你本来的面目。”——西格夫里•萨松</p>
<h2 id="李安的隐喻森林与少年Pi的三个故事"><a href="#李安的隐喻森林与少年Pi的三个故事" class="headerlink" title="李安的隐喻森林与少年Pi的三个故事"></a><a href="https://movie.douban.com/review/5682066/" target="_blank" rel="external">李安的隐喻森林与少年Pi的三个故事</a></h2><p>在谈论少年Pi这部电影之前，需要预设若干个前提。这些前提就像是数学里的那几条公理，一切演绎，一切推理皆由此而来。如果我们不能在起点达成共识，那么只会分道扬镳，越行越远。</p>
<p>第一。少年Pi的小说属于扬马特尔，少年Pi的电影属于李安。李安的电影基于原著，但又不尽相同。他保留了故事框架，进行了改动增删，使之混杂入了李氏基因，从而变成另外一样东西。因此，我在接下来的分析中，将会彻底抛开原著的干扰——不涉及原著情节，不涉及原作者用意，不比较两版之间的差异，总之就当是我们从来不知道这部电影还有原著——只专注于导演在银幕上给我们摆出来的东西。</p>
<p>第二。成年Pi的演员伊尔凡可汗在接受采访时说过：“这部电影表面上看是一个少年的冒险故事，实际上隐藏着很多隐喻，它有许多平行空间，很多层次。”换句话说，这是一个寓言性质的故事，里面的隐喻表现手法克制而简洁，彼此的映射关系十分明显。李安就是通过这种方式，赋予了扬马特尔的故事框架一个“李安”灵魂。我们只有承认李安在这些细节上的处理是刻意的，每一处都经过精心设计，每句台词都有它的功能和指向，才能拼凑出他试图表达的意义。否认了这一点，就成了聆听云天明童话的三体人，听到的只是一个纯净、美好的故事。</p>
<p>第三。我一向认为，影评是一件主观的工作，每个人都有不同的视角和观感，他们都没错，所谓的仁者见仁智者见智，根本不存在客观影评这种东西，自然也就不存在对错。对写影评的人来说，他唯一的责任，就是承认他的评价只是个人体验，不是妄议别人对错的客观真理。所以这篇东西，只是我个人的一些想法，它不涉及微言大义，不谈主题外延，只就电影本身的线索做一些分析。或许对，或许错，或许过度解读，或许牵强附会。如果得到大家的认同，我深感荣幸；如果你的意见与我大相径庭，那说明这部电影存在多重解读，更显出它的神秘魅力。</p>
<p>闲话少说，让我们从那次晚餐说起。</p>
<p>电影一开始，同时信仰了印度教、基督教和伊斯兰教的Pi和他的父亲母亲在晚餐时进行了一次谈话。这次谈话非常重要，它是整个电影主题的第一次预演。</p>
<p>少年Pi的父亲说：“如果你同时信仰三个宗教，那等于什么都没信。与其如此，不如选择相信理性，相信科学……我宁可你经过深思熟虑否认我，也不要不加分辨地盲目接受。”（凭记忆写出，只是复述其大意，以下同。）</p>
<p>而母亲则说：“科学解决外在的问题，而不是内在的。”实际上是在暗示理性和信仰所发挥的作用不同，前者解决现实问题，后者解决心灵问题——要注意，母亲这句话，实际上成为了Pi后来一切行动的心理渊薮。</p>
<p>电影里提及了两人的背景：父亲被现代医学救了一条性命，所以他相信科学，代表着理性；母亲倾向于宗教，代表着信仰。电影里还特意强调，母亲舍弃家庭跟随父亲，信仰是她与过去唯一的联系。</p>
<p>父亲和母亲的说法不同，少年Pi面临着抉择。要理性还是要信仰，这是一个精神领域的经典困境，少年Pi最终做出的选择是：“我决定去受洗。”也就是说，他选择了后者，也就意味着他认同了母亲的话，</p>
<p>但信仰需要的是虔诚，Pi并非一个虔诚者，他是个泛神论者。成年Pi的一番论述表明，他需要的是一种超自然的、至高无上的力量作为信仰依靠。至于无论是上帝、安拉还是毗湿奴，并不重要。可以这么说，他的意识里，信仰的是信仰本身，而不是某种特定的神明。</p>
<p>对虔诚者，他选择信仰是去解决问题。而Pi这样的人，他选择信仰，只是为了逃避问题。信仰对他来说，不是一个具体膜拜的对象，而是一个寄托，一个可以逃遁的空间。</p>
<p>这就是为什么，Pi要讲两个故事。</p>
<p>两个故事的真假一直存在争论。可在我看来，第一个故事毋庸置疑是编造出来的。李安很狡猾，他从不公开谈论故事的真假，他知道保持一部电影的魅力就是让观众无限地争论下去。可他在电影里的安排，却表明了自己内心的态度。</p>
<p>一个幻想故事，可以天马行空无所顾忌；但一个真实发生的故事，必须符合现实。第一个故事里有食人岛，这是一座深海中的热带密林，中间生存着无数沙漠中才有的狐獴。沙漠和大海，这是截然不同的两种意象。</p>
<p>如果这个故事是真实的，那么李安为什么不设置一个长满棕榈树爬满老鼠的正常海岛，使之看起来更加合理呢？可李安非但没这么做，反而煞费苦心地挑选了距离合理性最远的沙漠狐獴，这是刻意放大不合理，以此来暗示第一个故事的虚幻性，告诉所有观众，这只是幻觉，这只是想象。我们都希望第一个是真实，但没法说第一个就是真实的。</p>
<p>这有点像我们平时开玩笑。比如我调侃一个姑娘说：“你真漂亮我特喜欢你。”这句话有可能会被当成玩笑，也有可能会被当真。为了避免被当真的风险，我会故意夸大这句话“你比林志玲还漂亮我天天想着你连肉都不愿意吃了。”不合理的部分被无限放大，听的人自然明白这只是个玩笑。</p>
<p>所以，第一个故事是Pi所幻想出来的，第二个故事是真实的，是理性的。可Pi无法解决第二个残酷故事给自己内心带来的煎熬，他只能逃遁到第一个故事里去，把周围的遇难者幻化为各种动物，才能让自己平静——正如母亲晚餐时所说，理性解决外在的，信仰解决内在的。他那一句“我决定去受洗”，实际上就是自己决定逃遁的预言。</p>
<p>李安在这部电影里，有两种方式来引导观众巧妙地觉察到隐喻存在。一是预演。每一次大的行动之前，都会有一次小的行动作为预演；二是让本体和喻体反复出现，强化两者之间的关联，然后通过构建喻体之间的关系，来揭示本体的命运。</p>
<p>晚餐谈话，无疑就是Pi讲述两个故事的动机预演；而基督教牧师对Pi说的那句：“you must be thirsty。”和父亲说“从它眼中反映出来的，是你自己的投影”，则是李安在不断在我们脑海里建立起Pi和老虎之间的本喻关系。</p>
<p>有人说老虎代表了恐惧，我觉得应该更进一步，代表的是Pi的本能情感。在第一个故事里，Pi把自己一分为二，自己代表着人性或理性，老虎是剥除了理性的原始本能——本能地发怒，本能地恐惧，毫无掩饰地表达自己最粗粝的欲望。</p>
<p>换句话说，第一个故事里的人与虎，是第二个故事人性与兽性之间天人交战的投影。Pi不愿正视吃人的现实，只得一分为二，变成人与虎的奇幻漂流。这在许多影评里都有提及。</p>
<p>可是，不要忘了，我们否定第一个故事真实性，理由是它存在着不合理，而且李安保留了“不合理”的标签，以此提醒观众故事的虚幻。</p>
<p>但第二个故事，就真的合乎情理了么？</p>
<p>回想一下第二个故事的过程：Pi、母亲、水手和厨师登上救生艇。水手受伤，很快死去。厨师将其吃掉。然后Pi不小心放跑了一只海龟，被厨师殴打。母亲与厨师争执，被厨师所杀。厨师把母亲的尸体扔进大海喂鲨鱼。Pi出于愤怒杀了厨师，并吃掉了他。</p>
<p>在这个故事里，各种元素和第一个故事完美对应，母亲=猩猩，厨师=鬣狗，水手=斑马，老虎=Pi的本能，看似完美无缺，合乎情理，连最理性的保险公司都快要认同，但其中却存在着两个破绽。</p>
<p>第一个破绽，是香蕉。</p>
<p>当Pi讲述第一个故事的时候，说猩猩坐着漂浮的香蕉而来。保险调查员立刻指出，香蕉不会漂浮。当Pi讲述第二个故事时，对这个细节居然没有修改，仍旧坚持说妈妈坐着漂浮的香蕉前来。</p>
<p>香蕉在现实里能否漂浮，并不重要。在电影的世界里，保险调查员指出香蕉不能漂浮，这代表了一种常识，它的功能是用来牵出Pi讲的故事里反常识的地方，内在逻辑是自洽的。</p>
<p>第二个破绽，是妈妈的死。</p>
<p>厨师是一个对食物很执着的人，他会吃老鼠，会把水手杀掉用肉做鱼饵。对他来说，每一块肉都是极其宝贵的。可是妈妈死后，厨子没吃掉她，扔到了海里喂了鲨鱼——这是一种浪费，尤其是厨师已经吃过了水手，对他来说，最大的心理障碍已经消除，没理由会做这种浪费行为。</p>
<p>第二个故事本身已经非常圆满，却多了这两个颇为醒目的蛇足。实际上，它们也是刻意被保留下来的标签，用来提醒观众——第二个故事也并非真实——至少隐瞒了一部分真实。</p>
<p>这两个破绽，都与母亲有关。毫无疑问，第二个故事隐瞒的真实，就是母亲的下落，</p>
<p>前面我说过了，李安喜欢用各种比喻反复强化本喻关系。少年Pi和老虎是其中最醒目的一对，但还有一对本喻很容易被忽略。</p>
<p>母亲与莲花。</p>
<p>莲花与母亲之间的关系非常密切，在此之前已经有两次显著暗示。一次是在开头，母亲在地板上用粉笔画莲花给Pi和拉维看。一次是电影中段，Pi俯瞰海底，先是鱼形成莲花，然后又变成母亲的容貌（这里Pi父和拉维的脸都没出现，指向特别明显），最后叠加到了沉船。所以准确地说，莲花代表的是Pi对母亲的思念和爱。</p>
<p>与此同时，李安还特意安排了阿南蒂给Pi讲解舞蹈，引出一个关于莲花的重要比喻：林中莲花。</p>
<p>在Pi问阿南蒂林中莲花是什么意思时，她没有回答。直到我们进入整个电影最关键的一段情节：食人岛，才恍然大悟。</p>
<p>Pi在夜晚的林中摘下一朵莲花，打开以后，里面是一颗人牙。于是“林中莲花”这个比喻和指向，在这里得以完成。</p>
<p>我们知道，第一个故事是Pi的幻想。那么他在岛上的动作，肯定是对各种现实发生的投射。莲花是Pi对母亲的思念；莲花中的人牙，代表了母亲的遗骸，也即死亡。而母亲的躯体，实际上就是整个食人岛。</p>
<p>岛是母亲，而岛下涌起的酸潮，则是母亲的下场。</p>
<p>酸潮是一个意义异常清晰也异常恐怖的比喻。如果想表达母亲死亡的意象，有很多种办法，最简单的比如说潮水慢慢淹没岛屿，代表母亲的溺水；或者鲨鱼啃噬小岛的根茎，代表葬身鲨腹，等等……可李安选择的是一个非比寻常，几乎和海洋没有一点关系的比喻：酸。</p>
<p>这个酸，自然就是人的胃酸。酸潮扑上小岛，这个意象表明母亲是被吃掉的，被胃酸所消化，所以遗骸的代表物是牙齿。</p>
<p>Pi在岛上吃了植物根茎，老虎吃了狐獴，这是食母的暗喻。有一种说法认为，根茎和狐獴代表尸体的肌肉纤维和蛆虫，代表了吃人，这两个比喻在电影里找不到可参照的点。李安如果要设一个比喻，一定不会只设一次，一定会重复多次，或者找另外一个参照点，所以这个猜想是否成立，需不需要影射到如此细致，有待商榷。但食母是确凿无疑的。</p>
<p>之所以这么说，是因为食母之前已经预演过一次。</p>
<p>Pi是个素食主义者，他第一次抓到一条大鱼，一边大哭一边用锤子把它砸死。砸死以后，Pi跪倒在筏子上，哭着对鱼的尸体说：“毗湿奴，谢谢你化身为鱼来救我。”他这么做，是因为自己面临着饥馑危机，理性告诉他只能吃鱼渡日，为了能够达成心灵妥协，Pi必须在信仰里找了一个借口。基督教和伊斯兰教关于道德的教义太过鲜明，没办法利用，于是Pi只能选择毗湿奴作为理由。这也从一个侧面反应出Pi的宗教观。</p>
<p>于是，鱼成了毗湿奴的化身，Pi有了一个可接受的理由，内心回归平静。</p>
<p>这次吃鱼事件非常重要，承前启后。</p>
<p>往前看，它与晚餐谈话相对照。父亲在晚餐时说了句话：“今天的羊肉很美味，可惜你们享受不了。”说明父亲是家里唯一一个肉食者，他代表着理性，理性是要吃肉的。母亲则告诉Pi，理性可以解决外在，信仰可以解决内在。这一点是食鱼事件里也得到体现，Pi理性地杀鱼吃肉，然后用信仰给自己内心找了个避难所，一个借口。这个很变通甚至有点狡猾的举动，与Pi在餐桌上轻松地说“我决定去受洗”的精神是一脉相承。</p>
<p>往后看，母亲就是鱼。鱼是毗湿奴所化，那么母亲也一定是毗湿奴Pi来的。Pi吃鱼是因为这是毗湿奴的化身，Pi吃母亲也是因为她是毗湿奴的化身。一个化成鱼，一个化成了海盗。食鱼事件就是食母事件的预演。</p>
<p>宗教变成了Pi的心灵庇护所，他给自己构筑了一个坚固的壳。对Pi来说，基督教和伊斯兰教的教义太过清晰，对善恶的道德评判太过清晰，他唯一能选择的——同时也恰好是她母亲所信仰的——只有印度教。只有毗湿奴的神话特性，才能为Pi食母构造出一个合理的借口。</p>
<p>李安唯恐观众还搞不清楚这个比喻，还特意给出一个岛的轮廓特写。有人说这是毗湿奴的侧影，有人说这是一个女人，都没错。这个轮廓本来就兼具了母亲与毗湿奴两种特性。莲花是毗湿奴的象征，而母亲信仰的是印度教，毗湿奴的神话就是她讲给小Pi听的。从这个特写镜头，母亲-莲花-毗湿奴这三个元素的连接，得到了一次明白无误的强化。</p>
<p>这就是为什么岛的轮廓既像毗湿奴，又像是母亲，Pi为了给自己的食母寻找了个宗教理由，早视它们为一体了。</p>
<p>在这之前，Pi应该已经做过类似的事情。在幻想层面，鬣狗杀死了猩猩，老虎杀死了鬣狗，但很快鬣狗、斑马和猩猩的尸体全都消失了，全都被老虎吃掉了。投射到现实层面，厨师杀了母亲，Pi杀了厨师。然后面临饥馑的Pi吃掉了水手的剩余部分和厨师，最后把目光投向了自己母亲的尸体。</p>
<p>食人是一回事，食自己的母亲又是另外一回事。Pi在吃水手和厨师时还能保持正常——食鱼事件里，Pi杀死了鱼自己却没吃，而是喂了老虎，表明他把吃人归咎为自己的兽性，自己的人性还保持着清醒——但面对自己母亲，他内心的惊慌和挣扎可想而知。</p>
<p>在登岛之前，故事一里有一场惊天动力的大风暴，老虎在瑟瑟发抖，Pi在呼天抢地。开始时Pi还呼叫着神明，但很快就放弃了。这说明他的人性和兽性同时遭遇大了现实中的大挫折，这挫折可能是真正的风暴，也可能是其他灾难，总之造成的结果是食物匮乏至极，陷入极度的饥饿。唯一的食物，只有母亲。</p>
<p>吃了，自己心理绝对无法接受；不吃，一定会饿死。</p>
<p>可这场危机太过强烈，于是Pi的人性和兽性不得不暂时达成统一，或者说妥协，把母亲当成毗湿奴的化身，重演吃鱼时的故事，并且构造出一个毗湿奴食人岛的幻象。正如电影开头讲述的，到了夜晚，我们都生活在毗湿奴的梦里。</p>
<p>然后，在幻想层面，人与虎同时登岛，Pi吃了植物根茎，老虎吃了狐獴。不知大家还记得不记得，当Pi告别阿南蒂的时候，阿南蒂给他手腕系了绳子，代表了与最爱之人的告别。再回想起Pi一登岛便在岛上系了一段绳子，便会豁然开朗。Pi是在告别，与母亲告别，因为他即将要吃掉她。</p>
<p>到了夜晚，酸潮涌动，莲花里只残存一颗牙齿。等到Pi夜晚打开莲花看到人牙时，林中莲花的暗喻发挥了作用，他的理性之火终于觉醒，意识到自己做下的极恐怖的事。</p>
<p>Pi自己说担心被食人岛吞噬，才决定离开，实际上担心的是食母这件事吞噬掉他的精神，让他疯掉，乃至死亡。所以他选择了逃离这个岛，也就选择了忘记。这同样也在阿南蒂的情节里得到了呼应：“我记得那一天发生的每一件事情，但是却忘记了是如何告别的。”</p>
<p>结果Pi把这件事彻底忘掉了。他给保险员讲述第二个故事时，只讲到自己暗示吃了厨师，就停止了。他不是刻意隐瞒，而是自己也忘了，唯一残留的记忆，只有他自己编造出来保留在第一个故事里的食人岛。</p>
<p>阿南蒂的情节在整个电影里地位独特。如果把她的戏单独抽出看，根本没有任何意义，这段情节跟后面一点关系也没有，这女人也再没出现过。但李安从来不做无用功，他加入阿南蒂的戏，正是为了给后面食人岛的一系列活动建立比喻的对照系。</p>
<p>系绳子、忘记告别、林中莲花，这些都是食人岛中的重要暗喻，同时又与阿南蒂的故事要素全部照合。没有阿南蒂的故事，食人岛的行为就会让观众觉得不知所云。没有食人岛，阿南蒂则变得毫无意义。两者实际上是一个彼此呼应的隐喻体系的两端。</p>
<p>这就是充斥于细节中的各式隐喻所构筑出的第三个，也是真正的故事。</p>
<p>李安把第一个故事描绘的极为精美，对第二个故事却吝啬到一个镜头都没有，对第三个故事甚至只肯用隐喻来承载。他把现实包裹在美好的糖衣之内，又在现实里放入残酷夹心，递给大家。作家和保险公司相信了第一个故事，Pi本人相信的是第二个，为了强化自己的信念，他甚至还多信了一个犹太教。至于观众愿意剥开几层糖纸，则取决于他们自己。</p>
<p>李安用这种极度不均衡的手法，把选择权出让给观众。他打开了许多条路，每一条都没有设置终点。《盗梦空间》里，陀螺是旋转还是倒下，主角究竟是在梦里还是现实，观众可以予以猜测解读，也可以随时出戏，起身走人，归根到底这是主角自己的问题，观众们是无关的客观者。但观众们在看少年Pi的时候，不得不面临一个问题：我究竟该相信哪一个故事。这个选择权不再取决于故事的解读，而是取决于观众的内心。宗教者从中看到信仰的力量，无神论者从中看到对宗教的否定与稀释，心灵纯净者与疲惫于现实都市的人倾向于相信第一个故事，而内心黑暗的悲观主义者，则对背后隐藏的真相不寒而栗。</p>
<p>当李安在采访时被问起关于第二个故事，他的回答避重就轻，说故事拍完就交给观众了，这是个聪明的做法，他放弃了最权威的导演阐释权，让观众保持争论。莫衷一是是电影保持长久魅力的不二法门。所以我们不必奢望从他那里得到明确的答案，相信自己的本心就好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img3.doubanio.com/view/movie_poster_cover/lpst/public/p1784592701.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;故事开始于蒙特娄，也结束于蒙特娄。一名在找寻灵感的作家（拉菲·斯波 Rafe Spall 饰）无意间得知派·帕帖尔（伊尔凡·可汗 Irrfan Khan 饰）的传奇故事。派的父亲（阿迪勒·侯赛因 Adil Hussain 饰）开了一家动物园。因这样特殊的生活环境，少年派（苏拉·沙玛 Suraj Sharma 饰 ）对信仰与人的本性自有一套看法。在派17岁那一年，他的父母决定举家移民加拿大以追求更好的生活，而他也必须离开他的初恋情人。在前往加拿大的船上，他们遇见一位残忍成性的法国厨师（杰拉尔·德帕迪约 Gérard Depardieu 饰）。当天深夜在茫茫大海中，原本令派感到刺激无比的暴风雨一瞬间就成了吞噬货船的大灾难。派却奇迹般地活了下来，搭着救生船在太平洋上漂流，而且有一名最令人意想不到的同伴——理查德·帕克，一只孟加拉老虎。神奇的冒险旅程就这样意外开始了……&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Movie" scheme="http://ipcreator.me/tags/Movie/"/>
    
  </entry>
  
  <entry>
    <title>周鸿袆:通用型的人工智能都是骗子,必须结合垂直领域</title>
    <link href="http://ipcreator.me/2017/04/07/AI/Business/views-of-zhouhongyi-on-ai/"/>
    <id>http://ipcreator.me/2017/04/07/AI/Business/views-of-zhouhongyi-on-ai/</id>
    <published>2017-04-07T14:44:06.000Z</published>
    <updated>2017-04-07T14:47:58.536Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n1.itc.cn/img8/wb/recom/2017/04/07/149152566053390572.JPEG" alt=""></p>
<p>总的来说，他认为， 人工智能代表了一个很重要的技术，但搞所谓通用型的人工智能基本都是骗子，说人工智能大脑具备了几岁小孩的智力，都是忽悠。“我今天觉得人工智能必须结合一个垂直的领域，解决具体的问题，这是人工智能最有机会的地方。”</p>
<a id="more"></a>
<p>雷锋网(公众号：雷锋网)消息，在半个月前的3月23号，三六零科技股份有限公司与华泰联合证券签订了IPO上市辅导协议，这意味着360会以IPO的方式回归A股。不久后，周鸿祎接受了中国证券报专访，谈及了为何退市，对人工智能的看法，以及对自家手机的定位。</p>
<p>谈到从美国退市，周鸿祎表示，主要是出于对当时网络安全形势的考虑。当时360已经是国内最大、全球前三的网络安全公司，除了普通用户，还服务着不少国企，重要单位，甚至是敏感的基础设施。后来，互联网主管部门的领导找到360，希望从国家安全、国家利益的角度出发，360能退回来从外资公司变成内资公司。</p>
<p>周鸿祎称，退市解决了身份问题，未来在军民融合的过程也能参与国防项目。他同时认为，360必须扎根在中国，希望能为中国国家网络安全、社会的网络安全贡献一份力量，在网络安全建设中担任重要角色。<br>在谈到国内安全产业现状时，他认为，360在包括非对称的技术对抗等一些领域与国际领先水平相比差距已经不大，甚至在某些领域是比较领先的。他称，360应该是第一家利用云端大数据、机器学习算法解决对未知攻击的预警。而国内外的主要的差距，是对络安全的认识和基础技术领域方面。</p>
<p>而对于人工智能，周鸿祎也有自己的看法，其最核心的安全业务就与人工智能有莫大的关系。</p>
<p>在人工智能与360的核心业务网络安全的结合上，他表示，“360是最早把人工智能技术用在了网络安全上的”。他们做了一个QVM引擎，用机器学习的算法，把很多已知的病毒样本送进机器学习，最后形成一种模式，可以识别新软件是不是恶意的程序或者潜在的攻击。QVM基本没有病毒库，只需定期更新规则。</p>
<p>360天眼则利用大数据和人工智能深度学习进行识别未知攻击。它通过网络各个结点采集到网络流量的数据，利用GPU的并行计算建立了深度学习的学习网络，利用这个网络识别网络异常的流量。另外，360还在与美国的大学合作，投资了一个实验室，专门研究利用人工智能的方法用机器来挖掘漏洞。</p>
<p>总的来说，他认为， 人工智能代表了一个很重要的技术，但搞所谓通用型的人工智能基本都是骗子，说人工智能大脑具备了几岁小孩的智力，都是忽悠。“我今天觉得人工智能必须结合一个垂直的领域，解决具体的问题，这是人工智能最有机会的地方。”</p>
<p>此前，周鸿祎在内部信中称，公司主要着眼两个方面：</p>
<blockquote>
<p>一个是图像识别，一个是大数据技术。而360在这两方面的进展是，前者已经在直播产品和相机产品方面有所应用，后者则主要依托于搜索与浏览器的数据，用于新一代的智能搜索。</p>
</blockquote>
<p>他同时认为，人工智能也不会让互联网时代过时。“我认为恰恰是因为有了移动互联网、产生了大数据，才有了人工智能的存在。我觉得人工智能跟IoT万物互联非常贴合，因为万物互联的大数据可以作为人工智能计算的根据。”</p>
<p>最后，对于360的智能手机业务，周鸿祎透露，智能手机业务因为错过了最好的时机，目前360手机每年不到1千万的销量，肯定不在第一梯队。但他们的定位是，主要做终端的市场，把安全做好，同时我们继续以线上销售为主。</p>
<blockquote>
<p>“我觉得手机最重要的是活着，这个市场已经经过了10年，创新已经快走到尽头了。我觉得可能在未来2、3年里，手机一定会有物理器件或软件上巨大的创新。我们在这个市场上继续存在，我们也在等待弯道超车的机会。”</p>
</blockquote>
<p>雷锋网版权文章，未经授权禁止转载。详情见转载须知。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n1.itc.cn/img8/wb/recom/2017/04/07/149152566053390572.JPEG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;总的来说，他认为， 人工智能代表了一个很重要的技术，但搞所谓通用型的人工智能基本都是骗子，说人工智能大脑具备了几岁小孩的智力，都是忽悠。“我今天觉得人工智能必须结合一个垂直的领域，解决具体的问题，这是人工智能最有机会的地方。”&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Zhou Hongyi" scheme="http://ipcreator.me/tags/Zhou-Hongyi/"/>
    
  </entry>
  
  <entry>
    <title>My Views of Happiness</title>
    <link href="http://ipcreator.me/2017/04/07/MyView/it-happens-to-me-by-accident/"/>
    <id>http://ipcreator.me/2017/04/07/MyView/it-happens-to-me-by-accident/</id>
    <published>2017-04-07T06:45:06.000Z</published>
    <updated>2017-04-07T13:08:10.045Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/Happiness-is-a.png" alt=""></p>
<blockquote>
<p>Healthy, Family, Enterprise, Thanksgiving<br>Love her，accompany her.</p>
</blockquote>
<a id="more"></a>
<h2 id="Healthy"><a href="#Healthy" class="headerlink" title="Healthy"></a>Healthy</h2><h3 id="Walking"><a href="#Walking" class="headerlink" title="Walking"></a>Walking</h3><h3 id="Sleeping"><a href="#Sleeping" class="headerlink" title="Sleeping"></a>Sleeping</h3><h3 id="Diet"><a href="#Diet" class="headerlink" title="Diet"></a>Diet</h3><h3 id="Mentality"><a href="#Mentality" class="headerlink" title="Mentality"></a>Mentality</h3><h2 id="Family"><a href="#Family" class="headerlink" title="Family"></a>Family</h2><h3 id="Resposibility"><a href="#Resposibility" class="headerlink" title="Resposibility"></a>Resposibility</h3><h3 id="Independency"><a href="#Independency" class="headerlink" title="Independency"></a>Independency</h3><h2 id="Enterprise"><a href="#Enterprise" class="headerlink" title="Enterprise"></a>Enterprise</h2><h3 id="Growing-up"><a href="#Growing-up" class="headerlink" title="Growing up"></a>Growing up</h3><h3 id="Startup"><a href="#Startup" class="headerlink" title="Startup"></a>Startup</h3><h2 id="Thanksgiving"><a href="#Thanksgiving" class="headerlink" title="Thanksgiving"></a>Thanksgiving</h2><h3 id="Face-to-Reality"><a href="#Face-to-Reality" class="headerlink" title="Face to Reality"></a>Face to Reality</h3><h3 id="Appreciation"><a href="#Appreciation" class="headerlink" title="Appreciation"></a>Appreciation</h3><h3 id="Try-your-best"><a href="#Try-your-best" class="headerlink" title="Try your best"></a>Try your best</h3><h3 id="Let-it-Go"><a href="#Let-it-Go" class="headerlink" title="Let it Go"></a>Let it Go</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/Happiness-is-a.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Healthy, Family, Enterprise, Thanksgiving&lt;br&gt;Love her，accompany her.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>The Basic Concepts of Java</title>
    <link href="http://ipcreator.me/2017/04/06/Program/Java/basic-concept-of-java/"/>
    <id>http://ipcreator.me/2017/04/06/Program/Java/basic-concept-of-java/</id>
    <published>2017-04-06T13:18:06.000Z</published>
    <updated>2017-04-10T03:35:17.098Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/java.jpg" alt=""></p>
<blockquote>
<p>Java is a good Coffee for Programmer<br>Resolve Problems from the views of Java designer , Compiler, CPU, Memery…</p>
</blockquote>
<p>见过最多的，也最可悲的是—— 永远不相信自己所有的问题就出在自己从来都不肯耐心把最基础的东西弄清楚弄明白。<sup>[1]<sup></sup></sup></p>
<a id="more"></a>
<h2 id="On-job-Training-2"><a href="#On-job-Training-2" class="headerlink" title="On job Training[2]"></a>On job Training<sup>[2]<sup></sup></sup></h2><h3 id="启发编程思想，培养编程感觉"><a href="#启发编程思想，培养编程感觉" class="headerlink" title="启发编程思想，培养编程感觉"></a>启发编程思想，培养编程感觉</h3><p>用程序来解决生活中的实际问题</p>
<blockquote>
<p>How –&gt; Why</p>
</blockquote>
<h3 id="Java-virtual-machine"><a href="#Java-virtual-machine" class="headerlink" title="Java virtual machine"></a>Java virtual machine</h3><p>可运行Java字节码的假想计算机</p>
<p>javac：编译器，在javac命令中，可以使用通配符来指定一次编译多个源文件<br>java: 解析器，启动一个Jvm</p>
<p>javac 将java源程序翻译为jvm可执行代码——java字节码，这一编译过程同c/c++有些不同，当C编译器生成一个对象的代码时，该代码是为在某一特定硬件平台运行而产生的。因此，在编译过程中，编译程序通过查表将所有对符号的引用转换为特定的内存偏移量，以保证程序的运行。</p>
<p>java编译器却不将对变量和方法的引用编译为数值引用，也不确定程序执行过程中的内存布局，而是将这些符号引用信息保留在字节码中，由解析器在运行过程中创立内存布局，然后再通过查表来确定一个方法所在的地址，这样就有效保证了java的可移植性和安全性。</p>
<p><img src="http://onzc6nld3.bkt.clouddn.com/1.1.jpg" alt=""></p>
<p><img src="http://onzc6nld3.bkt.clouddn.com/1.1-.jpg" alt=""></p>
<p>运行jvm字节码的工作是由解析器来完成</p>
<p><img src="http://onzc6nld3.bkt.clouddn.com/1.22.jpg" alt=""></p>
<ol>
<li>代码的装入</li>
</ol>
<p>由class loader完成，其负责装入运行一个程序需要的所有代码，这也包括程序代码中的类所继承的类和被其调用的类。当类装载器装入一个类时，该类被放在自己的名字空间中。除了通过符号引用自己名字空间以外的类，类之间没有其他办法可以影响其他类。在本台计算机上的所有类都在同一地址空间内，而所有从外部引进的类，都有一个自己独立的名字空间。这使得本地类通过共享相同的名字空间获得较高的运行效率，同时又保证它们与从外部引进的类不会相互影响。</p>
<p>当装入了运行程序需要的所有类后，解析器便可确定整个可执行程序的内存布局。解析器为符号引用于特定的地址空间建立对应关系及查询表。通过在这一阶段确定代码的内存布局，java很好地解决了由超类改变而使子类崩溃的问题，同时也防止了代码对地址的非法访问。</p>
<ol>
<li><p>代码的校验<br>被装入的代码由字节码校验器进行检查，校验器可发现操作数栈溢出、非法数据类型转化等多种错误。通过校验后，代码便开始执行。</p>
</li>
<li><p>代码的执行<br>Java字节码的执行有两种方式：<br>A、即时编译方式<br>  解析器先将字节码编译成机器码，然后再执行该机器码。<br>B、解析执行方式<br>   解析器通过每次解析并执行一小段代码来完成java字节码程序的所有操作。<br>通常采用的是第二种方法。由于jvm规格描述具有足够的灵活性，这使得将字节码翻译为机器代码的工作具有较高的效率，对于那些对运行速度要求较高的应用程序，解析器可将java字节码即时编译为机器码，从而很好地保证了java代码的可移植性和高性能。</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">Usage: java [-options] class [args...]</div><div class="line">           (to execute a class)</div><div class="line">   or  java [-options] -jar jarfile [args...]</div><div class="line">           (to execute a jar file)</div><div class="line">where options include:</div><div class="line">    -d32          use a 32-bit data model if available</div><div class="line">    -d64          use a 64-bit data model if available</div><div class="line">    -server       to select the "server" VM</div><div class="line">                  The default VM is server.</div><div class="line"></div><div class="line">    -cp &lt;class search path of directories and zip/jar files&gt;</div><div class="line">    -classpath &lt;class search path of directories and zip/jar files&gt;</div><div class="line">                  A ; separated list of directories, JAR archives,</div><div class="line">                  and ZIP archives to search for class files.</div><div class="line">    -D&lt;name&gt;=&lt;value&gt;</div><div class="line">                  set a system property</div><div class="line">    -verbose:[class|gc|jni]</div><div class="line">                  enable verbose output</div><div class="line">    -version      print product version and exit</div><div class="line">    -version:&lt;value&gt;</div><div class="line">                  Warning: this feature is deprecated and will be removed</div><div class="line">                  in a future release.</div><div class="line">                  require the specified version to run</div><div class="line">    -showversion  print product version and continue</div><div class="line">    -jre-restrict-search | -no-jre-restrict-search</div><div class="line">                  Warning: this feature is deprecated and will be removed</div><div class="line">                  in a future release.</div><div class="line">                  include/exclude user private JREs in the version search</div><div class="line">    -? -help      print this help message</div><div class="line">    -X            print help on non-standard options</div><div class="line">    -ea[:&lt;packagename&gt;...|:&lt;classname&gt;]</div><div class="line">    -enableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]</div><div class="line">                  enable assertions with specified granularity</div><div class="line">    -da[:&lt;packagename&gt;...|:&lt;classname&gt;]</div><div class="line">    -disableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]</div><div class="line">                  disable assertions with specified granularity</div><div class="line">    -esa | -enablesystemassertions</div><div class="line">                  enable system assertions</div><div class="line">    -dsa | -disablesystemassertions</div><div class="line">                  disable system assertions</div><div class="line">    -agentlib:&lt;libname&gt;[=&lt;options&gt;]</div><div class="line">                  load native agent library &lt;libname&gt;, e.g. -agentlib:hprof</div><div class="line">                  see also, -agentlib:jdwp=help and -agentlib:hprof=help</div><div class="line">    -agentpath:&lt;pathname&gt;[=&lt;options&gt;]</div><div class="line">                  load native agent library by full pathname</div><div class="line">    -javaagent:&lt;jarpath&gt;[=&lt;options&gt;]</div><div class="line">                  load Java programming language agent, see java.lang.instrument</div><div class="line">    -splash:&lt;imagepath&gt;</div><div class="line">                  show splash screen with specified image</div><div class="line">See http://www.oracle.com/technetwork/java/javase/documentation/index.html for more details.</div></pre></td></tr></table></figure>
<h3 id="Java-Garbage-Collector"><a href="#Java-Garbage-Collector" class="headerlink" title="Java Garbage Collector"></a>Java Garbage Collector</h3><p>Java类的实例对象和数组所需的存储空间是在堆上分配的，解析器具体承担为类实例分配空间的工作。解析器在为一个实例对象分配完存储空间后，便开始记录对该实例对象所占用的内存区域的使用。一旦对象使用完毕，便将其回收到垃圾箱中。</p>
<p>在java语言中，除了new语句外没有其他方法为一个对象申请和释放内存。对内存进行释放和回收的工作是由java运行体统承担的，这允许java运行系统的设计者自己决定碎片回收的方法。</p>
<p>在java程序运行过程中，一个垃圾回收器会不定时地被唤起检查是否有不再被使用的对象，并释放它们占用的内存空间，垃圾回收器不由程序员控制，也无规律可循，并不会一产生垃圾，它就被唤起，甚至有可能到程序终止，它都没有启动的机会。</p>
<p>不同的jvm采用不同的回收策略，一般有两种比较常用：</p>
<ol>
<li><p>复制式回收策略<br>先将正在运行中的程序暂停，然后把正在被使用的所有对象从他们所在的堆内存里复制到另一块堆内存，那些不再被使用的对象所占据的内存空间就被释放掉。</p>
</li>
<li><p>自省式回收策略<br>检测所有正在使用的对象，并为它们标注，完成这项工作后再将所有不再被使用的对象所占据的内存空间一次释放。</p>
</li>
</ol>
<p>Java把内存划分成两种，一种是栈内存，另一种是堆内存。</p>
<p>在方法中定义的一些基本类型的变量和对象的引用变量都是在方法的栈内存中分配，当在一段代码块（也就是一对花括号{}之间）定义一个变量时，java就在栈中为这个变量分配内存空间，当超过变量的作用域后，java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被另作他用。</p>
<p>堆内存用来存放由new创建的对象和数组，在堆中分配的内存，由java虚拟机的gc来管理，在堆中产生一个数组或对象后，还可以在栈中定义一个特殊的变量，让栈中的这个变量的取值等于数组或对象在堆内存中的首地址，栈中的这个变量就成了数组或对象的引用变量，以后就可以在程序中使用栈中的引用变量来访问堆中的数组或对象，引用变量就相当于是为数组或对象起的一个名称（叫代号也行）。引用变量时普通的变量，定义时在栈中分配，引用变量在程序运行到其作用域之外后被释放，而数组和对象本身在堆中分配，即使程序运行到使用new产生数组和对象的语句所在的代码块之外，数组和对象本身占据的内存不会被释放，数组和对象在没有引用变量指向它时，才会变为垃圾，不再被使用，但仍然占据内存空间不放，在随后一个不确定的时间呗GC释放，这也是java比较占内存的原因。</p>
<blockquote>
<p>Java内部还是有指针的，只是把指针的概念对用户隐藏起来了。</p>
</blockquote>
<h3 id="Pitfall"><a href="#Pitfall" class="headerlink" title="Pitfall"></a>Pitfall</h3><h4 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h4><p>与java有关的环境变量对空格和中文是非常敏感的<br>java -verbose，显示JVM详细的加载过程</p>
<p>环境变量：OS中定义的变量，可供操作系统上所有应用程序使用<br>Windows：在cmd中，用set命令查看，是用户和系统环境变量的总和<br>path：设置供OS去寻找和执行应用程序的路径，当前目录–&gt;Path设置的目录，以最先找到的为准<br>Windows，用;分隔，Linux用:分隔<br>Windows，用%variable%取值，Linux用$variable取值</p>
<p><img src="http://onzc6nld3.bkt.clouddn.com/1.2.jpg" alt=""></p>
<p>classpath：jvm按照classpath环境变量指定的目录顺序去查找这个类，以最先找到的为准，注意：与linux类似，jvm只会到classpath指定的目录中去寻找类，而不会自动在当前目录中去寻找</p>
<p>.代表java虚拟机运行时的当前工作目录</p>
<p>系统Windows，用;分隔，Linux用:分隔</p>
<h3 id="Java-Class"><a href="#Java-Class" class="headerlink" title="Java Class"></a>Java Class</h3><p>Java中的程序必须以类的形式存在，一个类要被解析器直接启动运行，必须要有main方法，jvm运行时，首先会调用main方法，main方法的写法是固定的，public static void main(String[] args)</p>
<p>如果在class前没有public修饰符，命名可以是一切合法的名称，而带有public，必须与源文件同名</p>
<p>xxx.java中可以定义多个class，javac之后，产生多个class文件，能直接用java启动的只有那个含有main方法的类</p>
<h3 id="Java-Grammar"><a href="#Java-Grammar" class="headerlink" title="Java Grammar"></a>Java Grammar</h3><p>java是严格区分大小写的<br>java所有的程序代码分为结构定义和功能执行语句，一条语句可以写在若干行上，功能执行语句的最后必须用;结束。</p>
<p>java程序中一句连续的字符串不能分开在两行中写，如果太长，可以分成两个字符串，再用+号连起来，然后在+处断行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">单行注释//</div><div class="line">多行注释/*   */</div><div class="line">文档注释/**  */</div></pre></td></tr></table></figure>
<p>多行注释可以嵌套单行注释，但是不能嵌套多行注释</p>
<p>标识符，不能以数字开头，不能是java中的保留关键字</p>
<blockquote>
<p>正确的路有一条，错误的路千万条，何苦要去记住哪些错误的路呢？永远用字幕开头，尽量不要包含其他的符号。</p>
</blockquote>
<p>注意：Java中没有sizeof、goto、const这些关键字，但不能用goto、const作为变量名。</p>
<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ol>
<li><p>整型常量<br>十六进制0x开头<br>八进制0开头<br>长整型l结尾</p>
</li>
<li><p>浮点数常量<br>单精度f/F结尾<br>双精度d/D结尾<br>小数常量的默认类型为double<br>float类型后面一定要加f/F</p>
</li>
<li><p>布尔常量<br>true和false</p>
</li>
<li><p>字符常量<br>java中的字符占用两个字节，是用unicode码表示的。<br>单引号<br>还可以用unicode码值来表示对应的字符</p>
</li>
<li><p>字符串常量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&quot;&quot;</div><div class="line">\反斜杠转义字符</div><div class="line">\\</div><div class="line">\r回车</div><div class="line">\n换行</div><div class="line">\t制表符</div><div class="line">\b退格键</div></pre></td></tr></table></figure>
</li>
<li><p>null常量<br>表示引用的对象为空</p>
</li>
</ol>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>用一个变量定义一块内存以后，程序就可以用变量名代表这块内存中的数据。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,y;</div><div class="line">y=x+<span class="number">3</span>;</div></pre></td></tr></table></figure></p>
<p>先取出x代表的那块内存单元的数，加上3，然后把结果放到y所在的那块内存单元。</p>
<p>Java基本变量类型，都是小写：<br>整数：byte,,short,int,long<br>浮点：float，double<br>字符：char （与c语言不同，java的字符占两个字节，是unicode编码的）<br>布尔：boolean</p>
<p>注意：java语言中没有无符号的数据类型</p>
<p>引用类型：类、接口、数组</p>
<p>计算机里只有数值，当你在内存中看到一个数值时，这个数值可能代表各种意义，比如你看到的文字、图像和听到的声音等都是使用数字形式来表示的，生活中的数值也可以代表其他意义，如1234可以代表密码、存款额、电报信息等，根据上下线索，我们能够知道这些数值代表的意义。其实字符也是一个数字，当要给一个字符变量赋值时，就可以直接用整数，如97对应字符’a’，使用char ch=97 将字符a赋值给变量ch，如果我们要将字符x赋值给一个char变量，该填一个怎样的整数呢？显然，不太容易记住每个字符所对应的数字，所以，我们就用单引号加上这个字符本身来表示那个字符对应的数字，如char ch=’x’。</p>
<p>变量的作用域（scope）<br>在c/c++/java里，一对花括号中间的部分就是一个代码块，代码块决定其中定义的变量的作用域。</p>
<p>局部变量在进行取值操作前必须被初始化或进行过赋值操作，否则会出现编译错误</p>
<h4 id="基本数据类型之间的转换"><a href="#基本数据类型之间的转换" class="headerlink" title="基本数据类型之间的转换"></a>基本数据类型之间的转换</h4><ol>
<li><p>自动（隐式）<br>同时满足两个条件：<br>A、两种类型彼此兼容；<br>B、目标类型的取值范围要大于源类型。</p>
</li>
<li><p>强制（显式）<br>类型不兼容或者取值范围要小于源类型</p>
</li>
</ol>
<p>字符串可以使用+同其他的数据类型相连形成一个新的字符串(将其他数据类型值默认转化为十进制)</p>
<p>源和目标分别是两个大小不同的内存块（由变量及数据的类型来决定），将源数据赋值给目标内存的过程，就是用目标内存块去套取源内存中的数据，能套多少算多少。</p>
<ol>
<li>表达式的数据类型自动提升</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span> b = <span class="number">5</span>;</div><div class="line">b = b-<span class="number">2</span>;</div><div class="line">System.out.println(b);</div></pre></td></tr></table></figure>
<p>在表达式取值时，变量值被自动提升为int类型</p>
<blockquote>
<p>b = (byte)(b-2)</p>
</blockquote>
<p>java定义了若干适用于表达式的类型提升规则<br>A、所有的byte类型、short类型和char类型的值将被提升到int类型；<br>B、如果一个操作数是long类型，计算结果就是long类型<br>C、如果一个操作数是float类型，计算结果就是float类型<br>D、如果一个操作数是double类型，计算结果就是double类型</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><img src="http://onzc6nld3.bkt.clouddn.com/2.4.jpg" alt=""></p>
<p>方法要接收调用程序传递进来的参数，必须为每个传递进来的参数定义一个变量。如果方法没有return语句，编译时，系统会自动在方法的最后添加一个return。</p>
<p>void：不知道是什么类型，可定义方法时又非要填写一个返回值类型，就用它充数吧。</p>
<h4 id="方法的重载-overload"><a href="#方法的重载-overload" class="headerlink" title="方法的重载(overload)"></a>方法的重载(overload)</h4><p>java的编译器很聪明，能够根据调用方法时所传递的参数的个数和类型选择相应的方法，重载方法的参数列表必须不同，要么是参数的个数不同，要么是参数的类型不同。重载方法的返回值类型可以相同，也可以不同。</p>
<blockquote>
<p>如果两个方法的参数类型和个数完全一样，返回值类型不同，行不行？如果你是java的设计者，而且你的用户在程序里编写了这样的两个方法，在调用时，你能根据他所传递的参数来为他选择到底该用哪个吗？没有办法吧！那就是不能这样做。学编程不需要死记硬背，靠的是动脑筋来思考，这样的学习才能做到举一反三、触类旁通。</p>
</blockquote>
<h3 id="Java中的运算符"><a href="#Java中的运算符" class="headerlink" title="Java中的运算符"></a>Java中的运算符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">“+”除字符串相加功能外，还能降字符串与其他的数据类型相连成一个新的字符串，条件是表达式中至少有一个字符串，如&quot;x&quot;+123的结果是&quot;x123&quot;</div><div class="line">如果对负数取模，可以把模数符号忽略不计，如5%(-2)=1，但是被模数是负数就另当别论了如(-5)%(-2)=-1</div><div class="line">/，整数除和小数除是有区别的，整数之间做除法，只保留整数部分而舍弃小数部分。3510/1000*1000=3000</div></pre></td></tr></table></figure>
<p>为了避免将比较运算符==误写成=，有经验的程序员干脆写成if(3==x)，将常量放在==前面，这样万一写错，编译器就会报错。</p>
<p><strong>逻辑运算符</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&amp; 或者|无论任何情况，&amp;两边的表达式都会参与计算</div><div class="line">&amp;&amp; 或者||当左边为false时，则将不会计算其右边的表达式</div></pre></td></tr></table></figure></p>
<p>XOR异或，只有当^连接的两个布尔表达式的值不相同时，该组合才返回true值。</p>
<p><strong>移位运算符</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;&lt;左移</div><div class="line">&gt;&gt;右移</div><div class="line">&gt;&gt;&gt;无符号右移</div></pre></td></tr></table></figure></p>
<p>右移时，如果最高位是0，左边移空的高位就填入0<br>如果最高位是1，左边移空的高位就填入1<br>无符号右移，不管高位是0还是1，左边移空的高位都填入0</p>
<p>移位运算符适用数据类型有byte、short、char、int、long</p>
<ol>
<li>对低于int类型的操作数将先自动转换为int类型再移位；</li>
<li>对于int类型整数移位a&gt;&gt;b，系统先将b对32取模，得到的结果才是真正移位的位数。</li>
<li>对于long类型整数移位时a&gt;&gt;b，则是先将移位位数对64取模。</li>
</ol>
<p>移位能为我们实现整数除以或乘以2的n次方的效果，如x&gt;&gt;1的结果和x/2的结果是一样的，x&lt;&lt;2和x*4的结果也是一样的。一个数左移n位，就等于这个数乘以2的n次方，一个数右移n位，就等于这个数除以2的n次方。</p>
<blockquote>
<p>注意：移位不会改变变量本身的值</p>
</blockquote>
<p>经验分享：不要在一行中编写太复杂的表达式，也就是不要在一行中进行太多的运算，除可读性差之外，还极容易出错。多用括号分成多条语句，括号的优先级是最高的。</p>
<h3 id="程序的流程控制"><a href="#程序的流程控制" class="headerlink" title="程序的流程控制"></a>程序的流程控制</h3><p>结构化程序设计角度：</p>
<ol>
<li>顺序</li>
<li>选择</li>
<li>循环</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">对于if x then y，还有一种更简洁的写法</div><div class="line">变量 = 布尔表达式?语句1:语句2</div></pre></td></tr></table></figure>
<p>求绝对值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">y= x&gt;0?x:-x</div></pre></td></tr></table></figure></p>
<p>在java中，if和elseif括号中的表达式的结果必须是布尔型的，这一点和c/c++不一样</p>
<p>switch语句判断条件可以接受byte,short,int,char类型，不接受其它类型<br>case是一旦碰到第一次匹配，如果没有break，就会继续执行。</p>
<p>注意while表达式的括号后一定不要加;</p>
<p>do while语句的结尾处多了一个分号;</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是多个相同类型数据的组合，实现对这些数据的统一管理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int [] x = new int[100];</div><div class="line">int x[] = new int[100];</div></pre></td></tr></table></figure></p>
<p><img src="http://onzc6nld3.bkt.clouddn.com/2.14.jpg" alt=""></p>
<p>数组的静态初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int a = &#123;1,2,3,4&#125;;</div><div class="line">int a[] = new int[]&#123;3,4,5&#125;;</div></pre></td></tr></table></figure></p>
<p>注意：在java语言中声明数组时，无论用何种方式定义数组，都不能指定其长度。</p>
<p>多维数组，在java中并没有真正的多维数组，只有数组的数组，虽然在应用上很像C语言中的多维数组，但还是有区别的。在C语言中定义一个二维数组，必须是一个x*y二维矩阵块，类似我们通常所见到的棋盘。</p>
<p>Java中多维数组不一定是规则矩阵形式</p>
<p><img src="http://onzc6nld3.bkt.clouddn.com/2.18.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int [][] xx = &#123;&#123;3,2,7&#125;,&#123;1,5&#125;,&#123;6&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>与一维数组一样，在声明多维数组时不能指定其长度。</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>什么是面向对象，这是一个相对概念，是相对面向过程而言的。<br>要理解什么是幸福，要先理解什么是痛苦一样的道理。</p>
<h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><p>Windows窗口–&gt;结构体<br>HideWindow、MoveWindow，接收参数<br>谓语与宾语的关系，程序的重心集中在方法（谓语）上</p>
<h3 id="面向对象-1"><a href="#面向对象-1" class="headerlink" title="面向对象"></a>面向对象</h3><p>Windows窗口，主体，有属性，<br>有动作（方法，Hide,Move…）<br>主语与谓语的关系，程序的重点集中在主体/对象（主语）上</p>
<p>封装性，用类封装了数据和方法<br>真正能体现面向对象的强大优势的地方，是在面向对象的继承与多态性方面<br>封装性是面向对象的根源和最根本的属性</p>
<p>封装：Encapsulation<br>继承：Inheritance<br>多态：Polymorphism</p>
<p>面向对象的编程思想力图使在计算机语言中对事物的描述与现实世界中该事物的本来面目尽可能地一致，类和对象就是面向对象方法的核心概念。类时对某一类事物的描述，是抽象的、概念上的定义，对象是实际存在的该类事物的个体，因而也成实例（Instance）。</p>
<p>面向对象程序设计的重点是类的设计。</p>
<p>类的属性：类的成员变量<br>类的方法：类的成员方法<br>一个类中的方法可以直接访问同类中的任何成员（包括成员变量和成员方法）</p>
<p>注意：方法中的变量若与类成员变量同名，则该方法中对这个变量名的访问时局部变量而非成员变量。</p>
<p>对象的引用句柄是在栈中分配的一个变量，对象本身是在堆中分配的，原理同之前讲过的数组一样。</p>
<p>当一个对象被创建时，会对其中各种类型的成员变量自动进行初始化赋值，除了基本数据类型之外的变量类型都是引用类型。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">int</span>： <span class="number">0</span></div><div class="line"><span class="keyword">long</span>:<span class="number">0L</span></div><div class="line"><span class="keyword">float</span>:<span class="number">0.0F</span></div><div class="line"><span class="keyword">double</span>:<span class="number">0.0</span>D</div><div class="line"><span class="keyword">char</span>：<span class="string">'\u0000'</span>（表示为空）</div><div class="line"><span class="keyword">boolean</span>：<span class="keyword">false</span></div><div class="line">All reference type：<span class="keyword">null</span></div></pre></td></tr></table></figure></p>
<h3 id="对象的比较"><a href="#对象的比较" class="headerlink" title="对象的比较"></a>对象的比较</h3><p>==用于比较两个变量的值是否相等<br>equals()方法用于比较两个对象的内容是否一致</p>
<p>equls方法是String类的一个成员方法，用于比较两个引用变量所指向的对象的内容是否相等，就像比较两个人的长相是否一样。</p>
<h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><p>创建完对象，在调用该对象的方法时，也可以不定义对象的句柄，而直接调用这个对象的方法。这样的对象叫做匿名对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Person p1 = new Person();</div><div class="line">p1.show();</div><div class="line"></div><div class="line">// 这句代码执行完，这个对象也就变成了垃圾</div><div class="line">new Person().show();</div></pre></td></tr></table></figure>
<p>使用匿名对象的两种情况：<br>A、如果对一个对象只需要进行一次方法调用<br>B、将匿名对象作为实参传递给一个方法调用</p>
<h3 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h3><p>如果外面的程序可以随意修改一个类的成员变量，会造成不可预料的程序错误，就像一个人的身高，不能被外部随意修改，只能通过各种摄取营养的方法去修改这个属性。</p>
<p>为了实现良好的封装性，通常将类的成员变量声明为private，再通过public的方法来对这个变量进行访问。</p>
<p>一个类通常就是一个小的模块，模块设计追求强内聚（许多功能尽量在类的内部独立完成，不让外面干预），弱耦合（提供给外部尽量少的方法调用）。</p>
<h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ol>
<li>它具有与类相同的名称</li>
<li>它不含返回值</li>
<li>它不能在方法中用return语句返回一个值</li>
</ol>
<p>构造方法在程序设计中非常有用，它可以为类的成员变量进行初始化工作。<br>每一个人一出生就必须先洗澡。</p>
<p>注意：在构造方法里不含返回值的概念是不同于void的，对于public void这样的写法就不再是构造方法，而变成了普通方法。</p>
<p>构造方法的重载<br>new 类名(参数列表)</p>
<p>在执行构造方法中的代码之前，进行属性的显式初始化，也就是执行在定义成员变量时就对其进行赋值的语句。</p>
<p>在java的每个类里都至少有一个构造方法，如果没有定义，系统会自动为这个类产生一个默认的构造方法，没有参数，方法体中也没有任何代码，即什么也不做。</p>
<p>一旦定义了构造方法，系统就不再产生默认的构造方法。</p>
<p>经验：只要定义有参数的构造方法，都最好再定义一个无参数的构造方法。构造方法一般都是public的，因为它们在对象产生时，会被系统自动调用。</p>
<p>每个成员方法内部，都有一个this引用变量，指向调用这个方法的对象。<br><img src="http://onzc6nld3.bkt.clouddn.com/3.14.jpg" alt=""></p>
<blockquote>
<p>对于一个方法来说，只要是对象，它就可以调用，它根本就不区分是不是自己所属的那个对象。</p>
</blockquote>
<p>this应用场景：<br>A、想通过构造方法将外部传入的参数赋值给类成员变量，构造方法的形式参数名称与类的成员变量名相同；</p>
<p>B、假设有一个容器类和一个部件类，在容器类的某个方法中要创建部件类的实例对象，而部件类的构造方法要接收一个代表其所在容器的参数。</p>
<p>C、我们可以在一个构造方法里调用其他重载的构造方法，不是用构造方法名，而是用this（参数列表）的形式，根据其中的参数列表，选择相应的构造方法。</p>
<h3 id="GC有关的知识"><a href="#GC有关的知识" class="headerlink" title="GC有关的知识"></a>GC有关的知识</h3><blockquote>
<p>皮之不存毛将焉附，如果对象都不存在，又怎么能够调用它的方法，无论是构造方法被调用，还是析构方法被调用，对象都在内存中存在。</p>
</blockquote>
<p>Java的finalize()方法的作用类似c++中的析构方法，finalize()方法是在对象被当成垃圾从内存中释放前调用，而不是在对象变成垃圾前调用，垃圾回收器的启用不由程序员控制，业务规律可循，并不会一产生垃圾，它就被唤起，甚至有可能到程序终止，它都没有启动的机会。</p>
<p>System.gc()，强制启动垃圾回收器来回收垃圾。</p>
<p><img src="http://onzc6nld3.bkt.clouddn.com/3.15.jpg" alt=""></p>
<blockquote>
<p>读代码时，不是专盯代码本身，而是要看内存状态。</p>
</blockquote>
<h3 id="方法的参数传递"><a href="#方法的参数传递" class="headerlink" title="方法的参数传递"></a>方法的参数传递</h3><h4 id="基本数据类型的参数传递"><a href="#基本数据类型的参数传递" class="headerlink" title="基本数据类型的参数传递"></a>基本数据类型的参数传递</h4><p>基本类型的变量作为实参传递，并不能改变这个变量的值。<br><img src="http://onzc6nld3.bkt.clouddn.com/3.16.jpg" alt=""></p>
<h4 id="引用数据类型的参数传递"><a href="#引用数据类型的参数传递" class="headerlink" title="引用数据类型的参数传递"></a>引用数据类型的参数传递</h4><p>一个对象可以有多个句柄（名称/引用）<br><img src="http://onzc6nld3.bkt.clouddn.com/3.17.jpg" alt=""></p>
<blockquote>
<p>Java语言在给被调用方法的参数赋值时，只采用传值的方式。所以，基本类型数据传递的是该数据的值本身，引用类型数据传递的也是这个变量的值本身，即对象的引用（句柄），而非对象本身，通过方法调用，可以改变对象的内容，但是对象的引用是不能改变的。对于数组，也属于引用类型。</p>
</blockquote>
<h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><h4 id="static-变量"><a href="#static-变量" class="headerlink" title="static 变量"></a>static 变量</h4><p>有时候，我们希望无论是否产生了对象，或无论产生了多少对象的情况下，某些特定的数据在内存空间里只有一份，例如所有的中国人都有国家名称，每一个中国人都共享这个国家名称，不必在每一个中国人的实例对象中都单独分配一个用于代表国家名称的变量。</p>
<p>静态变量在某种程度上与其他语言的全局变量相类似，如果不是私有的就可以在类的外部进行访问，此时不需要产生类的实例对象，只需要类名就可以引用。对于静态成员变量，我们叫类属性(class attributes)</p>
<p>用static标识符修饰的变量，它们在类被载入时创建，只要类存在，static变量就存在。</p>
<h4 id="static-方法"><a href="#static-方法" class="headerlink" title="static 方法"></a>static 方法</h4><p>对于静态成员方法，我们叫类方法(class method)，采用static关键字说明类的属性和方法不属于类的某个实例对象。</p>
<p>注意：</p>
<ol>
<li>在静态方法里只能直接调用同类中其他的静态成员（包括变量和方法），而不能直接访问类中的非静态成员。这是因为，对于非静态的方法和变量，需要先创建类的实例对象后才可使用。</li>
<li>静态方法不能以任何方式引用this和super关键字，道理同1</li>
<li>main()方法是静态的，因此jvm在执行main方法时不创建main方法所在的类的实例对象，因而在main方法中，不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员。</li>
</ol>
<h4 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h4><p>static block，当类被载入时，静态代码块被执行，且只被执行一次，静态块经常用来进行类属性的初始化。尽管产生了类的多个实例对象，但其中的静态代码块只被执行一次。</p>
<p>当一个程序用到了其他的类，才会去装载那个类。</p>
<blockquote>
<p>类是在第一次被使用的时候才被装载，而不是在程序启动时就装载程序中所有可能要用到的类。</p>
</blockquote>
<h4 id="单态设计模式"><a href="#单态设计模式" class="headerlink" title="单态设计模式"></a>单态设计模式</h4><p>设计模式是在大量的实践总结和理论化之后优选的代码结构、编程风格以及解决问题的思考方式。设计模式就像是经典的棋谱，不同的棋局，我们用不同的棋谱，免得自己再去思考和摸索。</p>
<p>了解和掌握设计模式，这也是java开发者提高自身素质的一个很好选择。</p>
<p>单态设计模式：在整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。</p>
<ol>
<li>将类的构造方法的访问权限设置为private，这样，就不能用new操作符在类的外部产生类的对象了，但在类的内部仍可以产生该类的对象。</li>
</ol>
<h4 id="理解main方法的语法"><a href="#理解main方法的语法" class="headerlink" title="理解main方法的语法"></a>理解main方法的语法</h4><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>在一个类内部定义类，这就是嵌套类（nested classes），也叫内部类。<br>嵌套类可以直接访问嵌套它的类的成员，包括private成员，但是嵌套类的成员却不能被嵌套它的类直接访问。</p>
<p>在类中直接定义的嵌套类的使用范围，仅限于这个类的内部，A类中定义了一个B类，那么B为A所知，却不被A的外面所知。内部类可以声明为private或protected。</p>
<p><img src="http://onzc6nld3.bkt.clouddn.com/3.21.jpg" alt=""></p>
<p>在内部类对象保存了一个对外部类对象的引用，当内部类的成员方法中访问某一变量时，如果在该方法和内部类中都没有定义过这个变量，调用就会被传递给内部类中保存的那个外部类对象的引用，通过那个外部类对象的引用去调用这个变量，在内部类中调用外部类的方法也是一样的道理。</p>
<p>应用场景：<br>当一个类中的程序代码要用到另一个类的实例对象，而另一个类中的程序代码又要访问第一个类中的成员，将另一个类做成第一个类的内部类，程序代码就要容易编写得多。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> out_i = <span class="number">100</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">		Inner in = <span class="keyword">new</span> Inner();</div><div class="line">		in.display();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></div><div class="line">		&#123;</div><div class="line">			System.out.println(<span class="string">"display out_i = "</span> + out_i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果用static修饰一个内部类，这个类就相当于是一个外部定义的类。<br>非static内部类中，成员是不能声明为static的。</p>
<p><img src="http://onzc6nld3.bkt.clouddn.com/3.22-0.jpg" alt=""><br><img src="http://onzc6nld3.bkt.clouddn.com/3.22-1.jpg" alt=""></p>
<p>内部类也可以通过创建对象从外部类之外被调用，只要将内部类声明为public即可。</p>
<p>内部类Inner被声明为public，在外部就可以创建其外部类Outer的实例对象，再通过Outer类的实例对象创建Inner类的实例对象，就可以使用Inner类的实例对象来调用内部类Inner中的方法了。</p>
<p>嵌套类也可以在程序块的范围内定义。如，在方法中，或甚至在for循环体内部等。</p>
<p>在方法中定义的内部类只能访问方法中的final类型的局部变量，因为用final定义的局部变量相当于是一个常量，它的生命周期超出方法运行的生命周期。</p>
<h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>关键字：extends</p>
<ol>
<li>java只支持单继承，不允许多重继承，即：一个子类只能有一个父类</li>
<li>一个类可以被多个类继承</li>
<li>可以有多层继承</li>
<li>子类继承父类所有的成员变量和成员方法，但不继承父类的构造方法。在子类的构造方法中可使用语句super(参数列表)调用父类的构造方法。</li>
<li>如果子类的构造方法中没有显式地调用父类的构造方法，也没有使用this关键字调用重载的其它构造方法，则在产生子类的实例对象时，系统默认调用父类无参数的构造方法。</li>
<li>如果子类构造方法中没有显式地调用父类构造方法，而父类中又没有无参数的构造方法，则编译出错。经验：我们在定义类时，只要定义了有参数的构造方法，通常都还需要定义一个无参数的构造方法。</li>
</ol>
<h3 id="子类对象实例化过程"><a href="#子类对象实例化过程" class="headerlink" title="子类对象实例化过程"></a>子类对象实例化过程</h3><ol>
<li>分配成员变量的存储空间并进行默认的初始化；</li>
<li>绑定构造方法参数，就是new Class(实际参数列表)中所传递进的参数赋值给构造方法中的形式参数变量；</li>
<li>如有this()调用，则调用相应的重载构造方法，被调用的重载构造方法的执行流程结束后，回到当前构造方法，当前构造方法直接跳转到步骤6执行；</li>
<li>显式或隐式追溯调用父类的构造方法（一直到Object类为止，Object是所有java类的最顶层父类），父类的构造方法又从步骤2开始对父类执行这些流程，父类的构造方法的执行流程结束后，回到当前构造方法，当前构造方法继续往下执行。</li>
<li>进行实例变量的显式初始化操作，也就是执行在定义成员变量时就对其进行赋值的语句。</li>
<li>执行当前构造方法的方法体中的程序代码。</li>
</ol>
<p>注意：this()方法调用语句与this.school=school的区别，前者指调用其他的构造方法，后者是一个普通的赋值语句。</p>
<p>为什么？</p>
<ol>
<li>为什么super(…)和this(…)调用语句不能同时在一个构造方法中出现？</li>
<li>为什么super(…)或this(…)调用语句只能作为构造方法的第一句出现？</li>
</ol>
<p><img src="http://onzc6nld3.bkt.clouddn.com/4.1.jpg" alt=""></p>
<h3 id="覆盖父类的方法"><a href="#覆盖父类的方法" class="headerlink" title="覆盖父类的方法"></a>覆盖父类的方法</h3><p>覆盖方法必须和被覆盖方法具有相同的方法名称、参数列表和返回值类型<br>覆盖方法时，不能使用比父类中被覆盖的方法更严格的访问权限，如父类的方法时public，子类的方法就不能是private。</p>
<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><ol>
<li>在java中声明类、属性和方法时，可使用关键字final来修饰。</li>
<li>final标记的类不能被继承。</li>
<li>final标记的方法不能被子类重写；</li>
<li>final标记的变量（成员变量或局部变量）即成为常量（这个常量也只能在这个类的内部使用，不能在类的外部直接使用，当用public static final共同标记常量时，这个常量就成了全局的常量，并且只能在定义时赋值，java中的全局常量也放在一个类中定义），只能赋值一次。final标记的成员变量必须在声明的同时或在该类的构造方法中显式赋值，然后才能使用。</li>
<li>方法中定义的内置类只能访问该方法内的final类型的局部变量，用final定义的局部变量相当于是一个常量，它的生命周期超出方法运行的生命周期。将一个形参定义成final也是可以的，这就限定了我们在方法中修改形式参数的值。</li>
</ol>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>Java中可以定义一些不含方法体的方法，它的方法体的实现交给该类的子类根据自己的情况去实现，这样的方法就是抽象方法，包含抽象方法的类就叫抽象类，一个抽象类中可以有一个或多个抽象方法。任何带有抽象方法的类都必须声明为抽象类。</p>
<p>修饰符：abstract<br>抽象类不能被实例化<br>抽象方法只需声明，而不需实现。</p>
<p>抽象类的子类必须覆盖所有的抽象方法后才能被实例化，否则这个子类还是个抽象类。</p>
<p>abstract 返回值类型 抽象方法(参数列表)</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>如果一个抽象类中的所有方法都是抽象的，就可以将这个类用另外一种方式来定义，也就是接口定义。</p>
<p>接口是抽象方法和常量值的定义的集合，从本质上讲，接口是一种特殊的抽象类，这种类中只包含常量和方法的定义，而没有变量和方法的实现。</p>
<p>即使没有显式地将其中的成员用public关键字标识，但这些成员都是public访问类型的。</p>
<p>接口里的变量默认是用public static final标识的，所以，接口中定义的变量就是全局静态常量。</p>
<ol>
<li>可以用extends关键字去继承一个已有的接口</li>
<li>也可以定义一个类，用implements关键字去实现一个接口中的所有方法</li>
<li>还可以去定义一个抽象类，用implements关键字去实现一个接口中定义的部分方法</li>
</ol>
<blockquote>
<p>在java中，设计接口的目的是为了让类不必受限于单一继承的关系，而可以灵活地同时继承一些共有的特性，从而达到多重继承的目的，而且避免了C++中多重继承的复杂关系所产生的问题。多重继承的危险性在于一个类有可能继承了同一个方法的不同实现，对接口来讲绝不会发生这种情况，因为接口没有任何实现。</p>
</blockquote>
<p>一个类可以在继承一个父类的同时，实现一个或多个接口，extends关键字必须位于implements关键字之前。</p>
<ol>
<li>实现一个接口就是要实现该接口的所有方法（抽象类除外）</li>
<li>接口中的方法都是抽象的</li>
<li>多个无关的类可以实现同一个接口</li>
<li>一个类可以实现多个无关的接口</li>
</ol>
<blockquote>
<p>调用者和被调用者必须共同遵守某一限定，调用者按照这个限定进行方法调用，被调用者按照这个限定进行方法实现，在面向对象的编程语言中，这种限定就是通过接口类来表示的，主板和各种PCI卡就是按照PCI接口进行约定的。</p>
</blockquote>
<p>java编译器并不能根据一个类中有哪些方法，就知道它是某个类的子类的，编译器只能从extends和implements关键字上来了解。</p>
<h3 id="对象的多态性"><a href="#对象的多态性" class="headerlink" title="对象的多态性"></a>对象的多态性</h3><h4 id="对象的类型转换"><a href="#对象的类型转换" class="headerlink" title="对象的类型转换"></a>对象的类型转换</h4><ol>
<li>子类转换成父类</li>
<li>父类转换成子类<br>强制转换：目的是让编译器进行语法检查时开点后门，放你过关，强制类型转换并不是要对内存中的对象大动手术，不是要将男人变成女人。</li>
</ol>
<p>强制类型转换的前提是程序员提前就知道要转换的父类引用类型对象的本来面目确实是子类类型的。</p>
<blockquote>
<p>可以用instanceof判断是否一个类实现了某个接口，也可以用它来判断一个实例对象是否属于一个类。</p>
</blockquote>
<h4 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h4><p>Object类时java类层中的最高层类，是所有类的超类，java中任何一个类都是它的子类，由于所有类都是object衍生出来的，所以object的方法适用于所有类。</p>
<p>Object中有一个equals方法，用于比较两个对象是否相等，默认值为false，为了确保准确，自定义类中必须覆盖Object类的equals方法。</p>
<h4 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h4><ol>
<li>应用程序不必为每一个派生类（子类）编写功能调用，只需要对抽象基类进行处理即可。</li>
<li>派生类的功能可以被基类的方法或引用变量调用，这叫后向兼容，可以提高程序的可扩充性和可维护性。</li>
</ol>
<h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>内部类可以声明是抽象类或是一个接口，它可以被另外一个内部类来继承或实现，内部类可以继承外部类，也可以用final关键字修饰。</p>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>异常定义了程序中遇到的非致命的错误，而不是编译时的语法错误，如程序打开一个不存在的文件，网络连接中断，操作数越界，装载一个不存在的类等…</p>
<p>当try代码块中的程序发生了异常，系统将这个异常发生的代码行号，类别等信息封装到一个对象中，并将这个对象传递给catch代码块。</p>
<h4 id="throws关键字"><a href="#throws关键字" class="headerlink" title="throws关键字"></a>throws关键字</h4><p>定义方法时用throws关键字声明了它有可能发生异常，调用者就必须使用try…catch语句进行处理，这叫防患于未然。</p>
<p>在a调用方法中不处理，继续throws，一直到main方法<br>java中一个方法时可以被声明成抛出多个异常的。</p>
<p>Exception类是所有异常类的父类，除了ArithmeticException、NullPointerException、ArrayIndexOutOfBoundsException等系统异常外，我们也可以定义自己的异常类。</p>
<p>java是通过throw关键字抛出异常对象的<br>throw 异常对象;</p>
<p>在一个方法内使用throw关键字抛出了异常对象，如果该方法内部没有用try…catch语句对这个抛出的异常进行处理，则此方法应声明抛出异常，而由该方法的调用者负责处理。</p>
<p>我们可以在一个方法中使用throw、try…catch语句来实现程序的跳转<br><img src="http://onzc6nld3.bkt.clouddn.com/4.4.4.jpg" alt=""></p>
<h4 id="finally关键字"><a href="#finally关键字" class="headerlink" title="finally关键字"></a>finally关键字</h4><p>finally语句中的代码不管异常是否被捕获总是要被执行的。<br>finally中的代码块不能被执行的唯一情况是：在被保护代码块中执行了System.exit()</p>
<p>注意：</p>
<ol>
<li>一个方法被覆盖时，覆盖它的方法必须抛出相同的异常或异常的子类；</li>
<li>如果父类抛出多个异常，那么重写（覆盖）方法必须抛出那些异常的一个子集，也就是说，不能抛出新的异常。</li>
</ol>
<p>java没有goto语句，它保留goto关键字只是为了让程序员不要搞混。java利用带标号的break和continue语句来取代goto。java中严格定义的异常处理机制使goto没有再存在的必要，取消这种随意跳转的语句有利于优化代码以及保持系统的健壮性和安全性。</p>
<blockquote>
<p>java异常强制我们去考虑程序的强健性和安全性</p>
</blockquote>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>java通过引入package机制，提供类的多层类命名空间。</p>
<p>位于包中的每个类的完整名称都应该是包名与类名的组合。<br>同一个包中的类相互访问，不用指定包名。</p>
<blockquote>
<p>同是中国的两个城市，使用时非要加个中国前缀，也是行得通的，但让人听起来就有点像汉奸了</p>
</blockquote>
<p>如果从外部访问一个包中的类，必须使用类的完整名称。<br>虚拟机在装载带有包名的类时，会先找到classpath环境变量指定的目录，再在这些目录中，按照与包名层次相对应的目录结构去查找class文件。</p>
<p>在编译时，让javac来生成与包名层次相对应的目录结构，而不必手工去创建。</p>
<p>javac -d  . Test.java</p>
<p>. 代表当前目录</p>
<p>如果没有-d选项，.class文件存放在当前工作目录</p>
<p>位于在包中的类，在文件系统中的存放位置，必须有与包名层次相对应的目录结构。在package语句中，用.来指明包的层次。</p>
<p>虚拟机在装载带有包名的类时，会先找到classpath环境变量指定的目录，再在这些目录中，按照与包名层次相对应的目录结构去查找class文件。</p>
<ol>
<li>即使java/class文件名相同，但其中包含的类的完整名称却不一定相同。</li>
<li>同一个包中的类不必位于同样的目录，因为java是通过classpath去寻找顶层包名。</li>
</ol>
<p>包名必须在程序中通过package语句指定，而不是靠目录结构来指定，先要有了包名后，才需要相应的目录结构。</p>
<p>包声明放在源文件的最前面，每个源文件只能声明一个包。</p>
<p>在实际应用中，虽然编译了一个修改过的java源文件，但运行可能是某个旧的class文件，特别是旧的class文件所在的目录再classpath环境变量中的位置，位于新的class文件所在的目录的前面，问题就更加隐蔽了。</p>
<p>当我们在编译过程中遇到了问题，有时并不是程序本身所带来的问题，需要我们放眼全局，思路更加开阔一些，从多个方面去思考和解决问题。</p>
<h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><p>父包和子包之间，能从语意上表示某种血缘和亲近关系，但父包和子包在使用上没有任何关系，如父包中的类调用子包中的类，必须引用子包的全名，而不能省略父包名部分。</p>
<p>import一个包中所有的类，并不会import这个包中的子包中的类，如果程序中用到了子包的类，需要再次对子包作单独引入。</p>
<h4 id="jdk中的常用包"><a href="#jdk中的常用包" class="headerlink" title="jdk中的常用包"></a>jdk中的常用包</h4><ol>
<li>java.lang<br>包含一些java语言的核心类，如String、Math、Integer、System和Thread，提供常用功能；</li>
</ol>
<p>java1.2以后的版本中，java.lang这个包会自动被导入，对于其中的类，不需要使用import语句来做导入，如System类</p>
<ol>
<li><p>java.io<br>包含能提供多种输入/输出功能的类</p>
</li>
<li><p>java.util<br>包含一些实用工具类，如定义系统特性、使用与日期日历相关的方法。</p>
</li>
<li><p>java.net<br>包含执行与网络相关的操作的类</p>
</li>
</ol>
<h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>访问修饰符共有4个：default、public、protected、private</p>
<h4 id="类成员"><a href="#类成员" class="headerlink" title="类成员"></a>类成员</h4><p>private<br>不能在方法体内声明的变量前加private修饰符</p>
<p>default 默认访问控制：default、friendly、package<br>对于默认访问控制成员，可以被这个包中的其它类访问。如果一个子类与父类位于不同的包中，子类也不能访问父类中的默认访问控制成员。</p>
<p>protect：既可以被同一个包中的其他类访问，也可以被不同包中的子类访问。</p>
<p>public：所有类，不管访问类与被访问类是否在同一个包中。</p>
<p><img src="http://onzc6nld3.bkt.clouddn.com/4.1table.jpg" alt=""></p>
<h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>只有两种访问权限<br>即：public和默认</p>
<p>父类不能是private和protected，否则子类无法继承<br>public修饰的类能被所有的类访问，<br>默认修饰的类，只能被同一包中的所有类访问。</p>
<h3 id="java命名习惯"><a href="#java命名习惯" class="headerlink" title="java命名习惯"></a>java命名习惯</h3><ol>
<li>包名中的字母一律小写，如xxyyzz</li>
<li>类名、接口名应当使用名词，每个单词的首字母大写，如XxYyZz</li>
<li>方法名，第一个单词小写，后面每个单词的首字母大写，如xxYyZz</li>
<li>变量名，第一个单词小写，后面每个单词的首字母大写，如xxYyZz</li>
<li>常量名中的每一个字母一律大写，如XXXYYYZZZ</li>
</ol>
<h3 id="使用jar文件"><a href="#使用jar文件" class="headerlink" title="使用jar文件"></a>使用jar文件</h3><p>我们用的jdk中的包与类主要在jdk的安装目录的jre\lib\rt.jara文件中，由于java虚拟机会自动找到这个jar包，所以我们在使用这个jar包的类时，无需再用classpath来指向它们的位置。</p>
<p>jar: java archive file</p>
<p>jar文件是一种压缩文件，与常见的zip压缩文件格式兼容，习惯上称之为jar包，我们将开发的类压缩到jar文件中，以jar包的方式提供给别人使用。只要别人的classpath环境变量的设置中包含这个jar文件，java虚拟机就能自动在内存中解压这个jar文件，把这个jar文件当做一个目录，在这个jar文件中去寻找所需要的类及包名所对应的目录结构。</p>
<p><img src="http://onzc6nld3.bkt.clouddn.com/4.7.jpg" alt=""></p>
<h4 id="jar-命令详解"><a href="#jar-命令详解" class="headerlink" title="jar 命令详解"></a>jar 命令详解</h4><p>jar命令是随jdk自动安装的，存放在jdk安装目录下的bin目录中。</p>
<p>jar命令可以用来对大量的类进行压缩，然后存为jar文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Usage: jar &#123;ctxui&#125;[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files ...</div><div class="line">Options:</div><div class="line">    -c  create new archive</div><div class="line">    -t  list table of contents for archive</div><div class="line">    -x  extract named (or all) files from archive</div><div class="line">    -u  update existing archive</div><div class="line">    -v  generate verbose output on standard output</div><div class="line">    -f  specify archive file name</div><div class="line">    -m  include manifest information from specified manifest file</div><div class="line">    -n  perform Pack200 normalization after creating a new archive</div><div class="line">    -e  specify application entry point for stand-alone application</div><div class="line">        bundled into an executable jar file</div><div class="line">    -0  store only; use no ZIP compression</div><div class="line">    -P  preserve leading '/' (absolute path) and ".." (parent directory) components from file names</div><div class="line">    -M  do not create a manifest file for the entries</div><div class="line">    -i  generate index information for the specified jar files</div><div class="line">    -C  change to the specified directory and include the following file</div><div class="line">If any file is a directory then it is processed recursively.</div><div class="line">The manifest file name, the archive file name and the entry point name are</div><div class="line">specified in the same order as the 'm', 'f' and 'e' flags.</div><div class="line"></div><div class="line">Example 1: to archive two class files into an archive called classes.jar:</div><div class="line">       jar cvf classes.jar Foo.class Bar.class</div><div class="line">Example 2: use an existing manifest file 'mymanifest' and archive all the</div><div class="line">           files in the foo/ directory into 'classes.jar':</div><div class="line">       jar cvfm classes.jar mymanifest -C foo/ .</div></pre></td></tr></table></figure>
<p>注意：使用jar压缩文件夹时，在生成的jar文件中会保留在jar命令中所出现的路径名</p>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><blockquote>
<p>在多任务系统中，每个独立执行的程序称为进程，也就是”正在进行的程序”</p>
</blockquote>
<p>每个进程都有独立的代码和数据空间（进程上下文）</p>
<blockquote>
<p>一个线程就是一个程序内部的一条执行线索</p>
</blockquote>
<p>当程序启动运行时，就自动产生了一个线程，主方法main就是在这个线程上运行的，当不再产生线程时，程序就是单线程的。如果要一个程序实现多段代码同时交替运行，就需产生多个线程，并指定每个线程上所要运行的程序代码段。</p>
<p>创建多线程有两种方法，继承Thread类和实现Runnable接口。</p>
<h4 id="用Thread类创建线程"><a href="#用Thread类创建线程" class="headerlink" title="用Thread类创建线程"></a>用Thread类创建线程</h4><p>Java的线程时通过java.lang.Thread类来控制的，一个Thread类的对象代表一个线程，而且只能代表一个线程，通过Thread类和它定义的对象，我们可以获得当前线程对象、获取某一线程的名称，可以实现控制线程暂停一段时间等功能。</p>
<p><img src="http://onzc6nld3.bkt.clouddn.com/5.3.jpg" alt=""></p>
<ol>
<li><p>要将一段代码在一个新的线程上运行，该代码应该在一个类的run方法中，并且run方法所在的类是Thread类的子类。倒过来说，要实现多线程，必须编写一个继承了Thread类的子类，子类要覆盖Thread类中的run方法，在子类的run方法中调用想在新线程上运行的程序代码。</p>
</li>
<li><p>启动一个新的线程，不是直接调用Thread子类对象的run方法，而是调用Thread子类对象的start（从Thread类中继承的）方法，Thread类对象的start方法将产生一个新的线程，并在该线程上运行该Thread类对象中的run方法，根据面向对象的多态性，在该线程上实际运行的是Thread子类（也就是我们编写的那个类）对象中的run方法。</p>
</li>
<li><p>由于线程的代码在run方法中，那么该方法执行完以后，线程也就相应的结束了，因而可以通过控制run方法中的循环条件来控制线程的终止。</p>
</li>
</ol>
<p>Thread类有许多构造方法，通过Thread()构造方法创建的，线程将调用线程对象的run()方法作为其运行代码。如果Thread类的子类没有覆盖run方法，则程序会调用Thread类中的run方法，而该方法什么也不做，所以新的线程刚一产生就结束了。</p>
<p>直接在程序中写 new Thread().start()，新的线程将直接调用Thread类中的run()方法，效果同上。</p>
<p>综上，使用Thread()构造方法，适用于覆盖了run方法的Thread子类创建线程对象的情况。</p>
<h4 id="使用Runnable接口创建多线程"><a href="#使用Runnable接口创建多线程" class="headerlink" title="使用Runnable接口创建多线程"></a>使用Runnable接口创建多线程</h4><p>Thread(Runnable target)构造方法<br>Runnable接口类，该接口只有一个run()方法，当使用Thread（Runnable target）方法创建线程对象时，需要为该方法传递一个实现了Runnable接口的类对象，这样创建的线程将调用那个实现了Runnable接口的类对象中的run()方法作为其运行代码，而不再调用Thread类中的run方法了。</p>
<p>一个线程对象只能启动一个线程，无论你调用多少遍start()方法，结果都只有一个线程。</p>
<p>创建多个Thread类子类的对象，就等于创建了四个资源，每个线程在独立地处理各自的资源。</p>
<p>经验：一个资源（一个Thread类子类或实现了Runnable接口的类的对象），创建多个线程去处理同一个资源，并且每个线程上所允许的是相同的程序代码。</p>
<p>如：Windows上可以启动多个记事本程序，也就是多个进程使用的是同一个记事本程序代码。</p>
<h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p>实现Runnable接口相对于继承Thread类来说，有下述好处：</p>
<ol>
<li><p>适合多个相同程序代码的线程去处理同一资源的情况，把虚拟CPU（线程）同程序的代码、数据有效分离，较好地体现了面向对象的设计思想。</p>
</li>
<li><p>可以避免由于java的单继承性带来的局限。当我们要将已经继承了某一个类的子类放入多线程中，由于一个类不能同时又两个父类，所以不能用继承Thread类的方式，只能采用实现Runnable接口的方式。</p>
</li>
<li><p>有利于程序的健壮性，代码能够被多个线程共享，代码与数据是独立的。当多个线程的执行代码来自于同一个类的实例时，即称它们共享相同的代码，多个线程可以操作相同的数据，与它们的代码无关。当共享访问相同的对象时，即它们共享相同的数据。当线程被构造时，需要的代码和数据通过一个对象作为构造方法实参传递进去，这个对象就是一个实现了Runnable接口的类的实例。</p>
</li>
</ol>
<h4 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h4><p>对java程序来说，只要还有一个前台线程在运行，这个进程就不会结束，如果一个进程只有后台线程运行，这个进程就会结束。前台线程时相对后台线程而言的，如果对某个线程对象在启动（调用start方法）之前调用了setDaemon(true)方法，这个线程就变成了后台线程。</p>
<h4 id="join联合线程"><a href="#join联合线程" class="headerlink" title="join联合线程"></a>join联合线程</h4><p>Thread类的join方法，作用是把a线程合并到调用a.join()语句的线程中。除了无参数的join方法外，还有两个带参数的join方法，分别是join(long millis)和join(long millis, int nanos)，它们的作用是指定合并时间，前者精确到毫秒，后者精确到纳秒，意思是两个线程合并指定的时间后，又开始分离，回到合并前的状态。</p>
<h4 id="多线程实践"><a href="#多线程实践" class="headerlink" title="多线程实践"></a>多线程实践</h4><ol>
<li><p>网络聊天程序<br>发送过程与接收过程在两个不同的线程上运行，彼此之间没有任何约束<br><img src="http://onzc6nld3.bkt.clouddn.com/5.10.jpg" alt=""></p>
</li>
<li><p>耗时数据处理取消机制<br>创建一个新的线程，该线程与用户交互，接收用户的输入，当接收到用户的停止命令时，新线程将主线程的循环条件Flag设置为假，即通知主线程在下次检查循环条件时结束复制过程。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> bFlag =<span class="keyword">true</span>;</div><div class="line"><span class="keyword">while</span>(bFlag)&#123;</div><div class="line">    <span class="comment">//复制程序</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>www服务器<br>为每一个来访者创建一个线程</li>
</ol>
<h4 id="多线程同步"><a href="#多线程同步" class="headerlink" title="多线程同步"></a>多线程同步</h4><p>sleep(long millis)<br>线程的睡眠是可以被打断的，通过Thread.interrupt()，线程的睡眠被打断后进入Runnable状态。</p>
<blockquote>
<p>线程安全，类的同一个实例的方法在多个线程被调用，是否会出现意外。</p>
</blockquote>
<p>一、同步代码块<br>代码块的原子性，好比一座独木桥，任一时刻，只能有一个人在桥上行走，程序中不能有多个线程同时在这两句代码之间执行，这就是线程同步。</p>
<p>将这些需要具有原子性的代码，放入synchronized语句中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// object 可以是任意的一个对象</span></div><div class="line"><span class="keyword">synchronized</span>(object)&#123;代码段&#125;</div></pre></td></tr></table></figure>
<p>任何类型的对象都有一个标志位，该标志位具有0、1两种状态，其开始状态为1，当执行synchronized(object)语句后，object对象的标志位变为0状态，知道执行完整个synchronized语句中的代码块后又回到1状态。</p>
<p>一个线程执行到synchronized语句处，先检查object对象（监视器）的标志位（锁旗标），如果为0状态，表明已经有另外的线程的执行状态正在有关的同步代码块中，这个线程将暂时阻塞（加入到一个与该对象的锁旗标相关联的等待线程池中），让出cpu资源，直到另外的线程执行完有关的同步代码块，将object对象的标志位恢复到1状态，这个阻塞就被取消，线程能够继续往下执行，并将object对象的标志位变为0状态，防止其它线程再进入有关的同步代码块中。如果有多个线程因等待同一对象的标志位而处于阻塞状态时，当对象的标志位恢复到1状态时，只会有一个线程能够继续运行，其它线程仍然处于阻塞等待状态。</p>
<p>若干个不同的代码块也可以实现相互之间的同步，只要各synchronized(object)语句中的object完全是同一个对象就可以。</p>
<p>一个刚锁定了监视器的线程在监视器被解锁后可以再次进入并锁定同一监视器，好比篮球运动员的篮球出手后可以再次去抢回来一样。</p>
<p>当在同步块中遇到break语句或抛出异常时，线程也会释放该锁旗标。</p>
<p>当cpu进入了一段同步代码块中执行，cpu是可以切换到其他线程的，只是在准备执行其他线程的代码时，发现其它线程处于阻塞状态，cpu又会回到先前的线程上。这个过程就类似于幸运之神刚一光顾其他有关线程，没想到吃了个闭门羹，便又离开了。</p>
<p>同步是以牺牲程序的性能为代价的，因为i系统要不停地对同步监视器进行检查，需要更多的开销。</p>
<p>除了可以对代码块进行同步外，也可以对方法实现同步，只要在需要同步的方法定义前加上synchronized关键字即可。</p>
<p>同步方法所用的监视器对象就是this对象</p>
<blockquote>
<p>老手就是在大量的实践中，犯下众多错误，然后经过反复调试、观察、比较，最后在总结、积累经验的过程中成长起来的。在计算机编程过程中，我们有时候会因为自己知识的不全面而作出错误的结论。</p>
</blockquote>
<p><img src="http://onzc6nld3.bkt.clouddn.com/5.2.jpg" alt=""></p>
<h3 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h3><p>两个线程对两个同步对象具有循环依赖时，就会出现死锁，例如一个线程进入对象X的监视器，而另一个对象进入了对象Y的监视器，这时进入X对象监视器的线程如果还试图进入Y对象的监视器就会被阻隔，接着进入Y对象监视器的线程如果试图进入X对象的监视器也会被阻隔，这样两个线程都处于挂起状态。程序发生死锁后最明显的特征就是程序的运行处于停滞不前状态。</p>
<p>两个人在吃饭，甲拿到了一根筷子和一把刀子，乙拿到了一把叉子和一根筷子，他们都无法吃到饭。<br>甲：你先给我筷子，我再给你刀子<br>乙：你先给我刀子，我才给你筷子<br>……</p>
<h3 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h3><p>java是通过object类的wait、notify、notifyall这三个方法来实现线程间的通信。所有的类都是从Object继承的，因此在任何类中都可以直接使用这些方法。</p>
<p>wait：告诉当前线程放弃监视器并进入睡眠状态，直到其他线程进入同一监视器并调用notify为止；<br>notify：唤醒同一对象监视器中调用wait的第一个线程，类似于饭馆有一个空位后通知所有等候就餐的顾客中的第一位可以入座的情况；<br>notifyAll：唤醒同一个对象监视器中调用wait的所有线程，只有最高优先级的线程首先被唤醒并执行。</p>
<p>上述三个方法只能在synchronized方法中调用，即：无论线程调用一个对象的wait还是notify方法，该线程必须先得到该对象的锁旗标，这样，notify只能唤醒同一个对象监视器中调用wait的线程，使用多个对象监视器，我们就可以分组有多个wait、notify的情况，同组里的wait只能被同组的notify唤醒。</p>
<p>一个线程的等待和唤醒过程可以用下图表示：<br><img src="http://onzc6nld3.bkt.clouddn.com/5.13.jpg" alt=""></p>
<h3 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h3><p>线程产生和消亡的整个过程，如下图所示：</p>
<p><img src="http://onzc6nld3.bkt.clouddn.com/5.4.jpg" alt=""></p>
<p>一个线程的产生式从我们调用了start方法开始进入Runnable状态，即可以被调度运行状态，并没有真正开始运行，调度器可以将CPU分配给它，真正运行其中的程序代码。线程在运行过程中，有以下几个可能的去向：</p>
<ol>
<li>没有遇到任何阻隔，运行完成直接结束，也就是run()方法执行完毕；</li>
<li>调度器将CPU分配给其他线程，这个线程又变为Runnable状态；</li>
<li>请求锁旗标，却得不到，这时候它要等待对象的锁旗标，得到锁旗标后又会进入Runnable状态开始运行；</li>
<li>遇到wait方法，它会被放入等待池中继续等待，直到有notify()或interrupt()方法执行，它才会被唤醒或打断，开始等待对象锁旗标，等到锁旗标后进入Runnable状态继续执行。</li>
</ol>
<p>控制线程生命周期的方法有suspend、resume和stop方法，但不推荐使用。</p>
<p>不推荐使用suspend和resume的原因如下：</p>
<ol>
<li>会导致死锁的发生；</li>
<li>它允许一个线程通过直接控制另外一个线程乙的代码来直接控制那个线程乙。</li>
</ol>
<p>不推荐使用stop的原因如下：<br>虽然stop能够避免死锁的发生，但是带来了另外的不足，如果一个线程正在操作共享数据段，操作过程中没有完成就stop了的话，就会导致数据的不完整性。</p>
<p>经验：推荐使用控制run方法中循环条件的方式来结束一个线程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLife</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line"></div><div class="line">		ThreadLifeTest threadLifeTest = <span class="keyword">new</span> ThreadLifeTest();</div><div class="line">		<span class="keyword">new</span> Thread(threadLifeTest).start();</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</div><div class="line">			<span class="keyword">if</span>(<span class="number">5</span>==i)&#123;</div><div class="line">				threadLifeTest.stopMe();</div><div class="line">			&#125;</div><div class="line">			System.out.println(<span class="string">"main thread is running"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadLifeTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> bFlag = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopMe</span><span class="params">()</span></span>&#123;</div><div class="line">		bFlag = <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">while</span>(bFlag)&#123;</div><div class="line">			System.out.println(<span class="string">"ThreadLifeTest.run()"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：调用了目标线程的stopMe方法之后，cpu不一定会马上切换到目标线程，目标线程也就不一定会马上终止。稍后切换到目标线程之后，终止了while循环，run方法结束，目标线程随之结束。</p>
<h3 id="Java-API"><a href="#Java-API" class="headerlink" title="Java API"></a>Java API</h3><p>API Application Programming Interface</p>
<p>学习编程语言与学汉语</p>
<ol>
<li><p>语法</p>
</li>
<li><p>成语<br>学习编程语言，掌握了大量API，就像学习汉语时掌握了大量的成语一样，我们在处理某些问题时将会轻而易举，同样，我们也能从这些API类中学会大师们组织java类的方法，划分系统结构的技巧。</p>
</li>
</ol>
<p>区别：对API来说，完全可以在需要时通过某种方式临时获取，现学现用</p>
<ol>
<li>学会写文章的技巧和手法，找到写文章的灵感<br>学习编程，也需要掌握分析与解决问题的手法，养成良好的编程习惯与风格，体会出一种编程的感觉。</li>
</ol>
<p>唐诗宋词/优秀散文<br>优秀的源代码<br>一些大学老师从事实际项目开发的经验不太丰富，只能讲些语法和API方面的知识，没有能力帮你分析与讲解编程经验与体会，就像许多小学老师自己都写不出好的作文来，但却可以成为语文老师一样的道理。</p>
<blockquote>
<p>专家不是靠书本学出来的，是有了一定的基础后，在工作中再总结、在学习的过程中成长起来的。我们没有必要去了解一门语言中的每个方面和细节，虽然，我们了解的越多，水平似乎就越高，但这都是要以时间和精力为代价的，学习到一定程度后，要适可而止，否则，一辈子都只有疲于学习的份儿了，就完全违背了“学以致用”的初衷。</p>
</blockquote>
<p>当你掌握了一门语言的语法特点后，能够看懂一般的程序，在需要时能够参照文档资料看懂以前还没有接触过的某个方面的程序，能够自己写出以恶搞有某种实际应用的小程序，你就算掌握了这门语言，剩下的就是你在工作中如何去积累经验的问题了。</p>
<p>会写一个程序的标准，是理解编程思想，再用自己的想法去独立写下来，对程序中的每个细节都是真正明白的。</p>
<h4 id="String类和StringBuffer类"><a href="#String类和StringBuffer类" class="headerlink" title="String类和StringBuffer类"></a>String类和StringBuffer类</h4><p>一个字符串就是一连串的字符，Java定义了String和StringBuffer两个类来封装对字符串的各种操作，都被放到了java.lang包中，不需要import java.lang这个语句导入该包就可以直接使用它们。</p>
<p>String类用于比较两个字符串、查找和抽取串中的字符或子串、字符串与其他类型之间的相互转换等。String类对象的内容一旦被初始化就不能再改变。</p>
<p>StringBuffer类用于内容可以改变的字符串，可以将其它各种类型的数据增加，插入到字符串中，也可以翻转字符串中原来的内容。一旦通过StringBuffer生成了最终想要的字符串，就应该使用StringBuffer.toString方法将其转换成String类，随后，就可以使用String类的各种方法操纵这个字符串了。</p>
<p>Java为字符串提供了特别的连接操作符+，可以把其它各种类型的数据转换成字符串，并前后连接成新的字符串。连接操作符+的功能是通过StringBuffer类和它的append方法实现的。</p>
<blockquote>
<p>String x = “a”+4+”c”;</p>
</blockquote>
<p>等效于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">StringBuffer temp = new StringBuffer();</div><div class="line">temp.append(&quot;a&quot;);</div><div class="line">temp.append(&quot;4&quot;);</div><div class="line">temp.append(&quot;c&quot;);</div><div class="line">x =temp.toString();</div></pre></td></tr></table></figure></p>
<p>注意：<br>String s1 = “hello”<br>String s2 = “hello”<br>s1和s2是同一个对象。</p>
<p>String s1 = new String(“hello”);<br>String s2 = new String(“hello”);<br>s1和s2是两个不同的对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadLine</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">byte</span> buf[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">		String strInfo = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">int</span> pos = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> ch = <span class="number">0</span>;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"please enter info, input bye for exit"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line"></div><div class="line">			ch = System.in.read();</div><div class="line"></div><div class="line">			<span class="keyword">switch</span>(ch)&#123;</div><div class="line">			<span class="keyword">case</span> <span class="string">'\r'</span>:</div><div class="line">				<span class="keyword">break</span>;</div><div class="line"></div><div class="line">			<span class="keyword">case</span> <span class="string">'\n'</span>:</div><div class="line">				strInfo = <span class="keyword">new</span> String(buf,<span class="number">0</span>,pos);</div><div class="line">				<span class="keyword">if</span>(<span class="string">"bye"</span>.equals(strInfo))&#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span>&#123;</div><div class="line">					System.out.println(strInfo);</div><div class="line">					pos=<span class="number">0</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">default</span>:</div><div class="line">					buf[pos++]=(<span class="keyword">byte</span>)ch;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>String(buf,0,pos)把数组buf里面的值从0到pos取出，用来创建新的String类对象。<br>equals，比较String类对象的内容是否等于某一字符串常量<br>equalsIgnoreCase<br>indexof(int ch)、indexof(int ch,int fromIndex)<br>indexof(String str)、indexof(String str, int fromIndex)<br>substring(int beginIndex)、<br>substring(int beginIndex, int endIndex) 返回beginIndex到endIndex-1的一个字符串</p>
<p>String类中的replace和toUpperCase都不能改变字符串的内容，它们的返回值都是String类，即生成一个新的字符串，而不是改变原来的字符串内容。</p>
<h4 id="基本数据类型的对象包装类"><a href="#基本数据类型的对象包装类" class="headerlink" title="基本数据类型的对象包装类"></a>基本数据类型的对象包装类</h4><p>java对数据既提供基本数据的简单类型，也提供了相应的包装类，使用基本简单数据类型，可以改善系统的性能，也能满足大多数应用需求，但基本简单类型不具有对象的特性，不能满足某些特殊的需求。譬如很多类的很多方法参数类型都是object，Integer类来包装整数。包装类对象在进行基本数据类型的类型转换时也特别有用。</p>
<p>8种基本数据类型都有其对应的包装类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> bool= <span class="keyword">new</span> Boolean(<span class="keyword">false</span>);</div><div class="line"><span class="keyword">byte</span> bt= <span class="keyword">new</span> Byte((<span class="keyword">byte</span>) <span class="string">'t'</span>);</div><div class="line"><span class="keyword">char</span> ch = <span class="keyword">new</span> Character(<span class="string">'t'</span>);</div><div class="line"><span class="keyword">short</span> st = <span class="keyword">new</span> Short((<span class="keyword">short</span>) <span class="number">18</span>);</div><div class="line"><span class="keyword">int</span> it = <span class="keyword">new</span> Integer(<span class="number">18</span>);</div><div class="line"><span class="keyword">long</span> lg = <span class="keyword">new</span> Long(<span class="number">18</span>);</div><div class="line"><span class="keyword">float</span> ft = <span class="keyword">new</span> Float(<span class="number">1.8f</span>);</div><div class="line"><span class="keyword">double</span> db = <span class="keyword">new</span> Double(<span class="number">1.8</span>d);</div></pre></td></tr></table></figure>
<blockquote>
<p>要善于找出包装类的一些共性的地方，达到举一反三，学一通百的效果</p>
</blockquote>
<p>要将字符串转换成基本数据类型，几乎都是用Xxx包装类.parseXxx方式实现（一个例外是对于Boolean类，用的是getBoolean）</p>
<p>要将包装类转换成基本数据，几乎都是Xxx包装类对象.xxxValue方式。</p>
<h3 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h3><h4 id="Vector类"><a href="#Vector类" class="headerlink" title="Vector类"></a>Vector类</h4><p>Vector类是Java语言提供的一种高级数据结构，可用于保存一些列对象，java不支持动态数组，Vector类提供了一种与动态数组相近的功能。</p>
<p>如果我们不能预先确定要保存的对象的数目，或是需要方便获得某个对象的存放位置，Vector类都是一种不错的选择。</p>
<h4 id="Enumeration接口类"><a href="#Enumeration接口类" class="headerlink" title="Enumeration接口类"></a>Enumeration接口类</h4><p>Enumeration是一个接口类，它提供了一种访问各种数据结构中的所有数据的抽象机制，我们要访问各种数据结构对象中的所有元素时，都可以使用同样的方式，调用同样的方法。有了这样的数据结构，就很容易学一通百，以不变应万变。</p>
<h4 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h4><h4 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h4><p>我们要取出保存在实现了Collection接口对象中的所有对象，我们也必须通过Collection.iterator方法返回要给Iterator接口对象，Iterator接口的功能与使用同Enumeration接口非常相似。</p>
<p>Java2平台的数据结构类设计人员本可以扩展Enumeration接口，而不用创建Iterator这个新接口。但他们不喜欢Enumeration接口方法冗长的名字，因而创建了Iterator这个新接口，并缩短了方法名长度。</p>
<p>Java中，不能直接用Collection接口类创建对象，而必须用实现了Collection接口的类来创建对象，ArrayList类就是一个实现了Collection接口的类。</p>
<blockquote>
<p>不要变成只会照着书做，而不会自学和思考的人，假设有人真的把java api全部背了下来，以后再遇到别的公司开发的java类，不还是一样不会吗？</p>
</blockquote>
<p>什么时候用Vector，什么时候用ArrayList，Vector类中的所有方法都是线程同步的，两个线程并发访问Vector对象将是安全的，但只有一个线程访问Vector对象时，因为源程序仍调用了同步方法，需要额外的监视器检查，运行效率要低一些。</p>
<p>ArrayList类中的所有方法是非同步的，程序的效率会高一些。</p>
<h4 id="集合类接口的比较"><a href="#集合类接口的比较" class="headerlink" title="集合类接口的比较"></a>集合类接口的比较</h4><p>Collection——对象之间没有指定的顺序，允许重复元素；<br>Set——对象之间没有指定的顺序，不允许重复元素；<br>List——对象之间有指定的顺序，允许重复元素。</p>
<p><img src="http://onzc6nld3.bkt.clouddn.com/6.3.jpg" alt=""></p>
<h4 id="Hashtable类"><a href="#Hashtable类" class="headerlink" title="Hashtable类"></a>Hashtable类</h4><p>Hashtable也是一种高级数据结构，用以快速检索数据。Hashtable不仅可以像Vector一样动态存储一系列的对象，而且对存储的每一个对象（值value）都要安排另一个对象（关键字key）与之相关联。</p>
<p>向Hashtable对象中存储数据，使用的是Hashtable.put(Object key, Object value)方法，从Hashtable中检索数据，使用Hashtable.get(Object key)方法。值和关键字都可以是任何类型的非空的对象。</p>
<p>要想成功地从Hashtable中检索数据，用作关键字的对象必须正确覆盖了Object.hashCode方法和Object.equals方法（检索时，必须比较所用关键字是否与存储在Hashtable中的某个关键字相等，如果两个关键字对象不能正确判断是否相等，检索是不可能正确的）。</p>
<p>Object.hashCode方法返回一个叫散列码的值，这个值是由对象的地址以某种方式转换来的，内容相同的两个对象，既然是两个对象，地址就不可能一样，所以Object.hashCode返回的值也不一样。</p>
<p>要想两个内容相同的Object子类对象的hashcode方法返回一样的散列码，子类必须覆盖Object.hashCode方法。</p>
<p>用于关键字的类，如果它的两个对象用equals方法比较是相同的，那么这两个对象的hashCode方法返回值也要一样，所以我们也要覆盖hashCode方法。</p>
<p>String类，已按关键字类的要求覆盖了这两个方法，如果两个String对象的内容不相等，它们的hashCode的返回值也不相等，如果两个String对象的内容相等，它们的hashCode的返回值也相等。所以我们在实现自己编写的关键字类的hashCode方法时，可以调用这个关键字类的String类型的成员变量的hashCode方法来计算关键字类的hashCode返回值。</p>
<p>注意：StringBuffer类没有按照关键字类的要求覆盖hashCode方法，即使两个StringBuffer类对象的内容相等，但这两个对象的hashCode方法的返回值却不相等。所以不能用StringBuffer作为关键字类。</p>
<h4 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h4><p>Properties是Hashtable的子类，它增加了将Hashtable对象中的关键字、值对保存到文件和从文件中读取关键字/值对到Hashtable对象中的方法。<br><img src="http://onzc6nld3.bkt.clouddn.com/6.4.jpg" alt=""></p>
<p>如果要用到Properties类的store方法进行存储，每个属性的关键字和值都必须是字符串类型的。直接用setProperty、getProperty方法进行属性的设置与读取。</p>
<h4 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h4><p>Java不支持全局方法和变量，java设计者将一些系统相关的方法和变量收集到了一个统一的类——System类，System类中的所有成员都是静态的，可以直接使用System类名做前缀。如System.in ， System.out等</p>
<p>System.exit(int status)方法，提前终止虚拟机的运行，对于发生了异常情况下而想终止虚拟机的运行，传递一个非零值作为参数，对于在用户正常操作下，终止虚拟机的运行，传递零值作为参数。</p>
<p>System.CurrentTimeMillis()方法，返回自1970年1月1日0点0分0秒起至今的以毫秒为单位的时间，这是一个long类型的大数值。在计算机内部，只有数值，没有真正的日期类型及其它各种类型，我们平常用到的日期本质上就是一个数值，但通过这个数值，能够推算出其对应的具体日期时间。</p>
<p>getProperties方法与java环境属性<br>getProperties方法获得当前虚拟机的环境属性。<br>Windows环境变量，每一个属性都是变量与值成对的形式出现。<br>同样的道理，java作为一个虚拟的操作系统，它也有自己的环境属性，Properties是Hashtable的子类，正好可以用于存储环境属性中的多个变量/值对格式的数据，getProperties方法返回值是，包含了当前虚拟机的所有环境属性的Properties类型的对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProperties</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Properties sp = System.getProperties();</div><div class="line">		Enumeration e = sp.propertyNames();</div><div class="line">		<span class="keyword">while</span>(e.hasMoreElements())&#123;</div><div class="line">			String key = (String)e.nextElement();</div><div class="line">			System.out.println(key+<span class="string">"="</span>+sp.getProperty(key));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在windows中，很容易增加一个新的环境属性，如何为java虚拟机增加一个新的环境属性呢？</p>
<p>java 命令有一个-D <name>=<value>格式的选项可以设置新的系统环境属性。</value></name></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-D&lt;name&gt;=&lt;value&gt;</div><div class="line">                 set a system property</div></pre></td></tr></table></figure>
<p>如</p>
<blockquote>
<p>java -DAAA=bbb<br>java -DAAA=bbb  -DCCC=ddd</p>
</blockquote>
<p>注意：-D与AAA之间没有空格</p>
<h4 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h4><p>Runtime类封装了Java命令本身的运行进程，其中的许多方法与System中的方法相重复。我们不能直接创建Runtime实例，但可以通过静态方法Runtime.getRuntime获得正在运行的Runtime对象的引用。</p>
<p>Exec方法，Java命令运行后，本身是多任务操作系统上的一个进程，在这个进程启动一个新的进程，即执行其他程序时使用exec方法。exec方法返回一个代表子进程的Process类对象，通过这个对象，Java进程可以与子进程交互。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRuntime</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</div><div class="line"></div><div class="line">		Process p=<span class="keyword">null</span>;</div><div class="line">		p = Runtime.getRuntime().exec(<span class="string">"notepad.exe"</span>);</div><div class="line">		Thread.sleep(<span class="number">5000</span>);</div><div class="line">		p.destroy();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于程序不能直接创建类Runtime的实例，所以可以保证我们只会产生一个Runtime的实例对象，而不能产生多个实例对象，这种情况就是单态设计模式。</p>
<h4 id="Date与Calendar、DateFormat类"><a href="#Date与Calendar、DateFormat类" class="headerlink" title="Date与Calendar、DateFormat类"></a>Date与Calendar、DateFormat类</h4><p>Date类用于表示日期和时间，最简单的构造方法时Date()，它以当前的日期和时间初始化一个Date对象。</p>
<p>由于开始设计Date时没有考虑到国际化，所以后来又设计了两个新的类来解决Date类中的问题，一个是Calendar类，一个是DateFormat类。</p>
<p>Calendar类是一个抽象基类，主要用于完成日期字段之间相互操作的功能，如Calendar.add方法可以实现在某一日期的基础上增加若干天（或年、月、小时、分、秒等日期字段）后的新日期<br>Calendar.set方法修改日期对象中的年、月、日、小时、分、秒等日期字段的值。<br>Calendar.getInstance方法可以返回一个Calendar类型（更确切地说是它的某个子类）的对象实例，GregorianCalendar类是JDK目前提供的一个唯一的Calendar子类，Calendar.getInstance方法返回的就是预设了当前时间的GregorianCalendar类对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Calendar cl = Calendar.getInstance();</span></div><div class="line">Calendar cl = <span class="keyword">new</span> GregorianCalendar();</div><div class="line">System.out.println(<span class="string">""</span>+cl.get(cl.YEAR)+cl.get(cl.MONTH)+cl.get(cl.DAY_OF_MONTH));</div><div class="line">cl.add(cl.DAY_OF_YEAR, <span class="number">315</span>);</div><div class="line">System.out.println(<span class="string">""</span>+cl.get(cl.YEAR)+cl.get(cl.MONTH)+cl.get(cl.DAY_OF_MONTH));</div></pre></td></tr></table></figure>
<p>虽然Calendar类几乎完全替代了Date类，但在某些情况下，我们仍有可能要用到Date类，譬如，程序中用的另外一个类的方法要求一个Date类型的参数。</p>
<p>我们有时要将Date对象表示的日期用指定的格式输出和将特定格式的日期字符串转换成一个Date对象。</p>
<p>Java.text.DataFormat就是实现这种功能的抽象基类，<br>Java.text.SimpleDateFormat类是JDK目前提供的一个DateFormat子类，它是一个具体类，使用它就可以完成把Date对象格式化为本地字符串，或者通过语义分析把日期或时间字符串转换成Date对象的功能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">SimpleDateFormat sdf2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>);</div><div class="line">Date d=sdf1.parse(<span class="string">"2017-04-09"</span>);</div><div class="line">System.out.println(sdf2.format(d));</div></pre></td></tr></table></figure>
<p>SimpleDateFormat类就相当于一个模板，其中yyyy对应的是年，MM对应的是月，dd对应的是日。详细可参考<a href="http://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="external">JDK</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">Letter	Date or Time Component	Presentation	Examples</div><div class="line">G	Era designator	Text	AD</div><div class="line">y	Year	Year	1996; 96</div><div class="line">Y	Week year	Year	2009; 09</div><div class="line">M	Month in year (context sensitive)	Month	July; Jul; 07</div><div class="line">L	Month in year (standalone form)	Month	July; Jul; 07</div><div class="line">w	Week in year	Number	27</div><div class="line">W	Week in month	Number	2</div><div class="line">D	Day in year	Number	189</div><div class="line">d	Day in month	Number	10</div><div class="line">F	Day of week in month	Number	2</div><div class="line">E	Day name in week	Text	Tuesday; Tue</div><div class="line">u	Day number of week (1 = Monday, ..., 7 = Sunday)	Number	1</div><div class="line">a	Am/pm marker	Text	PM</div><div class="line">H	Hour in day (0-23)	Number	0</div><div class="line">k	Hour in day (1-24)	Number	24</div><div class="line">K	Hour in am/pm (0-11)	Number	0</div><div class="line">h	Hour in am/pm (1-12)	Number	12</div><div class="line">m	Minute in hour	Number	30</div><div class="line">s	Second in minute	Number	55</div><div class="line">S	Millisecond	Number	978</div><div class="line">z	Time zone	General time zone	Pacific Standard Time; PST; GMT-08:00</div><div class="line">Z	Time zone	RFC 822 time zone	-0800</div><div class="line">X	Time zone	ISO 8601 time zone	-08; -0800; -08:00</div><div class="line"></div><div class="line">Date and Time Pattern	Result</div><div class="line">"yyyy.MM.dd G 'at' HH:mm:ss z"	2001.07.04 AD at 12:08:56 PDT</div><div class="line">"EEE, MMM d, ''yy"	Wed, Jul 4, '01</div><div class="line">"h:mm a"	12:08 PM</div><div class="line">"hh 'o''clock' a, zzzz"	12 o'clock PM, Pacific Daylight Time</div><div class="line">"K:mm a, z"	0:08 PM, PDT</div><div class="line">"yyyyy.MMMMM.dd GGG hh:mm aaa"	02001.July.04 AD 12:08 PM</div><div class="line">"EEE, d MMM yyyy HH:mm:ss Z"	Wed, 4 Jul 2001 12:08:56 -0700</div><div class="line">"yyMMddHHmmssZ"	010704120856-0700</div><div class="line">"yyyy-MM-dd'T'HH:mm:ss.SSSZ"	2001-07-04T12:08:56.235-0700</div><div class="line">"yyyy-MM-dd'T'HH:mm:ss.SSSXXX"	2001-07-04T12:08:56.235-07:00</div><div class="line">"YYYY-'W'ww-u"	2001-W27-3</div></pre></td></tr></table></figure>
<h4 id="Math与Random类"><a href="#Math与Random类" class="headerlink" title="Math与Random类"></a>Math与Random类</h4><p>Math类包含了所有用于几何和三角的浮点运算方法，这些方法都是静态的，每个方法的使用都非常简单，一看JDK文档就能明白。</p>
<p>Random类是一个伪随机数产生器，随机数是按照某种算法产生的，一旦用一个初值创建Random对象，就可以得到一系列的随机数，但如果用相同的初值创建Random对象，得到的随机数序列是相同的，也就是说，在程序中我们看到的“随机数”是固定的那些数，起不到随机的作用，针对这个问题，Java设计者们在Random类的Random()构造方法中使用当前时间来初始化Random对象，因为没有任何时刻的时间是相同的，所以就可以减少随机数序列相同的可能性。</p>
<h4 id="学习API的方法"><a href="#学习API的方法" class="headerlink" title="学习API的方法"></a>学习API的方法</h4><blockquote>
<p>作者写得越多，读者就要花费更多的时间来阅读，如果读者并不能从更多的篇幅中学到更多有价值的知识，那就是在浪费读者的宝贵时间。</p>
</blockquote>
<p>最聪明的人是最会利用工具和资源的人，必须要学会查阅文档。</p>
<p>大家根据自己的实际情况，可以提前通读一下JDK文档中大部分类及类中的方法，做到遇到问题时心中有数，也可以暂时不读，只掌握原理，处理过程，解决方法，等到以后有具体的实际需求时，再来查阅JDK文档。</p>
<h3 id="IO-输入输出"><a href="#IO-输入输出" class="headerlink" title="IO/输入输出"></a>IO/输入输出</h3><p>Java语言定义了许多类专门负责各种方式的输入输出，这些类都被放在java.io包中。</p>
<p>程序中，键盘被当做输入文件，显示器被当做输出文件。</p>
<h4 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h4><p>File类是IO包中唯一代表磁盘文件本身的对象，File类定义了一些与平台无关的方法来操纵文件，通过调用File类提供的各种方法，我们能够创建、删除文件、重命名文件，判断文件的读写权限及是否存在，设置和查询文件的最近修改时间。</p>
<p>在java中，目录也被当做file使用，只是多了一些目录特有的功能——可以用list方法列出目录中的文件名。在Unix下的路径分隔符为/，在Dos下的路径分隔符为\，Java可以正确处理Unix和Dos的路径分隔符，即使我们在Windows环境下使用/作为路径分隔符，Java仍然能够正确处理。</p>
<p>注意：delete方法删除由File对象的路径所表示的磁盘文件或目录。如果删除的对象是目录，该目录中的内容必须为空。</p>
<p>File类不能访问文件的内容，即不能够从文件中读取数据或往文件里写数据，它只能对文件本身的属性进行操作。</p>
<h4 id="RandomAccessFile类"><a href="#RandomAccessFile类" class="headerlink" title="RandomAccessFile类"></a>RandomAccessFile类</h4><p>RandomAccessFile类可以说是Java语言中功能最为丰富的文件访问类，它提供了众多的文件访问方法。RandomAccessFile类支持“随机访问”方式，我们可以跳转到文件的任意位置处读写数据。</p>
<p>该类仅限于操作文件，不能访问其它的IO设备，如网络、内存映像等。</p>
<p>RandomAccessFile可以以只读或读写方式打开文件，具体使用哪种方式取决于我们创建RandomAccessFile类对象的构造方式：</p>
<p>new RandomAccessFile(f,”rw”);// 读写方式<br>new RandomAccessFile(f,”r”);// 只读方式</p>
<p>注意：当我们的程序需要以读写的方式打开一个文件时，如果这个文件不存在，程序会为你创建。</p>
<p>String.substring(int beginIndex, int endIndex)方法可以用于取出一个字符串的部分子字符串，要注意的一个细节是：子字符串中的第一个字符对应的是原字符串中的脚标为beginIndex处的字符，但最后的字符对应的是原字符串中的脚标为endIndex-1处的字符，而不是endIndex处的字符。</p>
<h4 id="节点流"><a href="#节点流" class="headerlink" title="节点流"></a>节点流</h4><p>流的概念：</p>
<blockquote>
<p>数据流是一串连续不断的数据的集合，就像水管里的水流，在水管的一端一点一点地供水，而在水管的另一端看到的是一股连续不断的水流。数据写入程序可以是一段一段地向数据流管道中写入数据，这些数据段会按先后顺序形成一个长的数据流。对数据读取程序来说，看不到数据流在写入时的分段情况，每次可以读取其中的任意长度的数据，但只能先读取前面的数据后，再读取后面的数据。不管写入时是将数据分多次写入，还是作为一个整体一次写入，读取时的效果都是完全一样的。</p>
</blockquote>
<p>我们将IO流类分为两大类：</p>
<ol>
<li><p>节点流类<br>程序用于直接操作目标设备所对应的类。</p>
</li>
<li><p>包装类（处理流类、过滤流类）<br>一个间接流类去调用节点流类，以达到更加灵活方便地读写各种类型的数据。</p>
</li>
</ol>
<h4 id="InputStream与OutputStream"><a href="#InputStream与OutputStream" class="headerlink" title="InputStream与OutputStream"></a>InputStream与OutputStream</h4><p>程序可以从中连续读取字节的对象叫输入流，用InputStream类完成。<br>程序能向其中连续写入字节的对象叫输出流，用OutputStream类完成。</p>
<p>InputStream与OutputStream对象是两个抽象类，它们下面有许多子类，包括网络、管道、内存、文件等具体的IO设备，如FileInputStream类对应的就是文件输入流，是一个节点流类。</p>
<p>我们将这些节点流类所对应的IO源和目标成为流节点（Node）。</p>
<blockquote>
<p>输入输出类是相对程序而言的，不是代表文件的。</p>
</blockquote>
<p>如要将A文件的内容写入B文件中，<br>程序要对A文件创建一个输入类，对B文件要创建一个输出类。</p>
<p>InputStream定义了Java的输入流模型。该类中的所有方法在遇到错误时都会引发IOException异常，下面是InputStream类中方法的一个简要说明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 返回当前输入流中可读的字节数</span></div><div class="line"><span class="function"><span class="keyword">int</span>	<span class="title">available</span><span class="params">()</span></span></div><div class="line">Returns an estimate of the number of bytes that can be <span class="title">read</span> <span class="params">(or skipped over)</span> from <span class="keyword">this</span> input stream without blocking by the next invocation of a method <span class="keyword">for</span> <span class="keyword">this</span> input stream.</div><div class="line"></div><div class="line"><span class="comment">// 关闭，系统释放与这个流相关的资源</span></div><div class="line"><span class="keyword">void</span>	<span class="title">close</span><span class="params">()</span></div><div class="line">Closes <span class="keyword">this</span> input stream and releases any system resources associated with the stream.</div><div class="line"></div><div class="line"><span class="comment">// 在输入流的当前位置处放上一个标志，允许最多再读入readlimit个字节</span></div><div class="line"><span class="keyword">void</span>	<span class="title">mark</span><span class="params">(<span class="keyword">int</span> readlimit)</span></div><div class="line">Marks the current position in <span class="keyword">this</span> input stream.</div><div class="line"></div><div class="line"><span class="comment">// 如果当前流支持mark/reset操作就返回true</span></div><div class="line"><span class="keyword">boolean</span>	<span class="title">markSupported</span><span class="params">()</span></div><div class="line">Tests <span class="keyword">if</span> <span class="keyword">this</span> input stream supports the mark and reset methods.</div><div class="line"></div><div class="line"><span class="comment">// 返回下一个输入字节的整型表示，如果返回-1表示遇到流的末尾，结束。</span></div><div class="line"><span class="keyword">abstract</span> <span class="keyword">int</span>	<span class="title">read</span><span class="params">()</span></div><div class="line">Reads the next <span class="keyword">byte</span> of data from the input stream.</div><div class="line"></div><div class="line"><span class="comment">// 读入b.length个字节放到b中bin返回实际读入的字节数</span></div><div class="line"><span class="keyword">int</span>	<span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b)</span></div><div class="line">Reads some number of bytes from the input stream and stores them into the buffer array b.</div><div class="line"></div><div class="line"><span class="comment">// 把流中的数据读到数组b中从脚标为off开始的len个数组元素中</span></div><div class="line"><span class="keyword">int</span>	<span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></div><div class="line">Reads up to len bytes of data from the input stream into an array of bytes.</div><div class="line"></div><div class="line"><span class="comment">//把输入指针返回到以前所做的标志处</span></div><div class="line"><span class="keyword">void</span>	<span class="title">reset</span><span class="params">()</span></div><div class="line">Repositions <span class="keyword">this</span> stream to the position at the time the mark method was last called on <span class="keyword">this</span> input stream.</div><div class="line"></div><div class="line"><span class="comment">// 跳过输入流上的n个字节并返回实际跳过的字节数。</span></div><div class="line"><span class="keyword">long</span>	<span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span></div><div class="line">Skips over and discards n bytes of data from <span class="keyword">this</span> input stream.</div></pre></td></tr></table></figure>
<p>InputStream是一个抽象类，程序中实际使用的是它的各种子类对象。不是所有的子类都会支持InputStream中定义的某些方法的，如skip，mark，reset等，这些方法支队某些子类有用。</p>
<blockquote>
<p>流是操作系统产生的一种资源。当我们在程序中创建了一个IO流对象，同时系统内也会创建了一个叫流的东西，在这种情况下，计算机内存中实际上产生了两个事物，一个是Java程序中的类的实例对象，一个是系统本身产生的某种资源，窗口、Socket等都是这样的情况，Java垃圾回收器只能管理程序中的类的实例对象，没法去管理系统产生的资源，所以程序需要调用close方法，去通知系统释放其自身产生的资源。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 关闭输出流</span></div><div class="line"><span class="function"><span class="keyword">void</span>	<span class="title">close</span><span class="params">()</span></span></div><div class="line">Closes <span class="keyword">this</span> output stream and releases any system resources associated with <span class="keyword">this</span> stream.</div><div class="line"></div><div class="line"><span class="comment">// 彻底完成输出并清空缓冲区</span></div><div class="line"><span class="keyword">void</span>	<span class="title">flush</span><span class="params">()</span></div><div class="line">Flushes <span class="keyword">this</span> output stream and forces any buffered output bytes to be written out.</div><div class="line"></div><div class="line"><span class="comment">//将整个字节数组写到输出流中</span></div><div class="line"><span class="keyword">void</span>	<span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b)</span></div><div class="line">Writes b.length bytes from the specified <span class="keyword">byte</span> array to <span class="keyword">this</span> output stream.</div><div class="line"></div><div class="line"><span class="comment">// 将字节数组b中的从off开始的len个字节写到输出流</span></div><div class="line"><span class="keyword">void</span>	<span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></div><div class="line">Writes len bytes from the specified <span class="keyword">byte</span> array starting at offset off to <span class="keyword">this</span> output stream.</div><div class="line"></div><div class="line"><span class="comment">// 将一个字节写到输出流，这里的参数是int类型，它允许write使用表达式而不用强制转换成byte类型。</span></div><div class="line"><span class="keyword">abstract</span> <span class="keyword">void</span>	<span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span></div><div class="line">Writes the specified <span class="keyword">byte</span> to <span class="keyword">this</span> output stream.</div></pre></td></tr></table></figure>
<p>计算机访问外部设备，要比直接访问内存慢得多。使用内存缓冲区有两个方面的好处：</p>
<ol>
<li>提高cpu的使用率</li>
<li>write并没有马上真正写入到外设，我们还有机会回滚部分写入的数据。</li>
</ol>
<p>C语言默认情况下就会使用缓冲区，而在java中，有的类使用率缓冲区，有的类没有使用缓冲区，我们还可以在程序中使用专门的包装类来实现自己的缓冲区。</p>
<p>flush方法就是用于即使在缓冲区没有满的情况下，也将缓冲区的内容强制写入到外设，习惯上称这个过程为刷新。它只对那些使用缓冲区的OutputStream子类有效。如果我们调用了close方法，系统在关闭这个流之前，也会将缓冲区的内容刷新到硬盘文件的。</p>
<blockquote>
<p>读者花更多的时间去开阔自己的知识面和思维，了解更多的原理，而不是花大量时间去死记硬背某些细节和术语，特别是一个类中的每个方法名的具体拼写，具体的参数形式，java中有哪些关键字等这些死板的东西，只要有个印象就足够了。</p>
</blockquote>
<h4 id="FileInputStream与FileOutputStream"><a href="#FileInputStream与FileOutputStream" class="headerlink" title="FileInputStream与FileOutputStream"></a>FileInputStream与FileOutputStream</h4><p>这两个流节点用来操作磁盘文件，在创建一个FileInputStream对象时通过构造方法指定文件的路径和名字，当然这个文件应当是存在和可读的。</p>
<p>在创建一个FileOutputStream对象时指定文件如果存在，将要被覆盖。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FileInputStream inOne = <span class="keyword">new</span> FileInputStream(<span class="string">"hello.test"</span>);</div><div class="line">File f = <span class="keyword">new</span> File();</div><div class="line">FileInputStream inTwo = <span class="keyword">new</span> FileInputStream(f);</div></pre></td></tr></table></figure>
<p>创建一个FileOutputStream对象时，可以为其指定还不存在的文件名，但不能是存在的目录名，也不能是一个已被其他程序打开了的文件。</p>
<p>FileOutputStream先创建输出对象，然后再准备输出。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileStream</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		File f = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</div><div class="line">		FileOutputStream out = <span class="keyword">new</span> FileOutputStream(f);</div><div class="line">		<span class="keyword">byte</span> buf[]=<span class="string">"hello ipcreator"</span>.getBytes();</div><div class="line">		out.write(buf);</div><div class="line">		out.close();</div><div class="line"></div><div class="line">		FileInputStream in = <span class="keyword">new</span> FileInputStream(f);</div><div class="line">		<span class="keyword">byte</span> [] contentBuf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">		<span class="keyword">int</span> len = in.read(contentBuf);</div><div class="line">		System.out.println(<span class="keyword">new</span> String(buf,<span class="number">0</span>,len));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>FileInputStream,FileOutputStream这两个类只提供了对字节或字节数组进行读取的方法，对于字符串的读写，我们还需要进行额外的转换。</p>
<p>FileOutputStream没有使用缓冲区。</p>
<h4 id="Reader与Writer"><a href="#Reader与Writer" class="headerlink" title="Reader与Writer"></a>Reader与Writer</h4><p>Java为字符文本的输入输出专门提供了一套单独的类，Reader和Writer两个抽象类与InputStream，OutputStream两个类相对应，同样，Reader和Writer下面也有许多子类，对具体IO设备进行字符输入输出，如FileReader就是用来读取文件流中的字符。</p>
<p>FileWriter使用了缓冲区。</p>
<h4 id="PipedInputStream与PipedOutputStream"><a href="#PipedInputStream与PipedOutputStream" class="headerlink" title="PipedInputStream与PipedOutputStream"></a>PipedInputStream与PipedOutputStream</h4><p>这两个类主要用来完成线程之间的通信，一个线程的PipedInputStream对象能够从另外一个线程的PipedOutputStream对象中读取数据。</p>
<p>JDK还提供了PipedWriter和PipedReader这两个类来用于字符文本的管道通信。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPipedReader</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">		Writer writer = <span class="keyword">new</span> Writer();</div><div class="line">		Reader reader = <span class="keyword">new</span> Reader();</div><div class="line">		Thread writerThread = <span class="keyword">new</span> Thread(writer);</div><div class="line">		Thread readerThread = <span class="keyword">new</span> Thread(reader);</div><div class="line"></div><div class="line">		PipedWriter pipedWriter = writer.getPipedWriter();</div><div class="line">		PipedReader pipedReader = reader.getPipedReader();</div><div class="line">		pipedWriter.connect(pipedReader);</div><div class="line"></div><div class="line">		writerThread.start();</div><div class="line">		readerThread.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Writer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> PipedWriter writer = <span class="keyword">new</span> PipedWriter();</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> PipedWriter <span class="title">getPipedWriter</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> writer;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			writer.write(<span class="string">"hello Reader"</span>);</div><div class="line">			writer.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reader</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> PipedReader reader = <span class="keyword">new</span> PipedReader();</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> PipedReader <span class="title">getPipedReader</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> reader;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</div><div class="line">		<span class="keyword">int</span> len;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			len = reader.read(buf);</div><div class="line">			reader.close();</div><div class="line">			System.out.println(<span class="keyword">new</span> String(buf,<span class="number">0</span>,len));</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用管道流类，可以实现各个程序模块之间的松耦合通信，我们可以灵活地将多个这样的模块的输出流与输入流相连接，以拼装成满足各种应用的程序，而不用对模块内部进行修改。假设有一个使用了管道流的压缩或加密的模块，我们的调用程序只管向该模块的输入流中送入数据，从该模块的输出流中取得数据，就完成了我们数据的压缩或加密，这个模块就像黑匣子一样，我们根本不用去了解它的任何细节。</p>
</blockquote>
<h3 id="ByteArrayInputStream-与ByteArrayOutputStream"><a href="#ByteArrayInputStream-与ByteArrayOutputStream" class="headerlink" title="ByteArrayInputStream 与ByteArrayOutputStream"></a>ByteArrayInputStream 与ByteArrayOutputStream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ByteArrayInputStream(<span class="keyword">byte</span>[] buf)</div><div class="line">Creates a ByteArrayInputStream so that it uses buf as its buffer array.</div><div class="line"></div><div class="line">ByteArrayInputStream(<span class="keyword">byte</span>[] buf, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</div><div class="line">Creates ByteArrayInputStream that uses buf as its buffer array.</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个32字节的缓冲区</span></div><div class="line">ByteArrayOutputStream()</div><div class="line">Creates a <span class="keyword">new</span> <span class="keyword">byte</span> array output stream.</div><div class="line"></div><div class="line"><span class="comment">// 根据参数指定的大小创建缓冲区，缓冲区的大小在数据过多时能够自动增长</span></div><div class="line">ByteArrayOutputStream(<span class="keyword">int</span> size)</div><div class="line">Creates a <span class="keyword">new</span> <span class="keyword">byte</span> array output stream, with a buffer capacity of the specified size, in bytes.</div></pre></td></tr></table></figure>
<p>这两个流的作用在于，用IO流的方式来完成对字节数组内容的读写，我们为什么不直接读写字节数组呢？在什么情况下该使用这两个类呢？</p>
<blockquote>
<p>内存虚拟文件/内存映像文件，他们是把一块内存虚拟成一个硬盘上的文件，原来该写到硬盘文件上的内容会被写到这个内存中，原来该从一个硬盘文件上读取内容可以改为从内存中直接读取。如果程序在运行过程中药产生一些临时文件，就可以用虚拟文件的方式来实现，我们不用访问硬盘，而是直接访问内存，会提高应用程序的效率。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayStream</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">		String temp = <span class="string">"hello ipcreator"</span>;</div><div class="line">		<span class="keyword">byte</span>[] src = temp.getBytes();</div><div class="line">		ByteArrayInputStream input = <span class="keyword">new</span> ByteArrayInputStream(src);</div><div class="line">		ByteArrayOutputStream output = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">		transform(input,output);</div><div class="line">		System.out.println(<span class="keyword">new</span> String(output.toByteArray()));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(InputStream in, OutputStream out)</span></span></div><div class="line">			<span class="keyword">throws</span> IOException&#123;</div><div class="line">		<span class="keyword">int</span> c =<span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>((c=in.read())!=-<span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">int</span> C=(<span class="keyword">int</span>)Character.toUpperCase(c);</div><div class="line">			out.write(C);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayReader</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">		StringReader reader = <span class="keyword">new</span> StringReader(<span class="string">"hello arrayreader"</span>);</div><div class="line">		StringWriter writer = <span class="keyword">new</span> StringWriter();</div><div class="line">		convert(reader,writer);</div><div class="line">		System.out.println(<span class="keyword">new</span> String(writer.toString()));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(Reader reader, Writer writer)</span></span></div><div class="line">			<span class="keyword">throws</span> IOException&#123;</div><div class="line"></div><div class="line">		<span class="keyword">char</span> [] charBuff= <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</div><div class="line">		<span class="keyword">int</span> len = reader.read(charBuff);</div><div class="line">		writer.write(<span class="keyword">new</span> String(charBuff,<span class="number">0</span>,len).toUpperCase());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="IO程序代码的复用"><a href="#IO程序代码的复用" class="headerlink" title="IO程序代码的复用"></a>IO程序代码的复用</h4><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://zhibimo.com/read/xiaolai/everyone-can-use-english/chapter6.html" target="_blank" rel="external">everyone-can-use-english</a><br>[2]<a href="">Java就业教程张孝祥PDF版.pdf</a><br>[3]<a href="">Think In  Java(中文第四版).pdf</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/java.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java is a good Coffee for Programmer&lt;br&gt;Resolve Problems from the views of Java designer , Compiler, CPU, Memery…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;见过最多的，也最可悲的是—— 永远不相信自己所有的问题就出在自己从来都不肯耐心把最基础的东西弄清楚弄明白。&lt;sup&gt;[1]&lt;sup&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
  </entry>
  
  <entry>
    <title>Basic Concept of English——Pronunciation</title>
    <link href="http://ipcreator.me/2017/04/06/English/basic-concept-of-spelling/"/>
    <id>http://ipcreator.me/2017/04/06/English/basic-concept-of-spelling/</id>
    <published>2017-04-05T23:46:08.000Z</published>
    <updated>2017-04-05T23:55:12.119Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/pronunciation.jpg" alt=""></p>
<blockquote>
<p>Pronunciation can makes you break through Spoken English and Listening.</p>
</blockquote>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/pronunciation.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pronunciation can makes you break through Spoken English and Listening.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="English" scheme="http://ipcreator.me/categories/English/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Pronunciation" scheme="http://ipcreator.me/tags/Pronunciation/"/>
    
  </entry>
  
  <entry>
    <title>Basic Concept of English——Vocabulary</title>
    <link href="http://ipcreator.me/2017/04/06/English/basic-concept-of-vocabulary/"/>
    <id>http://ipcreator.me/2017/04/06/English/basic-concept-of-vocabulary/</id>
    <published>2017-04-05T23:46:06.000Z</published>
    <updated>2017-04-05T23:51:53.541Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/vocabulary.png" alt=""></p>
<blockquote>
<p>Vocabulary is the basis of English pyramid.</p>
</blockquote>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/vocabulary.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vocabulary is the basis of English pyramid.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="English" scheme="http://ipcreator.me/categories/English/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Vocabulary" scheme="http://ipcreator.me/tags/Vocabulary/"/>
    
  </entry>
  
  <entry>
    <title>Basic Concept of Java——Charset</title>
    <link href="http://ipcreator.me/2017/04/06/Program/Tools/Computer/char-decode/"/>
    <id>http://ipcreator.me/2017/04/06/Program/Tools/Computer/char-decode/</id>
    <published>2017-04-05T23:46:06.000Z</published>
    <updated>2017-04-09T00:46:21.431Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/image007.jpg" alt=""></p>
<p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/#authorN1001C" target="_blank" rel="external">作者：许令波</a></p>
<p>编码问题一直困扰着开发人员，尤其在 Java 中更加明显，因为 Java 是跨平台语言，不同平台之间编码之间的切换较多。本文将向你详细介绍 Java 中编码问题出现的根本原因，你将了解到：Java 中经常遇到的几种编码格式的区别；Java 中经常需要编码的场景；出现中文问题的原因分析；在开发 Java web 程序时可能会存在编码的几个地方，一个 HTTP 请求怎么控制编码格式？如何避免出现中文问题？</p>
<a id="more"></a>
<h2 id="为什么要编码"><a href="#为什么要编码" class="headerlink" title="为什么要编码"></a>为什么要编码</h2><p>计算机是如何表示我们人类能够理解的符号的，这些符号也就是我们人类使用的语言。由于人类的语言有太多，因而表示这些语言的符号太多，无法用计算机中一个基本的存储单元—— byte 来表示，因而必须要经过拆分或一些翻译工作，才能让计算机能理解。我们可以把计算机能够理解的语言假定为英语，其它语言要能够在计算机中使用必须经过一次翻译，把它翻译成英语。这个翻译的过程就是编码。所以可以想象只要不是说英语的国家要能够使用计算机就必须要经过编码。这看起来有些霸道，但是这就是现状，这也和我们国家现在在大力推广汉语一样，希望其它国家都会说汉语，以后其它的语言都翻译成汉语，我们可以把计算机中存储信息的最小单位改成汉字，这样我们就不存在编码问题了。<br>所以总的来说，编码的原因可以总结为：</p>
<ol>
<li>计算机中存储信息的最小单元是一个字节即 8 个 bit，所以能表示的字符范围是 0~255 个</li>
<li>人类要表示的符号太多，无法用一个字节来完全表示</li>
<li>要解决这个矛盾必须需要一个新的数据结构 char，从 char 到 byte 必须编码</li>
</ol>
<h2 id="如何“翻译”"><a href="#如何“翻译”" class="headerlink" title="如何“翻译”"></a>如何“翻译”</h2><p>明白了各种语言需要交流，经过翻译是必要的，那又如何来翻译呢？计算中提拱了多种翻译方式，常见的有 ASCII、ISO-8859-1、GB2312、GBK、UTF-8、UTF-16 等。它们都可以被看作为<strong>字典</strong>，它们<strong>规定了转化的规则</strong>，按照这个规则就可以让计算机正确的表示我们的字符。目前的编码格式很多，例如 GB2312、GBK、UTF-8、UTF-16 这几种格式都可以表示一个汉字，那我们到底选择哪种编码格式来存储汉字呢？这就要考虑到其它因素了，是<strong>存储空间</strong>重要还是<strong>编码的效率</strong>重要。根据这些因素来正确选择编码格式，下面简要介绍一下这几种编码格式。</p>
<h3 id="ASCII-码"><a href="#ASCII-码" class="headerlink" title="ASCII 码"></a>ASCII 码</h3><p>学过计算机的人都知道 ASCII 码，总共有 128 个，用一个字节的低 7 位表示，0~31 是控制字符如换行回车删除等；32~126 是打印字符，可以通过键盘输入并且能够显示出来。</p>
<h3 id="ISO-8859-1"><a href="#ISO-8859-1" class="headerlink" title="ISO-8859-1"></a>ISO-8859-1</h3><p>128 个字符显然是不够用的，于是 ISO 组织在 ASCII 码基础上又制定了一些列标准用来扩展 ASCII 编码，它们是 ISO-8859-1~ISO-8859-15，其中 ISO-8859-1 涵盖了大多数西欧语言字符，所有应用的最广泛。ISO-8859-1 仍然是单字节编码，它总共能表示 256 个字符。</p>
<h3 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h3><p>它的全称是《信息交换用汉字编码字符集 基本集》，它是双字节编码，总的编码范围是 A1-F7，其中从 A1-A9 是符号区，总共包含 682 个符号，从 B0-F7 是汉字区，包含 6763 个汉字。</p>
<h3 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h3><p>全称叫《汉字内码扩展规范》，是国家技术监督局为 windows95 所制定的新的汉字内码规范，它的出现是为了扩展 GB2312，加入更多的汉字，它的编码范围是 8140~FEFE（去掉 XX7F）总共有 23940 个码位，它能表示 21003 个汉字，它的编码是和 GB2312 兼容的，也就是说用 GB2312 编码的汉字可以用 GBK 来解码，并且不会有乱码。</p>
<h3 id="GB18030"><a href="#GB18030" class="headerlink" title="GB18030"></a>GB18030</h3><p>全称是《信息交换用汉字编码字符集》，是我国的强制标准，它可能是单字节、双字节或者四字节编码，它的编码与 GB2312 编码兼容，这个虽然是国家标准，但是实际应用系统中使用的并不广泛。</p>
<h3 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h3><p>说到 UTF 必须要提到 Unicode（Universal Code 统一码），ISO 试图想创建一个全新的超语言字典，世界上所有的语言都可以通过这本字典来相互翻译。可想而知这个字典是多么的复杂，关于 Unicode 的详细规范可以参考相应文档。<strong>Unicode 是 Java 和 XML 的基础</strong>，下面详细介绍 Unicode 在计算机中的存储形式。</p>
<p>UTF-16 具体定义了 Unicode 字符在计算机中存取方法。UTF-16 用两个字节来表示 Unicode 转化格式，这个是定长的表示方法，不论什么字符都可以用两个字节表示，两个字节是 16 个 bit，所以叫 UTF-16。UTF-16 表示字符非常方便，每两个字节表示一个字符，这个在字符串操作时就大大简化了操作，这也是 Java 以 UTF-16 作为内存的字符存储格式的一个很重要的原因。</p>
<h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>UTF-16 统一采用两个字节表示一个字符，虽然在表示上非常简单方便，但是也有其缺点，有很大一部分字符用一个字节就可以表示的现在要两个字节表示，存储空间放大了一倍，在现在的网络带宽还非常有限的今天，这样会增大网络传输的流量，而且也没必要。而 <strong>UTF-8 采用了一种变长技术，每个编码区域有不同的字码长度。不同类型的字符可以是由 1~6 个字节组成。</strong></p>
<p>UTF-8 有以下编码规则：<br>如果一个字节，最高位（第 8 位）为 0，表示这是一个 ASCII 字符（00 - 7F）。可见，所有 ASCII 编码已经是 UTF-8 了。<br>如果一个字节，以 11 开头，连续的 1 的个数暗示这个字符的字节数，例如：110xxxxx 代表它是双字节 UTF-8 字符的首字节。<br>如果一个字节，以 10 开始，表示它不是首字节，需要向前查找才能得到当前字符的首字节</p>
<h2 id="Java-中需要编码的场景"><a href="#Java-中需要编码的场景" class="headerlink" title="Java 中需要编码的场景"></a>Java 中需要编码的场景</h2><h3 id="I-O-操作中存在的编码"><a href="#I-O-操作中存在的编码" class="headerlink" title="I/O 操作中存在的编码"></a>I/O 操作中存在的编码</h3><p>涉及到编码的地方一般都在字符到字节或者字节到字符的转换上，而需要这种转换的场景主要是在 I/O 的时候，这个 I/O 包括磁盘 I/O 和网络 I/O，关于网络 I/O 部分在后面将主要以 Web 应用为例介绍。下图是 Java 中处理 I/O 问题的接口：</p>
<p><img src="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/image002.png" alt=""></p>
<p>Reader 类是 Java 的 I/O 中读字符的父类，而 InputStream 类是读字节的父类，InputStreamReader 类就是关联字节到字符的桥梁，它负责在 I/O 过程中处理读取字节到字符的转换，而具体字节到字符的解码实现它由 StreamDecoder 去实现，在 StreamDecoder 解码过程中必须由用户指定 Charset 编码格式。值得注意的是如果你没有指定 Charset，将使用本地环境中的默认字符集，例如在中文环境中将使用 GBK 编码。</p>
<p>写的情况也是类似，字符的父类是 Writer，字节的父类是 OutputStream，通过 OutputStreamWriter 转换字符到字节。如下图所示：<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/image004.png" alt=""><br>同样 StreamEncoder 类负责将字符编码成字节，编码格式和默认编码规则与解码是一致的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">String file = <span class="string">"c:/stream.txt"</span>;</div><div class="line"> String charset = <span class="string">"UTF-8"</span>;</div><div class="line"> <span class="comment">// 写字符换转成字节流</span></div><div class="line"> FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line"> OutputStreamWriter writer = <span class="keyword">new</span> OutputStreamWriter(</div><div class="line"> outputStream, charset);</div><div class="line"> <span class="keyword">try</span> &#123;</div><div class="line">    writer.write(<span class="string">"这是要保存的中文字符"</span>);</div><div class="line"> &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    writer.close();</div><div class="line"> &#125;</div><div class="line"> <span class="comment">// 读取字节转换成字符</span></div><div class="line"> FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</div><div class="line"> InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(</div><div class="line"> inputStream, charset);</div><div class="line"> StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</div><div class="line"> <span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>];</div><div class="line"> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"> <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">while</span> ((count = reader.read(buf)) != -<span class="number">1</span>) &#123;</div><div class="line">        buffer.append(buffer, <span class="number">0</span>, count);</div><div class="line">    &#125;</div><div class="line"> &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    reader.close();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>涉及到 I/O 操作时只要注意指定统一的编解码 Charset 字符集，一般不会出现乱码问题，有些应用程序如果不注意指定字符编码，中文环境中取操作系统默认编码，如果编解码都在中文环境中，通常也没问题，但是还是强烈的不建议使用操作系统的默认编码，因为这样，你的应用程序的编码格式就和运行环境绑定起来了，在跨环境下很可能出现乱码问题。</p>
<h3 id="内存中操作中的编码"><a href="#内存中操作中的编码" class="headerlink" title="内存中操作中的编码"></a>内存中操作中的编码</h3><p>在 Java 开发中除了 I/O 涉及到编码外，最常用的应该就是在内存中进行字符到字节的数据类型的转换，Java 中用 String 表示字符串，所以 String 类就提供转换到字节的方法，也支持将字节转换为字符串的构造函数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String s = <span class="string">"这是一段中文字符串"</span>;</div><div class="line"> <span class="keyword">byte</span>[] b = s.getBytes(<span class="string">"UTF-8"</span>);</div><div class="line"> String n = <span class="keyword">new</span> String(b,<span class="string">"UTF-8"</span>);</div></pre></td></tr></table></figure>
<p> Charset 提供 encode 与 decode 分别对应 char[] 到 byte[] 的编码和 byte[] 到 char[] 的解码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Charset charset = Charset.forName(<span class="string">"UTF-8"</span>);</div><div class="line">ByteBuffer byteBuffer = charset.encode(string);</div><div class="line">CharBuffer charBuffer = charset.decode(byteBuffer);</div></pre></td></tr></table></figure>
<p> Java 中还有一个 ByteBuffer 类，它提供一种 char 和 byte 之间的软转换，它们之间转换不需要编码与解码，只是把一个 16bit 的 char 格式，拆分成为 2 个 8bit 的 byte 表示，它们的实际值并没有被修改，仅仅是数据的类型做了转换。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ByteBuffer heapByteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line">ByteBuffer byteBuffer = heapByteBuffer.putChar(c);</div></pre></td></tr></table></figure></p>
<h3 id="Java-中如何编解码"><a href="#Java-中如何编解码" class="headerlink" title="Java 中如何编解码"></a>Java 中如何编解码</h3><p> 下面我们以“I am 君山”这个字符串为例介绍 Java 中如何把它以 ISO-8859-1、GB2312、GBK、UTF-16、UTF-8 编码格式进行编码的。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> public static void encode() &#123;</div><div class="line">       String name = &quot;I am 君山&quot;;</div><div class="line">       toHex(name.toCharArray());</div><div class="line">       try &#123;</div><div class="line">           byte[] iso8859 = name.getBytes(&quot;ISO-8859-1&quot;);</div><div class="line">           toHex(iso8859);</div><div class="line">           byte[] gb2312 = name.getBytes(&quot;GB2312&quot;);</div><div class="line">           toHex(gb2312);</div><div class="line">           byte[] gbk = name.getBytes(&quot;GBK&quot;);</div><div class="line">           toHex(gbk);</div><div class="line">           byte[] utf16 = name.getBytes(&quot;UTF-16&quot;);</div><div class="line">           toHex(utf16);</div><div class="line">           byte[] utf8 = name.getBytes(&quot;UTF-8&quot;);</div><div class="line">           toHex(utf8);</div><div class="line">       &#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 下面是 Java 中编码需要用到的类图<br> <img src="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/image007.jpg" alt=""><br> 首先根据指定的 charsetName 通过 Charset.forName(charsetName) 设置 Charset 类，然后根据 Charset 创建 CharsetEncoder 对象，再调用 CharsetEncoder.encode 对字符串进行编码，不同的编码类型都会对应到一个类中，实际的编码过程是在这些类中完成的。下面是 String. getBytes(charsetName) 编码过程的时序图<br> <img src="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/image009.jpg" alt=""></p>
<p>从上图可以看出根据 charsetName 找到 Charset 类，然后根据这个字符集编码生成 CharsetEncoder，这个类是所有字符编码的父类，针对不同的字符编码集在其子类中定义了如何实现编码，有了 CharsetEncoder 对象后就可以调用 encode 方法去实现编码了。这个是 String.getBytes 编码方法，其它的如 StreamEncoder 中也是类似的方式。</p>
<p>下面看看不同的字符集是如何将前面的字符串编码成 byte 数组的？<br>如字符串“I am 君山”的 char 数组为 49 20 61 6d 20 541b 5c71，下面把它按照不同的编码格式转化成相应的字节。</p>
<h4 id="按照-ISO-8859-1-编码"><a href="#按照-ISO-8859-1-编码" class="headerlink" title="按照 ISO-8859-1 编码"></a>按照 ISO-8859-1 编码</h4><p>字符串“I am 君山”用 ISO-8859-1 编码，下面是编码结果：<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/image011.gif" alt=""></p>
<p>从上图看出 7 个 char 字符经过 ISO-8859-1 编码转变成 7 个 byte 数组，ISO-8859-1 是单字节编码，中文“君山”被转化成值是 3f 的 byte。3f 也就是“？”字符，所以经常会出现中文变成“？”很可能就是错误的使用了 ISO-8859-1 这个编码导致的。中文字符经过 ISO-8859-1 编码会丢失信息，通常我们称之为“黑洞”，它会把不认识的字符吸收掉。由于现在大部分基础的 Java 框架或系统默认的字符集编码都是 ISO-8859-1，所以很容易出现乱码问题，后面将会分析不同的乱码形式是怎么出现的。</p>
<h4 id="按照-GB2312-编码"><a href="#按照-GB2312-编码" class="headerlink" title="按照 GB2312 编码"></a>按照 GB2312 编码</h4><p>字符串“I am 君山”用 GB2312 编码，下面是编码结果：<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/image013.gif" alt=""></p>
<p>GB2312 对应的 Charset 是 sun.nio.cs.ext. EUC_CN 而对应的 CharsetDecoder 编码类是 sun.nio.cs.ext. DoubleByte，GB2312 字符集有一个 char 到 byte 的码表，不同的字符编码就是查这个码表找到与每个字符的对应的字节，然后拼装成 byte 数组。查表的规则如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c2b[c2bIndex[char &gt;&gt; 8] + (char &amp; 0xff)]</div></pre></td></tr></table></figure>
<p> 如果查到的码位值大于 oxff 则是双字节，否则是单字节。双字节高 8 位作为第一个字节，低 8 位作为第二个字节，如下代码所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">if (bb &gt; 0xff) &#123;    // DoubleByte</div><div class="line">           if (dl - dp &lt; 2)</div><div class="line">               return CoderResult.OVERFLOW;</div><div class="line">           da[dp++] = (byte) (bb &gt;&gt; 8);</div><div class="line">           da[dp++] = (byte) bb;</div><div class="line">&#125; else &#123;                      // SingleByte</div><div class="line">           if (dl - dp &lt; 1)</div><div class="line">               return CoderResult.OVERFLOW;</div><div class="line">           da[dp++] = (byte) bb;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上图可以看出前 5 个字符经过编码后仍然是 5 个字节，而汉字被编码成双字节，在第一节中介绍到 GB2312 只支持 6763 个汉字，所以并不是所有汉字都能够用 GB2312 编码。</p>
<h4 id="按照-GBK-编码"><a href="#按照-GBK-编码" class="headerlink" title="按照 GBK 编码"></a>按照 GBK 编码</h4><p>字符串“I am 君山”用 GBK 编码，下面是编码结果：<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/image015.gif" alt=""><br>你可能已经发现上图与 GB2312 编码的结果是一样的，没错 GBK 与 GB2312 编码结果是一样的，由此可以得出 GBK 编码是兼容 GB2312 编码的，它们的编码算法也是一样的。不同的是它们的码表长度不一样，GBK 包含的汉字字符更多。所以只要是经过 GB2312 编码的汉字都可以用 GBK 进行解码，反过来则不然。</p>
<h4 id="按照-UTF-16-编码"><a href="#按照-UTF-16-编码" class="headerlink" title="按照 UTF-16 编码"></a>按照 UTF-16 编码</h4><p>字符串“I am 君山”用 UTF-16 编码，下面是编码结果：<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/image017.gif" alt=""></p>
<p>用 UTF-16 编码将 char 数组放大了一倍，单字节范围内的字符，在高位补 0 变成两个字节，中文字符也变成两个字节。从 UTF-16 编码规则来看，仅仅将字符的高位和低位进行拆分变成两个字节。特点是编码效率非常高，规则很简单，由于不同处理器对 2 字节处理方式不同，Big-endian（高位字节在前，低位字节在后）或 Little-endian（低位字节在前，高位字节在后）编码，所以在对一串字符串进行编码是需要指明到底是 Big-endian 还是 Little-endian，所以前面有两个字节用来保存 BYTE_ORDER_MARK 值，UTF-16 是用定长 16 位（2 字节）来表示的 UCS-2 或 Unicode 转换格式，通过代理对来访问 BMP 之外的字符编码。</p>
<h4 id="按照-UTF-8-编码"><a href="#按照-UTF-8-编码" class="headerlink" title="按照 UTF-8 编码"></a>按照 UTF-8 编码</h4><p>字符串“I am 君山”用 UTF-8 编码，下面是编码结果：<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/image019.gif" alt=""><br>UTF-16 虽然编码效率很高，但是对单字节范围内字符也放大了一倍，这无形也浪费了存储空间，另外 UTF-16 采用顺序编码，不能对单个字符的编码值进行校验，如果中间的一个字符码值损坏，后面的所有码值都将受影响。而 UTF-8 这些问题都不存在，UTF-8 对单字节范围内字符仍然用一个字节表示，对汉字采用三个字节表示。它的编码规则如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> CoderResult <span class="title">encodeArrayLoop</span><span class="params">(CharBuffer src,</span></span></div><div class="line"> ByteBuffer dst)&#123;</div><div class="line">            <span class="keyword">char</span>[] sa = src.array();</div><div class="line">            <span class="keyword">int</span> sp = src.arrayOffset() + src.position();</div><div class="line">            <span class="keyword">int</span> sl = src.arrayOffset() + src.limit();</div><div class="line">            <span class="keyword">byte</span>[] da = dst.array();</div><div class="line">            <span class="keyword">int</span> dp = dst.arrayOffset() + dst.position();</div><div class="line">            <span class="keyword">int</span> dl = dst.arrayOffset() + dst.limit();</div><div class="line">            <span class="keyword">int</span> dlASCII = dp + Math.min(sl - sp, dl - dp);</div><div class="line">            <span class="comment">// ASCII only loop</span></div><div class="line">            <span class="keyword">while</span> (dp &lt; dlASCII &amp;&amp; sa[sp] &lt; <span class="string">'\u0080'</span>)</div><div class="line">                da[dp++] = (<span class="keyword">byte</span>) sa[sp++];</div><div class="line">            <span class="keyword">while</span> (sp &lt; sl) &#123;</div><div class="line">                <span class="keyword">char</span> c = sa[sp];</div><div class="line">                <span class="keyword">if</span> (c &lt; <span class="number">0x80</span>) &#123;</div><div class="line">                    <span class="comment">// Have at most seven bits</span></div><div class="line">                    <span class="keyword">if</span> (dp &gt;= dl)</div><div class="line">                        <span class="keyword">return</span> overflow(src, sp, dst, dp);</div><div class="line">                    da[dp++] = (<span class="keyword">byte</span>)c;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &lt; <span class="number">0x800</span>) &#123;</div><div class="line">                    <span class="comment">// 2 bytes, 11 bits</span></div><div class="line">                    <span class="keyword">if</span> (dl - dp &lt; <span class="number">2</span>)</div><div class="line">                        <span class="keyword">return</span> overflow(src, sp, dst, dp);</div><div class="line">                    da[dp++] = (<span class="keyword">byte</span>)(<span class="number">0xc0</span> | (c &gt;&gt; <span class="number">6</span>));</div><div class="line">                    da[dp++] = (<span class="keyword">byte</span>)(<span class="number">0x80</span> | (c &amp; <span class="number">0x3f</span>));</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isSurrogate(c)) &#123;</div><div class="line">                    <span class="comment">// Have a surrogate pair</span></div><div class="line">                    <span class="keyword">if</span> (sgp == <span class="keyword">null</span>)</div><div class="line">                        sgp = <span class="keyword">new</span> Surrogate.Parser();</div><div class="line">                    <span class="keyword">int</span> uc = sgp.parse(c, sa, sp, sl);</div><div class="line">                    <span class="keyword">if</span> (uc &lt; <span class="number">0</span>) &#123;</div><div class="line">                        updatePositions(src, sp, dst, dp);</div><div class="line">                        <span class="keyword">return</span> sgp.error();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (dl - dp &lt; <span class="number">4</span>)</div><div class="line">                        <span class="keyword">return</span> overflow(src, sp, dst, dp);</div><div class="line">                    da[dp++] = (<span class="keyword">byte</span>)(<span class="number">0xf0</span> | ((uc &gt;&gt; <span class="number">18</span>)));</div><div class="line">                    da[dp++] = (<span class="keyword">byte</span>)(<span class="number">0x80</span> | ((uc &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3f</span>));</div><div class="line">                    da[dp++] = (<span class="keyword">byte</span>)(<span class="number">0x80</span> | ((uc &gt;&gt;  <span class="number">6</span>) &amp; <span class="number">0x3f</span>));</div><div class="line">                    da[dp++] = (<span class="keyword">byte</span>)(<span class="number">0x80</span> | (uc &amp; <span class="number">0x3f</span>));</div><div class="line">                    sp++;  <span class="comment">// 2 chars</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 3 bytes, 16 bits</span></div><div class="line">                    <span class="keyword">if</span> (dl - dp &lt; <span class="number">3</span>)</div><div class="line">                        <span class="keyword">return</span> overflow(src, sp, dst, dp);</div><div class="line">                    da[dp++] = (<span class="keyword">byte</span>)(<span class="number">0xe0</span> | ((c &gt;&gt; <span class="number">12</span>)));</div><div class="line">                    da[dp++] = (<span class="keyword">byte</span>)(<span class="number">0x80</span> | ((c &gt;&gt;  <span class="number">6</span>) &amp; <span class="number">0x3f</span>));</div><div class="line">                    da[dp++] = (<span class="keyword">byte</span>)(<span class="number">0x80</span> | (c &amp; <span class="number">0x3f</span>));</div><div class="line">                &#125;</div><div class="line">                sp++;</div><div class="line">            &#125;</div><div class="line">            updatePositions(src, sp, dst, dp);</div><div class="line">            <span class="keyword">return</span> CoderResult.UNDERFLOW;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>UTF-8 编码与 GBK 和 GB2312 不同，不用查码表，所以在编码效率上 UTF-8 的效率会更好，所以在存储中文字符时 UTF-8 编码比较理想。</p>
<h4 id="几种编码格式的比较"><a href="#几种编码格式的比较" class="headerlink" title="几种编码格式的比较"></a>几种编码格式的比较</h4><p>对中文字符后面四种编码格式都能处理，GB2312 与 GBK 编码规则类似，但是 GBK 范围更大，它能处理所有汉字字符，所以 GB2312 与 GBK 比较应该选择 GBK。UTF-16 与 UTF-8 都是处理 Unicode 编码，它们的编码规则不太相同，相对来说 UTF-16 编码效率最高，字符到字节相互转换更简单，进行字符串操作也更好。它适合在本地磁盘和内存之间使用，可以进行字符和字节之间快速切换，如 Java 的内存编码就是采用 UTF-16 编码。但是它不适合在网络之间传输，因为网络传输容易损坏字节流，一旦字节流损坏将很难恢复，想比较而言 UTF-8 更适合网络传输，对 ASCII 字符采用单字节存储，另外单个字符损坏也不会影响后面其它字符，在编码效率上介于 GBK 和 UTF-16 之间，所以 UTF-8 在编码效率上和编码安全性上做了平衡，是理想的中文编码方式。</p>
<h2 id="字符编码笔记：ASCII，Unicode和UTF-8"><a href="#字符编码笔记：ASCII，Unicode和UTF-8" class="headerlink" title="字符编码笔记：ASCII，Unicode和UTF-8"></a><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="external">字符编码笔记：ASCII，Unicode和UTF-8</a></h2><h3 id="1-ASCII码"><a href="#1-ASCII码" class="headerlink" title="1. ASCII码"></a>1. ASCII码</h3><p>我们知道，在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。</p>
<p>上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码，一直沿用至今。</p>
<p>ASCII码一共规定了128个字符的编码，比如空格”SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。<strong>这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。</strong></p>
<h3 id="2、非ASCII编码"><a href="#2、非ASCII编码" class="headerlink" title="2、非ASCII编码"></a>2、非ASCII编码</h3><p>英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用ASCII码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的é的编码为130（二进制10000010）。这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。</p>
<p>但是，这里又出现了新的问题。不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样。比如，130在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel (ג)，在俄语编码中又会代表另一个符号。但是不管怎样，所有这些编码方式中，0–127表示的符号是一样的，不一样的只是128–255的这一段。</p>
<p>至于亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右。<strong>一个字节只能表示256种符号，肯定是不够的，就必须使用多个字节表达一个符号。</strong> 比如，简体中文常见的编码方式是GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示<strong>256x256=65536个符号</strong>。</p>
<p>中文编码的问题需要专文讨论，这篇笔记不涉及。这里只指出，虽然都是用多个字节表示一个符号，但是GB类的汉字编码与后文的Unicode和UTF-8是毫无关系的。</p>
<h3 id="3-Unicode"><a href="#3-Unicode" class="headerlink" title="3.Unicode"></a>3.Unicode</h3><p>正如上一节所说，<strong>世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。</strong> 因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。</p>
<p>可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是Unicode，就像它的名字都表示的，这是一种所有符号的编码。<br>Unicode当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字”严”。具体的符号对应表，可以查询unicode.org，或者专门的汉字对应表。</p>
<h3 id="4-Unicode的问题"><a href="#4-Unicode的问题" class="headerlink" title="4. Unicode的问题"></a>4. Unicode的问题</h3><p>需要注意的是，<strong>Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。</strong></p>
<p>比如，汉字”严”的unicode是十六进制数4E25，转换成二进制数足足有15位（100111000100101），也就是说这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。</p>
<p>这里就有两个严重的问题，第一个问题是，如何才能区别Unicode和ASCII？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果Unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。</p>
<p>它们造成的结果是：1）出现了Unicode的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示Unicode。2）Unicode在很长一段时间内无法推广，直到互联网的出现。</p>
<h3 id="5-UTF-8"><a href="#5-UTF-8" class="headerlink" title="5.UTF-8"></a>5.UTF-8</h3><p>互联网的普及，强烈要求出现一种统一的编码方式。UTF-8就是在互联网上使用最广的一种Unicode的实现方式。其他实现方式还包括UTF-16（字符用两个字节或四个字节表示）和UTF-32（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是，<strong>UTF-8是Unicode的实现方式之一。</strong></p>
<p>UTF-8最大的一个特点，就是它是一种<strong>变长的编码方式</strong>。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p>
<p>UTF-8的编码规则很简单，只有二条：<br>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</p>
<p>2）对于n字节的符号（n&gt;1），<strong>第一个字节的前n位都设为1，第n+1位设为0</strong>，<strong>后面字节的前两位一律设为10。</strong> 剩下的没有提及的二进制位，全部为这个符号的unicode码。</p>
<p>下表总结了编码规则，字母x表示可用编码的位。<br>Unicode符号范围 | UTF-8编码方式<br>(十六进制) | （二进制）<br>——————–+———————————————<br>0000 0000-0000 007F | 0xxxxxxx<br>0000 0080-0000 07FF | 110xxxxx 10xxxxxx<br>0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx<br>0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</p>
<p>跟据上表，解读UTF-8编码非常简单。<strong>如果一个字节的第一位是0，则这个字节单独就是一个字符；如果第一位是1，则连续有多少个1，就表示当前字符占用多少个字节。</strong></p>
<p>下面，还是以汉字”严”为例，演示如何实现UTF-8编码。<br>已知”严”的unicode是4E25（100111000100101），根据上表，可以发现4E25处在第三行的范围内（0000 0800-0000 FFFF），因此”严”的UTF-8编码需要三个字节，即格式是”1110xxxx 10xxxxxx 10xxxxxx”。然后，从”严”的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，”严”的UTF-8编码是”11100100 10111000 10100101”，转换成十六进制就是E4B8A5。</p>
<h3 id="6-Unicode与UTF-8之间的转换"><a href="#6-Unicode与UTF-8之间的转换" class="headerlink" title="6. Unicode与UTF-8之间的转换"></a>6. Unicode与UTF-8之间的转换</h3><p>通过上一节的例子，可以看到”严”的Unicode码是4E25，UTF-8编码是E4B8A5，两者是不一样的。它们之间的转换可以通过程序实现。</p>
<p>在Windows平台下，有一个最简单的转化方法，就是使用内置的记事本小程序Notepad.exe。打开文件后，点击”文件”菜单中的”另存为”命令，会跳出一个对话框，在最底部有一个”编码”的下拉条。</p>
<p><img src="http://www.ruanyifeng.com/blog/2007/10/bg2007102801-thumb.jpg" alt=""></p>
<p>里面有四个选项：ANSI，Unicode，Unicode big endian 和 UTF-8。</p>
<p>1）ANSI是默认的编码方式。对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（只针对Windows简体中文版，如果是繁体中文版会采用Big5码）。<br>2）Unicode编码指的是UCS-2编码方式，即直接用两个字节存入字符的Unicode码。这个选项用的little endian格式。<br>3）Unicode big endian编码与上一个选项相对应。我在下一节会解释little endian和big endian的涵义。<br>4）UTF-8编码，也就是上一节谈到的编码方法。<br>选择完”编码方式”后，点击”保存”按钮，文件的编码方式就立刻转换好了。</p>
<h3 id="7-Little-endian和Big-endian"><a href="#7-Little-endian和Big-endian" class="headerlink" title="7. Little endian和Big endian"></a>7. Little endian和Big endian</h3><p>上一节已经提到，Unicode码可以采用UCS-2格式直接存储。以汉字”严”为例，Unicode码是4E25，需要用两个字节存储，一个字节是4E，另一个字节是25。存储的时候，4E在前，25在后，就是Big endian方式；25在前，4E在后，就是Little endian方式。</p>
<p>这两个古怪的名称来自英国作家斯威夫特的《格列佛游记》。在该书中，小人国里爆发了内战，战争起因是人们争论，吃鸡蛋时究竟是从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开。为了这件事情，前后爆发了六次战争，一个皇帝送了命，另一个皇帝丢了王位。</p>
<p>因此，第一个字节在前，就是”大头方式”（Big endian），第二个字节在前就是”小头方式”（Little endian）。</p>
<p>那么很自然的，就会出现一个问题：计算机怎么知道某一个文件到底采用哪一种方式编码？<br>Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做”零宽度非换行空格”（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。</p>
<p>如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。</p>
<h3 id="8-实例"><a href="#8-实例" class="headerlink" title="8. 实例"></a>8. 实例</h3><p>下面，举一个实例。<br>打开”记事本”程序Notepad.exe，新建一个文本文件，内容就是一个”严”字，依次采用ANSI，Unicode，Unicode big endian 和 UTF-8编码方式保存。<br>然后，用文本编辑软件UltraEdit中的”十六进制功能”，观察该文件的内部编码方式。<br>1）ANSI：文件的编码就是两个字节”D1 CF”，这正是”严”的GB2312编码，这也暗示GB2312是采用大头方式存储的。<br>2）Unicode：编码是四个字节”FF FE 25 4E”，其中”FF FE”表明是小头方式存储，真正的编码是4E25。<br>3）Unicode big endian：编码是四个字节”FE FF 4E 25”，其中”FE FF”表明是大头方式存储。<br>4）UTF-8：编码是六个字节”EF BB BF E4 B8 A5”，前三个字节”EF BB BF”表示这是UTF-8编码，后三个”E4B8A5”就是”严”的具体编码，它的存储顺序与编码顺序是一致的。</p>
<h3 id="9-延伸阅读"><a href="#9-延伸阅读" class="headerlink" title="9. 延伸阅读"></a>9. 延伸阅读</h3><ul>
<li>The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets（关于字符集的最基本知识）</li>
<li>谈谈Unicode编码</li>
<li>RFC3629：UTF-8, a transformation format of ISO 10646（如果实现UTF-8的规定）</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/" target="_blank" rel="external">深入分析 Java 中的中文编码问题</a><br><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="external">字符编码笔记：ASCII，Unicode和UTF-8</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/image007.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/#authorN1001C&quot;&gt;作者：许令波&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;编码问题一直困扰着开发人员，尤其在 Java 中更加明显，因为 Java 是跨平台语言，不同平台之间编码之间的切换较多。本文将向你详细介绍 Java 中编码问题出现的根本原因，你将了解到：Java 中经常遇到的几种编码格式的区别；Java 中经常需要编码的场景；出现中文问题的原因分析；在开发 Java web 程序时可能会存在编码的几个地方，一个 HTTP 请求怎么控制编码格式？如何避免出现中文问题？&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Charset" scheme="http://ipcreator.me/tags/Charset/"/>
    
  </entry>
  
  <entry>
    <title>Principles of IPCreator&#39;s Blog</title>
    <link href="http://ipcreator.me/2017/04/06/readme/"/>
    <id>http://ipcreator.me/2017/04/06/readme/</id>
    <published>2017-04-05T22:55:06.000Z</published>
    <updated>2017-04-05T23:24:45.739Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/blog.jpg" alt=""></p>
<h2 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h2><blockquote>
<ol>
<li>Sharpen your meta skills</li>
<li>Master basic concepts by meta skills</li>
<li>Record  the pitfalls I fell into</li>
<li>Share the best practices</li>
<li>Best practices deepen the understanding of meta skill and basic concepts.</li>
</ol>
</blockquote>
<a id="more"></a>
<h2 id="Meta-Skill"><a href="#Meta-Skill" class="headerlink" title="Meta Skill"></a>Meta Skill</h2><h3 id="Deliberate-Practice"><a href="#Deliberate-Practice" class="headerlink" title="Deliberate Practice"></a>Deliberate Practice</h3><h4 id="Update-Concept"><a href="#Update-Concept" class="headerlink" title="Update Concept"></a>Update Concept</h4><h4 id="Deep-Thinking"><a href="#Deep-Thinking" class="headerlink" title="Deep Thinking"></a>Deep Thinking</h4><h4 id="Deep-Reading"><a href="#Deep-Reading" class="headerlink" title="Deep Reading"></a>Deep Reading</h4><h4 id="Using-English"><a href="#Using-English" class="headerlink" title="Using English"></a>Using English</h4><h4 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h4><h4 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h4><h4 id="Walking"><a href="#Walking" class="headerlink" title="Walking"></a>Walking</h4><h4 id="Investment"><a href="#Investment" class="headerlink" title="Investment"></a>Investment</h4><h3 id="English"><a href="#English" class="headerlink" title="English"></a>English</h3><h3 id="Innovative-Thinking"><a href="#Innovative-Thinking" class="headerlink" title="Innovative Thinking"></a>Innovative Thinking</h3><h3 id="Retrieve"><a href="#Retrieve" class="headerlink" title="Retrieve"></a>Retrieve</h3><h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><h3 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h3><h4 id="Business"><a href="#Business" class="headerlink" title="Business"></a>Business</h4><h4 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h4><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h3 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/blog.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Pattern&quot;&gt;&lt;a href=&quot;#Pattern&quot; class=&quot;headerlink&quot; title=&quot;Pattern&quot;&gt;&lt;/a&gt;Pattern&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Sharpen your meta skills&lt;/li&gt;
&lt;li&gt;Master basic concepts by meta skills&lt;/li&gt;
&lt;li&gt;Record  the pitfalls I fell into&lt;/li&gt;
&lt;li&gt;Share the best practices&lt;/li&gt;
&lt;li&gt;Best practices deepen the understanding of meta skill and basic concepts.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Meta Skill" scheme="http://ipcreator.me/tags/Meta-Skill/"/>
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Pitfall" scheme="http://ipcreator.me/tags/Pitfall/"/>
    
      <category term="Best Practice" scheme="http://ipcreator.me/tags/Best-Practice/"/>
    
  </entry>
  
  <entry>
    <title>Meta Skill——Retrieve</title>
    <link href="http://ipcreator.me/2017/04/05/Meta%20Skill/meta-skill-retrieve/"/>
    <id>http://ipcreator.me/2017/04/05/Meta Skill/meta-skill-retrieve/</id>
    <published>2017-04-05T12:55:06.000Z</published>
    <updated>2017-04-10T22:18:13.246Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/1474698247-3b87ad3b8d5bcf7a2e3d4d1f299d62d9.jpg" alt=""></p>
<blockquote>
<p>Google makes you wiser</p>
</blockquote>
<a id="more"></a>
<h2 id="Basic-Concept"><a href="#Basic-Concept" class="headerlink" title="Basic Concept"></a>Basic Concept</h2><ol>
<li>Wikipedia</li>
</ol>
<h2 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h2><ol>
<li>Stack Overflow</li>
<li>Official Web Site(such as Google…)</li>
<li>Open Source Resources(Github…)</li>
<li>Find Resolving Ways of Trouble</li>
<li>Other Resources(Books…)</li>
</ol>
<h2 id="English"><a href="#English" class="headerlink" title="English"></a>English</h2><ol>
<li>Important Use Scene</li>
</ol>
<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><ol>
<li>Chrome</li>
<li>TianXingVPN</li>
<li>CSDN</li>
<li>SouBaiduPan</li>
<li>P2PSearcher</li>
<li>XunLei</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/1474698247-3b87ad3b8d5bcf7a2e3d4d1f299d62d9.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google makes you wiser&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Meta Skill" scheme="http://ipcreator.me/tags/Meta-Skill/"/>
    
      <category term="Google" scheme="http://ipcreator.me/tags/Google/"/>
    
      <category term="English" scheme="http://ipcreator.me/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Meta Skill——English</title>
    <link href="http://ipcreator.me/2017/04/05/Meta%20Skill/meta-skill-english/"/>
    <id>http://ipcreator.me/2017/04/05/Meta Skill/meta-skill-english/</id>
    <published>2017-04-05T12:55:06.000Z</published>
    <updated>2017-04-05T13:46:42.567Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/english-collocations-2.jpg" alt=""></p>
<blockquote>
<p>Using is the correct way of learning English</p>
</blockquote>
<ol>
<li>English skill decides the ability of research.</li>
<li>The improvement of program depends on English.</li>
<li>English let you experience more wonderful life.</li>
</ol>
<a id="more"></a>
<h2 id="Research"><a href="#Research" class="headerlink" title="Research"></a>Research</h2><p>Search the Fucking Web<br>Google is beyond  your imagination</p>
<h2 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h2><h3 id="Manual-Document"><a href="#Manual-Document" class="headerlink" title="Manual Document"></a>Manual Document</h3><p>Read The Fucking Manual<br>Platform API<br>Java API<br>Android API<br>Third Party Library<br>…</p>
<h3 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h3><p>Read The Fucking Codes<br>Open Source Resources<br>…</p>
<h3 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h3><p>Android Studio<br>Git/Github<br>Linux/VIM<br>Atom/Source Insight<br>…</p>
<h2 id="Life"><a href="#Life" class="headerlink" title="Life"></a>Life</h2><p>Beautiful Word/Sentence<br>Fabulous Music<br>Excellent Movie<br>Wonderful Book<br>…</p>
<h2 id="Best-Practice"><a href="#Best-Practice" class="headerlink" title="Best Practice"></a>Best Practice</h2><h3 id="Program-1"><a href="#Program-1" class="headerlink" title="Program"></a>Program</h3><p>Ubuntu<br>Vim</p>
<h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><h3 id="Writing-Blog"><a href="#Writing-Blog" class="headerlink" title="Writing Blog"></a>Writing Blog</h3><h3 id="Appreciation"><a href="#Appreciation" class="headerlink" title="Appreciation"></a>Appreciation</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/english-collocations-2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using is the correct way of learning English&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;English skill decides the ability of research.&lt;/li&gt;
&lt;li&gt;The improvement of program depends on English.&lt;/li&gt;
&lt;li&gt;English let you experience more wonderful life.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="English" scheme="http://ipcreator.me/categories/English/"/>
    
    
      <category term="Meta Skill" scheme="http://ipcreator.me/tags/Meta-Skill/"/>
    
  </entry>
  
  <entry>
    <title>Meta Skill——Innovation</title>
    <link href="http://ipcreator.me/2017/04/05/Meta%20Skill/meta-skill-innovation/"/>
    <id>http://ipcreator.me/2017/04/05/Meta Skill/meta-skill-innovation/</id>
    <published>2017-04-05T12:55:06.000Z</published>
    <updated>2017-04-10T22:16:13.956Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/innovation%20%281%29.jpg" alt=""></p>
<blockquote>
<p>Innovation brings unexpected pleasant surprise frequently.<br>A teacher should be good at drawing inferences about other cases from one instance.</p>
</blockquote>
<a id="more"></a>
<h2 id="Three-Steps"><a href="#Three-Steps" class="headerlink" title="Three Steps"></a>Three Steps</h2><h3 id="Set-Goal"><a href="#Set-Goal" class="headerlink" title="Set Goal"></a>Set Goal</h3><h3 id="Find-Ways-by-Innovative-Thinking"><a href="#Find-Ways-by-Innovative-Thinking" class="headerlink" title="Find Ways by Innovative Thinking"></a>Find Ways by Innovative Thinking</h3><p>Sharpen your brain  and open your mind</p>
<h3 id="Try-and-Correct"><a href="#Try-and-Correct" class="headerlink" title="Try and Correct"></a>Try and Correct</h3><p>Practice is the only truth.</p>
<h2 id="Six-Common-Innovative-Thinking"><a href="#Six-Common-Innovative-Thinking" class="headerlink" title="Six Common Innovative Thinking"></a>Six Common Innovative Thinking</h2><h3 id="Reversed-Thinking"><a href="#Reversed-Thinking" class="headerlink" title="Reversed Thinking"></a>Reversed Thinking</h3><p><strong>A–&gt;B</strong>  ==&gt; <strong>B–&gt;A</strong></p>
<h3 id="Exaggerated-Thinking"><a href="#Exaggerated-Thinking" class="headerlink" title="Exaggerated Thinking"></a>Exaggerated Thinking</h3><p><strong>A–&gt;B</strong>  ==&gt; <strong>10<em>A–&gt;20</em>B</strong></p>
<h3 id="Composit-Thinking"><a href="#Composit-Thinking" class="headerlink" title="Composit Thinking"></a>Composit Thinking</h3><p>put two together and get three.<br><strong>A–&gt;B</strong>  ==&gt; <strong>AC–&gt;BD</strong></p>
<h3 id="Lessened-Thinking"><a href="#Lessened-Thinking" class="headerlink" title="Lessened Thinking"></a>Lessened Thinking</h3><p><strong>A–&gt;B–&gt;C</strong>  ==&gt; <strong>A–&gt;C</strong></p>
<h3 id="Changing-Order-Thinking"><a href="#Changing-Order-Thinking" class="headerlink" title="Changing Order Thinking"></a>Changing Order Thinking</h3><p><strong>A–&gt;B–&gt;C</strong>  ==&gt; <strong>A–&gt;C–&gt;B</strong></p>
<h3 id="Revolution-Thinking"><a href="#Revolution-Thinking" class="headerlink" title="Revolution Thinking"></a>Revolution Thinking</h3><p><strong>A–&gt;B–&gt;C</strong>  ==&gt; <strong>D–&gt;E–&gt;C</strong></p>
<h2 id="Best-Practice"><a href="#Best-Practice" class="headerlink" title="Best Practice"></a>Best Practice</h2><h3 id="Patent-Portfolio"><a href="#Patent-Portfolio" class="headerlink" title="Patent Portfolio"></a>Patent Portfolio</h3><h3 id="Program-Trouble-Resolver"><a href="#Program-Trouble-Resolver" class="headerlink" title="Program Trouble Resolver"></a>Program Trouble Resolver</h3><h3 id="Google-Search"><a href="#Google-Search" class="headerlink" title="Google Search"></a>Google Search</h3><h3 id="English-Learning"><a href="#English-Learning" class="headerlink" title="English Learning"></a>English Learning</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/innovation%20%281%29.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Innovation brings unexpected pleasant surprise frequently.&lt;br&gt;A teacher should be good at drawing inferences about other cases from one instance.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Meta Skill" scheme="http://ipcreator.me/tags/Meta-Skill/"/>
    
      <category term="Innovation" scheme="http://ipcreator.me/tags/Innovation/"/>
    
  </entry>
  
  <entry>
    <title>A Milestone of My Growing Up</title>
    <link href="http://ipcreator.me/2017/04/05/MyView/Original/watch%20your%20attention/"/>
    <id>http://ipcreator.me/2017/04/05/MyView/Original/watch your attention/</id>
    <published>2017-04-05T12:12:06.000Z</published>
    <updated>2017-04-05T14:28:56.912Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/great-milestone-884872.jpg" alt=""></p>
<blockquote>
<p>Watch Your Attention<br>Focus on your goal<br>Keep your rhythm</p>
</blockquote>
<a id="more"></a>
<h2 id="Focus-on-your-ultimate-goal"><a href="#Focus-on-your-ultimate-goal" class="headerlink" title="Focus on your ultimate goal"></a>Focus on your ultimate goal</h2><p>SmartAI<br>SmartUI</p>
<h3 id="Any-useful-tools-are-just-tools"><a href="#Any-useful-tools-are-just-tools" class="headerlink" title="Any useful tools are just tools"></a>Any useful tools are just tools</h3><p>Such as linux, vim, androidstudio, gradle ,git etc</p>
<h3 id="Believe-in-Yourself"><a href="#Believe-in-Yourself" class="headerlink" title="Believe in Yourself"></a>Believe in Yourself</h3><p>To grasp the opportunity of AI, you must learn something and do something.<br>Choose means give up something.<br>Give up something means getting another things.<br>Balance is the great law of nature.<br>God is equal to everyone.<br>God help those who help themselves</p>
<h3 id="Treasure-your-attention"><a href="#Treasure-your-attention" class="headerlink" title="Treasure your attention"></a>Treasure your attention</h3><p>Don’t learn too much<br>Don’t talk too much<br>Don’t share too much</p>
<p>Just fine is OK<br>Don’t become a good man for everyone</p>
<h3 id="Perfect-is-weak"><a href="#Perfect-is-weak" class="headerlink" title="Perfect is weak"></a>Perfect is weak</h3><p>Persue better than past<br>Don’t be rushing<br>Don’t compare others but yourself</p>
<h3 id="Deliberate-Practice-needs-Time-and-Patience"><a href="#Deliberate-Practice-needs-Time-and-Patience" class="headerlink" title="Deliberate Practice needs Time and Patience"></a>Deliberate Practice needs Time and Patience</h3><p>Skill can’t be gained easily.<br>One percent hard work, one even smaller gain.<br>When conditions are ripe, success arrives.</p>
<h2 id="Keep-your-rhythm"><a href="#Keep-your-rhythm" class="headerlink" title="Keep your rhythm"></a>Keep your rhythm</h2><p>When you’re tired, take a break first.<br>Normal and healthy ways last longer.<br>Career and Life are long-distance running.</p>
<h2 id="There-is-another-way"><a href="#There-is-another-way" class="headerlink" title="There is another way"></a>There is another way</h2><p>When you’re in trouble, try some different ways by your innovative thinking.</p>
<h3 id="Frog-Jump-Strategy"><a href="#Frog-Jump-Strategy" class="headerlink" title="Frog Jump Strategy"></a>Frog Jump Strategy</h3><p>Forget it temperately, Go ahead</p>
<h2 id="Communication-sincerely"><a href="#Communication-sincerely" class="headerlink" title="Communication sincerely"></a>Communication sincerely</h2><p>Family is your strong shield</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/great-milestone-884872.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Watch Your Attention&lt;br&gt;Focus on your goal&lt;br&gt;Keep your rhythm&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Linux Trouble Resolver</title>
    <link href="http://ipcreator.me/2017/04/05/Program/Tools/Linux/linux-trouble-resolver/"/>
    <id>http://ipcreator.me/2017/04/05/Program/Tools/Linux/linux-trouble-resolver/</id>
    <published>2017-04-05T04:46:06.000Z</published>
    <updated>2017-04-05T14:02:01.599Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/positive%20attitude.jpg" alt=""></p>
<blockquote>
<p>Deliberate Practice makes Perfect!</p>
</blockquote>
<a id="more"></a>
<h2 id="linux中vi保存文件时的“Can’t-open-file-for-writing”"><a href="#linux中vi保存文件时的“Can’t-open-file-for-writing”" class="headerlink" title="linux中vi保存文件时的“Can’t open file for writing”"></a><a href="http://www.cnblogs.com/kongzhongqijing/p/3531506.html" target="_blank" rel="external">linux中vi保存文件时的“Can’t open file for writing”</a></h2><p>使用vi新建一个文件，编辑保存时提示“Can’t open file for writing”。</p>
<p>分析：</p>
<p>出现这个错误的原因可能有两个：<br>一是当前用户的权限不足；<br>二是此文件可能正被其他程序或用户使用。<br>第一项的解决方案是在使用vi命令打开文件时，前面加上sudo来临时提供管理员权限，即使用命令“sudo vi 文件名”打开编辑文件。</p>
<p>由此看来，sudo命令是很有用的，当我们执行某种操作系统提示诸如“operation not permitted”等权限不足信息时，我们很多时候都可以在命令前面加上sudo来解决权限不足问题。</p>
<p><a href="http://stackoverflow.com/questions/8253362/etc-apt-sources-list-e212-cant-open-file-for-writing" target="_blank" rel="external">/etc/apt/sources.list” E212: Can’t open file for writing
</a><br>Instead of losing all your changes and re-opening with sudo. See this demo of how to save those changes:</p>
<p>One time Setup demo to create a root owned read only file for a lower user:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo touch temp.txt</div><div class="line">sudo chown root:root temp.txt</div><div class="line">sudo chmod 775 temp.txt</div><div class="line">whoami</div><div class="line">el</div></pre></td></tr></table></figure>
<p>First open the file as normal user:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi temp.txt</div></pre></td></tr></table></figure></p>
<p>Then make some changes to the file, it warns you its read only. Use this command.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:w !chmod 777 %</div></pre></td></tr></table></figure></p>
<p>Then write the file:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:wq!</div></pre></td></tr></table></figure></p>
<p>The permissions are expanded, and the file is saved. You need the exclamation point because you are editing a root file as a lesser user.</p>
<p>Explanation of what that command does:</p>
<blockquote>
<p>The :w means write the file. The bang means start interpreting as shell. chmod means change permissions, 777 means full permissions everywhere. The percent means the current file name.</p>
</blockquote>
<p>It applies the change. And it ask if you want to re-load. Press “O” for “Ok”. <strong>Don’t reload or you’ll lose your changes.</strong></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href=""></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/positive%20attitude.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Deliberate Practice makes Perfect!&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Linux" scheme="http://ipcreator.me/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://ipcreator.me/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Shell</title>
    <link href="http://ipcreator.me/2017/04/05/Program/Tools/Linux/shell/"/>
    <id>http://ipcreator.me/2017/04/05/Program/Tools/Linux/shell/</id>
    <published>2017-04-05T04:25:06.000Z</published>
    <updated>2017-04-05T14:31:48.624Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.sysgeek.cn/img/logo/linux/linux-2.jpg" alt=""></p>
<ol>
<li>What’s Shell?</li>
<li>Types of Linux Shell</li>
<li>What’s Shell script?</li>
<li>How to Write Shell Scipt?</li>
</ol>
<a id="more"></a>
<h2 id="1-什么是-Shell"><a href="#1-什么是-Shell" class="headerlink" title="1. 什么是 Shell"></a>1. 什么是 Shell</h2><p>Unix Shell 即大家俗称的 Shell 是源于 Unix/Linux 的命令行解释器，用户在 Shell 中执行的一系列命令都会被 Shell 命令行解释器直接执行。现代流行的命令行解释功能都已被内置到 Linux Shell 中进行支持，例如：通配符、 管道、 变量、条件操作、 命令及帮助文件等。简单来说，我们可以把 Linux 理解为用户与 Linux 操作系统进行交互的一个接口。</p>
<h2 id="2-有哪些-Linux-Shell-类型"><a href="#2-有哪些-Linux-Shell-类型" class="headerlink" title="2. 有哪些 Linux Shell 类型"></a>2. 有哪些 Linux Shell 类型</h2><p>常见Shell类型</p>
<p>Linux 中的各种 Shell 类型有很多，但 Bourne Shell 和 C shell 应用最为广泛，事实上 Bourne Shell 已经成为 Shell 附加功能及一些衍生功能的编码基础。</p>
<p>Bourne Shell：Bourne shell 又名 sh，在 Linux 中的标准路径为 /bin/sh，它由 Stephen Bourne 编写创建，其之所以如此出名是因为 sh 作为其它 Shell 的大量符号/硬链接而存在。（Bourne Shell 的 License 仍在讨论中。）</p>
<p>C Shell：C Shell 又名 csh，由 Billy Joy 编写创建并被 BSD Unix 广泛使用。C Shell 引入许多功能来完善交互，如：别名，历史操作，任务控制等。它完全由 C 语言写成，并使用 BSD license。</p>
<p>Fish：Fish 是友好人机交互的代表，它改变了用户与 Linux Shell 在通用变量、友好错误信息、Tab 补全、语法高亮、智能终端和剪贴板处理等方面的交互方式。（Fish 基于 GPL v2）<br>Bourne-Again Shell：作为 GNU 项目的一部分，Bourne-Again Shell 是目前大多数 Linux 发行版和 Mac OS X 默认使用的 Shell。（它主要由 C 语言写成并基于 GPLv3 发布）</p>
<p>其它不太常用的 Linux Shell 还包括：</p>
<p>Debian Almquist shell 别名 dash<br>Korn Shell 别名 ksh<br>Z shell 别名 zh<br>Busybox<br>……</p>
<h2 id="3-什么是-Shell-脚本"><a href="#3-什么是-Shell-脚本" class="headerlink" title="3. 什么是 Shell 脚本"></a>3. 什么是 Shell 脚本</h2><p>Shell 脚本主要由 Linux Shell 解释执行，可被用于自动化的程序执行、文件操作、环境配置等任务，Linux 管理员通常使用 Shell 脚本来执行一些重复性的体力劳动。</p>
<p>Shell 脚本可将多个要执行的命令和任务提交到 Linux Shell 自动执行，而无需用户手动触发。你还可以在单个脚本中将一个命令的输出定义为另一个命令的输入。</p>
<p>总的来说，Shell 脚本编写是 Linux 管理员节省时间和资源的必备技能。</p>
<h2 id="4-如何编开始写自己的-Shell-脚本"><a href="#4-如何编开始写自己的-Shell-脚本" class="headerlink" title="4. 如何编开始写自己的 Shell 脚本"></a>4. 如何编开始写自己的 Shell 脚本</h2><p>在新手阶段，我们比较建议大家使用 gedit、vi/vim、nano 或 Emacs 来编写 Shell 脚本，而不要使用其它 IDE 编辑器。Bash 脚本必需以如下代码作为首行：</p>
<blockquote>
<p>#!/bin/bash</p>
</blockquote>
<p>上述字符中的 #! 被称为 shebang，后面跟的 /bin/bash 表明要使用 /bin/bash 来执行。除首行（意义特殊）用于指定脚本类型外，其余以 # 打头的内容会被当作注释被 Shell 忽略执行。</p>
<p>脚本写成后，你可将该文件保存成任意扩展名甚至无扩展名，但业界公认惯例以 .sh 作为 Linux Shell 脚本的扩展名，建议大家也别搞特殊。而且要在赋予脚本执行权限之后才能被执行，建议大家采用 775 权限，千万不要 777：</p>
<blockquote>
<p>chmod 755 sysgeekdemo.sh</p>
</blockquote>
<p>编写首个Shell脚本<br>打开你使用的文本编辑器，粘贴如下内容：</p>
<blockquote>
<p>#!/bin/bash<br>echo “Hello World!”</p>
</blockquote>
<p>将其保存成 1st.sh 再执行看看效果：</p>
<blockquote>
<p>chmod 755 1st.sh<br>./1st.sh</p>
</blockquote>
<p><img src="https://img.sysgeek.cn/img/201604/Linux-Shell_136C9/linux-shell-scripting-starting-2.jpg" alt=""></p>
<p>执行成功了，是不是非常简单。<br>下面我们再建立一个 2nd.sh 并粘入如下内容：</p>
<blockquote>
<p>#!/bin/bash<br>echo “What is your name?”<br>read a;<br>echo “Hey $a! what is your Favorite Website?”<br>read b;<br>echo -e “That’s Nice to know @$a that $b is your favorite Website”</p>
</blockquote>
<p>大家看看执行之后发生了什么呢？</p>
<p>echo 后的「What is your name?」进行了正确输出，随后你输入的名字被存到了变量 a 当中，让命令可以从文件描述符中进行读取。<br>echo 后跟的 「Hey $a! what is your Favorite Website?」中的 $a 变量进行了赋值输出，并将输入的网址存入了变量 b，在第三行进行输出。<br>如此简单！开始上手的感觉非常良好？</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.sysgeek.cn/linux-shell-scripting-starting/" target="_blank" rel="external">Linux Shell脚本系列：开始上手(1)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.sysgeek.cn/img/logo/linux/linux-2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What’s Shell?&lt;/li&gt;
&lt;li&gt;Types of Linux Shell&lt;/li&gt;
&lt;li&gt;What’s Shell script?&lt;/li&gt;
&lt;li&gt;How to Write Shell Scipt?&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Ubuntu" scheme="http://ipcreator.me/tags/Ubuntu/"/>
    
      <category term="Shell" scheme="http://ipcreator.me/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://ipcreator.me/2017/04/05/Program/Tools/Linux/linux/"/>
    <id>http://ipcreator.me/2017/04/05/Program/Tools/Linux/linux/</id>
    <published>2017-04-04T22:13:06.000Z</published>
    <updated>2017-04-05T04:25:18.136Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/Google-Android-and-Linux.png" alt=""></p>
<blockquote>
<p>In Brief, Android is a Java System running on Linux</p>
</blockquote>
<a id="more"></a>
<h2 id="Basic-Concept"><a href="#Basic-Concept" class="headerlink" title="Basic Concept"></a>Basic Concept</h2><h3 id="Install-Software"><a href="#Install-Software" class="headerlink" title="Install Software"></a>Install Software</h3><p>Linux（继承自Unix）的文件系统构架中，用户手动选择安装目录是不必要的。这套系统是很聪明滴，她更了解什么东西该放在什么位置，根本不用操心。若是非要操心，非要自己指定位置，指错了说不定会出故障欧！——因为提供软件的人也信任这套系统最佳，呵呵~这种规范已经实行几十年了，事实证明这就是最好的！所以就不需要我们操心安装位置了（事实上安装时也没提示你选择安装目录）</p>
<p>通常情况下，linux会这样放软件的组件：</p>
<blockquote>
<p>程序的文档-&gt;/usr/share/doc; /usr/local/share/doc<br>程序-&gt;/usr/share; /usr/local/share<br>程序的启动项-&gt;/usr/share/apps; /usr/local/share<br>程序的语言包-&gt;/usr/share/locale; /usr/local/share/locale<br>可执行文件-&gt;/usr/bin; /usr/local/bin</p>
</blockquote>
<p>而有的软件为了和系统组件分隔开，选择栖息于 /opt，但目录结构往往是一样的，把/usr或/usr/local 替换为了/opt/“软件名”</p>
<p><a href="https://www.sysgeek.cn/linux-package-management/" target="_blank" rel="external">Linux软件包管理基本操作入门</a><br>大多数现代类 Unix 操作系统都提供了一个集中的软件包管理机制，以帮助用户搜索、安装和管理软件。而软件通常以「包」的形式存储在仓库「repository」中，对软件包的使用和管理被称为包管理。而 Linux 包的基本组成部分通常有：共享库、应用程序、服务和文档。</p>
<p>包管理通常不仅限于软件的一次性安装，还包括了对已安装软件包进行升级的工具。「包仓库」有助于确保代码已经在你使用的系统上进行了审核，并由软件开发者或包维护者进行管理。</p>
<p>在配置 Linux 服务器或开发环境时，通常都不仅限于使用官方源。相较于现如今软件版本快速更新迭代而言，虽然官方源所使用的稳定版软件包很可能已过时，但对于系统管理员和开发人员来说，掌握常见 Linux 包管理基本操作还是一项必备的常用技能。</p>
<p>大多数包管理系统是建立在包文件上的集合，包文件通常包含编译好的二进制文件和其它资源组成的：软件、安装脚本、元数据及其所需的依赖列表。</p>
<p>Debian 及其衍生产品如：Ubuntu、Linux Mint 和 Raspbian 的包格式为.deb文件，APT 是最常见包操作命令，可：搜索库、安装包及其依赖和管理升级。而要直接安装现成.deb包时需要使用dpkg命令。</p>
<p>CentOS、Fedora 及 Red Hat 系列 Linux 使用RPM包文件，并使用yum命令管理包文件及与软件库交互。</p>
<p>在最新的 Fedora 版本中，yum命令已被dnf取代进行包管理。</p>
<blockquote>
<p>amd64的说法，可以google一下，大约就是amd最先推出64位机，于是乎后来者比如因特尔在推出64位CPU时也沿用了此叫法。</p>
</blockquote>
<h4 id="更新本地包数据库列表"><a href="#更新本地包数据库列表" class="headerlink" title="更新本地包数据库列表"></a>更新本地包数据库列表</h4><p>大多数 Linux 都使用本地数据库来存储远程可用的包仓库列表，所以在安装或升级包之前最好更新一下这个数据库。</p>
<p>系统    命令<br>Debian / Ubuntu    sudo apt-get update<br>CentOS    yum check-update<br>Fedora    dnf check-update</p>
<h4 id="升级已安装的包"><a href="#升级已安装的包" class="headerlink" title="升级已安装的包"></a>升级已安装的包</h4><p>在没有包管理方式时，要升级并保持 Linux 已装软件处在最新版本是一个巨大的工程，管理员和用户不得不手动跟踪上游软件版本变化及安全警告。在有了包管理系统之后，只需几条命令便可保持软件最新。</p>
<p>系统    命令    备注<br>Debian / Ubuntu    sudo apt-get upgrade    仅升级已安装的软件包<br>sudo apt-get dist-upgrade    可添加或删除程序包，以满足新的依赖。<br>CentOS    sudo yum update<br>Fedora    sudo dnf upgrade</p>
<h4 id="查找-搜索软件包"><a href="#查找-搜索软件包" class="headerlink" title="查找/搜索软件包"></a>查找/搜索软件包</h4><p>大多数 Linux 桌面版本都提供用户可搜索和安装软包的界面，这是找寻和安装软件的最佳方法。但对于追求效率和服务器管理员来说，使用命令行工具查找/搜索软件包才是正途。</p>
<p>系统    命令    备注<br>Debian / Ubuntu    apt-cache search 搜索内容<br>CentOS    yum search 搜索内容<br>yum search all 搜索内容    搜索所有内容，包括包描述。<br>Fedora    dnf search 搜索内容<br>dnf search all 搜索内容    搜索所有内容，包括包描述。</p>
<h4 id="查看某个软件包信息"><a href="#查看某个软件包信息" class="headerlink" title="查看某个软件包信息"></a>查看某个软件包信息</h4><p>在决定安装哪个包之前，我们往往都需要查看该软件包的详细说明。包的说明文件中通常包括：包名、版本号及依赖列表等元数据，可以使用如下命令来查看。</p>
<p>系统    命令    备注<br>Debian / Ubuntu    apt-cache show 包名    显示有关软件包的本地缓存信息<br>dpkg -s 包名    显示包的当前安装状态<br>CentOS    yum info 包名<br>yum deplist 包名    列出包的以来<br>Fedora    dnf info 包名<br>dnf repoquery –requires 包名    列出包的以来</p>
<h4 id="从软件仓库安装包"><a href="#从软件仓库安装包" class="headerlink" title="从软件仓库安装包"></a>从软件仓库安装包</h4><p>一旦我们知道某个软件包的名称之后，便可以使用如下命令从软件仓库安装包。</p>
<p>系统    命令    备注<br>Debian / Ubuntu    sudo apt-get install 包名<br>sudo apt-get install 包1 包2 …    安装所有列出的包<br>sudo apt-get install -y 包名    无需提示直接安装<br>CentOS    sudo yum install 包名<br>sudo yum install 包1 包2 …    安装所有列出的包<br>sudo yum install -y 包名    无需提示直接安装<br>Fedora    sudo dnf install 包名<br>sudo dnf install 包1 包2 …    安装所有列出的包<br>sudo dnf install -y 包名    无需提示直接安装</p>
<h4 id="从本地文件系统直接安装包"><a href="#从本地文件系统直接安装包" class="headerlink" title="从本地文件系统直接安装包"></a>从本地文件系统直接安装包</h4><p>很多时候，我们在进行测试或从某个地方直接拿到软件包之后需要从本地文件系统直接安装包。Debian 及衍生系统可以使用 dpkg 进行安装，CentOS 和 Fedora 系统使用 yum 和 dnf 命令进行安装。</p>
<p>系统    命令    备注<br>Debian / Ubuntu    sudo dpkg -i 包名.deb<br>sudo apt-get install -y gdebi&amp;&amp; sudo gdebi 包名.deb    使用gdebi检索缺少的依赖关系<br>CentOS    sudo yum install 包名.rpm<br>Fedora    sudo dnf install 包名.rpm</p>
<h4 id="移除已安装的包"><a href="#移除已安装的包" class="headerlink" title="移除已安装的包"></a>移除已安装的包</h4><p>由于包管理器知道哪些文件是由哪个包提供的，所以在卸载不需要的软件包之后通常可以获得一个干净的系统。</p>
<p>系统    命令    备注<br>Debian / Ubuntu    sudo apt-get remove 包名<br>sudo apt-get autoremove    自动移除已知不需要的包<br>CentOS    sudo yum remove 包名<br>Fedora    sudo dnf erase 包名</p>
<h3 id="Basic-Command"><a href="#Basic-Command" class="headerlink" title="Basic Command"></a>Basic Command</h3><h4 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h4><p>pwd 查看当前目录</p>
<p>回到上级目录<br>与 Windows 一样，使用 cd .. 即可。如果要在父目录的各文件夹之间进行切换，使用 ../文件夹名 即可。</p>
<p>回到上个目录<br>如果你操作到一半时，需要返回上个进入过的目录，可以使用 – 破折号：cd -</p>
<p>其它目录导航操作<br>cd 返回Home目录<br>cd / 回到Root目录（需要有权限）</p>
<h2 id="Bird-Brother’s-Linux-Experience"><a href="#Bird-Brother’s-Linux-Experience" class="headerlink" title="Bird Brother’s Linux Experience"></a>Bird Brother’s Linux Experience</h2><h2 id="Useful-Tools-of-Linux"><a href="#Useful-Tools-of-Linux" class="headerlink" title="Useful Tools of Linux"></a>Useful Tools of Linux</h2><h3 id="在Ubuntu-16-04如何安装Java"><a href="#在Ubuntu-16-04如何安装Java" class="headerlink" title="在Ubuntu 16.04如何安装Java"></a><a href="https://www.howtoing.com/how-to-install-java-with-apt-get-on-ubuntu-16-04/" target="_blank" rel="external">在Ubuntu 16.04如何安装Java</a></h3><h3 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a><a href="http://coolshell.cn/articles/5426.html" target="_blank" rel="external">VIM</a></h3><p><img src="http://www.vim.org/images/vim_header.gif" alt=""></p>
<blockquote>
<p>vi(vim)是上Linux 非常常用的编辑器，很多Linux发行版都默认安装了vi(vim)。vi(vim)命令繁多但是如果使用灵活之后将会大大提高效率。vi是 “visual interface”的缩写，vim是vi IMproved(增强版的vi)。在一般的系统管理维护中vi就够用，如果想使用代码加亮的话可以使用vim。</p>
</blockquote>
<p>Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as “vi” with most UNIX systems and with Apple OS X.</p>
<p>Vim is rock stable and is continuously being developed to become even better. Among its features are:</p>
<ol>
<li>persistent, multi-level undo tree</li>
<li>extensive plugin system</li>
<li>support for hundreds of programming languages and file formats</li>
<li>powerful search and replace</li>
<li>integrates with many tools</li>
</ol>
<p>安装 sudo apt-get install vim<br>启动Vim后，vim在 Normal 模式下。<br>让我们进入 Insert 模式，请按下键 i 。(vim左下角有一个–insert–字样)<br>想返回 Normal 模式，请按 ESC 键</p>
<p>在VIM的Normal模式下，所有的键就是功能键<br>x → 删当前光标所在的一个字符。<br>dd → 删除当前行，并把删除的行存到剪贴板里<br>p → 粘贴剪贴板<br>:wq → 存盘 + 退出 (:w 存盘, :q 退出)  :w 后可以跟文件名</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" alt=""><br>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。<br>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。<br>连 vim 的官方网站 (<a href="http://www.vim.org" target="_blank" rel="external">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p>
<p>vi/vim 的使用<br>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），插入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：</p>
<h4 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h4><p>用户刚刚启动 vi/vim，便进入了命令模式。<br>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p>
<p>以下是常用的几个命令：<br>i 切换到插入模式，以输入字符。<br>x 删除当前光标所在处的字符。<br>: 切换到底线命令模式，以在最底一行输入命令。</p>
<p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。<br>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>
<h4 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h4><p>在命令模式下按下i就进入了输入模式。<br>在输入模式中，可以使用以下按键：</p>
<p>字符按键以及Shift组合，输入字符<br>ENTER，回车键，换行<br>BACK SPACE，退格键，删除光标前一个字符<br>DEL，删除键，删除光标后一个字符<br>方向键，在文本中移动光标<br>HOME/END，移动光标到行首/行尾<br>Page Up/Page Down，上/下翻页<br>Insert，切换光标为输入/替换模式，光标将变成竖线/下划线<br>ESC，退出输入模式，切换到命令模式</p>
<h4 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h4><p><strong>在命令模式下按下:（英文冒号）就进入了底线命令模式。</strong><br>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。<br>在底线命令模式中，基本的命令有（已经省略了冒号）：<br>q 退出程序<br>w 保存文件<br>按ESC键可随时退出底线命令模式。</p>
<p>简单的说，我们可以将这三个模式想成底下的图标来表示：<br><img src="http://www.runoob.com/wp-content/uploads/2014/07/vim-vi-workmodel.png" alt=""></p>
<p><a href="http://www.cnblogs.com/next-open/p/3662899.html" target="_blank" rel="external">Linux上vi(vim)编辑器使用教程</a></p>
<p>一、打开文件、保存、关闭文件(vi命令模式下使用)<br>vi filename       //打开filename文件<br>:w       //保存文件<br>:w vpser.net //保存至vpser.net文件<br>:q          //退出编辑器，如果文件已修改请使用下面的命令<br>:q!        //退出编辑器，且不保存<br>:wq         //退出编辑器，且保存文件</p>
<p>二、插入文本或行(vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式)<br>a      //在当前光标位置的右边添加文本<br>i       //在当前光标位置的左边添加文本<br>A     //在当前行的末尾位置添加文本<br>I      //在当前行的开始处添加文本(非空字符的行首)<br>O     //在当前行的上面新建一行<br>o     //在当前行的下面新建一行<br>R    //替换(覆盖)当前光标位置及后面的若干文本<br>J    //合并光标所在行及下一行为一行(依然在命令模式)</p>
<p>三、移动光标(vi命令模式下使用)<br>1、使用上下左右方向键</p>
<p>2、命令模式下：h   向左、j   向下 、k   向上、l  向右。<br>空格键 向右、Backspace  向左、Enter  移动到下一行首、-  移动到上一行首。</p>
<p>四、删除、恢复字符或行(vi命令模式下使用)<br>x         //删除当前字符<br>nx         //删除从光标开始的n个字符<br>dd      //删除当前行<br>ndd   //向下删除当前行在内的n行<br>u       //撤销上一步操作<br>U      //撤销对当前行的所有操作</p>
<p>五、搜索(vi命令模式下使用)<br>/vpser     //向光标下搜索vpser字符串<br>?vpser     //向光标上搜索vpser字符串<br>n           //向下搜索前一个搜素动作<br>N         //向上搜索前一个搜索动作</p>
<p>六、跳至指定行(vi命令模式下使用)<br>n+        //向下跳n行<br>n-         //向上跳n行<br>nG        //跳到行号为n的行<br>G           //跳至文件的底部</p>
<p>七、设置行号(vi命令模式下使用)<br>:set  nu     //显示行号<br>:set nonu    //取消显示行号</p>
<p>八、复制、粘贴(vi命令模式下使用)<br>yy    //将当前行复制到缓存区，也可以用 “ayy 复制，”a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。<br>nyy   //将当前行向下n行复制到缓冲区，也可以用 “anyy 复制，”a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。<br>yw    //复制从光标开始到词尾的字符。<br>nyw   //复制从光标开始的n个单词。<br>y^      //复制从光标到行首的内容。  VPS侦探<br>y$      //复制从光标到行尾的内容。<br>p        //粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用”ap 进行粘贴。<br>P        //粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用”aP 进行粘贴。</p>
<p>九、替换(vi命令模式下使用)<br>:s/old/new      //用new替换行中首次出现的old<br>:s/old/new/g         //用new替换行中所有的old<br>:n,m s/old/new/g     //用new替换从n到m行里所有的old<br>:%s/old/new/g      //用new替换当前文件里所有的old</p>
<p>十、编辑其他文件<br>:e otherfilename    //编辑文件名为otherfilename的文件。</p>
<p>十一、修改文件格式<br>:set fileformat=unix   //将文件修改为unix格式，如win下面的文本文件在linux下会出现^M。</p>
<h3 id="Nmon-Nigel’s-Monitor"><a href="#Nmon-Nigel’s-Monitor" class="headerlink" title="Nmon (  Nigel’s Monitor) "></a><a href="https://www.sysgeek.cn/nmon-monitor-linux-system-performance/" target="_blank" rel="external">Nmon (  Nigel’s Monitor) </a></h3><p>非常常用的系统性能监视工具，由 IBM 工程师 Nigel Griffiths 开发，适用于 AIX 和 Linux 操作系统。该工具可以直接在屏幕上显示当前操作系统的资源利用率，以帮助大家找出系统瓶颈和协助系统调优。使用 Nmon 大家便可以轻松监控系统 CPU、内存、网络、磁盘、文件系统、NFS、Top 进程等信息。</p>
<blockquote>
<p>sudo apt-get install nmon</p>
</blockquote>
<p>一旦安装完成，则可以通过在终端执行 nmon 命令启动它。<br><img src="https://img.sysgeek.cn/img/201512/NmonLinux_86D/nmon-monitor-linux-system-performance-2.jpg" alt=""></p>
<p>从上图中大家可以看到，Nmon 命令行工具是一个用户交互的应用程序，大家可以非常方便地使用键盘快捷键来查看相关统计信息。</p>
<p>q : 停止并退出Nmon<br>h : 查看帮助信息<br>c : 查看 CPU 统计信息<br>m : 查看内存统计信息<br>d : 查看磁盘统计信息<br>k : 查看内核统计信息<br>n : 查看网络统计信息<br>N : 查看 NFS 统计信息<br>j : 查看文件系统统计信息<br>t : 查看 Top 进程统计信息<br>V : 查看虚拟内存统计信息<br>v : 详细输出模式</p>
<h3 id="w"><a href="#w" class="headerlink" title="w"></a>w</h3><p>使用该命令我们可以查看到当前登录系统的用户是谁，以及执行了哪些命令。<br><img src="https://img.sysgeek.cn/img/201510/a78b99451b2c_B15/10-useful-utilities-linux-2.jpg" alt=""></p>
<h3 id="dstat"><a href="#dstat" class="headerlink" title="dstat"></a>dstat</h3><p>dstat 是一个可以非常灵活使用和进行组合使用的工具，它可用于监控内存、进行、网络及磁盘性能，可用于替代  ifstat、iostat、dmstat等工具。使用之前需先执行如下命令进行安装：</p>
<blockquote>
<p>apt-get install dstat</p>
</blockquote>
<p>执行如下命令可以看到所有监控数据：</p>
<blockquote>
<p>dstat</p>
</blockquote>
<p><img src="https://img.sysgeek.cn/img/201510/a78b99451b2c_B15/10-useful-utilities-linux-10.jpg" alt=""><br>其可选参数非常多，常用的有：</p>
<p>dstat -c ： 监控CPU<br>dstat -cdl -D sda1 ：监控CPU详细信息<br>dstat -d ：监控磁盘</p>
<h3 id="saidar"><a href="#saidar" class="headerlink" title="saidar"></a>saidar</h3><p>saidar 是另一个 CLI 系统数据监控和统计工具，可提供有关磁盘、网络、存储和 SWAP 的监控信息。使用之前需先使用如下命令进行安装：</p>
<blockquote>
<p>sudo apt-get install saidar</p>
</blockquote>
<p>安装完成后可直接执行 saidar 进行输出，但我们通常使用带参数的命令生成带颜色输出：</p>
<blockquote>
<p>saidar -c</p>
</blockquote>
<p><img src="https://img.sysgeek.cn/img/201510/a78b99451b2c_B15/10-useful-utilities-linux-11.jpg" alt=""></p>
<h3 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h3><p>ss 全称 socket statistics，是一个可以替代 netstat 的网络连接查看工具。<br>直接执行 ss 即可进行查看：<br><img src="https://img.sysgeek.cn/img/201510/a78b99451b2c_B15/10-useful-utilities-linux-12.jpg" alt=""></p>
<p>常用参数有：<br>ss -A tcp ：指定查看协议<br>ss -ltp ：显示进程名称和 PID</p>
<h3 id="ccze"><a href="#ccze" class="headerlink" title="ccze"></a>ccze</h3><p>ccze 非常有用，它可以用不同颜色高亮日志，协助管理员进行区分和查看分析。使用之前需先使用如下命令进行安装：</p>
<blockquote>
<p>apt-get install ccze</p>
</blockquote>
<p>我们可以使用类似如下方式进行使用：</p>
<blockquote>
<p>tailf /var/log/syslog | ccze</p>
</blockquote>
<p><img src="https://img.sysgeek.cn/img/201510/a78b99451b2c_B15/10-useful-utilities-linux-13.jpg" alt=""></p>
<p>而使用 ccze -l 参数可以查看其支持的日志类型。<br><img src="https://img.sysgeek.cn/img/201510/a78b99451b2c_B15/10-useful-utilities-linux-14.jpg" alt=""></p>
<h3 id="sl"><a href="#sl" class="headerlink" title="sl"></a><a href="http://coolshell.cn/articles/7829.html" target="_blank" rel="external">sl</a></h3><p>sl是什么？ls？，呵呵，你会经常把ls 打成sl吗？如果是的话，这个东西可以让你娱乐一下，你会看到一辆火车呼啸而过~~，相当拉风。你可以使用sudo apt-get install sl 安装。<br><img src="http://coolshell.cn//wp-content/uploads/2012/07/sl.jpg" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><img src="http://cn.linux.vbird.org/image/title/title_03.png" alt=""><br><a href="http://cn.linux.vbird.org/" target="_blank" rel="external">鸟哥的Linux私房菜</a><br><img src="https://img.sysgeek.cn/img/201510/a78b99451b2c_B15/10-useful-utilities-linux-1.jpg" alt=""><br><a href="http://coolshell.cn/articles/5426.html" target="_blank" rel="external">简明 VIM 练级攻略</a><br><a href="https://www.sysgeek.cn/10-useful-utilities-linux/" target="_blank" rel="external">10大好用的Linux实用工具推荐</a><br><a href="http://coolshell.cn/articles/7829.html" target="_blank" rel="external">28个UNIX/LINUX的命令行神器</a><br><a href="http://wiki.ubuntu.org.cn/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97" target="_blank" rel="external">软件安装指南</a><br><a href="https://github.com/Bakumon/blog/issues/4" target="_blank" rel="external">Ubuntu 安装 Android Studio 的步骤</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/Google-Android-and-Linux.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Brief, Android is a Java System running on Linux&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Ubuntu" scheme="http://ipcreator.me/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu</title>
    <link href="http://ipcreator.me/2017/04/04/Program/Tools/Linux/ubuntu/"/>
    <id>http://ipcreator.me/2017/04/04/Program/Tools/Linux/ubuntu/</id>
    <published>2017-04-04T09:01:06.000Z</published>
    <updated>2017-04-05T05:12:09.842Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.ubuntu-china.cn/static/img/homepage/cn-home-desktop.jpg" alt=""></p>
<p>Ubuntu is an open source software platform that runs from the cloud, to the smartphone, to all your things</p>
<p>Ubuntu is the number one platform for containers</p>
<p>From LXD to Kubernetes to Docker, learn how we can help you run containers at scale on public, private, hybrid or bare metal clouds.</p>
<a id="more"></a>
<h2 id="Download-Ubuntu-Desktop"><a href="#Download-Ubuntu-Desktop" class="headerlink" title="Download Ubuntu Desktop"></a><a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="external">Download Ubuntu Desktop</a></h2><p>Download the latest LTS version of Ubuntu, for desktop PCs and laptops. LTS stands for long-term support – which means five years of free security and maintenance updates, guaranteed.</p>
<h2 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a><a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">VirtualBox</a></h2><p><img src="https://www.virtualbox.org/graphics/vboxlogodown.png" alt=""></p>
<p>VirtualBox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use.</p>
<h2 id="Hoxx-VPN-Proxy"><a href="#Hoxx-VPN-Proxy" class="headerlink" title="Hoxx VPN Proxy"></a><a href="https://addons.mozilla.org/en-Us/firefox/addon/hoxx-vpn-proxy/" target="_blank" rel="external">Hoxx VPN Proxy</a></h2><p>Hoxx VPN Proxy service to unblock blocked websites, hide your location and encrypt your connection. Completely free.<br><img src="https://addons.cdn.mozilla.net/user-media/addon_icons/680/680403-64.png?modified=1490620821" alt=""><br><img src="https://addons.cdn.mozilla.net/user-media/previews/thumbs/172/172334.png?modified=1458671759" alt=""></p>
<h2 id="Ubuntu-16-04安装sogou-拼音输入法"><a href="#Ubuntu-16-04安装sogou-拼音输入法" class="headerlink" title="Ubuntu 16.04安装sogou 拼音输入法"></a><a href="http://blog.csdn.net/ljheee/article/details/52966456" target="_blank" rel="external">Ubuntu 16.04安装sogou 拼音输入法</a></h2><p><a href="http://www.linuxdiyf.com/linux/22075.html" target="_blank" rel="external">Ubuntu 16.04 LTS安装sogou输入法详解</a></p>
<p>一、安装sogou输入法步骤：<br>1、首先到搜狗输入法官网下载搜狗输入法，下载的是个deb文件。<br>      搜狗输入法Linux版下载地址：<a href="http://pinyin.sogou.com/linux/?r=pinyin" target="_blank" rel="external">http://pinyin.sogou.com/linux/?r=pinyin</a><br>2、Ubuntu 16.04安装搜狗输入法命令如下：<br>      sudo apt-get install -f<br>      sudo dpkg -i sogoupinyin_2.0.0.0072_amd64.deb<br>      deb文件名，要和自己下载的版本一致。<br>3、安装完毕，设置语言选项<br>      到系统设置-&gt;语言支持（System-&gt;Language Support），将键盘输入法系统由默认的iBus设置为fcitx。如下图<br><img src="http://img.blog.csdn.net/20161029203358409?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>操作此步骤时，如果没有出现fcitx选项，说明你的机器还需要安装fcitx键盘输入法系统，直接看第二部分fcitx的安装。<br>4、注销，重新登陆。<br>      将键盘输入法系统改为fcitx后，一定要注销，而且操作顺序不能改。这时还不能马上使用，还要点击右上角的输入法图标，点击设置，进入设置界面，这个时候没有看到搜狗输入法，点击左下角的加号，然后注意先要去掉”只显示当前语言的输入法”前面那个勾，然后再搜索”sogo”，这个时候就看到sogo pinyin了，接着添加就可以了，然后就可以切换输入法了。<br><img src="http://img.blog.csdn.net/20161029203436760?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h2 id="Ubuntu-16-04-安装—-搜狗、Chrome、git、JDK、Eclipse"><a href="#Ubuntu-16-04-安装—-搜狗、Chrome、git、JDK、Eclipse" class="headerlink" title="Ubuntu 16.04 安装—-搜狗、Chrome、git、JDK、Eclipse"></a><a href="http://blog.csdn.net/ljheee/article/details/52967476" target="_blank" rel="external">Ubuntu 16.04 安装—-搜狗、Chrome、git、JDK、Eclipse</a></h2><p>在Ubuntu 16.04 安装软件时，最简单的方式就是在软件中心搜索，点击install自动安装，无其他操作。但很多软件在Ubuntu软件中心都没有，只能手动安装。<br>安装软件常用命令：<br>（1）sudo apt-get update<br>用于对当前系统的可用更新列表进行更新。这也是许多 Linux 发行版经常需要执行的操作，目的是随时获得最新的软件版本信息。<br>（2）sudo apt-get installsoftware          安装software软件<br>（3）sudo apt-get installxxxx                 用spt获取安装<br>（4）dpkg -i  &lt;.deb file name&gt;                手动下载并安装.deb软件包<br>（5）apt-get install -f                                 强制安装，自动补全依赖</p>
<p><a href="https://www.sysgeek.cn/chrome-45-beta-release-ubuntu-install/" target="_blank" rel="external">Chrome 45 Beta发布，Ubuntu如何进行安装</a><br><img src="https://img.sysgeek.cn/img/chrome-45-beta-release-ubuntu-install.jpg" alt=""></p>
<p>Ubuntu及Debian系列安装Chrome（Beta）</p>
<p>不论你使用的是 32 位还是 64 位 Ubuntu，都可以直接使用如下 4 条命令进行安装：</p>
<p>sudo sh -c ‘echo “deb <a href="http://dl.google.com/linux/chrome/deb/" target="_blank" rel="external">http://dl.google.com/linux/chrome/deb/</a> stable main” &gt;&gt; /etc/apt/sources.list.d/google.list’<br>wget -q -O - <a href="https://dl-ssl.google.com/linux/linux_signing_key.pub" target="_blank" rel="external">https://dl-ssl.google.com/linux/linux_signing_key.pub</a> | sudo apt-key add -<br>sudo apt-get update<br>sudo apt-get install google-chrome-beta<br>不使用时，可以使用如下命令进行卸载：</p>
<p>sudo apt-get remove google-chrome-beta</p>
<h2 id="VirtualBox中的Ubuntu没有权限访问共享文件夹sf-win7-to-ubuntu"><a href="#VirtualBox中的Ubuntu没有权限访问共享文件夹sf-win7-to-ubuntu" class="headerlink" title="VirtualBox中的Ubuntu没有权限访问共享文件夹sf_win7_to_ubuntu"></a><a href="http://www.crifan.com/can_not_access_share_folder_in_ubuntu_virtualbox/" target="_blank" rel="external">VirtualBox中的Ubuntu没有权限访问共享文件夹sf_win7_to_ubuntu</a></h2><blockquote>
<p>virtualbox的共享文件夹一般都挂载在/media下面，用ll查看会发现文件夹的所有者是root，所有组是vboxsf，所以文件管理去无法访问是正常的，解决方法是把你自己加入到vboxsf组里面。</p>
</blockquote>
<p>【解决过程】<br>1、把普通用户名加入到vboxsf之中。因为你的用户名不在vboxsf这个用户组。<br>下面添加boarmy到vboxsf这个用户组。<br>boarmy@boarmy-Ubuntu:~$ sudo adduser boarmy vboxsf<br>正在添加用户”boarmy”到”vboxsf”组…<br>正在将用户“boarmy”加入到“vboxsf”组中<br>完成。<br>crifan@crifan-Ubuntu:~$<br>2.再去用命令行操作：<br>boarmy@boarmy-Ubuntu:~$ ls /media/sf_bak<br>但是还是无法访问共享文件夹。<br>3、重启Ubuntu看看是否有用。<br>结果真正可以用上共享文件夹了：</p>
<h2 id="鸟哥的Linux私房菜"><a href="#鸟哥的Linux私房菜" class="headerlink" title="鸟哥的Linux私房菜"></a><a href="http://download.csdn.net/detail/wjx342529/9803037" target="_blank" rel="external">鸟哥的Linux私房菜</a></h2><p>《鸟哥的Linux私房菜:基础学习篇》是最具知名度的Linux入门书《鸟哥的Linux私房菜基础学习篇》的最新版，全面而详细地介绍了Linux操作系统。全书分为5个部分：第一部分着重说明Linux的起源及功能，如何规划和安装Linux主机；第二部分介绍Linux的文件系统、文件、目录与磁盘的管理；第三部分介绍文字模式接口shell和管理系统的好帮手shell脚本，另外还介绍了文字编辑器vi和vim的使用方法；第四部分介绍了对于系统安全非常重要的Linux账号的管理，以及主机系统与程序的管理，如查看进程、任务分配和作业管理；第五部分介绍了系统管理员(root)的管理事项，如了解系统运行状况、系统服务，针对登录文件进行解析，对系统进行备份以及核心的管理等。</p>
<h2 id="Ubuntu-安装-Android-Studio-的步骤"><a href="#Ubuntu-安装-Android-Studio-的步骤" class="headerlink" title="Ubuntu 安装 Android Studio 的步骤"></a><a href="https://github.com/Bakumon/blog/issues/4" target="_blank" rel="external">Ubuntu 安装 Android Studio 的步骤</a></h2><p>linux:环境变量设置.bashrc及相关<br>假定想添加的环境变量路径为：/opt/my-tools/Android-sdk/tools</p>
<p>1 进入用户的根目录<br>cd   $HOME  或 cd ~<br>2 然后打开.bashrc若不存在则新建.bashrc文件<br>vi   .bashrc<br>3 在.bashrc页面最后加上想要加的路径<br>export PATH=$PATH:/opt/my-tools/android-sdk/tools<br>4 最后执行<br>source ~/.bashrc<br>至此环境变量起作用了</p>
<h2 id="Ubuntu-x64安装Android-studio-全部步骤和问题解决"><a href="#Ubuntu-x64安装Android-studio-全部步骤和问题解决" class="headerlink" title="Ubuntu x64安装Android studio 全部步骤和问题解决"></a><a href="http://www.cnblogs.com/javacoding/p/5636512.html" target="_blank" rel="external">Ubuntu x64安装Android studio 全部步骤和问题解决</a></h2><p><a href="http://www.cnblogs.com/liunanjava/p/4810428.html" target="_blank" rel="external">设置SDK Manager国内源和国内代理</a><br>        打开SDK Managerl界面，可能会界面下文可能会一直卡在获取“dl-ssl.google.com”里面数据的状态  ，打开Tools–&gt;options，设置代理网址，网址可在之前的<a href="http://tools.android-studio.org/中找到。" target="_blank" rel="external">http://tools.android-studio.org/中找到。</a><br>        例如我选择的是ubuntu.buct.cn，那么在此填入服务器ubuntu.buct.cn，端口80，再勾选上下面的两项</p>
<p><img src="http://img0.ph.126.net/PxDLqA1WefLAWC7lMIvgkQ==/6619092984561493299.png?_=4810428" alt=""></p>
<p>安装时候，有时会提示可能还会出现在获取“dl-ssl.google.com”下来的 数据卡 住了很时间，可以这样修改，在Tools–&gt;Manage Add-on Sites–&gt;User Defined Sites里面，点击New添加国内的镜像XML文件，这里的XML文件我们可以从刚才的代理镜像源里面得到，</p>
<p><img src="http://img1.ph.126.net/ZupdYn02Hx-dWhjz3hknYg==/6608862028864914337.png?_=4810428" alt=""></p>
<p> 将源里面的所有目录下的xml文件添加到New里面，然后将Official Add-on Sites里面的Disable All，此时再更新就是我们添加的源里面的列表了</p>
<p> <img src="http://img0.ph.126.net/gBF7PKc11Wq5C8xKUXjCSQ==/6599272088448577647.png?_=4810428" alt=""></p>
<p><a href="http://www.cnblogs.com/yymn/p/5698623.html" target="_blank" rel="external">嵌入式 Linux下永久生效环境变量bashrc</a></p>
<h3 id="1）-bashrc文件"><a href="#1）-bashrc文件" class="headerlink" title="1） .bashrc文件"></a>1） .bashrc文件</h3><pre><code>在linux系统普通用户目录（cd /home/xxx）或root用户目录（cd /root）下，用指令ls -al可以看到4个隐藏文件，

.bash_history   记录之前输入的命令

.bash_logout    当你退出时执行的命令

.bash_profile    当你登入shell时执行

.bashrc             当你登入shell时执行

  请注意后两个的区别：&apos;.bash_profile&apos;只在会话开始时被读取一次，而&apos;.bashrc&apos;则每次打开新的终端时，都要被读取。

  这些文件是每一位用户对终端功能和属性设置，修改.bashrc可以改变环境变量PATH、别名alias和提示符。具体如何修改会在下面做介绍。

  除了可以修改用户目录下的.bashrc文件外，还可以修改如“/etc/profile”文件、“/etc/bashrc”文件及目录“/etc /profile.d”下的文件。但是修改/etc路径下的配置文件将会应用到整个系统，属于系统级的配置，而修改用户目录下的.bashrc则只是限制在用户应用上，属于用户级设置。两者在应用范围上有所区别，建议如需修改的话，修改用户目录下的.bashrc，即无需root权限，也不会影响其他用户。
</code></pre><p><a href="http://blog.csdn.net/chenchong08/article/details/7833242" target="_blank" rel="external">Linux中profile、bashrc、bash_profile之间的区别和联系</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.ubuntu.com/" target="_blank" rel="external">Ubuntu</a><br><a href="http://download.pchome.net/system/sysenhance/download-10841.html" target="_blank" rel="external">VirtualBox官方中文版5.1.18.114002</a><br><a href="http://download.csdn.net/detail/zl199307/9612475" target="_blank" rel="external">think in java4 中文版</a><br><a href="http://download.csdn.net/detail/tangzy09/4305467" target="_blank" rel="external">think in java 4 English</a><br><a href="http://download.csdn.net/detail/foxmails/309302" target="_blank" rel="external">张孝祥Java就业培训教程pdf版+源代码</a><br><a href="http://download.csdn.net/detail/wutianke/8388621" target="_blank" rel="external">Ubuntu官方图书（第七版）</a><br><a href="http://www.xxzs.tv/newsdetail/17" target="_blank" rel="external">【教程】如何开启VT（CPU虚拟化）</a><br><a href="https://www.sysgeek.cn/15-things-to-do-after-installing-ubuntu-16-04-lts/" target="_blank" rel="external">Ubuntu 16.04 LTS安装好之后需要做的15件事</a><br><a href="https://www.sysgeek.cn/install-numix-in-ubuntu/" target="_blank" rel="external">如何在Ubuntu中安装Numix主题和图标</a><br><a href="https://www.sysgeek.cn/additional-icon-packs-linux/" target="_blank" rel="external">[推荐]适用于Linux的5款最佳桌面图标集</a><br><a href="https://www.sysgeek.cn/simplescreenrecorder-screen-recording-ubuntu/" target="_blank" rel="external">如何使用SimpleScreenRecorder进行Ubuntu屏幕录制</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.ubuntu-china.cn/static/img/homepage/cn-home-desktop.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu is an open source software platform that runs from the cloud, to the smartphone, to all your things&lt;/p&gt;
&lt;p&gt;Ubuntu is the number one platform for containers&lt;/p&gt;
&lt;p&gt;From LXD to Kubernetes to Docker, learn how we can help you run containers at scale on public, private, hybrid or bare metal clouds.&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="Ubuntu" scheme="http://ipcreator.me/tags/Ubuntu/"/>
    
      <category term="VmWare" scheme="http://ipcreator.me/tags/VmWare/"/>
    
      <category term="VirtualBox" scheme="http://ipcreator.me/tags/VirtualBox/"/>
    
  </entry>
  
  <entry>
    <title>Android Gradle</title>
    <link href="http://ipcreator.me/2017/04/04/Program/Tools/Gradle/gradle-and-android/"/>
    <id>http://ipcreator.me/2017/04/04/Program/Tools/Gradle/gradle-and-android/</id>
    <published>2017-04-04T08:29:06.000Z</published>
    <updated>2017-04-05T14:32:55.957Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gss0.baidu.com/7LsWdDW5_xN3otqbppnN2DJv/doc/pic/item/0bd162d9f2d3572c49ef6f258313632762d0c33e.jpg" alt=""></p>
<blockquote>
<p>Optimal Portfolio.</p>
</blockquote>
<a id="more"></a>
<p>当问题你能解决而别人不能的时候，就是你“鹤立鸡群”的开始！</p>
<p>在互联网这个时代，最重要的是懂得如何站在别人的肩膀上。</p>
<p>所有知识都是先介绍、讲解说明，然后才会讲使用，让大家知其然知其所以然。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://yuedu.baidu.com/ebook/14a722970740be1e640e9a3e###" target="_blank" rel="external">Android Gradle权威指南</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gss0.baidu.com/7LsWdDW5_xN3otqbppnN2DJv/doc/pic/item/0bd162d9f2d3572c49ef6f258313632762d0c33e.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Optimal Portfolio.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Gradle" scheme="http://ipcreator.me/tags/Gradle/"/>
    
      <category term="Tool" scheme="http://ipcreator.me/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>Easy Permissions</title>
    <link href="http://ipcreator.me/2017/04/04/Program/Android/3rdLib/easy-permissions/"/>
    <id>http://ipcreator.me/2017/04/04/Program/Android/3rdLib/easy-permissions/</id>
    <published>2017-04-04T02:45:06.000Z</published>
    <updated>2017-04-04T02:45:15.951Z</updated>
    
    <content type="html"><![CDATA[<p>EasyPermissions is a wrapper library to simplify basic system permissions logic when targeting Android M or higher.</p>
<a id="more"></a>
<h1 id="Easy-Permissions"><a href="#Easy-Permissions" class="headerlink" title="Easy Permissions"></a><a href="https://github.com/googlesamples/easypermissions" target="_blank" rel="external">Easy Permissions</a></h1><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>EasyPermissions is installed by adding the following dependency to your <code>build.gradle</code> file:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'pub.devrel:easypermissions:0.3.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h3><p>To begin using EasyPermissions, have your <code>Activity</code> (or <code>Fragment</code>) override the <code>onRequestPermissionsResult</code> method:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line"></div><div class="line">        <span class="comment">// Forward results to EasyPermissions</span></div><div class="line">        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Request-Permissions"><a href="#Request-Permissions" class="headerlink" title="Request Permissions"></a>Request Permissions</h3><p>The example below shows how to request permissions for a method that requires both<br><code>CAMERA</code> and <code>CHANGE_WIFI_STATE</code> permissions. There are a few things to note:</p>
<ul>
<li>Using <code>EasyPermissions#hasPermissions(...)</code> to check if the app already has the<br>required permissions. This method can take any number of permissions as its final<br>argument.</li>
<li>Requesting permissions with <code>EasyPermissions#requestPermissions</code>. This method<br>will request the system permissions and show the rationale string provided if<br>necessary. The request code provided should be unique to this request, and the method<br>can take any number of permissions as its final argument.</li>
<li>Use of the <code>AfterPermissionGranted</code> annotation. This is optional, but provided for<br>convenience. If all of the permissions in a given request are granted, any methods<br>annotated with the proper request code will be executed. This is to simplify the common<br>flow of needing to run the requesting method after all of its permissions have been granted.<br>This can also be achieved by adding logic on the <code>onPermissionsGranted</code> callback.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@AfterPermissionGranted</span>(RC_CAMERA_AND_WIFI)</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">methodRequiresTwoPermission</span><span class="params">()</span> </span>&#123;</div><div class="line">    String[] perms = &#123;Manifest.permission.CAMERA, Manifest.permission.CHANGE_WIFI_STATE&#125;;</div><div class="line">    <span class="keyword">if</span> (EasyPermissions.hasPermissions(<span class="keyword">this</span>, perms)) &#123;</div><div class="line">        <span class="comment">// Already have permission, do the thing</span></div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Do not have permissions, request them now</span></div><div class="line">        EasyPermissions.requestPermissions(<span class="keyword">this</span>, getString(R.string.camera_and_wifi_rationale),</div><div class="line">                RC_CAMERA_AND_WIFI, perms);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Optionally, for a finer control, you can have your <code>Activity</code> / <code>Fragment</code> implement<br>the <code>PermissionCallbacks</code> interface.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">EasyPermissions</span>.<span class="title">PermissionCallbacks</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line"></div><div class="line">        <span class="comment">// Forward results to EasyPermissions</span></div><div class="line">        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPermissionsGranted</span><span class="params">(<span class="keyword">int</span> requestCode, List&lt;String&gt; list)</span> </span>&#123;</div><div class="line">        <span class="comment">// Some permissions have been granted</span></div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPermissionsDenied</span><span class="params">(<span class="keyword">int</span> requestCode, List&lt;String&gt; list)</span> </span>&#123;</div><div class="line">        <span class="comment">// Some permissions have been denied</span></div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Required-Permissions"><a href="#Required-Permissions" class="headerlink" title="Required Permissions"></a>Required Permissions</h3><p>In some cases your app will not function properly without certain permissions. If the user<br>denies these permissions with the “Never Ask Again” option, you will be unable to request<br>these permissions from the user and they must be changed in app settings. You can use the<br>method <code>EasyPermissions.somePermissionPermanentlyDenied(...)</code> to display a dialog to the<br>user in this situation and direct them to the system setting screen for your app:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPermissionsDenied</span><span class="params">(<span class="keyword">int</span> requestCode, List&lt;String&gt; perms)</span> </span>&#123;</div><div class="line">    Log.d(TAG, <span class="string">"onPermissionsDenied:"</span> + requestCode + <span class="string">":"</span> + perms.size());</div><div class="line"></div><div class="line">    <span class="comment">// (Optional) Check whether the user denied any permissions and checked "NEVER ASK AGAIN."</span></div><div class="line">    <span class="comment">// This will display a dialog directing them to enable the permission in app settings.</span></div><div class="line">    <span class="keyword">if</span> (EasyPermissions.somePermissionPermanentlyDenied(<span class="keyword">this</span>, perms)) &#123;</div><div class="line">        <span class="keyword">new</span> AppSettingsDialog.Builder(<span class="keyword">this</span>).build().show();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (requestCode == AppSettingsDialog.DEFAULT_SETTINGS_REQ_CODE) &#123;</div><div class="line">        <span class="comment">// Do something after user returned from app settings screen, like showing a Toast.</span></div><div class="line">        Toast.makeText(<span class="keyword">this</span>, R.string.returned_from_app_settings_to_activity, Toast.LENGTH_SHORT)</div><div class="line">                .show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;EasyPermissions is a wrapper library to simplify basic system permissions logic when targeting Android M or higher.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Easy Permissions" scheme="http://ipcreator.me/tags/Easy-Permissions/"/>
    
  </entry>
  
  <entry>
    <title>Permissions Dispatcher</title>
    <link href="http://ipcreator.me/2017/04/04/Program/Android/3rdLib/permissions-dispatcher/"/>
    <id>http://ipcreator.me/2017/04/04/Program/Android/3rdLib/permissions-dispatcher/</id>
    <published>2017-04-04T02:26:06.000Z</published>
    <updated>2017-04-04T02:27:00.739Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/hotchemi/PermissionsDispatcher/master/art/logo.png" alt=""></p>
<p>Permissions Dispatcher provides a simple annotation-based API to handle runtime permissions in Android Marshmallow, 100% reflection-free.</p>
<p>This library lifts the burden that comes with writing a bunch of check statements whether a permission has been granted or not from you, in order to keep your code clean and safe.</p>
 <a id="more"></a>
<h1 id="Permissions-Dispatcher"><a href="#Permissions-Dispatcher" class="headerlink" title="Permissions Dispatcher"></a>Permissions Dispatcher</h1><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p> Here’s a minimum example, in which we register a <code>MainActivity</code> which requires <code>Manifest.permission.CAMERA</code>.</p>
<h3 id="0-Prepare-AndroidManifest"><a href="#0-Prepare-AndroidManifest" class="headerlink" title="0. Prepare AndroidManifest"></a>0. Prepare AndroidManifest</h3><p> Add the following line to <code>AndroidManifest.xml</code>:</p>
<p> <code>&lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;</code></p>
<h3 id="1-Attach-annotations"><a href="#1-Attach-annotations" class="headerlink" title="1. Attach annotations"></a>1. Attach annotations</h3><p> PermissionsDispatcher introduces only a few annotations, keeping its general API concise:</p>
<blockquote>
<p>NOTE: Annotated methods must not be <code>private</code>.</p>
</blockquote>
<table>
<thead>
<tr>
<th>Annotation</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@RuntimePermissions</code></td>
<td><strong>✓</strong></td>
<td>Register an <code>Activity</code> or <code>Fragment</code> to handle permissions</td>
</tr>
<tr>
<td><code>@NeedsPermission</code></td>
<td><strong>✓</strong></td>
<td>Annotate a method which performs the action that requires one or more permissions</td>
</tr>
<tr>
<td><code>@OnShowRationale</code></td>
<td></td>
<td>Annotate a method which explains why the permission/s is/are needed. It passes in a <code>PermissionRequest</code> object which can be used to continue or abort the current permission request upon user input</td>
</tr>
<tr>
<td><code>@OnPermissionDenied</code></td>
<td></td>
<td>Annotate a method which is invoked if the user doesn’t grant the permissions</td>
</tr>
<tr>
<td><code>@OnNeverAskAgain</code></td>
<td></td>
<td>Annotate a method which is invoked if the user chose to have the device “never ask again” about a permission</td>
</tr>
</tbody>
</table>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RuntimePermissions</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NeedsPermission</span>(Manifest.permission.CAMERA)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showCamera</span><span class="params">()</span> </span>&#123;</div><div class="line">        getSupportFragmentManager().beginTransaction()</div><div class="line">                .replace(R.id.sample_content_fragment, CameraPreviewFragment.newInstance())</div><div class="line">                .addToBackStack(<span class="string">"camera"</span>)</div><div class="line">                .commitAllowingStateLoss();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnShowRationale</span>(Manifest.permission.CAMERA)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showRationaleForCamera</span><span class="params">(<span class="keyword">final</span> PermissionRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>)</div><div class="line">            .setMessage(R.string.permission_camera_rationale)</div><div class="line">            .setPositiveButton(R.string.button_allow, (dialog, button) -&gt; request.proceed())</div><div class="line">            .setNegativeButton(R.string.button_deny, (dialog, button) -&gt; request.cancel())</div><div class="line">            .show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnPermissionDenied</span>(Manifest.permission.CAMERA)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showDeniedForCamera</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, R.string.permission_camera_denied, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnNeverAskAgain</span>(Manifest.permission.CAMERA)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showNeverAskForCamera</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, R.string.permission_camera_neverask, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-Delegate-to-generated-class"><a href="#2-Delegate-to-generated-class" class="headerlink" title="2. Delegate to generated class"></a>2. Delegate to generated class</h3><p> Upon compilation, PermissionsDispatcher generates a class for <code>MainActivityPermissionsDispatcher</code>([Activity Name] + PermissionsDispatcher), which you can use to safely access these permission-protected methods.</p>
<p> The only step you have to do is delegating the work to this helper class:</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    findViewById(R.id.button_camera).setOnClickListener(v -&gt; &#123;</div><div class="line">      <span class="comment">// <span class="doctag">NOTE:</span> delegate the permission handling to generated method</span></div><div class="line">      MainActivityPermissionsDispatcher.showCameraWithCheck(<span class="keyword">this</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    <span class="comment">// <span class="doctag">NOTE:</span> delegate the permission handling to generated method</span></div><div class="line">    MainActivityPermissionsDispatcher.onRequestPermissionsResult(<span class="keyword">this</span>, requestCode, grantResults);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> Check out the <a href="https://github.com/hotchemi/PermissionsDispatcher/tree/master/sample" target="_blank" rel="external">sample</a> and <a href="https://github.com/hotchemi/PermissionsDispatcher/blob/master/art/MainActivityPermissionsDispatcher.java" target="_blank" rel="external">generated class</a> for more details.</p>
<h2 id="Getting-Special-Permissions"><a href="#Getting-Special-Permissions" class="headerlink" title="Getting Special Permissions"></a>Getting Special Permissions</h2><p> PermissionsDispatcher takes care of special permissions <code>Manifest.permission.SYSTEM_ALERT_WINDOW</code> and <code>Manifest.permission.WRITE_SETTINGS</code>.</p>
<p> The following sample is to grant <code>SYSTEM_ALERT_WINDOW</code>.</p>
<h3 id="0-Prepare-AndroidManifest-1"><a href="#0-Prepare-AndroidManifest-1" class="headerlink" title="0. Prepare AndroidManifest"></a>0. Prepare AndroidManifest</h3><p> Add the following line to <code>AndroidManifest.xml</code>:</p>
<p> <code>&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;</code></p>
<h3 id="1-Attach-annotations-1"><a href="#1-Attach-annotations-1" class="headerlink" title="1. Attach annotations"></a>1. Attach annotations</h3><p> It’s the same as other permissions:</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RuntimePermissions</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NeedsPermission</span>(Manifest.permission.SYSTEM_ALERT_WINDOW)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">systemAlertWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnShowRationale</span>(Manifest.permission.SYSTEM_ALERT_WINDOW)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">systemAlertWindowOnShowRationale</span><span class="params">(<span class="keyword">final</span> PermissionRequest request)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnPermissionDenied</span>(Manifest.permission.SYSTEM_ALERT_WINDOW)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">systemAlertWindowOnPermissionDenied</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnNeverAskAgain</span>(Manifest.permission.SYSTEM_ALERT_WINDOW)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">systemAlertWindowOnNeverAskAgain</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-Delegate-to-generated-class-1"><a href="#2-Delegate-to-generated-class-1" class="headerlink" title="2. Delegate to generated class"></a>2. Delegate to generated class</h3><p> Unlike other permissions, special permissions require to call the delegation method at <code>onActivityResult</code>:</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    findViewById(R.id.button_system_alert_window).setOnClickListener(v -&gt; &#123;</div><div class="line">      <span class="comment">// <span class="doctag">NOTE:</span> delegate the permission handling to generated method</span></div><div class="line">      MainActivityPermissionsDispatcher.systemAlertWindowWithCheck(<span class="keyword">this</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    MainActivityPermissionsDispatcher.onActivityResult(<span class="keyword">this</span>, requestCode);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="maxSdkVersion"><a href="#maxSdkVersion" class="headerlink" title="maxSdkVersion"></a>maxSdkVersion</h2><p> <a href="https://developer.android.com/guide/topics/manifest/uses-permission-element.html" target="_blank" rel="external">\<uses-permission\></uses-permission\></a> has an attribute call <code>maxSdkVersion</code>. PermissionsDispatcher support the feature as well.</p>
<p> The following sample is for declaring <code>Manifest.permisison.WRITE_EXTERNAL_STORAGE</code> up to API level 18.</p>
<h3 id="0-AndroidManifest"><a href="#0-AndroidManifest" class="headerlink" title="0. AndroidManifest"></a>0. AndroidManifest</h3><p> Declare the permission with <code>maxSdkVersion</code> attribute</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span></span></div><div class="line">     <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span></div><div class="line">     <span class="attr">android:maxSdkVersion</span>=<span class="string">"18"</span> /&gt;</div></pre></td></tr></table></figure>
<h3 id="1-Attach-annotations-with-maxSdkVersion"><a href="#1-Attach-annotations-with-maxSdkVersion" class="headerlink" title="1. Attach annotations with maxSdkVersion"></a>1. Attach annotations with <code>maxSdkVersion</code></h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RuntimePermissions</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NeedsPermission</span>(value = Manifest.permission.WRITE_EXTERNAL_STORAGE, maxSdkVersion = <span class="number">18</span>)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getStorage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><ul>
<li>PermissionsDispatcher depends on the <code>support-v4</code> library by default, in order to be able to use some permission compat classes.</li>
<li>You can use this library with JDK 1.6 or up, but we test library’s behaviour on the JDK 1.8 because it has been becoming the default of Android development.</li>
<li><p>PermissionsDispatcher bundles ProGuard rules in its aar. No extra settings are required.</p>
<h3 id="Fragment-Support"><a href="#Fragment-Support" class="headerlink" title="Fragment Support"></a>Fragment Support</h3><p>PermissionsDispatcher is supported on <strong>API levels 4 and up</strong>, with which you get support for annotating <code>android.app.Activity</code> and <code>android.support.v4.app.Fragment</code> sub-classes out of the box.</p>
<p>In case you rely on <code>android.app.Fragment</code> in your app, you can use these with PermissionsDispatcher as well!</p>
<p>Simply add a dependency on the <code>support-v13</code> library alongside PermissionsDispatcher in your project, and it will enable support for native fragments.</p>
<h3 id="For-AndroidAnnotations-users"><a href="#For-AndroidAnnotations-users" class="headerlink" title="For AndroidAnnotations users"></a>For AndroidAnnotations users</h3><p>If you use <a href="http://androidannotations.org/" target="_blank" rel="external">AndroidAnnotations</a>, you need to add <a href="https://github.com/AleksanderMielczarek/AndroidAnnotationsPermissionsDispatcherPlugin" target="_blank" rel="external">AndroidAnnotationsPermissionsDispatcherPlugin</a> to your dependencies so PermissionsDispatcher’s looks for AA’s subclasses (your project won’t compile otherwise).</p>
<h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p>To add it to your project, include the following in your <strong>app module</strong> <code>build.gradle</code> file:</p>
<p><code>${latest.version}</code> is <a href="https://bintray.com/hotchemi/maven/permissionsdispatcher/_latestVersion" target="_blank" rel="external"><img src="https://api.bintray.com/packages/hotchemi/maven/permissionsdispatcher/images/download.svg" alt="Download"></a></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">  compile <span class="string">'com.github.hotchemi:permissionsdispatcher:$&#123;latest.version&#125;'</span></div><div class="line">  annotationProcessor <span class="string">'com.github.hotchemi:permissionsdispatcher-processor:$&#123;latest.version&#125;'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Snapshots of the development version are available in <a href="https://oss.jfrog.org/oss-snapshot-local/" target="_blank" rel="external">JFrog’s snapshots repository</a>.<br>Add the repo below to download <code>SNAPSHOT</code> releases.</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">  jcenter()</div><div class="line">  maven &#123; url <span class="string">'http://oss.jfrog.org/artifactory/oss-snapshot-local/'</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hotchemi/PermissionsDispatcher/master/art/logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Permissions Dispatcher provides a simple annotation-based API to handle runtime permissions in Android Marshmallow, 100% reflection-free.&lt;/p&gt;
&lt;p&gt;This library lifts the burden that comes with writing a bunch of check statements whether a permission has been granted or not from you, in order to keep your code clean and safe.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Permissions Dispatcher" scheme="http://ipcreator.me/tags/Permissions-Dispatcher/"/>
    
  </entry>
  
  <entry>
    <title>Persuing Your Personal Value</title>
    <link href="http://ipcreator.me/2017/04/04/MyView/Share/persuing-personal-value/"/>
    <id>http://ipcreator.me/2017/04/04/MyView/Share/persuing-personal-value/</id>
    <published>2017-04-04T01:02:06.000Z</published>
    <updated>2017-04-04T01:02:59.577Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20170403060918030" alt=""></p>
<p>公司主要以什么样的技术来生产产品？技术在最终产品中占比多大？你又在技术中占有什么样的位置？对于技术的要求是密集性的还是创造性的？产品在当前市场中的地位如何？主要的竞争力来自规模效应？智力效应？还是技术效应？这个市场是在变大还是变小？资源在更多的投入还是撤离这个市场？与这个市场有关的行业在做什么？……这是为了从高、中、低的多个维度来验证自己对于当前价值网的理解，从而选定方向，投入精力。</p>
 <a id="more"></a>
<h1 id="12年技术老兵和你谈谈如何追求个人价值"><a href="#12年技术老兵和你谈谈如何追求个人价值" class="headerlink" title="12年技术老兵和你谈谈如何追求个人价值"></a><a href="http://geek.csdn.net/news/detail/190488" target="_blank" rel="external">12年技术老兵和你谈谈如何追求个人价值</a></h1><p> 刘立兼，云贝网络首席架构师，在3年时间内，主导开发了“服务治理平台”与“综合数据基盘“两大底层设施，并在此基础上孵化了公司的5个产品线，12款产品。同时也是其中3款产品的创始人。</p>
<p>人的时间和精力是有限的，我们做出选择的时候也意味着放弃了另一部分选项。所以我们必须足够清楚，这样的选择有多大的价值，才行心无旁骛地全身心投入去中。</p>
<p><img src="http://img.blog.csdn.net/20170403060147925" alt=""><br>图1：我做外包时对价值的理解</p>
<p><img src="http://img.blog.csdn.net/20170403060715546" alt=""><br>图2：做了设计后对于需求分析产生了想法</p>
<p><img src="http://img.blog.csdn.net/20170403060748513" alt=""><br>图3：如愿以偿地做了需求分析的工作</p>
<p><img src="http://img.blog.csdn.net/20170403060819154" alt=""><br>图4：小项目让我经历了软件工程的各个阶段</p>
<p><img src="http://img.blog.csdn.net/20170403060848734" alt=""><br>图5：仅有软件工程能力真的能解决问题吗</p>
<p><img src="http://img.blog.csdn.net/20170403060946781" alt=""><br>图6：我希望自己的价值不仅限于产业的某一环中</p>
<p><img src="http://img.blog.csdn.net/20170403062047724" alt=""><br>图7：我参与了多个技术环节但最终产品未能获得足够的市场价值</p>
<p><img src="http://img.blog.csdn.net/20170403061023829" alt=""><br>图8：我希望进入一个技术的价值空间足够的环境</p>
<h2 id="凭感觉造成的问题：依赖关联性"><a href="#凭感觉造成的问题：依赖关联性" class="headerlink" title="凭感觉造成的问题：依赖关联性"></a>凭感觉造成的问题：依赖关联性</h2><p>仅仅凭感觉发展个人价值话，就会自然而然地依赖技能的关联性，比如：</p>
<h3 id="软件工程的关联性"><a href="#软件工程的关联性" class="headerlink" title="软件工程的关联性"></a>软件工程的关联性</h3><p>从编码到设计<br>从设计到架构<br>从架构到方案<br>从方案到需求</p>
<h3 id="生产环节的关联性"><a href="#生产环节的关联性" class="headerlink" title="生产环节的关联性"></a>生产环节的关联性</h3><p>从技术到售前<br>从技术到售后<br>从技术到管理<br>从技术到质监</p>
<h3 id="产业链条的关联性"><a href="#产业链条的关联性" class="headerlink" title="产业链条的关联性"></a>产业链条的关联性</h3><p>从视频采集系统到图像传输系统<br>从图像传输系统到显示播放系统<br>从显示播放系统到录像控制系统<br>从录像控制系统到存储回播系统</p>
<h3 id="技术领域的关联性"><a href="#技术领域的关联性" class="headerlink" title="技术领域的关联性"></a>技术领域的关联性</h3><p>从关系型数据库到NoSQL<br>从磁盘数据库到内存数据库<br>从一般数据库到图形数据库<br>从数据单库到分布式数据系统</p>
<p>这其实是一种“直觉式”的发展方式。踩了第一级台阶看到第二级台阶，踩了第二级台阶看到第三级台阶，每踩一次确实肯定上升了一些，但是楼梯尽头究竟是什么，很难确定。同时这也是一种“机缘式”的发展方式。因为每一次向相关方向拓展自己的技能，都需要外部环境的支持。假设：</p>
<p>如果是外包公司，设计来自于发包方，那就很难去做设计的工作<br>如果公司销售的是标准线上产品，那就没有什么售前的需求。<br>如果公司仅生产视频采集设备，集成部署由其他公司来做，那就接触不到图像传输。</p>
<p>如果关系型数据库已经能满足业务和性能需求，那就不会有使用NoSQL的动力。</p>
<p>“直觉式”+“机缘式”=“随波逐流式”，凭着能看到的东西加感觉走，外部环境允许就走下去，不允许就继续找感觉。这样的行为很难说是在“追求”个人价值的发展，追求可是一个主动的词汇。</p>
<h2 id="那要如何主动地追求个人价值发展呢？"><a href="#那要如何主动地追求个人价值发展呢？" class="headerlink" title="那要如何主动地追求个人价值发展呢？"></a>那要如何主动地追求个人价值发展呢？</h2><h3 id="看清价值网是第一步"><a href="#看清价值网是第一步" class="headerlink" title="看清价值网是第一步"></a>看清价值网是第一步</h3><p><img src="http://img.blog.csdn.net/20170403161910060" alt=""><br>图9：价值大约会在4个层次中流动</p>
<p><img src="http://img.blog.csdn.net/20170403061402503" alt=""><br>图10：在价值网中我是如此的渺小</p>
<p><img src="http://img.blog.csdn.net/20170403061436269" alt=""><br>图11：总算提升了一些个人价值的占比</p>
<p><img src="http://img.blog.csdn.net/20170403061503675" alt=""><br>图12：我的个人价值总算超出了我个人的直接产值</p>
<p><img src="http://img.blog.csdn.net/20170403061531556" alt=""><br>图13：合同单价不再束缚我但市场竞争也非儿戏</p>
<p><img src="http://img.blog.csdn.net/20170403061613488" alt=""><br>图14：产值巨大的行业前景应该不错</p>
<p><img src="http://img.blog.csdn.net/20170403061649058" alt=""><br>图15：我给公司提供了通用的应用开发的底层支持</p>
<p><img src="http://img.blog.csdn.net/20170403061719855" alt=""><br>图16：数据的基础能力对于一家数据公司是非常重要的</p>
<p><img src="http://img.blog.csdn.net/20170403061754247" alt=""><br>图17：这两种基础能力支撑起公司几百个数据服务</p>
<p><img src="http://img.blog.csdn.net/20170403061834364" alt=""><br>图18：基础能力也支持了对外暴露接口的需要</p>
<p><img src="http://img.blog.csdn.net/20170403061906639" alt=""><br>图19：零售大数据的成本结构与之前的行业不同</p>
<p><img src="http://img.blog.csdn.net/20170403061953312" alt=""><br>图20：我的价值占比较大但获取市场回报方面仍然有很多路要走</p>
<p><img src="http://img.blog.csdn.net/20170403062047724" alt=""><br>图21：仅有一方面的能力会使你离价值来源太远</p>
<p><img src="http://img.blog.csdn.net/20170403062117756" alt=""><br>图22：利用规模化手段把自己的价值扩散出去</p>
<h2 id="用大牛来验证个人价值发展的推演"><a href="#用大牛来验证个人价值发展的推演" class="headerlink" title="用大牛来验证个人价值发展的推演"></a>用大牛来验证个人价值发展的推演</h2><p>网上常有“如何成为XX大牛”的问题。如果这个XX是“屠龙之术”的话，那没有人会觉得那是大牛，只会是笑话。大牛之所以是大牛，因为他解决的问题具有很大的市场价值，且他对于问题的解决有举足轻重的作用。</p>
<p>从价值网的角度来看，大牛需要潜力巨大的价值网的上游环境，这样才有足够的表现空间。想象一下：“某大牛凭一己之力完成了一个价值1万的合同”。嗯，好惨。同时他也需要有可以扩散个人价值的下游环境，这样才能成倍体现出他的能力价值。想象一下：“某大牛作为技术组中的一员，和其他100位同事一起，完成了市值100万的产品”。嗯，好像也不怎么牛。当然他自己的能力储备是不可或缺的。</p>
<p>我们还可以看看一般描述大牛的标准句式，大概是这样的：面对（巨大的市场价值或问题），（大牛某某某）带领（各类组织成员-凸显影响力），耗时（具有竞争力的时长-凸显能力），完成了（具有极高难度/价值的产品），获得了（巨大的上游回报）。这个句式已经充分表达了当价值网上游的潜力，与价值网下游的关键位置，以及个人的能力储备这三者恰到好处地结合在一起之后，体现出的巨大个人价值。</p>
<p>用现实的例子举例的话，可以说说大名鼎鼎的张小龙和微信。对于价值网上游，微信服务于一个8亿用户的市场，且几乎实现了垄断，获取到了整个市场的价值。对于下游，张小龙在腾讯内部的影响力横跨运营，销售，管理，技术等多个部门。并在微信的所有生产环节都具有最终决策权。当然这一切的成果和他在Foxmail/QQMail的能力积累有直接的关系。按照价值网的模型，张小龙几乎在每一个要点都达到了最大化。</p>
<h3 id="价值网上游"><a href="#价值网上游" class="headerlink" title="价值网上游"></a>价值网上游</h3><p>直接从市场获得价值<br>市场非常非常巨大<br>几乎占领整个市场</p>
<h3 id="价值网下游"><a href="#价值网下游" class="headerlink" title="价值网下游"></a>价值网下游</h3><p>最终产品拥有个人标签<br>拥有整个产生过程的决策权<br>在组织内部是绝对的权威，影响力横跨多个部门<br>在组织外部也是众多产品技术人员学习的对象</p>
<h3 id="能力储备"><a href="#能力储备" class="headerlink" title="能力储备"></a>能力储备</h3><p>具备ToC产品的完整经验<br>具备带领腾讯团队的完整经验</p>
<p><img src="http://img.blog.csdn.net/20170403062244488" alt=""><br>图23：梦幻般的个人价值</p>
<h2 id="推演不同行业的个人价值的发展"><a href="#推演不同行业的个人价值的发展" class="headerlink" title="推演不同行业的个人价值的发展"></a>推演不同行业的个人价值的发展</h2><p>如果大牛的例子让你更加认可价值网模型的话，我们现在就来更进一步，基于具体的行业来推演看看个人价值的突破方向：</p>
<h3 id="1-如果你是处于项目外包行业"><a href="#1-如果你是处于项目外包行业" class="headerlink" title="1. 如果你是处于项目外包行业"></a>1. 如果你是处于项目外包行业</h3><p>a) 对于价值上游，你可以尝试突破单份合同的价值。如果你拥有良好的商务、需求分析以及方案设计能力，那么你可以给多个项目提供上游价值。这样的话你的个人价值就可以突破单个合同的上限。</p>
<p>b) 对于价值下游，你可以想办法提升内部组织的开发效率。因为价值上游受限，外包公司为了生存强烈地需要生产效率。如果你能掌握更具效率的开发方式，并且成功推广，那么你的个人价值就可以规模化地成倍增长。</p>
<p>c) 对于价值网本身，你可以离开这个行业。因为你的价值在签订项目合同的那一刻已经被划定了红线，在这个价值网内你永远无法逾越这个规则。</p>
<h3 id="2-如果你处于长产业链的行业"><a href="#2-如果你处于长产业链的行业" class="headerlink" title="2. 如果你处于长产业链的行业"></a>2. 如果你处于长产业链的行业</h3><p>a) 对于价值上游，你可能需要寻找一家探索性业务仍占有相当比例的企业。一般产业链较长的行业，意味着行业的格局相对确定，那么市场和运维的价值会多于技术研发。探索性业务的不确定性才能给技术更大的价值空间。</p>
<p>b) 对于价值下游，你需要尽量参与链条上不同环节的技术工作。因为长产业链不太可能在不同环节采用通用的底层技术或通用架构，参与多个上下关联的技术环节是在此类行业中提高技术影响力的少数手段。技术的影响力的扩大就是个人价值的扩大。</p>
<h3 id="3-如果你处在短产业链的行业"><a href="#3-如果你处在短产业链的行业" class="headerlink" title="3. 如果你处在短产业链的行业"></a>3. 如果你处在短产业链的行业</h3><p>a) 对于价值上游，你需要注意这个行业的生长阶段。野蛮生长阶段说明市场价值空间很大，运营与销售发挥的价值未必比技术弱。精细化运作阶段说明市场格局已经确定，技术很容易受到价值上游的限制。在这两者之间，技术才有最大的价值空间。</p>
<p>b) 对于价值下游，你需要想办法进入最具有规模效应的内部组织。这类内部组织一般会是架构组或技术委员会。短产业链的企业完全有能力做到采用统一的架构方案或底层能力，这将给企业带来更高的生产力，同时也让你的价值存在于各类技术过程中。</p>
<p>c) 对于价值下游，你还可以让你的技术能力的价值影响到非技术的生产环节。你可能听说过康威定律——组织沟通方式会通过系统设计表达出来。技术其实和组织与管理有着天然的关系。如果你对于技术有着非常高的眼界和格局，完全应该把HR和管理的部分工作一并纳入考虑，从而让你的个人价值蔓延到更多的环节。</p>
<h2 id="价值网的变化与机遇"><a href="#价值网的变化与机遇" class="headerlink" title="价值网的变化与机遇"></a>价值网的变化与机遇</h2><p>我已经举了一些基于既有价值网的推演的例子。但是价值网是会变化的，它会受到外部形势的影响。这种变化会带来新的机遇。我说三个我能看到的：</p>
<h3 id="1-云计算带来的技术价值分化"><a href="#1-云计算带来的技术价值分化" class="headerlink" title="1. 云计算带来的技术价值分化"></a>1. 云计算带来的技术价值分化</h3><p>云计算是我目前看到的，唯一可以缓解信息系统的核心难题的希望。这个难题就是——“复杂度”。我是站在一个软件从业者的角度来看这个问题的。很久以前《人月神话》就说过：没有银弹。是的，站在软件是人类思维产物的角度上来说，确实如此。但是我们可以从人类的社会协作上寻求另一扇窗。把所有的信息系统涉及到的通用部分，以某种抽象维度组合成产品，最终将产品以服务的形式提供给其他技术人员，这就是现在的云计算。</p>
<p>云计算将基础设施进行黑盒包装，使得开发人员不会受到盒子内的复杂度的干扰，从而降低了整体系统的复杂度。而复杂度就是“质量问题”、“进度延期”和“潜在风险”的幕后元凶。</p>
<p>这会给技术的价值网带来什么样的变化呢？</p>
<blockquote>
<ol>
<li>对于应用开发者，技术的含金量会降低。</li>
<li>对于基础能力开发者，技术的含金量会上升。</li>
</ol>
</blockquote>
<p>如果你偏向应用开发者，实现业务逻辑居多，千万不要以为这是一个没饭吃的问题。恰恰相反，这是技术人员横向扩大个人价值的绝佳机会。云计算大大解放了技术人员的脑力，我们终于有可能向前一步，同时基于业务与技术来考虑整体的架构。这种架构不只是技术架构，而是结合了业务、运营、服务等多个生产环节的整体架构。按照价值网模型，技术人员的个人价值可以在价值网下游向多个生产环节蔓延。我自己目前利用了云的基础能力，帮公司搭建了一套“大中台+小前台”的架构。大中台确保了公司的核心竞争力的高质量，小前台跟随着销售运营在市场上不断攻城略地，铺平了客户采购的最后一公里。</p>
<p>如果你是基础能力的开发者，平时都在搞DB、调度器、虚拟化之类的基础设施，那你需要想办法进入云服务供应商这个价值网的下游环境。那里对于基础设施的功能、质量和性能有非常高的要求，这就形成了你的价值空间，努力投入你的精力和时间一定会有很大的回报。而且云服务上有成千上万的客户来验证你的技术成果，只要你足够努力来磨练你的技术能力，绝对能成为新趋势下的香饽饽。</p>
<p>不要觉得这个趋势不会来，市场永远都是逐利的，能用1分钱办成的事不会用1块钱去办。看看亚马逊云和阿里云这2年来的营收增长吧。</p>
<h3 id="2-大数据带来的前期数据工作缺口"><a href="#2-大数据带来的前期数据工作缺口" class="headerlink" title="2. 大数据带来的前期数据工作缺口"></a>2. 大数据带来的前期数据工作缺口</h3><p>说到大数据，脑袋里出现的可能都是各种华丽的报表、双11的奇葩统计和实时跳动的数据屏幕等等。但事实上，目前能真正能收集到足够多数据的企业很少，能将数据应用到企业经营行为，并最终创造收益的企业更是少之又少，基本都是一些平台型的企业。所以这个趋势带来的价值空间，并不在于想象中的高大上的数据分析和应用，而在于大数据的目标与现实之间的距离。</p>
<p>今天，市场已经充分相信大数据可以带来的价值，但是从最原始的数据到最终的给企业经营带来价值，中间至少有4个过程：</p>
<blockquote>
<p>数据积累——数据聚合——数据理解——数据应用。</p>
</blockquote>
<p>数据积累意味着有很多的行为目前还没有数据化，我们需要将其变成数据积累起来。</p>
<p>数据聚合意味着数据的孤岛仍然存在，打通这些孤岛才能让数据足以被使用。</p>
<p>数据理解意味着有很多的数据还无法直观的为人类所理解，我们需要依赖不同的可视化手段与算法让数据说话。</p>
<p>数据应用意味着即使数据可以告诉你很多情况，你也未必能用他提升相关能力，我们需要足够的格局才能使用好数据。</p>
<p>数据这4个过程是存在前后的依赖关系的，任何企业组织想要获得大数据带来的相关好处都必须经过这4个过程。目前市场认可大数据价值的是大多数，但完整实践的只是少数，大部分企业都卡在前面这两步脏活累活上，也就是数据积累和数据聚合。而这两步需要巨大的技术人力的投入，这就创造了一个与技术直接相关的巨大的价值空间。如果你能用具有竞争力的方式来达成这2步，那你可以在这个价值空间里获得极大的份额。我自己目前正在设计一款“数据基盘“产品，也是正在争取这个趋势下的价值。</p>
<p>按照价值网模型来说，对于大数据前期工作的需求，会形成一个很有潜力的价值网的上游环境，低成本的通用的数据积累与聚合技术，则会让你在价值网的下游获得足够的影响力。所以如果你找不到在当前价值网提升个人价值的方向，不妨考虑一下大数据的方向，它值得投入。</p>
<p>如果你不太相信这个大数据带来的这个价值网，可以百度一下salesforce看看它近3年的发展。另外我国“十三五”的中心任务——供给侧改革，也和大数据的价值也有非常紧密的关系。</p>
<h3 id="3-算法与机器学习带来的降维攻击"><a href="#3-算法与机器学习带来的降维攻击" class="headerlink" title="3. 算法与机器学习带来的降维攻击"></a>3. 算法与机器学习带来的降维攻击</h3><p>机器学习、AI、算法，这些词现在非常的热门，我都不好意思提，深怕说不出什么高大上的东西。我在这里是要说这个趋势对于个人价值带来的机会。</p>
<p>目前这类技术的使用领域已经出现一些明显的划分。比如：</p>
<p>分类：可以找出不同种类信息之间的特征，了解不同类别的分布。可用于人群风控、客户分层、销售挖掘、信息归档……</p>
<p>聚类：度量对象间的相似性，聚合具有较高的相似度的同一类的对象。可用于异常检测、行为收集、集合优化……</p>
<p>预测：通过对历史事件的学习来积累经验，得出事物间的相似性和关联性，从而对事物的未来状况做出预测。可用于气象、环境、交通、金融……</p>
<p>关联：分析各个对象之间同时出现的机率。最典型是用于购物车分析，商品推荐，营销活动……</p>
<p>换维：不同类型信息间的转换。比如语音-&gt;文字、人脸-&gt;特性数据、OCR……</p>
<p>这些技术可能<strong>本身含金量较高，但是对它们的应用却不是那么难</strong>的一件事，因为这些都已经是产品化的技术了。<strong>在面对技术目标的时候，如果你可以同时基于“程序思维”与“算法思维”来考虑达到目标的办法，那你的解题思路会宽广得多，你提出的解决方案将和其他人能提出的形成维度上的差异，最终你对外展现的个人价值一定是令人印象深刻的，这可以成为你在组织中脱颖而出的有力武器。</strong></p>
<p>如果你觉得这很玄乎，那我举一个我的例子。我想很多人肯定用过Sonarqube来检查代码质量。Sonarqube对于代码的可靠性、安全性、可维护性、重复率、单体测试覆盖度等指标都会产生数字化的结果。那么问题来了，你确定这些指标OK就意味着线上程序OK？如何更靠谱地知道指标和最终质量间的关系呢？我们公司的质量行为主要存在于bug登记、监控异常、代码提交说明等过程中。我通过对这些质量行为自动增加打标数据，实现了无侵入的机器学习训练，<strong>不断地让机器学习静态指标与现实质量行为之间的关系，从而实现了一个更加靠谱的代码质量监测系统。</strong></p>
<p>简而言之，机器学习算法会给你所处的价值网下游环境带来改变。如果你苦于无法扩大自己的技术影响力，无法规模化自己的技术价值，那么 “算法思维”会给你带来另一个维度的竞争力，从而提高你在价值网下游的价值占比。</p>
<h2 id="最后，请为了价值而选择"><a href="#最后，请为了价值而选择" class="headerlink" title="最后，请为了价值而选择"></a>最后，请为了价值而选择</h2><p>人的时间和精力是有限的，我们做出选择的时候也意味着放弃了另一部分选项。所以我们必须足够清楚，这样的选择有多大的价值，才行心无旁骛地全身心投入去中。</p>
<p>我们都需要问问自己：公司主要以什么样的技术来生产产品？技术在最终产品中占比多大？你又在技术中占有什么样的位置？对于技术的要求是密集性的还是创造性的？产品在当前市场中的地位如何？主要的竞争力来自规模效应？智力效应？还是技术效应？这个市场是在变大还是变小？资源在更多的投入还是撤离这个市场？与这个市场有关的行业在做什么？……这是为了从高、中、低的多个维度来验证自己对于当前价值网的理解，从而选定方向，投入精力。</p>
<p>如果你对于当前的职业发展、技术选择或行业环境心存疑虑，那你是否也思考过其背后的价值运作，从而选定更有价值的方向呢？我们个人的价值是整个大价值网中的一部分，无论是对职业上的价值还是生活上的价值，但这并不意味着我们被困在某一个环节上。人类的思维拥有无限的维度，既能仰望星空，也能注视脚下，我们完全有能力，<strong>基于自己的判断，选择自己的道路，获取自己的价值，这是作为人类最大的自由</strong>，不是吗？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170403060918030&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;公司主要以什么样的技术来生产产品？技术在最终产品中占比多大？你又在技术中占有什么样的位置？对于技术的要求是密集性的还是创造性的？产品在当前市场中的地位如何？主要的竞争力来自规模效应？智力效应？还是技术效应？这个市场是在变大还是变小？资源在更多的投入还是撤离这个市场？与这个市场有关的行业在做什么？……这是为了从高、中、低的多个维度来验证自己对于当前价值网的理解，从而选定方向，投入精力。&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Career" scheme="http://ipcreator.me/tags/Career/"/>
    
  </entry>
  
  <entry>
    <title>10 Breakthrough Technologies 2017</title>
    <link href="http://ipcreator.me/2017/04/04/AI/Business/10-breakthrough-technologies-2017/"/>
    <id>http://ipcreator.me/2017/04/04/AI/Business/10-breakthrough-technologies-2017/</id>
    <published>2017-04-04T00:15:06.000Z</published>
    <updated>2017-04-04T00:37:26.636Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://d267cvn3rvuq91.cloudfront.net/i/images/coverart.tr10.ma17.opener_1.jpg?sw=580" alt=""></p>
<ol>
<li><a href="#Reversing-Paralysis">Reversing Paralysis</a></li>
<li><a href="#Self-Driving-Trucks">Self-Driving Trucks</a></li>
<li><a href="#Paying-with-Your-Face">Paying with Your Face</a></li>
<li><a href="#Practical-Quantum-Computers">Practical Quantum Computers</a></li>
<li><a href="#The-360-Degree-Selfie">The 360-Degree Selfie</a></li>
<li><a href="#Hot-Solar-Cells">Hot Solar Cells</a></li>
<li><a href="#Gene-Therapy-2.0">Gene Therapy 2.0</a></li>
<li><a href="#The-Cell-Atlas">The Cell Atlas</a></li>
<li><a href="#Botnets-of-Things">Botnets of Things</a></li>
<li><a href="#Reinforcement-Learning">Reinforcement Learning</a></li>
</ol>
<a id="more"></a>
<p><a href="https://www.technologyreview.com/lists/technologies/2017/" target="_blank" rel="external">10 Breakthrough Technologies 2017</a></p>
<p>These technologies all have staying power. They will affect the economy and our politics, improve medicine, or influence our culture. Some are unfolding now; others will take a decade or more to develop. But you should know about all of them right now.</p>
<h2 id="Reversing-Paralysis"><a href="#Reversing-Paralysis" class="headerlink" title="Reversing Paralysis"></a><a href="https://www.technologyreview.com/s/603492/10-breakthrough-technologies-2017-reversing-paralysis/" target="_blank" rel="external">Reversing Paralysis</a></h2><p><img src="https://d267cvn3rvuq91.cloudfront.net/i/images/paralysistopper.jpg?sw=390&amp;cx=0&amp;cy=1237&amp;cw=3000&amp;ch=1687" alt=""></p>
<p>Scientists are making remarkable progress at using brain implants to restore the freedom of movement that spinal cord injuries take away.</p>
<h2 id="Self-Driving-Trucks"><a href="#Self-Driving-Trucks" class="headerlink" title="Self-Driving Trucks"></a><a href="https://www.technologyreview.com/s/603493/10-breakthrough-technologies-2017-self-driving-trucks/" target="_blank" rel="external">Self-Driving Trucks</a></h2><p><img src="https://d267cvn3rvuq91.cloudfront.net/i/images/trucksotto5.jpg?sw=390&amp;cx=68&amp;cy=118&amp;cw=2236&amp;ch=1257" alt=""></p>
<p>Tractor-trailers without a human at the wheel will soon barrel onto highways near you. What will this mean for the nation’s 1.7 million truck drivers?</p>
<h2 id="Paying-with-Your-Face"><a href="#Paying-with-Your-Face" class="headerlink" title="Paying with Your Face"></a><a href="https://www.technologyreview.com/s/603494/10-breakthrough-technologies-2017-paying-with-your-face/" target="_blank" rel="external">Paying with Your Face</a></h2><p><img src="https://d267cvn3rvuq91.cloudfront.net/i/images/paymainillustration_0.jpg?sw=390&amp;cx=0&amp;cy=586&amp;cw=2510&amp;ch=1411" alt=""></p>
<p>Face-detecting systems in China now authorize payments, provide access to facilities, and track down criminals. Will other countries follow?</p>
<h2 id="Practical-Quantum-Computers"><a href="#Practical-Quantum-Computers" class="headerlink" title="Practical Quantum Computers"></a><a href="https://www.technologyreview.com/s/603495/10-breakthrough-technologies-2017-practical-quantum-computers/" target="_blank" rel="external">Practical Quantum Computers</a></h2><p><img src="https://d267cvn3rvuq91.cloudfront.net/i/images/quantum5.jpg?sw=390&amp;cx=3&amp;cy=775&amp;cw=1277&amp;ch=718" alt=""></p>
<p>Advances at Google, Intel, and several research groups indicate that computers with previously unimaginable power are finally within reach.</p>
<h2 id="The-360-Degree-Selfie"><a href="#The-360-Degree-Selfie" class="headerlink" title="The 360-Degree Selfie"></a><a href="https://www.technologyreview.com/s/603496/10-breakthrough-technologies-2017-the-360-degree-selfie/" target="_blank" rel="external">The 360-Degree Selfie</a></h2><p><img src="https://d267cvn3rvuq91.cloudfront.net/i/images/360camerasgroupshot.web.jpg?sw=390&amp;cx=0&amp;cy=636&amp;cw=1428&amp;ch=803" alt=""></p>
<p>Inexpensive cameras that make spherical images are opening a new era in photography and changing the way people share stories.</p>
<h2 id="Hot-Solar-Cells"><a href="#Hot-Solar-Cells" class="headerlink" title="Hot Solar Cells"></a><a href="https://www.technologyreview.com/s/603497/10-breakthrough-technologies-2017-hot-solar-cells/" target="_blank" rel="external">Hot Solar Cells</a></h2><p><img src="https://d267cvn3rvuq91.cloudfront.net/i/images/hotsolar1.jpg?sw=390&amp;cx=195&amp;cy=1071&amp;cw=2135&amp;ch=1200" alt=""></p>
<p>By converting heat to focused beams of light, a new solar device could create cheap and continuous power.</p>
<h2 id="Gene-Therapy-2-0"><a href="#Gene-Therapy-2-0" class="headerlink" title="Gene Therapy 2.0"></a><a href="https://www.technologyreview.com/s/603498/10-breakthrough-technologies-2017-gene-therapy-20/" target="_blank" rel="external">Gene Therapy 2.0</a></h2><p>Scientists have solved fundamental problems that were holding back cures for rare hereditary disorders. Next we’ll see if the same approach can take on cancer, heart disease, and other common illnesses.</p>
<p><img src="https://d267cvn3rvuq91.cloudfront.net/i/images/genetherapyopener.jpg?sw=390&amp;cx=190&amp;cy=167&amp;cw=2383&amp;ch=1340" alt=""></p>
<h2 id="The-Cell-Atlas"><a href="#The-Cell-Atlas" class="headerlink" title="The Cell Atlas"></a><a href="https://www.technologyreview.com/s/603499/10-breakthrough-technologies-2017-the-cell-atlas/" target="_blank" rel="external">The Cell Atlas</a></h2><p><img src="https://d267cvn3rvuq91.cloudfront.net/i/images/cellatlas1openerweb.jpg?sw=390&amp;cx=0&amp;cy=522&amp;cw=1282&amp;ch=721" alt=""></p>
<p>Biology’s next mega-project will find out what we’re really made of.</p>
<h2 id="Botnets-of-Things"><a href="#Botnets-of-Things" class="headerlink" title="Botnets of Things"></a><a href="https://www.technologyreview.com/s/603500/10-breakthrough-technologies-2017-botnets-of-things/" target="_blank" rel="external">Botnets of Things</a></h2><p><img src="https://d267cvn3rvuq91.cloudfront.net/i/images/botnets1opener.jpg?sw=390&amp;cx=0&amp;cy=1914&amp;cw=2760&amp;ch=1552" alt=""></p>
<p>The relentless push to add connectivity to home gadgets is creating dangerous side effects that figure to get even worse.</p>
<h2 id="Reinforcement-Learning"><a href="#Reinforcement-Learning" class="headerlink" title="Reinforcement Learning"></a><a href="https://www.technologyreview.com/s/603501/10-breakthrough-technologies-2017-reinforcement-learning/" target="_blank" rel="external">Reinforcement Learning</a></h2><p><img src="https://d267cvn3rvuq91.cloudfront.net/i/images/reinforcementleesedol.jpg?sw=390&amp;cx=0&amp;cy=121&amp;cw=1529&amp;ch=860" alt=""></p>
<p>By experimenting, computers are figuring out how to do things that no programmer could teach them.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://d267cvn3rvuq91.cloudfront.net/i/images/coverart.tr10.ma17.opener_1.jpg?sw=580&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#Reversing-Paralysis&quot;&gt;Reversing Paralysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Self-Driving-Trucks&quot;&gt;Self-Driving Trucks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Paying-with-Your-Face&quot;&gt;Paying with Your Face&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Practical-Quantum-Computers&quot;&gt;Practical Quantum Computers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#The-360-Degree-Selfie&quot;&gt;The 360-Degree Selfie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Hot-Solar-Cells&quot;&gt;Hot Solar Cells&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Gene-Therapy-2.0&quot;&gt;Gene Therapy 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#The-Cell-Atlas&quot;&gt;The Cell Atlas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Botnets-of-Things&quot;&gt;Botnets of Things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Reinforcement-Learning&quot;&gt;Reinforcement Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Big Trend" scheme="http://ipcreator.me/tags/Big-Trend/"/>
    
  </entry>
  
  <entry>
    <title>Trouble Obeys Eternal Law</title>
    <link href="http://ipcreator.me/2017/04/04/MyView/Original/trouble-obeys-forever-rule/"/>
    <id>http://ipcreator.me/2017/04/04/MyView/Original/trouble-obeys-forever-rule/</id>
    <published>2017-04-04T00:00:06.000Z</published>
    <updated>2017-04-04T00:37:41.044Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/BT-blog-thumb.jpg" alt=""></p>
<p>When you meet a trouble , solve it right now , otherwise , you will meet it in other occasions.</p>
<a id="more"></a>
<h2 id="Basic-Concept"><a href="#Basic-Concept" class="headerlink" title="Basic Concept"></a>Basic Concept</h2><h3 id="Brain-OS"><a href="#Brain-OS" class="headerlink" title="Brain OS"></a>Brain OS</h3><h3 id="Wikipedia"><a href="#Wikipedia" class="headerlink" title="Wikipedia"></a>Wikipedia</h3><h2 id="Program-Skill"><a href="#Program-Skill" class="headerlink" title="Program Skill"></a>Program Skill</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><h3 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h3><h2 id="Useful-Tool"><a href="#Useful-Tool" class="headerlink" title="Useful Tool"></a>Useful Tool</h2><h3 id="English"><a href="#English" class="headerlink" title="English"></a>English</h3><h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><h3 id="AndroidStudio"><a href="#AndroidStudio" class="headerlink" title="AndroidStudio"></a>AndroidStudio</h3><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><h3 id="Beyond-Compare"><a href="#Beyond-Compare" class="headerlink" title="Beyond Compare"></a>Beyond Compare</h3><h3 id="Source-Insight"><a href="#Source-Insight" class="headerlink" title="Source Insight"></a>Source Insight</h3><h3 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h3><h2 id="English-Words"><a href="#English-Words" class="headerlink" title="English Words"></a>English Words</h2><h3 id="Ordinary"><a href="#Ordinary" class="headerlink" title="Ordinary"></a>Ordinary</h3><h3 id="Professional"><a href="#Professional" class="headerlink" title="Professional"></a>Professional</h3><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h3 id="Stackflow"><a href="#Stackflow" class="headerlink" title="Stackflow"></a>Stackflow</h3><h3 id="CSDN"><a href="#CSDN" class="headerlink" title="CSDN"></a>CSDN</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/BT-blog-thumb.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;When you meet a trouble , solve it right now , otherwise , you will meet it in other occasions.&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Great Spirits on Github</title>
    <link href="http://ipcreator.me/2017/04/03/Program/Android/3rdLib/great-spirit-on-github/"/>
    <id>http://ipcreator.me/2017/04/03/Program/Android/3rdLib/great-spirit-on-github/</id>
    <published>2017-04-03T09:36:06.000Z</published>
    <updated>2017-04-03T16:12:47.094Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Less is More!<br>Codes speak louder than Lectures</p>
</blockquote>
<p><img src="http://okkntqe2h.bkt.clouddn.com/Art_Mata_Nui_Space_Travel.jpg" alt=""></p>
<p>Great Spirits show How Powerful and Wonderful codes are!</p>
<a id="more"></a>  
<h2 id="Jake-Wharton"><a href="#Jake-Wharton" class="headerlink" title="Jake Wharton"></a>Jake Wharton</h2><p><img src="http://ong8f1obl.bkt.clouddn.com/jake%20wharton.jpg" alt=""></p>
<p>##greenrobot<br><img src="https://avatars0.githubusercontent.com/u/242242?v=3&amp;s=460" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/JakeWharton" target="_blank" rel="external">Jake Wharton</a><br><a href="https://github.com/greenrobot" target="_blank" rel="external">greenrobot</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Less is More!&lt;br&gt;Codes speak louder than Lectures&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/Art_Mata_Nui_Space_Travel.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Great Spirits show How Powerful and Wonderful codes are!&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Jake Wharton" scheme="http://ipcreator.me/tags/Jake-Wharton/"/>
    
  </entry>
  
  <entry>
    <title>Compile Process of Android Application</title>
    <link href="http://ipcreator.me/2017/04/03/Program/Android/Design/compile-process-of-apk/"/>
    <id>http://ipcreator.me/2017/04/03/Program/Android/Design/compile-process-of-apk/</id>
    <published>2017-04-03T03:44:06.000Z</published>
    <updated>2017-04-03T04:52:52.001Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/android_build_detail.png" alt=""></p>
<blockquote>
<p>编译–&gt;DEX–&gt;打包–&gt;签名和对齐</p>
</blockquote>
<a id="more"></a>
<h2 id="Package-Process"><a href="#Package-Process" class="headerlink" title="Package Process"></a>Package Process</h2><p><img src="http://upload-images.jianshu.io/upload_images/2839011-28f3fb0ca3af7d9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>上面这张图对上面的步骤以及每步用到的工具进行了细分，概括如下：</p>
<p>Java编译器对工程本身的java代码进行编译，这些java代码有三个来源：app的源代码，由资源文件生成的R文件(aapt工具)，以及有aidl文件生成的java接口文件(aidl工具)。产出为.class文件。</p>
<p>.class文件和依赖的三方库文件通过dex工具生成Delvik虚拟机可执行的.dex文件，可能有一个或多个，包含了所有的class信息，包括项目自身的class和依赖的class。产出为.dex文件。</p>
<p>apkbuilder工具将.dex文件和编译后的资源文件生成未经签名对齐的apk文件。这里编译后的资源文件包括两部分，一是由aapt编译产生的编译后的资源文件，二是依赖的三方库里的资源文件。产出为未经签名的.apk文件。</p>
<p>分别由Jarsigner和zipalign对apk文件进行签名和对齐，生成最终的apk文件。</p>
<p>可以将整个打包过程概括为以下几步：</p>
<ol>
<li>通过aapt打包res资源文件，生成R.java、resources.arsc和res文件（二进制 &amp; 非二进制如res/raw和pic保持原样）</li>
<li>处理.aidl文件，生成对应的Java接口文件</li>
<li>通过Java Compiler编译R.java、Java接口文件、Java源文件，生成.class文件</li>
<li>通过dex命令，将.class文件和第三方库中的.class文件处理生成classes.dex</li>
<li>通过apkbuilder工具，将aapt生成的resources.arsc和res文件、assets文件和classes.dex一起打包生成apk</li>
<li>通过Jarsigner工具，对上面的apk进行debug或release签名<br>通过zipalign工具，将签名后的apk进行对齐处理。</li>
</ol>
<p>关于zipalign工具，根据名字就知道是个zip文件对齐的工具。使得apk中的资源文件偏离文件起始位置4个字节，从而可以通过mmap()直接访问，从而减少RAM占用。</p>
<p>下图是谷歌官网给出的一个典型的apk构建的过程，比较概括。主要包括两个过程，首先是编译过程，编译的内容包括本工程的文件以及依赖的各种库文件，编译的输出包括dex文件和编译后的资源文件。然后是打包过程。配合Keystore对第一步的输出进行签名对齐，生成最终的apk文件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2839011-58310b412bae9a01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="APK-Content"><a href="#APK-Content" class="headerlink" title="APK Content"></a>APK Content</h2><p>apk包内容包括：</p>
<ol>
<li>classes.dex…</li>
<li>resources.arsc</li>
<li>assets</li>
<li>res</li>
<li>AndroidManifest.xml</li>
<li>META-INF<br>7.<br>其中：<br>res中图片和raw文件下内容保持原样，res中其他xml文件内容均转化为二进制形式；assets文件内容保持原样<br>res中的文件会被映射到R.java文件中，访问的时候直接使用资源ID即R.id.filename；assets文件夹下的文件不会被映射到R.java中，访问的时候需要<strong>AssetManager</strong>类</li>
</ol>
<h2 id="Gradle-Process"><a href="#Gradle-Process" class="headerlink" title="Gradle Process"></a>Gradle Process</h2><p>Android工程通过gradle文件管理各项配置，gradle文件利用DSL（Domain Specific Language）语言描述配置，并使用Groovy语言处理编译逻辑。一个典型的Android工程结构如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2839011-0ba953a3e93d0d19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://img.blog.csdn.net/20151027092414376" alt=""></p>
<p>在这里gradle文件分布在几个不同的层级，Project层级以及Module层级。</p>
<ol>
<li>Project层级的settings.gradle描述的是该Project包含哪些Module<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include &apos;:presentation&apos;, &apos;:qamodel&apos;, &apos;:chatcommonmodule&apos;, &apos;:qa&apos;, &apos;:unlimit&apos;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Project层级的build.gradle描述的是作用于所有Module的配置，包括gradle版本等。</p>
<ol>
<li>Module层级的build.gradle。每个Module下都有一个作用于该Module的build.gradle文件，描述了该Module相关的配置。这些配置主要包括：BuildTypes，ProductFlavors，Dependency，SigningSettings等。</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><img src="https://gss0.baidu.com/7LsWdDW5_xN3otqbppnN2DJv/doc/pic/item/0bd162d9f2d3572c49ef6f258313632762d0c33e.jpg" alt=""><br>[1]<a href="http://blog.csdn.net/yanbober/article/details/49408489" target="_blank" rel="external">Android应用开发编译框架流程与IDE及Gradle概要</a><br>[2]<a href="https://yuedu.baidu.com/ebook/14a722970740be1e640e9a3e?pn=1&amp;isFromWenku=1" target="_blank" rel="external">Android Gradle权威指南</a><br>[3]<a href="http://www.jianshu.com/p/9df3c3b6067a" target="_blank" rel="external">Gradle 完整指南（Android）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/android_build_detail.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编译–&amp;gt;DEX–&amp;gt;打包–&amp;gt;签名和对齐&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Compile" scheme="http://ipcreator.me/tags/Compile/"/>
    
      <category term="Gradle" scheme="http://ipcreator.me/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Improve Code Inspection with Annotations</title>
    <link href="http://ipcreator.me/2017/04/03/Program/Java/improve-code-inspection-with-annotations/"/>
    <id>http://ipcreator.me/2017/04/03/Program/Java/improve-code-inspection-with-annotations/</id>
    <published>2017-04-03T03:44:06.000Z</published>
    <updated>2017-04-11T04:03:35.720Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://developer.android.com/studio/images/write/indirect-permissions-warning_2-2_2x.png?hl=zh-cn" alt=""></p>
<ol>
<li><a href="#What&#39;s-Annotation?">What’s Annotation?</a></li>
<li><a href="#Why-use-Annotation?">Why use Annotation?</a></li>
<li><a href="#How-to-Use-Annotation?">How to Use Annotation?</a></li>
<li><a href="#Pitfall">Pitfall</a></li>
<li><a href="#Best-Practice">Best Practice</a></li>
</ol>
<a id="more"></a>
<h2 id="What’s-Annotation"><a href="#What’s-Annotation" class="headerlink" title="What’s Annotation?"></a>What’s Annotation?</h2><h3 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h3><h4 id="interface"><a href="#interface" class="headerlink" title="@interface"></a>@interface</h4><p>@interface是java中用于声明注解类的关键字.使用该注解表示将自动继承java.lang.annotation.Annotation类,该过程交给编译器完成.需要注意:在定义注解时,不能继承其他注解或接口.</p>
<p>元注解：<br>元注解的作用就是负责注解其他注解。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。Java5.0定义的元注解：<br>@Target,<br>@Retention,<br>@Documented,<br>@Inherited</p>
<h4 id="Target："><a href="#Target：" class="headerlink" title="@Target："></a>@Target：</h4><p>该注解用于定义注解的作用目标,即注解可以用在什么地方,比如是用于方法上还是用于字段上,该注解接受以下参数:</p>
<p>作用目标    含义<br>@Target(ElementType.TYPE)    用于接口(注解本质上也是接口),类,枚举<br>@Target(ElementType.FIELD)    用于字段,枚举常量<br>@Target(ElementType.METHOD)    用于方法<br>@Target(ElementType.PARAMETER)    用于方法参数<br>@Target(ElementType.CONSTRUCTOR)    用于构造参数<br>@Target(ElementType.LOCAL_VARIABLE)    用于局部变量<br>@Target(ElementType.ANNOTATION_TYPE)    用于注解<br>@Target(ElementType.PACKAGE)    用于包</p>
<p>,通过@interface,@Retention,@Target已经可以完整的定义一个注解</p>
<h4 id="Retention："><a href="#Retention：" class="headerlink" title="@Retention："></a>@Retention：</h4><p>对Annotation的“生命周期”限制：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取。<br>作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）<br>RetentionPolicy.SOURCE:在源文件中有效<br>RetentionPolicy.CLASS:在class文件中有效<br>RetentionPolicy.RUNTIME:在运行时有效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Target(ElementType.FIELD)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">public @interface Column &#123;</div><div class="line">    public String name() default &quot;fieldName&quot;;</div><div class="line">    public boolean defaultDBValue() default false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Column注解的的RetentionPolicy的属性值是RUTIME,这样注解处理器可以通过反射，获取到该注解的属性值，从而去做一些运行时的逻辑处理。</p>
<h4 id="Documented"><a href="#Documented" class="headerlink" title="@Documented:"></a>@Documented:</h4><p>该注解用于描述其它类型的annotation应该被javadoc文档化,出现在api doc中.<br>比如使用该注解的@Target会出出现在api说明中.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Documented</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Target(ElementType.ANNOTATION_TYPE)</div><div class="line">public @interface Target &#123;</div><div class="line">    ElementType[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161222232726578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGQ4NjQxNDAxMzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h4 id="Inherited："><a href="#Inherited：" class="headerlink" title="@Inherited："></a>@Inherited：</h4><p>是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</p>
<p>注意：当@Inherited的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Inherited</div><div class="line">public @interface Greeting &#123;</div><div class="line">    public enum FontColor&#123; BULE,RED,GREEN&#125;;</div><div class="line">    String name();</div><div class="line">    FontColor fontColor() default FontColor.GREEN;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="注解参数"><a href="#注解参数" class="headerlink" title="注解参数"></a>注解参数</h4><p>参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组。</p>
<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>注解元素必须有确定的值，要么在定义注解的默认值中指定，要么在使用注解时指定，非基本类型的注解元素的值不可为null。因此, 使用空字符串或0作为默认值是一种常用的做法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Target(ElementType.FIELD)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Documented</div><div class="line">public @interface FruitProvider &#123;</div><div class="line">    public int id() default -1;</div><div class="line">    public String name() default &quot;&quot;;</div><div class="line">    public String address() default &quot;&quot;;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Target(ElementType.FIELD)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Documented</div><div class="line">public @interface FruitProvider &#123;</div><div class="line">    public int value() default -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="系统注解"><a href="#系统注解" class="headerlink" title="系统注解"></a>系统注解</h4><p>java设计者已经为我们自定义了几个常用的注解,我们称之为系统注解,主要是这三个:</p>
<p>系统注解    含义<br>@Override    用于修饰方法,表示此方法重写了父类方法<br>像@Override这样,没有成员定义的注解称之为标记注解.</p>
<p>@Deprecated    用于修饰方法,表示此方法已经过时<br>需要注意@Deprecated和@deprecated这两者的区别,前者被javac识别和处理,而后者则是被javadoc工具识别和处理.因此当我们需要在源码标记某个方法已经过时应该使用@Deprecated,如果需要在文档中说明则使用@deprecated</p>
<p>@SuppressWarnnings    该注解用于告诉编译器忽视某类编译警告<br>该注解被用于有选择的关闭编译器对类,方法,成员变量即变量初始化的警告.该注解可接受以下参数:</p>
<p>参数    含义<br>deprecated    使用已过时类,方法,变量<br>unchecked    执行了未检查的转告时的警告,如使用集合是为使用泛型来制定集合保存时的类型<br>fallthrough    使用switch,但是没有break时<br>path    类路径,源文件路径等有不存在的路径<br>serial    可序列化的类上缺少serialVersionUID定义时的警告<br>finally    任何finally字句不能正常完成时的警告<br>all    以上所有情况的警告</p>
<h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p>了解完系统注解之后,现在我们就可以自己来定义注解了,通过上面@Override的实例,不难看出定义注解的格式如下:</p>
<p>public @interface 注解名 {定义体}</p>
<p>定义体就是方法的集合,每个方法实则是声明了一个配置参数.方法的名称作为配置参数的名称,方法的返回值类型就是配置参数的类型.和普通的方法不一样,可以通过default关键字来声明配置参数的默认值.</p>
<p>需要注意:</p>
<ol>
<li>此处只能使用public或者默认的default两个权限修饰符</li>
<li>配置参数的类型只能使用基本类型(byte,boolean,char,short,int,long,float,double)和String,Enum,Class,annotation</li>
<li>对于只含有一个配置参数的注解,参数名建议设置中value,即方法名为value</li>
<li>配置参数一旦设置,其参数值必须有确定的值,要不在使用注解的时候指定,要不在定义注解的时候使用default为其设置默认值,对于非基本类型的参数值来说,其不能为null.<br>像@Override这样,没有成员定义的注解称之为标记注解.</li>
</ol>
<h3 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h3><p>根据注解的特性,注解处理器可以分为<strong>运行时注解处理</strong>和<strong>编译时注解处理器</strong>.运行时处理器需要借助反射机制实现,而编译时处理器则需要借助APT来实现.</p>
<h2 id="Why-use-Annotation"><a href="#Why-use-Annotation" class="headerlink" title="Why use Annotation?"></a>Why use Annotation?</h2><p>Annotations allow you to provide hints to code inspections tools like Lint, to help detect these more subtle code problems. They are added as metadata tags that you attach to variables, parameters, and return values to inspect method return values, passed parameters, local variables, and fields. When used with code inspections tools, annotations can help you detect problems, such as null pointer exceptions and resource type conflicts.</p>
<h2 id="How-to-Use-Annotation"><a href="#How-to-Use-Annotation" class="headerlink" title="How to Use Annotation?"></a>How to Use Annotation?</h2><p>Android supports a variety of annotations through the <a href="https://developer.android.com/topic/libraries/support-library/features.html?hl=zh-cn#annotations" target="_blank" rel="external">Annotations Support Library</a>. You can access the library through the <a href="https://developer.android.com/reference/android/support/annotation/package-summary.html?hl=zh-cn" target="_blank" rel="external">android.support.annotation</a> package.</p>
<h3 id="Nullness-Annotations"><a href="#Nullness-Annotations" class="headerlink" title="Nullness Annotations"></a>Nullness Annotations</h3><h3 id="线程注解-UiThread-WorkerThread-…"><a href="#线程注解-UiThread-WorkerThread-…" class="headerlink" title="线程注解: @UiThread, @WorkerThread, …"></a>线程注解: @UiThread, @WorkerThread, …</h3><p>(Support library 22.2及其之后版本支持.)</p>
<p>如果你的方法只能在指定的线程类型中被调用，那么你就可以使用以下4个注解来标注它：<br>@UiThread<br>@MainThread<br>@WorkerThread<br>@BinderThread<br>如果一个类中的所有方法都有相同的线程需求，那么你可以注解类本身。比如android.view.View，就被用@UiThread标注。</p>
<p>关于线程注解使用的一个很好的例子就是AsyncTask：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@WorkerThread</div><div class="line">protected abstract Result doInBackground(Params... params);</div><div class="line"></div><div class="line">@MainThread</div><div class="line">protected void onProgressUpdate(Progress... values) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@UiThread还是@MainThread?</p>
<p>在进程里只有一个主线程。这个就是@MainThread。同时这个线程也是一个@UiThread。比如activity的主要窗口就运行在这个线程上。然而它也有能力为应用创建其他线程。这很少见，一般具备这样功能的都是系统进程。通常是把和生命周期有关的用@MainThread标注，和View层级结构相关的用@UiThread标注。但是由于@MainThread本质上是一个@UiThread，而大部分情况下@UiThread又是一个@MainThread，所以工具(lint ,Android Studio,等等)可以把他们互换，所以你能在一个可以调用@MainThread方法的地方也能调用@UiThread方法，反之亦然。</p>
<p>值约束: @Size, @IntRange, @FloatRange</p>
<h2 id="Pitfall"><a href="#Pitfall" class="headerlink" title="Pitfall"></a>Pitfall</h2><h2 id="Best-Practice"><a href="#Best-Practice" class="headerlink" title="Best Practice"></a>Best Practice</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://developer.android.com/studio/write/annotations.html?hl=zh-cn#adding-annotations" target="_blank" rel="external">Improve Code Inspection with Annotations</a><br>[2]<a href="http://www.flysnow.org/2015/08/13/android-tech-docs-support-annotations.html" target="_blank" rel="external">Android注解支持(Support Annotations)</a><br>[3]<a href="https://juejin.im/entry/58df5e5c2f301e006208b307" target="_blank" rel="external">性能最佳实践: 在开发中避免使用枚举</a><br>[4]<a href="https://joyrun.github.io/2016/07/18/java-annotation/" target="_blank" rel="external">Java Annotation最佳入门实践</a><br>[5]<a href="https://joyrun.github.io/2016/07/19/AptHelloWorld/" target="_blank" rel="external">Android APT（编译时代码生成）最佳实践</a><br>[6]<a href="https://joyrun.github.io/2016/08/01/ActivityRouter/" target="_blank" rel="external">ActivityRouter路由框架：通过注解实现URL打开Activity</a><br>[7]<a href="http://blog.csdn.net/dd864140130/article/details/53875814" target="_blank" rel="external">基础篇：带你从头到尾玩转注解</a><br>[8]<a href="http://blog.csdn.net/dd864140130/article/details/53957691" target="_blank" rel="external">拓展篇：注解处理器最佳实践</a><br>[9]<a href="http://www.infoq.com/cn/articles/cf-java-annotation?utm_source=articles_about_java-depth-adventure&amp;utm_medium=link&amp;utm_campaign=java-depth-adventure" target="_blank" rel="external">Java深度历险（六）——Java注解</a><br>[10]<a href="http://www.trinea.cn/android/java-annotation-android-open-source-analysis/" target="_blank" rel="external">Java Annotation 及几个常用开源项目注解原理简析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://developer.android.com/studio/images/write/indirect-permissions-warning_2-2_2x.png?hl=zh-cn&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#What&amp;#39;s-Annotation?&quot;&gt;What’s Annotation?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Why-use-Annotation?&quot;&gt;Why use Annotation?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#How-to-Use-Annotation?&quot;&gt;How to Use Annotation?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Pitfall&quot;&gt;Pitfall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Best-Practice&quot;&gt;Best Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Java" scheme="http://ipcreator.me/tags/Java/"/>
    
      <category term="Annotation" scheme="http://ipcreator.me/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>Deep Analysis and Learning of Android</title>
    <link href="http://ipcreator.me/2017/04/02/Program/Android/deep-learning-of-android-by-luoshengyang/"/>
    <id>http://ipcreator.me/2017/04/02/Program/Android/deep-learning-of-android-by-luoshengyang/</id>
    <published>2017-04-02T14:53:06.000Z</published>
    <updated>2017-04-02T14:57:49.059Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20130528234751506" alt=""><br>Android系统研究之“三横三纵”</p>
<p><a href="http://blog.csdn.net/luoshengyang/article/details/8923485" target="_blank" rel="external">作者：罗升阳</a></p>
<p>以下是本文的提纲：</p>
<ol>
<li>理念</li>
<li>里程碑</li>
<li>看过的书</li>
<li>研究过的内容</li>
<li>将来要做的事情</li>
</ol>
<a id="more"></a>
<p><img src="http://img.blog.csdn.net/20130529004204159" alt=""><br>Android 4.2的UI渲染流程</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://blog.csdn.net/luoshengyang/article/details/8923485" target="_blank" rel="external">那两年炼就的Android内功修养</a><br><a href="http://blog.csdn.net/luoshengyang/article/details/12957169" target="_blank" rel="external">《老罗的Android之旅》导读PPT</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20130528234751506&quot; alt=&quot;&quot;&gt;&lt;br&gt;Android系统研究之“三横三纵”&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/luoshengyang/article/details/8923485&quot;&gt;作者：罗升阳&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下是本文的提纲：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;理念&lt;/li&gt;
&lt;li&gt;里程碑&lt;/li&gt;
&lt;li&gt;看过的书&lt;/li&gt;
&lt;li&gt;研究过的内容&lt;/li&gt;
&lt;li&gt;将来要做的事情&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Luo Shengyang" scheme="http://ipcreator.me/tags/Luo-Shengyang/"/>
    
  </entry>
  
  <entry>
    <title>How to Use Gradle</title>
    <link href="http://ipcreator.me/2017/04/02/Program/Tools/Gradle/gradle/"/>
    <id>http://ipcreator.me/2017/04/02/Program/Tools/Gradle/gradle/</id>
    <published>2017-04-02T10:39:06.000Z</published>
    <updated>2017-04-10T04:00:40.921Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gradle.org/images/homepage/gradle-org-hero.png" alt=""></p>
<blockquote>
<p>Gradle is a powerful tool than you can image!<br>Accelerate developer productivity</p>
</blockquote>
<ol>
<li><a href="#What&#39;s-the-Gradle?">What’s the Gradle?</a></li>
<li><a href="#Why-use-Gradle?">Why use Gradle?</a></li>
<li><a href="#How-to-use-Gradle?">How to use Gradle?</a></li>
<li><a href="#Pitfalls-when-use-Gradle">Pitfalls when use Gradle</a></li>
<li><a href="#Best-pratice-of-Gradle">Best pratice of Gradle</a></li>
</ol>
<a id="more"></a>
<h2 id="What’s-the-Gradle"><a href="#What’s-the-Gradle" class="headerlink" title="What’s the Gradle?"></a>What’s the Gradle?</h2><blockquote>
<p>Gradle 是以Groovy为基础，面向java应用，基于DSL语法的自动化构建工具。是google引入，替换ant和maven的新工具，其依赖兼容maven和ivy。</p>
</blockquote>
<p>Gradle（英[g’reɪdl]）是一个任务驱动型的构建工具，是一个依赖管理工具，更是一个编程框架。<br>它抛弃了基于XML的各种繁琐配置，取而代之的是一种基于Groovy的内部领域特定（DSL）语言。<br>在android studio中，我们使用这个工具可以完成app的编译打包等工作。</p>
<h3 id="Basic-Gradle-Component"><a href="#Basic-Gradle-Component" class="headerlink" title="Basic Gradle Component"></a>Basic Gradle Component</h3><p>每一个build.gradle文件代表着一个Project。Tasks在build.gradle中定义。当初始化构建进程时，gradle会基于build文件，集合所有的Project和Tasks,一个Tasks包含了一系列动作，然后它们将会按照顺序执行，一个动作就是一段被执行的代码，很像Java中的方法。</p>
<blockquote>
<p>Gradle实际上是一个容器，实现真正的功能的都是Gradle的插件Plugin，而Plugin中又定义了各式各样的Task，这一个个的Task是执行任务的基本单元。</p>
</blockquote>
<h4 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h4><p>每一个待编译的工程（可以是一个jar包，一个web应用，或者一个android app等）都称为一个Project。</p>
<h4 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h4><p>每一个Project在构建的时候都包含一系列的Task。一个Task其实就是构建过程中一个原子性的操作。比如一个Android APK的编译可能包含：</p>
<ul>
<li>Java源码编译Task、</li>
<li>资源编译Task、</li>
<li>JNI编译Task、</li>
<li>lint检查Task、</li>
<li>打包生成APK的Task、</li>
<li>签名Task等。</li>
</ul>
<h3 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h3><p>Gradle是一个框架，作为框架，它负责定义流程和规则。而具体的编译工作则是通过插件的方式来完成的。比如编译Java有Java插件，编译Groovy有Groovy插件，编译Android APP有Android APP插件，编译Android Library有Android Library插件。<br>简单来说，插件就是一系列任务的集合，主要作用是把一些重复利用的逻辑打包，这样就可以在不同的项目中可以重复的使用。<br>要使用插件，可以通过引入依赖的方式添加。</p>
<h2 id="Why-use-Gradle"><a href="#Why-use-Gradle" class="headerlink" title="Why use Gradle?"></a>Why use Gradle?</h2><p>From mobile apps to microservices, from small startups to big enterprises, Gradle helps teams build, automate and deliver better software, faster.</p>
<h3 id="Build-Anything"><a href="#Build-Anything" class="headerlink" title="Build Anything"></a>Build Anything</h3><p><img src="https://gradle.org/images/homepage/build-anything.png" alt=""><br>Write in Java, C++, Python or your language of choice. Package for deployment on any platform. Go monorepo or multi-repo. And rely on Gradle’s unparalleled versatility to build it all.</p>
<h3 id="Automate-Everything"><a href="#Automate-Everything" class="headerlink" title="Automate Everything"></a>Automate Everything</h3><p><img src="https://gradle.org/images/homepage/automate-everything.png" alt=""><br>Use Gradle’s rich API and mature ecosystem of plugins and integrations to get ambitious about automation. Model, integrate and systematize the delivery of your software from end to end.</p>
<h3 id="Deliver-Faster"><a href="#Deliver-Faster" class="headerlink" title="Deliver Faster"></a>Deliver Faster</h3><p><img src="https://gradle.org/images/homepage/deliver-faster.png" alt=""><br>Scale out development with elegant, blazing-fast builds. From compile avoidance to advanced caching and beyond, we pursue performance relentlessly so your team can deliver continuously.</p>
<h3 id="Goals-of-the-new-Build-System（使用gradle的目的）"><a href="#Goals-of-the-new-Build-System（使用gradle的目的）" class="headerlink" title="Goals of the new Build System（使用gradle的目的）"></a>Goals of the new Build System（使用gradle的目的）</h3><ol>
<li>Make it easy to reuse code and resources</li>
<li>Make it easy to create several variants of an 3. application, either for multi-apk distribution or for different flavors of an application</li>
<li>Make it easy to configure, extend and customize the build process</li>
<li>Good IDE integration</li>
</ol>
<p>使用gradle的目的:<br>更容易重用资源和代码;<br>可以更容易创建不同的版本的程序，多个类型的apk包；<br>更容易配置，扩展;<br>更好的IDE集成；</p>
<h2 id="How-to-use-Gradle"><a href="#How-to-use-Gradle" class="headerlink" title="How to use Gradle?"></a>How to use Gradle?</h2><p>首先明确gradle跟maven一样，也有一个配置文件，maven里面是叫pom.xml，而在gradle中是叫build.gradle。Android Studio中的android项目通常至少包含两个build.gradle文件，一个是project范围的，另一个是module范围的，由于一个project可以有多个module，所以每个module下都会对应一个build.gradle。这么说有点抽象，看下面这个图：<br><img src="http://upload-images.jianshu.io/upload_images/1540618-748838a135f668f7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="Gradle-Android插件用户指南翻译"><a href="#Gradle-Android插件用户指南翻译" class="headerlink" title="Gradle Android插件用户指南翻译"></a>Gradle Android插件用户指南翻译</h3><p>Gradle Plugin User Guide 官方原文地址<br><a href="http://tools.android.com/tech-docs/new-build-system/user-guide" target="_blank" rel="external">http://tools.android.com/tech-docs/new-build-system/user-guide</a></p>
<p>中文版在线阅读地址<br><a href="http://avatarqing.github.io/Gradle-Plugin-User-Guide-Chinese-Verision" target="_blank" rel="external">http://avatarqing.github.io/Gradle-Plugin-User-Guide-Chinese-Verision</a></p>
<blockquote>
<p>简单来说有以下几点：</p>
<ol>
<li>独立项目，和Google无关</li>
<li>Gradle基于Groovy。（Maven、Ant基于xml）</li>
<li>Groovy是拓展了Java语言的一种动态语言，语法更简洁，可以作为Java平台的脚本语言使用 ，拥有类似Python、Ruby和Smalltalk中的一些特性。</li>
<li>Gradle是基于Groovy定义了一套DSL，所谓DSL(领域专用语言)，就是专门针对某一特定问题的计算机语言。而Gradle我们可以认为是经过“定制”的Groovy，专门用于项目构建的语言。</li>
<li>Gradle兼容Maven、Ant</li>
<li>Gradle 的推出主要以 Java 应用为主，当然还支持 Android、C、C++等。</li>
</ol>
</blockquote>
<h3 id="As如何依赖Gradle让Gradle作为自身的构建工具呢？"><a href="#As如何依赖Gradle让Gradle作为自身的构建工具呢？" class="headerlink" title="As如何依赖Gradle让Gradle作为自身的构建工具呢？"></a>As如何依赖Gradle让Gradle作为自身的构建工具呢？</h3><blockquote>
<p>答：Google开发了一个Gradle插件，让As项目依赖这个插件，就相当于让Gradle作为自身的的构建工具。</p>
</blockquote>
<p>现在比如我们新建一个As项目，打开项目的根目录的gradle.build文件。有如下代码：</p>
<p>project下的build.gradle是基于整个project的配置，主要配置gradle 版本及 全局依赖仓库、库或者其他全部参数。<br>android studio 现在重要仓库采用jcenter(),之前版本放在mavenCentral。<br>另外有时还没有加入jcenter()仓库的第三方库，也需要在这里配置他们的库地址。<br>需要在这里配置，才能将第三方库拉下来</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter() <span class="comment">//表示编译过程中依赖的仓库</span></div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">      <span class="comment">//依赖android开发使用的gradle插件</span></div><div class="line">      classpath <span class="string">'com.android.tools.build:gradle:2.2.0'</span>    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而要引入Android APP插件，就需要在build.gradle引用Android APP插件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//申明使用插件，表明要编译的内容和产物</span></div><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line"><span class="comment">//配置插件属性</span></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">24</span></div><div class="line">    buildToolsVersion <span class="string">"24.0.1"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"zhj.gradledemo"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">24</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">     &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">         release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Android其实就是写了两个插件：<br>com.android.application和com.android.library。<br>应用这两个插件就可以实现Android APP和Android Library的构建。</p>
<h3 id="As项目中的Gradle"><a href="#As项目中的Gradle" class="headerlink" title="As项目中的Gradle"></a>As项目中的Gradle</h3><h4 id="gradle文件夹"><a href="#gradle文件夹" class="headerlink" title=".gradle文件夹"></a>.gradle文件夹</h4><p>.gradle文件夹 是gradle 运行以后生成的缓存文件夹。</p>
<h4 id="Project中的build-gradle文件"><a href="#Project中的build-gradle文件" class="headerlink" title="Project中的build.gradle文件"></a>Project中的build.gradle文件</h4><p>project下的build.gradle是基于整个project的配置，主要配置gradle 版本及 全局依赖仓库、库或者其他全部参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        <span class="comment">//这里依赖的jcenter仓库是gradle脚本自身需要的资源</span></div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.2.0'</span></div><div class="line"></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class="line">        <span class="comment">// in the individual module build.gradle files</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        <span class="comment">//这里依赖的jcenter仓库是项目所有模块需要的资源</span></div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">task <span class="title">clean</span><span class="params">(type: Delete)</span> </span>&#123;</div><div class="line">    delete rootProject.buildDir</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="module中build-gradle文件"><a href="#module中build-gradle文件" class="headerlink" title="module中build.gradle文件"></a>module中build.gradle文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//申明使用插件，表明要编译的内容和产物</span></div><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">24</span></div><div class="line">    buildToolsVersion <span class="string">"24.0.1"</span></div><div class="line">     <span class="comment">//默认配置，会同时应用到debug和release版本上</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"zhj.gradledemo"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">24</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled <span class="keyword">true</span>  <span class="comment">//是否混淆</span></div><div class="line">            <span class="function">proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro' <span class="comment">//混淆文件的位置</span></span></div><div class="line">        &#125;</div><div class="line">        debug &#123;</div><div class="line">            minifyEnabled <span class="keyword">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 多渠道</span></div><div class="line">    productFlavors &#123;</div><div class="line">        <span class="comment">//可以设置不同渠道渠道号，应用名称</span></div><div class="line">        pro &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        fre &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//依赖第三方库</span></div><div class="line">dependencies &#123;</div><div class="line">    <span class="comment">//编译libs目录下所以jar包</span></div><div class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(include: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</span>  <span class="comment">//导入所有的jar包</span></span></div><div class="line">    <span class="title">androidTestCompile</span><span class="params">(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span></div><div class="line">        exclude group: <span class="string">'com.android.support'</span>, <span class="keyword">module</span>: <span class="string">'support-annotations'</span></div><div class="line">    &#125;)</div><div class="line">    compile 'com.android.support:appcompat-v7:24.2.0'</div><div class="line">    compile 'com.android.support:design:24.2.0'</div><div class="line">    testCompile 'junit:junit:4.12'</div><div class="line">    proCompile 'com.android.support:recyclerview-v7:24.2.0'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Project中setting-gradle"><a href="#Project中setting-gradle" class="headerlink" title="Project中setting.gradle"></a>Project中setting.gradle</h4><p>这个文件是全局的项目配置文件，里面主要声明Project中所包括的所有module</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一个Project中所包括的所有module</span></div><div class="line">include <span class="string">':Gotobus'</span>, <span class="string">':android-support-v7-appcompat'</span></div><div class="line">include <span class="string">':google-play-services_lib'</span></div><div class="line">include <span class="string">':TakeTours'</span></div><div class="line">include <span class="string">':Common'</span></div><div class="line">include <span class="string">':CompanyCommon'</span></div></pre></td></tr></table></figure>
<h4 id="Project中gradle-properties"><a href="#Project中gradle-properties" class="headerlink" title="Project中gradle.properties"></a>Project中gradle.properties</h4><p>gradle.properties为gradle的配置文件，里面可以定义一些常量供build.gradle使用，比如可以配置签名相关信息如keystore位置，密码，keyalias等,build.gradle就可以直接引用<br>gradle 中的一些配置参数建议写到gradle.properties</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//编译版本信息</span></div><div class="line">APPLICATION_ID = com.jin.myAPP</div><div class="line">COMPILE_SDK_VERSION = <span class="number">23</span></div><div class="line">BUILD_TOOLS_VERSION = <span class="number">23.0</span>.1</div><div class="line">MIN_SDK_VERSION = <span class="number">15</span></div><div class="line">TARGET_SDK_VERSION = <span class="number">1</span></div><div class="line">VERSION_CODE = <span class="number">1</span></div><div class="line">VERSION_NAME = <span class="number">1.0</span>.0.0</div><div class="line"></div><div class="line"><span class="comment">//keystore信息</span></div><div class="line">STORE_FILE = ../app/mykey.keystore</div><div class="line">STORE_PASSWORD = your password</div><div class="line">KEY_ALIAS = your alias</div><div class="line">KEY_PASSWORD = your password</div></pre></td></tr></table></figure>
<h4 id="配置应用的签名信息"><a href="#配置应用的签名信息" class="headerlink" title="配置应用的签名信息"></a>配置应用的签名信息</h4><p>在android.signingConfigs{}下定义一个或者多个签名信息，然后在buildTypes{}配置使用即可。比如这里</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line"></div><div class="line">    signingConfigs &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"release.keystore"</span>)</span></span></div><div class="line">            keyAlias "release"</div><div class="line">            keyPassword "123456"</div><div class="line">            storePassword "123456"</div><div class="line">        &#125;</div><div class="line">        debug &#123;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            signingConfig signingConfigs.release</div><div class="line">        &#125;</div><div class="line">        debug &#123;</div><div class="line">            signingConfig signingConfigs.debug</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>storeFile是签名证书文件，keyAlias是别名，keyPassword是key的密码，storePassword是证书的密码。配置好相关信息即可在buildTypes配置使用。</p>
<p>一般重要的信息，例如签名信息，可以直接将信息写到gradle.properties，然后在build.gradle中引用即可。</p>
<p>buildTypes是指建构的类型，一般只用两种默认类型 debug 和 release ，顾名思义 debug 用来配置开发过程中的一些内容；release 用来配置正式发布版本的内容。有时我们需要发布介于debug与release之间的preview 版本。</p>
<h3 id="Build-Variant-差异管理"><a href="#Build-Variant-差异管理" class="headerlink" title="Build Variant 差异管理"></a>Build Variant 差异管理</h3><p>比如app生成不同版本（免费，收费），适配特殊机型，多渠道等需要发多个包，最终能编译出的apk的数量是由Product Flavor（产品种类）与Build Type（构建类型）决定的，<br>公式：Build Variant = Build Type x Product Flavor</p>
<h4 id="BuildType（构建类型）"><a href="#BuildType（构建类型）" class="headerlink" title="BuildType（构建类型）"></a>BuildType（构建类型）</h4><p>默认有debug和release两种，标示编译的类型，通常在混淆代码、可调式、资源压缩上做一些区分。</p>
<h4 id="Product-Flavor（产品种类）"><a href="#Product-Flavor（产品种类）" class="headerlink" title="Product Flavor（产品种类）"></a>Product Flavor（产品种类）</h4><p>为了满足“同一个project，根据一个很小的区分，来打不同的包”这个需求。实现多渠道打包。注意:这里的Flavor名如果是数字开头，必须用引号引起来。</p>
<h3 id="调整module的目录结构sourceSets"><a href="#调整module的目录结构sourceSets" class="headerlink" title="调整module的目录结构sourceSets"></a>调整module的目录结构sourceSets</h3><p>默认情况下，java文件和resource文件分别在src/main/java和src/main/res目录下，在build.gradle文件的andorid{}里面添加下面的代码，便可以将java文件和resource文件放到src/java和src/resources目录下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">        main &#123;</div><div class="line">            manifest.srcFile <span class="string">'AndroidManifest.xml'</span></div><div class="line">            <span class="comment">//设置java文件的位置</span></div><div class="line">            java.srcDirs = [<span class="string">'src'</span>]</div><div class="line">            resources.srcDirs = [<span class="string">'src'</span>]</div><div class="line">            aidl.srcDirs = [<span class="string">'src'</span>]</div><div class="line">            renderscript.srcDirs = [<span class="string">'src'</span>]</div><div class="line">            res.srcDirs = [<span class="string">'res'</span>]</div><div class="line">            assets.srcDirs = [<span class="string">'assets'</span>]</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="全局变量定义及引用"><a href="#全局变量定义及引用" class="headerlink" title="全局变量定义及引用"></a>全局变量定义及引用</h3><p>可以在顶层build.gradle脚本中定义一些全局变量，提供给子脚本引用<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> ext &#123;</div><div class="line">    <span class="comment">// global variables definition</span></div><div class="line">    compileSdkVersion = <span class="string">'Google Inc.:Google APIs:23'</span></div><div class="line">    buildToolsVersion = <span class="string">"23.0.3"</span></div><div class="line">    minSdkVersion = <span class="number">14</span></div><div class="line">    targetSdkVersion = <span class="number">23</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 子脚本引用</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> android &#123;</div><div class="line">    compileSdkVersion rootProject.ext.compileSdkVersion</div><div class="line">    buildToolsVersion rootProject.ext.buildToolsVersion</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        minSdkVersion rootProject.ext.minSdkVersion</div><div class="line">        targetSdkVersion rootProject.ext.targetSdkVersion</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Gradle常用命令介绍"><a href="#Gradle常用命令介绍" class="headerlink" title="Gradle常用命令介绍"></a>Gradle常用命令介绍</h3><p>打开Android Studio内置的Terminal终端，输入如下命令</p>
<blockquote>
<p>gradlew -v</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1877523-1d659e89e94e09ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>指令代码    指令功能<br>gradlew    下载更新gradle<br>gradlew -v    查询版本号<br>gradlew clean    清理项目的output文件<br>gradlew check    运行检测和测试任务<br>gradlew build    运行check和assemble,检查依赖并编译打包（debug、release环境的包）<br>gradlew clean build    运行 clean 和 build 两个 gradle task<br>gradlew assemble    编译并打Debug和Release包<br>gradlew assembleDebug    编译并把本项目下所有模块所有渠道的Debug版本打包<br>gradlew assembleRelease    编译并把本项目下所有模块所有渠道的Release版本打包<br>gradlew assembleWandoujia    生成wandoujia渠道的Release和Debug版本<br>gradlew assembleWandoujiaRelease    打包wandoujia渠道的Release版本<br>gradlew assembleWandoujiaRelease -p app    打包app工程下wandoujia渠道的Release版本（使用-p选项，决定执行哪个工程）<br>gradlew installRelease    Release模式打包并安装<br>gradlew uninstallRelease    卸载Release模式包</p>
<p><strong>gradlew代表 gradle wrapper</strong>，意思是gradle的一层包装，大家可以理解为在这个项目本地就封装了gradle，即gradle wrapper。<br>在./gradle/wrapper/gralde-wrapper.properties文件中声明了它指向的目录和版本。只要下载成功即可用grdlew wrapper的命令代替全局的gradle命令。</p>
<p>assemble 命令创建task有如下语法：</p>
<p>允许直接构建一个Variant版本，例如assembleFlavor1Debug。<br>允许构建指定Build Type的所有APK，例如assembleDebug将会构建Flavor1Debug和Flavor2Debug两个Variant版本。<br>允许构建指定flavor的所有APK，例如assembleFlavor1将会构建Flavor1Debug和Flavor1Release两个Variant版本。</p>
<h3 id="批量修改生成的apk文件名"><a href="#批量修改生成的apk文件名" class="headerlink" title="批量修改生成的apk文件名"></a>批量修改生成的apk文件名</h3><p>在我们打包发版的时候，一次性打几十个包，这时候我们就想让生成的apk文件名有区分，比如一眼就能看出这个apk是哪个版本的，哪个渠道的，是哪天打的包等等，这就需要我们在生成apk文件的时候动态修改生成的apk文件名达到这一目的。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">def buildTime() &#123;</div><div class="line">    def date = new Date()</div><div class="line">    def formattedDate = date.format(&apos;yyyyMMdd&apos;)</div><div class="line">    return formattedDate</div><div class="line">&#125;</div><div class="line"></div><div class="line">android &#123;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            applicationVariants.all &#123; variant -&gt;</div><div class="line">                variant.outputs.each &#123; output -&gt;</div><div class="line">                    if (output.outputFile != null &amp;&amp; output.outputFile.name.endsWith(&apos;.apk&apos;)</div><div class="line">                        &amp;&amp;&apos;release&apos;.equals(variant.buildType.name)) &#123;</div><div class="line">                        def apkFile = new File(</div><div class="line">                                output.outputFile.getParent(),</div><div class="line">                                &quot;Gtobus_$&#123;variant.flavorName&#125;_v$&#123;variant.versionName&#125;_$&#123;buildTime()&#125;.apk&quot;)</div><div class="line">                        output.outputFile = apkFile</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以baidu渠道为例，以上的代码会生成一个名字为Gtobus__gotobus_v5.1.2_20161115.apk安装包。</p>
<p>这里是循环处理每个applicationVariant，当他们的输出文件名以apk结尾并且buildType是release时，重新设置新的输出文件名，这样就达到了我们批量修改生成的文件名的目的。</p>
<h2 id="Pitfalls-when-use-Gradle"><a href="#Pitfalls-when-use-Gradle" class="headerlink" title="Pitfalls when use Gradle"></a>Pitfalls when use Gradle</h2><h3 id="项目中的问题"><a href="#项目中的问题" class="headerlink" title="项目中的问题"></a>项目中的问题</h3><p>android studio的编译时屏蔽掉lint检查，可以避免由于编译条件太过严格而编译不过的问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lintOptions &#123;</div><div class="line">    abortOnError false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果遇到多个jar包中的某个文件冲突，可以在对应module下的build.gradle文件的android标签下加上如下属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">packagingOptions &#123;</div><div class="line">      exclude &apos;META-INF/NOTICE.txt&apos;// 这里是具体的冲突文件全路径</div><div class="line">      exclude &apos;META-INF/LICENSE.txt&apos;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="资源文件和manifest的合并"><a href="#资源文件和manifest的合并" class="headerlink" title="资源文件和manifest的合并"></a>资源文件和manifest的合并</h3><p>资源和mainfests的优先级是这样的：<br><img src="http://upload-images.jianshu.io/upload_images/1877523-2d02903a027a69f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>如果一个资源在main中和在flavor中定义了，那么那个在flavor中的资源有更高的优先级。这样那个在flavor文件夹中的资源将会被打包到apk。而在依赖项目申明的资源总是拥有最低优先级。</p>
<h2 id="Best-pratice-of-Gradle"><a href="#Best-pratice-of-Gradle" class="headerlink" title="Best pratice of Gradle"></a>Best pratice of Gradle</h2><h3 id="Gradle编译优化"><a href="#Gradle编译优化" class="headerlink" title="Gradle编译优化"></a>Gradle编译优化</h3><p>在添加依赖的时候尽量明确版本号，省去gradle查找最新版的时间<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">不要使用</div><div class="line">compile ‘com.facebook.fresco:fresco:latest’</div><div class="line">compile ‘com.facebook.fresco:fresco:<span class="number">1</span>.+’，</div></pre></td></tr></table></figure></p>
<h3 id="使用daemon"><a href="#使用daemon" class="headerlink" title="使用daemon"></a>使用daemon</h3><p>构建初始化的很多工作是关于java虚拟机的启动，加载虚拟机环境，加载class文件等，如果这些动作交给一个单独的后台进程去做，那么，第一次初始化之后的修改代码再构建是不是可以节省很多时间呢？答案是肯定的，通过在gradle.properties加入这样一句来开启，如果想让修改全局所有项目都生效，那么修改这个文件~/.gradle/gradle.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.gradle.daemon=true</div></pre></td></tr></table></figure></p>
<h3 id="并行构建模块化项目"><a href="#并行构建模块化项目" class="headerlink" title="并行构建模块化项目"></a>并行构建模块化项目</h3><p>将你的项目拆分成多个子项目并开启并行构建也是一个不错的主意，比如将相对独立的模块拆分成独立的库工程(Library projects)，主工程(Application project)依赖这些库工程，这样的话，开启并行构建才会发挥作用。并行构建开启方式是修改文件gradle.properties，加入如下行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.gradle.parallel=true</div></pre></td></tr></table></figure></p>
<h3 id="ext配置全局参数"><a href="#ext配置全局参数" class="headerlink" title="ext配置全局参数"></a>ext配置全局参数</h3><p>project的build.gradle中的ext可以为各位module进行全局配置参数，防止各个module之间的不统一，不可控。而且当我们升级sdk、build tool、target sdk等，几个module都要更改，非常的麻烦。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">    compileSdkVersion = 22</div><div class="line">    buildToolsVersion = &quot;23.0.1&quot;</div><div class="line">    minSdkVersion = 10</div><div class="line">    targetSdkVersion = 22</div><div class="line">    versionCode = 34</div><div class="line">    versionName = &quot;v2.6.1&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在各自module的build.gradle中引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line"></div><div class="line">    compileSdkVersion rootProject.ext.compileSdkVersion</div><div class="line"></div><div class="line">    buildToolsVersion rootProject.ext.buildToolsVersion</div><div class="line"></div><div class="line">   defaultConfig &#123;</div><div class="line"></div><div class="line">      applicationId &quot;com.xxx.xxx&quot;</div><div class="line"></div><div class="line">      minSdkVersion rootProject.ext.minSdkVersion</div><div class="line"></div><div class="line">      targetSdkVersion rootProject.ext.targetSdkVersion</div><div class="line"></div><div class="line">      versionCode rootProject.ext.versionCode</div><div class="line"></div><div class="line">      versionName rootProject.ext.versionName</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="resValue-定义资源"><a href="#resValue-定义资源" class="headerlink" title="resValue 定义资源"></a>resValue 定义资源</h3><p>例如resValue “string” 就是字符串资源，可以用R.String 来引用对应的字符串资源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">     defaultConfig &#123;</div><div class="line">         resValue &quot;string&quot;, &quot;build_time&quot;, buildTime()</div><div class="line">         resValue &quot;string&quot;, &quot;build_host&quot;, hostName()</div><div class="line">         resValue &quot;string&quot;, &quot;build_revision&quot;, revision()</div><div class="line">      &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line">  def buildTime() &#123;</div><div class="line">     return new Date().format(&quot;yyyy-MM-dd HH:mm:ss&quot;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  def hostName() &#123;</div><div class="line">     return System.getProperty(&quot;user.name&quot;) + &quot;@&quot; +InetAddress.localHost.hostName</div><div class="line">   &#125;</div><div class="line"></div><div class="line">  def revision() &#123;</div><div class="line">    def code = new ByteArrayOutputStream()</div><div class="line">       exec &#123;</div><div class="line">          commandLine &apos;git&apos;, &apos;rev-parse&apos;, &apos;--short&apos;, &apos;HEAD&apos;</div><div class="line">          standardOutput = code</div><div class="line">        &#125;</div><div class="line">    return code.toString()</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="属性默认值"><a href="#属性默认值" class="headerlink" title="属性默认值"></a>属性默认值</h3><p>如果某个属性的值没有使用DSL设置，这个属性将会使用某些默认值，下表展示了默认值的处理过程。</p>
<p>属性名    DSL对象中的默认值   默认值</p>
<p>Property Name     Default value in DSL object     Default value<br>versionCode     -1     value from manifest if present<br>versionName     null     value from manifest if present<br>minSdkVersion     -1     value from manifest if present<br>targetSdkVersion     -1     value from manifest if present<br>applicationId     null     value from manifest if present<br>testApplicationId     null     applicationId + “.test”<br>testInstrumentationRunner     null     android.test.InstrumentationTestRunner<br>signingConfig     null     null<br>proguardFile     N/A (set only)     N/A (set only)<br>proguardFiles     N/A (set only)     N/A (set only)</p>
<p>如果你想在build脚本中使用自定义的逻辑来查询这些属性，第二列中的值就很重要。比如，你可以编写如下的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (android.defaultConfig.testInstrumentationRunner == <span class="keyword">null</span>) &#123;  </div><div class="line">   <span class="comment">// assign a better default...  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果属性的值仍然是null，那么在构建的时候，就会使用第三列的默认值，但是DSL元素中并不包含这些默认值，因此你不能在程序中查询这些值。这样做的目的是仅在必要的时候（构建时）才会去解析manifest内容。</p>
<h3 id="Android-Studio编译慢、卡死和狂占内存怎么破？"><a href="#Android-Studio编译慢、卡死和狂占内存怎么破？" class="headerlink" title="[Android Studio编译慢、卡死和狂占内存怎么破？"></a>[Android Studio编译慢、卡死和狂占内存怎么破？</h3><p>](<a href="https://www.zhihu.com/question/27953288" target="_blank" rel="external">https://www.zhihu.com/question/27953288</a>)</p>
<p>gradle 构建一个工程主要分为三部分（完全掌握了下面这张图，整个 gradle 的构建过程能了解个十之七八了）：<br><img src="https://pic2.zhimg.com/f084c5f0953eb2792d929dd6738822b5_b.png" alt=""></p>
<ol>
<li><p>初始化阶段：主要是解析 setting.gradle 文件（因此有人提到减少 setting.gradle 的 module 数量，是很有道理的，但是实际操作过程限制颇多，原因最后会大致说一下）；</p>
</li>
<li><p>读取配置阶段：主要是解析所有的 projects 下的 build.gradle 文件，包括 rootProject 和其他的 subprojects（子项目），检查语法，确定 tasks 依赖以建立 task 的有向无循环图，检查 task 里引用的文件目录是否存在等（这一步也进一步验证了减少 setting.gradle 里的 module 数量可以加快编译速度，因为减少一个 module ，需要解析的 build.gradle 文件就减少一个，第 3 步里就不会执行本属于这个 module 的任务了，但是还是 1 里面说的问题，限制颇多）；</p>
</li>
<li><p>执行阶段：按照 2 中建立的有向无循环图来执行每一个 task ，整个编译过程中，这一步基本会占去 9 成以上的时间，尤其是对于 Android 项目来讲，将 java 转为 class compileDebugJavaWithJavac/compileReleaseJavaWithJavac<br>和 将 class 合并成 dex transformClassesWithDexForDebug/transformClassesWithDexForRelease<br>这两步很耗时，第一步还好，第二步会耗时非常久。首先在 gradle.properties 里设置 org.gradle.jvmargs=-Xmx4096m //越大越好<br>，然后在工程的 build.gradle 里的 android 结点下增加 dexOptions 配置，如下：dexOptions {<br> dexInProcess true<br> preDexLibraries true<br> javaMaxHeapSize “4g”//越大越好<br> incremental true<br>}</p>
</li>
</ol>
<p>明确了 gradle 的生命周期，那么就可以看到加快编译速度的关键就是从第三步入手，当然，减少 setting.gradle 里的 modules 数量这一步也是必须的。下面说说我们公司的实践吧。项目插件化改造，每位业务上的同学只需要编译一个模块即可，这一点基本上从根本上解决了编译慢的问题（对于大多数没有插件化需求的朋友们可以看下面的一些实践），首先 setting.gradle 里的 module 只有自己开发的模块了，而对应的执行阶段的任务也只有这一个 module 的任务了。执行一次 gradle build ，我们就会发现，在这个过程中，其实是执行了多次打包任务的，在 buildTypes 里配置了多个编译打包类型，默认有 debug 和 release ，我们还可以手动配置其他的类型，而且还有 productFlavor 里的多渠道，这样就会执行多次编译打包，而正常开发过程中，只需要打  debug 包去调试，因此使用 gradle assembleDebug 即可，等发版的时候使用其他方式去打多渠道的包（如美团的方案<a href="http://tech.meituan.com/mt-apk-packaging.html）；" target="_blank" rel="external">http://tech.meituan.com/mt-apk-packaging.html）；</a></p>
<p>既然编译主要时间都集中在 gradle 生命周期的第三步执行 task 任务里，那么我们就可以把一些无关紧要的任务给禁用掉，比如各种 Test ，各种 lint 等，刚好在 gradle 里有这样的指令 -x lint 可以临时禁掉 lint 任务，-x test 可以禁掉 test 任务，事实上对于一个稍微大一点的项目，lint 也是很耗时的，当然也可以通过 gradle 脚本彻底禁用 lint 和 test 任务，我也在一些微信群里分享过相关代码，但是不太建议这么做，因为有时候 lint 和 test 也是挺有用的；gradle 本身提供了一些指令参数可以加快编译，比如 –daemon ，开启守护进程，–parallel ，开启并行编译等，这个也可以在 gradle.propertites 里配置（编译使用的 jvm 内存也可以在这里配置）。定制 gradle 编译流程，利用官方提供的 API 完全可以定制一个适合自己的编译流程，可以参考一下携程的 DynamicAPK/sub-project-build.gradle at master · CtripMobile/DynamicAPK · GitHub，里面有携程他们自己整个完整的编译流程，脚本本身很简单，一共只有两三百行代码。</p>
<p>上面讲到的几点，现有环境就可以做到的大概是这样（有一点要特别注意，如果工程里有交叉依赖，一定不要使用 –parallel 参数）：gradle assembleDebug –daemon –parallel -x lint -x test<br> ，如果是要直接安装到设备上的话，就把  assembleDebug 换成 installDebug ，assembleDebug 可以简写为 asD ，installDebug 可以简写为 iD 。最后讲一下，为什么减少 setting.gradle 里的 module 数量，确实可以加快编译，但是却限制颇多呢？首先，我们想一下整个编译过程，先去解析 gradle 配置，建立 tasks 依赖有向图，然后再去执行每一个 module 的 task ，如果我们通过 maven 依赖，使用 aar 替掉了 module（单指 android library），如果我们要改这个 module 里的文件，岂不是每次都要修改上传再下载，这其实还好，但是有一个致命的问题：不修改版本号的话，SNAPSHOT 在 IDEA 里经常会不好使。这样就导致修改的东西会不生效，去解决这个问题是非常耗费时间的。不过有一种方式，可以一定程度上解决问题，增加下面的脚本：project.configurations.all(new Action<configuration>() {<br>@Override<br>    void execute(Configuration files) {<br>        files.resolutionStrategy.cacheDynamicVersionsFor(5, TimeUnit.MINUTES)<br>        files.resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS)<br>    }<br>})</configuration></p>
<p>那有人会问，插件化里，每个人开发一个模块，对于每个模块的维护不也是要打包上传到 maven ，每次一有修改，哪怕是非常微小的修改，也要做一次上传，同样会遇到 SNAPSHOT 不好使的问题。嘿嘿，这个问题嘛，我司自己维护了一个 gradle 插件，已经解决了，至于解决方案，是公司机密，我是不会讲的。然后，还有一点，我相信大部分开发者平常开发都是单 module 的，多 module 的情况并不多，因此大多数依赖基本也都是 aar 或者 jar ，根本就不存在所谓的将 library 转成 aar 上传的情况，因此一些答主说的根本毫无意义，这也是为什么我会说影响编译速度的情况主要集中在 gradle 生命周期的第三个阶段，至于第三个阶段的优化，看我上面的答案就好了。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://www.lcode.org/%E4%BC%98%E9%9B%85%E7%9A%84android-studio%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE-%E5%B8%B8%E7%94%A8%E5%BA%93%E5%92%8C%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/" target="_blank" rel="external">优雅的Android Studio项目配置–常用库和版本管理</a><br>[2]<a href="http://www.ratdream.com/2016/09/09/%E4%BC%98%E9%9B%85%E7%9A%84%E7%AE%A1%E7%90%86%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/" target="_blank" rel="external">优雅的管理第三方库</a><br>[3]<a href="http://www.jianshu.com/p/88fb3876d92d" target="_blank" rel="external">Gradle从入门到了解</a><br>[4]<a href="http://www.jianshu.com/p/9dcec4a14c52" target="_blank" rel="external">Gradle for Android 问题总结</a><br>[5]<a href="https://www.gitbook.com/book/dongchuan/gradle-user-guide-/details" target="_blank" rel="external">Gradle User Guide 中文版</a><br>[6]<a href="http://unclechen.github.io/2015/10/22/Android-Studio-Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%A4%9A%E6%B8%A0%E9%81%93%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85+%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86/" target="_blank" rel="external">Android Studio Gradle实践之多渠道自动化打包+版本号管理</a><br>[7]<a href="http://blog.csdn.net/lzyzsd/article/category/2795779" target="_blank" rel="external">深入浅出Android Gradle构建系统</a><br>[8]<a href="http://www.jianshu.com/p/b2c3192c2c1d" target="_blank" rel="external">在Android Studio中建立和维护团队通用库</a><br>[9]<a href="http://www.jianshu.com/p/9df3c3b6067a" target="_blank" rel="external">Gradle 完整指南（Android）</a><br>[10]<a href="https://www.gitbook.com/book/dongchuan/gradle-user-guide-/details" target="_blank" rel="external">Gradle User Guide 中文版</a><br>[11]<a href="https://www.zhihu.com/question/27953288" target="_blank" rel="external">Android Studio编译慢、卡死和狂占内存怎么破？
</a>[12]<a href="http://blog.csdn.net/fuchaosz/article/details/51146091" target="_blank" rel="external"> [Android Studio系列(三)]Android Studio 编译、同步慢的解决方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gradle.org/images/homepage/gradle-org-hero.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gradle is a powerful tool than you can image!&lt;br&gt;Accelerate developer productivity&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#What&amp;#39;s-the-Gradle?&quot;&gt;What’s the Gradle?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Why-use-Gradle?&quot;&gt;Why use Gradle?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#How-to-use-Gradle?&quot;&gt;How to use Gradle?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Pitfalls-when-use-Gradle&quot;&gt;Pitfalls when use Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Best-pratice-of-Gradle&quot;&gt;Best pratice of Gradle&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Gradle" scheme="http://ipcreator.me/tags/Gradle/"/>
    
      <category term="Tool" scheme="http://ipcreator.me/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>Permissions on Android</title>
    <link href="http://ipcreator.me/2017/04/02/Program/Android/Design/permission-checker/"/>
    <id>http://ipcreator.me/2017/04/02/Program/Android/Design/permission-checker/</id>
    <published>2017-04-02T06:55:06.000Z</published>
    <updated>2017-04-03T16:30:33.856Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/app-permission_746x545.png" alt=""></p>
<p>Those pitfalls I fall into…</p>
<a id="more"></a>
<h2 id="Conditon"><a href="#Conditon" class="headerlink" title="Conditon"></a>Conditon</h2><ol>
<li>危险权限</li>
<li>Android 版本 &gt;= 6.0</li>
<li>targetSdkVersion &gt;= 23<br>如果项目的targetSdkVersion &lt; 23, 在Android 6.0＋的手机上，会默认给予所有在AndroidManifest.xml中申请的权限。</li>
</ol>
<p>是不是觉得这样就完事大吉了？<br><img src="https://user-gold-cdn.xitu.io/2016/11/29/4e3297fc74ee8cd6e1ef6e5a3254bdea" alt=""></p>
<p>如果用户在应用的权限页面手动收回权限，将会导致应用Crash.💔<br><img src="https://user-gold-cdn.xitu.io/2016/11/29/339bbb1c81518c1bb63fb983b74e50f4" alt=""></p>
<p>稳妥的处理当然是遵循Google的权限申请机制。</p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>为方便开发者实现权限管理，Google提供了4个API:</p>
<ol>
<li>checkSelfPermission( )    判断权限是否具有某项权限</li>
<li>requestPermissions( )    申请权限</li>
<li>onRequestPermissionsResult( )    申请权限回调方法</li>
<li>shouldShowRequestPermissionRationale( )    是否要提示用户申请该权限的缘由</li>
</ol>
<h2 id="Pitfall"><a href="#Pitfall" class="headerlink" title="Pitfall"></a>Pitfall</h2><p>如果用户任性的勾选了“不再询问”，那么在执行requestPermissions( )后，onRequestPermissionsResult( )会永远返回PERMISSION_DENIED，这样应用原本的操作将永远无法执行。</p>
<p><img src="https://user-gold-cdn.xitu.io/2016/11/29/27ce2cc22ce916c83ff8a6a2909a44e9" alt=""></p>
<h2 id="Right-way"><a href="#Right-way" class="headerlink" title="Right way"></a>Right way</h2><h3 id="shouldShowRequestPermissionRationale"><a href="#shouldShowRequestPermissionRationale" class="headerlink" title="shouldShowRequestPermissionRationale( )"></a>shouldShowRequestPermissionRationale( )</h3><p>如果返回为true，一般情况下，应用应该弹出Dialog说明申请该权限的缘由</p>
<p>shouldShowRequestPermissionRationale( )只会在一种情况下返回true</p>
<blockquote>
<p><strong>用户上一次拒绝申请权限，但是并未勾选“不再询问”</strong></p>
</blockquote>
<p>如何判断用户勾选了“不再询问”？<br><img src="" alt=""></p>
<p>从上面的表格可以看出，<u><strong>如果上次shouldShowRequestPermissionRationale( )返回了true，而这次调用该方法返回了false，则说明用户在上次勾选了“不再询问”。此时，我们需要引导用户进入设置界面进行权限授予。</strong></u></p>
<p>由于涉及到上一次调用shouldShowRequestPermissionRationale( )的结果，所以需要将其持久化保存，SharedPreferences或者数据库均可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestPermission</span><span class="params">(Activity activity, <span class="keyword">final</span> String permission)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> flag = ActivityCompat.shouldShowRequestPermissionRationale(activity, permission);</div><div class="line">    <span class="keyword">if</span> (getLastRequestState() &amp;&amp; !flag) &#123;</div><div class="line">        <span class="comment">//当用户勾选`不再询问`时, 进入设置界面</span></div><div class="line">        Uri uri = Uri.fromParts(<span class="string">"package"</span>, <span class="keyword">this</span>.getPackageName(), <span class="keyword">null</span>);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS, uri);</div><div class="line">        startActivityForResult(intent, COME_CODE);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flag) &#123;</div><div class="line">        <span class="comment">//之前有过`拒绝`授权时，提醒用户需要某权限</span></div><div class="line">        showRationaleDialog();</div><div class="line"></div><div class="line">        <span class="comment">//同时保存返回值</span></div><div class="line">        SharedPrefsUtils.setBooleanPreference(getApplicationContext(), KEY_RESUEST_SOME_PERMISSION, flag);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//第一次申请权限时，直接申请权限</span></div><div class="line">        ActivityCompat.requestPermissions(activity, <span class="keyword">new</span> String[]&#123;permission&#125;, REQUEST_PERMISSION_CODE);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>流程图<br><img src="https://user-gold-cdn.xitu.io/2016/11/30/f8a7e90eeeacb4be86e71bd707cb4a01.png" alt=""></p>
<h2 id="Best-Practice"><a href="#Best-Practice" class="headerlink" title="Best Practice"></a>Best Practice</h2><h2 id="Process-Step"><a href="#Process-Step" class="headerlink" title="Process Step"></a>Process Step</h2><p><img src="https://user-gold-cdn.xitu.io/2016/11/29/4d928133e9f88b8dce54b645f38a78fd.png" alt=""></p>
<p>上面的解决方案是可行的，但是每次申请权限需要依赖于上一次调用shouldShowRequestPermissionRationale( )方法的返回值，如果SharedPreferences被修改或者被删除，会影响正常的申请流程。</p>
<p>Google提供了一个非常好的思路，详见<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fgooglesamples%2Feasypermissions" target="_blank" rel="external">EasyPermissions</a> .</p>
<p><img src="" alt=""></p>
<p>EasyPermissions并没有存储上一次shouldShowRequestPermissionRationale( )的返回值，而是<u><strong>在申请权限被拒后调用shouldShowRequestPermissionRationale( )方法，如果此时返回false则说明用户勾选了“不再询问”。</strong></u></p>
<p>简化判断“不再询问”的条件</p>
<blockquote>
<p>1.未获得授权<br>2.shouldShowRequestPermissionRationale( )返回false</p>
</blockquote>
<p><img src="https://user-gold-cdn.xitu.io/2016/11/29/963a5e7a0014edfffb3f5e4b6fd97436.png" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[]<a href="https://juejin.im/entry/58253dfaa22b9d00670c8210" target="_blank" rel="external">Android M 权限最佳实践</a><br>[2]<a href="http://blog.csdn.net/self_study/article/details/50074781" target="_blank" rel="external">android permission权限与安全机制解析（上）</a><br>[3]<a href="http://blog.csdn.net/self_study/article/details/50186435" target="_blank" rel="external">android permission权限与安全机制解析（下）</a><br>[4]<a href="https://github.com/hotchemi/PermissionsDispatcher" target="_blank" rel="external">第三方库PermissionsDispatcher</a><br>[5]<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fgooglesamples%2Feasypermissions" target="_blank" rel="external">EasyPermissions </a><br>[6]<a href="http://www.jianshu.com/p/3e16bda04852" target="_blank" rel="external">Android权限最佳实践</a><br>[7]<a href="http://blog.csdn.net/mzm489321926/article/details/50542065" target="_blank" rel="external">Android如何获取判断是否有悬浮窗权限</a><br><a href="http://www.cnblogs.com/mengdd/p/3824782.html" target="_blank" rel="external">Android悬浮窗实现 使用WindowManager</a><br><a href="https://juejin.im/entry/577f474fa633bd005b0277bb" target="_blank" rel="external">突破小米悬浮窗权限控制 – 不需要权限的悬浮窗</a><br><a href="http://www.jianshu.com/p/167fd5f47d5c" target="_blank" rel="external">Android无需权限显示悬浮窗, 兼谈逆向分析app</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/app-permission_746x545.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Those pitfalls I fall into…&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Best Practice" scheme="http://ipcreator.me/tags/Best-Practice/"/>
    
      <category term="Permission" scheme="http://ipcreator.me/tags/Permission/"/>
    
  </entry>
  
  <entry>
    <title>Keep your Independency</title>
    <link href="http://ipcreator.me/2017/03/31/MyView/Original/keep-your-independency/"/>
    <id>http://ipcreator.me/2017/03/31/MyView/Original/keep-your-independency/</id>
    <published>2017-03-31T12:51:06.000Z</published>
    <updated>2017-03-31T13:13:17.197Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/Be-Real-Be-Yourself.jpg" alt=""></p>
<ol>
<li>Realize your Economic Independency</li>
<li>Keep your Personality Independency</li>
<li>Achieve your Life Goal</li>
<li>Live and Enjoy your Life</li>
</ol>
<a id="more"></a>
<h2 id="Person-vs-Computer"><a href="#Person-vs-Computer" class="headerlink" title="Person vs Computer"></a>Person vs Computer</h2><h3 id="Learning-vs-Charging"><a href="#Learning-vs-Charging" class="headerlink" title="Learning vs Charging"></a>Learning vs Charging</h3><h2 id="Brain-vs-OS"><a href="#Brain-vs-OS" class="headerlink" title="Brain vs OS"></a>Brain vs OS</h2><h3 id="Basic-Concept-vs-Base-Data-Type"><a href="#Basic-Concept-vs-Base-Data-Type" class="headerlink" title="Basic Concept vs Base Data Type"></a>Basic Concept vs Base Data Type</h3><h3 id="Growing-Up-vs-Update-Version"><a href="#Growing-Up-vs-Update-Version" class="headerlink" title="Growing Up vs Update Version"></a>Growing Up vs Update Version</h3><h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><ol>
<li>Do not become a man of lacking safety</li>
<li>Keep far away from the person who lacks safety</li>
<li>Make Happiness basing on your Growing up , not  Comparation of others</li>
<li>Should and Only to be Resposible for your Choose and Behaviour</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/Be-Real-Be-Yourself.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Realize your Economic Independency&lt;/li&gt;
&lt;li&gt;Keep your Personality Independency&lt;/li&gt;
&lt;li&gt;Achieve your Life Goal&lt;/li&gt;
&lt;li&gt;Live and Enjoy your Life&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Android Architecture Blueprints</title>
    <link href="http://ipcreator.me/2017/03/31/Program/Android/Design/architecture-of-android-app/"/>
    <id>http://ipcreator.me/2017/03/31/Program/Android/Design/architecture-of-android-app/</id>
    <published>2017-03-31T08:41:06.000Z</published>
    <updated>2017-03-31T13:13:57.678Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/googlesamples/android-architecture/wiki/images/aab-logo.png" alt=""></p>
<p>The Android framework provides a lot of flexibility in deciding how to organize and architect an Android app. While this freedom is very valuable, it can also lead to apps with large classes, inconsistent naming schemes, as well as mismatching or missing architectures. These types of issues can make testing, maintaining and extending your apps difficult.</p>
<p>The Android Architecture Blueprints project demonstrates strategies to help solve or avoid these common problems. This project implements the same app using different architectural concepts and tools.</p>
<a id="more"></a>
<p>You can use the samples in this project as a learning reference, or as a starting point for creating your own apps. The focus of this project is on demonstrating how to structure your code, design your architecture, and the eventual impact of adopting these patterns on testing and maintaining your app. You can use the techniques demonstrated here in many different ways to build apps. Your own particular priorities will impact how you implement the concepts in these projects, so you should not consider these samples to be canonical examples. To ensure the focus in kept on the aims described above, the app uses a simple UI.</p>
<h2 id="Explore-the-samples"><a href="#Explore-the-samples" class="headerlink" title="Explore the samples"></a>Explore the samples</h2><p>This project hosts each sample app in separate repository branches. For more information, see the <code>README.md</code> file in each branch.</p>
<h3 id="Stable-samples"><a href="#Stable-samples" class="headerlink" title="Stable samples"></a>Stable samples</h3><table>
<thead>
<tr>
<th>Sample</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp/" target="_blank" rel="external">todo‑mvp</a></td>
<td>Demonstrates a basic <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter" target="_blank" rel="external">Model‑View‑Presenter</a> (MVP) architecture and provides a foundation on which the other samples are built. This sample also acts as a reference point for comparing and contrasting the other samples in this project.</td>
</tr>
<tr>
<td><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp-loaders/" target="_blank" rel="external">todo‑mvp‑loaders</a></td>
<td>Fetches data using the <a href="https://developer.android.com/guide/components/loaders.html" target="_blank" rel="external">Loaders API</a>.</td>
</tr>
<tr>
<td><a href="https://github.com/googlesamples/android-architecture/tree/todo-databinding/" target="_blank" rel="external">todo‑databinding</a></td>
<td>Uses the <a href="https://developer.android.com/topic/libraries/data-binding/index.html" target="_blank" rel="external">Data Binding Library</a>.</td>
</tr>
<tr>
<td><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/" target="_blank" rel="external">todo‑mvp‑clean</a></td>
<td>Uses concepts from <a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">Clean Architecture</a>.</td>
</tr>
<tr>
<td><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger/" target="_blank" rel="external">todo‑mvp‑dagger</a></td>
<td>Uses <a href="https://google.github.io/dagger/" target="_blank" rel="external">Dagger2</a> to add support for <a href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="external">dependency injection</a>.</td>
</tr>
</tbody>
</table>
<p><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp-contentproviders/" target="_blank" rel="external">todo‑mvp‑contentproviders</a> | Based on the todo-mvp-loaders sample, this version fetches data using the Loaders API, and also makes use of <a href="https://developer.android.com/guide/topics/providers/content-providers.html" target="_blank" rel="external">content providers</a>. |<br>| <a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp-rxjava/" target="_blank" rel="external">todo‑mvp‑rxjava</a> | Uses <a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a> to implement concurrency, and abstract the data layer. |<br>| <a href="https://github.com/googlesamples/android-architecture/tree/todo-mvvm-databinding/" target="_blank" rel="external">todo‑mvvm‑databinding</a> | Based on the todo-databinding sample, this version incorporates the <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel" target="_blank" rel="external">Model‑View‑ViewModel</a> pattern.|</p>
<h3 id="Samples-in-progress"><a href="#Samples-in-progress" class="headerlink" title="Samples in progress"></a>Samples in progress</h3><table>
<thead>
<tr>
<th>Sample</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/googlesamples/android-architecture/tree/dev-todo-mvp-tablet/" target="_blank" rel="external">dev‑todo‑mvp‑tablet</a></td>
<td>Adds a master and detail view for tablets.</td>
</tr>
<tr>
<td><a href="https://github.com/googlesamples/android-architecture/tree/dev-todo-mvvm-rxjava/" target="_blank" rel="external">dev‑todo‑mvvm‑rxjava</a></td>
<td>Based on the todo-rxjava sample, this version incorporates the <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel" target="_blank" rel="external">Model‑View‑ViewModel</a> pattern.</td>
</tr>
</tbody>
</table>
<p>For information about planned samples, see <a href="https://github.com/googlesamples/android-architecture/issues?q=is%3Aissue+is%3Aopen+label%3A%22New+sample%22" target="_blank" rel="external">“New sample” issues</a>.</p>
<h3 id="External-samples"><a href="#External-samples" class="headerlink" title="External samples"></a>External samples</h3><p><a href="https://github.com/googlesamples/android-architecture/wiki/External-samples" target="_blank" rel="external">External samples</a> are variants that may not be in sync with the rest of the branches in this repository.</p>
<table>
<thead>
<tr>
<th>Sample</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/Syhids/android-architecture/tree/todo-mvp-fragmentless" target="_blank" rel="external">todo‑mvp‑fragmentless</a></td>
<td>Uses <a href="https://developer.android.com/reference/android/view/View.html" target="_blank" rel="external">View</a> objects instead of <a href="https://developer.android.com/reference/android/app/Fragment.html" target="_blank" rel="external">Fragment</a> objects.</td>
</tr>
<tr>
<td><a href="https://github.com/grepx/android-architecture/tree/todo-mvp-conductor" target="_blank" rel="external">todo‑mvp‑conductor</a></td>
<td>Uses the <a href="https://github.com/bluelinelabs/Conductor" target="_blank" rel="external">Conductor</a> framework to refactor the app to use a single Activity architecture.</td>
</tr>
<tr>
<td><a href="https://github.com/SerjSmor/android-architecture" target="_blank" rel="external">todo‑mvp‑kotlin</a></td>
<td>A translation of todo-mvp to <a href="https://kotlinlang.org/" target="_blank" rel="external">Kotlin</a></td>
</tr>
</tbody>
</table>
<h2 id="Why-a-to-do-app"><a href="#Why-a-to-do-app" class="headerlink" title="Why a to-do app?"></a>Why a to-do app?</h2><p>The app in this project aims to be simple enough that you can understand it quickly, but complex enough to showcase difficult design decisions and testing scenarios. For more information, see the <a href="https://github.com/googlesamples/android-architecture/wiki/To-do-app-specification" target="_blank" rel="external">app’s specification</a>.</p>
<p>The following screenshot illustrates the UI of the app:</p>
<p><img src="https://github.com/googlesamples/android-architecture/wiki/images/tasks2.png" alt="A screenshot illustratrating the UI of the app" width="160" style="display: inline; float: right"></p>
<h2 id="Choose-a-sample-for-your-app"><a href="#Choose-a-sample-for-your-app" class="headerlink" title="Choose a sample for your app"></a>Choose a sample for your app</h2><p>Each sample includes a dedicated <code>README.md</code> file where you can find related metrics, as well as subjective assessments and observations by contributors. The following factors are worth considering when selecting a particular sample for your app:</p>
<ul>
<li>The size of the app you are developing</li>
<li>The size and experience of your team</li>
<li>The amount of maintenance that you are expecting to have to do</li>
<li>Whether you need a tablet layout</li>
<li>Whether you need to support multiple platforms</li>
<li>Your preference for the compactness of your codebase</li>
</ul>
<p>For more information on choosing and comparing samples, see the following pages:</p>
<ul>
<li><a href="https://github.com/googlesamples/android-architecture/wiki/Samples-at-a-glance" target="_blank" rel="external">Samples at a glance</a></li>
<li><a href="https://github.com/googlesamples/android-architecture/wiki/How-to-compare-samples" target="_blank" rel="external">How to compare samples</a></li>
</ul>
<h2 id="Open-a-sample-in-Android-Studio"><a href="#Open-a-sample-in-Android-Studio" class="headerlink" title="Open a sample in Android Studio"></a>Open a sample in Android Studio</h2><p>To open one of the samples in Android Studio, begin by checking out one of the sample branches, and then open the <code>todoapp/</code> directory in Android Studio. The following series of steps illustrate how to open the <a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp" target="_blank" rel="external">todo‑mvp</a> sample.</p>
<p><strong>Note:</strong> The master branch does not compile.</p>
<p>Clone the repository:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git@github.com:googlesamples/android-architecture.git</div></pre></td></tr></table></figure>
<p>Checkout the todo-mvp sample:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout todo-mvp</div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong> To review a different sample, replace <code>todo-mvp</code> with the name of sample you want to check out.</p>
<p>Finally open the <code>todoapp/</code> directory in Android Studio.</p>
<h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><p>This project is <strong>built by the community</strong>, and curated by Google as well as other core maintainers.</p>
<h3 id="External-contributors"><a href="#External-contributors" class="headerlink" title="External contributors"></a>External contributors</h3><p><a href="http://github.com/malmstein" target="_blank" rel="external">David González</a> - Core developer (MVP Content Providers sample)</p>
<p><a href="http://github.com/Karumi" target="_blank" rel="external">Karumi</a> - Developers (MVP Clean Architecture sample)</p>
<p><a href="http://github.com/freewheelnat" target="_blank" rel="external">Natalie Masse</a> - Core developer</p>
<p><a href="https://github.com/ErikHellman" target="_blank" rel="external">Erik Hellman</a> - Developer (MVP RxJava sample)</p>
<p><a href="https://github.com/saulmm" target="_blank" rel="external">Saúl Molinero</a> - Developer (MVP Dagger sample)</p>
<p><a href="https://github.com/florina-muntenescu" target="_blank" rel="external">Florina Muntenescu</a> - Developer (MVP RxJava sample)</p>
<h3 id="Googlers"><a href="#Googlers" class="headerlink" title="Googlers"></a>Googlers</h3><p><a href="http://github.com/JoseAlcerreca" target="_blank" rel="external">Jose Alcérreca</a> - Lead/Core developer</p>
<p><a href="http://github.com/slinzner" target="_blank" rel="external">Stephan Linzner</a> - Core developer</p>
<p><a href="https://github.com/mustafa-x" target="_blank" rel="external">Mustafa Kurtuldu</a> - UX/design</p>
<p><a href="https://github.com/sharifsalah" target="_blank" rel="external">Sharif Salah</a> - Technical Writer</p>
<p>For more information on joining the project, see <a href="https://github.com/googlesamples/android-architecture/blob/master/CONTRIBUTING.md" target="_blank" rel="external">how to become a contributor</a> and the <a href="https://github.com/googlesamples/android-architecture/wiki/Contributions" target="_blank" rel="external">contributor’s guide</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">Android Architecture Blueprints</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/googlesamples/android-architecture/wiki/images/aab-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The Android framework provides a lot of flexibility in deciding how to organize and architect an Android app. While this freedom is very valuable, it can also lead to apps with large classes, inconsistent naming schemes, as well as mismatching or missing architectures. These types of issues can make testing, maintaining and extending your apps difficult.&lt;/p&gt;
&lt;p&gt;The Android Architecture Blueprints project demonstrates strategies to help solve or avoid these common problems. This project implements the same app using different architectural concepts and tools.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Architecture" scheme="http://ipcreator.me/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>English is a Friend for Everyone</title>
    <link href="http://ipcreator.me/2017/03/31/English/english-is-a-friend-for-everybody/"/>
    <id>http://ipcreator.me/2017/03/31/English/english-is-a-friend-for-everybody/</id>
    <published>2017-03-31T08:40:06.000Z</published>
    <updated>2017-03-31T08:46:49.048Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>请李老师用140字概括一下怎样才能学好英语？我回复说：其实一个字就够了：“用”。这本书里的文字，全部的意义，只有两个字：“启发”。</strong></p>
</blockquote>
<p>作者真诚地希望读者在读过这些文字之后，（起码）在英语使用方面有所启发。这本书也是《把时间当做朋友》的具体延续。《把时间当做朋友》的主旨很简单：时间不会听从我们的管理，我们最多只能与时间做朋友；与时间做朋友的方法只不过是“用正确的方式做正确的事情”。而这本书，只不过是 把“正确的事情”聚焦在“用英语”上而已，而后再看看可能的“正确的方式”究竟是什么。</p>
<a id="more"></a>
<h1 id="李笑来-人人都能用英语"><a href="#李笑来-人人都能用英语" class="headerlink" title="李笑来 人人都能用英语"></a><a href="http://zhibimo.com/read/xiaolai/everyone-can-use-english/" target="_blank" rel="external">李笑来 人人都能用英语</a></h1><h2 id="Chapter-One-——Start-Point"><a href="#Chapter-One-——Start-Point" class="headerlink" title="Chapter One ——Start Point"></a>Chapter One ——Start Point</h2><p>二三十年之后，终于有科学家证明：</p>
<ol>
<li>大脑是可塑的；</li>
<li>并且它自始至终都是可塑的；</li>
<li>甚至它还会重新组织自己（Reorganizing），通过恰当的训练，它能用另外一个区域习得已被毁坏区域的能力……</li>
</ol>
<p>请读者猜猜下图中，这个正在美国UAB康复中心治疗的小女孩受伤的是左臂还是右臂？<br><img src="http://zhibimo.com/read/xiaolai/everyone-can-use-english/figure05.png" alt=""><br>其实她的左臂没有受伤，而之所以把左臂固定起来就是因为那是一条没有受伤的手臂，而右臂才是受伤、需要通过训练恢复的……咦？这是怎么回事儿？可是从生理上来看，大脑受损的部分是没办法恢复的，她又怎么能通过训练来让已经受伤的右臂恢复正常呢？</p>
<p>大脑的神奇之处在于它可以利用其它未受损的部分重新习得受损部分的功能（学术上叫做“remap”、“reroute”、或者“rewire”）。之所以要把行动自如的左臂绑起来，是因为如果不这么做的话，面对任何需求，大脑中负责控制左臂的部分（或称为“左臂脑图”）都会“优先启动”；因为这部分是未受损的，而原本控制右臂的部分已经受损了。换言之，这时，大脑中尚不存在一个能够控制右臂的部分。而把左臂固定住之后，尽管负责控制左臂的大脑部分依然“优先启动”，但实际上却无法自如操纵左臂。而在这种情况下，就可以通过让大脑的其他部分慢慢专注于右臂，进而习得控制右臂的方法——即，可以通过这样的训练，慢慢使大脑未受损的某个区域“习得”原本只有那个已经受损的区域所负责的功能。没有多久，这个女孩子的右臂就恢复了，活动起来与原来没什么两样。可是她的大脑不再是原来的样子了，尽管某一部分受损且不可恢复，但她大脑的另外一个区域已经被开发，能够别无二致地完成受损区域曾经可以完成的功能。</p>
<p>脑图之间存在着相互竞争——所以，为了治好受损的右臂，要先把未受损的左臂给限制住。如果不把未受损的左臂给限制住的话，那么左臂的脑图将永远处于优势，进而，使得大脑对已经受损的右臂产生“习得之弃用”（Learned Nonuse）。</p>
<p>这最后一条可以用来清楚地解释原本用“关键期论”错误地解释的现象：为什么成年后学习第二语言显得更为困难？</p>
<p>成年之后，<u><strong>第二语言学习显得更为困难的原因并不在于关键期论所说的“此后大脑不再可塑”，而实际上在于这是第二语言所使用的脑图要与已经形成强大势力的母语脑图竞争——当然越来越难。</strong></u>然而，恰恰是这样的认识给了人们希望。目前，有很多教育学家开始提倡“浸泡式学习”，有一定的依据，也有相当的效果。所谓“浸泡式学习”，就是在特定的时间、特定的环境里，强迫学生只使用第二语言，禁止使用母语，进而刺激大脑加速构建新的脑图。风靡全球的罗赛塔石碑语言学习软体（Rosetta Stone）就是基于这个原理开发出来的。</p>
<p>对于第二语言习得者来说，最直观、最有意义的好消息是：</p>
<ol>
<li>什么时候开始学都不晚；</li>
<li>只要方法得当，并加以时日，一定能学好。</li>
<li>甚至，第二语言也可能超越母语成为主导语言。</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>作者微信公共帐号：学习学习再学习（xiaolai-xuexi）<br><img src="http://zhibimo.com/read/xiaolai/ba-shi-jian-dang-zuo-peng-you/images/640.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;请李老师用140字概括一下怎样才能学好英语？我回复说：其实一个字就够了：“用”。这本书里的文字，全部的意义，只有两个字：“启发”。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者真诚地希望读者在读过这些文字之后，（起码）在英语使用方面有所启发。这本书也是《把时间当做朋友》的具体延续。《把时间当做朋友》的主旨很简单：时间不会听从我们的管理，我们最多只能与时间做朋友；与时间做朋友的方法只不过是“用正确的方式做正确的事情”。而这本书，只不过是 把“正确的事情”聚焦在“用英语”上而已，而后再看看可能的“正确的方式”究竟是什么。&lt;/p&gt;
    
    </summary>
    
      <category term="English" scheme="http://ipcreator.me/categories/English/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
  </entry>
  
  <entry>
    <title>Famous Financial Experts&#39;  Views of Investment</title>
    <link href="http://ipcreator.me/2017/03/31/MyView/Original/investment/"/>
    <id>http://ipcreator.me/2017/03/31/MyView/Original/investment/</id>
    <published>2017-03-31T06:56:06.000Z</published>
    <updated>2017-04-07T14:42:42.211Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/investment.jpg" alt=""></p>
<p>Investment is the only way leading to realizing your freedom of wealth.</p>
<a id="more"></a>
<h2 id="房产"><a href="#房产" class="headerlink" title="房产"></a>房产</h2><h3 id="吴晓波"><a href="#吴晓波" class="headerlink" title="吴晓波"></a>吴晓波</h3><p><a href="http://www.mbachina.com/html/tjzx/201703/103977.html" target="_blank" rel="external">《吴晓波：80%中小企业将倒闭，钱会集中到这四个行业》</a></p>
<blockquote>
<p>从“成本+规模”到“互联网+”<br>从屌丝经济到中产崛起<br>从大众消费到圈层经济<br>由产业资本时代进入到金融资本时代<br>每一个中产阶级买什么东西呢?买房子，买股票。</p>
</blockquote>
<p>我们要怎么拥抱这一轮的金融资产泡沫周期?在你的资产配置中进行多重资产配置，到信托，到基金。一定要让自己的资产迅速滚起来。这是我们在未来的新十年看到的变化，就是整个财富的创造模式在发生变化，资本和资本杠杆，在未来财富波动中的效应会急剧的增加。</p>
<p><a href="http://finance.sina.com.cn/zl/lifestyle/2017-03-23/zl-ifycstww0684294.shtml" target="_blank" rel="external">吴晓波：90后就别买京沪深的房子了</a></p>
<blockquote>
<p>超级大都市的房子，与三十岁以下的年轻人无关。京沪深的房子就是那根“桥柱”，它不决定你的价值、未来和生死，放下即是实地。</p>
</blockquote>
<p>还是回到2012年。<br>那年，全国大学应届毕业生的平均月薪为3048元。如果你碰巧进入了一家非常慷慨的大公司，税后月薪达到1.6万元，不吃不喝，只靠呼吸PM2.5值很高的空气活着，可以买得起一平米的北京房子。<br>到2017年，你必须要找到一位肯付你6.07万元月薪的雇主。当然，这似乎是一件不太容易的事情，前几天，咪蒙同学的助理月薪达到5万元，就已经溅起一片惊艳般的欢呼。<br>我再继续算账。<br>如果你购买一套价值1000万元的房子，向银行做七成、三十年按揭，月均还款37150元。如果做五成、三十年按揭，月均还款26536元。<br>首付的700万元或500万元，足以压垮全国90%的父母。<br>而在未来的三十年里，背负月均还款3.7万元到2.6万元，对于90%的90后而言，都恐怕是一个了无生活质量及乐趣的人生。<br>所以到今天，不是你拒绝买房，而是你不应该再买北京、上海和深圳的房子了。<br><strong>这是我第一次建议同学们不要买房。</strong></p>
<blockquote>
<p>不买京沪深的房子，不意味着逃离京沪深。那里仍然是中国最具活力和创造力的地方，是梦想野蛮生长的伟大而邪恶的容器。</p>
</blockquote>
<p>京沪深的房子就是那根“桥柱”，它不决定你的价值、未来和生死，人生无比辽阔，放下即是实地。</p>
<h3 id="叶檀"><a href="#叶檀" class="headerlink" title="叶檀"></a>叶檀</h3><p><a href="http://opinion.jrj.com.cn/2017/03/31014522248169.shtml" target="_blank" rel="external">《叶檀：还想“离婚买房”？ 这实在不是个聪明的举动》</a></p>
<blockquote>
<p>接下来，房价最大的可能性是将进入稳定期，上有顶下有底，跟股市一个样。政策收紧，并不等于房价下跌，未来两年房地产市场依然将保持稳定。<br>第一个原因，楼市的优质资源仍然集中在热门城市，三大城市群中的热门城市是安全垫最厚的城市。资源集中、经济领先、财富聚集效应不变，炒房的热土也不会变。<br>其次，目前房地产是千城千策，防止热的过热，冷的过冷，总体数据保持稳定。<br>最后也是最关键的是，货币政策再稳健，奈何基数太大，购房投资是应对通胀的无奈之举。</p>
</blockquote>
<h3 id="马光远"><a href="#马光远" class="headerlink" title="马光远"></a>马光远</h3><p><a href="http://business.sohu.com/20170404/n486385462.shtml" target="_blank" rel="external">马光远：如果误读这次房地产调控，你的人生将发生剧烈改变</a></p>
<p>库存不是中国房地产的真问题，真问题是资源错配，是土地制度和城市发展的大方向违背城镇化的基本规律，从而导致出现人为的短缺。</p>
<p>对于本次调控，我在之前的多篇文章中提醒：房价的逻辑变了。千万不要用过去的思维来看待本次调控，更不能置若罔闻，一根筋地认为调控不会改变房价的走势。一定要重视本次调控。</p>
<p>在中国房地产市场20多年的历史上，房价受三个维度的影响：</p>
<ol>
<li><p>政策的维度<br>中国房地产市场本质上是政策市，市场的好坏受政策的影响非常大。每一次政策变化，对房价的影响都非常大。房地产政策只有真假之分，没有见效不见效这一说。政策如果动真格，每次都是见效的，只是在下一次反弹的时候，很多人忘记了房价在政策的影响下曾经跌过。</p>
</li>
<li><p>供求的维度<br>供求规律是决定中国房地产市场长期趋势的最基本逻辑。经过近20年的发展，住宅市场供需基本平衡，城市人均居住面积接近40平米，住房已经告别了短缺的基本面。但是，由于中国大城市与其他城市之间的资源鸿沟，必然出现中小城市供应过度而大城市供应长期不足的矛盾。再加上中国大城市错误的限制人口，以及中国以中小城市为中心的错误的城镇化方向，人为控制大城市的人口和建设用地，必然导致供需矛盾长期存在。</p>
</li>
<li><p>价格的逻辑<br>现在北京房价均价过了6万，如果按照人均收入、房价中位数、房价收入比、租售比等一系列指标看，目前的房价不仅绝对值处于高位，而且按照很多指标来权衡，中国很多城市的泡沫化程度已经很高。</p>
</li>
</ol>
<p>按照以上三个维度，中国房地产本来不应该如此疯狂，为什么在经历去年的疯涨之后，市场仍然高烧不退？甚至更加疯狂？</p>
<p>一是动物精神。当一个市场陷入真正癫狂的时候，左右市场走势不是人的理性，而是狂热的动物精神，是丧失理性之后的群氓效应，这在任何一个市场都是非常可怕的力量；</p>
<p>二是市场要见顶的时候，都是市场情绪最疯狂的时候。日本房地产泡沫最狂热的时候，就是泡沫破灭前、几乎每个人都认为日本房价不会下跌的时候；</p>
<p>三是我多次强调的政策的“塔西陀陷阱”。<strong>政策总是变来变去，导致公信力丧失。</strong> 在调控使房地产下行的情况下，地方政府首先扛不住，然后就是悄然放松调控，然后是全国性的刺激。从逻辑上说，去年“9.30”调控的力度不可谓不大，那为什么市场对任何严厉的调控都置若罔闻？原因很简单，就是过去的历史告诉大家，调控不可能持久，未来一定会反弹。这种对政策不信任导致的恐慌远比中介违法和投资者入市抢房子造成的恐慌要大。</p>
<p>从目前的态势看，管理层对房地产泡沫的担心远甚于调控之后对经济增长的影响。考虑到今年下半年的政策周期，至少在今年，管理层不希望房价继续上涨，更不希望房地产泡沫给中国经济带来实质性的风险，下半年房价上涨的动能和概率已经很低，多数城市的房价会出现实质性的调整。我之前讲，六个月后中国房地产会变天，其实，<strong>天已经变了。</strong> 那些为没有买到房子而焦虑的人，大可以放宽心观察市场的变化，<strong>至少在今年，你没有在这个敏感的时刻急吼吼地杀进去，做悲催的接盘侠。</strong></p>
<h2 id="股市"><a href="#股市" class="headerlink" title="股市"></a>股市</h2><h3 id="李笑来"><a href="#李笑来" class="headerlink" title="李笑来"></a>李笑来</h3><p>《通往财富自由之路》<sup>[1]<sup></sup></sup></p>
<blockquote>
<p>钱本身顶多可以算作资金，而它想要成为有效的资本，还有需要至少另外三个要素：<br>A、资金的金额大小<br>B、资金的使用时限<br>C、资金背后的智慧</p>
</blockquote>
<p>很多人嘴上挂着的投资，其实本质上和赌博并没有差异。</p>
<p>忽略了资金背后的时间，有可能病急乱投医，四处打听短时间赚大钱的方法。无视资金背后的智慧，这些资金能够帮你实现财富自由的几率也不大。大部分都有迅速致富的“妄想”，没错，就是妄想。这种情况下，他们通过小道消息也好，通过朋友推荐也好，会义无反顾地跳进股市。如果这些人只是由此买了几只股票，放在那里不动也还好，最终如果亏损，损失的也只不过是有限的资金而已。但是大多数人采取的方式则是每天盯着大盘，自己的心情随着股票的走势不断起伏，这种情况下，即便赚了，估计也是得不偿失的，因为你赔进去的是自己<strong>宝贵的注意力</strong>，更何况多数情况是没赚到钱，同时把注意力也搭进去了。</p>
<p>大部分人投入到股市的钱，其实根本不能做到“到死都可以无需挪用”，有些人甚至在自己是负资产的情况下，<strong>借钱去炒股</strong>。这时候，人其实是没有办法无视这笔钱的动态的。看看我们周围有多少人，仅仅是因为把钱投入到了股市，就此变得神情紧张，每天的心情随着大盘的涨跌而起伏。即便你通过这种办法获得了收益，可能都得不偿失，因为你损失的可是宝贵的注意力。更何况很多人根本就赚不到钱，这才是真正的“<strong>赔了夫人又折兵</strong>”。<br>你看股市里有多少人喜欢买垃圾股就知道了，他们买垃圾股的根本原因就在于“那玩意儿便宜”，他们是看中绝对值的，所以，即便<strong>盈利潜力</strong>再高的股票，他们只要看一眼价格，觉得太贵，就扭头而去。</p>
<blockquote>
<p>给自己的资金判个无期徒刑的人，实际上是已经拥有了足够的智慧，所以他们有资格站在资本的背后——而他是否最终可以成为出类拔萃的投资人，那只不过是早晚的事情，首先因为他已经起步了；而且还相当于早已赢在起点，因为最初那个给自己的资金判上个无期徒刑的行为已经为他日后能够养成长期深入思考未来的能力打下了最殷实的基础。有了这个底子，很多的技巧根本就用不着了，很多的陷阱自动消失了，很多的无奈纠结瞬间烟消云散……</p>
<p><strong>“这部分钱已经丢了”</strong>，比起想着我要有耐心，不要关注它，不如直接把它想成已经丢了的钱，丢了的钱已经不属于你，不论多少都已经消失了。</p>
</blockquote>
<p>这是我一直使用的方法，渐渐你就会发现给资金判个无期徒刑，其实并没有想象中困难。</p>
<p>鼓励大家用“丢了也所谓”的钱进行投资训练。所以如果那真的是一笔救急的钱，你就不要考虑，如果那真的是丢了也无所谓的钱，到不妨放弃这部分安全感，给自己一个机会。</p>
<p><u><strong>摒弃掉那些通过投资短期实现财富逆转的幻想，踏踏实实地先把眼前的工作做好，等到没有负债的时候，再想着如何一点点实现财富自由。</strong></u></p>
<h3 id="吴晓波-1"><a href="#吴晓波-1" class="headerlink" title="吴晓波"></a>吴晓波</h3><p><a href="http://comments.caijing.com.cn/20141210/3771228.shtml" target="_blank" rel="external">我为什么从来不炒股</a></p>
<blockquote>
<p>这个股市的基本表现，不但与上市公司的基本表现没有关系，甚至与中国宏观经济的基本表现也没有关系，它是一个被行政权力严重操控的资本市场，它的标配不是价值挖掘、技术创新、产业升级，而是“人民日报社论+壳资源+并购题材+国企利益”。</p>
</blockquote>
<p><a href="http://finance.sina.com.cn/zl/lifestyle/2017-04-06/zl-ifyecfnu7403987.shtml" target="_blank" rel="external">“壳”将很快成为一个历史名词</a></p>
<p>3月27日，天津证监局官网发布了一条消息，周鸿祎的360公司进入上市辅导期，这意味着这家从美股市场回归的互联网公司将不再四处找壳。</p>
<p>IPO的提速，意味着直接融资渠道的进一步拓宽，虽然证监会没有明确提出注册制改革，但是其效应则几乎近似。在这样的大背景之下，困扰中国股市二十余年的壳资源游戏可能即将终结。</p>
<p>在各国资本市场上，借壳重组都是一种常规性的操作模式，但是只有在中国，由于“三缺现象”——牌照紧缺、监管缺失以及退市制度的缺位，它充满了潜规则，成为炒作获利的最重要手段。</p>
<p>在最近的十多年里，庄家、题材、壳资源，仍然是最具中国特色的三个股市名词。它们如同诅咒一样地盘旋在资本市场的上空，无数庄家上下其手，火中取栗，使得理性投资和价值投资理论完全失灵。</p>
<p>几乎可以不夸张的说，一部二十年的壳历史就是中国股市的肮脏史。</p>
<p>最近发生的新气象却让人看到了些许的可能性。</p>
<p>　　首先是IPO的提速，使得壳资源的价值大幅缩水，一些优质企业不再需要借壳买壳，而可以通过正常渠道申请上市。同时，新三板以及区域性股权交易市场的成熟，为企业的规范化和选拔机制，提供了较大的培育和选择空间；</p>
<p>　　其次，证监当局一再表达实行严格退市制度的决心。早在2014年10月，证监会就发布了上市公司退市意见，可是因利益纠结，迟迟未见坚决执行。在不久前结束的全国两会上，证监会官员明确表示将积极推进这一工作，要求交易所“真正负起责任，应依法依规，对该退市的就要实行退市。”</p>
<p>　　此外，深港通和沪港通制度的推进，也正在成为一股结构性势力。在如今的香港市场上，中资股已占到上市公司数量的一半，从市值角度来说，更是占了三分之二。随着大陆投资人及机构的涌入，港股的波动将为沪深A股上市企业估值的合理回归，提供一种对标的可能性。</p>
<p>几天前，华兴资本的包凡对此有过一番颇有见地的发言。</p>
<p>　　他认为，</p>
<blockquote>
<p>“如果A股某些板块，尤其是创业板里有些股票炒得太过了，已经缺乏了投资的价值，而在香港市场上却还有很多值得投资的标的在里面，这样就为投资者带来了一个选择，这种情况反过来也会影响A股的价值体系。”</p>
</blockquote>
<p>　　&gt;“这是一个长期的趋势，可能还需要时间，不过最终可能是一个趋同的过程。”</p>
<p>　　制度的健全以及市场理性力量的增多，正在让浑浊的中国资本市场变得清澈起来。这个过程也许还有反复，也许比人们期望的更为缓慢。但是，我们还是要为进步鼓掌。</p>
<p>　　当什么时候“壳”不再被讨论，我们就可以去开一个股票账户了。</p>
<h3 id="叶檀-1"><a href="#叶檀-1" class="headerlink" title="叶檀"></a>叶檀</h3><p><a href="http://www.nbd.com.cn/articles/2017-02-16/1076706.html" target="_blank" rel="external">叶檀：恒指表现扎眼是经济大热前兆？</a></p>
<blockquote>
<p>经过这一轮热潮，香港市场内地化将更加明显，而内地通过香港这个市场展示了市场化的决心。香港的热度取决于内地经济改革，而与金融相关的资产价格就是显示内地经济热度、资金疯狂程度的温度计。</p>
</blockquote>
<p>由于通胀压力、供给侧结构性改革，股市跟着期市的步伐火爆了，但不是在A股市场，主要体现在估值低的港股市场上。海通证券首席策略分析师荀玉根表示，从中期来看，港股的优质资产依托内地经济基本面和香港联系汇率制，可谓最强的货币+最强的资产。</p>
<p>今年资金会流入股市，先流入的是港股市场，A股市场也会稳中有升。而那些估值高、业绩差、没有供给侧结构性改革概念可炒的上市公司，会逐渐僵尸化。</p>
<h3 id="马光远-1"><a href="#马光远-1" class="headerlink" title="马光远"></a>马光远</h3><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><h3 id="李开复"><a href="#李开复" class="headerlink" title="李开复"></a>李开复</h3><h3 id="傅盛"><a href="#傅盛" class="headerlink" title="傅盛"></a>傅盛</h3><h3 id="程浩"><a href="#程浩" class="headerlink" title="程浩"></a>程浩</h3><h2 id="Semi-Conductor"><a href="#Semi-Conductor" class="headerlink" title="Semi Conductor"></a>Semi Conductor</h2><h2 id="SMIC"><a href="#SMIC" class="headerlink" title="SMIC"></a>SMIC</h2><h3 id="中芯国际（0981-HK）：“芯”动不如行动？"><a href="#中芯国际（0981-HK）：“芯”动不如行动？" class="headerlink" title="中芯国际（0981.HK）：“芯”动不如行动？"></a><a href="http://business.sohu.com/20170328/n485257222.shtml" target="_blank" rel="external">中芯国际（0981.HK）：“芯”动不如行动？</a></h3><p>大陆的半导体行业从去年下半年以来进入了景气周期。国内一些半导体设备厂商2017年1月的订单量已经超过去年第一季度总量。业内人士预计，订单饱满的状况有望持续到2018年。而半导体都离不开的就是晶圆。</p>
<h3 id="世界第五家：中芯国际今年开始研发7nm工艺！"><a href="#世界第五家：中芯国际今年开始研发7nm工艺！" class="headerlink" title="世界第五家：中芯国际今年开始研发7nm工艺！"></a><a href="http://mt.sohu.com/20170317/n483667633.shtml" target="_blank" rel="external">世界第五家：中芯国际今年开始研发7nm工艺！</a></h3><p>2015年比利时国王访华时，中比双方签署了一系列合作协议，其中一条就是中芯国际、华为、高通与比利时微电子中心IMEC合作研发14nm FinFET工艺，预计会在2020年之前达成《国家集成电路产业发展推进纲要》提出的16/14纳米工艺实现规模量产的目标。</p>
<p>中芯国际从28nm直接进入14nm，跳过了20nm节点，未来也很有可能跳过10nm节点，直接进入7nm节点。该公司CEO邱慈云博士日前对外表态称今年晚些时候会投入R&amp;D研发资金开发7nm工艺，他还提到近年来中芯国际加大了研发投入力度，R&amp;D投资占据公司12-13%的营收，2016年资本支出也创纪录地达到了27亿美元。</p>
<p>邱博士并没有提到国内7nm工艺的具体情况，目前看来只是开始投入研发资金，这一点上要比Intel、三星GF、TSMC早几年就研发7nm工艺要晚得多，不过他们依然是全球第五家表态研发7nm工艺的半导体公司，随着制程工艺越来越先进，全球有能力研发新工艺的晶圆厂越来越少。</p>
<h3 id="瑞银：中芯国际-00981-未来股价将跑输大市-评级降至“卖出”"><a href="#瑞银：中芯国际-00981-未来股价将跑输大市-评级降至“卖出”" class="headerlink" title="瑞银：中芯国际(00981)未来股价将跑输大市 评级降至“卖出”"></a><a href="http://finance.sina.com.cn/roll/2017-03-29/doc-ifycsukm4114030.shtml" target="_blank" rel="external">瑞银：中芯国际(00981)未来股价将跑输大市 评级降至“卖出”</a></h3><p>瑞银发表报告表示，中芯国际(00981)今年要面对多项挑战，如中国智能手机需求放缓，以及大客如Fingerprint Card (FPC)发盈警预计销售下跌。</p>
<p>中芯国际管理层预期今年营业额增长20%，不过瑞银预计升幅只得11%。瑞银下调集团今明两年每股盈利预测12%，至0.062及0.047美元，较市场预测低出约30%，目标价由11.5港元下调至7港元，相当于今明两年预测市盈率约15倍及19倍。评级由“中性”下调至“卖出”。</p>
<p>该行称，由于集团今年销售及毛利有下跌风险，预计股价未来12个月将跑输大市。</p>
<p><a href="http://finance.sina.com.cn/roll/2017-04-06/doc-ifyeayzu6906665.shtml" target="_blank" rel="external">德银：预计中芯国际(00981) 纳米晶圆将亏损 评级降至“卖出”</a></p>
<p>德银发表研究报告表示，称中芯国际(00981) 的28纳米晶圆不论在回报率、价格及毛利上都遇到挑战，<strong>预期2017至2019年28纳米晶圆将经营亏损。该行预期中芯2016至2019年销售复合增长8%，低于管理层20%的增长指引。</strong></p>
<p>因此，该行削减中芯2017及2018年每股盈利预测分别11%及13%。并下调中芯目标价24.8%，由10.5港元降至7.9港元，评级由“持有”降至“卖出”。</p>
<p>报告提到，客户未来三年主要需求28纳米晶圆，但中芯的28纳米晶圆生产缓慢，高技术门坎令其生产线缺乏竞争力，产品持继降价。</p>
<p>德银预计公司2017至2019年毛利会下跌，股本回报率(ROE)将由2016年的9.5%，预计至2019年放缓至分别9.3%、8.8%及7.7%。</p>
<h2 id="Meitu"><a href="#Meitu" class="headerlink" title="Meitu"></a>Meitu</h2><p><img src="http://glhsns.img-cn-hangzhou.aliyuncs.com/201703/p20170321082555539.!wm" alt=""></p>
<h3 id="暴涨28-后暴跌14-！我们总结了美图被热炒的四点原因"><a href="#暴涨28-后暴跌14-！我们总结了美图被热炒的四点原因" class="headerlink" title="暴涨28%后暴跌14%！我们总结了美图被热炒的四点原因"></a><a href="https://www.gelonghui.com/p/115105.html" target="_blank" rel="external">暴涨28%后暴跌14%！我们总结了美图被热炒的四点原因</a></h3><p>为何美图股价迎来如此高的涨幅，腾讯科技将原因总结如下：</p>
<blockquote>
<p>第一，受Snap上市影响<br>第二，引入人工智能概念<br>第三，深港通和沪港通带动作用<br>第四，电商平台“美铺”即将上线</p>
</blockquote>
<h3 id="美图值多少钱？"><a href="#美图值多少钱？" class="headerlink" title="美图值多少钱？"></a><a href="http://www.infzm.com/content/123782" target="_blank" rel="external">美图值多少钱？</a></h3><p>美图成立于2008年，有两个创始人，一个是董事长蔡文胜，一个是CEO吴欣鸿，两人都是福建人。蔡文胜1970年出生，初中毕业后开始创业，一开始做域名生意，2004年在北京创办了一家叫265的导航网站，2007年卖给了谷歌。当时谷歌中国的负责人李开复，后来也成为美图的投资人。卖掉265后，蔡文胜涉足天使投资领域，投资过暴风、4399游戏和58同城等公司。<br>吴欣鸿1981年出生，高中毕业后开始创业。一开始也是做域名生意，后来开发了火星文输入法。<br>通过做火星文，吴欣鸿发现90后的自拍和修图需求非常强烈，于是在2008年创办了美图。<br>过去9年里，美图不断进化。从一个电脑版的修图软件，变成一个移动手机上的修图应用。从一个工具平台，变成一个手机公司，再变成一个社交平台。按照美图官方的说法，美图正在打造一个美丽生态链，挖掘庞大的颜值文化市场。</p>
<blockquote>
<p>美图也确实抓住了一个做社交的巨大流量入口——图片。</p>
</blockquote>
<p>根据艾瑞咨询2016年6月的一个调查报告，在每天上传至中国主流社交网络的照片中，<strong>有约53.5%的照片经过了美图应用的处理</strong>。</p>
<p><strong>内地资金看好美图的另外一个原因是，美图模式在国外能找到一些很好的对标公司，比如Instagram和Snapchat。</strong></p>
<p>其中，图片分享社交软件Instagram被Facebook以7.15亿美元收购。Snapchat则是一款随手即拍、阅后即焚的软件，今年年初刚刚上市。这个社交软件一半用户是24岁以下，即“90后”和“00后”，这两个群体也是目前美图的主要活跃用户。</p>
<blockquote>
<p>相比Instagram和Snapchat的主营收入来自广告，美图的主要收入来源是手机硬件的销售。</p>
</blockquote>
<p>美图财报的数据显示，该公司已经在全球覆盖超过11亿独立设备，月活跃用户总数于2017年1月创历史新高，约5.20亿。</p>
<p>但相比陌陌，美图的赚钱能力差很多。陌陌2016年全年净利润1.77亿美元，相当于12亿元。而美图却至今亏损，2016年全年的总收入也只有15亿元左右。</p>
<p>美图的付费用户虽然很多，但平均付费金额很小。2016年平均每月每个美图月活跃用户贡献的收入为0.292元。</p>
<p><strong>为了拓宽收入来源，美图正用自己积累的大数据来做更多的商业化尝试。</strong></p>
<p>在美图上，平均每月产生60亿张照片，每月79亿次视频播放。基于这些大数据，美图能知道一个用户的性别、年龄和皮肤。美图甚至能对皮肤进行详细区分，比如干皮、瓷白色、混油、象牙白、混干、古铜色、油皮、浅棕色。</p>
<p><strong>通过照片上用户的穿衣打扮，美图能知道用户的兴趣（时尚、美食、运动、护肤、塑形、彩妆、旅行、穿搭和健身）和消费能力，然后给用户推荐一些时尚品牌。</strong></p>
<p>2017年上半年美图又发布了社交电商平台“美铺”，希望通过电商模式来变现。</p>
<p>但这些路子能否走通，需要时间的检验。</p>
<h3 id="美图也要做电商-能否突破盈利红线仍未知"><a href="#美图也要做电商-能否突破盈利红线仍未知" class="headerlink" title="美图也要做电商 能否突破盈利红线仍未知"></a><a href="http://tech.sina.com.cn/i/2017-03-31/doc-ifycwymx2837732.shtml" target="_blank" rel="external">美图也要做电商 能否突破盈利红线仍未知</a></h3><p><img src="http://n.sinaimg.cn/tech/transform/20170331/PvhG-fycwyns3830678.jpg" alt=""></p>
<p>活跃用户数是美图互联网业务变现最重要的依托，而平台上大部分的使用者都具有相当的购买能力。<br>目前，美图旗下电商业务包括美图定制、美铺电商平台两块业务。<br>事实上，美图已经开始从旗下的互联网产品中通过实际的应用场景把用户自然转化到电商业务上。现场工作人员告诉记者，用户可以通过美拍、美图秀秀等软件进入美图定制页面定制T恤、手机壳等快消品。“我们希望围绕整个美图所有的产品做一个营销生态。在所有的产品里根据不同的使用场景进行植入，比如美妆相机可能是试妆活动，美颜相机可能是新品专属大头贴，美图秀秀可能是定制的贴纸……所有的导流都会指向美铺这个平台。我们内部平台会全部打通。”</p>
<p>“目前，互联网公司绝大部分盈利的是像腾讯、阿里这类平台型企业，美图现在在扩张业务范围，通过卖虚拟产品、电商业务向平台公司转化，但这个需要消费者逐步接纳。相比之下，通过硬件扭亏更快。而对于硬件业务来说，最关键问题在于如何快速建立一个坚强供应链，把产品做出来，如果能够解决好这个问题，手机应该可以放量到200万台。”孙燕飚对记者说道。</p>
<h3 id="当TMD成为资本新欢，人工智能会是美图的机会吗？"><a href="#当TMD成为资本新欢，人工智能会是美图的机会吗？" class="headerlink" title="当TMD成为资本新欢，人工智能会是美图的机会吗？"></a><a href="https://www.gelonghui.com/p/116241.html" target="_blank" rel="external">当TMD成为资本新欢，人工智能会是美图的机会吗？</a></h3><blockquote>
<p>人工智能是一个全行业性的趋势，BAT不会错过，TMD也在追逐，美图终于和巨头们站在了同一条起跑线上，也为自己博得了脱颖而出的机会。或许在不久之后，人工智能将成为美图股价高涨的驱动因素之一。</p>
</blockquote>
<p>“我们的人工智能更多投入是用在产品方面，比如跨次元相机是美图人工智能的应用典范，未来我们希望美图成为人工智能的‘眼睛’和‘大脑’。”在2016美图年度业绩发布会上,美图公司创始人兼CEO吴欣鸿针对人工智能给出了这样的回答。一面是人工智能崛起的当口，一面是美图一路狂飙的股价，这位美图CEO的答案为公司的未来给出了新的方向。</p>
<p>从美图的发展历程来看，自2013年开始就在努力摆脱工具类app的束缚，推出“美拍”进行社交化和内容化探索，在美图秀秀这款“航母”之外，围绕“美”推出了十几款app来丰富产品矩阵，以及借助美图手机进军硬件市场。此外，美图的转型也初见成效，如今已是中国主要的视频社交产品的美拍的月活跃用户高达1.6亿，而短视频在近期大有崛起之势；美图手机等智能硬件的营收达到14.7亿，同比增长120.9%，在手机市场奠定了“小而美”的地位。</p>
<p>仅在2016年，美图的照片应用程序就处理了超过680亿张的照片。人工智能一直有被“神化”的迹象，究其现阶段的技术原理，在图像处理方面无疑是两个核心，即深度学习和计算机视觉。按照这个逻辑，美图拥有这庞大的用户数据，这为其在深度学习领域打下了很好的基础。就在不久前，美图把AI技术应用在了美图秀秀推出了“手绘自拍”功能，刷屏了海外的社交平台，也吸引了国外科技媒体的关注。</p>
<p>就目前而言，美图的大部分业务都是To C的，这为美图赢得了数据库上的优势，人工智能技术的应用也能够尽快的得到用户反馈，而AI技术本身也是为了提高产品的竞争力。不过，人工智能想要成为美图的支柱性业务，并成为重要的盈利来源，在C端市场之外还需打开B端市场的大门。因为在目前流行的商业模式中，大多数人工智能公司瞄准了企业级服务。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="/2017/01/02/MyShare/iGet/lixiaolai-lead-to-freedom-of-wealth/">通往财富自由之路</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/investment.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Investment is the only way leading to realizing your freedom of wealth.&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Investment" scheme="http://ipcreator.me/tags/Investment/"/>
    
      <category term="House" scheme="http://ipcreator.me/tags/House/"/>
    
      <category term="Stock" scheme="http://ipcreator.me/tags/Stock/"/>
    
  </entry>
  
  <entry>
    <title>Java Deep Adventure</title>
    <link href="http://ipcreator.me/2017/03/31/Program/Java/deep-learning-of-java/"/>
    <id>http://ipcreator.me/2017/03/31/Program/Java/deep-learning-of-java/</id>
    <published>2017-03-31T04:16:06.000Z</published>
    <updated>2017-03-31T04:33:40.194Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.infoq.com/resource/minibooks/java-explore/zh/cover/cover-265.jpg" alt=""></p>
<p>源自成富先生为InfoQ中文站撰写的《Java深度历险》专栏。本专栏的十篇文章，是关于Java不同方面但深入浅出的主题内容。</p>
<ol>
<li>Java深度历险（一）——Java字节代码的操纵</li>
<li>Java深度历险（二）——Java类的加载、链接和初始化</li>
<li>Java深度历险（三）——Java线程​：基本概念、可见性与同步</li>
<li>Java深度历险（四）——Java垃圾回收机制与引用类型</li>
<li>Java深度历险（五）——Java泛型</li>
<li>Java深度历险（六）——Java注解</li>
<li>Java深度历险（七）——Java反射与动态代理</li>
<li>Java深度历险（八）——Java I/O</li>
<li>Java深度历险（九）——Java安全</li>
<li>Java深度历险（十）——Java对象序列化与RMI</li>
</ol>
<a id="more"></a>
<h2 id="Java深度历险（一）——Java字节代码的操纵"><a href="#Java深度历险（一）——Java字节代码的操纵" class="headerlink" title="Java深度历险（一）——Java字节代码的操纵"></a>Java深度历险（一）——Java字节代码的操纵</h2><p>在一般的Java应用开发过程中，开发人员使用Java的方式比较简单。打开惯用的IDE，编写Java源代码，再利用IDE提供的功能直接运行Java 程序就可以了。这种开发模式背后的过程是：开发人员编写的是Java源代码文件（.java），IDE会负责调用Java的编译器把Java源代码编译成平台无关的字节代码（byte code），以类文件的形式保存在磁盘上（.class）。Java虚拟机（JVM）会负责把Java字节代码加载并执行。Java通过这种方式来实现其“编写一次，到处运行（Write once, run anywhere）” 的目标。Java类文件中包含的字节代码可以被不同平台上的JVM所使用。Java字节代码不仅可以以文件形式存在于磁盘上，也可以通过网络方式来下载，还可以只存在于内存中。JVM中的类加载器会负责从包含字节代码的字节数组（byte[]）中定义出Java类。在某些情况下，可能会需要动态的生成 Java字节代码，或是对已有的Java字节代码进行修改。</p>
<h3 id="动态编译Java源文件"><a href="#动态编译Java源文件" class="headerlink" title="动态编译Java源文件"></a>动态编译Java源文件</h3><p>在一般情况下，开发人员都是在程序运行之前就编写完成了全部的Java源代码并且成功编译。对有些应用来说，Java源代码的内容在运行时刻才能确定。这个时候就需要动态编译源代码来生成Java字节代码，再由JVM来加载执行。典型的场景是很多算法竞赛的在线评测系统（如<a href="http://poj.org/" target="_blank" rel="external">PKU JudgeOnline</a>），允许用户上传Java代码，由系统在后台编译、运行并进行判定。在动态编译Java源文件时，使用的做法是直接在程序中调用Java编译器。</p>
<p><a href="http://www.jcp.org/en/jsr/detail?id=199" target="_blank" rel="external">JSR 199</a>引入了Java编译器API。如果使用JDK 6的话，可以通过此API来动态编译Java代码。比如下面的代码用来动态编译最简单的Hello World类。该Java类的代码是保存在一个字符串中的。</p>
<h2 id="Java深度历险（二）——Java类的加载、链接和初始化"><a href="#Java深度历险（二）——Java类的加载、链接和初始化" class="headerlink" title="Java深度历险（二）——Java类的加载、链接和初始化"></a>Java深度历险（二）——Java类的加载、链接和初始化</h2><h2 id="Java深度历险（三）——Java线程​：基本概念、可见性与同步"><a href="#Java深度历险（三）——Java线程​：基本概念、可见性与同步" class="headerlink" title="Java深度历险（三）——Java线程​：基本概念、可见性与同步"></a>Java深度历险（三）——Java线程​：基本概念、可见性与同步</h2><h2 id="Java深度历险（四）——Java垃圾回收机制与引用类型"><a href="#Java深度历险（四）——Java垃圾回收机制与引用类型" class="headerlink" title="Java深度历险（四）——Java垃圾回收机制与引用类型"></a>Java深度历险（四）——Java垃圾回收机制与引用类型</h2><h2 id="Java深度历险（五）——Java泛型"><a href="#Java深度历险（五）——Java泛型" class="headerlink" title="Java深度历险（五）——Java泛型"></a>Java深度历险（五）——Java泛型</h2><h2 id="Java深度历险（六）——Java注解"><a href="#Java深度历险（六）——Java注解" class="headerlink" title="Java深度历险（六）——Java注解"></a>Java深度历险（六）——Java注解</h2><h2 id="Java深度历险（七）——Java反射与动态代理"><a href="#Java深度历险（七）——Java反射与动态代理" class="headerlink" title="Java深度历险（七）——Java反射与动态代理"></a>Java深度历险（七）——Java反射与动态代理</h2><h2 id="Java深度历险（八）——Java-I-O"><a href="#Java深度历险（八）——Java-I-O" class="headerlink" title="Java深度历险（八）——Java I/O"></a>Java深度历险（八）——Java I/O</h2><h2 id="Java深度历险（九）——Java安全"><a href="#Java深度历险（九）——Java安全" class="headerlink" title="Java深度历险（九）——Java安全"></a>Java深度历险（九）——Java安全</h2><h2 id="Java深度历险（十）——Java对象序列化与RMI"><a href="#Java深度历险（十）——Java对象序列化与RMI" class="headerlink" title="Java深度历险（十）——Java对象序列化与RMI"></a>Java深度历险（十）——Java对象序列化与RMI</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://www.infoq.com/cn/articles/cf-java-byte-code?utm_source=articles_about_java-depth-adventure&amp;utm_medium=link&amp;utm_campaign=java-depth-adventure" target="_blank" rel="external">Java深度历险（一）——Java字节代码的操纵</a><br>[2]<a href="http://www.infoq.com/cn/articles/cf-Java-class-loader?utm_source=articles_about_java-depth-adventure&amp;utm_medium=link&amp;utm_campaign=java-depth-adventure" target="_blank" rel="external">Java深度历险（二）——Java类的加载、链接和初始化</a><br>[3]<a href="http://www.infoq.com/cn/articles/cf-java-thread?utm_source=articles_about_java-depth-adventure&amp;utm_medium=link&amp;utm_campaign=java-depth-adventure" target="_blank" rel="external">Java深度历险（三）——Java线程​：基本概念、可见性与同步</a><br>[4]<a href="http://www.infoq.com/cn/articles/cf-java-garbage-references?utm_source=articles_about_java-depth-adventure&amp;utm_medium=link&amp;utm_campaign=java-depth-adventure" target="_blank" rel="external">Java深度历险（四）——Java垃圾回收机制与引用类型</a><br>[5]<a href="http://www.infoq.com/cn/articles/cf-java-generics?utm_source=articles_about_java-depth-adventure&amp;utm_medium=link&amp;utm_campaign=java-depth-adventure" target="_blank" rel="external">Java深度历险（五）——Java泛型</a><br>[6]<a href="http://www.infoq.com/cn/articles/cf-java-annotation?utm_source=articles_about_java-depth-adventure&amp;utm_medium=link&amp;utm_campaign=java-depth-adventure" target="_blank" rel="external">Java深度历险（六）——Java注解</a><br>[7]<a href="http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy?utm_source=articles_about_java-depth-adventure&amp;utm_medium=link&amp;utm_campaign=java-depth-adventure" target="_blank" rel="external">Java深度历险（七）——Java反射与动态代理</a><br>[8]<a href="http://www.infoq.com/cn/articles/cf-java-i-o?utm_source=articles_about_java-depth-adventure&amp;utm_medium=link&amp;utm_campaign=java-depth-adventure" target="_blank" rel="external">Java深度历险（八）——Java I/O</a><br>[9]<a href="http://www.infoq.com/cn/articles/cf-java-security?utm_source=articles_about_java-depth-adventure&amp;utm_medium=link&amp;utm_campaign=java-depth-adventure" target="_blank" rel="external">Java深度历险（九）——Java安全</a><br>[10]<a href="http://www.infoq.com/cn/articles/cf-java-object-serialization-rmi?utm_source=articles_about_java-depth-adventure&amp;utm_medium=link&amp;utm_campaign=java-depth-adventure" target="_blank" rel="external">Java深度历险（十）——Java对象序列化与RMI</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.infoq.com/resource/minibooks/java-explore/zh/cover/cover-265.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;源自成富先生为InfoQ中文站撰写的《Java深度历险》专栏。本专栏的十篇文章，是关于Java不同方面但深入浅出的主题内容。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Java深度历险（一）——Java字节代码的操纵&lt;/li&gt;
&lt;li&gt;Java深度历险（二）——Java类的加载、链接和初始化&lt;/li&gt;
&lt;li&gt;Java深度历险（三）——Java线程​：基本概念、可见性与同步&lt;/li&gt;
&lt;li&gt;Java深度历险（四）——Java垃圾回收机制与引用类型&lt;/li&gt;
&lt;li&gt;Java深度历险（五）——Java泛型&lt;/li&gt;
&lt;li&gt;Java深度历险（六）——Java注解&lt;/li&gt;
&lt;li&gt;Java深度历险（七）——Java反射与动态代理&lt;/li&gt;
&lt;li&gt;Java深度历险（八）——Java I/O&lt;/li&gt;
&lt;li&gt;Java深度历险（九）——Java安全&lt;/li&gt;
&lt;li&gt;Java深度历险（十）——Java对象序列化与RMI&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Byte Code" scheme="http://ipcreator.me/tags/Byte-Code/"/>
    
      <category term="Class Loader" scheme="http://ipcreator.me/tags/Class-Loader/"/>
    
      <category term="Thread" scheme="http://ipcreator.me/tags/Thread/"/>
    
      <category term="Garbage Collector" scheme="http://ipcreator.me/tags/Garbage-Collector/"/>
    
      <category term="Generic" scheme="http://ipcreator.me/tags/Generic/"/>
    
      <category term="Annotation" scheme="http://ipcreator.me/tags/Annotation/"/>
    
      <category term="Reflection" scheme="http://ipcreator.me/tags/Reflection/"/>
    
      <category term="IO" scheme="http://ipcreator.me/tags/IO/"/>
    
      <category term="Security" scheme="http://ipcreator.me/tags/Security/"/>
    
      <category term="Serialization" scheme="http://ipcreator.me/tags/Serialization/"/>
    
  </entry>
  
  <entry>
    <title>Artificial Intelligence is the New Electricity</title>
    <link href="http://ipcreator.me/2017/03/31/AI/Business/andrew%20ng-artificial-intelligence-is-the-new-electricity/"/>
    <id>http://ipcreator.me/2017/03/31/AI/Business/andrew ng-artificial-intelligence-is-the-new-electricity/</id>
    <published>2017-03-31T02:10:06.000Z</published>
    <updated>2017-03-31T02:48:17.679Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.infoqstatic.com/statics_s2_20170328-0458_1/resource/articles/artificial-intelligence-is-the-new-electricity/zh/resources/32.jpg" alt=""></p>
<p>本文基于Andrew Ng在斯坦福MSx论坛的演讲（<a href="https://www.youtube.com/watch?v=21EiKfQYZXc&amp;app=desktop" target="_blank" rel="external">Artificial Intelligence is the New Electricity</a>），经演讲人授权，由InfoQ中文站总结并分享。</p>
<p>2017年2月，百度首席科学家、Coursera的联合创始人Andrew Ng在斯坦福MSx未来论坛上的一个演讲，吸引了全球的眼球。 他认为，人工智能(AI)对未来许多行业带来的变革，如同100多年前，美国“触电”一样——电对制造、运输、农业（尤其是冷藏）、医疗等等带来了划时代的变革。</p>
<p>AI驱动着百度的搜索和广告，调度百度外卖的快递员，选择路线，和预估运送时间。AI正在彻底改变金融工程，对物流的转变进行了一半，医疗和自动驾驶刚开始，而前景巨大。<u><strong>和“电”带来的变革一样，很难想象哪个行业不会被AI改变。</strong></u></p>
<a id="more"></a>
<h2 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h2><p>驱动百亿的市场容量的，基本上属于同一种AI:</p>
<blockquote>
<p>监督学习（Supervised learning），即用AI来确定A–&gt;B的映射——输入A和响应B的映射。</p>
</blockquote>
<p>用Email作为输入A，判断是否是垃圾邮件是响应B。<br>用图像作为输入，识别这是一千种物体中的哪种？<br>从声音A到文字B，从英文到法文，或从文字到声音。</p>
<p>软件可以学习这些输入A到响应B的映射——有很多好的工具来让机器学习。比如50,000小时的音频和对应的文本，就能让机器学到如何从音频内容转化为文本内容。通过大量的电邮数据和区分垃圾的标签，也可以很快地训练出一个垃圾邮件过滤器。</p>
<p>现在的AI还很初级——A到B的映射而已，不过已经推动着很大的市场。百度有很好的算法来预测某用户是否会点击某广告。向受众呈现更相关的广告，能为互联网营销和广告公司带来极大的赚钱机会。这可能是AI最赚钱的应用。</p>
<h2 id="在哪些产品里能用到AI？"><a href="#在哪些产品里能用到AI？" class="headerlink" title="在哪些产品里能用到AI？"></a>在哪些产品里能用到AI？</h2><p>产品经理常常希望了解AI能实现的，和不能实现的。一个简单的思路是：一般人能在一秒内想出来的事情，现在或很快就可以用AI自动实现。</p>
<p>AI进展最快的领域正是人能做得到的领域。比如自动驾驶。人类能驾驶，所以AI也能驾驶。在医学影像阅片和分析上，人类放射科医生能够阅片，所以AI也很可能在未来几年内做到。</p>
<blockquote>
<p>而人类难以做到的事情，比如预测股市变化，AI可能也难。</p>
</blockquote>
<p>原因1：人类能做的，至少是可行的；<br>原因2：可以利用人类的数据作为培训样本，比如前面提到的输入A和响应B；<br>原因3：人类能提供指导。如果AI对某个放射影像的结论有误，设计者可以向医生请教，医生所做的正确结论的原因是什么？ 进而对AI进行改善。</p>
<p>在Andrew Ng所接触到的80-90%的AI项目中，都遵循这一规律：</p>
<blockquote>
<p>在人类能做到的领域，AI的进展更快。很多项目的发展一旦超越人类水准，发展也会变得缓慢。这也带来一个社会矛盾：如果AI和人的水平类似，实质上是跟人类竞争。</p>
</blockquote>
<h2 id="AI的发展趋势"><a href="#AI的发展趋势" class="headerlink" title="AI的发展趋势"></a>AI的发展趋势</h2><p>AI已经出现了几十年了，而近五年发展明显加速，为什么？</p>
<p>当以前的机器学习算法性能上升到一定程度，即使再增加数据样本量（前文谈到的输入A、响应B的A-B映射），性能改善也很有限。似乎超过一定样本量之后，再多的数据也对算法不起作用。</p>
<p>而过去几年，主要由于GPU，我们终于实现了能利用这么巨大的数据集的机器学习软件。将数据输入一个小的神经网络，当超过一定性能后，上升变得平缓。而<u>不断地把数据输入一个很大的神经网络时，即使性能上升没有那么快，也会保持上升趋势，随着数据量的增大，不断提高。</u></p>
<p>因此，要想获得很好的AI性能，需要两样东西：</p>
<p>很大的A-B映射的数据集；<br>大的神经网络。现在常用的大型神经网络建立在HPC高性能计算集群上。</p>
<p>现在的大型AI团队包括<strong>机器学习</strong>和<strong>高性能计算</strong>两组人，才能获得足够计算能力。百度AI团队里的这两种人员都专注于各自领域，没有人能两者兼备。</p>
<h2 id="什么是神经网络？有没可能取代人类大脑？"><a href="#什么是神经网络？有没可能取代人类大脑？" class="headerlink" title="什么是神经网络？有没可能取代人类大脑？"></a>什么是神经网络？有没可能取代人类大脑？</h2><blockquote>
<p>问题是，我们不清楚人脑如何工作，所以很难造出取代人类大脑的神经网络。</p>
</blockquote>
<h2 id="什么是神经网络？先看个最简单的神经网络："><a href="#什么是神经网络？先看个最简单的神经网络：" class="headerlink" title="什么是神经网络？先看个最简单的神经网络："></a>什么是神经网络？先看个最简单的神经网络：</h2><p>如果想输入房屋面积，得到房屋总价，可以用面积-总价的一阶近似的线性模型来描述这个神经网络。</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20170328-0458_1/resource/articles/artificial-intelligence-is-the-new-electricity/zh/resources/30.png" alt=""></p>
<p>或者用更多因素建模，比如通过面积和卧室数，从第一个神经元得到可以支持的家庭人数。再通过所在地址的邮编和社区富裕程度，从第二个神经元得到附近学校的质量。</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20170328-0458_1/resource/articles/artificial-intelligence-is-the-new-electricity/zh/resources/31.png" alt=""></p>
<p>这就成为一个神经网络。</p>
<blockquote>
<p>面积、卧室数、邮编、社区富裕程度属于“输入”集合A，总价属于“响应”集合B。</p>
</blockquote>
<p>好处在于，当训练这样一个神经网络时，用户无需关心中间因素，诸如家庭人数、安全度、学校质量等，也无需关心每个神经元如何将输入映射到中间结果。<strong>只需要给出输入集合A和响应集合B，神经网络将自动形成中间的计算过程和参数。当A和B的集合足够大，神经网络可以自动算出很多东西。</strong> 神经网络看上去非常简单，让很多初学者觉得有点失望，但它确实能解决很多问题。关键在于数据量要够大——几万或几十万个样本本身能提供大量的信息，而软件本身只是一小部分。</p>
<h2 id="如何保护AI业务？"><a href="#如何保护AI业务？" class="headerlink" title="如何保护AI业务？"></a>如何保护AI业务？</h2><p>AI研究较前沿的团队都比较开放，常常发布研究成果。百度的AI研究论文也没有隐藏什么成果——在人脸识别等论文里，都分享了所有的细节。</p>
<p><strong>既然很难把算法本身隐藏起来，如何保护AI业务？ 当前稀缺资源有两种，一种是数据，二是人才。</strong></p>
<p>获取巨量数据很难，要包括输入A+响应B。比如语音识别用了5万小时的音频来训练，今年准备用10万小时，相当于百度10年积累的音频。</p>
<p>以人脸识别所用的训练图像数量为例，</p>
<p>学术上最常用的基准测试/比赛：1百万幅；<br>所用图像数最多的计算机视觉对象识别学术论文：1500万幅；<br>百度用来训练世界上最先进的人脸识别系统：两亿幅！</p>
<p>如果只是5-10人的研发团队，很难获得这样规模的数据。</p>
<blockquote>
<p>百度这样的大企业的经常推出一些新产品不一定是为了营收，而是为了数据，然后通过后续的产品来获得收益。</p>
</blockquote>
<p>另一个稀缺资源是人才。AI的应用需要根据具体业务场景来定制。仅仅下载个开源包，无法解决问题。</p>
<p>实际情况下，<strong>是否适合用某种垃圾邮件识别或语音识别技术？针对某种场景，机器学习怎么用？</strong> 所以各个公司都在为数据挖掘争夺AI人才，来定制AI技术，找到所需要的A和B各自代表什么，怎么找到这些数据和如何调整算法来适应业务场景。</p>
<h2 id="AI的良性循环"><a href="#AI的良性循环" class="headerlink" title="AI的良性循环"></a>AI的良性循环</h2><p>先做出某种产品。比如通过语音识别，以语音实现搜索；<br>然后吸引来很多用户，用户产生数据；<br>再通过机器学习，用数据改善产品。</p>
<p>这就形成了AI产品的良性循环。最好的产品能获得最多的用户，带来最多的数据，通过现代机器学习体系，能得到最好的AI，最终让产品变得更好，周而复始。</p>
<p>百度发布新的产品，会特别考虑怎样推动这样的良性循环，会包括相当先进的产品发布策略，比如按地理区域、细分市场等，来更好地推动这个循环。</p>
<p>这种良性循环的理念很早就有了，只是最近变得更加明显。正如前文所述，当数据超过一定规模后，传统AI算法无法明显改善AI性能，因此数据多的优势不明显，大公司也很难保护自己的AI业务。<strong>现在数据越多，AI性能越好，大公司也更容易保护自己的优势。</strong></p>
<h2 id="AI炒作的非良性循环"><a href="#AI炒作的非良性循环" class="headerlink" title="AI炒作的非良性循环"></a>AI炒作的非良性循环</h2><p>许多人担心AI会不会取代或威胁人类。有一小部分研究AI的人专门从事对“邪恶AI”的炒作，以获得投资人或政府机构的投资，来研究“反邪恶AI”。道高一尺，魔高一丈，又进一步推动对“邪恶AI”的炒作，从而形成非良性循环，非常不健康。</p>
<p>担心AI变得邪恶，类似于担心火星的未来人口过剩。现在看不出AI将会怎样走偏，因此也谈不上有针对地研究相应措施。 研究本身没有问题，不同的研究是好事，但是对邪恶AI的研究占用不恰当的资源，就不应该了。两个人，或者10个人来研究邪恶AI也许没问题，但是现在投资得太多。</p>
<h2 id="AI对就业的影响"><a href="#AI对就业的影响" class="headerlink" title="AI对就业的影响"></a>AI对就业的影响</h2><p>AI对就业带来的影响更让人担心。有些AI项目确实是瞄准了某些人类岗位，而从事这些工作的人并不清楚严重性。硅谷创造了大量财富，但也应该对其造成的问题承担责任，比如造成的失业问题。AI取代人类岗位的现实问题，更应该引起重视，而不是被邪恶AI的炒作转移了注意力。</p>
<h2 id="AI产品管理"><a href="#AI产品管理" class="headerlink" title="AI产品管理"></a>AI产品管理</h2><p>AI是个让人兴奋的领域，同时也存在一些挑战。 如何将AI融入公司业务？</p>
<blockquote>
<p>产品经理的职责是找到用户喜欢的，而工程师的角色是做出可行的产品。两者共同协作，才能做出理想的产品。</p>
</blockquote>
<p>AI是个新生事物，所以技术公司以前的流程和工作方法，不太适用。硅谷的产品经理和工程师的合作已有一套标准流程。比如开发APP时，产品经理先画出线框图，比如logo, 按钮，各个板块等，工程师再写出代码来实现。 但是AI的APP无法通过画线框来描述。通过什么形式，把产品经理头脑里对AI产品的功能要求明白地分享给工程师呢？</p>
<p>比如开发语音识别系统，实现语音搜索，有很多改善方向。比如：</p>
<p>在嘈杂环境下如何改善,比如车里或咖啡馆?<br>仅改善窄带语音信号；<br>对不同口音改善；</p>
<p>百度发现，产品经理通过数据和工程师沟通，是个较好的办法。 产品经理负责提供测试数据集给工程师，比如一万个音频和对应的文字，来说明所关心的问题，工程师也能更明白需要解决的问题。如果这些音频里有大量车辆噪音，工程师就知道车辆噪音是问题。 如果是混合了几种不同噪声，工程师也能想办法解决。最糟糕的情况是，产品经理提供的测试数据，并不能代表自己想解决的问题，那就出问题了。</p>
<p>同时，新产品设计的流程有很多， 比如想设计一个交流型AI机器人：</p>
<ul>
<li>人：“我想叫个外卖”；</li>
<li>AI：“你喜欢哪种类型餐馆？”；</li>
<li>人：“川菜”；</li>
<li>AI:“这些可供选择，xxx,yyy,zzz,…”；</li>
</ul>
<p>线框图只能显示对话过程，无法描述所需AI的复杂程度等。百度的产品经理和工程师会在一起，写五十种对话，</p>
<ul>
<li>人：“请帮我定一个结婚纪念日的餐馆”；</li>
<li>AI：“你需要订花吗？”；</li>
</ul>
<p>这时候，工程师会问一些更具体的问题，比如每种场景是否都需要继续提配套产品的问题，比如谈到圣诞节时，是否要问对方要不要买圣诞装饰？一起思考，共同讨论需求和技术，很有效。</p>
<p>对AI的宣传里，有很多吸引眼球的技术，不过它们未必最有用。<strong>如何将吸引眼球的技术和产品、业务相结合？软件产业已经有标准流程，比如代码审查、敏捷开发等，如何组织AI的产品工作，有很长的路要走，现在正是考虑这些问题的时候。</strong></p>
<h2 id="短期内，AI有哪些机会？"><a href="#短期内，AI有哪些机会？" class="headerlink" title="短期内，AI有哪些机会？"></a>短期内，AI有哪些机会？</h2><h3 id="语音识别正在起飞"><a href="#语音识别正在起飞" class="headerlink" title="语音识别正在起飞"></a>语音识别正在起飞</h3><p>最近准确率已经提高到很有用的程度。4-5个月之前，斯坦福大学计算机系教授James Landay、百度、华盛顿大学一起展示了在手机上输入英文和普通话，用语音识别的速度比用手机输入快3倍。去年百度的所有语音识别产品年度环比增长大约100%，现在正是语音识别技术腾飞之时。美国有几个公司做智能语音控制器（Smart Speakers)，用语音控制家用设备也会很快推广。相关的操作系统和硬件都会很快发布。</p>
<h3 id="计算机视觉也即将到来"><a href="#计算机视觉也即将到来" class="headerlink" title="计算机视觉也即将到来"></a>计算机视觉也即将到来</h3><p>中国的人脸识别发展速度很快。因为中国的手机比笔记本更普及，很多人有手机，而不一定有笔记本。 在中国可以仅仅凭手机申请助学贷款。涉及到钱，所以需要先验证身份和很多东西。这加速了人脸识别的发展。通过手机进行人脸识别，作为 用生物标识进行身份认证的一种方法，在中国发展很快。</p>
<p>在百度总部，不需要RFID卡进行认证，而是直接刷脸进门，Andrew Ng在YouTube上有一段视频。现在人们对人脸识别技术已经足够信任，并在安全要求较高的场景下使用。</p>
<p>百度在语音识别和计算机识别上的资金投入和数据投入巨大，任何小开发团体远远无法相提并论，也不太可能有其他出乎意料的技术突破。</p>
<h3 id="医疗健康的AI应用"><a href="#医疗健康的AI应用" class="headerlink" title="医疗健康的AI应用"></a>医疗健康的AI应用</h3><p>Andrew Ng对AI对医疗健康领域带来的影响很看好。很多现在的放射科医生会被AI影响到。如果想在放射科一直工作四十年，不是个好的职业计划。</p>
<p>还有很多垂直领域将受到AI的影响，比如金融工程和教育。不过短期之内还不太会对教育产生实质性的影响。</p>
<h2 id="永恒的春天"><a href="#永恒的春天" class="headerlink" title="永恒的春天"></a>永恒的春天</h2><p>光从监督学习已经看得出AI将如何逐渐改变各个行业。其他的AI形式，比如无监督学习、强化学习、迁移学习等等，都还在研究阶段，现在的市场规模较小。</p>
<p>有很多行业会经历几个冬天，然后迎来永恒的春天。AI经历过两个冬天，现在已经进入永恒的春天。就像硅的春天一样，半导体、晶体管、计算周期这些都将和人类一起发展很久。神经网络和深度学习会繁荣很长时间，一百年或许太远，但一些重要应用改变几个大行业的路线图已经很清晰。</p>
<p>AI确实正在取代人类的一些岗位。当某些岗位被AI取代后，我们需要新的教育系统，来帮助失去工作的人获得新的技能。政府应该为这些愿意学习新技能的人，提供基本收入保障，重新成为劳动者的一员。我们需要新的系统和结构，来让帮助社会向新世界进化。虽然会有新类型的工作，但工作岗位的消失也比以前更快。</p>
<h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><p>大公司在数据和人才上有巨大优势，那么创业公司的机会在哪里？ 投资者可以关注哪种规模的创新？</p>
<p>在语音识别、人脸识别上，小公司非常难与大公司竞争，除非有意料之外的技术突破。同时，也有很多小垂直领域适合创业公司，比如医疗影像。有一些疾病的病例不多，如果有一千张影像，也许就涵盖了所有所需的数据了，一些垂直领域需要的数据量也不大。</p>
<p>另外，<strong>AI的机遇非常多，大公司会放弃很多的小的垂直市场，因为精力有限，大的机会还研究不过来。</strong></p>
<h2 id="AI在发明创造上，有哪些进展？"><a href="#AI在发明创造上，有哪些进展？" class="headerlink" title="AI在发明创造上，有哪些进展？"></a>AI在发明创造上，有哪些进展？</h2><p>还很早期。AI可以作曲，但这很主观。20年前的技术做出来的曲子有人喜欢，有人不喜欢。有些项目用AI制作图片特效，用特效模仿某画家作品，这些都是小而有趣的领域。 现在还看不到有什么技术路线能发明复杂的系统。</p>
<h2 id="如果摩尔定律不再成立，对AI的扩展性有什么影响？"><a href="#如果摩尔定律不再成立，对AI的扩展性有什么影响？" class="headerlink" title="如果摩尔定律不再成立，对AI的扩展性有什么影响？"></a>如果摩尔定律不再成立，对AI的扩展性有什么影响？</h2><p>一些高性能计算公司的硬件路线图显示，摩尔定律在单芯片上不再那么有效，但<strong>神经网络、深度学习所需的计算类型在未来几年仍然能很好地扩展</strong>。SIMD（单指令多数据）让并行化处理负载非常容易。神经网络很容易并行化，加速计算的空间还很大。</p>
<p>AI面对的诸多问题中，许多问题的瓶颈在于数据，也有很多的瓶颈在于计算速度——能便宜地处理数据的速度赶不上获得数据的速度。所以高性能计算的路线图应该包括这方面。</p>
<h2 id="算法是AI里的特殊作料。是否应通过知识产权保护，还是绕过这个问题去设计产品？-对机器学习的研究者，是否有和AI产品经理-工程师那样类似的流程或良性循环，来实现突破或改善研究流程？"><a href="#算法是AI里的特殊作料。是否应通过知识产权保护，还是绕过这个问题去设计产品？-对机器学习的研究者，是否有和AI产品经理-工程师那样类似的流程或良性循环，来实现突破或改善研究流程？" class="headerlink" title="算法是AI里的特殊作料。是否应通过知识产权保护，还是绕过这个问题去设计产品？ 对机器学习的研究者，是否有和AI产品经理-工程师那样类似的流程或良性循环，来实现突破或改善研究流程？"></a>算法是AI里的特殊作料。是否应通过知识产权保护，还是绕过这个问题去设计产品？ 对机器学习的研究者，是否有和AI产品经理-工程师那样类似的流程或良性循环，来实现突破或改善研究流程？</h2><p>知识产权的问题比较难讲。有些公司申请了大量专利，但是是否真能带来实质性的保护？所以我们往往从<strong>如何从战略上思考细节，比如让数据保护自己。</strong></p>
<p>研究机构更偏好新鲜、抢眼球的东西，来发表论文。训练新研究者的办法通常是读很多论文。而大家常常忽视重复论文里的试验的重要性。不一定要把精力大量用于发明新东西，而花时间重复别人的发布结果也是很好的培训方法。<strong>和培训博士生一样：去学习和理解别人的论文，重复别人的试验，争取获得类似的结果，很快你就能产生自己的想法去推动最新的科技。</strong></p>
<h2 id="对希望从事机器人相关工作的机械工程学生，有哪些和AI、机器人相关的机会比较适合？"><a href="#对希望从事机器人相关工作的机械工程学生，有哪些和AI、机器人相关的机会比较适合？" class="headerlink" title="对希望从事机器人相关工作的机械工程学生，有哪些和AI、机器人相关的机会比较适合？"></a>对希望从事机器人相关工作的机械工程学生，有哪些和AI、机器人相关的机会比较适合？</h2><p>很多机械工程背景的人，在AI领域很成功。可以上一些计算机/AI课程，和AI领域的老师聊聊。一些垂直领域存在有趣的AI机器人的机会，比如精准农业。Blue River用计算机视觉来区分不同植物，比如不同品种卷心菜，选择留下哪些，除掉哪些，来提高产量。</p>
<p>中国也生产和销售很多社交和伴侣机器人，美国还没起怎么起步。</p>
<h2 id="让AI和人配合起来的前景如何？很多AI应用是基于AI自己，如果采用AI-人的混合方案？比如自动驾驶等？"><a href="#让AI和人配合起来的前景如何？很多AI应用是基于AI自己，如果采用AI-人的混合方案？比如自动驾驶等？" class="headerlink" title="让AI和人配合起来的前景如何？很多AI应用是基于AI自己，如果采用AI+人的混合方案？比如自动驾驶等？"></a>让AI和人配合起来的前景如何？很多AI应用是基于AI自己，如果采用AI+人的混合方案？比如自动驾驶等？</h2><p>没有统一的规则，应该跟实际情况有关。很多语音识别是为了让人类更高效，比如通过手机。对自动驾驶汽车，可能需要10-15秒来转换控制权，因为难让容易分神的人快速接手驾驶，很困难。这种情况下，由AI独立控制更安全。 所以<strong>从使用者角度来讲，人类和AI混合的自动化比较困难。</strong></p>
<h2 id="对在线教育而言，主要问题是动机，人们不愿意花那么多时间来学完整个课程。这是不是最大的挑战？-其他还有什么挑战？"><a href="#对在线教育而言，主要问题是动机，人们不愿意花那么多时间来学完整个课程。这是不是最大的挑战？-其他还有什么挑战？" class="headerlink" title="对在线教育而言，主要问题是动机，人们不愿意花那么多时间来学完整个课程。这是不是最大的挑战？ 其他还有什么挑战？"></a>对在线教育而言，主要问题是动机，人们不愿意花那么多时间来学完整个课程。这是不是最大的挑战？ 其他还有什么挑战？</h2><p>AI对在线教育有帮助。个性化的辅导已经谈论了很长时间，Coursera用AI推荐个性化的课程，自动打分，在细节上确实有帮助。但在利用AI之前，教育的数字化还有很长的路要走。很多行业都有个规律：先有数据，再有AI，比如医疗，美国电子病历（EHR）的进展很大。随着电子病历的兴起，影像胶片变成数码图片，这些数字化产生了很多数据供AI使用，并产生价值。教育需要先经历数字化，这一阶段还有很多工作要做。</p>
<h2 id="百度如何用AI来管理自己的云上数据中心？-比如IT运维管理的例子？"><a href="#百度如何用AI来管理自己的云上数据中心？-比如IT运维管理的例子？" class="headerlink" title="百度如何用AI来管理自己的云上数据中心？ 比如IT运维管理的例子？"></a>百度如何用AI来管理自己的云上数据中心？ 比如IT运维管理的例子？</h2><p>两年前，百度做了个项目，可以提前一天自动检测出硬件故障，特别是硬盘故障。这就可以事先拷贝、热插拔进行预防处理。还可以降低数据中心的用电量，负载均衡等，都是很多小细节的改善。</p>
<h2 id="能否举一些例子说明能通过仔细地建模和规划，用AI解决的复杂问题？对这些问题，人类可能需要进行长时间的思考。"><a href="#能否举一些例子说明能通过仔细地建模和规划，用AI解决的复杂问题？对这些问题，人类可能需要进行长时间的思考。" class="headerlink" title="能否举一些例子说明能通过仔细地建模和规划，用AI解决的复杂问题？对这些问题，人类可能需要进行长时间的思考。"></a>能否举一些例子说明能通过仔细地建模和规划，用AI解决的复杂问题？对这些问题，人类可能需要进行长时间的思考。</h2><p>亚马逊是个很好的例子。它知道我浏览过什么，读过什么，比我太太更了解。电脑对人们看过什么，点击过什么广告更了解，所以在广告方面做得非常好。 对于有些任务，计算机可以处理的信息量远远超过人类，并根据规律建模，进行预测，这方面AI比人做得更好。</p>
<p><strong>将AI融入人类工作的很大一部分，是将一块块的AI部分串成一个大系统。</strong> 比如为了造自动驾驶汽车，要用相机拍摄的图像，雷达等，组成车前方的一幅图，再由监督学习估算和其他车的距离，以及和行人的距离，这只是两个重要的AI部件，还需要其他的部件来估计5秒后车的位置，行人的方向。还有一个部件来分析，根据行人车辆等不同对象的运动情况，我应该怎么走？ 然后还需要算方向盘的旋转程度，以此类推。</p>
<p>所以复杂的AI系统有很多小AI部件，工程人员要知道如何将这种超级学习能力融合到更大的系统里，来创造价值。</p>
<h2 id="产品经理和社会学家、律师等如何协调？比如自动驾驶汽车在撞人前，开发者和AI应从驾驶者，还是行人的角度考虑问题？这只是个法律问题，但也有很多类似情况。产品管理者和不同的功能部门的合作时，应该扮演什么角色？"><a href="#产品经理和社会学家、律师等如何协调？比如自动驾驶汽车在撞人前，开发者和AI应从驾驶者，还是行人的角度考虑问题？这只是个法律问题，但也有很多类似情况。产品管理者和不同的功能部门的合作时，应该扮演什么角色？" class="headerlink" title="产品经理和社会学家、律师等如何协调？比如自动驾驶汽车在撞人前，开发者和AI应从驾驶者，还是行人的角度考虑问题？这只是个法律问题，但也有很多类似情况。产品管理者和不同的功能部门的合作时，应该扮演什么角色？"></a>产品经理和社会学家、律师等如何协调？比如自动驾驶汽车在撞人前，开发者和AI应从驾驶者，还是行人的角度考虑问题？这只是个法律问题，但也有很多类似情况。产品管理者和不同的功能部门的合作时，应该扮演什么角色？</h2><p>这个问题的一个相似版本是“有轨电车”问题，会产生伦理矛盾。一个电车走到岔道口，继续往前会撞死5个人，你可以用扳手将电车扳到另一条轨道，撞死该轨道上的一个人，而你成为凶手，你扳吗？</p>
<p>除了在哲学课里，很少有谁在现实生活里遇到过这个问题，所以，它并不重要。自动驾驶的开发者没去讨论它。实际上，如果谁真正遇到了，可能之前已经犯了其他错误了。自动驾驶处理的问题更实际，和你自己开车一样。比如，对面有个白色的大车，是否能及时刹车？</p>
<p>感谢冬雨对本文的审校。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://www.infoq.com/cn/articles/artificial-intelligence-is-the-new-electricity" target="_blank" rel="external">人工智能永恒的春天已经到来，你准备好了吗？</a><br>[2]<a href="https://www.youtube.com/watch?v=21EiKfQYZXc&amp;app=desktop" target="_blank" rel="external">Andrew Ng: Artificial Intelligence is the New Electricity</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdn.infoqstatic.com/statics_s2_20170328-0458_1/resource/articles/artificial-intelligence-is-the-new-electricity/zh/resources/32.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文基于Andrew Ng在斯坦福MSx论坛的演讲（&lt;a href=&quot;https://www.youtube.com/watch?v=21EiKfQYZXc&amp;amp;app=desktop&quot;&gt;Artificial Intelligence is the New Electricity&lt;/a&gt;），经演讲人授权，由InfoQ中文站总结并分享。&lt;/p&gt;
&lt;p&gt;2017年2月，百度首席科学家、Coursera的联合创始人Andrew Ng在斯坦福MSx未来论坛上的一个演讲，吸引了全球的眼球。 他认为，人工智能(AI)对未来许多行业带来的变革，如同100多年前，美国“触电”一样——电对制造、运输、农业（尤其是冷藏）、医疗等等带来了划时代的变革。&lt;/p&gt;
&lt;p&gt;AI驱动着百度的搜索和广告，调度百度外卖的快递员，选择路线，和预估运送时间。AI正在彻底改变金融工程，对物流的转变进行了一半，医疗和自动驾驶刚开始，而前景巨大。&lt;u&gt;&lt;strong&gt;和“电”带来的变革一样，很难想象哪个行业不会被AI改变。&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Andrew Ng" scheme="http://ipcreator.me/tags/Andrew-Ng/"/>
    
  </entry>
  
  <entry>
    <title>App Architecture of Best Practice</title>
    <link href="http://ipcreator.me/2017/03/31/Program/Android/Design/ui-app/"/>
    <id>http://ipcreator.me/2017/03/31/Program/Android/Design/ui-app/</id>
    <published>2017-03-30T23:35:06.000Z</published>
    <updated>2017-04-03T16:52:48.870Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/androidstudio.jpg" alt=""><br>More Little, More Fast,<br>More Safe, More Flexible<br>More Smart, More Power,</p>
<a id="more"></a>
<h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><h2 id="Third-Library"><a href="#Third-Library" class="headerlink" title="Third Library"></a>Third Library</h2><h2 id="Static-Code-Inspect-Tool"><a href="#Static-Code-Inspect-Tool" class="headerlink" title="Static Code Inspect Tool"></a>Static Code Inspect Tool</h2><p>###</p>
<p>###</p>
<p>###</p>
<h2 id="Dynamic-Running-Checker"><a href="#Dynamic-Running-Checker" class="headerlink" title="Dynamic Running Checker"></a>Dynamic Running Checker</h2><p>###</p>
<p>###</p>
<p>###</p>
<h2 id="Confige-Tool"><a href="#Confige-Tool" class="headerlink" title="Confige Tool"></a>Confige Tool</h2><h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><h3 id="QiNiu"><a href="#QiNiu" class="headerlink" title="QiNiu"></a>QiNiu</h3><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://blog.csdn.net/sbsujjbcy/article/details/50707696" target="_blank" rel="external">MVP模式在Android开发中的最佳实践</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/androidstudio.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;More Little, More Fast,&lt;br&gt;More Safe, More Flexible&lt;br&gt;More Smart, More Power,&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Best Practice" scheme="http://ipcreator.me/tags/Best-Practice/"/>
    
      <category term="UI" scheme="http://ipcreator.me/tags/UI/"/>
    
      <category term="Architecture" scheme="http://ipcreator.me/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>Concept of Reflection in Java</title>
    <link href="http://ipcreator.me/2017/03/31/Program/Java/what-is-reflection-in-java/"/>
    <id>http://ipcreator.me/2017/03/31/Program/Java/what-is-reflection-in-java/</id>
    <published>2017-03-30T23:35:06.000Z</published>
    <updated>2017-03-31T08:21:09.339Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/java-reflection.png" alt=""></p>
<h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ol>
<li><a href="#What&#39;s-the-reflection">What’s the reflection</a></li>
<li><a href="#Why-use-reflection">Why use reflection</a></li>
<li><a href="#How-to-use-reflection">How to use reflection</a></li>
</ol>
<a id="more"></a>
<h2 id="What’s-the-reflection"><a href="#What’s-the-reflection" class="headerlink" title="What’s the reflection"></a>What’s the reflection</h2><p>在Java运行时环境中，对于任意一个类，能否知道这个类有哪些属性和方法？对于任意一个对象，能否调用它的任意一个方法？<br>答案是肯定的。</p>
<p>这种动态获取类的信息以及动态调用对象的方法的功能来自于Java语言的反射（Reflection）机制。</p>
<blockquote>
<p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制.</p>
</blockquote>
<h2 id="Why-use-reflection"><a href="#Why-use-reflection" class="headerlink" title="Why use reflection"></a>Why use reflection</h2><h3 id="Functionality"><a href="#Functionality" class="headerlink" title="Functionality"></a>Functionality</h3><p>Java反射机制主要提供了以下功能：</p>
<ol>
<li>在运行时判断任意一个对象所属的类。</li>
<li>在运行时构造任意一个类的对象。</li>
<li>在运行时判断任意一个类所具有的成员变量和方法。</li>
<li>在运行时调用任意一个对象的方法。</li>
</ol>
<p>Reflection是Java被视为动态（或准动态）语言的一个关键性质。<br>这个机制允许程序在运行时透过Reflection APIs取得任何一个已知名称的class的内部信息。<br>包括其modifiers（诸如public、static等）、 superclass（例如Object）、实现了的 interfaces （例如Serializable）、也包括其fields和methods的所有信息，并可于运行时改变fields内容或调用methods。</p>
<h3 id="Dynamic-Language"><a href="#Dynamic-Language" class="headerlink" title="Dynamic Language"></a>Dynamic Language</h3><p>动态语言的定义“程序运行时，允许改变程序结构或者变量类型，这种语言称为动态语言”。</p>
<p>从这个观点看，Perl，Python，Ruby是动态语言，C++，Java，C#不是动态语言。</p>
<p>尽管在这样的定义与分类下Java不是动态语言，它却有着一个非常突出的动态相关机制：Reflection。这个字的意思是：反射、映像、倒影，用在Java身上指的是我们可以于运行时加载、探知、使用编译期间完全未知的classes。</p>
<p>换句话说，Java程序可以加载一个运行时才得知名称的class，获悉其完整构造（但不包括methods定义），并生成其对象实体、或对其fields设值、或唤起其methods。</p>
<p>这种“看透”class的能力（the ability of the program to examine itself）被称为<strong>introspection（内省、内观、反省）</strong> 。Reflection和introspection是常被并提的两个术语。</p>
<h2 id="How-to-use-reflection"><a href="#How-to-use-reflection" class="headerlink" title="How to use reflection"></a>How to use reflection</h2><h3 id="Java-Reflection-API"><a href="#Java-Reflection-API" class="headerlink" title="Java Reflection API"></a>Java Reflection API</h3><p>在JDK中，主要由以下类来实现Java反射机制，这些类（除了第一个）都位于java.lang.reflect包中<br>Class类：代表一个类，位于java.lang包下。<br>Field类：代表类的成员变量（成员变量也称为类的属性）。<br>Method类：代表类的方法。<br>Constructor类：代表类的构造方法。<br>Array类：提供了动态创建数组，以及访问数组的元素的静态方法。</p>
<h3 id="Class-Object"><a href="#Class-Object" class="headerlink" title="Class Object"></a>Class Object</h3><p>要想使用反射，首先需要获得待操作的类所对应的Class对象。<br>Java中，无论生成某个类的多少个对象，这些对象都会对应于同一个Class对象。<br>这个Class对象是由JVM生成的，通过它能够获悉整个类的结构。</p>
<h3 id="Get-the-Object-of-Class"><a href="#Get-the-Object-of-Class" class="headerlink" title="Get the Object of Class"></a>Get the Object of Class</h3><h4 id="By-Static-Method"><a href="#By-Static-Method" class="headerlink" title="By Static Method"></a>By Static Method</h4><pre><code>Class.forName(&quot;java.lang.String&quot;);
</code></pre><h4 id="By-class-Grammar"><a href="#By-class-Grammar" class="headerlink" title="By .class Grammar"></a>By .class Grammar</h4><pre><code>String.class;
</code></pre><h4 id="By-Object’s-getClass-Method"><a href="#By-Object’s-getClass-Method" class="headerlink" title="By Object’s getClass() Method"></a>By Object’s getClass() Method</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"aa"</span>;</div><div class="line">Class&lt;?&gt; classType1 = str.getClass();</div></pre></td></tr></table></figure>
<p>getClass()方法定义在Object类中，不是静态方法，需要通过对象来调用，并且它声明为final，表明不能被子类所覆写。<br>直接print所获得的Class对象classType会输出：class 完整类名<br>如果调用该Class对象的getName()方法，则输出完整类名，不加class。</p>
<h3 id="Get-the-Fields-from-Object"><a href="#Get-the-Fields-from-Object" class="headerlink" title="Get the Fields from Object"></a>Get the Fields from Object</h3><p>类的每一个成员变量都对应一个Field对象，Class类提供了以下方法来获取类的成员变量对应的Field对象：</p>
<ol>
<li>Field getDeclaredField(String name)：根据传入的变量名称返回此Class对象所表示的类或接口中声明的变量对应的Field对象。</li>
<li>Field[] getDeclaredFields()：返回一个Field类型的数组，包含此Class对象所表示的类或接口中声明的所有变量的Field对象。</li>
<li>Field getField(String name)：根据传入的变量名返回一个Field对象，注意与getDeclaredField(String name)不同的是，此方法返回的是public变量对应的Field对象。</li>
<li>Field[] getFields()：返回一个Field类型的数组，注意与Field[] getDeclaredFields()方法不同的是，此方法返回的是所有public变量对应的Field对象。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//首先，获得String类的Class对象</span></div><div class="line">Class&lt;?&gt; classType = Class.forName(<span class="string">"java.lang.String"</span>);</div><div class="line"></div><div class="line"><span class="comment">//获得String类中声明的所有成员变量的Field对象的数组</span></div><div class="line">Field[] fields = classType.getDeclaredFields();</div><div class="line"></div><div class="line"><span class="comment">//获得String类中声明的public成员变量的Field对象的数组</span></div><div class="line">Field[] publicFields = classType.getFields();</div></pre></td></tr></table></figure>
<h3 id="Get-the-Methods-from-Object"><a href="#Get-the-Methods-from-Object" class="headerlink" title="Get the Methods from Object"></a>Get the Methods from Object</h3><p>类中的每一个方法都对应一个Method对象，Class类提供了以下方法来获取类中的方法对应的Method对象：</p>
<ol>
<li><p>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)：返回一个Method对象，参数name表示方法名，可变参数parameterTypes是一个Class对象的数组，代表方法的参数的Class类型；</p>
</li>
<li><p>Method[] getDeclaredMethods()：返回Method对象的一个数组，这些对象反映此Class对象所表示的类或接口声明的所有方法，包括公共、保护、默认访问和私有方法，但不包括继承的方法；</p>
</li>
<li><p>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)：返回一个Method对象，注意和此Method对象对应的方法是公共(public)方法；</p>
</li>
<li><p>Method[] getMethods()：返回一个Method数组，这些对象反映此Class对象所表示的类或接口中声明的公共(public)方法（也包括父类或父接口中声明的public方法）。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//首先，获得类的Class对象</div><div class="line">Class&lt;?&gt; classType = Class.forName(&quot;java.lang.reflect.Proxy&quot;);</div><div class="line"></div><div class="line">//获得类中声明的所有方法的Method对象的数组，不包括继承的父类的方法</div><div class="line">Method[] methods = classType.getDeclaredMethods();</div><div class="line"></div><div class="line">//获得类中的public方法的Method对象的数组，也包括继承的父类的public方法</div><div class="line">Method[] publicMethods = classType.getMethods();</div></pre></td></tr></table></figure>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Invoke-Method-by-Reflection"><a href="#Invoke-Method-by-Reflection" class="headerlink" title="Invoke Method by Reflection"></a>Invoke Method by Reflection</h3><p>Java反射机制可以在运行时动态调用类中的方法，Java Reflection API提供了我们所需的方法来完成动态调用。要想调用类中的方法首先要创建一个对象，我们通过类的Class对象来创建它所代表的类的实例，通过Class对象我们还能获得类中声明的方法的Method对象，Method类提供了Invoke方法来调用此Method对象所表示的方法。反射机制调用方法代码示例如下：   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">public class InvokeTester  </div><div class="line">&#123;  </div><div class="line">    public int add(int param1, int param2)  </div><div class="line">    &#123;  </div><div class="line">        return param1 + param2;  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    public String echo(String message)  </div><div class="line">    &#123;  </div><div class="line">        return &quot;Hello: &quot; + message;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception  </div><div class="line">    &#123;  </div><div class="line"></div><div class="line">        // 以前的常规执行手段  </div><div class="line">        InvokeTester tester = new InvokeTester();  </div><div class="line">        System.out.println(tester.add(1, 2));  </div><div class="line">        System.out.println(tester.echo(&quot;Tom&quot;));  </div><div class="line">        System.out.println(&quot;---------------------------&quot;);  </div><div class="line"></div><div class="line">        // 通过反射的方式  </div><div class="line"></div><div class="line">        // 第一步，获取Class对象  </div><div class="line">        // 前面用的方法是：Class.forName()方法获取  </div><div class="line">        // 这里用第二种方法，类名.class  </div><div class="line">        Class&lt;?&gt; classType = InvokeTester.class;  </div><div class="line"></div><div class="line">        // 生成新的对象：用newInstance()方法  </div><div class="line">        Object invokeTester = classType.newInstance();  </div><div class="line">        System.out.println(invokeTester instanceof InvokeTester); // 输出true  </div><div class="line"></div><div class="line">        // 通过反射调用方法  </div><div class="line">        // 首先需要获得与该方法对应的Method对象  </div><div class="line">        Method addMethod = classType.getMethod(&quot;add&quot;, new Class[] &#123; int.class,  </div><div class="line">                int.class &#125;);  </div><div class="line">        // 第一个参数是方法名，第二个参数是这个方法所需要的参数的Class对象的数组  </div><div class="line"></div><div class="line">        // 调用目标方法  </div><div class="line">        Object result = addMethod.invoke(invokeTester, new Object[] &#123; 1, 2 &#125;);  </div><div class="line">        System.out.println(result); // 此时result是Integer类型  </div><div class="line"></div><div class="line">        //调用第二个方法  </div><div class="line">        Method echoMethod = classType.getDeclaredMethod(&quot;echo&quot;, new Class[]&#123;String.class&#125;);  </div><div class="line">        Object result2 = echoMethod.invoke(invokeTester, new Object[]&#123;&quot;Tom&quot;&#125;);  </div><div class="line">        System.out.println(result2);  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Invoke-Private-Method-by-Reflection"><a href="#Invoke-Private-Method-by-Reflection" class="headerlink" title="Invoke Private Method by Reflection"></a>Invoke Private Method by Reflection</h3><p>我们知道正常情况下一个类的私有方法只允许这个类本身来调用，但使用反射机制能打破这种访问限制，让其他的类也能调用这个类的私有的方法。这种场景在实际开发中很少用到，Java也不提倡这种用法。代码示例如下：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class Private &#123;</div><div class="line"></div><div class="line">    //定义一个私有方法</div><div class="line">    private String sayHello(String name)&#123;</div><div class="line">        return &quot;hello, &quot;+name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public class PrivateTest &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        //调用Private类的私有方法</div><div class="line">        Private p = new Private();</div><div class="line"></div><div class="line">        Class&lt;?&gt; classType = p.getClass();</div><div class="line"></div><div class="line">        Method method = classType.getDeclaredMethod(&quot;sayHello&quot;, String.class);</div><div class="line"></div><div class="line">        method.setAccessible(true);//取消Java访问检查,如果不设置此项则会报错</div><div class="line"></div><div class="line">        String str = (String)method.invoke(p, &quot;Tracy&quot;);</div><div class="line"></div><div class="line">        System.out.println(str);//输出：hello, Tracy</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Method、Field、Constructor类有一个共同的父类AccessibleObject类，它提供了将反射的对象标记为在使用时取消默认Java语言访问控制检查的能力。在上面的代码中，我们在反射对象Method中设置accessible标志，它允许程序以某种通常禁止的方式来操作对象。</p>
<h3 id="Manipulate-Private-Field-by-Reflection"><a href="#Manipulate-Private-Field-by-Reflection" class="headerlink" title="Manipulate Private Field by Reflection"></a>Manipulate Private Field by Reflection</h3><p>与前面调用类的私有方法类似，通过反射我们还能操作类的私有变量，代码示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class Private2 &#123;</div><div class="line">      //定义私有变量</div><div class="line">      private String name = &quot;zhangsan&quot;;</div><div class="line"></div><div class="line">      public String getName()&#123;</div><div class="line">          return name;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line"> public class PrivateTest2 &#123;</div><div class="line"></div><div class="line">     public static void main(String[] args) throws Exception &#123;</div><div class="line">         //改变Private2类的私有变量的值</div><div class="line">         Private2 p = new Private2();</div><div class="line"></div><div class="line">         Class&lt;?&gt; classType = p.getClass();</div><div class="line"></div><div class="line">         Field field = classType.getDeclaredField(&quot;name&quot;);</div><div class="line"></div><div class="line">         field.setAccessible(true);//取消默认java访问控制检查，Field类的父类AccessibleObject类提供的方法</div><div class="line"></div><div class="line">         field.set(p, &quot;lisi&quot;);//Field类的set(Object obj, Object value)方法将指定对象上此Field对象表示的字段设置为指定的新值</div><div class="line"></div><div class="line">         System.out.println(p.getName());//输出：lisi</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Generate-an-Object-By-Reflection"><a href="#Generate-an-Object-By-Reflection" class="headerlink" title="Generate an Object By Reflection"></a>Generate an Object By Reflection</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class&lt;?&gt; classType = String.class;</div><div class="line">Object obj = classType.newInstance();</div></pre></td></tr></table></figure>
<h4 id="Construct-without-Parameter"><a href="#Construct-without-Parameter" class="headerlink" title="Construct without Parameter"></a>Construct without Parameter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Class&lt;?&gt; classType = Customer.class;</div><div class="line"></div><div class="line">// 获得Constructor对象,此处获取第一个无参数的构造方法的</div><div class="line">Constructor cons = classType.getConstructor(new Class[] &#123;&#125;);</div><div class="line"></div><div class="line">// 通过构造方法来生成一个对象</div><div class="line">Object obj = cons.newInstance(new Object[] &#123;&#125;);</div></pre></td></tr></table></figure>
<h4 id="Construct-with-Parameter"><a href="#Construct-with-Parameter" class="headerlink" title="Construct with Parameter"></a>Construct with Parameter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// Customer为一个自定义的类，有无参数的构造方法，也有一个带参数的构造方法，传入字符串和整型</div><div class="line">Class&lt;?&gt; classType = Customer.class;</div><div class="line"></div><div class="line">Constructor cons2 = classType.getConstructor(new Class[] &#123;String.class, int.class&#125;);</div><div class="line"></div><div class="line">Object obj2 = cons2.newInstance(new Object[] &#123;&quot;ZhangSan&quot;,20&#125;);</div></pre></td></tr></table></figure>
<p>可以看出调用构造方法生成对象的方法和调用一般方法的类似，不同的是从Class对象获取Constructor对象时不需要指定名字，而获取Method对象时需要指定名字。</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>以上这些内容，介绍了Java反射机制的中涉及的主要的几个类以及这些类的基本用法，这些类中还有很多的方法，大家可以通过查看API进行了解，用法都很简单。Java反射机制在很多框架的底层实现中有用到，还有一种很重要的设计模式也用到了反射，那就是代理模式中的动态代理，了解了动态代理模式的思想对我们研究框架有很大帮助</p>
<p>动态代理的使用场景就更加广泛了。需要使用AOP中的方法拦截功能的地方都可以用到动态代理。Spring框架的AOP实现默认也使用动态代理。不过JDK中的动态代理只支持对接口的代理，不能对一个普通的Java类提供代理。不过这种实现在大部分的时候已经够用了。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://blog.csdn.net/liyantianmin/article/details/41445511" target="_blank" rel="external">Java 反射机制</a><br>[2]<a href="http://blog.csdn.net/qq_35101189/article/details/64906908" target="_blank" rel="external">Java反射机制深度剖析</a><br>[3]<a href="http://blog.csdn.net/qq_35101189/article/details/64440903" target="_blank" rel="external">你一直弄不懂的Java反射机制</a><br>[4]<a href="http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy?utm_source=articles_about_java-depth-adventure&amp;utm_medium=link&amp;utm_campaign=java-depth-adventure" target="_blank" rel="external">Java深度历险（七）——Java反射与动态代理</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/java-reflection.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Table-of-Contents&quot;&gt;&lt;a href=&quot;#Table-of-Contents&quot; class=&quot;headerlink&quot; title=&quot;Table of Contents&quot;&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#What&amp;#39;s-the-reflection&quot;&gt;What’s the reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Why-use-reflection&quot;&gt;Why use reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#How-to-use-reflection&quot;&gt;How to use reflection&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Reflection" scheme="http://ipcreator.me/tags/Reflection/"/>
    
  </entry>
  
  <entry>
    <title>FindBugs™ - Find Bugs in Java Programs</title>
    <link href="http://ipcreator.me/2017/03/31/Program/Android/3rdLib/findbugs/"/>
    <id>http://ipcreator.me/2017/03/31/Program/Android/3rdLib/findbugs/</id>
    <published>2017-03-30T23:06:06.000Z</published>
    <updated>2017-03-31T02:00:05.228Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://findbugs.sourceforge.net/umdFindbugs.png" alt=""></p>
<p>A program which uses static analysis to look for bugs in Java code.  It is free software, distributed under the terms of the Lesser GNU Public License. The name FindBugs™ and the FindBugs logo are trademarked by The University of Maryland. FindBugs has been downloaded more than a million times.</p>
<a id="more"></a>
<p>findbugs是一个分析bytecode并找出其中可疑部分的一个工具。它给项目字节码做一个全面扫描，通过一些通用规则去判断可能潜在的一些问题，比如性能，多线程安全等等。</p>
<p>FindBugs基本上只需要一个程序来做分析的字节码，所以这是非常容易使用。它能检测到常见的错误，如错误的布尔运算符。<br>FindBugs也能够检测到由于误解语言特点的错误，如Java参数调整（这不是真的有可能因为它的参数是传值）。</p>
<p>FindBugs是一个Java静态分析工具，用来检查类或者jar文件，用来发现可能的问题。检测完成之后会生成一份详细的报告，借助这份报告可以找到潜在的bug，比如NullPointException,特定的资源没有关闭，查询数据库没有调用Cursor.close()等，如果才用人工的方式很难才能发现类似的bug，或者这些bug永远不会发现，直到运行时才发现，还有可能是一直没有出现，别人调用的时候没有做检查就调用了…..</p>
<p>Java的静态分析工具当然可以无难度的在Android上面运行，通过这种FindBugs的检查可以让App的运行更加的稳定。</p>
<p><img src="http://vincentbrison.com/wp-content/uploads/2014/07/checkstyle.jpg" alt=""></p>
<h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p>FindBugs在Gradle中是当做一个插件存在的，可以在Android Studio中直接使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;findbugs&apos;</div><div class="line"></div><div class="line">// 定义生成文件目录</div><div class="line">def findbugsReportPath = &quot;$&#123;project.rootDir&#125;/reports/&quot;</div><div class="line"></div><div class="line">task findbugs(type: FindBugs) &#123;</div><div class="line">    ignoreFailures = true</div><div class="line">    excludeFilter = new File(&quot;findbugs.xml&quot;) // 自定义配置文件</div><div class="line">    classpath = files()</div><div class="line">    classes = fileTree(&apos;build/intermediates/classes/&apos;)</div><div class="line">    effort = &apos;max&apos;</div><div class="line"></div><div class="line">    source = fileTree(&apos;src&apos;)</div><div class="line">    include &apos;**/*.java&apos;</div><div class="line">    exclude &apos;**/gen/**&apos;</div><div class="line"></div><div class="line">    // 定义输出报告</div><div class="line">    reports &#123;</div><div class="line">        xml &#123;</div><div class="line">            enabled = false</div><div class="line">            destination &quot;$findbugsReportPath/FindBugs.xml&quot;</div><div class="line">            xml.withMessages true</div><div class="line">        &#125;</div><div class="line">        html &#123;</div><div class="line">            enabled = true</div><div class="line">            destination &quot;$findbugsReportPath/FindBugs.html&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">afterEvaluate &#123;</div><div class="line">    tasks.withType(Task).each &#123; task -&gt;</div><div class="line">        task.doLast &#123;</div><div class="line">            if (task.name.startsWith(&quot;assemble&quot;)) &#123;</div><div class="line">                tasks.findByName(&quot;findbugs&quot;).execute()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ignoreFailures：有警告错误的时候也是允许构建。<br>reportLevel:报告的级别，Low,Medium,High一般来说我们首先关注的是高级别的报告，再关注低一级别的报告。<br>classes和source分别是对应的.classe文件夹地址，和源代码文件地址。<br>repoets指定报告类型，有两种方式xml和html，只允许一种输出格式。<br>在右侧的Gradle的对于的Module可以在Tasks中找到对应的findBugs任务，点击即可运行。</p>
<h2 id="Best-Practice"><a href="#Best-Practice" class="headerlink" title="Best Practice"></a>Best Practice</h2><h3 id="How-to-improve-quality-and-syntax-of-your-Android-code"><a href="#How-to-improve-quality-and-syntax-of-your-Android-code" class="headerlink" title="How to improve quality and syntax of your Android code"></a><a href="http://vincentbrison.com/2014/07/19/how-to-improve-quality-and-syntax-of-your-android-code/" target="_blank" rel="external">How to improve quality and syntax of your Android code</a></h3><p>About the hierarchy of my demo project :</p>
<p>Since you can split your gradle script in many files, I currently have 3 gradles files :</p>
<ol>
<li><a href="https://github.com/vincentbrison/vb-android-app-quality/blob/master/build.gradle" target="_blank" rel="external">The one in the root folder</a>, which is more or less just about configuration for the project (which maven repos to use, which Gradle version to use….).<ol>
<li><a href="https://github.com/vincentbrison/vb-android-app-quality/blob/master/app/build.gradle" target="_blank" rel="external">The one in the subfolder app</a>, which is a very classic gradle file to build an Android application.</li>
<li><a href="https://github.com/vincentbrison/vb-android-app-quality/blob/master/config/quality.gradle" target="_blank" rel="external">The one in the subfolder config</a>, on which we will focus on, since I use this one to retain and configure all my quality tools for my project.</li>
</ol>
</li>
</ol>
<h2 id="Pitfall"><a href="#Pitfall" class="headerlink" title="Pitfall"></a>Pitfall</h2><h3 id="Android-Studio-错误"><a href="#Android-Studio-错误" class="headerlink" title="Android Studio 错误"></a>Android Studio 错误</h3><p> com.android.dex.DexIndexOverflowException: method ID not in [0, 0xffff]: 65536</p>
<ul>
<li>第1步<br>  添加依赖于你的build.gradle支持MultiDex库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile &apos;com.android.support:multidex:1.0.1&apos;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>第2步<br>在buildType或productFlavor中开启multiDexEnabled。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">    ...</div><div class="line">    multiDexEnabled true</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHAvYmJzLnVtZW5nLmNvbS9kYXRhL2F0dGFjaG1lbnQvZm9ydW0vMjAxNjAyLzIyLzExNDcyOGhlYnhuOThlYjg5OWNnM2UucG5n.jpg" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://segmentfault.com/a/1190000004881029" target="_blank" rel="external">Android中使用FindBugs</a><br>[2]<a href="http://findbugs.sourceforge.net/" target="_blank" rel="external">FindBugs</a><br>[3]<a href="http://blog.csdn.net/guijiaoba/article/details/54970658" target="_blank" rel="external">Android静态代码分析</a><br>[4]<a href="http://www.open-open.com/lib/view/open1436497439973.html" target="_blank" rel="external">如何利用工具提高你的 Android 代码质量</a><br>[5]<a href="https://github.com/vincentbrison/vb-android-app-quality" target="_blank" rel="external">vb-android-app-quality</a><br>[6]<a href="http://www.bbsmax.com/A/q4zVwnrjJK/" target="_blank" rel="external">Android Studio 错误 com.android.dex.DexIndexOverflowException: method ID not in [0, 0xffff]: 65536</a><br>[7]<a href="http://vincentbrison.com/2014/07/19/how-to-improve-quality-and-syntax-of-your-android-code/" target="_blank" rel="external">How to improve quality and syntax of your Android code</a><br>[8]<a href="http://findbugs.sourceforge.net/" target="_blank" rel="external">FindBugs</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://findbugs.sourceforge.net/umdFindbugs.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;A program which uses static analysis to look for bugs in Java code.  It is free software, distributed under the terms of the Lesser GNU Public License. The name FindBugs™ and the FindBugs logo are trademarked by The University of Maryland. FindBugs has been downloaded more than a million times.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Java" scheme="http://ipcreator.me/tags/Java/"/>
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
      <category term="Find Bugs" scheme="http://ipcreator.me/tags/Find-Bugs/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Cheat Sheet</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Tools/Git/github-cheat-sheet/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Tools/Git/github-cheat-sheet/</id>
    <published>2017-03-30T14:51:06.000Z</published>
    <updated>2017-03-31T08:12:03.423Z</updated>
    
    <content type="html"><![CDATA[<p>A collection of cool hidden and not so hidden features of Git and GitHub. This cheat sheet was inspired by <a href="https://github.com/holman" target="_blank" rel="external">Zach Holman</a>‘s <a href="http://confreaks.tv/videos/aloharuby2012-git-and-github-secrets" target="_blank" rel="external">Git and GitHub Secrets</a> talk at Aloha Ruby Conference 2012 (<a href="https://speakerdeck.com/holman/git-and-github-secrets" target="_blank" rel="external">slides</a>) and his <a href="https://vimeo.com/72955426" target="_blank" rel="external">More Git and GitHub Secrets</a> talk at WDCNZ 2013 (<a href="https://speakerdeck.com/holman/more-git-and-github-secrets" target="_blank" rel="external">slides</a>).</p>
<p><em>Shortlink: <a href="http://git.io/sheet" target="_blank" rel="external"><code>http://git.io/sheet</code></a></em></p>
<p><em>Read this in other languages: <a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.md" target="_blank" rel="external">English</a>, <a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.ko.md" target="_blank" rel="external">한국어</a>, <a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.ja.md" target="_blank" rel="external">日本語</a>, <a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md" target="_blank" rel="external">简体中文</a>, <a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-tw.md" target="_blank" rel="external">正體中文</a>.</em></p>
<a id="more"></a>
<h1 id="GitHub-Cheat-Sheet-1"><a href="#GitHub-Cheat-Sheet-1" class="headerlink" title="GitHub Cheat Sheet [1]"></a>GitHub Cheat Sheet <sup>[1]<sup></sup></sup></h1><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul>
<li><a href="#github">GitHub</a><ul>
<li><a href="#ignore-whitespace">Ignore Whitespace</a></li>
<li><a href="#adjust-tab-space">Adjust Tab Space</a></li>
<li><a href="#commit-history-by-author">Commit History by Author</a></li>
<li><a href="#cloning-a-repository">Cloning a Repository</a></li>
<li><a href="#branch">Branch</a><ul>
<li><a href="#compare-all-branches-to-another-branch">Compare all Branches to Another Branch</a></li>
<li><a href="#comparing-branches">Comparing Branches</a></li>
<li><a href="#compare-branches-across-forked-repositories">Compare Branches across Forked Repositories</a></li>
</ul>
</li>
<li><a href="#gists">Gists</a></li>
<li><a href="#gitio">Git.io</a></li>
<li><a href="#keyboard-shortcuts">Keyboard Shortcuts</a></li>
<li><a href="#line-highlighting-in-repositories">Line Highlighting in Repositories</a></li>
<li><a href="#closing-issues-via-commit-messages">Closing Issues via Commit Messages</a></li>
<li><a href="#cross-link-issues">Cross-Link Issues</a></li>
<li><a href="#locking-conversations">Locking Conversations</a></li>
<li><a href="#ci-status-on-pull-requests">CI Status on Pull Requests</a></li>
<li><a href="#filters">Filters</a></li>
<li><a href="#syntax-highlighting-in-markdown-files">Syntax Highlighting in Markdown Files</a></li>
<li><a href="#emojis">Emojis</a></li>
<li><a href="#imagesgifs">Images/GIFs</a><ul>
<li><a href="#embedding-images-in-github-wiki">Embedding Images in GitHub Wiki</a></li>
</ul>
</li>
<li><a href="#quick-quoting">Quick Quoting</a></li>
<li><a href="#pasting-clipboard-image-to-comments">Pasting Clipboard Image to Comments</a></li>
<li><a href="#quick-licensing">Quick Licensing</a></li>
<li><a href="#task-lists">Task Lists</a><ul>
<li><a href="#task-lists-in-markdown-documents">Task Lists in Markdown Documents</a></li>
</ul>
</li>
<li><a href="#relative-links">Relative Links</a></li>
<li><a href="#metadata-and-plugin-support-for-github-pages">Metadata and Plugin Support for GitHub Pages</a></li>
<li><a href="#viewing-yaml-metadata-in-your-documents">Viewing YAML Metadata in your Documents</a></li>
<li><a href="#rendering-tabular-data">Rendering Tabular Data</a></li>
<li><a href="#rendering-pdf">Rendering PDF</a></li>
<li><a href="#revert-a-pull-request">Revert a Pull Request</a></li>
<li><a href="#diffs">Diffs</a><ul>
<li><a href="#rendered-prose-diffs">Rendered Prose Diffs</a></li>
<li><a href="#diffable-maps">Diffable Maps</a></li>
<li><a href="#expanding-context-in-diffs">Expanding Context in Diffs</a></li>
<li><a href="#diff-or-patch-of-pull-request">Diff or Patch of Pull Request</a></li>
<li><a href="#rendering-and-diffing-images">Rendering and diffing images</a></li>
</ul>
</li>
<li><a href="#hub">Hub</a></li>
<li><a href="#contribution-guidelines">Contribution Guidelines</a><ul>
<li><a href="#contributing-file">CONTRIBUTING file</a></li>
<li><a href="#issue_template-file">ISSUE_TEMPLATE file</a></li>
<li><a href="#pull_request_template-file">PULL_REQUEST_TEMPLATE file</a></li>
</ul>
</li>
<li><a href="#octicons">Octicons</a></li>
<li><a href="#github-student-developer-pack">GitHub Student Developer Pack</a></li>
<li><a href="#github-resources">GitHub Resources</a><ul>
<li><a href="#github-talks">GitHub Talks</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#git">Git</a><ul>
<li><a href="#remove-all-deleted-files-from-the-working-tree">Remove All Deleted Files from the Working Tree</a></li>
<li><a href="#previous-branch">Previous Branch</a></li>
<li><a href="#stripspace">Stripspace</a></li>
<li><a href="#ssh-keys">SSH keys</a></li>
<li><a href="#checking-out-pull-requests">Checking out Pull Requests</a></li>
<li><a href="#empty-commits">Empty Commits</a></li>
<li><a href="#styled-git-status">Styled Git Status</a></li>
<li><a href="#styled-git-log">Styled Git Log</a></li>
<li><a href="#git-query">Git Query</a></li>
<li><a href="#git-grep">Git Grep</a></li>
<li><a href="#merged-branches">Merged Branches</a></li>
<li><a href="#fixup-and-autosquash">Fixup and Autosquash</a></li>
<li><a href="#web-server-for-browsing-local-repositories">Web Server for Browsing Local Repositories</a></li>
<li><a href="#git-configurations">Git Configurations</a><ul>
<li><a href="#aliases">Aliases</a></li>
<li><a href="#auto-correct">Auto-Correct</a></li>
<li><a href="#color">Color</a></li>
</ul>
</li>
<li><a href="#git-resources">Git Resources</a><ul>
<li><a href="#git-books">Git Books</a></li>
<li><a href="#git-videos">Git Videos</a></li>
<li><a href="#git-articles">Git Articles</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h3 id="Ignore-Whitespace"><a href="#Ignore-Whitespace" class="headerlink" title="Ignore Whitespace"></a>Ignore Whitespace</h3><p>Adding <code>?w=1</code> to any diff URL will remove any changes only in whitespace, enabling you to see only that code that has changed.</p>
<p><img src="https://camo.githubusercontent.com/797184940defadec00393e6559b835358a863eeb/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f626c6f672f323031312f736563726574732f776869746573706163652e706e67" alt="Diff without whitespace"></p>
<p><a href="https://github.com/blog/967-github-secrets" target="_blank" rel="external"><em>Read more about GitHub secrets.</em></a></p>
<h3 id="Adjust-Tab-Space"><a href="#Adjust-Tab-Space" class="headerlink" title="Adjust Tab Space"></a>Adjust Tab Space</h3><p>Adding <code>?ts=4</code> to a diff or file URL will display tab characters as 4 spaces wide instead of the default 8. The number after <code>ts</code> can be adjusted to suit your preference. This does not work on Gists, or raw file views, but a <a href="https://chrome.google.com/webstore/detail/tab-size-on-github/ofjbgncegkdemndciafljngjbdpfmbkn" target="_blank" rel="external">Chrome</a> or <a href="https://addons.opera.com/en/extensions/details/github-tab-size/" target="_blank" rel="external">Opera extension</a> can automate this.</p>
<p>Here is a Go source file before adding <code>?ts=4</code>:</p>
<p><img src="http://i.imgur.com/GIT1Fr0.png" alt="Before, tab space example"></p>
<p>…and this is after adding <code>?ts=4</code>:</p>
<p><img src="http://i.imgur.com/70FL4H9.png" alt="After, tab space example"></p>
<h3 id="Commit-History-by-Author"><a href="#Commit-History-by-Author" class="headerlink" title="Commit History by Author"></a>Commit History by Author</h3><p>To view all commits on a repo by author add <code>?author={user}</code> to the URL.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/rails/rails/commits/master?author=dhh</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/S7AE29b.png" alt="DHH commit history"></p>
<p><a href="https://help.github.com/articles/differences-between-commit-views/" target="_blank" rel="external"><em>Read more about the differences between commits views.</em></a></p>
<h3 id="Cloning-a-Repository"><a href="#Cloning-a-Repository" class="headerlink" title="Cloning a Repository"></a>Cloning a Repository</h3><p>When cloning a repository the <code>.git</code> can be left off the end.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/tiimgreen/github-cheat-sheet</div></pre></td></tr></table></figure>
<p><a href="http://git-scm.com/docs/git-clone" target="_blank" rel="external"><em>Read more about the Git <code>clone</code> command.</em></a></p>
<p>###Branch</p>
<h4 id="Compare-all-Branches-to-Another-Branch"><a href="#Compare-all-Branches-to-Another-Branch" class="headerlink" title="Compare all Branches to Another Branch"></a>Compare all Branches to Another Branch</h4><p>If you go to the repo’s <a href="https://github.com/tiimgreen/github-cheat-sheet/branches" target="_blank" rel="external">Branches</a> page, next to the Commits button:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/&#123;user&#125;/&#123;repo&#125;/branches</div></pre></td></tr></table></figure>
<p>… you would see a list of all branches which are not merged into the main branch.</p>
<p>From here you can access the compare page or delete a branch with a click of a button.</p>
<p><img src="http://i.imgur.com/0FEe30z.png" alt="Compare branches not merged into master in rails/rails repo - https://github.com/rails/rails/branches"></p>
<h4 id="Comparing-Branches"><a href="#Comparing-Branches" class="headerlink" title="Comparing Branches"></a>Comparing Branches</h4><p>To use GitHub to compare branches, change the URL to look like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/&#123;user&#125;/&#123;repo&#125;/compare/&#123;range&#125;</div></pre></td></tr></table></figure>
<p>Where <code>{range} = master...4-1-stable</code></p>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/rails/rails/compare/master...4-1-stable</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/tIRCOsK.png" alt="Rails branch compare example"></p>
<p><code>{range}</code> can be changed to things like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://github.com/rails/rails/compare/master@&#123;1.day.ago&#125;...master</div><div class="line">https://github.com/rails/rails/compare/master@&#123;2014-10-04&#125;...master</div></pre></td></tr></table></figure>
<p><em>Dates are in the format <code>YYYY-MM-DD</code></em></p>
<p><img src="http://i.imgur.com/5dtzESz.png" alt="Another compare example"></p>
<p>Branches can also be compared in <code>diff</code> and <code>patch</code> views:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://github.com/rails/rails/compare/master...4-1-stable.diff</div><div class="line">https://github.com/rails/rails/compare/master...4-1-stable.patch</div></pre></td></tr></table></figure>
<p><a href="https://help.github.com/articles/comparing-commits-across-time/" target="_blank" rel="external"><em>Read more about comparing commits across time.</em></a></p>
<h4 id="Compare-Branches-across-Forked-Repositories"><a href="#Compare-Branches-across-Forked-Repositories" class="headerlink" title="Compare Branches across Forked Repositories"></a>Compare Branches across Forked Repositories</h4><p>To use GitHub to compare branches across forked repositories, change the URL to look like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/&#123;user&#125;/&#123;repo&#125;/compare/&#123;foreign-user&#125;:&#123;branch&#125;...&#123;own-branch&#125;</div></pre></td></tr></table></figure>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/rails/rails/compare/byroot:master...master</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/Q1W6qcB.png" alt="Forked branch compare"></p>
<h3 id="Gists"><a href="#Gists" class="headerlink" title="Gists"></a>Gists</h3><p><a href="https://gist.github.com/" target="_blank" rel="external">Gists</a> are an easy way to work with small bits of code without creating a fully fledged repository.</p>
<p><img src="http://i.imgur.com/VkKI1LC.png?1" alt="Gist"></p>
<p>Add <code>.pibb</code> to the end of any Gist URL (<a href="https://gist.github.com/tiimgreen/10545817.pibb" target="_blank" rel="external">like this</a>) in order to get the <em>HTML only</em> version suitable for embedding in any other site.</p>
<p>Gists can be treated as a repository so they can be cloned like any other:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://gist.github.com/tiimgreen/10545817</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/BcFzabp.png" alt="Gists"></p>
<p>This means you also can modify and push updates to Gists:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git commit</div><div class="line">$ git push</div><div class="line">Username <span class="keyword">for</span> <span class="string">'https://gist.github.com'</span>:</div><div class="line">Password <span class="keyword">for</span> <span class="string">'https://tiimgreen@gist.github.com'</span>:</div></pre></td></tr></table></figure>
<p>However, Gists do not support directories. All files need to be added to the repository root.<br><a href="https://help.github.com/articles/creating-gists/" target="_blank" rel="external"><em>Read more about creating Gists.</em></a></p>
<h3 id="Git-io"><a href="#Git-io" class="headerlink" title="Git.io"></a>Git.io</h3><p><a href="http://git.io" target="_blank" rel="external">Git.io</a> is a simple URL shortener for GitHub.</p>
<p><img src="http://i.imgur.com/6JUfbcG.png?1" alt="Git.io"></p>
<p>You can also use it via pure HTTP using Curl:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ curl -i http://git.io -F <span class="string">"url=https://github.com/..."</span></div><div class="line">HTTP/1.1 201 Created</div><div class="line">Location: http://git.io/abc123</div><div class="line"></div><div class="line">$ curl -i http://git.io/abc123</div><div class="line">HTTP/1.1 302 Found</div><div class="line">Location: https://github.com/...</div></pre></td></tr></table></figure>
<p><a href="https://github.com/blog/985-git-io-github-url-shortener" target="_blank" rel="external"><em>Read more about Git.io.</em></a></p>
<h3 id="Keyboard-Shortcuts"><a href="#Keyboard-Shortcuts" class="headerlink" title="Keyboard Shortcuts"></a>Keyboard Shortcuts</h3><p>When on a repository page, keyboard shortcuts allow you to navigate easily.</p>
<ul>
<li>Pressing <code>t</code> will bring up a file explorer.</li>
<li>Pressing <code>w</code> will bring up the branch selector.</li>
<li>Pressing <code>s</code> will focus the search field for the current repository. Pressing Backspace to delete the “This repository” pill changes the field to search all of GitHub.</li>
<li>Pressing <code>l</code> will edit labels on existing Issues.</li>
<li>Pressing <code>y</code> <strong>when looking at a file</strong> (e.g. <code>https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.md</code>) will change your URL to one which, in effect, freezes the page you are looking at. If this code changes, you will still be able to see what you saw at that current time.</li>
</ul>
<p>To see all of the shortcuts for the current page press <code>?</code>:</p>
<p><img src="http://i.imgur.com/y5ZfNEm.png" alt="Keyboard shortcuts"></p>
<p><a href="https://help.github.com/articles/search-syntax/" target="_blank" rel="external">Read more about search syntax you can use.</a></p>
<h3 id="Line-Highlighting-in-Repositories"><a href="#Line-Highlighting-in-Repositories" class="headerlink" title="Line Highlighting in Repositories"></a>Line Highlighting in Repositories</h3><p>Either adding <code>#L52</code> to the end of a code file URL or simply clicking the line number will highlight that line number.</p>
<p>It also works with ranges, e.g. <code>#L53-L60</code>, to select ranges, hold <code>shift</code> and click two lines:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/rails/rails/blob/master/activemodel/lib/active_model.rb#L53-L60</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/8AhjrCz.png" alt="Line Highlighting"></p>
<h3 id="Closing-Issues-via-Commit-Messages"><a href="#Closing-Issues-via-Commit-Messages" class="headerlink" title="Closing Issues via Commit Messages"></a>Closing Issues via Commit Messages</h3><p>If a particular commit fixes an issue, any of the keywords <code>fix/fixes/fixed</code>, <code>close/closes/closed</code> or <code>resolve/resolves/resolved</code>, followed by the issue number, will close the issue once it is committed to the master branch.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"Fix screwup, fixes #12"</span></div></pre></td></tr></table></figure>
<p>This closes the issue and references the closing commit.</p>
<p><img src="http://i.imgur.com/Uh1gZdx.png" alt="Closing Repo"></p>
<p><a href="https://help.github.com/articles/closing-issues-via-commit-messages/" target="_blank" rel="external"><em>Read more about closing Issues via commit messages.</em></a></p>
<h3 id="Cross-Link-Issues"><a href="#Cross-Link-Issues" class="headerlink" title="Cross-Link Issues"></a>Cross-Link Issues</h3><p>If you want to link to another issue in the same repository, simply type hash <code>#</code> then the issue number, and it will be auto-linked.</p>
<p>To link to an issue in another repository, <code>{user}/{repo}#ISSUE_NUMBER</code> e.g. <code>tiimgreen/toc#12</code>.</p>
<p><img src="https://camo.githubusercontent.com/447e39ab8d96b553cadc8d31799100190df230a8/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f626c6f672f323031312f736563726574732f7265666572656e6365732e706e67" alt="Cross-Link Issues"></p>
<h3 id="Locking-Conversations"><a href="#Locking-Conversations" class="headerlink" title="Locking Conversations"></a>Locking Conversations</h3><p>Pull Requests and Issues can now be locked by owners or collaborators of the repo.</p>
<p><img src="https://cloud.githubusercontent.com/assets/2723/3221693/bf54dd44-f00d-11e3-8eb6-bb51e825bc2c.png" alt="Lock conversation"></p>
<p>This means that users who are not collaborators on the project will no longer be able to comment.</p>
<p><img src="https://cloud.githubusercontent.com/assets/2723/3221775/d6e513b0-f00e-11e3-9721-2131cb37c906.png" alt="Comments locked"></p>
<p><a href="https://github.com/blog/1847-locking-conversations" target="_blank" rel="external"><em>Read more about locking conversations.</em></a></p>
<h3 id="CI-Status-on-Pull-Requests"><a href="#CI-Status-on-Pull-Requests" class="headerlink" title="CI Status on Pull Requests"></a>CI Status on Pull Requests</h3><p>If set up correctly, every time you receive a Pull Request, <a href="https://travis-ci.org/" target="_blank" rel="external">Travis CI</a> will build that Pull Request just like it would every time you make a new commit. Read more about how to <a href="http://docs.travis-ci.com/user/getting-started/" target="_blank" rel="external">get started with Travis CI</a>.</p>
<p><a href="https://github.com/octokit/octokit.rb/pull/452" target="_blank" rel="external"><img src="https://cloud.githubusercontent.com/assets/1687642/2700187/3a88838c-c410-11e3-9a46-e65e2a0458cd.png" alt="Travis CI status"></a></p>
<p><a href="https://github.com/blog/1227-commit-status-api" target="_blank" rel="external"><em>Read more about the commit status API.</em></a></p>
<h3 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h3><p>Both issues and pull requests allow filtering in the user interface.</p>
<p>For the Rails repo: <a href="https://github.com/rails/rails/issues" target="_blank" rel="external">https://github.com/rails/rails/issues</a>, the following filter is built by selecting the label “activerecord”:</p>
<p><code>is:issue label:activerecord</code></p>
<p>But, you can also find all issues that are NOT labeled activerecord:</p>
<p><code>is:issue -label:activerecord</code></p>
<p>Additionally, this also works for pull requests:</p>
<p><code>is:pr -label:activerecord</code></p>
<p>Github has tabs for displaying open or closed issues and pull requests but you<br>can also see merged pull requests.  Just put the following in the filter:</p>
<p><code>is:merged</code></p>
<p><a href="https://help.github.com/articles/searching-issues/" target="_blank" rel="external"><em>Read more about searching issues.</em></a></p>
<p>Finally, github now allows you to filter by the Status API’s status.</p>
<p>Pull requests with only successful statuses:</p>
<p><code>status:success</code></p>
<p><a href="https://github.com/blog/2014-filter-pull-requests-by-status" target="_blank" rel="external"><em>Read more about searching on the Status API.</em></a></p>
<h3 id="Syntax-Highlighting-in-Markdown-Files"><a href="#Syntax-Highlighting-in-Markdown-Files" class="headerlink" title="Syntax Highlighting in Markdown Files"></a>Syntax Highlighting in Markdown Files</h3><p>For example, to syntax highlight Ruby code in your Markdown files write:</p>
<pre><code><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'tabbit'</span></div><div class="line">table = Tabbit.new(<span class="string">'Name'</span>, <span class="string">'Email'</span>)</div><div class="line">table.add_row(<span class="string">'Tim Green'</span>, <span class="string">'tiimgreen@gmail.com'</span>)</div><div class="line">puts table.to_s</div></pre></td></tr></table></figure>
</code></pre><p>This will produce:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'tabbit'</span></div><div class="line">table = Tabbit.new(<span class="string">'Name'</span>, <span class="string">'Email'</span>)</div><div class="line">table.add_row(<span class="string">'Tim Green'</span>, <span class="string">'tiimgreen@gmail.com'</span>)</div><div class="line">puts table.to_s</div></pre></td></tr></table></figure>
<p>GitHub uses <a href="https://github.com/github/linguist" target="_blank" rel="external">Linguist</a> to perform language detection and syntax highlighting. You can find out which keywords are valid by perusing the <a href="https://github.com/github/linguist/blob/master/lib/linguist/languages.yml" target="_blank" rel="external">languages YAML file</a>.</p>
<p><a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="external"><em>Read more about GitHub Flavored Markdown.</em></a></p>
<h3 id="Emojis"><a href="#Emojis" class="headerlink" title="Emojis"></a>Emojis</h3><p>Emojis can be added to Pull Requests, Issues, commit messages, repository descriptions, etc. using <code>:name_of_emoji:</code>.</p>
<p>The full list of supported Emojis on GitHub can be found at <a href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="external">emoji-cheat-sheet.com</a> or <a href="https://github.com/scotch-io/All-Github-Emoji-Icons" target="_blank" rel="external">scotch-io/All-Github-Emoji-Icons</a>.<br>A handy emoji search engine can be found at <a href="http://emoji.muan.co/" target="_blank" rel="external">emoji.muan.co</a>.</p>
<p>The top 5 used Emojis on GitHub are:</p>
<ol>
<li><code>:shipit:</code></li>
<li><code>:sparkles:</code></li>
<li><code>:-1:</code></li>
<li><code>:+1:</code></li>
<li><code>:clap:</code></li>
</ol>
<h3 id="Images-GIFs"><a href="#Images-GIFs" class="headerlink" title="Images/GIFs"></a>Images/GIFs</h3><p>Images and GIFs can be added to comments, READMEs etc.:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt Text](http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif)</div></pre></td></tr></table></figure>
<p>Raw images from the repo can be used by calling them directly.:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt Text](https://github.com/&#123;user&#125;/&#123;repo&#125;/raw/master/path/to/image.gif)</div></pre></td></tr></table></figure>
<p><img src="http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif" alt="Peter don&#39;t care"></p>
<p>All images are cached on GitHub, so if your host goes down, the image will remain available.</p>
<h4 id="Embedding-Images-in-GitHub-Wiki"><a href="#Embedding-Images-in-GitHub-Wiki" class="headerlink" title="Embedding Images in GitHub Wiki"></a>Embedding Images in GitHub Wiki</h4><p>There are multiple ways of embedding images in Wiki pages. There’s the standard Markdown syntax (shown above). But there’s also a syntax that allows things like specifying the height or width of the image:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[ http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif | height = 100px ]]</div></pre></td></tr></table></figure>
<p>Which produces:</p>
<p><img src="http://i.imgur.com/J5bMf7S.png" alt="Just a screenshot"></p>
<h3 id="Quick-Quoting"><a href="#Quick-Quoting" class="headerlink" title="Quick Quoting"></a>Quick Quoting</h3><p>When on a comment thread and you want to quote something someone previously said, highlight the text and press <code>r</code>, this will copy it into your text box in the block-quote format.</p>
<p><img src="https://f.cloud.github.com/assets/296432/124483/b0fa6204-6ef0-11e2-83c3-256c37fa7abc.gif" alt="Quick Quote"></p>
<p><a href="https://github.com/blog/1399-quick-quotes" target="_blank" rel="external"><em>Read more about quick quoting.</em></a></p>
<h3 id="Pasting-Clipboard-Image-to-Comments"><a href="#Pasting-Clipboard-Image-to-Comments" class="headerlink" title="Pasting Clipboard Image to Comments"></a>Pasting Clipboard Image to Comments</h3><p><em>(Works on Chrome browsers only)</em></p>
<p>After taking a screenshot and adding it to the clipboard (mac: <code>cmd-ctrl-shift-4</code>), you can simply paste (<code>cmd-v / ctrl-v</code>) the image into the comment section and it will be auto-uploaded to github.</p>
<p><img src="https://cloud.githubusercontent.com/assets/39191/5794265/39c9b65a-9f1b-11e4-9bc7-04e41f59ea5f.png" alt="Pasting Clipboard Image to Comments"></p>
<p><a href="https://help.github.com/articles/issue-attachments/" target="_blank" rel="external"><em>Read more about issue attachments.</em></a></p>
<h3 id="Quick-Licensing"><a href="#Quick-Licensing" class="headerlink" title="Quick Licensing"></a>Quick Licensing</h3><p>When creating a repository, GitHub gives you the option of adding in a pre-made license:</p>
<p><img src="http://i.imgur.com/Chqj4Fg.png" alt="License"></p>
<p>You can also add them to existing repositories by creating a new file through the web interface. When the name <code>LICENSE</code> is typed in you will get an option to use a template:</p>
<p><img src="http://i.imgur.com/fTjQict.png" alt="License"></p>
<p>Also works for <code>.gitignore</code>.</p>
<p><a href="https://help.github.com/articles/open-source-licensing/" target="_blank" rel="external"><em>Read more about open source licensing.</em></a></p>
<h3 id="Task-Lists"><a href="#Task-Lists" class="headerlink" title="Task Lists"></a>Task Lists</h3><p>In Issues and Pull requests check boxes can be added with the following syntax (notice the space):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- [ ] Be awesome</div><div class="line">- [ ] Prepare dinner</div><div class="line">  - [ ] Research recipe</div><div class="line">  - [ ] Buy ingredients</div><div class="line">  - [ ] Cook recipe</div><div class="line">- [ ] Sleep</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/jJBXhsY.png" alt="Task List"></p>
<p>When they are clicked, they will be updated in the pure Markdown:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- [x] Be awesome</div><div class="line">- [ ] Prepare dinner</div><div class="line">  - [x] Research recipe</div><div class="line">  - [x] Buy ingredients</div><div class="line">  - [ ] Cook recipe</div><div class="line">- [ ] Sleep</div></pre></td></tr></table></figure>
<p><a href="https://help.github.com/articles/writing-on-github/#task-lists" target="_blank" rel="external"><em>Read more about task lists.</em></a></p>
<h4 id="Task-Lists-in-Markdown-Documents"><a href="#Task-Lists-in-Markdown-Documents" class="headerlink" title="Task Lists in Markdown Documents"></a>Task Lists in Markdown Documents</h4><p>In full Markdown documents <strong>read-only</strong> checklists can now be added using the following syntax:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- [ ] Mercury</div><div class="line">- [x] Venus</div><div class="line">- [x] Earth</div><div class="line">  - [x] Moon</div><div class="line">- [x] Mars</div><div class="line">  - [ ] Deimos</div><div class="line">  - [ ] Phobos</div></pre></td></tr></table></figure>
<ul>
<li>[ ] Mercury</li>
<li>[x] Venus</li>
<li>[x] Earth<ul>
<li>[x] Moon</li>
</ul>
</li>
<li>[x] Mars<ul>
<li>[ ] Deimos</li>
<li>[ ] Phobos</li>
</ul>
</li>
</ul>
<p><a href="https://github.com/blog/1825-task-lists-in-all-markdown-documents" target="_blank" rel="external"><em>Read more about task lists in markdown documents.</em></a></p>
<h3 id="Relative-Links"><a href="#Relative-Links" class="headerlink" title="Relative Links"></a>Relative Links</h3><p>Relative links are recommended in your Markdown files when linking to internal content.</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="string">Link to a header</span>](<span class="link">#awesome-section</span>)</div><div class="line">[<span class="string">Link to a file</span>](<span class="link">docs/readme</span>)</div></pre></td></tr></table></figure>
<p>Absolute links have to be updated whenever the URL changes (e.g. repository renamed, username changed, project forked). Using relative links makes your documentation easily stand on its own.</p>
<p><a href="https://help.github.com/articles/relative-links-in-readmes/" target="_blank" rel="external"><em>Read more about relative links.</em></a></p>
<h3 id="Metadata-and-Plugin-Support-for-GitHub-Pages"><a href="#Metadata-and-Plugin-Support-for-GitHub-Pages" class="headerlink" title="Metadata and Plugin Support for GitHub Pages"></a>Metadata and Plugin Support for GitHub Pages</h3><p>Within Jekyll pages and posts, repository information is available within the <code>site.github</code> namespace, and can be displayed, for example, using <code></code>.</p>
<p>The Jemoji and jekyll-mentions plugins enable <a href="#emojis">emoji</a> and <a href="https://github.com/blog/821" target="_blank" rel="external">@mentions</a> in your Jekyll posts and pages to work just like you’d expect when interacting with a repository on GitHub.com.</p>
<p><a href="https://github.com/blog/1797-repository-metadata-and-plugin-support-for-github-pages" target="_blank" rel="external"><em>Read more about repository metadata and plugin support for GitHub Pages.</em></a></p>
<h3 id="Viewing-YAML-Metadata-in-your-Documents"><a href="#Viewing-YAML-Metadata-in-your-Documents" class="headerlink" title="Viewing YAML Metadata in your Documents"></a>Viewing YAML Metadata in your Documents</h3><p>Many blogging websites, like <a href="http://jekyllrb.com/" target="_blank" rel="external">Jekyll</a> with <a href="https://pages.github.com" target="_blank" rel="external">GitHub Pages</a>, depend on some YAML-formatted metadata at the beginning of your post. GitHub will render this metadata as a horizontal table, for easier reading</p>
<p><img src="https://camo.githubusercontent.com/47245aa16728e242f74a9a324ce0d24c0b916075/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f36343035302f313232383236372f65303439643063362d323761302d313165332d396464382d6131636432323539393334342e706e67" alt="YAML metadata"></p>
<p><a href="https://github.com/blog/1647-viewing-yaml-metadata-in-your-documents" target="_blank" rel="external"><em>Read more about viewing YAML metadata in your documents.</em></a></p>
<h3 id="Rendering-Tabular-Data"><a href="#Rendering-Tabular-Data" class="headerlink" title="Rendering Tabular Data"></a>Rendering Tabular Data</h3><p>GitHub supports rendering tabular data in the form of <code>.csv</code> (comma-separated) and <code>.tsv</code> (tab-separated) files.</p>
<p><img src="https://camo.githubusercontent.com/1b6dd0157ffb45d9939abf14233a0cb13b3b4dfe/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f3238323735392f3937363436322f33323038336463652d303638642d313165332d393262322d3566323863313061353035392e706e67" alt="Tabular data"></p>
<p><a href="https://github.com/blog/1601-see-your-csvs" target="_blank" rel="external"><em>Read more about rendering tabular data.</em></a></p>
<h3 id="Rendering-PDF"><a href="#Rendering-PDF" class="headerlink" title="Rendering PDF"></a>Rendering PDF</h3><p>GitHub supports rendering PDF:</p>
<p><img src="https://cloud.githubusercontent.com/assets/1000669/7492902/f8493160-f42e-11e4-8cea-1cb4f02757e7.png" alt="PDF"></p>
<p><a href="https://github.com/blog/1974-pdf-viewing" target="_blank" rel="external"><em>Read more about rendering PDF.</em></a></p>
<p>###Revert a Pull Request<br>After a pull request is merged, you may find it does not help anything or it was a bad decision to merge the pull request.</p>
<p>You can revert it by clicking the <strong>Revert</strong> button on the right side of a commit in the pull request page to create a pull request with reverted changes to this specific pull request.</p>
<p><img src="https://camo.githubusercontent.com/0d3350caf2bb1cba53123ffeafc00ca702b1b164/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f68656c702f70756c6c5f72657175657374732f7265766572742d70756c6c2d726571756573742d6c696e6b2e706e67" alt="Revert button"></p>
<p><a href="https://github.com/blog/1857-introducing-the-revert-button" target="_blank" rel="external"><em>Read more about reverting pull requests</em></a></p>
<h3 id="Diffs"><a href="#Diffs" class="headerlink" title="Diffs"></a>Diffs</h3><h4 id="Rendered-Prose-Diffs"><a href="#Rendered-Prose-Diffs" class="headerlink" title="Rendered Prose Diffs"></a>Rendered Prose Diffs</h4><p>Commits and pull requests, including rendered documents supported by GitHub (e.g. Markdown), feature <em>source</em> and <em>rendered</em> views.</p>
<p><img src="https://github-images.s3.amazonaws.com/help/repository/rendered_prose_diff.png" alt="Source / Rendered view"></p>
<p>Click the “rendered” button to see the changes as they’ll appear in the rendered document. Rendered prose view is handy when you’re adding, removing, and editing text:</p>
<p><img src="https://f.cloud.github.com/assets/17715/2003056/3997edb4-862b-11e3-90be-5e9586edecd7.png" alt="Rendered Prose Diffs"></p>
<p><a href="https://github.com/blog/1784-rendered-prose-diffs" target="_blank" rel="external"><em>Read more about rendered prose diffs.</em></a></p>
<h4 id="Diffable-Maps"><a href="#Diffable-Maps" class="headerlink" title="Diffable Maps"></a>Diffable Maps</h4><p>Any time you view a commit or pull request on GitHub that includes geodata, GitHub will render a visual representation of what was changed.</p>
<p><a href="https://github.com/benbalter/congressional-districts/commit/2233c76ca5bb059582d796f053775d8859198ec5" target="_blank" rel="external"><img src="https://f.cloud.github.com/assets/282759/2090660/63f2e45a-8e97-11e3-9d8b-d4c8078b004e.gif" alt="Diffable Maps"></a></p>
<p><a href="https://github.com/blog/1772-diffable-more-customizable-maps" target="_blank" rel="external"><em>Read more about diffable maps.</em></a></p>
<h4 id="Expanding-Context-in-Diffs"><a href="#Expanding-Context-in-Diffs" class="headerlink" title="Expanding Context in Diffs"></a>Expanding Context in Diffs</h4><p>Using the <em>unfold</em> button in the gutter of a diff, you can reveal additional lines of context with a click. You can keep clicking <em>unfold</em> until you’ve revealed the whole file, and the feature is available anywhere GitHub renders diffs.</p>
<p><img src="https://f.cloud.github.com/assets/22635/1610539/863c1f64-5584-11e3-82bf-151b406a272f.gif" alt="Expanding Context in Diffs"></p>
<p><a href="https://github.com/blog/1705-expanding-context-in-diffs" target="_blank" rel="external"><em>Read more about expanding context in diffs.</em></a></p>
<h4 id="Diff-or-Patch-of-Pull-Request"><a href="#Diff-or-Patch-of-Pull-Request" class="headerlink" title="Diff or Patch of Pull Request"></a>Diff or Patch of Pull Request</h4><p>You can get the diff of a Pull Request by adding a <code>.diff</code> or <code>.patch</code><br>extension to the end of the URL. For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">https://github.com/tiimgreen/github-cheat-sheet/pull/15</div><div class="line">https://github.com/tiimgreen/github-cheat-sheet/pull/15.diff</div><div class="line">https://github.com/tiimgreen/github-cheat-sheet/pull/15.patch</div></pre></td></tr></table></figure>
<p>The <code>.diff</code> extension would give you this in plain text:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">diff --git a/README.md b/README.md</div><div class="line">index 88fcf69..8614873 100644</div><div class="line">--- a/README.md</div><div class="line">+++ b/README.md</div><div class="line">@@ -28,6 +28,7 @@ All the hidden and not hidden features of Git and GitHub. This cheat sheet was i</div><div class="line"> - [Merged Branches](#merged-branches)</div><div class="line"> - [Quick Licensing](#quick-licensing)</div><div class="line"> - [TODO Lists](#todo-lists)</div><div class="line">+- [Relative Links](#relative-links)</div><div class="line"> - [.gitconfig Recommendations](#gitconfig-recommendations)</div><div class="line">     - [Aliases](#aliases)</div><div class="line">     - [Auto-correct](#auto-correct)</div><div class="line">@@ -381,6 +382,19 @@ When they are clicked, they will be updated in the pure Markdown:</div><div class="line"> - [ ] Sleep</div><div class="line"></div><div class="line">(...)</div></pre></td></tr></table></figure>
<h4 id="Rendering-and-diffing-images"><a href="#Rendering-and-diffing-images" class="headerlink" title="Rendering and diffing images"></a>Rendering and diffing images</h4><p>GitHub can display several common image formats, including PNG, JPG, GIF, and PSD. In addition, there are several ways to compare differences between versions of those image formats.</p>
<p><a href="https://github.com/blog/1845-psd-viewing-diffing" target="_blank" rel="external"><img src="https://cloud.githubusercontent.com/assets/2546/3165594/55f2798a-eb56-11e3-92e7-b79ad791a697.gif" alt="Diffable PSD"></a></p>
<p><a href="https://help.github.com/articles/rendering-and-diffing-images/" target="_blank" rel="external"><em>Read more about rendering and diffing images.</em></a></p>
<h3 id="Hub"><a href="#Hub" class="headerlink" title="Hub"></a>Hub</h3><p><a href="https://github.com/github/hub" target="_blank" rel="external">Hub</a> is a command line Git wrapper that gives you extra features and commands that make working with GitHub easier.</p>
<p>This allows you to do things like:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hub <span class="built_in">clone</span> tiimgreen/toc</div></pre></td></tr></table></figure>
<p><a href="https://github.com/github/hub#commands" target="_blank" rel="external"><em>Check out some more cool commands Hub has to offer.</em></a></p>
<h3 id="Contribution-Guidelines"><a href="#Contribution-Guidelines" class="headerlink" title="Contribution Guidelines"></a>Contribution Guidelines</h3><p>GitHub supports adding 3 different files which help users contribute to your project.<br>These files can either be placed in the root of your repository or a <code>.github</code> directory under the root.</p>
<h4 id="CONTRIBUTING-File"><a href="#CONTRIBUTING-File" class="headerlink" title="CONTRIBUTING File"></a>CONTRIBUTING File</h4><p>Adding a <code>CONTRIBUTING</code> or <code>CONTRIBUTING.md</code> file to either the root of your repository or a <code>.github</code> directory will add a link to your file when a contributor creates an Issue or opens a Pull Request.</p>
<p><img src="https://camo.githubusercontent.com/71995d6b0e620a9ef1ded00a04498241c69dd1bf/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f736b697463682f6973737565732d32303132303931332d3136323533392e6a7067" alt="Contributing Guidelines"></p>
<p><a href="https://github.com/blog/1184-contributing-guidelines" target="_blank" rel="external"><em>Read more about contributing guidelines.</em></a></p>
<h4 id="ISSUE-TEMPLATE-file"><a href="#ISSUE-TEMPLATE-file" class="headerlink" title="ISSUE_TEMPLATE file"></a>ISSUE_TEMPLATE file</h4><p>You can define a template for all new issues opened in your project. The content of this file will pre-populate the new issue box when users create new issues. Add an <code>ISSUE_TEMPLATE</code> or <code>ISSUE_TEMPLATE.md</code> file to either the root of your repository or a <code>.github</code> directory.</p>
<p><a href="https://github.com/blog/2111-issue-and-pull-request-templates" target="_blank" rel="external"><em>Read more about issue templates.</em></a></p>
<p><a href="https://www.talater.com/open-source-templates/" target="_blank" rel="external">Issue template file generator</a></p>
<p><img src="https://cloud.githubusercontent.com/assets/25792/13120859/733479fe-d564-11e5-8a1f-a03f95072f7a.png" alt="GitHub Issue template"></p>
<h4 id="PULL-REQUEST-TEMPLATE-file"><a href="#PULL-REQUEST-TEMPLATE-file" class="headerlink" title="PULL_REQUEST_TEMPLATE file"></a>PULL_REQUEST_TEMPLATE file</h4><p>You can define a template for all new pull requests opened in your project. The content of this file will pre-populate the text area when users create pull requests. Add a <code>PULL_REQUEST_TEMPLATE</code> or <code>PULL_REQUEST_TEMPLATE.md</code> file to either the root of your repository or a <code>.github</code> directory.</p>
<p><a href="https://github.com/blog/2111-issue-and-pull-request-templates" target="_blank" rel="external"><em>Read more about pull request templates.</em></a></p>
<p><a href="https://www.talater.com/open-source-templates/" target="_blank" rel="external">Pull request template file generator</a></p>
<h3 id="Octicons"><a href="#Octicons" class="headerlink" title="Octicons"></a>Octicons</h3><p>GitHubs icons (Octicons) have now been open sourced.</p>
<p><img src="https://og.github.com/octicons/octicons@1200x630.png" alt="Octicons"></p>
<p><a href="https://octicons.github.com" target="_blank" rel="external"><em>Read more about GitHub’s Octicons</em></a></p>
<h3 id="GitHub-Student-Developer-Pack"><a href="#GitHub-Student-Developer-Pack" class="headerlink" title="GitHub Student Developer Pack"></a>GitHub Student Developer Pack</h3><p>If you are a student you will be eligible for the GitHub Student Developer Pack. This gives you free credit, free trials and early access to software that will help you when developing.</p>
<p><img src="http://i.imgur.com/9ru3K43.png" alt="GitHub Student Developer Pack"></p>
<p><a href="https://education.github.com/pack" target="_blank" rel="external"><em>Read more about GitHub’s Student Developer Pack</em></a></p>
<h3 id="GitHub-Resources"><a href="#GitHub-Resources" class="headerlink" title="GitHub Resources"></a>GitHub Resources</h3><table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>GitHub Explore</td>
<td><a href="https://github.com/explore" target="_blank" rel="external">https://github.com/explore</a></td>
</tr>
<tr>
<td>GitHub Blog</td>
<td><a href="https://github.com/blog" target="_blank" rel="external">https://github.com/blog</a></td>
</tr>
<tr>
<td>GitHub Help</td>
<td><a href="https://help.github.com/" target="_blank" rel="external">https://help.github.com/</a></td>
</tr>
<tr>
<td>GitHub Training</td>
<td><a href="https://training.github.com/" target="_blank" rel="external">https://training.github.com/</a></td>
</tr>
<tr>
<td>GitHub Developer</td>
<td><a href="https://developer.github.com/" target="_blank" rel="external">https://developer.github.com/</a></td>
</tr>
<tr>
<td>Github Education (Free Micro Account and other stuff for students)</td>
<td><a href="https://education.github.com/" target="_blank" rel="external">https://education.github.com/</a></td>
</tr>
</tbody>
</table>
<h4 id="GitHub-Talks"><a href="#GitHub-Talks" class="headerlink" title="GitHub Talks"></a>GitHub Talks</h4><table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>How GitHub Uses GitHub to Build GitHub</td>
<td><a href="https://www.youtube.com/watch?v=qyz3jkOBbQY" target="_blank" rel="external">https://www.youtube.com/watch?v=qyz3jkOBbQY</a></td>
</tr>
<tr>
<td>Introduction to Git with Scott Chacon of GitHub</td>
<td><a href="https://www.youtube.com/watch?v=ZDR433b0HJY" target="_blank" rel="external">https://www.youtube.com/watch?v=ZDR433b0HJY</a></td>
</tr>
<tr>
<td>How GitHub No Longer Works</td>
<td><a href="https://www.youtube.com/watch?v=gXD1ITW7iZI" target="_blank" rel="external">https://www.youtube.com/watch?v=gXD1ITW7iZI</a></td>
</tr>
<tr>
<td>Git and GitHub Secrets</td>
<td><a href="https://www.youtube.com/watch?v=Foz9yvMkvlA" target="_blank" rel="external">https://www.youtube.com/watch?v=Foz9yvMkvlA</a></td>
</tr>
<tr>
<td>More Git and GitHub Secrets</td>
<td><a href="https://www.youtube.com/watch?v=p50xsL-iVgU" target="_blank" rel="external">https://www.youtube.com/watch?v=p50xsL-iVgU</a></td>
</tr>
</tbody>
</table>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="Remove-All-Deleted-Files-from-the-Working-Tree"><a href="#Remove-All-Deleted-Files-from-the-Working-Tree" class="headerlink" title="Remove All Deleted Files from the Working Tree"></a>Remove All Deleted Files from the Working Tree</h3><p>When you delete a lot of files using <code>/bin/rm</code> you can use the following command to remove them from the working tree and from the index, eliminating the need to remove each one individually:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm $(git ls-files <span class="_">-d</span>)</div></pre></td></tr></table></figure>
<p>For example:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">	deleted:    a</div><div class="line">	deleted:    c</div><div class="line"></div><div class="line">$ git rm $(git ls-files <span class="_">-d</span>)</div><div class="line">rm <span class="string">'a'</span></div><div class="line">rm <span class="string">'c'</span></div><div class="line"></div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">	deleted:    a</div><div class="line">	deleted:    c</div></pre></td></tr></table></figure>
<h3 id="Previous-Branch"><a href="#Previous-Branch" class="headerlink" title="Previous Branch"></a>Previous Branch</h3><p>To move to the previous branch in Git:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git checkout -</div><div class="line"><span class="comment"># Switched to branch 'master'</span></div><div class="line"></div><div class="line">$ git checkout -</div><div class="line"><span class="comment"># Switched to branch 'next'</span></div><div class="line"></div><div class="line">$ git checkout -</div><div class="line"><span class="comment"># Switched to branch 'master'</span></div></pre></td></tr></table></figure>
<p><a href="http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging" target="_blank" rel="external"><em>Read more about Git branching.</em></a></p>
<h3 id="Stripspace"><a href="#Stripspace" class="headerlink" title="Stripspace"></a>Stripspace</h3><p>Git Stripspace:</p>
<ul>
<li>Strips trailing whitespace</li>
<li>Collapses newlines</li>
<li>Adds newline to end of file</li>
</ul>
<p>A file must be passed when calling the command, e.g.:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stripspace &lt; README.md</div></pre></td></tr></table></figure></p>
<p><a href="http://git-scm.com/docs/git-stripspace" target="_blank" rel="external"><em>Read more about the Git <code>stripspace</code> command.</em></a></p>
<h3 id="SSH-keys"><a href="#SSH-keys" class="headerlink" title="SSH keys"></a>SSH keys</h3><p>You can get a list of public ssh keys in plain text format by visiting:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/&#123;user&#125;.keys</div></pre></td></tr></table></figure>
<p>e.g. <a href="https://github.com/tiimgreen.keys" target="_blank" rel="external">https://github.com/tiimgreen.keys</a></p>
<p><a href="https://changelog.com/github-exposes-public-ssh-keys-for-its-users/" target="_blank" rel="external"><em>Read more about accessing public ssh keys.</em></a></p>
<h3 id="Checking-out-Pull-Requests"><a href="#Checking-out-Pull-Requests" class="headerlink" title="Checking out Pull Requests"></a>Checking out Pull Requests</h3><p>Pull Requests are special branches on the GitHub repository which can be retrieved locally in several ways:</p>
<p>Retrieve a specific Pull Request and store it temporarily in <code>FETCH_HEAD</code> for quickly <code>diff</code>ing or <code>merge</code>ing:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin refs/pull/[PR-Number]/head</div></pre></td></tr></table></figure>
<p>Acquire all Pull Request branches as local remote branches by refspec:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin <span class="string">'+refs/pull/*/head:refs/remotes/origin/pr/*'</span></div></pre></td></tr></table></figure>
<p>Or setup the remote to fetch Pull Requests automatically by adding these corresponding lines in your repository’s <code>.git/config</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[remote &quot;origin&quot;]</div><div class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</div><div class="line">    url = git@github.com:tiimgreen/github-cheat-sheet.git</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[remote &quot;origin&quot;]</div><div class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</div><div class="line">    url = git@github.com:tiimgreen/github-cheat-sheet.git</div><div class="line">    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*</div></pre></td></tr></table></figure>
<p>For Fork-based Pull Request contributions, it’s useful to <code>checkout</code> a remote branch representing the Pull Request and create a local branch from it:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout pr/42 pr-42</div></pre></td></tr></table></figure>
<p>Or should you work on more repositories, you can globally configure fetching pull requests in the global git config instead.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global --add remote.origin.fetch <span class="string">"+refs/pull/*/head:refs/remotes/origin/pr/*"</span></div></pre></td></tr></table></figure>
<p>This way, you can use the following short commands in all your repositories:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch origin</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout pr/42</div></pre></td></tr></table></figure>
<p><a href="https://help.github.com/articles/checking-out-pull-requests-locally/" target="_blank" rel="external"><em>Read more about checking out pull requests locally.</em></a></p>
<h3 id="Empty-Commits"><a href="#Empty-Commits" class="headerlink" title="Empty Commits"></a>Empty Commits</h3><p>Commits can be pushed with no code changes by adding <code>--allow-empty</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"Big-ass commit"</span> --allow-empty</div></pre></td></tr></table></figure>
<p>Some use-cases for this (that make sense), include:</p>
<ul>
<li>Annotating the start of a new bulk of work or a new feature.</li>
<li>Documenting when you make changes to the project that aren’t code related.</li>
<li>Communicating with people using your repository.</li>
<li>The first commit of a repository: <code>git commit -m &quot;Initial commit&quot; --allow-empty</code>.</li>
</ul>
<h3 id="Styled-Git-Status"><a href="#Styled-Git-Status" class="headerlink" title="Styled Git Status"></a>Styled Git Status</h3><p>Running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure>
<p>Produces:</p>
<p><img src="http://i.imgur.com/qjPyvXb.png" alt="git status"></p>
<p>By adding <code>-sb</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status -sb</div></pre></td></tr></table></figure>
<p>This is produced:</p>
<p><img src="http://i.imgur.com/K0OY3nm.png" alt="git status -sb"></p>
<p><a href="http://git-scm.com/docs/git-status" target="_blank" rel="external"><em>Read more about the Git <code>status</code> command.</em></a></p>
<h3 id="Styled-Git-Log"><a href="#Styled-Git-Log" class="headerlink" title="Styled Git Log"></a>Styled Git Log</h3><p>Running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --all --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit --date=relative</div></pre></td></tr></table></figure>
<p>Produces:</p>
<p><img src="http://i.imgur.com/58eOtkW.png" alt="git log --all --graph --pretty=format:&#39;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative"></p>
<p>Credit to <a href="http://stackoverflow.com/users/88355/palesz" target="_blank" rel="external">Palesz</a></p>
<p><em>This can be aliased using the instructions found <a href="https://github.com/tiimgreen/github-cheat-sheet#aliases" target="_blank" rel="external">here</a>.</em></p>
<p><a href="http://git-scm.com/docs/git-log" target="_blank" rel="external"><em>Read more about the Git <code>log</code> command.</em></a></p>
<h3 id="Git-Query"><a href="#Git-Query" class="headerlink" title="Git Query"></a>Git Query</h3><p>A Git query allows you to search all your previous commit messages and find the most recent one matching the query.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git show :/query</div></pre></td></tr></table></figure>
<p>Where <code>query</code> (case-sensitive) is the term you want to search, this then finds the last one and gives details on the lines that were changed.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git show :/typo</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/icaGiNt.png" alt="git show :/query"></p>
<p><em>Press <code>q</code> to quit.</em></p>
<h3 id="Git-Grep"><a href="#Git-Grep" class="headerlink" title="Git Grep"></a>Git Grep</h3><p>Git Grep will return a list of lines matching a pattern.</p>
<p>Running:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git grep aliases</div></pre></td></tr></table></figure></p>
<p>will show all the files containing the string <em>aliases</em>.</p>
<p><img src="http://i.imgur.com/DL2zpQ9.png" alt="git grep aliases"></p>
<p><em>Press <code>q</code> to quit.</em></p>
<p>You can also use multiple flags for more advanced search. For example:</p>
<ul>
<li><code>-e</code> The next parameter is the pattern (e.g. regex)</li>
<li><code>--and</code>, <code>--or</code> and <code>--not</code> Combine multiple patterns.</li>
</ul>
<p>Use it like this:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git grep <span class="_">-e</span> pattern --and <span class="_">-e</span> anotherpattern</div></pre></td></tr></table></figure></p>
<p><a href="http://git-scm.com/docs/git-grep" target="_blank" rel="external"><em>Read more about the Git <code>grep</code> command.</em></a></p>
<h3 id="Merged-Branches"><a href="#Merged-Branches" class="headerlink" title="Merged Branches"></a>Merged Branches</h3><p>Running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --merged</div></pre></td></tr></table></figure>
<p>Will give you a list of all branches that have been merged into your current branch.</p>
<p>Conversely:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --no-merged</div></pre></td></tr></table></figure>
<p>Will give you a list of branches that have not been merged into your current branch.</p>
<p><a href="http://git-scm.com/docs/git-branch" target="_blank" rel="external"><em>Read more about the Git <code>branch</code> command.</em></a></p>
<h3 id="Fixup-and-Autosquash"><a href="#Fixup-and-Autosquash" class="headerlink" title="Fixup and Autosquash"></a>Fixup and Autosquash</h3><p>If there is something wrong with a previous commit (can be one or more from HEAD), for example <code>abcde</code>, run the following command after you’ve amended the problem:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git commit --fixup=abcde</div><div class="line">$ git rebase abcde^ --autosquash -i</div></pre></td></tr></table></figure></p>
<p><a href="http://git-scm.com/docs/git-commit" target="_blank" rel="external"><em>Read more about the Git <code>commit</code> command.</em></a><br><a href="http://git-scm.com/docs/git-rebase" target="_blank" rel="external"><em>Read more about the Git <code>rebase</code> command.</em></a></p>
<h3 id="Web-Server-for-Browsing-Local-Repositories"><a href="#Web-Server-for-Browsing-Local-Repositories" class="headerlink" title="Web Server for Browsing Local Repositories"></a>Web Server for Browsing Local Repositories</h3><p>Use the Git <code>instaweb</code> command to instantly browse your working repository in <code>gitweb</code>. This command is a simple script to set up <code>gitweb</code> and a web server for browsing the local repository.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git instaweb</div></pre></td></tr></table></figure>
<p>Opens:</p>
<p><img src="http://i.imgur.com/Dxekmqc.png" alt="Git instaweb"></p>
<p><a href="http://git-scm.com/docs/git-instaweb" target="_blank" rel="external"><em>Read more about the Git <code>instaweb</code> command.</em></a></p>
<h3 id="Git-Configurations"><a href="#Git-Configurations" class="headerlink" title="Git Configurations"></a>Git Configurations</h3><p>Your <code>.gitconfig</code> file contains all your Git configurations.</p>
<h4 id="Aliases"><a href="#Aliases" class="headerlink" title="Aliases"></a>Aliases</h4><p>Aliases are helpers that let you define your own git calls. For example you could set <code>git a</code> to run <code>git add --all</code>.</p>
<p>To add an alias, either navigate to <code>~/.gitconfig</code> and fill it out in the following format:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[alias]</div><div class="line">  co = checkout</div><div class="line">  cm = commit</div><div class="line">  p = push</div><div class="line">  # Show verbose output about tags, branches or remotes</div><div class="line">  tags = tag -l</div><div class="line">  branches = branch -a</div><div class="line">  remotes = remote -v</div></pre></td></tr></table></figure>
<p>…or type in the command-line:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.new_alias git_function</div></pre></td></tr></table></figure>
<p>For example:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.cm commit</div></pre></td></tr></table></figure>
<p>For an alias with multiple functions use quotes:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.ac <span class="string">'add -A . &amp;&amp; commit'</span></div></pre></td></tr></table></figure>
<p>Some useful aliases include:</p>
<table>
<thead>
<tr>
<th>Alias</th>
<th>Command</th>
<th>What to Type</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git cm</code></td>
<td><code>git commit</code></td>
<td><code>git config --global alias.cm commit</code></td>
</tr>
<tr>
<td><code>git co</code></td>
<td><code>git checkout</code></td>
<td><code>git config --global alias.co checkout</code></td>
</tr>
<tr>
<td><code>git ac</code></td>
<td><code>git add . -A</code> <code>git commit</code></td>
<td><code>git config --global alias.ac &#39;!git add -A &amp;&amp; git commit&#39;</code></td>
</tr>
<tr>
<td><code>git st</code></td>
<td><code>git status -sb</code></td>
<td><code>git config --global alias.st &#39;status -sb&#39;</code></td>
</tr>
<tr>
<td><code>git tags</code></td>
<td><code>git tag -l</code></td>
<td><code>git config --global alias.tags &#39;tag -l&#39;</code></td>
</tr>
<tr>
<td><code>git branches</code></td>
<td><code>git branch -a</code></td>
<td><code>git config --global alias.branches &#39;branch -a&#39;</code></td>
</tr>
<tr>
<td><code>git cleanup</code></td>
<td>`git branch –merged</td>
<td>grep -v ‘*’</td>
<td>xargs git branch -d`</td>
<td>`git config –global alias.cleanup “!git branch –merged</td>
<td>grep -v ‘*’</td>
<td>xargs git branch -d”`</td>
</tr>
<tr>
<td><code>git remotes</code></td>
<td><code>git remote -v</code></td>
<td><code>git config --global alias.remotes &#39;remote -v&#39;</code></td>
</tr>
<tr>
<td><code>git lg</code></td>
<td><code>git log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --</code></td>
<td><code>git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --&quot;</code></td>
</tr>
</tbody>
</table>
<p><em>Some Aliases are taken from <a href="https://github.com/mathiasbynens" target="_blank" rel="external">@mathiasbynens</a> dotfiles: <a href="https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig" target="_blank" rel="external">https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig</a></em></p>
<h4 id="Auto-Correct"><a href="#Auto-Correct" class="headerlink" title="Auto-Correct"></a>Auto-Correct</h4><p>If you type <code>git comit</code> you will get this:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git comit -m <span class="string">"Message"</span></div><div class="line"><span class="comment"># git: 'comit' is not a git command. See 'git --help'.</span></div><div class="line"></div><div class="line"><span class="comment"># Did you mean this?</span></div><div class="line"><span class="comment">#   commit</span></div></pre></td></tr></table></figure>
<p>To call <code>commit</code> when <code>comit</code> is typed, just enable auto-correct:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global help.autocorrect 1</div></pre></td></tr></table></figure>
<p>So now you will get this:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git comit -m <span class="string">"Message"</span></div><div class="line"><span class="comment"># WARNING: You called a Git command named 'comit', which does not exist.</span></div><div class="line"><span class="comment"># Continuing under the assumption that you meant 'commit'</span></div><div class="line"><span class="comment"># in 0.1 seconds automatically...</span></div></pre></td></tr></table></figure>
<h4 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h4><p>To add more color to your Git output:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global color.ui 1</div></pre></td></tr></table></figure>
<p><a href="http://git-scm.com/docs/git-config" target="_blank" rel="external"><em>Read more about the Git <code>config</code> command.</em></a></p>
<h3 id="Git-Resources"><a href="#Git-Resources" class="headerlink" title="Git Resources"></a>Git Resources</h3><table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>Official Git Site</td>
<td><a href="http://git-scm.com/" target="_blank" rel="external">http://git-scm.com/</a></td>
</tr>
<tr>
<td>Official Git Video Tutorials</td>
<td><a href="http://git-scm.com/videos" target="_blank" rel="external">http://git-scm.com/videos</a></td>
</tr>
<tr>
<td>Code School Try Git</td>
<td><a href="http://try.github.com/" target="_blank" rel="external">http://try.github.com/</a></td>
</tr>
<tr>
<td>Introductory Reference &amp; Tutorial for Git</td>
<td><a href="http://gitref.org/" target="_blank" rel="external">http://gitref.org/</a></td>
</tr>
<tr>
<td>Official Git Tutorial</td>
<td><a href="http://git-scm.com/docs/gittutorial" target="_blank" rel="external">http://git-scm.com/docs/gittutorial</a></td>
</tr>
<tr>
<td>Everyday Git</td>
<td><a href="http://git-scm.com/docs/everyday" target="_blank" rel="external">http://git-scm.com/docs/everyday</a></td>
</tr>
<tr>
<td>Git Immersion</td>
<td><a href="http://gitimmersion.com/" target="_blank" rel="external">http://gitimmersion.com/</a></td>
</tr>
<tr>
<td>Ry’s Git Tutorial</td>
<td><a href="http://rypress.com/tutorials/git/index" target="_blank" rel="external">http://rypress.com/tutorials/git/index</a></td>
</tr>
<tr>
<td>Git for Computer Scientists</td>
<td><a href="http://eagain.net/articles/git-for-computer-scientists/" target="_blank" rel="external">http://eagain.net/articles/git-for-computer-scientists/</a></td>
</tr>
<tr>
<td>Git Magic</td>
<td><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/" target="_blank" rel="external">http://www-cs-students.stanford.edu/~blynn/gitmagic/</a></td>
</tr>
<tr>
<td>GitHub Training Kit</td>
<td><a href="https://training.github.com/kit/" target="_blank" rel="external">https://training.github.com/kit/</a></td>
</tr>
<tr>
<td>Git Visualization Playground</td>
<td><a href="http://onlywei.github.io/explain-git-with-d3/#freeplay" target="_blank" rel="external">http://onlywei.github.io/explain-git-with-d3/#freeplay</a></td>
</tr>
<tr>
<td>Learn Git Branching</td>
<td><a href="http://pcottle.github.io/learnGitBranching/" target="_blank" rel="external">http://pcottle.github.io/learnGitBranching/</a></td>
</tr>
<tr>
<td>A collection of useful .gitignore templates</td>
<td><a href="https://github.com/github/gitignore" target="_blank" rel="external">https://github.com/github/gitignore</a></td>
</tr>
</tbody>
</table>
<h4 id="Git-Books"><a href="#Git-Books" class="headerlink" title="Git Books"></a>Git Books</h4><table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>Pragmatic Version Control Using Git</td>
<td><a href="https://pragprog.com/titles/tsgit/pragmatic-version-control-using-git" target="_blank" rel="external">https://pragprog.com/titles/tsgit/pragmatic-version-control-using-git</a></td>
</tr>
<tr>
<td>Pro Git</td>
<td><a href="http://git-scm.com/book" target="_blank" rel="external">http://git-scm.com/book</a></td>
</tr>
<tr>
<td>Git Internals PluralSight</td>
<td><a href="https://github.com/pluralsight/git-internals-pdf" target="_blank" rel="external">https://github.com/pluralsight/git-internals-pdf</a></td>
</tr>
<tr>
<td>Git in the Trenches</td>
<td><a href="http://cbx33.github.io/gitt/" target="_blank" rel="external">http://cbx33.github.io/gitt/</a></td>
</tr>
<tr>
<td>Version Control with Git</td>
<td><a href="http://www.amazon.com/Version-Control-Git-collaborative-development/dp/1449316387" target="_blank" rel="external">http://www.amazon.com/Version-Control-Git-collaborative-development/dp/1449316387</a></td>
</tr>
<tr>
<td>Pragmatic Guide to Git</td>
<td><a href="https://pragprog.com/titles/pg_git/pragmatic-guide-to-git" target="_blank" rel="external">https://pragprog.com/titles/pg_git/pragmatic-guide-to-git</a></td>
</tr>
<tr>
<td>Git: Version Control for Everyone</td>
<td><a href="https://www.packtpub.com/application-development/git-version-control-everyone" target="_blank" rel="external">https://www.packtpub.com/application-development/git-version-control-everyone</a></td>
</tr>
</tbody>
</table>
<h4 id="Git-Videos"><a href="#Git-Videos" class="headerlink" title="Git Videos"></a>Git Videos</h4><table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>Linus Torvalds on Git</td>
<td><a href="https://www.youtube.com/watch?v=4XpnKHJAok8" target="_blank" rel="external">https://www.youtube.com/watch?v=4XpnKHJAok8</a></td>
</tr>
<tr>
<td>Introduction to Git with Scott Chacon</td>
<td><a href="https://www.youtube.com/watch?v=ZDR433b0HJY" target="_blank" rel="external">https://www.youtube.com/watch?v=ZDR433b0HJY</a></td>
</tr>
<tr>
<td>Git From the Bits Up</td>
<td><a href="https://www.youtube.com/watch?v=MYP56QJpDr4" target="_blank" rel="external">https://www.youtube.com/watch?v=MYP56QJpDr4</a></td>
</tr>
<tr>
<td>Graphs, Hashes, and Compression, Oh My!</td>
<td><a href="https://www.youtube.com/watch?v=ig5E8CcdM9g" target="_blank" rel="external">https://www.youtube.com/watch?v=ig5E8CcdM9g</a></td>
</tr>
<tr>
<td>GitHub Training &amp; Guides</td>
<td><a href="https://www.youtube.com/watch?list=PLg7s6cbtAD15G8lNyoaYDuKZSKyJrgwB-&amp;v=FyfwLX4HAxM" target="_blank" rel="external">https://www.youtube.com/watch?list=PLg7s6cbtAD15G8lNyoaYDuKZSKyJrgwB-&amp;v=FyfwLX4HAxM</a></td>
</tr>
</tbody>
</table>
<h4 id="Git-Articles"><a href="#Git-Articles" class="headerlink" title="Git Articles"></a>Git Articles</h4><table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>GitHub Flow</td>
<td><a href="http://scottchacon.com/2011/08/31/github-flow.html" target="_blank" rel="external">http://scottchacon.com/2011/08/31/github-flow.html</a></td>
</tr>
</tbody>
</table>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/tiimgreen/github-cheat-sheet/" target="_blank" rel="external">GitHub Cheat Sheet</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A collection of cool hidden and not so hidden features of Git and GitHub. This cheat sheet was inspired by &lt;a href=&quot;https://github.com/holman&quot;&gt;Zach Holman&lt;/a&gt;‘s &lt;a href=&quot;http://confreaks.tv/videos/aloharuby2012-git-and-github-secrets&quot;&gt;Git and GitHub Secrets&lt;/a&gt; talk at Aloha Ruby Conference 2012 (&lt;a href=&quot;https://speakerdeck.com/holman/git-and-github-secrets&quot;&gt;slides&lt;/a&gt;) and his &lt;a href=&quot;https://vimeo.com/72955426&quot;&gt;More Git and GitHub Secrets&lt;/a&gt; talk at WDCNZ 2013 (&lt;a href=&quot;https://speakerdeck.com/holman/more-git-and-github-secrets&quot;&gt;slides&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Shortlink: &lt;a href=&quot;http://git.io/sheet&quot;&gt;&lt;code&gt;http://git.io/sheet&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read this in other languages: &lt;a href=&quot;https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.md&quot;&gt;English&lt;/a&gt;, &lt;a href=&quot;https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.ko.md&quot;&gt;한국어&lt;/a&gt;, &lt;a href=&quot;https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.ja.md&quot;&gt;日本語&lt;/a&gt;, &lt;a href=&quot;https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md&quot;&gt;简体中文&lt;/a&gt;, &lt;a href=&quot;https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-tw.md&quot;&gt;正體中文&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="GitHub" scheme="http://ipcreator.me/tags/GitHub/"/>
    
      <category term="Cheat Sheet" scheme="http://ipcreator.me/tags/Cheat-Sheet/"/>
    
  </entry>
  
  <entry>
    <title>List of Android UI/UX Libraries</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Android/3rdLib/list-of-android-ui-ux-libraries/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Android/3rdLib/list-of-android-ui-ux-libraries/</id>
    <published>2017-03-30T14:41:06.000Z</published>
    <updated>2017-03-30T14:51:31.317Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/1131548cf666e1150ebd2a52f44776d539f06324/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f6d61737465722f6d656469612f6c6f676f2e737667" alt="Awesome"></p>
<p>A curated list of awesome Android UI/UX libraries.</p>
<a id="more"></a>
<h1 id="List-of-Android-UI-UX-Libraries-1"><a href="#List-of-Android-UI-UX-Libraries-1" class="headerlink" title="List of Android UI/UX Libraries[1]"></a>List of Android UI/UX Libraries<sup>[1]<sup></sup></sup></h1><h2 id="Index-light-weight-pages"><a href="#Index-light-weight-pages" class="headerlink" title="Index (light-weight pages)"></a>Index <code>(light-weight pages)</code></h2><ul>
<li><a href="pages/Material.md">Material</a></li>
<li><a href="pages/Layout.md">Layout</a></li>
<li><a href="pages/Button.md">Button</a></li>
<li><a href="pages/List-Grid.md">List / Grid</a></li>
<li><a href="pages/ViewPager.md">ViewPager</a></li>
<li><a href="pages/Label-Form.md">Label / Form</a></li>
<li><a href="pages/Image.md">Image</a></li>
<li><a href="pages/SeekBar.md">SeekBar</a></li>
<li><a href="pages/Progress.md">Progress</a></li>
<li><a href="pages/Menu.md">Menu</a></li>
<li><a href="pages/ActionBar.md">ActionBar</a></li>
<li><a href="pages/Dialog.md">Dialog</a></li>
<li><a href="pages/Calendar.md">Calendar</a></li>
<li><a href="pages/Graph.md">Graph</a></li>
<li><a href="pages/Animation.md">Animation</a></li>
<li><a href="pages/Parallax.md">Parallax</a></li>
<li><a href="pages/Effect.md">Effect (Blur… etc)</a></li>
<li><a href="pages/Other.md">Other</a></li>
</ul>
<h1 id="Material"><a href="#Material" class="headerlink" title="Material"></a>Material</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/navasmdc/MaterialDesignLibrary" target="_blank" rel="external">MaterialDesignLibrary</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialDesignLibrary.png" width="100%"> <img src="/art/MaterialDesignLibrary2.png" width="49%"> <img src="/art/MaterialDesignLibrary3.png" width="49%"> <img src="/art/MaterialDesignLibrary4.png" width="49%"> <img src="/art/MaterialDesignLibrary5.png" width="49%"> <img src="/art/MaterialDesignLibrary6.png" width="49%"> <img src="/art/MaterialDesignLibrary7.png" width="49%"> <img src="/art/MaterialDesignLibrary8.png" width="49%"> <img src="/art/MaterialDesignLibrary9.png" width="49%"> <img src="/art/MaterialDesignLibrary10.png" width="49%"> <img src="/art/MaterialDesignLibrary11.png" width="49%"> <img src="/art/MaterialDesignLibrary12.png" width="49%"> <img src="/art/MaterialDesignLibrary13.png" width="49%"> <img src="/art/MaterialDesignLibrary14.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ChrisRenke/DrawerArrowDrawable" target="_blank" rel="external">DrawerArrowDrawable</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/DrawerArrowDrawable.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/neokree/MaterialTabs" target="_blank" rel="external">MaterialTabs</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialTabs.png" width="49%"> <img src="/art/MaterialTabs2.png" width="49%"> <img src="/art/MaterialTabs3.jpeg" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/jpardogo/PagerSlidingTabStrip" target="_blank" rel="external">PagerSlidingTabStrip</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/PagerSlidingTabStrip.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/balysv/material-ripple" target="_blank" rel="external">material-ripple</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-ripple.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/traex/RippleEffect" target="_blank" rel="external">RippleEffect</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/RippleEffect.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/keklikhasan/LDrawer" target="_blank" rel="external">LDrawer</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/LDrawer.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/google/material-design-icons" target="_blank" rel="external">material-design-icons</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-design-icons.png" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/tekinarslan/AndroidMaterialDesignToolbar" target="_blank" rel="external">AndroidMaterialDesignToolbar</a></td>
<td>UnKnown</td>
<td><img src="/art/AndroidMaterialDesignToolbar.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/rengwuxian/MaterialEditText" target="_blank" rel="external">MaterialEditText</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialEditText.png" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/balysv/material-menu" target="_blank" rel="external">material-menu</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-menu.gif" alt=""> <img src="/art/material-menu2.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="external">material-dialogs</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-dialogs.webp" alt=""> <img src="/art/material-dialogs2.webp" alt=""> <img src="/art/material-dialogs3.webp" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/fengdai/AlertDialogPro" target="_blank" rel="external">AlertDialogPro</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AlertDialogPro.png" width="49%"> <img src="/art/AlertDialogPro2.png" width="49%"> <img src="/art/AlertDialogPro3.png" width="49%"> <img src="/art/AlertDialogPro4.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/neokree/MaterialNavigationDrawer" target="_blank" rel="external">MaterialNavigationDrawer</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialNavigationDrawer.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/drakeet/MaterialDialog" target="_blank" rel="external">MaterialDialog</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialDialog.png" width="49%"> <img src="/art/MaterialDialog2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/pnikosis/materialish-progress" target="_blank" rel="external">materialish-progress</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/materialish-progress.gif" width="49%"> <img src="/art/materialish-progress2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/makovkastar/FloatingActionButton" target="_blank" rel="external">FloatingActionButton</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/FloatingActionButton.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/futuresimple/android-floating-action-button" target="_blank" rel="external">android-floating-action-button</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-floating-action-button.gif" width="49%"> <img src="/art/android-floating-action-button.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/gowong/material-sheet-fab" target="_blank" rel="external">MaterialSheetFab</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/MaterialSheetFab.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/nispok/snackbar" target="_blank" rel="external">snackbar</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/snackbar.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ozodrukh/CircularReveal" target="_blank" rel="external">CircularReveal</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/CircularReveal.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/oli107/material-range-bar" target="_blank" rel="external">material-range-bar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-range-bar.png" width="49%"> <img src="/art/material-range-bar2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/sachin1092/Lollipop-AppCompat-Widgets-Skeleton" target="_blank" rel="external">Lollipop-AppCompat-Widgets-Skeleton</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/LollipopAppCompatWidgetSkeleton.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ZieIony/Carbon" target="_blank" rel="external">Carbon</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td>NONE</td>
</tr>
<tr>
<td><a href="https://github.com/prolificinteractive/material-calendarview" target="_blank" rel="external">material-calendarview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-calendarview.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/rey5137/material" target="_blank" rel="external">Material</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Material.gif" width="49%"> <img src="/art/Material2.gif" width="49%"> <img src="/art/Material3.gif" width="49%"> <img src="/art/Material4.gif" width="49%"> <img src="/art/Material5.gif" width="49%"> <img src="/art/Material6.gif" width="49%"> <img src="/art/Material7.gif" width="49%"> <img src="/art/Material8.gif" width="49%"> <img src="/art/Material9.gif" width="49%"> <img src="/art/Material10.gif" width="49%"> <img src="/art/Material11.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/code-mc/material-icon-lib" target="_blank" rel="external">Material Icon Library</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-icon-lib.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/SaeedMasoumi/FAB-Loading" target="_blank" rel="external">FAB-Loading</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FAB-Loading.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/florent37/MaterialTextField" target="_blank" rel="external">MaterialTextField</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialTextField.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/borax12/MaterialDateRangePicker" target="_blank" rel="external">MaterialDateRangePicker</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialDateRangePicker.png" width="49%"> <img src="/art/MaterialDateRangePicker2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/KeepSafe/TapTargetView" target="_blank" rel="external">TapTargetView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/TapTargetView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/sjwall/MaterialTapTargetPrompt" target="_blank" rel="external">MaterialTapTargetPrompt</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialTapTargetPrompt.jpg" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/john990/WaveView" target="_blank" rel="external">WaveView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/waveview.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/kyze8439690/ResideLayout" target="_blank" rel="external">ResideLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ResideLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/AndroidSwipeLayout" target="_blank" rel="external">AndroidSwipeLayout</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/AndroidSwipeLayout.gif" width="49%"> <img src="/art/AndroidSwipeLayout2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ikew0ng/SwipeBackLayout" target="_blank" rel="external">SwipeBackLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/SwipeBackLayout.webp" width="49%"> <img src="/art/SwipeBackLayout2.webp" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/christophesmet/android_maskable_layout" target="_blank" rel="external">Maskable Layout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android_maskable_layout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/traex/ExpandableLayout" target="_blank" rel="external">ExpandableLayout</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/ExpandableLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/baoyongzhang/android-PullRefreshLayout" target="_blank" rel="external">android-PullRefreshLayout</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/android-PullRefreshLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/moagrius/TileView" target="_blank" rel="external">TileView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/TileView.jpeg" width="49%"> <img src="/art/TileView2.jpeg" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/amlcurran/ShowcaseView" target="_blank" rel="external">ShowcaseView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ShowcaseView.png" width="49%"> <img src="/art/ShowcaseView2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">Ultra Pull To Refresh</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-Ultra-Pull-To-Refresh.gif" width="49%"> <img src="/art/android-Ultra-Pull-To-Refresh2.gif" width="49%"> <img src="/art/android-Ultra-Pull-To-Refresh3.gif" width="49%"> <img src="/art/android-Ultra-Pull-To-Refresh4.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/AndroidViewHover" target="_blank" rel="external">AndroidViewHover</a></td>
<td>UnKnown</td>
<td><img src="/art/AndroidViewHover.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/pedrovgs/DraggablePanel" target="_blank" rel="external">DraggablePanel</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/DraggablePanel.gif" width="49%"> <img src="/art/DraggablePanel2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/r0adkll/Slidr" target="_blank" rel="external">Slidr</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Slidr.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Yalantis/Phoenix" target="_blank" rel="external">Phoenix Pull-to-Refresh</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Phoenix.gif" width="65%"></td>
</tr>
<tr>
<td><a href="https://github.com/Yalantis/Taurus" target="_blank" rel="external">Pull-to-Refresh.Tours</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Taurus.gif" width="65%"></td>
</tr>
<tr>
<td><a href="https://github.com/zhaozhentao/InboxLayout" target="_blank" rel="external">InboxLayout</a></td>
<td>UnKnown</td>
<td><img src="/art/InboxLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/liuguangqiang/SwipeBack" target="_blank" rel="external">SwipeBack</a></td>
<td>UnKnown</td>
<td><img src="/art/SwipeBack.gif" width="49%"> <img src="/art/SwipeBack2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ogaclejapan/ArcLayout" target="_blank" rel="external">ArcLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/arclayout1.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ppamorim/Dragger" target="_blank" rel="external">Dragger</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Dragger.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/Jawnnypoo/PhysicsLayout" target="_blank" rel="external">PhysicsLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/PhysicsLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Flipboard/bottomsheet" target="_blank" rel="external">BottomSheet</a></td>
<td><a href="https://github.com/Flipboard/bottomsheet/blob/master/LICENSE" target="_blank" rel="external">License</a></td>
<td><img src="/art/BottomSheet.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/txusballesteros/bubbles-for-android" target="_blank" rel="external">Bubbles for Android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/bubbles-for-android.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/umano/AndroidSlidingUpPanel" target="_blank" rel="external">AndroidSlidingUpPanel</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AndroidSlidingUpPanel.jpg" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/kaichunlin/android-transition" target="_blank" rel="external">android-transition</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-transition.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/tuesda/CircleRefreshLayout" target="_blank" rel="external">CircleRefreshLayout</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/CircleRefreshLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/recruit-lifestyle/WaveSwipeRefreshLayout" target="_blank" rel="external">WaveSwipeRefreshLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/WaveSwipeRefreshLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/recruit-lifestyle/FloatingView" target="_blank" rel="external">FloatingView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FloatingView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/pyricau/frenchtoast" target="_blank" rel="external">FrenchToast</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/frenchtoast.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/zzz40500/AndroidSweetSheet" target="_blank" rel="external">AndroidSweetSheet</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AndroidSweetSheet.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/truizlop/FABRevealLayout" target="_blank" rel="external">FABRevealLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FABRevealLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/fenjuly/ToggleExpandLayout" target="_blank" rel="external">ToggleExpandLayout</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/ToggleExpandLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/mxn21/FlowingDrawer" target="_blank" rel="external">FlowingDrawer</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FlowingDrawer.gif" width="65%"></td>
</tr>
<tr>
<td><a href="https://github.com/gelitenight/WaveView" target="_blank" rel="external">WaveView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/gelitenight-WaveView.gif" width="65%"></td>
</tr>
<tr>
<td><a href="https://github.com/worldline/FoldableLayout" target="_blank" rel="external">FoldableLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FoldableLayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/shts/TriangleLabelView" target="_blank" rel="external">TriangleLabelView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/TriangleLabelView.jpg" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/google/flexbox-layout" target="_blank" rel="external">FlexboxLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FlexboxLayout.gif" width="49%"> <img src="/art/FlexboxLayout2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Quatja/Vorolay" target="_blank" rel="external">Vorolay</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Vorolay.png" width="49%"> <img src="/art/Vorolay2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/google/hover" target="_blank" rel="external">Hover</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/hover.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/dmytrodanylyk/circular-progress-button" target="_blank" rel="external">circular-progress-button</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/circular-progress-button.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/dmytrodanylyk/android-process-button" target="_blank" rel="external">android-process-button</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-process-button.gif" width="75%"> <img src="/art/android-process-button2.gif" width="75%"></td>
</tr>
<tr>
<td><a href="https://github.com/markushi/android-circlebutton" target="_blank" rel="external">android-circlebutton</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-circlebutton.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/hoang8f/android-flat-button" target="_blank" rel="external">android-flat-button</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-flat-button.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/TheFinestArtist/MovingButton" target="_blank" rel="external">MovingButton</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/MovingButton.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/linger1216/labelview" target="_blank" rel="external">LabelView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="https://github.com/linger1216/labelview/blob/master/img/img1.png" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="List-Grid"><a href="#List-Grid" class="headerlink" title="List / Grid"></a>List / Grid</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/Malinskiy/SuperRecyclerView" target="_blank" rel="external">SuperRecyclerView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td>NONE</td>
</tr>
<tr>
<td><a href="https://github.com/CodeFalling/RecyclerViewSwipeDismiss" target="_blank" rel="external">RecyclerViewSwipeDismiss</a></td>
<td>UnKnown</td>
<td><img src="/art/RecyclerViewSwipeDismiss.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/jpardogo/FlabbyListView" target="_blank" rel="external">FlabbyListView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FlabbyListView.gif" width="49%"> <img src="/art/FlabbyListView2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/eowise/recyclerview-stickyheaders" target="_blank" rel="external">recyclerview-stickyheaders</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/recyclerview-stickyheaders.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Gnod/ParallaxListView" target="_blank" rel="external">ParallaxListView</a></td>
<td>UnKnown</td>
<td><img src="/art/ParallaxListView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Frank-Zhu/PullZoomView" target="_blank" rel="external">PullZoomView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/PullZoomView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/baoyongzhang/SwipeMenuListView" target="_blank" rel="external">SwipeMenuListView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/SwipeMenuListView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/flavienlaurent/discrollview" target="_blank" rel="external">discrollview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/discrollview.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/emilsjolander/StickyListHeaders" target="_blank" rel="external">StickyListHeaders</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/StickyListHeaders.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/jpardogo/ListBuddies" target="_blank" rel="external">ListBuddies</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ListBuddies.png" width="49%"> <img src="/art/ListBuddies.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ksoichiro/Android-ObservableScrollView" target="_blank" rel="external">Android-ObservableScrollView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Android-ObservableScrollView.gif" width="32%"> <img src="/art/Android-ObservableScrollView.gif" width="32%"> <img src="/art/Android-ObservableScrollView2.gif" width="32%"> <img src="/art/Android-ObservableScrollView3.gif" width="32%"> <img src="/art/Android-ObservableScrollView4.gif" width="32%"> <img src="/art/Android-ObservableScrollView5.gif" width="32%"> <img src="/art/Android-ObservableScrollView6.gif" width="32%"> <img src="/art/Android-ObservableScrollView7.gif" width="32%"> <img src="/art/Android-ObservableScrollView8.gif" width="32%"> <img src="/art/Android-ObservableScrollView9.gif" width="32%"> <img src="/art/Android-ObservableScrollView10.gif" width="32%"> <img src="/art/Android-ObservableScrollView11.gif" width="32%"> <img src="/art/Android-ObservableScrollView12.gif" width="32%"> <img src="/art/Android-ObservableScrollView13.gif" width="32%"></td>
</tr>
<tr>
<td><a href="https://github.com/felipecsl/AsymmetricGridView" target="_blank" rel="external">AsymmetricGridView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AsymmetricGridView.png" width="49%"> <img src="/art/AsymmetricGridView2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/askerov/DynamicGrid" target="_blank" rel="external">DynamicGrid</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/DynamicGrid.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/etsy/AndroidStaggeredGrid" target="_blank" rel="external">AndroidStaggeredGrid</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AndroidStaggeredGrid.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/47deg/android-swipelistview" target="_blank" rel="external">SwipeListView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-swipelistview.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/kanytu/android-parallax-recyclerview" target="_blank" rel="external">android-parallax-recyclerview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-parallax-recyclerview.gif" width="49%"> <img src="/art/android-parallax-recyclerview2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/emmano/BlurStickyHeaderListView" target="_blank" rel="external">BlurStickyHeaderListView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/BlurStickyHeaderListView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/wasabeef/recyclerview-animators" target="_blank" rel="external">RecyclerView Animators</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/recyclerview-animators.gif" width="49%"> <img src="/art/recyclerview-animators2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/yqritc/RecyclerView-FlexibleDivider" target="_blank" rel="external">RecyclerView-FlexibleDivider</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/RecyclerView-FlexibleDivider.png" width="49%"> <img src="/art/RecyclerView-FlexibleDivider2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/bmelnychuk/AndroidTreeView" target="_blank" rel="external">AndroidTreeView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AndroidTreeView.webp" width="49%"> <img src="/art/AndroidTreeView2.webp" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/danoz73/RecyclerViewFastScroller" target="_blank" rel="external">RecyclerViewFastScroller</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/RecyclerViewFastScroller.png" width="49%"> <img src="/art/RecyclerViewFastScroller2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/yqritc/RecyclerView-MultipleViewTypesAdapter" target="_blank" rel="external">RecyclerView-MultipleViewTypesAdapter</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/RecyclerView-MultipleViewTypesAdapter.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/vcalvello/SwipeToAction" target="_blank" rel="external">SwipeToAction</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/SwipeToAction.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/h6ah4i/android-advancedrecyclerview" target="_blank" rel="external">Advanced Recyclerview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AdvancedRecyclerView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/magiepooh/RecyclerItemDecoration" target="_blank" rel="external">RecyclerItemDecoration</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/recycler-itemdecoration1.gif" width="49%"> <img src="/art/recycler-itemdecoration2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ZieIony/MaterialRecents" target="_blank" rel="external">MaterialRecents</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialRecents.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Karumi/Dividers" target="_blank" rel="external">Dividers</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Dividers.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/afollestad/drag-select-recyclerview" target="_blank" rel="external">Drag Select Recycler View</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/drag-select-recyclerview.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/timehop/sticky-headers-recyclerview" target="_blank" rel="external">sticky-headers-recyclerview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/sticky-headers-recyclerview.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="ViewPager"><a href="#ViewPager" class="headerlink" title="ViewPager"></a>ViewPager</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/xgc1986/ParallaxPagerTransformer" target="_blank" rel="external">ParallaxPagerTransformer</a></td>
<td>UnKnown</td>
<td><img src="/art/ParallaxPagerTransformer.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ToxicBakery/ViewPagerTransforms" target="_blank" rel="external">ViewPagerTransforms</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ViewPagerTransforms.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ongakuer/CircleIndicator" target="_blank" rel="external">CircleIndicator</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/CircleIndicator.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/ViewPagerIndicator" target="_blank" rel="external">Android ViewPagerIndicator</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Android-ViewPagerIndicator.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/kmshack/Android-ParallaxHeaderViewPager" target="_blank" rel="external">Android-ParallaxHeaderViewPager</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Android-ParallaxHeaderViewPager.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/alexzaitsev/freepager" target="_blank" rel="external">freepager</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/freepager.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/chenupt/SpringIndicator" target="_blank" rel="external">SpringIndicator</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/SpringIndicator.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ogaclejapan/SmartTabLayout" target="_blank" rel="external">SmartTabLayout</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/smarttablayout.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Yalantis/FlipViewPager.Draco" target="_blank" rel="external">FlipViewPager.Draco</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FlipViewPager-Draco.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/florent37/MaterialViewPager" target="_blank" rel="external">MaterialViewPager</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialViewPager.png" width="49%"> <img src="/art/MaterialViewPager2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/LyndonChin/AndroidRubberIndicator" target="_blank" rel="external">AndroidRubberIndicator</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/AndroidRubberIndicator.gif" width="60%"></td>
</tr>
<tr>
<td><a href="https://github.com/florent37/HollyViewPager" target="_blank" rel="external">HollyViewPager</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/HollyViewPager.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/sacot41/SCViewPager" target="_blank" rel="external">SCViewPager</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/SCViewPager.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/roughike/SwipeSelector" target="_blank" rel="external">SwipeSelector</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/SwipeSelector.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/DevLight-Mobile-Agency/NavigationTabStrip" target="_blank" rel="external">NavigationTabStrip</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a> &amp; <a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/NavigationTabStrip.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/DevLight-Mobile-Agency/NavigationTabBar" target="_blank" rel="external">NavigationTabBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a> &amp; <a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/NavigationTabBar.gif" width="49%"> <img src="/art/NavigationTabBar2.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="Label-Form"><a href="#Label-Form" class="headerlink" title="Label / Form"></a>Label / Form</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/RomainPiel/Shimmer-android" target="_blank" rel="external">Shimmer-android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Shimmer-android.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/facebook/shimmer-android" target="_blank" rel="external">Shimmer for Android</a></td>
<td><a href="http://opensource.org/licenses/BSD-2-Clause" target="_blank" rel="external">BSD 2 License</a></td>
<td><img src="/art/shimmer-android-fb.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/RomainPiel/Titanic" target="_blank" rel="external">Titanic</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Titanic.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/Rogero0o/MatchView" target="_blank" rel="external">MatchView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MatchView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/grantland/android-autofittextview" target="_blank" rel="external">android-autofittextview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-autofittextview.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/matthewrkula/SecretTextView" target="_blank" rel="external">SecretTextView</a></td>
<td>UnKnown</td>
<td><img src="/art/SecretTextView.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/bluejamesbond/TextJustify-Android" target="_blank" rel="external">TextJustify-Android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/TextJustify-Android.png" width="100%"> <img src="/art/TextJustify-Android2.jpeg" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/pavlospt/RoundedLetterView" target="_blank" rel="external">RoundedLetterView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/RoundedLetterView.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/amulyakhare/TextDrawable" target="_blank" rel="external">TextDrawable</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/TextDrawable.png" width="49%"> <img src="/art/TextDrawable2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/quiqueqs/BabushkaText" target="_blank" rel="external">BabushkaText</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/BabushkaText.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Manabu-GT/ExpandableTextView" target="_blank" rel="external">ExpandableTextView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ExpandableTextView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/wrapp/floatlabelededittext" target="_blank" rel="external">Float Labeled EditText</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/floatlabelededittext.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/erchenger/SizeAdjustingTextView" target="_blank" rel="external">SizeAdjustingTextView</a></td>
<td><a href="http://www.gnu.org/licenses/gpl-3.0.en.html" target="_blank" rel="external">GNU License</a></td>
<td>NONE</td>
</tr>
<tr>
<td><a href="https://github.com/gotokatsuya/ParkedTextView" target="_blank" rel="external">ParkedTextView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/ParkedTextView.gif" width="60%"></td>
</tr>
<tr>
<td><a href="https://github.com/glomadrian/material-code-input" target="_blank" rel="external">Material Code input</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/material-code-input.gif" width="60%"> <br><br> <img src="/art/material-code-input2.gif" width="60%"></td>
</tr>
<tr>
<td><a href="https://github.com/elevenetc/TextSurface" target="_blank" rel="external">TextSurface</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/TextSurface.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/tasomaniac/EmailAutoCompleteTextView" target="_blank" rel="external">EmailAutoCompleteTextView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/EmailAutoCompleteTextView.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/xenione/tab-digit" target="_blank" rel="external">Tab Digit</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/tab-digit.gif" width="49%"> <img src="/art/tab-digit2.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/MikeOrtiz/TouchImageView" target="_blank" rel="external">TouchImageView</a></td>
<td><a href="https://raw.githubusercontent.com/MikeOrtiz/TouchImageView/master/LICENSE" target="_blank" rel="external">LICENSE</a></td>
<td>NONE</td>
</tr>
<tr>
<td><a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="external">CircleImageView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/CircleImageView.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/siyamed/android-shape-imageview" target="_blank" rel="external">android-shape-imageview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-shape-imageview.png" width="49%"> <img src="/art/android-shape-imageview2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/felipecsl/GifImageView" target="_blank" rel="external">GifImageView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/GifImageView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/edmodo/cropper" target="_blank" rel="external">cropper</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/cropper.jpeg" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/jdamcd/android-crop" target="_blank" rel="external">android-crop</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-crop.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/pungrue26/SelectableRoundedImageView" target="_blank" rel="external">SelectableRoundedImageView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/SelectableRoundedImageView.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/vinc3m1/RoundedImageView" target="_blank" rel="external">RoundedImageView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/RoundedImageView.png" width="49%"> <img src="/art/RoundedImageView2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/cesards/CropImageView" target="_blank" rel="external">CropImageView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/CropImageView.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/cooltechworks/BitmapMerger" target="_blank" rel="external">BitmapMerger</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/BitmapMerger.gif" width="49%"> <img src="/art/BitmapMerger2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Q42/AndroidScrollingImageView" target="_blank" rel="external">Scrolling Image View</a></td>
<td>NONE</td>
<td><img src="/art/AndroidScrollingImageView.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/DanielMartinus/Pixelate" target="_blank" rel="external">Pixelate Android</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/android-pixelate.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/IsseiAoki/SimpleCropView" target="_blank" rel="external">SimpleCropView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/SimpleCropView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/lankton/android-anyshape" target="_blank" rel="external">android-anyshape</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/android-anyshape.jpg" width="49%"> <img src="/art/android-anyshape2.jpg" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/gjiazhe/PanoramaImageView" target="_blank" rel="external">PanoramaImageView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/PanoramaImageView.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="SeekBar"><a href="#SeekBar" class="headerlink" title="SeekBar"></a>SeekBar</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/AnderWeb/discreteSeekBar" target="_blank" rel="external">DiscreteSeekBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/discreteseekbar.gif" alt=""> <img src="/art/discreteseekbar2.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/ahmedrizwan/SeekBarCompat" target="_blank" rel="external">SeekBarCompat</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/seekbarcompat.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/rubensousa/PreviewSeekBar" target="_blank" rel="external">PreviewSeekBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/PreviewSeekBar.gif" alt=""></td>
</tr>
</tbody>
</table>
<h1 id="Progress"><a href="#Progress" class="headerlink" title="Progress"></a>Progress</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/castorflex/SmoothProgressBar" target="_blank" rel="external">SmoothProgressBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/SmoothProgressBar.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/NumberProgressBar" target="_blank" rel="external">NumberProgressBar</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/NumberProgressBar.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/lzyzsd/CircleProgress" target="_blank" rel="external">CircleProgress</a></td>
<td>UnKnown</td>
<td><img src="/art/CircleProgress.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/mrwonderman/android-square-progressbar" target="_blank" rel="external">android-square-progressbar</a></td>
<td>UnKnown</td>
<td><img src="/art/android-square-progressbar.png" width="49%"> <img src="/art/android-square-progressbar2.png" width="49%"> <img src="/art/android-square-progressbar3.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/jpardogo/GoogleProgressBar" target="_blank" rel="external">GoogleProgressBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/GoogleProgressBar.gif" width="32%"> <img src="/art/GoogleProgressBar2.gif" width="32%"> <img src="/art/GoogleProgressBar3.gif" width="32%"></td>
</tr>
<tr>
<td><a href="https://github.com/akexorcist/Android-RoundCornerProgressBar" target="_blank" rel="external">Android-RoundCornerProgressBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Android-RoundCornerProgressBar.png" width="100%"> <img src="/art/Android-RoundCornerProgressBar2.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/Tibolte/ElasticDownload" target="_blank" rel="external">ElasticDownload</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ElasticDownload.gif" width="49%"> <img src="/art/ElasticDownload2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/JorgeCastilloPrz/FABProgressCircle" target="_blank" rel="external">FABProgressCircle</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FABProgressCircle.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/yankai-victor/Loading" target="_blank" rel="external">Loading</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Loading.gif" width="49%"> <img src="/art/Loading2.gif" width="49%"> <img src="/art/Loading3.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/jlmd/AnimatedCircleLoadingView" target="_blank" rel="external">Animated Circle Loading View</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AnimatedCircleLoadingView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/JorgeCastilloPrz/AndroidFillableLoaders" target="_blank" rel="external">AndroidFillableLoaders</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AndroidFillableLoaders.gif" width="49%"> <img src="/art/AndroidFillableLoaders2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/d-max/spots-dialog" target="_blank" rel="external">spots-dialog</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/spots_dialog.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/81813780/AVLoadingIndicatorView" target="_blank" rel="external">AVLoadingIndicatorView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/AVLoadingIndicatorView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/EyalBira/loading-dots" target="_blank" rel="external">LoadingDots</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/loading-dots.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Shinelw/ColorArcProgressBar" target="_blank" rel="external">ColorArcProgerssBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Android-ColorArcProgressBar.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/GIGAMOLE/ArcProgressStackView" target="_blank" rel="external">ArcProgressStackView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ArcProgressStackView.gif" width="49%"> <img src="/art/ArcProgressStackView2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/tangqi92/WaveLoadingView" target="_blank" rel="external">WaveLoadingView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/WaveLoadingView.jpg" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Rogero0o/CatLoadingView" target="_blank" rel="external">CatLoadingView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/CatLoadingView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/race604/WaveLoading" target="_blank" rel="external">WaveLoading</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/race604-WaveLoading.gif" width="60%"></td>
</tr>
</tbody>
</table>
<h1 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/oguzbilgener/CircularFloatingActionMenu" target="_blank" rel="external">CircularFloatingActionMenu</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/CircularFloatingActionMenu.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/SpecialCyCi/AndroidResideMenu" target="_blank" rel="external">AndroidResideMenu</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/AndroidResideMenu.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/dkmeteor/Folder-ResideMenu" target="_blank" rel="external">Folder-ResideMenu</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Folder-ResideMenu.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Yalantis/Side-Menu.Android" target="_blank" rel="external">Side-Menu.Android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Side-Menu.Android.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/Yalantis/Context-Menu.Android" target="_blank" rel="external">Context-Menu.Android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Context-Menu.Android.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/Yalantis/GuillotineMenu-Android" target="_blank" rel="external">GuillotineMenu-Android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/GuillotineMenu-Android.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/xmuSistone/android-snake-menu" target="_blank" rel="external">android-snake-menu</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-snake-menu.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Nightonke/BoomMenu" target="_blank" rel="external">BoomMenu</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/BoomMenu.gif" width="49%"> <img src="/art/BoomMenu2.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="ActionBar"><a href="#ActionBar" class="headerlink" title="ActionBar"></a>ActionBar</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/ManuelPeinado/FadingActionBar" target="_blank" rel="external">FadingActionBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FadingActionBar.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/ManuelPeinado/GlassActionBar" target="_blank" rel="external">GlassActionBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/GlassActionBar.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/flavienlaurent/NotBoringActionBar" target="_blank" rel="external">NotBoringActionBar</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/NotBoringActionBar.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/orhanobut/dialogplus" target="_blank" rel="external">DialogPlus</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/DialogPlus.png" width="30%"> <img src="/art/DialogPlus2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/pedant/sweet-alert-dialog" target="_blank" rel="external">Sweet Alert</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/swalert_change_type.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/H07000223/FlycoDialog_Master" target="_blank" rel="external">FlycoDialog-Matser</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/FlycoDialog-Matser.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/roomorama/Caldroid" target="_blank" rel="external">Caldroid</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/Caldroid.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/square/android-times-square" target="_blank" rel="external">android-times-square</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-times-square.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/romannurik/Android-MonthCalendarWidget" target="_blank" rel="external">Android-MonthCalendarWidget</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Android-MonthCalendarWidget.png" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/code-troopers/android-betterpickers" target="_blank" rel="external">android-betterpickers</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-betterpickers.png" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/alamkanak/Android-Week-View" target="_blank" rel="external">Android-Week-View</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Android-Week-View.png" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/NLMartian/SilkCal" target="_blank" rel="external">SilkCal</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/SilkCat.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/vikramkakkar/SublimePicker" target="_blank" rel="external">SublimePicker</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/sublimePicker_date.png" width="49%">  <img src="/art/sublimePicker_time.png" width="49%"> <img src="/art/sublimePicker_repeat.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/wdullaer/MaterialDateTimePicker" target="_blank" rel="external">MaterialDateTimePicker</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MaterialDateTimePicker_date.png" width="49%">  <img src="/art/MaterialDateTimePicker_time.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/SundeepK/CompactCalendarView" target="_blank" rel="external">CompactCalendarView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/compact-calendar-demo.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h1 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/blackfizz/EazeGraph" target="_blank" rel="external">EazeGraph</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/EazeGraph.png" width="49%"> <img src="/art/EazeGraph2.png" width="49%"> <img src="/art/EazeGraph3.png" width="49%"> <img src="/art/EazeGraph4.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/jjoe64/GraphView" target="_blank" rel="external">GraphView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/graphview-zooming.gif" width="65%"> <img src="/art/graphview-anim.gif" width="65%"></td>
</tr>
<tr>
<td><a href="https://github.com/lecho/hellocharts-android" target="_blank" rel="external">hellocharts-android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/hellocharts-android.gif" width="49%"> <img src="/art/hellocharts-android2.png" width="49%"> <img src="/art/hellocharts-android3.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/PhilJay/MPAndroidChart" target="_blank" rel="external">MPAndroidChart</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/MPAndroidChart.png" width="49%"> <img src="/art/MPAndroidChart2.png" width="49%"> <img src="/art/MPAndroidChart3.png" width="49%"> <img src="/art/MPAndroidChart4.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/diogobernardino/WilliamChart" target="_blank" rel="external">WilliamChart</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/williamchart_line.png" width="65%"> <img src="/art/williamchart_bar.png" width="65%"></td>
</tr>
</tbody>
</table>
<h1 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="external">AndroidViewAnimations</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/androidviewanimations.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/nhaarman/ListViewAnimations" target="_blank" rel="external">ListViewAnimations</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ListViewAnimations.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/AndroidImageSlider" target="_blank" rel="external">AndroidImageSlider</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/AndroidImageSlider.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/andkulikov/transitions-everywhere" target="_blank" rel="external">transitions-everywhere</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/transitions-everywhere.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/skyfishjy/android-ripple-background" target="_blank" rel="external">Android Ripple Background</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/android-ripple-background.gif" width="49%"> <img src="/art/android-ripple-background2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/openaphid/android-flip" target="_blank" rel="external">android-flip</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/android-flip.gif" width="49%"> <img src="/art/android-flip2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/DesarrolloAntonio/FragmentTransactionExtended" target="_blank" rel="external">FragmentTransactionExtended</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/FragmentTransactionExtended.gif" width="49%"> <img src="/art/FragmentTransactionExtended2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/flavioarfaria/KenBurnsView" target="_blank" rel="external">KenBurnsView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/KenBurnsView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/facebook/rebound" target="_blank" rel="external">rebound</a></td>
<td><a href="http://opensource.org/licenses/BSD-2-Clause" target="_blank" rel="external">BSD 2 License</a></td>
<td><a href="http://facebook.github.io/rebound/" target="_blank" rel="external">http://facebook.github.io/rebound/</a></td>
</tr>
<tr>
<td><a href="https://github.com/sakebook/Reachability" target="_blank" rel="external">Reachability</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Reachability.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/AnimationEasingFunctions" target="_blank" rel="external">AnimationEasingFunctions</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/AnimationEasingFunctions.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/2359media/EasyAndroidAnimations" target="_blank" rel="external">EasyAndroidAnimations</a></td>
<td>UnKnown</td>
<td><img src="/art/EasyAndroidAnimations.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/geftimov/android-pathview" target="_blank" rel="external">android-pathview</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-pathview.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/sephiroth74/ViewRevealAnimator" target="_blank" rel="external">ViewRevealAnimator</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ViewRevealAnimator.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/asyl/ArcAnimator" target="_blank" rel="external">ArcAnimator</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/ArcAnimator.gif" width="49%"> <img src="/art/ArcAnimator2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/kongnanlive/SearchMenuAnim" target="_blank" rel="external">SearchMenuAnim</a></td>
<td>UnKnown</td>
<td><img src="/art/SearchMenuAnim.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/cdflynn/crossview" target="_blank" rel="external">Cross View</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/crossview.gif" width="49%"> <img src="/art/crossview2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Nightonke/WoWoViewPager" target="_blank" rel="external">WoWoViewPager</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/WoWoAppIntroExample.gif" width="49%"> <img src="/art/WoWoCVExample.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Lottie for Android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/lottie-android.gif" width="100%"> <img src="/art/lottie-android2.gif" width="100%"></td>
</tr>
</tbody>
</table>
<h1 id="Parallax"><a href="#Parallax" class="headerlink" title="Parallax"></a>Parallax</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/Narfss/ParallaxEverywhere" target="_blank" rel="external">ParallaxEverywhere</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/parallax-everywhere.gif" alt=""></td>
</tr>
</tbody>
</table>
<h1 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/Manabu-GT/EtsyBlur" target="_blank" rel="external">EtsyBlur</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/EtsyBlur.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/tvbarthel/BlurDialogFragment" target="_blank" rel="external">BlurDialogFragment</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/BlurDialogFragment.png" width="49%"> <img src="/art/BlurDialogFragment2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/faradaj/BlurBehind" target="_blank" rel="external">BlurBehind</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/BlurBehind.png" width="49%"> <img src="/art/BlurBehind2.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/kikoso/android-stackblur" target="_blank" rel="external">Android StackBlur</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-stackblur.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/AndroidAlliance/EdgeEffectOverride" target="_blank" rel="external">EdgeEffectOverride</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/EdgeEffectOverride.jpeg" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/tyrantgit/ExplosionField" target="_blank" rel="external">ExplosionField</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/ExplosionField.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/zhanyongsheng/BrokenView" target="_blank" rel="external">BrokenView</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/BrokenView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/manolovn/trianglify" target="_blank" rel="external">Trianglify</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Trianglify.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/ChadCSong/ShineButton" target="_blank" rel="external">ShineButton</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/ShineButton.gif" width="100%"></td>
</tr>
</tbody>
</table>
<h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><table>
<thead>
<tr>
<th>Name</th>
<th>License</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/Diolor/Swipecards" target="_blank" rel="external">Swipecards</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Swipecards.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/Bearded-Hen/Android-Bootstrap" target="_blank" rel="external">Android-Bootstrap</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/Android-Bootstrap.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/JoanZapata/android-pdfview" target="_blank" rel="external">Android PDFView</a></td>
<td><a href="http://opensource.org/licenses/GPL-3.0" target="_blank" rel="external">GPL V3</a></td>
<td><img src="/art/android-pdfview.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/lucasr/dspec" target="_blank" rel="external">Dspec</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/dspec.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/OrangeGangsters/LolliPin" target="_blank" rel="external">LolliPin</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/LolliPin.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/PaNaVTEC/DrawableView" target="_blank" rel="external">DrawableView</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/DrawableView.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/h6ah4i/android-materialshadowninepatch" target="_blank" rel="external">Material Shadow 9-Patch</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-materialshadowninepatch.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/championswimmer/SimpleFingerGestures_Android_Library" target="_blank" rel="external">SimpleFingerGestures</a></td>
<td><a href="https://github.com/championswimmer/SimpleFingerGestures_Android_Library/blob/master/LICENSE" target="_blank" rel="external">Apache License v2</a></td>
<td><img src="/art/SimpleFingerGestures1.gif" width="49%"> <img src="/art/SimpleFingerGestures2.gif" width="49%"> <img src="/art/SimpleFingerGestures3.gif" width="49%"> <img src="/art/SimpleFingerGestures4.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/chemouna/decor" target="_blank" rel="external">Decor</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/decor.png" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/tyorikan/voice-recording-visualizer" target="_blank" rel="external">Voice Recording Visualizer</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><a href="https://www.youtube.com/watch?v=fJTl1bgQ3j4" target="_blank" rel="external"><img src="http://img.youtube.com/vi/fJTl1bgQ3j4/0.jpg" alt="IMAGE demo"></a></td>
</tr>
<tr>
<td><a href="https://github.com/vsvankhede/easyfonts" target="_blank" rel="external">EasyFonts</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/easyfonts.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/klinker41/android-slidingactivity" target="_blank" rel="external">Android Sliding Activity Library</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/android-slidingactivity.gif" width="49%"> <img src="/art/android-slidingactivity2.gif" width="49%"></td>
</tr>
<tr>
<td><a href="https://github.com/txusballesteros/snake" target="_blank" rel="external">Snake View</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/snake.gif" width="60%"></td>
</tr>
<tr>
<td><a href="https://github.com/yayaa/Rotatable" target="_blank" rel="external">Rotatable</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
<td><img src="/art/Rotatable.gif" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/laobie/StatusBarUtil" target="_blank" rel="external">StatusBarUtil</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/StatusBarUtil.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/Yalantis/Horizon" target="_blank" rel="external">Horizon - Simple visual equaliser for Android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/Horizon.png" width="100%"></td>
</tr>
<tr>
<td><a href="https://github.com/DanielMartinus/Stepper-Touch" target="_blank" rel="external">Stepper Touch</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
<td><img src="/art/StepperTouch.gif" width="49%"></td>
</tr>
</tbody>
</table>
<h2 id="Other-lists"><a href="#Other-lists" class="headerlink" title="Other lists"></a>Other lists</h2><ul>
<li><em>Looking for Core Library? Check out</em> <a href="https://github.com/wasabeef/awesome-android-libraries" target="_blank" rel="external">wasabeef/awesome-android-libraries</a>.</li>
<li><em>Looking for iOS? Check out</em> <a href="https://github.com/cjwirth/awesome-ios-ui" target="_blank" rel="external">cjwirth/awesome-ios-ui</a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome-android-ui</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/1131548cf666e1150ebd2a52f44776d539f06324/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f6d61737465722f6d656469612f6c6f676f2e737667&quot; alt=&quot;Awesome&quot;&gt;&lt;/p&gt;
&lt;p&gt;A curated list of awesome Android UI/UX libraries.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="UI" scheme="http://ipcreator.me/tags/UI/"/>
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
      <category term="UX" scheme="http://ipcreator.me/tags/UX/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Android Libraries Top 100</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Android/3rdLib/gitHub-android-libraries-top-100/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Android/3rdLib/gitHub-android-libraries-top-100/</id>
    <published>2017-03-30T14:24:06.000Z</published>
    <updated>2017-03-30T14:40:16.127Z</updated>
    
    <content type="html"><![CDATA[<p>本项目主要对目前 GitHub 上排名前 100 的 Android 开源库进行简单的介绍, 至于排名完全是根据 GitHub 搜索 Java 语言选择 (Best Match) 得到的结果, 然后过滤了跟 Android 不相关的项目, 所以排名并不具备任何官方效力, 仅供参考学习, 方便初学者快速了解当前一些流行的 Android 开源库.</p>
<a id="more"></a>
<h1 id="GitHub-Android-Libraries-Top-100-简介-1"><a href="#GitHub-Android-Libraries-Top-100-简介-1" class="headerlink" title="GitHub Android Libraries Top 100 简介[1]"></a>GitHub Android Libraries Top 100 简介<sup>[1]<sup></sup></sup></h1><blockquote>
<p>iOS 版本的在此: <a href="https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md" target="_blank" rel="external">https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md</a></p>
</blockquote>
<table>
<thead>
<tr>
<th>项目名称</th>
<th>项目简介</th>
</tr>
</thead>
<tbody>
<tr>
<td>1. <a href="https://github.com/facebook/react-native" target="_blank" rel="external">react-native</a></td>
<td>这个是 Facebook 在 React.js Conf 2015 大会上推出的基于 JavaScript 的开源框架 React Native, 该框架结合了 Web 应用和 Native 应用的优势, 可以使用 JavaScript 来开发 iOS 和 Android 原生应用</td>
</tr>
<tr>
<td>2.<a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">Android-Universal-Image-Loader</a></td>
<td>ImageLoader 是最早开源的 Android 图片缓存库, 强大的缓存机制, 早期被广泛 Android 应用使用, 至今仍然有很多 Android 开发者在使用</td>
</tr>
<tr>
<td>3. <a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a></td>
<td>RxJava 是一个在 Java VM 上使用可观测的序列来组成异步的, 基于事件的程序的库, 简单来说它就是一个实现异步操作的库, RxJava 的优点在于一个词 “简洁”, 使用它就算你程序逻辑有多么复杂, 它依然能够保持简洁易懂</td>
</tr>
<tr>
<td>4. <a href="https://github.com/square/retrofit" target="_blank" rel="external">retrofit</a></td>
<td>Retrofit 是 Square 公司出品的 HTTP 请求库, 同时是 Square 是最早开源项目之一, Retrofit 是目前 Android 最流行的 Http Client 库之一, 目前版本是 Retrofit2.0 Beta4, 越来越多 Android 开发者开始使用这个请求库了</td>
</tr>
<tr>
<td>5. <a href="https://github.com/square/okhttp" target="_blank" rel="external">okhttp</a></td>
<td>OkHttp 是 Square 公司出品的 HTTP 另一个请求库, Google 不推荐人们使用 HttpClient, 可是 HttpURLConnection 实在是太难用了, 因此很多人使用了 OkHttp 来解决这问题, 据说 Android4.4 的源码中可以看到 HttpURLConnection 已经替换成 OkHttp 实现呢</td>
</tr>
<tr>
<td>6. <a href="https://github.com/jfeinstein10/SlidingMenu" target="_blank" rel="external">SlidingMenu(不建议使用)</a></td>
<td>一个侧滑菜单开源库, 在 Google 自己原生态的侧滑菜单 NavigationDrawer 没有出现之前, 这个库就已经被广泛使用, 可是到现在这个库已经被放弃了</td>
</tr>
<tr>
<td>7. <a href="https://github.com/square/picasso" target="_blank" rel="external">picasso</a></td>
<td>Picasso 是 Square 公司出品的一款图片缓存库, 主导者是 JakeWharton 大神</td>
</tr>
<tr>
<td>8. <a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">android-best-practices</a></td>
<td>Android 开发最佳实践, 里面所介绍的经验都是来自于 Futurice 公司 Android 开发者, 介绍内容有 Android 开发规范, 架构, 布局技巧, 以及使用一些有助于快速开发相关工具等等, 非常适合新手去学习</td>
</tr>
<tr>
<td>9. <a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a></td>
<td>EventBus 是 Android 事件管理总线, 使用它可以替带 Android BroadCast, BroadCastReceiver, Handler 在 Activity, Fragment, Service, 线程之间传递消息, 大大简化了事件传递逻辑</td>
</tr>
<tr>
<td>10. <a href="https://github.com/loopj/android-async-http" target="_blank" rel="external">android-async-http</a></td>
<td>Android-Async-Http 是 Android 一款老牌异步请求库, 专门对 Android 在 Apache 的 HttpClient 基础上构建的异步 http 连接, 该库有很多特征, 例如: 库的 size 小, 支持文件上传不需使用第三方库支持, 内部使用线程池来处理并发, 等等</td>
</tr>
<tr>
<td>11. <a href="https://github.com/facebook/fresco" target="_blank" rel="external">fresco</a></td>
<td>Fresco 是 FaceBook 公司出品的一款图片缓存库, Fresco 是一个强大的图片加载组件, 支持加载 Gif 图和 WebP 格式, 支持 Android2.3(API level 9) 及其以上系统, Fresco 中设计了 Image pipeline 和 Drawees 两个模块各施其职, 使得图片完美加载出来, 想知道更多 image pipeline 和 Drawees 有关于它的特性, 可以到它<a href="http://fresco-cn.org/" target="_blank" rel="external">官方平台</a>看介绍</td>
</tr>
<tr>
<td>12. <a href="https://github.com/zxing/zxing" target="_blank" rel="external">zxing</a></td>
<td>ZXing 是二维码领域中名气最大的开源项目, 它提供了多个平台的二维码/条形码扫描解决方案, 拥有扫描快, 识别率高, 使用简单等特点</td>
</tr>
<tr>
<td>13. <a href="https://github.com/square/leakcanary" target="_blank" rel="external">leakcanary</a></td>
<td>LeakCanary 是 Square 公司出的一款检测内存泄露工具, 该工具能帮助你在开发阶段方便的检测出内存泄露的问题, 使用起来非常简单方便</td>
</tr>
<tr>
<td>14. <a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">butterknife</a></td>
<td>由 JakeWharton 大神开发出来的, ButterKnife 是 View 注入框架, 使用它为了简写很多 findViewById 代码, 同时还支持 View 的一些事件处理函数</td>
</tr>
<tr>
<td>15. <a href="https://github.com/PhilJay/MPAndroidChart" target="_blank" rel="external">MPAndroidChart</a></td>
<td>MPAndroidChart 是一款强大的 Android 图表库, 支持各种各样图表显示, 能想到的图表样式这里几乎都有, 图表还支持选择, 拖放和缩放动画效果</td>
</tr>
<tr>
<td>16. <a href="https://github.com/JakeWharton/ActionBarSherlock" target="_blank" rel="external">ActionBarSherlock (不建议使用)</a></td>
<td>ActionBarSherlock 这个库是 JakeWharton 大神开发出来支持 Android3.0 以下版本的, 后来慢慢的 Google 也提供了 AppCompat 库来支持 Android3.0 以下版本使用 ActionBar, 因此作者不建议我们再使用这个库了</td>
</tr>
<tr>
<td>17. <a href="https://github.com/excilys/androidannotations" target="_blank" rel="external">androidannotations</a></td>
<td>AndroidAnnotations 是一个能够让你快速进行 Android 开发的开源框架, 它能让你专注于真正重要的地方, 使代码更加精简, 使项目更加容易维护, 它的目标就是 “Fast Android Development.Easy maintainance”</td>
</tr>
<tr>
<td>18. <a href="https://github.com/JakeWharton/ViewPagerIndicator" target="_blank" rel="external">ViewPagerIndicator</a></td>
<td>由 JakeWharton 大神开发出来的一个 ViewPager 指示器, 使用起来简单方便, 可高度定制, 开发出各种各样动画效果</td>
</tr>
<tr>
<td>19. <a href="https://github.com/bumptech/glide" target="_blank" rel="external">glide</a></td>
<td>Glide 是 Google 员工的开源项目, 广泛应用于 Google 一些 App 上, 在2014年 Google I/O 大会上被推荐使用, Glide 和 Picasso 被人拿来比较研究过, Glide 与 Picasso 有 90% 的相似度, 但在一些细节上还是有点区别的, 各有各优缺点看君选择</td>
</tr>
<tr>
<td>20. <a href="https://github.com/HannahMitt/HomeMirror" target="_blank" rel="external">HomeMirror</a></td>
<td>开发者是由一名程序媛 Hannah Mittelstaedt , HomeMirror 是一款 Android 镜子应用, 目前它能实现日期, 时间, 天气, 生日信息, 事件提醒器, 骑车天气的推荐, 股票信息, XKCD 漫画网站的新帖等等</td>
</tr>
<tr>
<td>21. <a href="https://github.com/chrisbanes/Android-PullToRefresh" target="_blank" rel="external">Android-PullToRefresh(不建议使用)</a></td>
<td>一个强大的拉动刷新开源项目, 支持各种控件下拉刷新, ListView, ViewPager, WebView, ExpandableListView, GridView, ScrollView, Horizontal ScrollView, Fragment 上下左右拉动刷新, 不过现在这个项目已经停止维护更新了, 推荐使用 <a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">Android-Ultra-Pull-To-Refresh</a></td>
</tr>
<tr>
<td>22. <a href="https://github.com/navasmdc/MaterialDesignLibrary" target="_blank" rel="external">MaterialDesignLibrary</a></td>
<td>这个库控件都是遵循了 Google Material Design 设计规范开发出来, 例如有: Flat Button, Rectangle Button, CheckBox, Switch, Progress bar circular indeterminate 等等</td>
</tr>
<tr>
<td>23. <a href="https://github.com/chrisbanes/PhotoView" target="_blank" rel="external">PhotoView</a></td>
<td>PhotoView 是 ImageView 的子类, 支持所有 ImageView 的源生行为, 例如: 支持 Pinch 手势自由缩放, 支持双击放大/还原, 支持平滑滚动等等, 并且非常方便的与 ImageLoader/Picasso 之类的网络图片读取库集成使用, 还方便的与 ViewPager 等同样支持滑动手势的控件集成</td>
</tr>
<tr>
<td>24. <a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">RxAndroid</a></td>
<td>由 JakeWharton 大神主导开发的项目, RxAndroid 是 RxJava 的一个针对 Android 平台的扩展, 主要用于 Android 开发</td>
</tr>
<tr>
<td>25. <a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="external">material-dialogs</a></td>
<td>Material Dialogs 是一个可高度定制易用, 符合 Material Design 风格的 Dialogs, 兼容 Android API8 以上版本, 个人使用感觉它完全可替代 Android 原生那个, 比原生那个更加简单易用</td>
</tr>
<tr>
<td>26.<a href="https://github.com/ksoichiro/Android-ObservableScrollView" target="_blank" rel="external">Android-ObservableScrollView</a></td>
<td>ObservableScrollView 是一款用于在滚动视图中观测滚动事件的 Android 库, 它能够轻而易举地与 Android 5.0 Lollipop 引进的工具栏 (Toolbar) 进行交互, 还可以帮助开发者实现拥有 Material Design 应用视觉体验的界面外观, 支持ListView, ScrollView, WebView, RecyclerView, GridView组件</td>
</tr>
<tr>
<td>27. <a href="https://github.com/Bearded-Hen/Android-Bootstrap" target="_blank" rel="external">Android-Bootstrap</a></td>
<td>Android 版的 Bootstrap, 利用这个库能够实现很多 Bootstrap 样式风格, 之前有学过 Html 的人就知道 Bootstrap 是什么玩意啦</td>
</tr>
<tr>
<td>28. <a href="https://github.com/daimajia/AndroidSwipeLayout" target="_blank" rel="external">AndroidSwipeLayout</a></td>
<td>开发者是代码家, AndroidSwipeLayout 是一个支持ListView, GridView, ViewGroup等等左右上下滑动出操作菜单, 类似 qq 消息列表向左滑动显示出多某条信息的操作菜单</td>
</tr>
<tr>
<td>29. <a href="https://github.com/square/dagger" target="_blank" rel="external">dagger</a></td>
<td>Dagger 是 Square 公司出品的一个针对 Android 和 Java 的快速依赖注入器, 能够有效减少你敲代码量</td>
</tr>
<tr>
<td>30. <a href="https://github.com/nhaarman/ListViewAnimations" target="_blank" rel="external">ListViewAnimations</a></td>
<td>一个轻轻松松给 Android ListView 添加动画效果的库, 支持的动画有: Alpha, SwingRightIn, SwingLeftIn, SwingBottomIn, SwingRightIn and ScaleIn等等, 使用它能很容易就实现帅爆的效果</td>
</tr>
<tr>
<td>31. <a href="https://github.com/astuetz/PagerSlidingTabStrip" target="_blank" rel="external">PagerSlidingTabStrip(不建议使用)</a></td>
<td>PagerSlidingTabStrip 是一个给 Android ViewPager添加上 ViewPager 滑动指示器, 从 GitHub 上面看, 这个库似乎没有人在维护了, 因此不建议使用, 可使用 <a href="https://github.com/ogaclejapan/SmartTabLayout" target="_blank" rel="external">SmartTabLayout</a> 来代替</td>
</tr>
<tr>
<td>32. <a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="external">AndroidViewAnimations</a></td>
<td>开发者是代码家, 这个库实现很多很酷炫的 Android 动画, 动画效果是借鉴 Animate.css 来实现的, 非常酷, 而且这个使用起来也是非常简单</td>
</tr>
<tr>
<td>33. <a href="https://github.com/umano/AndroidSlidingUpPanel" target="_blank" rel="external">AndroidSlidingUpPanel</a></td>
<td>AndroidSlidingUpPanel 是一个上拉面板, 就是向上滑动的时候往上飞出一个显示面板控件, 该库效果在 Google Music, Google Maps and Rdio等 App 应用到</td>
</tr>
<tr>
<td>34. <a href="https://github.com/mikepenz/MaterialDrawer" target="_blank" rel="external">MaterialDrawer</a></td>
<td>MaterialDrawer 是一个类似 Google 官方 NavigationView 侧滑显示控件, 个人认为 NavigationView 并没有 MaterialDrawer 实用, 因为 NavigationView 自由度不是很好, 很多都写死了不可以自由定义布局, 而 MaterialDrawer 能够实现跟 NavigationView 一样的效果, 同时还支持自定义效果, 自由度非常高</td>
</tr>
<tr>
<td>35. <a href="https://github.com/lgvalle/Material-Animations" target="_blank" rel="external">Material-Animations</a></td>
<td>Material-Animations 是一个很好过渡动画库, 可以应用于 Activity 与 Activity 之间的跳转, Fragment 与 Fragment 之间的跳转, 以及各个 View 变化前后的过渡动画</td>
</tr>
<tr>
<td>36. <a href="https://github.com/florent37/MaterialViewPager" target="_blank" rel="external">MaterialViewPager</a></td>
<td>一个简单易用 Material Design 风格的 ViewPager 库</td>
</tr>
<tr>
<td>37. <a href="https://github.com/koush/ion" target="_blank" rel="external">ion</a></td>
<td>ion 是一个让 Android 的网络操作变得极其简单, 支持异步获取和处理JSON, 支持 Android 文件下载 (同时支持下载进度条绑定), 支持安全链接和代理</td>
</tr>
<tr>
<td>38. <a href="https://github.com/facebook/stetho" target="_blank" rel="external">stetho</a></td>
<td>Stetho是 Facebook 出品的一个强大的 Android 调试工具,使用该工具你可以在 Chrome Developer Tools查看App的布局, 网络请求(仅限使用Volley, okhttp的网络请求库), sqlite, preference, 一切都是可视化的操作,无须自己在去使用adb, 也不需要root你的设备</td>
</tr>
<tr>
<td>39. <a href="https://github.com/alibaba/fastjson" target="_blank" rel="external">fastjson</a></td>
<td>Fastjson 是一个 Java 语言编写的高性能功能完善的 JSON 库. 它采用一种“假定有序快速匹配”的算法, 把 JSON Parse的性能提升到极致, 是目前Java语言中最快的JSON库. Fastjson接口简单易用, 已经被广泛使用在缓存序列化, 协议交互, Web输出, Android客户端等多种应用场景</td>
</tr>
<tr>
<td>40. <a href="https://github.com/gabrielemariotti/cardslib" target="_blank" rel="external">cardslib (不建议使用)</a></td>
<td>Cardslib 是早期由 Gabriele Mariotti 开发的一个为开发者方便实现各种 Card UI 的 Android 开源代码库, 后来 Google 官方提供自己封装了 CardView 在 v7 包下, 使用 Google 官方的可以完全替代了这个库, 因此这个也被弃用了</td>
</tr>
<tr>
<td>41. <a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">Android-Ultra-Pull-To-Refresh</a></td>
<td>开发者是廖祜秋, 这个是一个非常强大的下拉刷新库, 继承 ViewGroup 可以包含任何 View, 功能甚至比 SwipeRefreshLayout 强大, 使用起来也非常容易, 还可以自由定制自己的 UI 样式</td>
</tr>
<tr>
<td>42. <a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">greenDAO</a></td>
<td>greenDAO 是一个可以帮助 Android 开发者快速将 Java 对象映射到 SQLite 数据库的表单中的 ORM解决方案, 通过使用一个简单的面向对象 API, 开发者可以对 Java 对象进行存储, 更新, 删除和查询, greenDAO 相对 OrmLite, AndrORM 这两个 ORM 开源库, 性能是最高的</td>
</tr>
<tr>
<td>43. <a href="https://github.com/etsy/AndroidStaggeredGrid" target="_blank" rel="external">AndroidStaggeredGrid</a></td>
<td>AndroidStaggeredGrid 是一个支持多列并且每一行的 item 大小不一, 交错排列的 GridView, 就是实现瀑布流样式效果, 目前该库已经被弃用了, 开发者建议我们使用 Google 官方控件 RecyleView 中的 StaggeredGridLayoutManager 布局来实现瀑布流效果</td>
</tr>
<tr>
<td>44. <a href="https://github.com/square/otto" target="_blank" rel="external">otto</a></td>
<td>Otto 是 Square 公司出的一个事件库 (pub/sub 模式), 用来简化应用程序组件之间的通讯, otto 修改自 Google 的 Guava 库, 专门为 Android 平台进行了优化, 与上面介绍的 EventBus 相比, 两个库各有各的优点, 完全取决于我们自己项目的需求来选择它们哪一个</td>
</tr>
<tr>
<td>45. <a href="https://github.com/wyouflf/xUtils" target="_blank" rel="external">xUtils</a></td>
<td>xUtils 是一个快速开发框架, 里面包含 DbUtils, ViewUtils, HttpUtils, BitmapUtils 四大模块, 可用于快速开发, 支持大文件上传, 拥有更加灵活的 ORM, 最低兼容 Android 2.2</td>
</tr>
<tr>
<td>46. <a href="https://github.com/realm/realm-java" target="_blank" rel="external">realm-java</a></td>
<td>Realm 一个轻量的 Android 版本的数据存储库, 比 Android 原生系统的 SQLite 更加简洁快速对数据进行操作</td>
</tr>
<tr>
<td>47.<a href="https://github.com/android10/Android-CleanArchitecture" target="_blank" rel="external">Android-CleanArchitecture</a></td>
<td>CleanArchitecture 是一个非常典型使用 MVP 架构的项目, 大家如果还没有理解 MVP 架构的可以看看这个项目</td>
</tr>
<tr>
<td>48. <a href="https://github.com/emilsjolander/StickyListHeaders" target="_blank" rel="external">StickyListHeaders</a></td>
<td>StickyListHeaders 是一个实现能够固定在屏幕顶部的ListView Section Header库, 就是当前 section 的 header 固定在屏幕顶部, 当滑动到其他 section 时, 其他 section 的 header 会代替之前的 section 的 header, 固定到屏幕顶部, 类似于 Android4.0 的手机通讯录的效果</td>
</tr>
<tr>
<td>49. <a href="https://github.com/PaoloRotolo/AppIntro" target="_blank" rel="external">AppIntro</a></td>
<td>AppIntro 是一个让人轻松快速搭建漂亮酷炫的引导页库</td>
</tr>
<tr>
<td>50. <a href="https://github.com/pardom/ActiveAndroid" target="_blank" rel="external">ActiveAndroid</a></td>
<td>ActiveAndroid 是采用Rails中的 <a href="http://en.wikipedia.org/wiki/Object-relational_mapping" target="_blank" rel="external">Active Record</a>架构模式设计的适用于 Android 平台的轻量级 ORM 架构, 几乎可以不用写任何 SQL 代码实现快速开发</td>
</tr>
<tr>
<td>51. <a href="https://github.com/mcxiaoke/android-volley" target="_blank" rel="external">android-volley</a></td>
<td>Volley 是谷歌官方开发团队在 2013 年 Google I/O 大会推出的一个新的网络通信框架, 这个框架把 AsyncHttpClient 和 Universal-Image-Loader 的优点集于了一身,既可以像AsyncHttpClient 一样非常简单地进行 HTTP 通信,也可以像 Universal-Image-Loader 一样轻松加载网络上的图片, 这个库并不是官方的, 只是托管同步在 Maven,  官方只提供的 Jar 包</td>
</tr>
<tr>
<td>52. <a href="https://github.com/lucasr/twoway-view" target="_blank" rel="external">twoway-view</a></td>
<td>TwoWayView 是简化 RecyclerView 开发的一个库, 可以在其 Base LayoutManager 基础上构建各种各样的布局, 该库内置了几个常用布局 List, Grid, Staggered Grid,Spannable Grid</td>
</tr>
<tr>
<td>53. <a href="https://github.com/amlcurran/ShowcaseView" target="_blank" rel="external">ShowcaseView</a></td>
<td>ShowcaseView 是一个非常适合用于对用户进行第一次使用进行指导的库,使用起来非常简单还可以自定义样式</td>
</tr>
<tr>
<td>54. <a href="https://github.com/chrisjenx/Calligraphy" target="_blank" rel="external">Calligraphy</a></td>
<td>Calligraphy 是一个用来简化 Android 应用使用自定义字体的类库, 该类库会自动查找应用中的 TextView 并设置其使用的字体</td>
</tr>
<tr>
<td>55. <a href="https://github.com/JakeWharton/NineOldAndroids" target="_blank" rel="external">NineOldAndroids</a></td>
<td>NineOldAndroids 由 JakeWharton 大神开发的一个向下兼容的动画库, 主要是使低于API 11的系统也能够使用 View 的属性动画, 不过现在 JakeWharton 大神已经不推荐使用该库, 而是推荐我们使用官方封装在 Support 库里面的动画</td>
</tr>
<tr>
<td>56. <a href="https://github.com/futuresimple/android-floating-action-button" target="_blank" rel="external">android-floating-action-button</a></td>
<td>FloatingActionButton 是一个悬浮操作按钮, 官方在 Support Design 包下也有封装一个类似这个库效果的 FloatingActionButton, 值得说明的是这个库是早在官方封装之前就存在的, 个人感觉这个库比官方那个更加好用</td>
</tr>
<tr>
<td>57. <a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="external">CircleImageView</a></td>
<td>CircleImageView 是一个轻松帮你实现圆形效果 ImageView 图片库, CircleImageView 是基于 ImageView 扩展出来, 因此它拥有 ImageView 控件所有属性, 简单易用值得你使用的库</td>
</tr>
<tr>
<td>58. <a href="https://github.com/rey5137/material" target="_blank" rel="external">material</a></td>
<td>Material 是将 Material Design 风格控件封装在该库当中, 目前封装有Progress, Button, Switch, Slider, Spinner, Text Field, TabPageIndicator, SnackBar, Dialog, BottomSheetDialog, Dynamic theme</td>
</tr>
<tr>
<td>59. <a href="https://github.com/chrisbanes/ActionBar-PullToRefresh" target="_blank" rel="external">ActionBar-PullToRefresh</a></td>
<td>ActionBar-PullToRefresh 是一个下拉刷新, 下拉刷新时在 ActionBar 出现加载中提示的库</td>
</tr>
<tr>
<td>60. <a href="https://github.com/makovkastar/FloatingActionButton" target="_blank" rel="external">FloatingActionButton</a></td>
<td>又一个悬浮操作按钮库, 该库添加支持监听滑滚动事件, 当向下滑时按钮隐藏, 向上滑时按钮显示, 还有动画效果, 支持监听 ListView, ScrollView, RecylerView</td>
</tr>
<tr>
<td>61. <a href="https://github.com/koush/AndroidAsync" target="_blank" rel="external">AndroidAsync</a></td>
<td>AndroidAsync 是一款基于 NIO 的低端 Android 异步 socket, http (client+server), websocket 和 socket.io 网络通信协议类库</td>
</tr>
<tr>
<td>62. <a href="https://github.com/facebook/rebound" target="_blank" rel="external">rebound</a></td>
<td>Rebound 是 Facebook 推出的一个弹性动画库, 可以让动画看起来真实自然, 像真实世界的物理运动, 带有力的效果, 使用的参数则是 Facebook 的 origami 中使用的</td>
</tr>
<tr>
<td>63. <a href="https://github.com/Trinea/android-common" target="_blank" rel="external">android-common</a></td>
<td>android-common-lib 是 Trinea 大神收集的一些开发通用的缓存, 公共 View 以及一些常用工具类</td>
</tr>
<tr>
<td>64. <a href="https://github.com/traex/RippleEffect" target="_blank" rel="external">RippleEffect</a></td>
<td>RippleEffect 是一个实现在 Android 任何组件点击出现 Material Design 的波纹效果, 向下兼容到 Android API9</td>
</tr>
<tr>
<td>65. <a href="https://github.com/castorflex/SmoothProgressBar" target="_blank" rel="external">SmoothProgressBar</a></td>
<td>SmoothProgressBar 是一个帮你的 App 方便实现可定制, 平滑动画的水平滚动进度条库</td>
</tr>
<tr>
<td>66. <a href="https://github.com/wasabeef/recyclerview-animators" target="_blank" rel="external">recyclerview-animators</a></td>
<td>RecyclerView Animators 是一个对 Recycler 控件的 Item 添加以及删除增加动画效果, 动画效果有Scale, Fade, Flip, Slide 里面各种各样效果</td>
</tr>
<tr>
<td>67. <a href="https://github.com/dmytrodanylyk/circular-progress-button" target="_blank" rel="external">circular-progress-button</a></td>
<td>一个带进度显示的 Button, 效果和动画做的都非常赞</td>
</tr>
<tr>
<td>68. <a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">DroidPlugin</a></td>
<td>DroidPlugin 是 360 手机助手在 Android 系统上实现了一种新的插件机制: 它可以在无需安装, 修改的情况下运行APK文件, 此机制对改进大型APP的架构, 实现多团队协作开发具有一定的好处</td>
</tr>
<tr>
<td>69. <a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">dynamic-load-apk</a></td>
<td>开发者是 singwhatiwanna(任玉刚), 是《Android 开发艺术探索》书籍的作者, 这个是作者联合另两位开发者啸(时之沙)和宋思宇花了几个月时间研究出来的 Apk 动态加载框架, 想了解更多关于这框架可到作者博客看 <a href="http://blog.csdn.net/singwhatiwanna/article/details/39937639" target="_blank" rel="external">这篇文章</a> 有详细介绍</td>
</tr>
<tr>
<td>70. <a href="https://github.com/google/ExoPlayer" target="_blank" rel="external">ExoPlayer</a></td>
<td>ExoPlayer 是Google 开发团队开源出来的一个媒体播放库, 比 Android 框架原生的 MediaPlayer 拥有更多优点支持动态的自适应流 HTTP(DASH) 和 平滑流, 支持高级的HLS特性, 支持自定义和扩治你的使用场景等等</td>
</tr>
<tr>
<td>71. <a href="https://github.com/keyboardsurfer/Crouton" target="_blank" rel="external">Crouton (不建议使用)</a></td>
<td>Crouton 是一个显示提示信息的显示工具类, 可以用来代替 Toast, 默认显示在窗口的顶部, 可以按队列一个接着一个显示, 不过该库已经被弃用, 不推荐使用</td>
</tr>
<tr>
<td>72. <a href="https://github.com/stephanenicolas/robospice" target="_blank" rel="external">robospice</a></td>
<td>RoboSpice 是一个使你建立异步的长时间的运行任务异常轻松的一个网络库，在网络请求，缓存支持，和提供开箱即用的 rest 请求方面尤为强大</td>
</tr>
<tr>
<td>73. <a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">hugo</a></td>
<td>Hugo 是 JakeWharton 大神推出的一个用于打印 Log, hugo 是基于注解被调用的, 引入相关依赖后, 在方法上加上 @DebugLog 即可输出 Log, 使用非常简单</td>
</tr>
<tr>
<td>74. <a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="external">async-http-client</a></td>
<td>AsyncHttpClient 是又一款 Android 异步请求库, 该库支持 WebSocket 协议, 使用起来也比较简单易用</td>
</tr>
<tr>
<td>75. <a href="https://github.com/cymcsg/UltimateRecyclerView" target="_blank" rel="external">UltimateRecyclerView</a></td>
<td>UltimateRecyclerView 是一个功能强大的 RecyclerView(advanced and flexible version of ListView), 包括了下拉刷新, 加载更多, 多种动画, 空数据提示, 拖动排序, 视差处理, 工具栏渐变, 滑动删除, 自定义floating button, 多种刷新效果, scrollbar, sticky header, 多 layout 支持等等元素, 而且使用起来跟 RecyclerView 一样的方便</td>
</tr>
<tr>
<td>76. <a href="https://github.com/rengwuxian/MaterialEditText" target="_blank" rel="external">MaterialEditText</a></td>
<td>MaterialEditText 是就职于 Flipboard 的员工 <a href="https://www.zhihu.com/people/rengwuxian" target="_blank" rel="external">扔物线</a> 开发的, 在 AppCompat v21 中也提供了 Material Design 的控件 EditText, 可是由于比较难用, 没有提供设置颜色的 Api, 于是就产生这个第三方库</td>
</tr>
<tr>
<td>77. <a href="https://github.com/Yalantis/Side-Menu.Android" target="_blank" rel="external">Side-Menu.Android</a></td>
<td>Side Menu 是 <a href="https://yalantis.com/" target="_blank" rel="external">Yalantis</a> 组织开源出来, 该组织因开源出一些动画很棒的开源库为大家所熟知该库是其中一个, 该库是提供翻页动画效果的侧边菜单, 动画体验超赞的</td>
</tr>
<tr>
<td>78. <a href="https://github.com/bauerca/drag-sort-listview" target="_blank" rel="external">drag-sort-listview</a></td>
<td>DragSortListView 是一个可以实现拖动排序, 滑动删除的 listview 控件, 注意的是作者对该库已经放弃维护更新了, 不过感兴趣的人可以去研究一下</td>
</tr>
<tr>
<td>79. <a href="https://github.com/square/android-times-square" target="_blank" rel="external">android-times-square</a></td>
<td>TimesSquare 是 Square 公司出品的一款显示日历选择日期的控件, 可以让用户选择多个日期</td>
</tr>
<tr>
<td>80. <a href="https://github.com/cyrilmottier/GreenDroid" target="_blank" rel="external">GreenDroid(不建议使用)</a></td>
<td>GreenDroid 是一个封装好的 Android UI 界面库, 不过该库已经被弃用了, 不建议使用</td>
</tr>
<tr>
<td>81. <a href="https://github.com/orhanobut/logger" target="_blank" rel="external">logger</a></td>
<td>Logger 是一个简单, 漂亮, 强大 Android 打印日志库</td>
</tr>
<tr>
<td>82. <a href="https://github.com/ACRA/acra" target="_blank" rel="external">acra</a></td>
<td>Acra 是一个能够让 Android 应用自动将崩溃报告以谷歌文档电子表的形式进行发送的库, 旨在当应用发生崩溃或出现错误行为时, 开发者可以获取到相关数据</td>
</tr>
<tr>
<td>83. <a href="https://github.com/ManuelPeinado/FadingActionBar" target="_blank" rel="external">FadingActionBar</a></td>
<td>FadingActionBar 是一个支持 ListView, ScrollView, WebView 向下滚动时逐渐显示 ActionBar 库</td>
</tr>
<tr>
<td>84. <a href="https://github.com/daimajia/AndroidImageSlider" target="_blank" rel="external">AndroidImageSlider</a></td>
<td>AndroidImageSlider 库开发者是代码家, 该库是为 Banner 图片滑动提供多种动画效果, 还可以轻易为 Banner 加载网络图片</td>
</tr>
<tr>
<td>85. <a href="https://github.com/jgilfelt/SystemBarTint" target="_blank" rel="external">SystemBarTint</a></td>
<td>SystemBarTint 是一个实现沉浸式状态栏库, 适用于 Android 系统 4.4 其以上的版本</td>
</tr>
<tr>
<td>86. <a href="https://github.com/SimonVT/android-menudrawer" target="_blank" rel="external">android-menudrawer</a></td>
<td>MenuDrawer 是一款滑出式菜单库, 通过拖动屏幕边缘滑出菜单, 支持屏幕上下左右划出, 支持当前 View 处于上下层, 支持 Windows 边缘, ListView 边缘, ViewPager 变化划出菜单等</td>
</tr>
<tr>
<td>87. <a href="https://github.com/vinc3m1/RoundedImageView" target="_blank" rel="external">RoundedImageView</a></td>
<td>RoundedImageView 一个快速支持图片圆角显示效果的库, 该库特点是能快速加载, 为了提高加载速度, 该库不用创建原始位图的副本, 不使用 clipPath, 不使用 setXfermode 裁剪的位图等方式来实现 ImageView 圆角, 使用也非常简单</td>
</tr>
<tr>
<td>88. <a href="https://github.com/yangfuhai/afinal" target="_blank" rel="external">afinal</a></td>
<td>Afinal 是一个 android 的 sqlite orm 和 ioc 框架, 同时封装了 android 中的 http 框架, 使其更加简单易用, 使用 finalBitmap, 无需考虑 bitmap 在 android 中加载的时候 oom 的问题和快速滑动的时候图片加载位置错位等问题, Afinal 的宗旨是简洁, 快速, 约定大于配置的方式, 尽量一行代码完成所有事情</td>
</tr>
<tr>
<td>89. <a href="https://github.com/johannilsson/android-pulltorefresh" target="_blank" rel="external">android-pulltorefresh(不建议使用)</a></td>
<td>另一个下拉刷新库, 但是该库已经停止维护, 因此不建议使用, 推荐使用 <a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">Android-Ultra-Pull-To-Refresh</a></td>
</tr>
<tr>
<td>90. <a href="https://github.com/BoltsFramework/Bolts-Android" target="_blank" rel="external">Bolts-Android</a></td>
<td>Bolts 是一款底层类库集合, 在后台实现异步操作, 并提供接口反馈当前异步执行的程度 (可以通过接口实现UI进度更新), 最后反馈执行的结果给UI主线程, 与AsyncTask比较: (1)使用的是无大小限制的线程池; (2)任务可组合可级联,防止了代码耦合</td>
</tr>
<tr>
<td>91. <a href="https://github.com/daimajia/NumberProgressBar" target="_blank" rel="external">NumberProgressBar</a></td>
<td>NumberProgressBar 开发者是代码家, 这是一个带简约性感数字显示的进度条库, 使用非常简单方便</td>
</tr>
<tr>
<td>92. <a href="https://github.com/ikew0ng/SwipeBackLayout" target="_blank" rel="external">SwipeBackLayout</a></td>
<td>SwipeBackLayout 是一个支持屏幕上下左右滑动返回上层 Activity, 关闭当前 Activity, 类似简书 App</td>
</tr>
<tr>
<td>93. <a href="https://github.com/koral--/android-gif-drawable" target="_blank" rel="external">android-gif-drawable</a></td>
<td>一个支持 gif 显示的 view, 用 jni 实现的, 编译生成 so 库后直接 xml 定义 view 即可, 简单易用</td>
</tr>
<tr>
<td>94. <a href="https://github.com/yixia/VitamioBundle" target="_blank" rel="external">VitamioBundle</a></td>
<td>Vitamio 是一款 Android 与 iOS 平台上的全能多媒体开发框架, 特点：(1) 全面支持硬件解码与 GPU 渲染, (2) 能够流畅播放 720P 甚至 1080P 高清 MKV, FLV, MP4, MOV, TS, RMVB 等常见格式的视频, (3) 在 Android 与 iOS 上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议, 包括点播与直播</td>
</tr>
<tr>
<td>95. <a href="https://github.com/ogaclejapan/SmartTabLayout" target="_blank" rel="external">SmartTabLayout</a></td>
<td>SmartTabLayout 是一个自定义的 Tab title strip, 基于 Google Samples 中的 android-SlidingTabBasic 项目, 滑动时 Indicator 可平滑过渡</td>
</tr>
<tr>
<td>96. <a href="https://github.com/Yalantis/uCrop" target="_blank" rel="external">uCrop</a></td>
<td>uCrop 是<a href="https://yalantis.com/" target="_blank" rel="external">Yalantis</a> 组织开源的图片裁剪库, 支持缩放, 旋转图片, 支持各种比例的裁剪框, 非常强大的一个图片裁剪库</td>
</tr>
<tr>
<td>97. <a href="https://github.com/jdamcd/android-crop" target="_blank" rel="external">android-crop</a></td>
<td>又一个图片裁剪库, 向下兼容到 Api 10, 个人感觉这个库并没有比上面介绍的 uCrop 强大</td>
</tr>
<tr>
<td>98. <a href="https://github.com/Prototik/HoloEverywhere" target="_blank" rel="external">HoloEveryWhere</a></td>
<td>HoloEveryWhere 是一套 Android 开发库, 提供了全套 Holo Style 控件, 它的外观与功能和标准 Holo Style 控件基本相同, 唯一不同的是它可以运行在低于 4.0 版本的 Android 系统上</td>
</tr>
<tr>
<td>99. <a href="https://github.com/81813780/AVLoadingIndicatorView" target="_blank" rel="external">AVLoadingIndicatorView</a></td>
<td>AVLoadingIndicatorView 库含有各种各样漂亮的加载动画效果, 使用起来也非常简单, 和平时使用 ProgressBar 一样</td>
</tr>
<tr>
<td>00. <a href="https://github.com/pedant/sweet-alert-dialog" target="_blank" rel="external">sweet-alert-dialog</a></td>
<td>Android 版的 SweetAlert, 清新文艺, 快意灵动的甜心弹框, 灵感来源于 JS 版 <a href="http://t4t5.github.io/sweetalert/" target="_blank" rel="external">SweetAlert</a></td>
</tr>
</tbody>
</table>
<h2 id="粗计"><a href="#粗计" class="headerlink" title="粗计"></a>粗计</h2><h4 id="Square-公司占有-7-席"><a href="#Square-公司占有-7-席" class="headerlink" title="Square 公司占有 7 席"></a>Square 公司占有 7 席</h4><table>
<thead>
<tr>
<th>项目名称</th>
<th>排名</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit</a></td>
<td>4</td>
</tr>
<tr>
<td><a href="https://github.com/square/okhttp" target="_blank" rel="external">OkHttp</a></td>
<td>5</td>
</tr>
<tr>
<td><a href="https://github.com/square/picasso" target="_blank" rel="external">Picasso</a></td>
<td>7</td>
</tr>
<tr>
<td><a href="https://github.com/square/leakcanary" target="_blank" rel="external">LeakCanary</a></td>
<td>13</td>
</tr>
<tr>
<td><a href="https://github.com/square/dagger" target="_blank" rel="external">Dagger</a></td>
<td>29</td>
</tr>
<tr>
<td><a href="https://github.com/square/otto" target="_blank" rel="external">Otto</a></td>
<td>44</td>
</tr>
<tr>
<td><a href="https://github.com/square/android-times-square" target="_blank" rel="external">TimesSquare</a></td>
<td>79</td>
</tr>
</tbody>
</table>
<h4 id="FaceBook-公司占有-4-席"><a href="#FaceBook-公司占有-4-席" class="headerlink" title="FaceBook 公司占有 4 席"></a>FaceBook 公司占有 4 席</h4><table>
<thead>
<tr>
<th>项目名称</th>
<th>排名</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/facebook/react-native" target="_blank" rel="external">React Native</a></td>
<td>1</td>
</tr>
<tr>
<td><a href="https://github.com/facebook/fresco" target="_blank" rel="external">Fresco</a></td>
<td>11</td>
</tr>
<tr>
<td><a href="https://github.com/facebook/stetho" target="_blank" rel="external">Stetho</a></td>
<td>38</td>
</tr>
<tr>
<td><a href="https://github.com/facebook/rebound" target="_blank" rel="external">Rebound</a></td>
<td>62</td>
</tr>
</tbody>
</table>
<h4 id="JakeWharton-大神占有-5-席"><a href="#JakeWharton-大神占有-5-席" class="headerlink" title="JakeWharton 大神占有 5 席"></a>JakeWharton 大神占有 5 席</h4><table>
<thead>
<tr>
<th>项目名称</th>
<th>排名</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">Butter Knife</a></td>
<td>14</td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/ActionBarSherlock" target="_blank" rel="external">ActionBarSherlock</a></td>
<td>16</td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/ViewPagerIndicator" target="_blank" rel="external">ViewPagerIndicator</a></td>
<td>18</td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/NineOldAndroids" target="_blank" rel="external">NineOldAndroids</a></td>
<td>55</td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">Hugo</a></td>
<td>73</td>
</tr>
</tbody>
</table>
<h4 id="代码家大神占有-4-席"><a href="#代码家大神占有-4-席" class="headerlink" title="代码家大神占有 4 席"></a>代码家大神占有 4 席</h4><table>
<thead>
<tr>
<th>项目名称</th>
<th>排名</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/daimajia/AndroidSwipeLayout" target="_blank" rel="external">AndroidSwipeLayout</a></td>
<td>28</td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="external">AndroidViewAnimations</a></td>
<td>32</td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/AndroidImageSlider" target="_blank" rel="external">AndroidImageSlide</a></td>
<td>84</td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/NumberProgressBar" target="_blank" rel="external">NumberProgressBar</a></td>
<td>91</td>
</tr>
</tbody>
</table>
<h2 id="Android-学习资料收集-2"><a href="#Android-学习资料收集-2" class="headerlink" title="Android 学习资料收集[2]"></a>Android 学习资料收集<sup>[2]<sup></sup></sup></h2><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><table>
<thead>
<tr>
<th>书籍名称</th>
<th>推荐理由</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.amazon.cn/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3-%E5%9F%83%E5%8F%B2%E5%B0%94/dp/B0011F7WU4/ref=sr_1_1?ie=UTF8&amp;qid=1428138267&amp;sr=8-1&amp;keywords=java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3" target="_blank" rel="external">Thinking In Java 中文版</a></td>
<td>学习 Android 开发, 首先需要 Java 基础, 这里推荐 Thinking In Java, Thinking In Java 是 Java 的经典书籍, 是学习 Java 语言必备书籍</td>
</tr>
<tr>
<td><a href="http://www.amazon.cn/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81-Android-%E9%83%AD%E9%9C%96/dp/B00LVHTI9U/ref=sr_1_1?ie=UTF8&amp;qid=1428138432&amp;sr=8-1&amp;keywords=%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E2%80%94%E2%80%94android+%E9%83%AD%E9%9C%96" target="_blank" rel="external">第一行代码</a></td>
<td>郭霖大神的杰作, 郭神在CSDN中的博客文章非常不错, 书我看了, 非常适合新手, 里面的内容非常棒, 建议结合郭神博客文章一起来学习</td>
</tr>
<tr>
<td><a href="http://item.jd.com/11689014.html" target="_blank" rel="external">疯狂Android讲义第三版</a></td>
<td>作者是李刚, 这本书是基于 Android 5.0 来讲的, 我看过第二版, 这本书给我第一感觉就是很厚, 但里面内容写的还是很详细的, 代码很多, 可以跟着代码一步步敲</td>
</tr>
<tr>
<td><a href="http://www.amazon.cn/Android%E7%BE%A4%E8%8B%B1%E4%BC%A0-%E5%BE%90%E5%AE%9C%E7%94%9F/dp/B01481RAA4/ref=sr_1_1?m=A1AJ19PSB66TGU&amp;s=books&amp;ie=UTF8&amp;qid=1442198757&amp;sr=1-1&amp;keywords=android%E7%BE%A4%E8%8B%B1%E4%BC%A0" target="_blank" rel="external">Android群英传</a></td>
<td>本书作者 @Tomcat 的猫, 曾就职于上海 TCL 通讯, 从事 Alcatel(阿尔卡特) Android 手机系统的定制工作, 活跃于 CSDN, 目前就职于上海沪江网 Android 开发部RD项目组, 负责沪江 App 的功能预研</td>
</tr>
<tr>
<td><a href="http://product.china-pub.com/4806147" target="_blank" rel="external">Android开发艺术探索</a></td>
<td>由@任玉刚Coder所著, 是一本 Android 进阶类书籍, 采用理论, 源码和实践相结合的方式来阐述高水准的 Android 应用开发要点. 本书从三个方面来组织内容: 第一, 介绍 Android 开发者不容易掌握的一些知识点: 第二,结合Android源代码和应用层开发过程, 融会贯通, 介绍一些比较深入的知识点: 第三, 介绍一些核心技术和Android的性能优化思想.</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/26649050/" target="_blank" rel="external">App 研发录</a></td>
<td>本书作者是包建强, 本书是作者多年 App 开发的经验总结, 从 App 架构的角度, 重点总结了 Android 应用开发中常见的实用技巧和疑难问题解决方法, 为打造高质量 App 提供有价值的实践指导, 迅速提升应用开发能力和解决疑难问题的能力. 这本书非常有利于 Android 开发者进阶.</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/26644935/" target="_blank" rel="external">Android 设计模式源码分析</a></td>
<td>本书作者是开发技术前线创立者之一 Mr.Simple, 该书从 Android 源码的角度由浅入深地剖析设计模式的运用, 让工程师们把设计与模式重视起来, 提升自己的设计能力与代码质量</td>
</tr>
</tbody>
</table>
<h2 id="开发环境-工具"><a href="#开发环境-工具" class="headerlink" title="开发环境/工具"></a>开发环境/工具</h2><p>(附上: 由 <a href="http://weibo.com/234959219" target="_blank" rel="external">@脉脉不得语</a> 收集维护超多开发工具下载地址 <a href="https://github.com/inferjay/AndroidDevTools" target="_blank" rel="external">AndroidDevTools</a>, 后五个工具资料在 <a href="http://stormzhang.com/" target="_blank" rel="external">stormzhang</a> 博客中找到的,<a href="http://stormzhang.com/android/2015/05/26/android-tools/" target="_blank" rel="external">地址</a>)</p>
<table>
<thead>
<tr>
<th>环境/工具</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://developer.android.com/sdk/index.html" target="_blank" rel="external">Android Studio</a></td>
<td>这个开发工具上手需要一定的时间, 自从 Google 推出1.0正式版, 这个工具一直火爆, 谷歌也不停更新维护, 性能逐渐稳定提高, 目前 github 上面的绝大多数开源项目都是使用 Android Studio 工具, 这就是开发 Android 必须掌握使用的工具, 如果还在使用 Eclipse 开发 Android 的童鞋们, 赶紧换成 AS 开发吧</td>
</tr>
<tr>
<td><a href="https://www.genymotion.com/#!/download" target="_blank" rel="external">Genymotion</a></td>
<td>强大好用高性能的 Android 模拟器, 自带的那个模拟器简直不忍直视, 启动超慢的, 跟这个没法比, 无论你是用 Eclipse 还是 Android Studio 里面都有 Genymotion 插件</td>
</tr>
<tr>
<td><a href="https://github.com/skylot/jadx" target="_blank" rel="external">jadx</a></td>
<td>一个 Android 反编译神器, 不同于常见的 <a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="external">dex2jar</a>, 这个反编译器生成代码的 try/catch 次数更少, View也不再是数字 id 了, 可读性更高</td>
</tr>
<tr>
<td><a href="https://github.com/importre/android-selector-intellij-plugin" target="_blank" rel="external">android-selector</a></td>
<td>可以根据指定颜色生成 Selector Drawable 的插件</td>
</tr>
<tr>
<td><a href="https://github.com/ligi/GradleDependenciesHelperPlugin" target="_blank" rel="external">GradleDependenciesHelperPlugin</a></td>
<td>Gradle 依赖自动补全插件</td>
</tr>
<tr>
<td><a href="http://blog.avlyun.com/show/%E3%80%8Asv%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97%E3%80%8B/" target="_blank" rel="external">Smali Viewer</a></td>
<td>sv 是一款免费 APK 分析软件, 对你感兴趣的 APP 分析看看它们都用了些什么, 对你学习借鉴有一定帮助</td>
</tr>
<tr>
<td><a href="https://github.com/dmytrodanylyk/folding-plugin" target="_blank" rel="external">folding-plugin</a></td>
<td>layout 文件夹里的布局文件一般很长很长没有目录, 这个插件就可以把 layout 分好层级结构, 类似 src 下目录结构</td>
</tr>
<tr>
<td><a href="https://github.com/Vektah/CodeGlance" target="_blank" rel="external">CodeGlance</a></td>
<td>在编辑代码最右侧, 显示一块代码小地图</td>
</tr>
<tr>
<td><a href="https://plugins.jetbrains.com/plugin/?idea&amp;id=4509" target="_blank" rel="external">Statistic</a></td>
<td>统计整个项目行数的插件, 这可表示我们日日夜夜辛辛苦苦必备插件</td>
</tr>
<tr>
<td><a href="https://github.com/nicoulaj/idea-markdown" target="_blank" rel="external">idea-markdown</a></td>
<td>在 AS 中编写 Markdown 文件, 可以直接预览网页显示效果, 对于你经常编写 Markdown 文件的你值得拥有这个插件</td>
</tr>
<tr>
<td><a href="http://facebook.github.io/stetho/" target="_blank" rel="external">Stetho</a></td>
<td>Stetho 是 Facebook 出品的一个强大的 Android 调试工具,使用该工具你可以在 Chrome Developer Tools 查看 App 的布局, 网络请求(仅限使用 Volley, okhttp 的网络请求库), sqlite, preference, 一切都是可视化的操作,无须自己在去使用 adb, 也不需要 root 你的设备</td>
</tr>
<tr>
<td><a href="https://github.com/google/android-classyshark" target="_blank" rel="external">ClassyShark</a></td>
<td>ClassyShark 是 Google 发布的一款可以查看 Android 可执行文件的浏览工具, 支持.dex, .aar, .so, .apk, .jar, .class, .xml 等文件格式, 分析里面的内容包括 classes.dex 文件, 包方法数量, 类, 字符串, 使用的 NativeLibrary 等</td>
</tr>
<tr>
<td><a href="https://github.com/pedrovgs/AndroidWiFiADB" target="_blank" rel="external">AndroidWiFiADB</a></td>
<td>使用 WiFi 连接而不需要 USB 连接 Android 设备达到安装, 运行, 调试应用的目的</td>
</tr>
<tr>
<td><a href="https://github.com/jshiell/checkstyle-idea" target="_blank" rel="external">checkstyle-idea</a></td>
<td>Checkstyle-idea 是一款检查自己写的代码是否符合规范的插件, 该插件是根据 checkstyle.xml 文件来检查的, checkstyle.xml 文件可以由自己自己定义, 也可以使用一些大公司定义的规范, 如果不懂得如何定义, 可以查看 <a href="http://checkstyle.sourceforge.net/checks.html" target="_blank" rel="external">官方文档</a>, 该插件的详细介绍以及使用, 可以看一下咕咚大侠写的 <a href="http://gudong.name/2016/04/07/checkstyle.html" target="_blank" rel="external">文章</a></td>
</tr>
<tr>
<td><a href="https://github.com/Skykai521/ECTranslation" target="_blank" rel="external">ECTranslation</a></td>
<td>ECTranslation 是 Android Studio 开发工具的一个翻译插件, 可以将英文翻译为中文, 英语基础差的童鞋装上它就可以轻松阅读 Android 源码啦</td>
</tr>
<tr>
<td><a href="https://plugins.jetbrains.com/plugin/8076?pr=androidstudio" target="_blank" rel="external">Android Methods Count</a></td>
<td>统计 Android 依赖库中方法的总个数, 避免应用方法数超过 65K 问题</td>
</tr>
<tr>
<td><a href="https://github.com/westlinkin/AndroidLocalizationer" target="_blank" rel="external">AndroidLocalizationer</a></td>
<td>可用于将项目中的 string 资源自动翻译为其他语言的插件, 其翻译支持使用 Microsoft Translator 或 Google Translation</td>
</tr>
<tr>
<td><a href="https://github.com/avast/android-butterknife-zelezny" target="_blank" rel="external">ButterKnife Zelezny</a></td>
<td>ButterKnife 生成器, 使用起来非常简单方便, 为你简写了很多 findViewId 代码, 如果你不了解 ButterKnife 的可以到<a href="http://stormzhang.com/openandroid/android/2014/01/12/android-butterknife/" target="_blank" rel="external">这里</a>看看</td>
</tr>
<tr>
<td><a href="https://github.com/inmite/android-selector-chapek" target="_blank" rel="external">SelectorChapek</a></td>
<td>设计师给我们提供好了各种资源, 每个按钮都要写一个selector是不是很麻烦? 这么这个插件就为解决这个问题而生, 你只需要做的是告诉设计师们按照规范命名就好了, 其他一键搞定</td>
</tr>
<tr>
<td><a href="https://github.com/zzz40500/GsonFormat" target="_blank" rel="external">GsonFormat</a></td>
<td>现在大多数服务端 api 都以 json 数据格式返回, 而客户端需要根据 api 接口生成相应的实体类, 这个插件把这个过程自动化了, 赶紧使用起来吧</td>
</tr>
<tr>
<td><a href="https://github.com/mcharmas/android-parcelable-intellij-plugin" target="_blank" rel="external">ParcelableGenerator</a></td>
<td>Android中的序列化有两种方式, 分别是实现 Serializable 接口和 Parcelable 接口, 但在 Android 中是推荐使用 Parcelable, 只不过我们这种方式要比Serializable方式要繁琐, 那么有了这个插件一切就ok了</td>
</tr>
<tr>
<td><a href="https://github.com/square/leakcanary" target="_blank" rel="external">LeakCanary</a></td>
<td>良心企业 Square 最近刚开源的一个非常有用的工具, 强烈推荐, 帮助你在开发阶段方便的检测出内存泄露的问题, 使用起来更简单方便, 而且我们团队第一时间使用帮助我们发现了不少问题, 英文不好的这里有雷锋同志翻译的中文版 <a href="http://www.liaohuqiu.net/cn/posts/leak-canary-read-me/" target="_blank" rel="external">LeakCanary 中文使用说明</a></td>
</tr>
<tr>
<td><a href="https://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/" target="_blank" rel="external">更多</a></td>
<td>该作者收集整理了 40 个插件, 可以说是史上最全的了</td>
</tr>
</tbody>
</table>
<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><table>
<thead>
<tr>
<th>博客地址</th>
<th>博主信息</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://android-developers.blogspot.com/" target="_blank" rel="external">Android Developers Blog</a></td>
<td>Android官网博客, 在上面可以关注 Android 最新的进展与最权威的博客(需翻墙)</td>
</tr>
<tr>
<td><a href="http://stormzhang.com/" target="_blank" rel="external">stormzhang</a></td>
<td>博主是上海薄荷科技开发主管, 他的博客分享了他从编程白痴到自学 Android 一路走过的经验, 写了一篇 <a href="http://stormzhang.com/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">Android学习之路</a> 帮助了无数人, 里面还有很多好的文章非常适合新手入门, 并且是微信公众号「AndroidDeveloper」的运营者, 可以算是 Android 界最有影响力的公众号之一了, 强烈推荐关注</td>
</tr>
<tr>
<td><a href="http://hukai.me/" target="_blank" rel="external">胡凯</a></td>
<td>目前就职于腾讯上海从事 Android 开发的工作, 发起 Google Android 官方培训课程中文版翻译, 这课程是学习 Android 应用开发的绝佳资料</td>
</tr>
<tr>
<td><a href="http://www.trinea.cn/" target="_blank" rel="external">Trinea</a></td>
<td>目前在滴滴负责 Android 客户端技术, 他是开源库项目收集达人, 你想要的开源库<a href="https://github.com/Trinea" target="_blank" rel="external">上面</a>都有, 并且发起 Android 开源项目源码解析, 在使用开源库的同时也可以知道其中原理, 大家可以去关注一下, <a href="http://p.codekk.com" target="_blank" rel="external">地址</a></td>
</tr>
<tr>
<td><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">郭霖</a></td>
<td>博主郭霖是大神, 人人都称”郭神”, 是第一行代码的作者, 博主在 CSDN 上所写的文章都非常值得学习</td>
</tr>
<tr>
<td><a href="http://blog.daimajia.com/" target="_blank" rel="external">代码家</a></td>
<td>90后 Android 大神, 称作库达人, 博主收集了很多 Android 开源库, 博主自己也做了很多开源库, 非常值得学习</td>
</tr>
<tr>
<td><a href="http://www.lightskystreet.com/" target="_blank" rel="external">light_sky</a></td>
<td>Android 开发工程师, 目前在北京工作. Google big fan, 热爱开源, 热爱分享, 活跃于 GitHub, G+, Twitter, 捕捉Android最新资讯和技术, ViewPagerIndicator 开源项目分析者</td>
</tr>
<tr>
<td><a href="http://blog.csdn.net/lmj623565791/" target="_blank" rel="external">张鸿洋</a></td>
<td>张鴻洋是 CSDN 博客专家, 博主在 CSDN 所发布的每一篇文章都是干货, 都很值得大家去学习</td>
</tr>
<tr>
<td><a href="http://blog.csdn.net/xyz_lmn" target="_blank" rel="external">张兴业</a></td>
<td>张兴业同样也是 CSDN 博客专家, 博主专注移动互联网开发, 关注移动支付业务</td>
</tr>
<tr>
<td><a href="http://blog.csdn.net/lzyzsd/" target="_blank" rel="external">hi大头鬼hi</a></td>
<td>hi大头鬼hi 是阿里巴巴集团的一名 Android 工程师, 擅长 Android, RxJava, RxAndroid, ReactNative, Node.js, 大前端, 可谓是全栈工程师, 如果你对 RxJava 技术感兴趣, 不妨到他的博客看看, 他写了一系列有关 RxJava 的介绍</td>
</tr>
<tr>
<td><a href="https://github.com/android-cn/android-dev-cn" target="_blank" rel="external">更多</a></td>
<td>这里面收集了很多国内外开发者的信息, 大家可以去看看</td>
</tr>
</tbody>
</table>
<h2 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h2><table>
<thead>
<tr>
<th>名称</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://stackoverflow.com/" target="_blank" rel="external">StackOverFlow</a></td>
<td>IT 界的问答社区, 你开发当中所遇到的问题基本上都能在这里能寻找到你想要的答案</td>
</tr>
<tr>
<td><a href="https://segmentfault.com/t/android" target="_blank" rel="external">SegmentFault</a></td>
<td>SegmentFault 是一个专注于解决编程问题, 提高开发技能的社区</td>
</tr>
<tr>
<td><a href="http://blog.csdn.net/mobile/newest.html" target="_blank" rel="external">CSDN</a></td>
<td>CSDN 是全球最大中文IT技术社区</td>
</tr>
<tr>
<td><a href="http://gold.xitu.io/explore/android" target="_blank" rel="external">稀土掘金</a></td>
<td>高质量的技术分享社区</td>
</tr>
<tr>
<td><a href="http://chinagdg.org/" target="_blank" rel="external">谷歌开发者社区(GDG)</a></td>
<td>GDG 是 Google Developer Groups 的缩写, 中文名称是谷歌开发者社区</td>
</tr>
</tbody>
</table>
<h2 id="开源项目学习"><a href="#开源项目学习" class="headerlink" title="开源项目学习"></a>开源项目学习</h2><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/google/iosched" target="_blank" rel="external">Google I/O 2014</a></td>
<td>Google I/O Android App 使用了当时最新推出的 Material Design 设计</td>
</tr>
<tr>
<td><a href="https://github.com/googlesamples/android-UniversalMusicPlayer" target="_blank" rel="external">Google play music</a></td>
<td>一个跨多个平台音乐播放器</td>
</tr>
<tr>
<td><a href="https://github.com/google/santa-tracker-android?utm_source=www.race604.com" target="_blank" rel="external">Google Santa Tracker for Android</a></td>
<td>Google 开源的一个儿童教育和娱乐的 App</td>
</tr>
<tr>
<td><a href="https://github.com/pockethub/PocketHub" target="_blank" rel="external">github客户端</a></td>
<td>开源者 github 团队, 支持项目的 lssues 和 Gists 并集成了新闻 feed 以便及时获取来自组织好友和资料库的更新信息, 还提供了一个用于快速访问你创建,监控以及发布 issue 面板, 可查看并将问题加到收藏夹</td>
</tr>
<tr>
<td><a href="https://github.com/klinker24/Talon-for-Twitter" target="_blank" rel="external">Talon-for-Twitter</a></td>
<td>一个完整版 Twitter 第三方客户端, 属于顶级水平, 而且在源代码 100% 开源, 学习资源让你取之不尽</td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/AnimeTaste" target="_blank" rel="external">Anime Taste</a></td>
<td>开发者是代码家为 AnimeTaste 全球动画精选开发的 Android 客户端, 国内很少见的精彩而且开源的 APP, 获得豌豆荚110期设计奖</td>
</tr>
<tr>
<td><a href="https://github.com/daimajia/EverMemo" target="_blank" rel="external">EverMemo</a></td>
<td>开发者是代码家, EverMemo 是一款让你快速记录与分享灵感的随身便签, 极简的界面与卡片式布局, 让你记录与查找便签更有效率</td>
</tr>
<tr>
<td><a href="https://github.com/stormzhang/9GAG" target="_blank" rel="external">9GAG</a></td>
<td>开发者是 stormzhang 博主,这个开源项目教你使用 Studio, Gradle 以及一些流行的开源库快速开发一个不错的 Android 客户端</td>
</tr>
<tr>
<td><a href="https://github.com/MiCode/Notes" target="_blank" rel="external">MIUI 便签</a></td>
<td>MiCode 便签是小米便签的社区开源版, 由 MIUI 团队（ww.miui.com）发起并贡献第一批代码, 遵循 NOTICE 文件所描述的开源协议</td>
</tr>
<tr>
<td><a href="https://github.com/drakeet/Seashell-app" target="_blank" rel="external">贝壳单词</a></td>
<td>开发者是许晓峰(Drakeet), 获得豌豆荚设计奖, 这个是初期版本, 新版没有开源, 但是在博主的博客当中将一些新版的内容都剥离出来写成了文章,可以去学习一下</td>
</tr>
<tr>
<td><a href="https://github.com/romannurik/muzei" target="_blank" rel="external">Muzei Live Wallpaper</a></td>
<td>开发者是 Ian Lake , 就职于 Google, 这款是定时更换桌面精美壁纸 App</td>
</tr>
<tr>
<td><a href="https://github.com/qii/weiciyuan" target="_blank" rel="external">四次元-新浪微博客户端</a></td>
<td>一个仿新浪微博客户端 App, 基本都含有新浪微博的功能, 开源团队写了一份 wiki 文档, 可以去学习一下该 App 是如何实现的</td>
</tr>
<tr>
<td><a href="https://github.com/bxbxbai/ZhuanLan" target="_blank" rel="external">知乎专栏</a></td>
<td>开发者是白瓦力, 项目结构清晰, 代码分包合理, 很棒. 很适合新手去学习如何搭建一个 App 结构, 熟悉开发一个完整 App 的流程</td>
</tr>
<tr>
<td><a href="https://github.com/eoecn/android-app" target="_blank" rel="external">eoe 客户端</a></td>
<td>eoe 社区Android客户端</td>
</tr>
<tr>
<td><a href="http://git.oschina.net/oschina/android-app" target="_blank" rel="external">oschina</a></td>
<td>开源中国社区 Android 客户端, 此开源的是 v1 版本, v2 版本将在 2015 年年中开源</td>
</tr>
<tr>
<td><a href="https://github.com/kyze8439690/v2ex-daily-android" target="_blank" rel="external">v2ex</a></td>
<td>开发者是<a href="http://yanghui.name/about/" target="_blank" rel="external">杨辉</a>, 这个是 v2ex Android 第三方客户端</td>
</tr>
<tr>
<td><a href="https://github.com/chrislacy/TweetLanes" target="_blank" rel="external">Tweet Lanes</a></td>
<td>功能比较完整的 Twitter 客户端</td>
</tr>
<tr>
<td><a href="https://github.com/mvarnagiris/financius-public" target="_blank" rel="external">Financius</a></td>
<td>一款简单易用个人理财 Android 程序</td>
</tr>
<tr>
<td><a href="https://coding.net/u/coding/p/Coding-Android/git" target="_blank" rel="external">Coding</a></td>
<td>Coding 类似于 github 一个代码托管平台, 这个是 Coding 的 Android 版客户端</td>
</tr>
<tr>
<td><a href="https://github.com/zxing/zxing" target="_blank" rel="external">ZXing</a></td>
<td>二维码扫描工具,市场上许多应用的二维码扫描工具都是从这个修改得到的</td>
</tr>
<tr>
<td><a href="https://github.com/chrisbanes/photup" target="_blank" rel="external">photup</a></td>
<td>编辑机批量上传照片到 facebook 上,代码分包合理,很棒,不过这个项目依赖的开源项目比较多, 比较难编译</td>
</tr>
<tr>
<td><a href="https://github.com/ginatrapani/todo.txt-android" target="_blank" rel="external">todo.txt-android</a></td>
<td>todo.txt 官方 Android 应用, 一个极简的将待办事件记录在 .txt 文件中</td>
</tr>
<tr>
<td><a href="https://github.com/JayFang1993/ScanBook" target="_blank" rel="external">扫扫图书</a></td>
<td>一个让你懂得如何去选择一本书的 APP, 具有扫描搜索查询图书的信息功能</td>
</tr>
<tr>
<td><a href="https://github.com/tvbarthel/ChaseWhisplyProject" target="_blank" rel="external">ChaseWhisplyProject</a></td>
<td>开启摄像头在你所在位置寻找鬼魂, 进行打鬼游戏</td>
</tr>
<tr>
<td><a href="https://github.com/AntennaPod/AntennaPod" target="_blank" rel="external">AntennaPod</a></td>
<td>AntennaPod 是一个自由, 开源的播客客户端, 支持 Atom 和 RSS Feed</td>
</tr>
<tr>
<td><a href="https://github.com/openproject/AndroidDigest" target="_blank" rel="external">干柴</a></td>
<td>开发者是冯建, 一个专注收集 android 相关干货(文摘,名博,github等等)资源 App</td>
</tr>
<tr>
<td><a href="https://github.com/manmal/hn-android" target="_blank" rel="external">Hacker News</a></td>
<td>一个查看黑客新闻报道和评论的 App</td>
</tr>
<tr>
<td><a href="https://github.com/madeye/proxydroid" target="_blank" rel="external">proxydroid</a></td>
<td>ProxyDroid 是一个帮助你在你的 Android 设备上设置代理 (HTTP / SOCKS4 / SOCKS5)</td>
</tr>
<tr>
<td><a href="https://git.oschina.net/way/AliGesture" target="_blank" rel="external">AliGesture</a></td>
<td>Android平台手势识别应用, 简单的手势就可以进入预置的应用, 方便快捷</td>
</tr>
<tr>
<td><a href="https://coding.net/u/youzi/p/Zhidu-Android/git/tree/master" target="_blank" rel="external">指读</a></td>
<td>指读顾名思义就是用手指去阅读浩瀚的书海</td>
</tr>
<tr>
<td><a href="https://github.com/KJFrame/KJMusic" target="_blank" rel="external">KJ 音乐</a></td>
<td>开发者是<a href="http://blog.kymjs.com/about/" target="_blank" rel="external">张涛</a>, 快捷音乐使用到<a href="https://github.com/kymjs/KJFrameForAndroid" target="_blank" rel="external">KJFrameForAndroid</a>开发框架, 拥有界面绚丽, 操作简单, 播放手机本地音乐, 在线收听音乐等功能, 还支持: 新浪微博, 百度账号, QQ 账号的一键登录</td>
</tr>
<tr>
<td><a href="http://git.oschina.net/tonlin/android-app" target="_blank" rel="external">哎嘛</a></td>
<td>OSCHINA 第三方客户端, 这个版本界面比官方版本界面好看多了, 使用的是 Material Design, 界面看上去非常清爽舒服</td>
</tr>
<tr>
<td><a href="http://git.oschina.net/wlemuel/Cotable/tree/master/" target="_blank" rel="external">码厩</a></td>
<td>博客园第三方客户端, 使用到缓存技术, 当你打开一次之后的博客内容, 会自动保存到设备中, 下次打开阅读同一文章时不需要再利用网络加载, 大家如果想为自己 App 搞缓存的, 可以研究一下该 App 是如何实现的喔</td>
</tr>
<tr>
<td><a href="http://git.oschina.net/ywwxhz/cnBeta-reader" target="_blank" rel="external">cnBeta 第三方阅读器</a></td>
<td>该 App 是 cnBeta(中文业界资讯站) 第三方阅读客户端, 界面也是使用 Material Design, 还加上一些动画效果, 让人阅读文章起来不会感觉枯燥, 值得去研究学习一下</td>
</tr>
<tr>
<td><a href="https://github.com/PaperAirplane-Dev-Team/BlackLight" target="_blank" rel="external">BlackLight</a></td>
<td>BlackLight是由纸飞机开发团队开发的一款Android上的新浪微博第三方轻量级客户端</td>
</tr>
<tr>
<td><a href="https://github.com/actorapp/actor-platform" target="_blank" rel="external">Actor</a></td>
<td>Actor(优聆) 是一款即时通讯 App, 解决网络通讯差的情况, 支持离线消息和文件存储, 自动与手机联系人建立联系等等</td>
</tr>
<tr>
<td><a href="https://github.com/nickbutcher/plaid" target="_blank" rel="external">Plaid</a></td>
<td>一个遵循 Material Design 的一个设计新闻客户端，里面的一些完全MD的一些特效很棒，同时整个客户端的框架设计也很有参考意义</td>
</tr>
<tr>
<td><a href="https://github.com/SkillCollege/SimplifyReader" target="_blank" rel="external">SimplifyReader</a></td>
<td>一款基于 Google Material Design 设计开发的 Android 客户端, 包括新闻简读, 图片浏览, 视频爽看, 音乐轻听以及二维码扫描五个子模块, 项目采取的是MVP架构开发</td>
</tr>
<tr>
<td><a href="https://github.com/CycloneAxe/phphub-android" target="_blank" rel="external">PHPHub-Android</a></td>
<td>PHPHub Android 客户端, 项目架构使用 nucleus 简化 MVP 架构, API 请求返回数据使用 RxJava 进行处理, 客户端使用了独特的二维码扫码登录, 有兴趣的可以去研究一下</td>
</tr>
<tr>
<td><a href="https://github.com/MummyDing/Leisure" target="_blank" rel="external">Leisure</a></td>
<td>闲暇(Leisure)是一款集”知乎日报”, “果壳科学人”, “新华网新闻”以及”豆瓣图书”于一体的阅读类 Android 应用, 项目里面有多语言切换、夜间模式以及无图模式, 如果你还不知道这些技术怎么实现, 不妨参考一下这个项目</td>
</tr>
<tr>
<td><a href="https://github.com/drakeet/Meizhi" target="_blank" rel="external">Meizhi</a></td>
<td>开发者是许晓峰(Drakeet), 该 app 是数据来自代码家干货网站 <a href="http://gank.io" target="_blank" rel="external">gank.io</a>, 有很多开发者都纷纷为这网站做客户端 app, 因为代码家大神开放该网站的 Api, 更重要的是该网站每天除了有干货还有漂亮妹子看呢, 该 App 使用到的技术有 RxJava + Retrofit, 代码结构非常清晰, 值得一看的开源 App.</td>
</tr>
<tr>
<td><a href="https://github.com/sfsheng0322/Bingo" target="_blank" rel="external">Bingo</a></td>
<td>开发者是<a href="http://weibo.com/u/3852192525" target="_blank" rel="external">孙福生</a>, Bingo 是一款 IT 阅读学习类的开源软件, 作者收集一些干货学习内容, 你也可以在 App 上分享你的认为干货文章, 该项目使用动态代理 AOP 编程框架, 使开发起来更简洁, 更高效. 里面有一个功能就是多种主题切换, 感兴趣的可以看看怎么实现</td>
</tr>
</tbody>
</table>
<h2 id="Android-开发者杂志周刊"><a href="#Android-开发者杂志周刊" class="headerlink" title="Android 开发者杂志周刊"></a>Android 开发者杂志周刊</h2><p>( 前五个资料来自 <a href="http://drakeet.me/" target="_blank" rel="external">Drakeet</a> 收集整理的, 资料原链接 <a href="http://www.jianshu.com/p/54c4a19ffa68" target="_blank" rel="external">地址</a> )</p>
<table>
<thead>
<tr>
<th>周刊名</th>
<th>周刊简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://androidweekly.net/" target="_blank" rel="external">Android Weekly</a></td>
<td>Android Weekly 是由Android 团队的成员和国外知名的 Android 开发者维护, 分享的内容不仅仅只有干货, 而且还有最新的技术分享, 也是Android 开发圈子最早, 最有名的周报</td>
</tr>
<tr>
<td><a href="http://www.androidweekly.cn/" target="_blank" rel="external">Android 开发技术周报</a></td>
<td>Android 开发技术周报是由<a href="http://weibo.com/234959219" target="_blank" rel="external">@脉脉不嘚語</a> 维护更新, 截止到现在, 已经发布了28 期, 分享的都是高质量的文章教程, 代码库, 工具, 新闻视频, 设计等</td>
</tr>
<tr>
<td><a href="http://zhuanlan.zhihu.com/andlib" target="_blank" rel="external">Android 科学院</a></td>
<td>由 <a href="http://weibo.com/duguguiyu?from=feed&amp;loc=at&amp;nick=duguguiyu" target="_blank" rel="external">@duguguiyu</a>和豌豆荚一小撮工程师组成, 分享的都是最新的 Android 技术: 虽然更新频率不是很高, 但是质量确是很高的, 值得一看的</td>
</tr>
<tr>
<td><a href="http://www.devtf.cn/?cat=2" target="_blank" rel="external">开发技术前线</a></td>
<td>开发技术前线是一个高质量技术文章的聚合网站, 主要分享 Android, iOS, 以及招聘等内容</td>
</tr>
<tr>
<td><a href="http://app.memect.com/" target="_blank" rel="external">App 开发日报</a></td>
<td>App 开发日报主要关注移动应用的开发, 它每天一刊, 分享的内容主要来自微博上知名的开发者推荐的内容, 因此质量基本上是有保证的</td>
</tr>
<tr>
<td><a href="http://www.infoq.com/cn/author/%E9%83%AD%E4%BA%AE" target="_blank" rel="external">Android 开发周报</a></td>
<td>Android 开发周报是郭亮在连载更新在 Infoq 的周刊, 它不仅分享 Android 的相关新闻, 新工具, 而且还有更加深入的, 所以对于新生老人都很适合</td>
</tr>
<tr>
<td><a href="http://gank.io/" target="_blank" rel="external">干货集中营</a></td>
<td>由 <a href="http://blog.daimajia.com/" target="_blank" rel="external">代码家</a> 维护更新, 周一到周五每天中午分享, 分享内容有漂亮妹子, Android 干货, iOS 干货, App, 技术以外推荐, 还有休息视频</td>
</tr>
<tr>
<td><a href="http://www.androidblog.cn/" target="_blank" rel="external">Android Blog 周刊</a></td>
<td>AndroidBlog 是由 <a href="http://weibo.com/u/2106134235?refer_flag=1001030201_&amp;is_hot=1" target="_blank" rel="external">Jomeslu</a> 收录的, 目前就职于搜狐, 该周刊分享内容主要有一周国内外热门技术博客, 优秀的类库, 以及一些有趣的新闻, 看了前几期分享的内容质量都是很高的, 因此值得推荐给大家</td>
</tr>
</tbody>
</table>
<h2 id="Awesome-系列"><a href="#Awesome-系列" class="headerlink" title="Awesome 系列"></a>Awesome 系列</h2><ul>
<li><a href="https://github.com/snowdream/awesome-android" target="_blank" rel="external">awesome android(1)</a></li>
<li><a href="https://github.com/JStumpp/awesome-android" target="_blank" rel="external">awesome_android(2)</a></li>
<li><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome_android_UI</a></li>
<li><a href="https://github.com/wasabeef/awesome-android-libraries" target="_blank" rel="external">awesome_android_libraries</a></li>
<li><a href="https://github.com/akullpp/awesome-java" target="_blank" rel="external">awesome_java</a></li>
<li><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">awesome_materialdesign</a></li>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">awesome 系列之终极版</a></li>
<li><a href="https://github.com/liaohuqiu/android-dynamic-load-awesome" target="_blank" rel="external">android-dynamic-load-awesome</a></li>
<li><a href="https://github.com/mzlogin/awesome-adb" target="_blank" rel="external">awesome-adb</a></li>
</ul>
<h2 id="动画系列"><a href="#动画系列" class="headerlink" title="动画系列"></a>动画系列</h2><ul>
<li><a href="https://github.com/hitherejoe/animate" target="_blank" rel="external">animate</a></li>
<li><a href="https://github.com/Animatious/awesome-animation" target="_blank" rel="external">awesome-animation</a></li>
<li><a href="https://github.com/lgvalle/Material-Animations" target="_blank" rel="external">Material-Animations</a></li>
<li><a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="external">AndroidViewAnimations</a></li>
</ul>
<h2 id="Material-Design-设计"><a href="#Material-Design-设计" class="headerlink" title="Material Design 设计"></a>Material Design 设计</h2><ul>
<li><a href="https://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="external">Material Design 教程</a></li>
<li><a href="https://github.com/1sters/material_design_zh_2" target="_blank" rel="external">Material Design 教程(中文版)</a></li>
<li><a href="https://github.com/navasmdc/MaterialDesignLibrary" target="_blank" rel="external">Material Design Android Library </a>(Material Design 开源库, 很多效果可以直接拿来用)</li>
<li><a href="http://www.aplesson.com/?p=650" target="_blank" rel="external">十大Material Design开源项目</a></li>
</ul>
<h2 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h2><ul>
<li><a href="http://tool.c7sky.com/webcolor/" target="_blank" rel="external">常用色彩搭配表</a></li>
<li><a href="http://www.colorhunt.co/" target="_blank" rel="external">ColorHunt-色彩搭配</a></li>
<li><a href="http://www.materialpalette.com/" target="_blank" rel="external">在线 Material Design 界面调色板</a></li>
<li><a href="http://www.materialup.com/" target="_blank" rel="external">Material Design设计模板与素材</a></li>
<li><a href="https://icons8.com/" target="_blank" rel="external">Icons8</a></li>
<li><a href="https://iconstore.co/" target="_blank" rel="external">Icon Store</a></li>
<li><a href="https://design.google.com/icons/" target="_blank" rel="external">Material icons</a></li>
<li><a href="http://iconfont.cn/" target="_blank" rel="external">Iconfont</a></li>
<li><a href="https://github.com/gztchan/awesome-design/" target="_blank" rel="external">awesome-design</a></li>
</ul>
<h2 id="开源库收集"><a href="#开源库收集" class="headerlink" title="开源库收集"></a>开源库收集</h2><ul>
<li><a href="http://alamkanak.github.io/android-libraries-and-resources/" target="_blank" rel="external">Android Libraries and Resources </a></li>
<li><a href="http://android-arsenal.com/" target="_blank" rel="external">Android Arsenal </a>(一个专门收集 android 开源库的网站, 网站经常更新)</li>
<li><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">Android 开源项目汇总 </a>(Trinea 大神收集的)</li>
<li><a href="http://codekk.com/open-source-project-analysis" target="_blank" rel="external">Android 开源项目源码分析 </a>(在懂得使用这些开源项目同时, 也应该了解当中的原理)</li>
<li><a href="http://www.jcodecraeer.com/plus/list.php?tid=31" target="_blank" rel="external">泡在网上的日子</a></li>
<li><a href="http://www.android-gems.com/" target="_blank" rel="external">android-gems</a>(国内外很多开发者都在这里上传他们最新的项目, 还带有 apk 下载)</li>
</ul>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul>
<li><a href="https://github.com/iluwatar/java-design-patterns#model-view-presenter" target="_blank" rel="external">java-design-patterns</a></li>
<li><a href="https://github.com/simple-android-framework-exchange/android_design_patterns_analysis" target="_blank" rel="external">Android源码设计模式分析项目</a></li>
<li><a href="http://blog.csdn.net/zhangerqing/article/details/8194653" target="_blank" rel="external">Java之美[从菜鸟到高手演变]之设计模式</a></li>
</ul>
<h2 id="实践篇"><a href="#实践篇" class="headerlink" title="实践篇"></a>实践篇</h2><ul>
<li><a href="http://jaeger.itscoder.com/android/2016/02/14/android-studio-tips.html" target="_blank" rel="external">Android Studio 小技巧合集</a></li>
<li><a href="https://github.com/futurice/android-best-practices/blob/master/translations/Chinese/README.cn.md" target="_blank" rel="external">Android 开发最佳实践</a></li>
<li><a href="http://hukai.me/android-dev-patterns/" target="_blank" rel="external">Android 开发最佳实践 </a>(来自<a href="http://hukai.me/" target="_blank" rel="external">胡凯</a>总结)</li>
<li><a href="http://sr1.me/way-to-explore/2015/03/25/best-practice-for-android-ui.html" target="_blank" rel="external">Android 最佳实践之 UI 篇</a></li>
<li><a href="http://blog.csdn.net/zhaokaiqiang1992/article/details/45419023" target="_blank" rel="external">Android 屏幕适配全攻略</a></li>
<li><a href="http://www.hamberluo.cn/2015/04/27/semi-android-newer" target="_blank" rel="external">给半新人的app开发指南</a></li>
<li><a href="https://github.com/FX-Max/Point-of-Android" target="_blank" rel="external">Android 一些重要知识点解析整理</a></li>
<li><a href="http://www.imooc.com/article/1287" target="_blank" rel="external">Android 开发人员应避免的 10 个误区</a></li>
<li><a href="https://github.com/tianzhijiexian/Android-Best-Practices/blob/master/2015.9/reflect/reflect.md" target="_blank" rel="external">Java 反射最佳实践</a></li>
<li><a href="http://www.csdn.net/article/2015-09-18/2825737/1" target="_blank" rel="external">Android 内存优化之 OOM</a></li>
<li><a href="http://blog.csdn.net/vipzjyno1/article/details/23542617" target="_blank" rel="external">Android 命名规范</a></li>
<li><a href="https://github.com/tianzhijiexian/Android-Best-Practices/blob/master/2015.10/adapter/adapter.md" target="_blank" rel="external">Adapter 优化方案的探索</a></li>
<li><a href="https://github.com/tangqi92/Android-Tips" target="_blank" rel="external">Android-Tips</a></li>
<li><a href="http://adbshell.com/" target="_blank" rel="external">最全 Android ADB Shell</a></li>
<li><a href="https://github.com/CharonChui/AndroidNote" target="_blank" rel="external">AndroidNote</a></li>
<li><a href="https://github.com/l123456789jy/Lazy" target="_blank" rel="external">Android 常用工具类</a></li>
<li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0218/3978.html" target="_blank" rel="external">创建安卓 app 的 30 个经验教训</a></li>
<li><a href="http://www.trinea.cn/android/android-image-cache-compare/" target="_blank" rel="external">Android 三大图片缓存原理、特性对比</a></li>
<li><a href="http://www.trinea.cn/android/performance/" target="_blank" rel="external">Android 性能优化总结</a></li>
<li><a href="http://www.eoeandroid.com/thread-570919-1-1.html" target="_blank" rel="external">Android 实用代码片段整合 </a></li>
<li><a href="http://www.phpxs.com/code/1001775" target="_blank" rel="external">36 个 Android 开发常用代码片段</a></li>
<li><a href="https://github.com/jiang111/awesome-android-tips" target="_blank" rel="external">收集了大家常用的一些 Android 的模板代码</a></li>
<li><a href="http://keeganlee.me/post/android/20150709" target="_blank" rel="external">Android 技术积累: 开发规范</a></li>
<li><a href="http://keeganlee.me/post/architecture/20160114" target="_blank" rel="external">App 架构设计经验谈</a></li>
<li><a href="http://blog.csdn.net/yyh352091626/article/details/50957851" target="_blank" rel="external">关于 Android 开发的 40 条优化建议</a></li>
<li><a href="http://gold.xitu.io/entry/56cd6ebb99a6ce005a2887e3" target="_blank" rel="external">如何提高安卓代码的质量和语法</a></li>
<li><a href="http://www.jianshu.com/p/4f152bc8f4f3" target="_blank" rel="external">我的 Android 开发实战经验总结</a></li>
<li><a href="http://www.wangchenlong.org/2016/02/23/tips/1603/231-android-tips-1/" target="_blank" rel="external">Android Tips 系列</a></li>
<li><a href="http://www.jianshu.com/p/28111d29eee4" target="_blank" rel="external">如何自学 Android</a></li>
<li><a href="http://www.jianshu.com/p/011eb88f4e0d" target="_blank" rel="external">你所不知道的Android Studio调试技巧</a></li>
</ul>
<h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><ul>
<li><a href="http://j.codekk.com/blogs/detail/5705bcdf4a38205862ef4770" target="_blank" rel="external">80% 以上简历都是不合格的</a></li>
<li><a href="http://j.codekk.com/blogs/detail/5705bcdf4a38205862ef476f" target="_blank" rel="external">推荐两个技术简历模板</a></li>
<li><a href="https://mdluo.github.io/blog/about-resume/" target="_blank" rel="external">关于程序员求职简历</a></li>
<li><a href="https://github.com/JackyAndroid/AndroidInterview-Q-A" target="_blank" rel="external">国内一线互联网公司内部面试题库</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes" target="_blank" rel="external">LearningNotes</a> (非常详细的面试资料, 涉及 Android, Java, 设计模式, 算法等)</li>
<li><a href="https://zhuanlan.zhihu.com/p/21565914" target="_blank" rel="external">Android 面试那些事儿</a></li>
<li><a href="http://lucida.me/blog/lean-technical-resume/" target="_blank" rel="external">精益技术简历之道——改善技术简历的47条原则</a></li>
<li><a href="http://www.jianshu.com/p/d1efe2f31b6d" target="_blank" rel="external">史上最全 Android 面试资料集合</a></li>
</ul>
<h2 id="Git-教程"><a href="#Git-教程" class="headerlink" title="Git 教程"></a>Git 教程</h2><p>新手看完这几份教程基本上知道怎么使用 Git 了</p>
<ul>
<li><a href="http://jlord.us/git-it/challenges/get_git.html" target="_blank" rel="external">GitHub 团队美女写的一套 Git 使用教程</a></li>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">ProGit 中文版</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的 Git 教程</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">Git 简易指南</a></li>
<li><a href="https://github.com/git-tips/tips" target="_blank" rel="external">git-tips</a>(Git 命令集合)</li>
</ul>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul>
<li><a href="http://developer.android.com/reference/android/package-summary.html" target="_blank" rel="external">Android 官方 API 文档</a>(网站需要翻墙，不翻墙可以<a href="http://pan.baidu.com/s/1dDu3LVb" target="_blank" rel="external">下载</a>离线文件)</li>
<li><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">Android 官方培训课程中文版</a>(由胡凯发起对 Google Android 官方培训课程翻译的中文版)</li>
</ul>
<h2 id="其它资料收集"><a href="#其它资料收集" class="headerlink" title="其它资料收集"></a>其它资料收集</h2><ul>
<li><a href="http://www.eoeandroid.com/forum.php?mod=viewthread&amp;tid=571335&amp;highlight=10%E4%B8%AA%E5%BE%88%E6%A3%92" target="_blank" rel="external">10 个很棒的学习 Android 开发的网站</a></li>
<li><a href="http://android.jobbole.com/80815/" target="_blank" rel="external">Android 开发, 你应该知道的学习资源</a></li>
<li><a href="https://github.com/ColorfulCat/AndroidGuide" target="_blank" rel="external">AndroidCat 安卓书签网</a></li>
<li><a href="http://www.jianshu.com/p/e961f1633d7a" target="_blank" rel="external">每个 Android 开发者都应该了解的资源列表</a></li>
<li><a href="http://www.jianshu.com/p/54902270249d" target="_blank" rel="external">Android 开发者网址导航</a></li>
<li><a href="https://github.com/ruijun/Android-Dev-Favorites" target="_blank" rel="external">Android 开发收藏夹</a></li>
<li><a href="https://github.com/Tim9Liu9/TimLiu-Android" target="_blank" rel="external">TimLiu-Android</a>(TimLiu 总结的 Android 开源项目及库)</li>
<li><a href="https://github.com/JohnTsaiAndroid/AndroidTips" target="_blank" rel="external">AndroidTips</a></li>
<li><a href="https://github.com/Blankj/AndroidUtilCode" target="_blank" rel="external">Android 开发人员不得不收集的代码</a></li>
<li><a href="https://github.com/Juude/Awesome-Android-Architecture" target="_blank" rel="external">Android 架构合集</a></li>
<li><a href="https://github.com/CameloeAnthony/AndroidArchitectureCollection" target="_blank" rel="external">AndroidArchitectureCollection</a></li>
<li><a href="https://github.com/lizhangqu/CoreLink" target="_blank" rel="external">Android 开发中的日常积累</a></li>
<li><a href="http://blog.chengyunfeng.com/?p=1020" target="_blank" rel="external">2016安卓开发资料大全</a></li>
</ul>
<h2 id="知乎上的讨论"><a href="#知乎上的讨论" class="headerlink" title="知乎上的讨论"></a>知乎上的讨论</h2><ul>
<li><a href="http://www.zhihu.com/question/19775981" target="_blank" rel="external">有哪些 Android 大牛的 blog 值得推荐?</a></li>
<li><a href="http://www.zhihu.com/question/23804819" target="_blank" rel="external">GitHub 上都有哪些值得关注学习的 Android项目?</a></li>
<li><a href="https://www.zhihu.com/question/28481864" target="_blank" rel="external">GitHub 上有哪些适合新人围观的 Android 项目?</a></li>
<li><a href="http://www.zhihu.com/question/28841081" target="_blank" rel="external">2015 年移动设备界面设计有哪些趋势?</a></li>
<li><a href="http://www.zhihu.com/question/33636939" target="_blank" rel="external">Android开发中, 有哪些让你觉得相见恨晚的方法,类或接口?</a></li>
<li><a href="https://www.zhihu.com/question/28527388" target="_blank" rel="external">Android Studio有哪些非常好用的插件?</a></li>
<li><a href="https://www.zhihu.com/question/32037895" target="_blank" rel="external">Android 开发有哪些新技术出现?</a></li>
<li><a href="https://www.zhihu.com/question/19804692" target="_blank" rel="external">有哪些优秀的 Android 应用开源项目, 特效, 设计资料推荐?</a></li>
<li><a href="https://www.zhihu.com/question/26687642" target="_blank" rel="external">有没有适合 Android 开发初学者的 App 源码推荐?</a></li>
<li><a href="https://www.zhihu.com/question/29939631" target="_blank" rel="external">Android有什么好的技术点适合进行技术分享?</a></li>
<li><a href="https://www.zhihu.com/question/27482725" target="_blank" rel="external">Android Studio有什么奇技淫巧?</a></li>
<li><a href="https://www.zhihu.com/question/37433825" target="_blank" rel="external">Android 开发: 开始一个项目前, 做好哪些准备可以事半功倍?</a></li>
<li><a href="https://www.zhihu.com/question/27227425" target="_blank" rel="external">大家有哪些好的 Android 开发习惯?</a></li>
<li><a href="https://www.zhihu.com/question/21406685" target="_blank" rel="external">Android 开发有什么好的架构么?</a></li>
</ul>
<h1 id="List-of-Android-Libraries-3"><a href="#List-of-Android-Libraries-3" class="headerlink" title="List of Android Libraries[3]"></a>List of Android Libraries<sup>[3]</sup></h1><p>This is an alphabetical list of libraries for Android development, the majority being actively maintained.</p>
<p><strong>UI/UX Library is <a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">here</a>.</strong></p>
<h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><ul>
<li><a href="#networking">Networking</a></li>
<li><a href="#image-loader">Image Loader</a></li>
<li><a href="#drawable">Drawable</a></li>
<li><a href="#dependency-injections">Dependency Injections</a></li>
<li><a href="#json">JSON</a></li>
<li><a href="#or-mapping">O/R Mapping</a></li>
<li><a href="#nosql">NoSQL</a></li>
<li><a href="#pubsub">Pub/Sub</a></li>
<li><a href="#logger">Logger</a></li>
<li><a href="#background-processing">Background Processing</a></li>
<li><a href="#fonts">Fonts</a></li>
<li><a href="#video">Video</a></li>
<li><a href="#parcelables">Parcelables</a></li>
<li><a href="#functional-programming">Functional Programming</a><ul>
<li><a href="#adding-java-8-functional-programming-features">Adding Java-8 Functional Programming Features</a></li>
<li><a href="#functional-reactive-programming">Functional Reactive Programming</a></li>
</ul>
</li>
<li><a href="#social-networks">Social Networks</a></li>
<li><a href="#webrtc">WebRTC</a></li>
<li><a href="#image-processing">Image Processing</a></li>
<li><a href="#camera">Camera</a></li>
<li><a href="#security">Security</a></li>
<li><a href="#media">Media</a></li>
<li><a href="#showcases">Showcases</a></li>
<li><a href="#maps">Maps</a></li>
<li><a href="#other">Other</a></li>
</ul>
<h2 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://loopj.com/android-async-http" target="_blank" rel="external">Android Asynchronous Http Client</a></td>
<td><a href="https://github.com/loopj/android-async-http" target="_blank" rel="external">https://github.com/loopj/android-async-http</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="external">Async Http Client</a></td>
<td><a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="external">https://github.com/AsyncHttpClient/async-http-client</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/koush/ion" target="_blank" rel="external">ion</a></td>
<td><a href="https://github.com/koush/ion" target="_blank" rel="external">https://github.com/koush/ion</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp</a></td>
<td><a href="https://github.com/square/okhttp" target="_blank" rel="external">https://github.com/square/okhttp</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://square.github.io/retrofit/" target="_blank" rel="external">Retrofit</a></td>
<td><a href="https://github.com/square/retrofit" target="_blank" rel="external">https://github.com/square/retrofit</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/ReactiveX/RxNetty" target="_blank" rel="external">RxNetty</a></td>
<td><a href="https://github.com/ReactiveX/RxNetty" target="_blank" rel="external">https://github.com/ReactiveX/RxNetty</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://code.google.com/p/basic-http-client/" target="_blank" rel="external">Basic HTTP Client for Java</a></td>
<td><a href="https://code.google.com/p/basic-http-client/" target="_blank" rel="external">https://code.google.com/p/basic-http-client/</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Image-Loader"><a href="#Image-Loader" class="headerlink" title="Image Loader"></a>Image Loader</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/bumptech/glide" target="_blank" rel="external">Glide</a></td>
<td><a href="https://github.com/bumptech/glide" target="_blank" rel="external">https://github.com/bumptech/glide</a></td>
<td><a href="https://github.com/bumptech/glide/blob/master/LICENSE" target="_blank" rel="external"> License</a></td>
</tr>
<tr>
<td><a href="https://github.com/koush/ion" target="_blank" rel="external">ion</a></td>
<td><a href="https://github.com/koush/ion" target="_blank" rel="external">https://github.com/koush/ion</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://square.github.io/picasso" target="_blank" rel="external">Picasso</a></td>
<td><a href="https://github.com/square/picasso" target="_blank" rel="external">https://github.com/square/picasso</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">Universal Image Loader</a></td>
<td><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">https://github.com/nostra13/Android-Universal-Image-Loader</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://frescolib.org" target="_blank" rel="external">Fresco</a></td>
<td><a href="https://github.com/facebook/fresco" target="_blank" rel="external">https://github.com/facebook/fresco</a></td>
<td><a href="https://github.com/facebook/fresco/blob/master/LICENSE" target="_blank" rel="external">BSD License</a></td>
</tr>
</tbody>
</table>
<h2 id="Drawable"><a href="#Drawable" class="headerlink" title="Drawable"></a>Drawable</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/telly/MrVector" target="_blank" rel="external">MrVector</a></td>
<td><a href="https://github.com/telly/MrVector" target="_blank" rel="external">https://github.com/telly/MrVector</a></td>
<td><a href="https://github.com/telly/MrVector/blob/master/LICENSE" target="_blank" rel="external">License</a></td>
</tr>
</tbody>
</table>
<h2 id="Dependency-Injections"><a href="#Dependency-Injections" class="headerlink" title="Dependency Injections"></a>Dependency Injections</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://androidannotations.org/" target="_blank" rel="external">AndroidAnnotations</a></td>
<td><a href="https://github.com/excilys/androidannotations" target="_blank" rel="external">https://github.com/excilys/androidannotations</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="external">Butter Knife</a></td>
<td><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">https://github.com/JakeWharton/butterknife</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://square.github.io/dagger/" target="_blank" rel="external">Dagger(Square)</a></td>
<td><a href="https://github.com/square/dagger" target="_blank" rel="external">https://github.com/square/dagger</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/google/dagger" target="_blank" rel="external">Dagger(Google)</a></td>
<td><a href="https://github.com/google/dagger" target="_blank" rel="external">https://github.com/google/dagger</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/roboguice/roboguice" target="_blank" rel="external">RoboGuice</a></td>
<td><a href="https://github.com/roboguice/roboguice" target="_blank" rel="external">https://github.com/roboguice/roboguice</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/emmano/Scopes" target="_blank" rel="external">Scopes</a></td>
<td><a href="https://github.com/emmano/Scopes" target="_blank" rel="external">https://github.com/emmano/Scopes</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
</tr>
</tbody>
</table>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://code.google.com/p/google-gson/" target="_blank" rel="external">Gson</a></td>
<td><a href="http://google-gson.googlecode.com/svn/trunk/" target="_blank" rel="external">http://google-gson.googlecode.com/svn/trunk/</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/Instagram/ig-json-parser" target="_blank" rel="external">ig-json-parser</a></td>
<td><a href="https://github.com/Instagram/ig-json-parser" target="_blank" rel="external">https://github.com/Instagram/ig-json-parser</a></td>
<td><a href="https://en.wikipedia.org/wiki/BSD_licenses" target="_blank" rel="external">BSD</a></td>
</tr>
<tr>
<td><a href="http://jackson.codehaus.org/" target="_blank" rel="external">Jackson</a></td>
<td><a href="https://github.com/FasterXML/jackson" target="_blank" rel="external">https://github.com/FasterXML/jackson</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="O-R-Mapping"><a href="#O-R-Mapping" class="headerlink" title="O/R Mapping"></a>O/R Mapping</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.activeandroid.com/" target="_blank" rel="external">ActiveAndroid</a></td>
<td><a href="https://github.com/pardom/ActiveAndroid" target="_blank" rel="external">https://github.com/pardom/ActiveAndroid</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://bitbucket.org/littlerobots/cupboard" target="_blank" rel="external">Cupboard for Android</a></td>
<td><a href="https://bitbucket.org/littlerobots/cupboard" target="_blank" rel="external">https://bitbucket.org/littlerobots/cupboard</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/Raizlabs/DBFlow" target="_blank" rel="external">DBFlow</a></td>
<td><a href="https://github.com/Raizlabs/DBFlow" target="_blank" rel="external">https://github.com/Raizlabs/DBFlow</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
</tr>
<tr>
<td><a href="http://greendao-orm.com/" target="_blank" rel="external">greenDAO</a></td>
<td><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">https://github.com/greenrobot/greenDAO</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://www.rushorm.com/" target="_blank" rel="external">RushOrm</a></td>
<td><a href="https://github.com/Stuart-campbell/RushOrm" target="_blank" rel="external">https://github.com/Stuart-campbell/RushOrm</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://satyan.github.io/sugar/" target="_blank" rel="external">Sugar ORM</a></td>
<td><a href="https://github.com/satyan/sugar" target="_blank" rel="external">https://github.com/satyan/sugar</a></td>
<td><a href="https://github.com/satyan/sugar/blob/master/LICENSE" target="_blank" rel="external">Satya Narayan</a></td>
</tr>
<tr>
<td><a href="https://github.com/pieces029/shillelagh" target="_blank" rel="external">Shillelagh</a></td>
<td><a href="https://github.com/pieces029/shillelagh" target="_blank" rel="external">https://github.com/pieces029/shillelagh</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/square/sqlbrite" target="_blank" rel="external">SQLBrite</a></td>
<td><a href="https://github.com/square/sqlbrite" target="_blank" rel="external">https://github.com/square/sqlbrite</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/pardom/Ollie" target="_blank" rel="external">Ollie</a></td>
<td><a href="https://github.com/pardom/Ollie" target="_blank" rel="external">https://github.com/pardom/Ollie</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/HendrixString/Android-TriOrm" target="_blank" rel="external">TriOrm</a></td>
<td><a href="https://github.com/HendrixString/Android-TriOrm" target="_blank" rel="external">https://github.com/HendrixString/Android-TriOrm</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://developer.couchbase.com/mobile/" target="_blank" rel="external">Couchbase-Lite-Android</a></td>
<td><a href="https://github.com/couchbase/couchbase-lite-android" target="_blank" rel="external">https://github.com/couchbase/couchbase-lite-android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://realm.io/" target="_blank" rel="external">Realm</a></td>
<td><a href="https://github.com/realm/realm-java" target="_blank" rel="external">https://github.com/realm/realm-java</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/Jearil/SimpleNoSQL" target="_blank" rel="external">SimpleNoSQL</a></td>
<td><a href="https://github.com/Jearil/SimpleNoSQL" target="_blank" rel="external">https://github.com/Jearil/SimpleNoSQL</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/xmartlabs/RxSimpleNoSQL" target="_blank" rel="external">RxSimpleNoSQL</a></td>
<td><a href="https://github.com/xmartlabs/RxSimpleNoSQL" target="_blank" rel="external">https://github.com/xmartlabs/RxSimpleNoSQL</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://www.snappydb.com/" target="_blank" rel="external">SnappyDB</a></td>
<td><a href="https://github.com/nhachicha/SnappyDB" target="_blank" rel="external">https://github.com/nhachicha/SnappyDB</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Pub-Sub"><a href="#Pub-Sub" class="headerlink" title="Pub/Sub"></a>Pub/Sub</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a></td>
<td><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">https://github.com/greenrobot/EventBus</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://square.github.io/otto/" target="_blank" rel="external">Otto</a></td>
<td><a href="https://github.com/square/otto" target="_blank" rel="external">https://github.com/square/otto</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/bennidi/mbassador" target="_blank" rel="external">MBassador</a></td>
<td><a href="https://github.com/bennidi/mbassador" target="_blank" rel="external">https://github.com/bennidi/mbassador</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
</tr>
</tbody>
</table>
<h2 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">Hugo</a></td>
<td><a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">https://github.com/JakeWharton/hugo</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/timber" target="_blank" rel="external">Timber</a></td>
<td><a href="https://github.com/JakeWharton/timber" target="_blank" rel="external">https://github.com/JakeWharton/timber</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/ihsanbal/LoggingInterceptor" target="_blank" rel="external">LoggingInterceptor</a></td>
<td><a href="https://github.com/ihsanbal/LoggingInterceptor" target="_blank" rel="external">https://github.com/ihsanbal/LoggingInterceptor</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
</tr>
</tbody>
</table>
<h2 id="Background-Processing"><a href="#Background-Processing" class="headerlink" title="Background Processing"></a>Background Processing</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/path/android-priority-jobqueue" target="_blank" rel="external">Android Priority Job Queue</a></td>
<td><a href="https://github.com/path/android-priority-jobqueue" target="_blank" rel="external">https://github.com/path/android-priority-jobqueue</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
</tr>
<tr>
<td><a href="http://square.github.io/tape/" target="_blank" rel="external">Tape</a></td>
<td><a href="https://github.com/square/tape" target="_blank" rel="external">https://github.com/square/tape</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/HendrixString/Android-Zorn" target="_blank" rel="external">Zorn</a></td>
<td><a href="https://github.com/HendrixString/Android-Zorn" target="_blank" rel="external">https://github.com/HendrixString/Android-Zorn</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Fonts"><a href="#Fonts" class="headerlink" title="Fonts"></a>Fonts</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/chrisjenx/Calligraphy" target="_blank" rel="external">Calligraphy</a></td>
<td><a href="https://github.com/chrisjenx/Calligraphy" target="_blank" rel="external">https://github.com/chrisjenx/Calligraphy</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/google/ExoPlayer" target="_blank" rel="external">ExoPlayer</a></td>
<td><a href="https://github.com/google/ExoPlayer" target="_blank" rel="external">https://github.com/google/ExoPlayer</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/bbcallen/ijkplayer" target="_blank" rel="external">ijkplayer</a></td>
<td><a href="https://github.com/bbcallen/ijkplayer" target="_blank" rel="external">https://github.com/bbcallen/ijkplayer</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://code.google.com/p/mp4parser/" target="_blank" rel="external">mp4parser</a></td>
<td><a href="https://github.com/sannies/mp4parser" target="_blank" rel="external">https://github.com/sannies/mp4parser</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Parcelables"><a href="#Parcelables" class="headerlink" title="Parcelables"></a>Parcelables</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/frankiesardo/auto-parcel" target="_blank" rel="external">AutoParcel</a></td>
<td><a href="https://github.com/frankiesardo/auto-parcel" target="_blank" rel="external">https://github.com/frankiesardo/auto-parcel</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/tom91136/Akatsuki" target="_blank" rel="external">Akatsuki</a></td>
<td><a href="https://github.com/tom91136/Akatsuki" target="_blank" rel="external">https://github.com/tom91136/Akatsuki</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/frankiesardo/icepick" target="_blank" rel="external">Icepick</a></td>
<td><a href="https://github.com/frankiesardo/icepick" target="_blank" rel="external">https://github.com/frankiesardo/icepick</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/johncarl81/parceler" target="_blank" rel="external">Parceler</a></td>
<td><a href="https://github.com/johncarl81/parceler" target="_blank" rel="external">https://github.com/johncarl81/parceler</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h2><h4 id="Adding-Java-8-Functional-Programming-Features"><a href="#Adding-Java-8-Functional-Programming-Features" class="headerlink" title="Adding Java-8 Functional Programming Features"></a>Adding Java-8 Functional Programming Features</h4><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/orfjackal/retrolambda" target="_blank" rel="external">Retrolambda</a></td>
<td><a href="https://github.com/orfjackal/retrolambda" target="_blank" rel="external">https://github.com/orfjackal/retrolambda</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h4 id="Functional-Reactive-Programming"><a href="#Functional-Reactive-Programming" class="headerlink" title="Functional Reactive Programming"></a>Functional Reactive Programming</h4><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">RxAndroid</a></td>
<td><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">https://github.com/ReactiveX/RxAndroid</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a></td>
<td><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">https://github.com/ReactiveX/RxJava</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Social-Networks"><a href="#Social-Networks" class="headerlink" title="Social Networks"></a>Social Networks</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/gorbin/ASNE" target="_blank" rel="external">ASNE</a></td>
<td><a href="https://github.com/gorbin/ASNE" target="_blank" rel="external">https://github.com/gorbin/ASNE</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
</tr>
<tr>
<td><a href="https://developers.facebook.com/docs/android" target="_blank" rel="external">Facebook SDK</a></td>
<td><a href="https://github.com/facebook/facebook-android-sdk" target="_blank" rel="external">https://github.com/facebook/facebook-android-sdk</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://dev.twitter.com/products/fabric" target="_blank" rel="external">Twitter Fabric</a></td>
<td>Unknown</td>
<td>Unknown</td>
</tr>
</tbody>
</table>
<h2 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/pchab/AndroidRTC" target="_blank" rel="external">AndroidRTC</a></td>
<td><a href="https://github.com/pchab/AndroidRTC" target="_blank" rel="external">https://github.com/pchab/AndroidRTC</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Image-Processing"><a href="#Image-Processing" class="headerlink" title="Image Processing"></a>Image Processing</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/CyberAgent/android-gpuimage" target="_blank" rel="external">GPUImage for Android</a></td>
<td><a href="https://github.com/CyberAgent/android-gpuimage" target="_blank" rel="external">https://github.com/CyberAgent/android-gpuimage</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Camera"><a href="#Camera" class="headerlink" title="Camera"></a>Camera</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/jmolsmobile/LandscapeVideoCamera" target="_blank" rel="external">Landscape video camera</a></td>
<td><a href="https://github.com/jmolsmobile/LandscapeVideoCamera" target="_blank" rel="external">https://github.com/jmolsmobile/LandscapeVideoCamera</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/Glamdring/EasyCamera" target="_blank" rel="external">EasyCamera</a></td>
<td><a href="https://github.com/Glamdring/EasyCamera" target="_blank" rel="external">https://github.com/Glamdring/EasyCamera</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/facebook/buck" target="_blank" rel="external">Buck</a></td>
<td><a href="https://github.com/facebook/buck" target="_blank" rel="external">https://github.com/facebook/buck</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/lukeFalsina/Grab-n-Run" target="_blank" rel="external">Grab’n Run</a></td>
<td><a href="https://github.com/lukeFalsina/Grab-n-Run" target="_blank" rel="external">https://github.com/lukeFalsina/Grab-n-Run</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Media"><a href="#Media" class="headerlink" title="Media"></a>Media</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/HendrixString/Android-PdfMyXml" target="_blank" rel="external">PdfMyXml</a></td>
<td><a href="https://github.com/HendrixString/Android-PdfMyXml" target="_blank" rel="external">https://github.com/HendrixString/Android-PdfMyXml</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Showcases"><a href="#Showcases" class="headerlink" title="Showcases"></a>Showcases</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">android-best-practices</a></td>
<td><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">https://github.com/futurice/android-best-practices</a></td>
<td><a href="https://creativecommons.org/licenses/by/4.0/legalcode" target="_blank" rel="external">CC BY 4.0</a></td>
</tr>
<tr>
<td><a href="https://github.com/patrickfav/BlurTestAndroid" target="_blank" rel="external">BlurTestAndroid</a></td>
<td><a href="https://github.com/patrickfav/BlurTestAndroid" target="_blank" rel="external">https://github.com/patrickfav/BlurTestAndroid</a></td>
<td>Unknown</td>
</tr>
<tr>
<td><a href="https://github.com/card-io/card.io-Android-source" target="_blank" rel="external">card.io-Android-source</a></td>
<td><a href="https://github.com/card-io/card.io-Android-source" target="_blank" rel="external">https://github.com/card-io/card.io-Android-source</a></td>
<td><a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">MIT</a></td>
</tr>
<tr>
<td><a href="https://github.com/google/iosched" target="_blank" rel="external">iosched</a></td>
<td><a href="https://github.com/google/iosched" target="_blank" rel="external">https://github.com/google/iosched</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/psaravan/JamsMusicPlayer" target="_blank" rel="external">JamsMusicPlayer</a></td>
<td><a href="https://github.com/psaravan/JamsMusicPlayer" target="_blank" rel="external">https://github.com/psaravan/JamsMusicPlayer</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/stephanenicolas/reflection-no-reflection" target="_blank" rel="external">Reflection No Reflection</a></td>
<td><a href="https://github.com/stephanenicolas/reflection-no-reflection" target="_blank" rel="external">https://github.com/stephanenicolas/reflection-no-reflection</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://mizuu.tv/" target="_blank" rel="external">Mizuu</a></td>
<td><a href="https://github.com/MizzleDK/Mizuu" target="_blank" rel="external">https://github.com/MizzleDK/Mizuu</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="http://mover.uz" target="_blank" rel="external">Mover</a></td>
<td><a href="https://github.com/Codetail/Mover" target="_blank" rel="external">https://github.com/Codetail/Mover</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/klinker24/Talon-for-Twitter" target="_blank" rel="external">Talon-for-Twitter</a></td>
<td><a href="https://github.com/klinker24/Talon-for-Twitter" target="_blank" rel="external">https://github.com/klinker24/Talon-for-Twitter</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/Telecine" target="_blank" rel="external">Telecine</a></td>
<td><a href="https://github.com/JakeWharton/Telecine" target="_blank" rel="external">https://github.com/JakeWharton/Telecine</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/u2020" target="_blank" rel="external">u2020</a></td>
<td><a href="https://github.com/JakeWharton/u2020" target="_blank" rel="external">https://github.com/JakeWharton/u2020</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://graphhopper.com" target="_blank" rel="external">GraphHopper</a></td>
<td><a href="https://github.com/graphhopper/graphhopper" target="_blank" rel="external">https://github.com/graphhopper/graphhopper</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/mapsforge/mapsforge" target="_blank" rel="external">Mapsforge</a></td>
<td><a href="https://github.com/mapsforge/mapsforge" target="_blank" rel="external">https://github.com/mapsforge/mapsforge</a></td>
<td><a href="https://www.gnu.org/licenses/lgpl.html" target="_blank" rel="external">LGPL</a></td>
</tr>
</tbody>
</table>
<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Repository</th>
<th>License</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/dlew/joda-time-android" target="_blank" rel="external">Joda Time Android</a></td>
<td><a href="https://github.com/dlew/joda-time-android" target="_blank" rel="external">https://github.com/dlew/joda-time-android</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
<tr>
<td><a href="https://github.com/BoltsFramework/Bolts-Android" target="_blank" rel="external">Bolts</a></td>
<td><a href="https://github.com/BoltsFramework/Bolts-Android" target="_blank" rel="external">https://github.com/BoltsFramework/Bolts-Android</a></td>
<td><a href="https://en.wikipedia.org/wiki/BSD_licenses" target="_blank" rel="external">BSD</a></td>
</tr>
<tr>
<td><a href="http://prashantsolanki3.github.io/Secure-Pref-Manager/" target="_blank" rel="external">Secure Preference Manager</a></td>
<td><a href="http://prashantsolanki3.github.io/Secure-Pref-Manager/" target="_blank" rel="external">http://prashantsolanki3.github.io/Secure-Pref-Manager/</a></td>
<td><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License V2</a></td>
</tr>
</tbody>
</table>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md" target="_blank" rel="external">GitHub Android Libraries Top 100 简介</a><br>[2]<a href="https://github.com/Freelander/Android_Data" target="_blank" rel="external">Android 学习资料收集</a><br>[3]<a href="https://github.com/wasabeef/awesome-android-libraries" target="_blank" rel="external">List of Android Libraries</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本项目主要对目前 GitHub 上排名前 100 的 Android 开源库进行简单的介绍, 至于排名完全是根据 GitHub 搜索 Java 语言选择 (Best Match) 得到的结果, 然后过滤了跟 Android 不相关的项目, 所以排名并不具备任何官方效力, 仅供参考学习, 方便初学者快速了解当前一些流行的 Android 开源库.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
      <category term="GitHub" scheme="http://ipcreator.me/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Android Open Source Projects Organized by Trinea</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Android/3rdLib/catagory-of-open-sources-projects-of-android/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Android/3rdLib/catagory-of-open-sources-projects-of-android/</id>
    <published>2017-03-30T14:24:06.000Z</published>
    <updated>2017-03-30T15:17:56.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目前包括："><a href="#目前包括：" class="headerlink" title="目前包括："></a>目前包括：</h2><blockquote>
<p><a href="https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E4%B8%AA%E6%80%A7%E5%8C%96%E6%8E%A7%E4%BB%B6view" target="_blank" rel="external">Android 开源项目第一篇——个性化控件(View)篇</a><br><em>&nbsp;&nbsp;包括<br><a href="https://github.com/Trinea/android-open-project#%E4%B8%80listview" target="_blank" rel="external">ListView</a>、<a href="https://github.com/Trinea/android-open-project#%E4%BA%8Cactionbar" target="_blank" rel="external">ActionBar</a>、<a href="https://github.com/Trinea/android-open-project#%E4%B8%89menu" target="_blank" rel="external">Menu</a>、<a href="https://github.com/Trinea/android-open-project#%E5%9B%9Bviewpager-gallery" target="_blank" rel="external">ViewPager</a>、<a href="https://github.com/Trinea/android-open-project#%E5%9B%9Bviewpager-gallery" target="_blank" rel="external">Gallery</a>、<a href="https://github.com/Trinea/android-open-project#%E4%BA%94gridview" target="_blank" rel="external">GridView</a>、<a href="https://github.com/Trinea/android-open-project#%E5%85%ADimageview" target="_blank" rel="external">ImageView</a>、<a href="https://github.com/Trinea/android-open-project#%E4%B8%83progressbar" target="_blank" rel="external">ProgressBar</a>、<a href="https://github.com/Trinea/android-open-project#%E5%85%ABtextview" target="_blank" rel="external">TextView</a>、<a href="https://github.com/Trinea/android-open-project#%E4%B9%9Dscrollview" target="_blank" rel="external">ScrollView</a>、<a href="https://github.com/Trinea/android-open-project#%E5%8D%81timeview" target="_blank" rel="external">TimeView</a>、<a href="https://github.com/Trinea/android-open-project#%E5%8D%81%E4%B8%80tipview" target="_blank" rel="external">TipView</a>、<a href="https://github.com/Trinea/android-open-project#%E5%8D%81%E4%BA%8Cflipview" target="_blank" rel="external">FlipView</a>、<a href="https://github.com/Trinea/android-open-project#%E5%8D%81%E4%B8%89colorpickview" target="_blank" rel="external">ColorPickView</a>、<a href="https://github.com/Trinea/android-open-project#%E5%8D%81%E5%9B%9Bgraphview" target="_blank" rel="external">GraphView</a>、<a href="https://github.com/Trinea/android-open-project#%E5%8D%81%E4%BA%94ui-style" target="_blank" rel="external">UI Style</a>、<a href="https://github.com/Trinea/android-open-project#十六其他" target="_blank" rel="external">其他</a></em>  </p>
<p><a href="https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E5%B7%A5%E5%85%B7%E5%BA%93" target="_blank" rel="external">Android 开源项目第二篇——工具库篇</a><br><em>&nbsp;&nbsp;包括<a href="https://github.com/Trinea/android-open-project#一依赖注入-di" target="_blank" rel="external">依赖注入</a>、<a href="https://github.com/Trinea/android-open-project#二图片缓存" target="_blank" rel="external">图片缓存</a>、<a href="https://github.com/Trinea/android-open-project#三网络请求" target="_blank" rel="external">网络请求</a>、<a href="https://github.com/Trinea/android-open-project#四数据库-orm-工具包" target="_blank" rel="external">数据库 ORM 工具包</a>、<a href="https://github.com/Trinea/android-open-project#五android-公共库" target="_blank" rel="external">Android 公共库</a>、<a href="https://github.com/Trinea/android-open-project#六android-高版本向低版本兼容" target="_blank" rel="external">高版本向低版本兼容库</a>、<a href="https://github.com/Trinea/android-open-project#七多媒体相关" target="_blank" rel="external">多媒体</a>、<a href="https://github.com/Trinea/android-open-project#八事件总线订阅者模式" target="_blank" rel="external">事件总线</a>、<a href="https://github.com/Trinea/android-open-project#九传感器" target="_blank" rel="external">传感器</a>、<a href="https://github.com/Trinea/android-open-project#十安全" target="_blank" rel="external">安全</a>、<a href="https://github.com/Trinea/android-open-project#十一插件化" target="_blank" rel="external">插件化</a>、<a href="https://github.com/Trinea/android-open-project#十二文件" target="_blank" rel="external">文件</a>、<a href="https://github.com/Trinea/android-open-project#十三其他" target="_blank" rel="external">其他</a></em>  </p>
<p><a href="https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86-%E4%BC%98%E7%A7%80%E9%A1%B9%E7%9B%AE" target="_blank" rel="external">Android 开源项目第三篇——优秀项目篇</a><br><em>&nbsp;&nbsp;比较有意思的完整的 Android 项目</em>  </p>
<p><a href="https://github.com/Trinea/android-open-project#%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7" target="_blank" rel="external">Android 开源项目第四篇——开发及测试工具篇</a><br><em>&nbsp;&nbsp;包括<a href="https://github.com/Trinea/android-open-project#一开发效率工具" target="_blank" rel="external">开发效率工具</a>、<a href="https://github.com/Trinea/android-open-project#二开发自测相关" target="_blank" rel="external">开发自测相关</a>、<a href="https://github.com/Trinea/android-open-project#三测试工具" target="_blank" rel="external">测试工具</a>、<a href="https://github.com/Trinea/android-open-project#四开发及编译环境" target="_blank" rel="external">开发及编译环境</a>、<a href="https://github.com/Trinea/android-open-project#五其他" target="_blank" rel="external">其他</a></em>  </p>
<p><a href="https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86" target="_blank" rel="external">Android 开源项目第五篇——优秀个人和团体篇</a><br><em>&nbsp;&nbsp;乐于分享并且有一些很不错的开源项目的<a href="https://github.com/Trinea/android-open-project#一个人" target="_blank" rel="external">个人</a>和<a href="https://github.com/Trinea/android-open-project#二组织" target="_blank" rel="external">组织</a>，包括 JakeWharton、Chris Banes、Koushik Dutta 等大牛</em>  </p>
</blockquote>
<a id="more"></a>
<h1 id="Android-开源项目分类汇总-1"><a href="#Android-开源项目分类汇总-1" class="headerlink" title="Android 开源项目分类汇总[1]"></a>Android 开源项目分类汇总<sup>[1]<sup></sup></sup></h1><h2 id="第一部分-个性化控件-View"><a href="#第一部分-个性化控件-View" class="headerlink" title="第一部分 个性化控件(View)"></a>第一部分 个性化控件(View)</h2><p>主要介绍那些不错个性化的 View，包括 ListView、ActionBar、Menu、ViewPager、Gallery、GridView、ImageView、ProgressBar、TextView、ScrollView、TimeView、TipView、FlipView、ColorPickView、GraphView、UI Style 等等。  </p>
<h4 id="一、ListView"><a href="#一、ListView" class="headerlink" title="一、ListView"></a>一、ListView</h4><ol>
<li><p>android-pulltorefresh<br>一个强大的拉动刷新开源项目，支持各种控件下拉刷新，ListView、ViewPager、WebView、ExpandableListView、GridView、ScrollView、Horizontal  ScrollView、Fragment 上下左右拉动刷新，比下面 johannilsson 那个只支持 ListView 的强大的多。并且它实现的下拉刷新 ListView 在 item 不足一屏情况下也不会显示刷新提示，体验更好。<br>项目地址：<a href="https://github.com/chrisbanes/Android-PullToRefresh" target="_blank" rel="external">https://github.com/chrisbanes/Android-PullToRefresh</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true</a><br>APP 示例：新浪微博各个页面  </p>
</li>
<li><p>android-pulltorefresh-listview<br>下拉刷新 ListView，这个被很多人使用的项目实际有不少 bug，推荐使用 <a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">android-Ultra-Pull-to-Refresh</a><br>项目地址：<a href="https://github.com/johannilsson/android-pulltorefresh" target="_blank" rel="external">https://github.com/johannilsson/android-pulltorefresh</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true</a>  </p>
</li>
<li><p>android-Ultra-Pull-to-Refresh<br>下拉刷新，第一个项目已经停止维护了，并且使用起来相对复杂，定制性也差。这个是替代和改良方案。这个继承于 ViewGroup 可以包含任何 View。功能甚至比 SwipeRefreshLayout 强大。使用起来非常简单。良好的设计，如果你想定制自己的 UI 样式，非常简单，就像给 ListView 加一个 Header View 那么简单。支持 <code>API LEVEL &gt;= 8</code><br>项目地址：<a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/Grumoon/android-Ultra-Pull-To-Refresh 源码解析" target="_blank" rel="external">android-Ultra-Pull-to-Refresh</a><br>Demo 地址：<a href="https://raw.githubusercontent.com/liaohuqiu/android-Ultra-Pull-To-Refresh/master/ptr-demo.apk" target="_blank" rel="external">https://raw.githubusercontent.com/liaohuqiu/android-Ultra-Pull-To-Refresh/master/ptr-demo.apk</a><br>效果图：<img src="http://srain-github.qiniudn.com/ultra-ptr/contains-all-of-views.gif" alt="Renderings"><br><a href="http://srain-github.qiniudn.com/ultra-ptr/release-to-refresh.gif" target="_blank" rel="external">http://srain-github.qiniudn.com/ultra-ptr/release-to-refresh.gif</a><br><a href="http://srain-github.qiniudn.com/ultra-ptr/auto-refresh.gif" target="_blank" rel="external">http://srain-github.qiniudn.com/ultra-ptr/auto-refresh.gif</a><br><a href="http://srain-github.qiniudn.com/ultra-ptr/store-house-string-array.gif" target="_blank" rel="external">http://srain-github.qiniudn.com/ultra-ptr/store-house-string-array.gif</a>  </p>
</li>
<li><p>Android-PullToRefreshRecyclerView<br>支持下拉刷新的RecyclerView，同时支持滑动到底部自动加载数据、给RecyclerView添加Header。并且不更改原有RecyclerView的逻辑。<br><img src="https://github.com/HomHomLin/Android-PullToRefreshRecyclerView/blob/master/screenshot.gif" alt="Screenshot"><br>项目地址：<a href="https://github.com/HomHomLin/Android-PullToRefreshRecyclerView" target="_blank" rel="external">https://github.com/HomHomLin/Android-PullToRefreshRecyclerView</a><br>Demo地址：<a href="https://github.com/HomHomLin/Android-PullToRefreshRecyclerView/blob/master/sample.apk" target="_blank" rel="external">https://github.com/HomHomLin/Android-PullToRefreshRecyclerView/blob/master/sample.apk</a>  </p>
</li>
<li><p>DragSortListView<br>拖动排序的 ListView，同时支持 ListView 滑动 item 删除，各个 Item 高度不一、单选、复选、CursorAdapter 做为适配器、拖动背景变化等<br>项目地址：<a href="https://github.com/bauerca/drag-sort-listview" target="_blank" rel="external">https://github.com/bauerca/drag-sort-listview</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv</a><br>APP 示例：Wordpress Android  </p>
</li>
<li><p>SwipeListView<br>支持定义 ListView 左右滑动事件，支持左右滑动位移，支持定义动画时间<br>项目地址：<a href="https://github.com/47deg/android-swipelistview" target="_blank" rel="external">https://github.com/47deg/android-swipelistview</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview</a><br>APP 示例：微信</p>
</li>
<li><p>Android-SlidingLayout<br>实现类似QQ、微信ListView和WebView的上拉下拉弹跳效果和iOS的ListView的果冻效果。兼容Android自带库和兼容库的所有View组件，包括RecyclerView、ListView、ScrollView以及WebView等等。<br><img src="https://raw.githubusercontent.com/HomHomLin/SlidingLayout/master/pic/list.gif" alt="p1"><br><img src="https://raw.githubusercontent.com/HomHomLin/SlidingLayout/master/pic/webview.gif" alt="p2"><br>项目地址：<a href="https://github.com/HomHomLin/SlidingLayout/。" target="_blank" rel="external">https://github.com/HomHomLin/SlidingLayout/。</a><br>Demo地址：<a href="https://github.com/HomHomLin/SlidingLayout/tree/master/demo" target="_blank" rel="external">https://github.com/HomHomLin/SlidingLayout/tree/master/demo</a>  </p>
</li>
<li><p>SlideAndDragListView<br>支持ListView的Item的拖动排序、左右滑动事件，可自定义左右滑动显示文字、图标、位移，同时支持onItemClick、onItemLongClick等监听器，提供丰富的回调接口。<br>项目地址：<a href="https://github.com/yydcdut/SlideAndDragListView" target="_blank" rel="external">https://github.com/yydcdut/SlideAndDragListView</a><br>Demo 地址：<a href="https://github.com/yydcdut/SlideAndDragListView/blob/master/apk/sdlv.apk?raw=true" target="_blank" rel="external">https://github.com/yydcdut/SlideAndDragListView/blob/master/apk/sdlv.apk?raw=true</a><br>APP 示例：Android 手机QQ 5.0<br>效果图：<img src="https://raw.githubusercontent.com/yydcdut/SlideAndDragListView/master/gif/v1.1.gif" alt="Renderings">  </p>
</li>
<li><p>Android-SwipeToDismiss<br>滑动 Item 消失 ListView，支持 3.0 以下版本见：<a href="https://github.com/JakeWharton/SwipeToDismissNOA" target="_blank" rel="external">https://github.com/JakeWharton/SwipeToDismissNOA</a><br>项目地址：<a href="https://github.com/romannurik/Android-SwipeToDismiss" target="_blank" rel="external">https://github.com/romannurik/Android-SwipeToDismiss</a><br>Demo 地址：<a href="https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code" target="_blank" rel="external">https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code</a>  </p>
</li>
<li><p>RecyclerViewSwipeDismiss<br>轻量级支持 support-v7 中的 RecyclerView 的滑动删除(Swipe to dismiss)行为，不需要修改源代码，只要简单的绑定<code>onTouchListener</code><br>项目地址：<a href="https://github.com/CodeFalling/RecyclerViewSwipeDismiss" target="_blank" rel="external">https://github.com/CodeFalling/RecyclerViewSwipeDismiss</a><br>效果图：<img src="https://raw.githubusercontent.com/CodeFalling/RecyclerViewSwipeDismiss/master/RecyclerViewSwipeDismiss.gif" alt="Renderings">  </p>
</li>
<li><p>QuickSideBar<br>帮助快速查阅对应分组的侧边栏，可以配合任意列表，demo中给出配合RecyclerView(浮动分组使用stickyheadersrecyclerview)。<br>项目地址：<a href="https://github.com/saiwu-bigkoo/Android-QuickSideBar" target="_blank" rel="external">https://github.com/saiwu-bigkoo/Android-QuickSideBar</a><br>效果图：<img src="https://github.com/saiwu-bigkoo/Android-QuickSideBar/blob/master/preview/quicksidebardemo.gif" alt="Renderings"></p>
</li>
<li><p>async-expandable-list<br>支持异步加载子列表的 ExpandableListView，包括CollectionView可以显示小标题的列表<br>项目地址：<a href="https://github.com/Ericliu001/async-expandable-list" target="_blank" rel="external">https://github.com/Ericliu001/async-expandable-list</a></p>
</li>
</ol>
<p>效果图：</p>
<p><img src="https://cloud.githubusercontent.com/assets/3691022/19348717/0d6c98ec-919b-11e6-97c3-a8ff782a059b.gif" alt="Demo">  <img src="https://cloud.githubusercontent.com/assets/3691022/19406879/cb982648-92da-11e6-86bf-7c82e8505e6c.gif" alt="Demo"></p>
<ol>
<li><p>PinnedHeaderExpandableListView<br>首先它是一个 ExpandableListView，但是它的头部可以固定，其次，在它的上面还有一个头部可以来回伸缩<br>项目地址：<a href="https://github.com/singwhatiwanna/PinnedHeaderExpandableListView" target="_blank" rel="external">https://github.com/singwhatiwanna/PinnedHeaderExpandableListView</a><br>效果图：<img src="https://camo.githubusercontent.com/fa7f516b0b6e2921007a17cbc359b3f661f32226/687474703a2f2f696d672e626c6f672e6373646e2e6e65742f32303134303531313135313534363834333f77617465726d61726b2f322f746578742f6148523063446f764c324a736232637559334e6b626935755a58517663326c755a33646f5958527064324675626d453d2f666f6e742f3561364c354c32542f666f6e7473697a652f3430302f66696c6c2f49304a42516b46434d413d3d2f646973736f6c76652f37302f677261766974792f536f75746845617374" alt="Renderings"><br>APP 示例：百度手机卫士垃圾清理界面  </p>
</li>
<li><p>StickyListHeaders<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView，支持快速滑动，支持 Android2.3 及以上<br>项目地址：<a href="https://github.com/emilsjolander/StickyListHeaders" target="_blank" rel="external">https://github.com/emilsjolander/StickyListHeaders</a><br>效果图：<img src="https://raw.github.com/emilsjolander/StickyListHeaders/master/demo.gif" alt="Renderings"><br>APP 示例：Android 4.0 联系人  </p>
</li>
<li><p>pinned-section-listview<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView<br>项目地址：<a href="https://github.com/beworker/pinned-section-listview" target="_blank" rel="external">https://github.com/beworker/pinned-section-listview</a><br>效果图：<img src="https://raw.github.com/beworker/pinned-section-listview/master/screen1.png" alt="Renderings">  </p>
</li>
<li><p>PinnedHeaderListView<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView<br>项目地址：<a href="https://github.com/JimiSmith/PinnedHeaderListView" target="_blank" rel="external">https://github.com/JimiSmith/PinnedHeaderListView</a>  </p>
</li>
<li><p>QuickReturn<br>ListView/ScrollView 的 header 或 footer，当向下滚动时消失，向上滚动时出现<br>项目地址：<a href="https://github.com/lawloretienne/QuickReturn" target="_blank" rel="external">https://github.com/lawloretienne/QuickReturn</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn</a>  </p>
</li>
<li><p>QuickReturnHeader<br>ListView/ScrollView 的 header 或 footer，当向下滚动时消失，向上滚动时出现<br>项目地址：<a href="https://github.com/ManuelPeinado/QuickReturnHeader" target="_blank" rel="external">https://github.com/ManuelPeinado/QuickReturnHeader</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true</a><br>APP 示例：google plus  </p>
</li>
<li><p>IndexableListView<br>ListView 右侧会显示 item 首字母快捷索引，点击可快速滑动到某个 item<br>项目地址：<a href="https://github.com/woozzu/IndexableListView" target="_blank" rel="external">https://github.com/woozzu/IndexableListView</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true</a><br>APP 示例：微信通讯录、小米联系人  </p>
</li>
<li><p>CustomFastScrollView<br>ListView 快速滑动，同时屏幕中间 PopupWindows 显示滑动到的 item 内容或首字母<br>项目地址：<a href="https://github.com/nolanlawson/CustomFastScrollViewDemo" target="_blank" rel="external">https://github.com/nolanlawson/CustomFastScrollViewDemo</a><br>效果图：<img src="https://raw.github.com/nolanlawson/CustomFastScrollViewDemo/master/example.png" alt="Renderings">  </p>
</li>
<li><p>Android-ScrollBarPanel<br>ListView 滑动时固定的 Panel 指示显示在 scrollbar 旁边<br>项目地址：<a href="https://github.com/rno/Android-ScrollBarPanel" target="_blank" rel="external">https://github.com/rno/Android-ScrollBarPanel</a><br>效果图：<img src="https://github.com/rno/Android-ScrollBarPanel/raw/master/demo_capture.png" alt="Renderings">  </p>
</li>
<li><p>SlideExpandableListView<br>用户点击 listView item 滑出固定区域，其他 item 的区域收缩<br>项目地址：<a href="https://github.com/tjerkw/Android-SlideExpandableListView" target="_blank" rel="external">https://github.com/tjerkw/Android-SlideExpandableListView</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true</a>  </p>
</li>
<li><p>JazzyListView<br>ListView 及 GridView item 以特殊动画效果进入屏幕，效果包括 grow、cards、curl、wave、flip、fly 等等<br>项目地址：<a href="https://github.com/twotoasters/JazzyListView" target="_blank" rel="external">https://github.com/twotoasters/JazzyListView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample</a><br>在线演示：<a href="http://lab.hakim.se/scroll-effects/" target="_blank" rel="external">http://lab.hakim.se/scroll-effects/</a>  </p>
</li>
<li><p>ListViewAnimations<br>带 Item 显示动画的 ListView，动画包括底部飞入、其他方向斜飞入、下层飞入、渐变消失、滑动删除等<br>项目地址：<a href="https://github.com/nhaarman/ListViewAnimations" target="_blank" rel="external">https://github.com/nhaarman/ListViewAnimations</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.haarman.listviewanimations" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.haarman.listviewanimations</a><br>APP 示例：Google plus、Google Now 卡片式进入、小米系统中应用商店、联系人、游戏中心、音乐、文件管理器的 ListView、Ultimate、Light Flow Lite、TreinVerkeer、Running Coach、Pearl Jam Lyrics、Calorie Chart、Car Hire、Super BART、DK FlashCards、Counter Plus、Voorlees Verhaaltjes 2.0  </p>
</li>
<li><p>DevsmartLib-Android<br>横向 ListView<br>项目地址：<a href="https://github.com/dinocore1/DevsmartLib-Android" target="_blank" rel="external">https://github.com/dinocore1/DevsmartLib-Android</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true</a>  </p>
</li>
<li><p>TwoWayView<br>横向 ListView 的效果，继承自 AdapterView<br>项目地址：<a href="https://github.com/lucasr/twoway-view" target="_blank" rel="external">https://github.com/lucasr/twoway-view</a>  </p>
</li>
<li><p>HorizontalVariableListView<br>支持 Item 宽度不一致的 ListView<br>项目地址：<a href="https://github.com/sephiroth74/HorizontalVariableListView" target="_blank" rel="external">https://github.com/sephiroth74/HorizontalVariableListView</a>  </p>
</li>
<li><p>LinearListView<br>用 LinearLayout 实现的 ListView，可解决多个 ListView 并存等问题。目前自己也有需要，等亲自尝试过后会再具体介绍<br>项目地址：<a href="https://github.com/frankiesardo/LinearListView" target="_blank" rel="external">https://github.com/frankiesardo/LinearListView</a>  </p>
</li>
<li><p>MultiChoiceAdapter<br>支持多选的 ListView Adapter<br>项目地址：<a href="https://github.com/ManuelPeinado/MultiChoiceAdapter" target="_blank" rel="external">https://github.com/ManuelPeinado/MultiChoiceAdapter</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo</a>  </p>
</li>
<li><p>EnhancedListView<br>支持横向滑动删除列表项以及撤销删除的 ListView，该项目的前身是<a href="https://github.com/timroes/SwipeToDismissUndoList" target="_blank" rel="external">SwipeToDismissUndoList</a><br>项目地址：<a href="https://github.com/timroes/EnhancedListView" target="_blank" rel="external">https://github.com/timroes/EnhancedListView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&amp;rdid=de.timroes.android.listviewdemo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&amp;rdid=de.timroes.android.listviewdemo</a>  </p>
</li>
<li><p>ListBuddies<br>自动滚动的双列 ListView ，两个 ListView 滚动速度不一致，有视差效果<br>项目地址：<a href="https://github.com/jpardogo/ListBuddies" target="_blank" rel="external">https://github.com/jpardogo/ListBuddies</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies</a><br>效果图：<img src="https://raw.github.com/jpardogo/ListBuddies/master/art/screenshot_listbuddies_2.png" alt="Renderings">  </p>
</li>
<li><p>SwipeMenuListView<br>针对 ListView item 的侧滑菜单<br>项目地址：<a href="https://github.com/baoyongzhang/SwipeMenuListView" target="_blank" rel="external">https://github.com/baoyongzhang/SwipeMenuListView</a><br>效果图：<img src="https://raw.githubusercontent.com/baoyongzhang/SwipeMenuListView/master/demo.gif" alt="Renderings"><br>APP 示例：手机 QQV5.0  </p>
</li>
<li><p>PagingListView<br>分页加载的 ListView。当滑动到 ListView 底部最后一个元素时，显示一个进度行，然后加载下一页数据，并显示。<br>项目地址：<a href="https://github.com/nicolasjafelle/PagingListView" target="_blank" rel="external">https://github.com/nicolasjafelle/PagingListView</a>  </p>
</li>
<li><p>PullZoomView<br>支持下拉时 HeaderView 缩放的 ListView、ScrollView<br>项目地址：<a href="https://github.com/Frank-Zhu/PullZoomView" target="_blank" rel="external">https://github.com/Frank-Zhu/PullZoomView</a><br>效果图：<img src="https://raw.githubusercontent.com/Frank-Zhu/PullZoomView/master/art/pull-to-zoom.gif" alt="Renderings">  </p>
</li>
<li><p>PullToZoomInListView<br>滑动 ListView 时使其 HeaderView 跟随滑动缩放<br>项目地址：<a href="https://github.com/matrixxun/PullToZoomInListView" target="_blank" rel="external">https://github.com/matrixxun/PullToZoomInListView</a><br>效果图：<img src="https://github.com/matrixxun/PullToZoomInListView/raw/master/art/pull-to-zoom.gif" alt="Renderings">  </p>
</li>
<li><p>CalendarListview<br>实现每个月一行日历效果的 ListView<br>项目地址：<a href="https://github.com/traex/CalendarListview" target="_blank" rel="external">https://github.com/traex/CalendarListview</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/Rogary/CalendarListView%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">CalendarListview</a><br>效果图：<img src="https://github.com/traex/CalendarListview/raw/master/demo.gif" alt="Renderings">  </p>
</li>
<li><p>sticky-headers-recyclerview<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ListView，采用 support-v7 中的 RecyclerView 实现<br>项目地址：<a href="https://github.com/timehop/sticky-headers-recyclerview" target="_blank" rel="external">https://github.com/timehop/sticky-headers-recyclerview</a>  </p>
</li>
<li><p>PullSeparateListView<br>到达顶部或底部继续拉动时，实现 Item 间的相互分离，两种模式：(1) 全部分离的模式，即屏幕内所有 Item 都会分离 (2)部分分离模式，以点击位置为分界点，部分 item 分离<br>项目地址：<a href="https://github.com/chiemy/PullSeparateListView" target="_blank" rel="external">https://github.com/chiemy/PullSeparateListView</a><br>效果图：<img src="https://github.com/chiemy/PullSeparateListView/raw/master/capture.gif" alt="Renderings">  </p>
</li>
<li><p>ExpandableLayout<br>Header 和 Content Item 都可以展开的 ExpandableListview<br>项目地址：<a href="https://github.com/traex/ExpandableLayout" target="_blank" rel="external">https://github.com/traex/ExpandableLayout</a>  </p>
</li>
<li><p>PagedHeadListView<br>支持 paginated header 以及 material page indicator 的 ListView.<br>项目地址：<a href="https://github.com/JorgeCastilloPrz/PagedHeadListView" target="_blank" rel="external">https://github.com/JorgeCastilloPrz/PagedHeadListView</a><br>效果图：<img src="https://raw.githubusercontent.com/JorgeCastilloPrz/PagedHeadListView/master/app/src/main/res/raw/preview1.gif" alt="Renderings">  </p>
</li>
<li><p>CustomSwipeListView<br>支持左滑弹出自定义菜单，右滑删除且允许撤销，同时可以自定义滑动动画时间和滑动触发事件的时机等。<br>项目地址：<a href="https://github.com/xyczero/Android-CustomSwipeListView" target="_blank" rel="external">https://github.com/xyczero/Android-CustomSwipeListView</a><br>Demo 地址：<a href="http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListView.apk" target="_blank" rel="external">Download here</a><br>效果图：<img src="http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListview_Set.PNG" alt="Renderings">  </p>
</li>
<li><p>Pull-to-Refresh.Rentals-Android<br>提供一个简单可以自定义的下拉刷新实现，<a href="http://yalantis.com/" target="_blank" rel="external">Yalantis</a> 出品。<br>项目地址：<a href="https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android" target="_blank" rel="external">https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android</a><br>效果图：<img src="https://camo.githubusercontent.com/d406ac5a03a2b1fa5cf41fadc8d2408cb8709bdc/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313635303331372f7265616c6573746174652d70756c6c5f312d322d332e676966" alt="Renderings">  </p>
</li>
<li><p>ScrollerCalendar<br>实现每行显示一年的 12 个月份的 RecyclerView 年历<br>项目地址：<a href="https://github.com/guanchao/ScrollerCalendar" target="_blank" rel="external">https://github.com/guanchao/ScrollerCalendar</a><br>效果图：<img src="https://raw.githubusercontent.com/guanchao/ScrollerCalendar/master/images/sample2.gif" alt="Renderings">  </p>
</li>
<li><p>ExtractWordView<br>一个可以提取单词的 ListView,支持”放大镜”效果。<br>项目地址：<a href="https://github.com/jcodeing/ExtractWordView" target="_blank" rel="external">https://github.com/jcodeing/ExtractWordView</a><br>Demo 地址：<a href="https://raw.githubusercontent.com/jcodeing/ExtractWordView/master/ExtractWordView-demo.apk" target="_blank" rel="external">Download here</a><br>效果图：<img src="https://raw.githubusercontent.com/jcodeing/ExtractWordView/master/lookme.gif" alt="Renderings">  </p>
</li>
<li><p>FlyRefresh<br>支持 ListView, GridView, RecyclerView, ScrollView 的下拉刷新<br>项目地址：<a href="https://github.com/race604/FlyRefresh" target="_blank" rel="external">https://github.com/race604/FlyRefresh</a><br>效果图：<img src="https://raw.githubusercontent.com/race604/FlyRefresh/master/images/flyrefresh.gif" alt="Renderings">  </p>
</li>
<li><p>MVCHelper<br>实现下拉刷新，滚动底部自动加载更多，分页加载，自动切换显示网络失败布局，暂无数据布局，支持任意 view，真正的 MVC 架构<br>支持切换主流下拉刷新框架 Android-PullToRefresh-Library,android-Ultra-Pull-To-Refresh-library，SwipeRefreshLayout<br>项目地址：<a href="https://github.com/LuckyJayce/MVCHelper" target="_blank" rel="external">https://github.com/LuckyJayce/MVCHelper</a><br>Demo 地址：<a href="https://github.com/LuckyJayce/MVCHelper/blob/master/raw/MVCHelper_Demo.apk?raw=true" target="_blank" rel="external">https://github.com/LuckyJayce/MVCHelper/blob/master/raw/MVCHelper_Demo.apk?raw=true</a>  </p>
</li>
<li><p>RecyclerViewSwipeDismiss<br>支持滑动 Item 操作、点击展开、拖动排序、展开后拖动排序等特性的 RecyclerView<br>项目地址：<a href="https://play.google.com/store/apps/details?id=com.h6ah4i.android.example.advrecyclerview" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.h6ah4i.android.example.advrecyclerview</a><br>视频：<a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=S7cSwMArjUQ" target="_blank" rel="external">http://www.youtube.com/watch?feature=player_embedded&amp;v=S7cSwMArjUQ</a>  </p>
</li>
<li><p>WaterDropListView<br>模仿 iOS 下拉刷新“水滴”效果，支持下拉刷新和上拉加载<br>项目地址：<a href="https://github.com/THEONE10211024/WaterDropListView" target="_blank" rel="external">https://github.com/THEONE10211024/WaterDropListView</a><br>效果图：<img src="https://github.com/THEONE10211024/WaterDropListView/blob/master/demo/demo.gif" alt="Renderings">  </p>
</li>
<li><p>PopupListView<br>實現ListItem 點擊後置頂並可顯示客製化添加的item的內部View 的ListView<br>项目地址：<a href="https://github.com/s8871404/PopupListView" target="_blank" rel="external">https://github.com/s8871404/PopupListView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.baobomb.popuplistview_sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.baobomb.popuplistview_sample</a><br>效果图：<img src="https://github.com/s8871404/PopupListView/blob/master/example.gif" alt="Renderings">   </p>
</li>
<li><p>CircleRefreshLayout<br>一个包含有趣的动画的自定义下拉刷新布局<br>项目地址：<a href="https://github.com/tuesda/CircleRefreshLayout" target="_blank" rel="external">https://github.com/tuesda/CircleRefreshLayout</a><br>效果图：<br><img src="https://raw.githubusercontent.com/tuesda/CircleRefreshLayout/master/gif/circlerefresh.gif" alt="Renderings">   </p>
</li>
<li><p>EasyRecyclerView<br>一款简单易用的EasyRecyclerView<br>1.提供EasyRecyclerView，不需要写太多RecyclerView的配置代码<br>2.提供好一个可以适配单布局和多布局的RecyclerViewAdapter<br>3.提供了分割线的实现类，只需要传入一个DrawableId<br>项目地址：<a href="https://github.com/CaMnter/EasyRecyclerView" target="_blank" rel="external">https://github.com/CaMnter/EasyRecyclerView</a>  </p>
</li>
<li><p>CanRefresh<br>可适配所有视图的下拉刷新上拉加载，并支持各种风格<br>项目地址：<a href="https://github.com/canyinghao/CanRefresh" target="_blank" rel="external">https://github.com/canyinghao/CanRefresh</a><br>效果图：<br><img src="https://raw.githubusercontent.com/canyinghao/CanRefresh/master/pic/CanRefresh.gif" alt="Renderings">   </p>
</li>
<li><p>NestRefreshLayout<br>下拉刷新及加载更多控件，支持多种View，可以自定义Header和Footer<br>由于实现了NestedScrollingChild和NestedScrollingParent所以与Support-Design兼容，可以配合CollapsingToolbarLayout使用<br>项目地址：<a href="https://github.com/anzewei/NestRefreshLayout" target="_blank" rel="external">https://github.com/anzewei/NestRefreshLayout</a><br>Demo 地址：<a href="https://github.com/anzewei/NestRefreshLayout/blob/master/ext/sample-debug.apk?raw=true" target="_blank" rel="external">https://github.com/anzewei/NestRefreshLayout/blob/master/ext/sample-debug.apk?raw=true</a></p>
</li>
<li><p>SnappingSwipingRecyclerView<br>实现了类似微信读书首页的长按之后滑动删除的特效和动画<br><img src="https://raw.githubusercontent.com/CarlLee/SnappingSwipingRecyclerView/master/preview.gif" height="480" width="320"><br>项目地址:<a href="https://github.com/CarlLee/SnappingSwipingRecyclerView" target="_blank" rel="external">https://github.com/CarlLee/SnappingSwipingRecyclerView</a></p>
</li>
</ol>
<h4 id="二、ActionBar"><a href="#二、ActionBar" class="headerlink" title="二、ActionBar"></a>二、ActionBar</h4><ol>
<li><p>ActionBarSherlock<br>为 Android 所有版本提供统一的 ActionBar，解决 4.0 以下 ActionBar 的适配问题<br>项目地址：<a href="https://github.com/JakeWharton/ActionBarSherlock" target="_blank" rel="external">https://github.com/JakeWharton/ActionBarSherlock</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos</a><br>标签：兼容库, ActionBar  </p>
</li>
<li><p>ActionBar-PullToRefresh<br>下拉刷新，ActionBar 出现加载中提示<br>项目地址：<a href="https://github.com/chrisbanes/ActionBar-PullToRefresh" target="_blank" rel="external">https://github.com/chrisbanes/ActionBar-PullToRefresh</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock" target="_blank" rel="external">https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock</a><br>APP 示例：Gmail，Google Plus，知乎等  </p>
</li>
<li><p>FadingActionBar<br>ListView 向下滚动逐渐显现的 ActionBar<br>项目地址：<a href="https://github.com/ManuelPeinado/FadingActionBar" target="_blank" rel="external">https://github.com/ManuelPeinado/FadingActionBar</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo</a><br>APP 示例：google music，知乎  </p>
</li>
<li><p>NotBoringActionBar<br>google music 下拉收缩的 ActionBar<br>项目地址：<a href="https://github.com/flavienlaurent/NotBoringActionBar" target="_blank" rel="external">https://github.com/flavienlaurent/NotBoringActionBar</a><br>Demo 地址：<a href="http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/" target="_blank" rel="external">http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/</a><br>APP 示例：Google 音乐  </p>
</li>
<li><p>RefreshActionItem<br>带进度显示和刷新按钮的 ActionBar<br>项目地址：<a href="https://github.com/ManuelPeinado/RefreshActionItem" target="_blank" rel="external">https://github.com/ManuelPeinado/RefreshActionItem</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo</a><br>APP 示例：The New York Times，DevAppsDirect  </p>
</li>
<li><p>GlassActionBar<br>类似玻璃的有一定透明度的 ActionBar<br>项目地址：<a href="https://github.com/ManuelPeinado/GlassActionBar" target="_blank" rel="external">https://github.com/ManuelPeinado/GlassActionBar</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo</a><br>APP 示例：google music  </p>
</li>
</ol>
<h4 id="三、Menu"><a href="#三、Menu" class="headerlink" title="三、Menu"></a>三、Menu</h4><ol>
<li><p>MenuDrawer<br>滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕上下左右划出，支持当前 View 处于上下层，支持 Windows 边缘、ListView 边缘、ViewPager 变化划出菜单等。<br>项目地址：<a href="https://github.com/SimonVT/android-menudrawer" target="_blank" rel="external">https://github.com/SimonVT/android-menudrawer</a><br>Demo 地址：<a href="http://simonvt.github.io/android-menudrawer/" target="_blank" rel="external">http://simonvt.github.io/android-menudrawer/</a><br>APP 示例：Gmail、Google Music 等大部分 google app  </p>
</li>
<li><p>SlidingMenu<br>滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕左右划出，支持菜单 zoom、scale、slide up 三种动画样式出现。与 MenuDrawer 相比而言，SlidingMenu 支持菜单动画样式出现，MenuDrawer 支持菜单 view 处于内容的上下层<br>项目地址：<a href="https://github.com/jfeinstein10/SlidingMenu" target="_blank" rel="external">https://github.com/jfeinstein10/SlidingMenu</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/huxian99/SlidingMenu 源码解析" target="_blank" rel="external">SlidingMenu</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.slidingmenu.example" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.slidingmenu.example</a><br>APP 示例：Foursquare, LinkedIn, Zappos, Rdio, Evernote Food, Plume, VLC for Android, ESPN ScoreCenter, MLS MatchDay, 9GAG, Wunderlist 2, The Verge, MTG Familiar, Mantano Reader, Falcon Pro (BETA), MW3 Barracks  </p>
</li>
<li><p>ArcMenu<br>支持类似 Path 的左下角动画旋转菜单及横向划出菜单、圆心弹出菜单<br>项目地址：<a href="https://github.com/daCapricorn/ArcMenu" target="_blank" rel="external">https://github.com/daCapricorn/ArcMenu</a><br>效果图：<img src="https://dl.dropboxusercontent.com/u/11369687/preview0.png" alt="Renderings"><br><a href="https://dl.dropboxusercontent.com/u/11369687/preview1.png" target="_blank" rel="external">https://dl.dropboxusercontent.com/u/11369687/preview1.png</a><br><a href="https://dl.dropboxusercontent.com/u/11369687/raymenu.png" target="_blank" rel="external">https://dl.dropboxusercontent.com/u/11369687/raymenu.png</a><br>APP 示例：Path  </p>
</li>
<li><p>android-satellite-menu<br>类似 Path 的左下角动画旋转菜单<br>项目地址：<a href="https://github.com/siyamed/android-satellite-menu" target="_blank" rel="external">https://github.com/siyamed/android-satellite-menu</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true</a><br>APP 示例：Path  </p>
</li>
<li><p>radial-menu-widget<br>圆形菜单，支持二级菜单<br>项目地址：<a href="https://code.google.com/p/radial-menu-widget/" target="_blank" rel="external">https://code.google.com/p/radial-menu-widget/</a><br>效果图：<img src="http://farm8.staticflickr.com/7377/11621125154_d1773c2dcc_o.jpg" alt="Renderings">  </p>
</li>
<li><p>Android Wheel Menu<br>圆形旋转选取菜单<br>项目地址：<a href="https://github.com/anupcowkur/Android-Wheel-Menu" target="_blank" rel="external">https://github.com/anupcowkur/Android-Wheel-Menu</a><br>效果图：<img src="https://raw.github.com/anupcowkur/Android-Wheel-Menu/master/graphics/wheel.gif" alt="Renderings">  </p>
</li>
<li><p>FoldingNavigationDrawer<br>滑动并以折叠方式打开菜单<br>项目地址：<a href="https://github.com/tibi1712/FoldingNavigationDrawer-Android" target="_blank" rel="external">https://github.com/tibi1712/FoldingNavigationDrawer-Android</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.ptr.folding.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.ptr.folding.sample</a><br>效果图：<img src="https://lh6.ggpht.com/VnKUZenAozQ0KFAm5blFTGqMaKFjvX-BK2JH-jrX1sIXVTqciACqRhqFH48hc4pm2Q=h310-rw" alt="Renderings">  </p>
</li>
<li><p>AndroidResideMenu<br>仿 Dribbble 的边栏菜单<br>项目地址：<a href="https://github.com/SpecialCyCi/AndroidResideMenu" target="_blank" rel="external">https://github.com/SpecialCyCi/AndroidResideMenu</a><br>效果图：<img src="https://github.com/SpecialCyCi/AndroidResideMenu/raw/master/2.gif" alt="Renderings">  </p>
</li>
<li><p>CircularFloatingActionMenu<br>一个可定制的圆形的浮动菜单控件，类似于 Path 的圆形菜单。这个控件的可定制性更强，可以很容易的定制菜单出现消失时的动画，起始角度和半径。<br>项目地址：<a href="https://github.com/oguzbilgener/CircularFloatingActionMenu" target="_blank" rel="external">https://github.com/oguzbilgener/CircularFloatingActionMenu</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/cpacm/CircularFloatingActionMenu 源码解析" target="_blank" rel="external">CircularFloatingActionMenu</a><br>Demo 地址：<a href="https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples" target="_blank" rel="external">https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples</a><br>效果图：<img src="https://raw.githubusercontent.com/oguzbilgener/CircularFloatingActionMenu/master/assets/circularfab.gif" alt="Renderings">  </p>
</li>
<li><p>NavigationDrawerSI<br>Navigation Drawer 的一个简单实现，滑动并以折叠方式打开菜单<br>项目地址：<a href="https://github.com/mmBs/NavigationDrawerSI" target="_blank" rel="external">https://github.com/mmBs/NavigationDrawerSI</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi" target="_blank" rel="external">https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi</a><br>效果图：<img src="https://raw.githubusercontent.com/mmBs/NavigationDrawerSI/master/images/screens.png" alt="Renderings"><br>APP 示例：<a href="https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi" target="_blank" rel="external">https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi</a>  </p>
</li>
<li><p>DragLayout<br>使用 support.v4 包下的 ViewDragHelper 实现 QQ5.0 侧滑<br>项目地址：<a href="https://github.com/BlueMor/DragLayout" target="_blank" rel="external">https://github.com/BlueMor/DragLayout</a><br>效果图：<img src="https://github.com/BlueMor/DragLayout/raw/master/screenshots/123.gif" alt="Renderings">  </p>
</li>
<li><p>LDrawer<br>Material Design 形式的展开折叠 Icon<br>项目地址：<a href="https://github.com/ikimuhendis/LDrawer" target="_blank" rel="external">https://github.com/ikimuhendis/LDrawer</a><br>效果图：<img src="https://raw.githubusercontent.com/IkiMuhendis/LDrawer/master/images/animated.gif" alt="Renderings">  </p>
</li>
<li><p>Floating Action Button<br>悬浮的圆形菜单栏，支持组建滚动时自动隐藏及其他设置<br>项目地址：<a href="https://github.com/shamanland/floating-action-button" target="_blank" rel="external">https://github.com/shamanland/floating-action-button</a><br>效果图：<img src="https://camo.githubusercontent.com/c679cb23cf62830b0d4037e17cf2d8d4090bc3c8/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f69643d3042776830534e4c506d6a5142526b466f5a4530345646393051324d" alt="Renderings">  </p>
</li>
<li><p>Side-Menu.Android<br>分类侧滑菜单，<a href="http://yalantis.com/" target="_blank" rel="external">Yalantis</a> 出品。<br>项目地址：<a href="https://github.com/Yalantis/Side-Menu.Android" target="_blank" rel="external">https://github.com/Yalantis/Side-Menu.Android</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/cpacm/Side Menu.Android 源码解析" target="_blank" rel="external">Side-Menu.Android</a><br>效果图：<img src="https://camo.githubusercontent.com/cb6caa7a392d01d46bca9d9485c01fc173f55fac/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313638393932322f6576656e74732d6d656e755f312d312d362e676966" alt="Renderings">  </p>
</li>
<li><p>Context-Menu.Android<br>可以方便快速集成漂亮带有动画效果的上下文菜单，<a href="http://yalantis.com/" target="_blank" rel="external">Yalantis</a>出品。<br>项目地址：<a href="https://github.com/Yalantis/Context-Menu.Android" target="_blank" rel="external">https://github.com/Yalantis/Context-Menu.Android</a><br>效果图：<img src="https://camo.githubusercontent.com/46c15734b552ce3afefa7efd1518909046b4677e/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313738353237342f39396d696c65732d70726f66696c652d6c696768745f312d312d342e676966" alt="Renderings">  </p>
</li>
<li><p>Droppy<br>支持多种样式的下拉菜单<br>项目地址：<a href="https://github.com/shehabic/Droppy" target="_blank" rel="external">https://github.com/shehabic/Droppy</a>  </p>
</li>
<li><p>MaterialDrawer<br>Material Design 风格的导航抽屉，提供简便且强大的定制功能<br>项目地址：<a href="https://github.com/mikepenz/MaterialDrawer" target="_blank" rel="external">https://github.com/mikepenz/MaterialDrawer</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details？id=com.mikepenz.materialdrawer.app" target="_blank" rel="external">https://play.google.com/store/apps/details？id=com.mikepenz.materialdrawer.app</a><br>效果图：<img src="https://raw.githubusercontent.com/mikepenz/MaterialDrawer/master/DEV/screenshots/screenshot1_small.png" alt="Renderings">  </p>
</li>
<li><p>SlideBottomPanel<br>底部划出菜单，滑动时背景图透明度渐变，支持嵌套 LiewView 或 ScrollView<br>项目地址：<a href="https://github.com/kingideayou/SlideBottomPanel" target="_blank" rel="external">https://github.com/kingideayou/SlideBottomPanel</a><br>Demo 地址：<a href="https://github.com/kingideayou/SlideBottomPanel/raw/master/apk/SlideBottomPanelDemo.apk" target="_blank" rel="external">SlideBottomPanelDemo 下载</a><br>效果图：<img src="https://github.com/kingideayou/SlideBottomPanel/blob/master/imgs/demo_list_view.gif" alt="Renderings">  </p>
</li>
<li><p>FlowingDrawer<br>带手势流动效果侧滑菜单<br>项目地址：<a href="https://github.com/mxn21/FlowingDrawer" target="_blank" rel="external">https://github.com/mxn21/FlowingDrawer</a><br>效果图：<img src="https://github.com/mxn21/FlowingDrawer/raw/master/screen.gif" alt="Renderings">  </p>
</li>
<li><p>FloatingActionMenu-Animation<br>扩展FloatingActionMenu库，自定义菜单图标，动画滚动时<br>项目地址: <a href="https://github.com/toanvc/FloatingActionMenu-Animation" target="_blank" rel="external">https://github.com/toanvc/FloatingActionMenu-Animation</a><br>效果图: <img src="https://github.com/toanvc/FloatingActionMenu-Animation/raw/master/screenshots/scale.gif" alt="Renderings">    </p>
</li>
</ol>
<h4 id="四、ViewPager-、Gallery"><a href="#四、ViewPager-、Gallery" class="headerlink" title="四、ViewPager 、Gallery"></a>四、ViewPager 、Gallery</h4><ol>
<li><p>AdvancedPagerSlidingTabStrip<br>一个完美兼容ViewPager的导航栏组件；可以自定义TabView；能动态加载Tab上的Icon图片； 能显示Tab的消息数量和提示小圆点；支持自定义为微博形式的可滑动tab。<br><img src="https://raw.githubusercontent.com/HomHomLin/AdvancedPagerSlidingTabStrip/master/Pic/Screen_20160216163404.png" alt="p1"><br><img src="https://raw.githubusercontent.com/HomHomLin/AdvancedPagerSlidingTabStrip/master/Pic/Screen_20160411141706.png" alt="p2"><br>项目地址：<a href="https://github.com/HomHomLin/AdvancedPagerSlidingTabStrip。" target="_blank" rel="external">https://github.com/HomHomLin/AdvancedPagerSlidingTabStrip。</a>  </p>
</li>
<li><p>ConvenientBanner<br>通用的广告栏控件，让你轻松实现广告头效果。支持无限循环，可以设置自动翻页和时间(而且非常智能，手指触碰则暂停翻页，离开自动开始翻页。你也可以设置在界面onPause的时候不进行自动翻页，onResume之后继续自动翻页)，并且提供多种翻页特效。 对比其他广告栏控件，大多都需要对源码进行改动才能加载网络图片，或者帮你集成不是你所需要的图片缓存库。而这个库能让有代码洁癖的你欢喜，不需要对库源码进行修改你就可以使用任何你喜欢的网络图片库进行配合。<br>项目地址：<a href="https://github.com/saiwu-bigkoo/Android-ConvenientBanner" target="_blank" rel="external">https://github.com/saiwu-bigkoo/Android-ConvenientBanner</a><br>效果图：<img src="https://github.com/saiwu-bigkoo/Android-ConvenientBanner/blob/master/preview/convenientbannerdemo.gif" alt="Renderings">  </p>
</li>
<li><p>Android-ViewPagerIndicator<br>配合 ViewPager 使用的 Indicator，支持各种位置和样式<br>项目地址：<a href="https://github.com/JakeWharton/Android-ViewPagerIndicator" target="_blank" rel="external">https://github.com/JakeWharton/Android-ViewPagerIndicator</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample</a><br>APP 示例：太多了。。  </p>
</li>
<li><p>JazzyViewPager<br>支持 Fragment 切换动画的 ViewPager，动画包括转盘、淡入淡出、翻页、层叠、旋转、方块、翻转、放大缩小等，效果类似桌面左右切换的各种效果，不过桌面并非用 ViewPager 实现而已<br>项目地址：<a href="https://github.com/jfeinstein10/JazzyViewPager" target="_blank" rel="external">https://github.com/jfeinstein10/JazzyViewPager</a><br>Demo 地址：<a href="https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true" target="_blank" rel="external">https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true</a>  </p>
</li>
<li><p>JellyViewPager<br>特殊切换动画的 ViewPager<br>项目地址：<a href="https://github.com/chiemy/JellyViewPager" target="_blank" rel="external">https://github.com/chiemy/JellyViewPager</a><br>效果图：<img src="https://github.com/chiemy/JellyViewPager/raw/master/capture.gif" alt="Renderings">  </p>
</li>
<li><p>Android-DirectionalViewPager<br>支持横向和纵向(垂直)的 ViewPager<br>项目地址：<a href="https://github.com/JakeWharton/Android-DirectionalViewPager" target="_blank" rel="external">https://github.com/JakeWharton/Android-DirectionalViewPager</a><br>Demo 地址：<a href="https://market.android.com/details?id=com.directionalviewpager.sample" target="_blank" rel="external">https://market.android.com/details?id=com.directionalviewpager.sample</a>  </p>
</li>
<li><p>FancyCoverFlow<br>支持 Item 切换动画效果的类似 Gallery View<br>项目地址：<a href="https://github.com/davidschreiber/FancyCoverFlow" target="_blank" rel="external">https://github.com/davidschreiber/FancyCoverFlow</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples" target="_blank" rel="external">https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples</a><br>效果图：<img src="https://github-camo.global.ssl.fastly.net/ef5ced52b7b54652b50499521ed797c0188c7a6b/687474703a2f2f64617669647363687265696265722e6769746875622e696f2f46616e6379436f766572466c6f772f73637265656e73686f74322e706e67" alt="Renderings">  </p>
</li>
<li><p>AndroidTouchGallery<br>支持双击或双指缩放的 Gallery(用 ViewPager 实现)，相比下面的 PhotoView，在被放大后依然能滑到下一个 item，并且支持直接从 url 和文件中获取图片，<br>项目地址：<a href="https://github.com/Dreddik/AndroidTouchGallery" target="_blank" rel="external">https://github.com/Dreddik/AndroidTouchGallery</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true</a><br>APP 示例：类似微信中查看聊天记录图片时可双击放大，并且放大情况下能正常左右滑动到前后图片  </p>
</li>
<li><p>Android Auto Scroll ViewPager<br>Android 自动滚动 轮播循环的 ViewPager<br>项目地址：<a href="https://github.com/Trinea/android-auto-scroll-view-pager" target="_blank" rel="external">https://github.com/Trinea/android-auto-scroll-view-pager</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=cn.trinea.android.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href="http://www.trinea.cn/android/auto-scroll-view-pager/" target="_blank" rel="external">http://www.trinea.cn/android/auto-scroll-view-pager/</a>  </p>
</li>
<li><p>Android PagerSlidingTabStrip<br>配合 ViewPager 使用的 Indicator，支持 ViewPager Scroll 时 Indicator 联动<br>项目地址：<a href="https://github.com/astuetz/PagerSlidingTabStrip" target="_blank" rel="external">https://github.com/astuetz/PagerSlidingTabStrip</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/ayyb1988/PagerSlidingTabStrip 源码解析" target="_blank" rel="external">Android PagerSlidingTabStrip</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample</a>  </p>
</li>
<li><p>ViewPager3D<br>ViewPager3D 效果<br>项目地址：<a href="https://github.com/inovex/ViewPager3D" target="_blank" rel="external">https://github.com/inovex/ViewPager3D</a>  </p>
</li>
<li><p>AnimaTabsview<br>仿网易云音乐标签切换的动画,带透明小三角<br>项目地址：<a href="https://github.com/wuyexiong/transparent-over-animtabsview" target="_blank" rel="external">https://github.com/wuyexiong/transparent-over-animtabsview</a><br>在线演示：<a href="http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html" target="_blank" rel="external">http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html</a>  </p>
</li>
<li><p>LoopingViewPager<br>无限循环的 ViewPager<br>项目地址：<a href="https://github.com/imbryk/LoopingViewPager" target="_blank" rel="external">https://github.com/imbryk/LoopingViewPager</a>  </p>
</li>
<li><p>android_page_curl<br>翻书卷曲效果<br>项目地址：<a href="https://github.com/harism/android_page_curl" target="_blank" rel="external">https://github.com/harism/android_page_curl</a><br>在线演示：<a href="https://www.youtube.com/watch?v=iwu7P5PCpsw" target="_blank" rel="external">https://www.youtube.com/watch?v=iwu7P5PCpsw</a><br>APP 示例：iReader  </p>
</li>
<li><p>ViewPagerIndicator<br>简化并实现 android 的 TabHost 效果，顶部滑动 tab，引导页，支持自定义 tab 样式,自定义滑动块样式和位置,自定义切换 tab 的过渡动画,子界面的预加载和界面缓存,设置界面是否可滑动<br>项目地址：<a href="https://github.com/LuckyJayce/ViewPagerIndicator" target="_blank" rel="external">https://github.com/LuckyJayce/ViewPagerIndicator</a>  </p>
</li>
<li><p>ScreenSlideIndicator<br>轻量级的圆形 Indicadtor，位置可以自由调整，不会对 ViewPager 产生任何影响。<br>项目地址：<a href="https://github.com/LyndonChin/Android-ScreenSlidePager" target="_blank" rel="external">ScreenSlidePager</a><br>效果图：<img src="https://github.com/LyndonChin/AndroidScreenSlidePager/raw/master/art/sample.gif" alt="Renderings">  </p>
</li>
<li><p>SmartTabLayout<br>自定义的 Tab title strip，基于 Google Samples 中的 android-SlidingTabBasic 项目，滑动时 Indicator 可平滑过渡。<br>项目地址：<a href="https://github.com/ogaclejapan/SmartTabLayout" target="_blank" rel="external">https://github.com/ogaclejapan/SmartTabLayout</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo</a><br>效果图：<img src="https://raw.githubusercontent.com/ogaclejapan/SmartTabLayout/master/art/demo1.gif" alt="Renderings">  </p>
</li>
<li><p>AndroidImageSlider<br>Android 图片滑动<br>项目地址：<a href="https://github.com/daimajia/AndroidImageSlider" target="_blank" rel="external">https://github.com/daimajia/AndroidImageSlider</a><br>效果图：<img src="https://camo.githubusercontent.com/f64413139bbaa918131384d3597c33e39333aa7f/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a773165677a6f7236366f6a64673230393530666b6e70652e676966" alt="Renderings"><br>App<br>示例：<a href="https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk" target="_blank" rel="external">https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk</a>  </p>
</li>
<li><p>RecyclerViewPager<br>完全继承自 RecyclerView，可以自定义触发翻页的距离，可自定义翻页速度，支持垂直方向的 ViewPager，支持 Fragment。<br>项目地址：<a href="https://github.com/lsjwzh/RecyclerViewPager" target="_blank" rel="external">RecyclerViewPager</a><br>效果图：<img src="https://github.com/lsjwzh/RecyclerViewPager/blob/master/fragment.gif" alt="Renderings">  </p>
</li>
<li><p>CircleIndicator<br>轻量级ViewPager指示器,支持三种不同的模式<br>项目地址：<a href="https://github.com/THEONE10211024/CircleIndicator" target="_blank" rel="external">CircleIndicator</a><br>效果图：<img src="https://github.com/THEONE10211024/CircleIndicator/blob/master/demo/inside.gif" alt="Renderings"><br><img src="https://github.com/THEONE10211024/CircleIndicator/blob/master/demo/outside.gif" alt="Renderings"><br><img src="https://github.com/THEONE10211024/CircleIndicator/blob/master/demo/solo.gif" alt="Renderings">    </p>
</li>
<li><p>EasySlidingTabs<br>一款简单、易用的滑动标签页<br>项目地址： <a href="https://github.com/CaMnter/EasySlidingTabs" target="_blank" rel="external">https://github.com/CaMnter/EasySlidingTabs</a><br>效果图：<br><img src="https://raw.githubusercontent.com/CaMnter/EasySlidingTabs/master/readme/readme_easy_sliding_tabs_1.png" alt="Renderings">   </p>
</li>
<li><p>ParallaxViewPager<br>ViewPager页面切换视差效果<br>项目地址：<a href="https://github.com/ybq/ParallaxViewPager" target="_blank" rel="external">https://github.com/ybq/ParallaxViewPager</a><br>效果图：<br><img src="https://github.com/ybq/ParallaxViewPager/raw/master/art/screen.gif" alt="Renderings">   </p>
</li>
</ol>
<h4 id="五、GridView"><a href="#五、GridView" class="headerlink" title="五、GridView"></a>五、GridView</h4><ol>
<li><p>StaggeredGridView<br>允许非对齐行的 GridView，类似 Pinterest 的瀑布流，并且跟 ListView 一样自带 View 缓存，继承自 ViewGroup<br>项目地址：<a href="https://github.com/maurycyw/StaggeredGridView" target="_blank" rel="external">https://github.com/maurycyw/StaggeredGridView</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true</a><br>APP 示例：Pinterest 等  </p>
</li>
<li><p>AndroidStaggeredGrid<br>允许非对齐行的 GridView，类似 Pinterest 的瀑布流，继承自 AbsListView<br>项目地址：<a href="https://github.com/etsy/AndroidStaggeredGrid" target="_blank" rel="external">https://github.com/etsy/AndroidStaggeredGrid</a><br>APP 示例：Pinterest 等  </p>
</li>
<li><p>PinterestLikeAdapterView<br>允许非对齐行的 GridView，类似 Pinterest 的瀑布流，允许下拉刷新<br>项目地址：<a href="https://github.com/GDG-Korea/PinterestLikeAdapterView" target="_blank" rel="external">https://github.com/GDG-Korea/PinterestLikeAdapterView</a><br>APP 示例：Pinterest 等  </p>
</li>
<li><p>DraggableGridView<br>Item 可拖动交换位置的 GridView，实际是自己继承 ViewGroup 实现，类似桌面的单屏效果，可屏幕自动上下滚动进行 Item 移动交换，多屏效果见下面 PagedDragDropGrid<br>项目地址：<a href="https://github.com/thquinn/DraggableGridView" target="_blank" rel="external">https://github.com/thquinn/DraggableGridView</a><br>Demo 地址：<a href="https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true" target="_blank" rel="external">https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true</a><br>也可自定义item的宽高和每行的个数，同时修改了交换逻辑，当移动到另一个item时就进行交换，并删除滚动逻辑。<br>项目地址：<a href="https://github.com/andyken/DraggableGridView" target="_blank" rel="external">DraggableGridView</a><br>效果图：<br><img src="https://github.com/andyken/DraggableGridView/blob/master/sample/sample.gif" alt="Renderings"></p>
</li>
<li><p>DividedDraggableView<br>一个带有分割区域的可拖动 view ,可屏幕自动上下滚动进行 Item 移动交换。<br>项目地址：<a href="https://github.com/andyken/DividedDraggableView" target="_blank" rel="external">https://github.com/andyken/DividedDraggableView</a><br>效果图：<br><img src="https://github.com/andyken/DividedDraggableView/blob/master/app/sample.gif" alt="Renderings"></p>
</li>
<li><p>StickyGridHeaders<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 GridView<br>项目地址：<a href="https://github.com/TonicArtos/StickyGridHeaders" target="_blank" rel="external">https://github.com/TonicArtos/StickyGridHeaders</a><br>效果图：<img src="https://github-camo.global.ssl.fastly.net/90b57e9383704c400706545225d439e057c6fcc0/687474703a2f2f342e62702e626c6f6773706f742e636f6d2f2d535f4262685758367754592f55517057306377554745492f41414141414141414776552f7a7a4a586a2d50635662592f73313630302f73637265656e2d6c616e6473636170652d736d616c6c65722e706e67" alt="Renderings">  </p>
</li>
<li><p>PagedDragDropGrid<br>Item 可拖动交换位置、拖动删除的自定义控件，实际是自己继承 ViewGroup 实现，类似桌面的多屏效果，可拖动到屏幕边缘，屏幕自动左右滚动进行 Item 移动交换，可拖动进行删除，单屏效果见上面 DraggableGridView<br>项目地址：<a href="https://github.com/mrKlar/PagedDragDropGrid" target="_blank" rel="external">https://github.com/mrKlar/PagedDragDropGrid</a><br>在线演示：<a href="http://youtu.be/FYTSRfthSuQ" target="_blank" rel="external">http://youtu.be/FYTSRfthSuQ</a>  </p>
</li>
<li><p>Android-DraggableGridViewPager<br>Item 可拖动交换位置的 GridView，实际是自己继承 ViewGroup 实现，类似桌面的多屏效果，可屏幕自动左右滚动进行 Item 移动交换，单屏效果见上面 DraggableGridView<br>项目地址：<a href="https://github.com/zzhouj/Android-DraggableGridViewPager" target="_blank" rel="external">https://github.com/zzhouj/Android-DraggableGridViewPager</a><br>Demo 地址：<a href="https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true</a>  </p>
</li>
<li><p>TwoWayGridView<br>可横向滚动的 GridView<br>项目地址：<a href="https://github.com/jess-anders/two-way-gridview" target="_blank" rel="external">https://github.com/jess-anders/two-way-gridview</a>  </p>
</li>
<li><p>PagingGridView<br>分页加载的 GridView。当滑动到 GridView 底部最后一个行时，显示一个进度行，然后加载下一页数据，并显示。<br>项目地址：<a href="https://github.com/nicolasjafelle/PagingGridView" target="_blank" rel="external">https://github.com/nicolasjafelle/PagingGridView</a>  </p>
</li>
<li><p>AsymmetricGridView<br>一个支持跨行和跨列可变 Item 大小的 GridView<br>项目地址：<a href="https://github.com/felipecsl/AsymmetricGridView" target="_blank" rel="external">https://github.com/felipecsl/AsymmetricGridView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app</a><br>效果图：<img src="https://raw.githubusercontent.com/felipecsl/AsymmetricGridView/master/screenshots/ss_5_cols.png" alt="Renderings">  </p>
</li>
<li><p>GridView with Header and Footer<br>和<code>ListView</code>一样带头部和底部的<code>GridView</code>，用法和<code>ListView</code>一样<br>项目地址：<a href="https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter" target="_blank" rel="external">https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter</a><br>效果图：<img src="https://raw.githubusercontent.com/liaohuqiu/android-GridViewWithHeaderAndFooter/master/screen-shot.png" alt="Renderings">  </p>
</li>
</ol>
<h4 id="六、ImageView"><a href="#六、ImageView" class="headerlink" title="六、ImageView"></a>六、ImageView</h4><ol>
<li><p>PhotoView<br>支持双击或双指缩放的 ImageView，在 ViewPager 等 Scrolling view 中正常使用，相比上面的 AndroidTouchGallery，不仅支持 ViewPager，同时支持单个 ImageView<br>项目地址：<a href="https://github.com/chrisbanes/PhotoView" target="_blank" rel="external">https://github.com/chrisbanes/PhotoView</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/dkmeteor/PhotoView 源码解析" target="_blank" rel="external">PhotoView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample</a><br>APP 示例：photup  </p>
</li>
<li><p>Fresco-ImageView<br>Fresco-ImageView是一种Android平台的图像控件，底层是对Fresco的封装，可以异步加载网络图片、项目资源和本地图片，并且支持双指缩放、图片的基本处理以及Fresco的所有特性。<br>项目地址：<a href="https://github.com/HomHomLin/FrescoImageView" target="_blank" rel="external">https://github.com/HomHomLin/FrescoImageView</a>  </p>
</li>
<li><p>android-gif-drawable<br>支持 gif 显示的 view，用 jni 实现的，编译生成 so 库后直接 xml 定义 view 即可，而且本身不依赖于其他开源项目所以相对下面的 ImageViewEx 简单的多<br>项目地址：<a href="https://github.com/koral--/android-gif-drawable" target="_blank" rel="external">https://github.com/koral--/android-gif-drawable</a>  </p>
</li>
<li><p>ImageViewEx<br>支持 Gif 显示的 ImageView，依赖很多，编译过程很繁琐<br>项目地址：<a href="https://github.com/frapontillo/ImageViewEx" target="_blank" rel="external">https://github.com/frapontillo/ImageViewEx</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true</a>  </p>
</li>
<li><p>RoundedImageView<br>带圆角的 ImageView<br>项目地址：<a href="https://github.com/vinc3m1/RoundedImageView" target="_blank" rel="external">https://github.com/vinc3m1/RoundedImageView</a><br>效果图：<img src="https://raw.github.com/makeramen/RoundedImageView/master/screenshot.png" alt="Renderings">  </p>
</li>
<li><p>SelectableRoundedImageView<br>ImageView 允许四个角的每一个有不同的半径值。也允许椭圆形、圆形的形状或者边<br>项目地址：<a href="https://github.com/pungrue26/SelectableRoundedImageView" target="_blank" rel="external">https://github.com/pungrue26/SelectableRoundedImageView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.joooonho" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.joooonho</a><br>效果图：<img src="https://camo.githubusercontent.com/25d2e5fb8783b5dd09c00b03091172a79c69350e/687474703a2f2f692e696d6775722e636f6d2f55355653376d322e706e673f31" alt="Renderings">  </p>
</li>
<li><p>ColorArt<br>根据图片的均色设置背景色显示文字和图片，类似 itune11 中效果<br>项目地址：<a href="https://github.com/MichaelEvans/ColorArt" target="_blank" rel="external">https://github.com/MichaelEvans/ColorArt</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true</a>  </p>
</li>
<li><p>CircleImageView<br>圆形的 ImageView<br>项目地址：<a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="external">https://github.com/hdodenhof/CircleImageView</a><br>效果图：<img src="https://raw.github.com/hdodenhof/CircleImageView/master/screenshot.png" alt="Renderings">  </p>
</li>
<li><p>ImageViewZoom<br>支持放大和平移的 ImageView<br>项目地址：<a href="https://github.com/sephiroth74/ImageViewZoom" target="_blank" rel="external">https://github.com/sephiroth74/ImageViewZoom</a><br>APP 示例：<a href="https://play.google.com/store/apps/details?id=com.aviary.android.feather" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.aviary.android.feather</a>  </p>
</li>
<li><p>KenBurnsView<br>实现 Ken Burns effect 效果，达到身临其境效果的 ImageView<br>项目地址：<a href="https://github.com/flavioarfaria/KenBurnsView" target="_blank" rel="external">https://github.com/flavioarfaria/KenBurnsView</a>  </p>
</li>
<li><p>CustomShapeImageView<br>各种形状的 ImageView, 相比上面的圆形 ImageView，多了更多形状<br>项目地址：<a href="https://github.com/MostafaGazar/CustomShapeImageView" target="_blank" rel="external">https://github.com/MostafaGazar/CustomShapeImageView</a><br>效果图：<img src="https://raw.github.com/MostafaGazar/CustomShapeImageView/master/Screenshot_2013-11-05-23-08-12.png" alt="Renderings">  </p>
</li>
<li><p>Shape Image View<br>可以自定义各种形状的 ImageView, 并且支持边框<br>项目地址：<a href="https://github.com/siyamed/android-shape-imageview" target="_blank" rel="external">https://github.com/siyamed/android-shape-imageview</a><br>效果图：<img src="https://github.com/siyamed/android-shape-imageview/raw/master/images/shader-buble.png" alt="Renderings"><br><a href="https://github.com/siyamed/android-shape-imageview/raw/master/images/all-samples.png" target="_blank" rel="external">https://github.com/siyamed/android-shape-imageview/raw/master/images/all-samples.png</a>  </p>
</li>
<li><p>TextDrawable<br>一个用于生成带有文本或者字母的图片的轻量级库。扩展自 Drawable，因此可用于现有/自定义/网络等 ImageView 类，并且包含一个流接口用于创建 drawables 以及一个定制的 ColorGenerator<br>项目地址：<a href="https://github.com/amulyakhare/TextDrawable" target="_blank" rel="external">https://github.com/amulyakhare/TextDrawable</a><br>效果图：<img src="https://raw.githubusercontent.com/amulyakhare/TextDrawable/master/screens/screen7.png" alt="Renderings">  </p>
</li>
<li><p>android-smart-image-view<br>可从 URL 或 contact address book 加载图片的 ImageView，支持缓存<br>项目地址：<a href="https://github.com/loopj/android-smart-image-view" target="_blank" rel="external">https://github.com/loopj/android-smart-image-view</a>  </p>
</li>
<li><p>PhotoView<br>支持双指/双击缩放的ImageView,支持从一个PhotoView缩放到另外一个PhotoView(点击图片放大预览),相对于其他PhototView有更加平滑的缩放,平移的动画,并且支持所有的ScaleType,可以作为普通的ImageView使用<br>项目地址：<a href="https://github.com/bm-x/PhotoView" target="_blank" rel="external">https://github.com/bm-x/PhotoView</a><br>效果图：<img src="https://github.com/bm-x/PhotoView/raw/master/demo1.gif" alt="Renderings">  </p>
</li>
<li><p>TextWithImageDrawable<br>一个可以同时包含图片和文字的drawable,使用方式类似TextView和它的drawableLeft之类的方法,功能比较全面,可以代替TextView或是解决一些非得需要在ImageView中同时显示文字和图片的问题<br>项目地址：<a href="https://github.com/wuseal/TextWithImageDrawable" target="_blank" rel="external">https://github.com/wuseal/TextWithImageDrawable</a>  </p>
</li>
<li><p>AnchorImageView<br>一个可以锚点定位的ImageView(根据像素点)<br>Demo中通过AnchorImageView简单的实现了一个课本点读的功能<br>项目地址：<a href="https://github.com/jcodeing/AnchorImageView" target="_blank" rel="external">https://github.com/jcodeing/AnchorImageView</a><br>Demo 地址：<a href="https://raw.githubusercontent.com/jcodeing/AnchorImageView/master/AnchorImageView-debug.apk" target="_blank" rel="external">Download here</a><br>效果图：<img src="https://raw.githubusercontent.com/jcodeing/AnchorImageView/master/lookme.gif" alt="Renderings">  </p>
</li>
</ol>
<h4 id="七、ProgressBar"><a href="#七、ProgressBar" class="headerlink" title="七、ProgressBar"></a>七、ProgressBar</h4><ol>
<li><p>SmoothProgressBar<br>水平进度条<br>项目地址：<a href="https://github.com/castorflex/SmoothProgressBar" target="_blank" rel="external">https://github.com/castorflex/SmoothProgressBar</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample</a>  </p>
</li>
<li><p>MaterialProgessBar<br>Material Design 的进度条，支持 Android 4.0<br>项目地址：<a href="https://github.com/DreaminginCodeZH/MaterialProgressBar" target="_blank" rel="external">https://github.com/DreaminginCodeZH/MaterialProgressBar</a><br>Demo 地址：<a href="https://github.com/DreaminginCodeZH/MaterialProgressBar/blob/master/dist/sample.apk" target="_blank" rel="external">https://github.com/DreaminginCodeZH/MaterialProgressBar/blob/master/dist/sample.apk</a>  </p>
</li>
<li><p>ProgressWheel<br>支持进度显示的圆形 ProgressBar<br>项目地址：<a href="https://github.com/Todd-Davies/ProgressWheel" target="_blank" rel="external">https://github.com/Todd-Davies/ProgressWheel</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true</a>  </p>
</li>
<li><p>android-square-progressbar<br>在图片周围显示进度<br>项目地址：<a href="https://github.com/mrwonderman/android-square-progressbar" target="_blank" rel="external">https://github.com/mrwonderman/android-square-progressbar</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example" target="_blank" rel="external">https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example</a><br>效果图：<img src="https://googledrive.com/host/0BwESwPCuXtw7eExwSFVLQkR2TTg/newscreen1.png" alt="Renderings"><br>APP 示例：square  </p>
</li>
<li><p>HoloCircularProgressBar<br>Android4.1 时钟 App 样式<br>项目地址：<a href="https://github.com/passsy/android-HoloCircularProgressBar" target="_blank" rel="external">https://github.com/passsy/android-HoloCircularProgressBar</a><br>效果图：<img src="https://raw.github.com/passsy/android-HoloCircularProgressBar/master/raw/screenshot1.png" alt="Renderings"><br>APP 示例：Android4.1 时钟 App  </p>
</li>
<li><p>ProgressButton<br>通过图钉的不同状态显示进度<br>项目地址：<a href="https://github.com/f2prateek/progressbutton" target="_blank" rel="external">https://github.com/f2prateek/progressbutton</a><br>文档介绍：<a href="http://f2prateek.com/progressbutton/" target="_blank" rel="external">http://f2prateek.com/progressbutton/</a><br>效果图：<img src="http://f2prateek.com/progressbutton/static/states.png" alt="Renderings">  </p>
</li>
<li><p>GoogleProgressBar<br>类似 google 多个圆形卡片翻转的 progressBar<br>项目地址：<a href="https://github.com/jpardogo/GoogleProgressBar" target="_blank" rel="external">https://github.com/jpardogo/GoogleProgressBar</a><br>效果图：<img src="https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/master/art/GoogleProgressBar.gif" alt="Renderings">  </p>
</li>
<li><p>TH-ProgressButton<br>带圆形进度显示的按钮<br>项目地址：<a href="https://github.com/torryharris/TH-ProgressButton" target="_blank" rel="external">https://github.com/torryharris/TH-ProgressButton</a><br>效果图：<img src="https://raw.github.com/Vyshakh-K/TH-ProgressButton/master/screenshots/progressshot1.png" alt="Renderings"><br><a href="https://raw.github.com/Vyshakh-K/TH-ProgressButton/master/screenshots/progressshot2.png" target="_blank" rel="external">https://raw.github.com/Vyshakh-K/TH-ProgressButton/master/screenshots/progressshot2.png</a>  </p>
</li>
<li><p>NumberProgressBar<br>带数字进度的进度条<br>项目地址：<a href="https://github.com/daimajia/NumberProgressBar" target="_blank" rel="external">https://github.com/daimajia/NumberProgressBar</a><br>效果图：<img src="https://camo.githubusercontent.com/0c92568af7ec4e04e2e1503acdd2ca99854ab0b5/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a77316566797264386e376937673230637a30326d7135662e676966" alt="Renderings">  </p>
</li>
<li><p>CircularProgressDrawable<br>带圆形进度显示的进度条<br>项目地址：<a href="https://github.com/Sefford/CircularProgressDrawable" target="_blank" rel="external">https://github.com/Sefford/CircularProgressDrawable</a><br>效果图：<img src="https://raw.githubusercontent.com/Sefford/CircularProgressDrawable/master/overshoot.gif" alt="Renderings">  </p>
</li>
<li><p>Android-RoundCornerProgressBar<br>Android 圆角 ProgressBar，可自定义圆角颜色和半径，包括带 Icon 和不带 Icon 两种类型。<br>项目地址：<a href="https://github.com/akexorcist/Android-RoundCornerProgressBar" target="_blank" rel="external">https://github.com/akexorcist/Android-RoundCornerProgressBar</a><br>效果图：<img src="https://raw.githubusercontent.com/akexorcist/Android-RoundCornerProgressBar/master/image/screenshot_02.png" alt="Renderings">  </p>
</li>
<li><p>circular-progress-button<br>带进度显示的 Button<br>项目地址：<a href="https://github.com/dmytrodanylyk/circular-progress-button" target="_blank" rel="external">https://github.com/dmytrodanylyk/circular-progress-button</a><br>效果图：<img src="https://raw.githubusercontent.com/dmytrodanylyk/circular-progress-button/master/screenshots/intro.gif" alt="Renderings">  </p>
</li>
<li><p>WaveView<br>一个波纹效果的 View，可用来做 ProgressBar<br>项目地址：<a href="https://github.com/john990/WaveView" target="_blank" rel="external">https://github.com/john990/WaveView</a><br>Demo 地址：<a href="https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk" target="_blank" rel="external">https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk</a><br>效果图：<img src="https://camo.githubusercontent.com/60722e9d4f2d2daa78a8650cb27a32adea82bdd4/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f686e3939302f57617665566965772f6d61737465722f73637265656e73686f7425323661706b2f73637265656e73686f742e676966" alt="Renderings">  </p>
</li>
<li><p>MaterialLoadingProgressBar<br>抽取自 SwipeRefreshLayout 的 Material Design 进度指示器<br>项目地址：<a href="https://github.com/lsjwzh/MaterialLoadingProgressBar" target="_blank" rel="external">https://github.com/lsjwzh/MaterialLoadingProgressBar</a><br>效果图：<img src="https://github.com/lsjwzh/MaterialLoadingProgressBar/raw/master/screen.gif" alt="Renderings">  </p>
</li>
<li><p>MetaballLoading<br>A 2d metaball loading<br>项目地址：<a href="https://github.com/dodola/MetaballLoading" target="_blank" rel="external">https://github.com/dodola/MetaballLoading</a><br>效果图：<img src="https://github.com/dodola/MetaballLoading/blob/master/metaball.gif" alt="Renderings"><br>效果图：<img src="https://github.com/dodola/MetaballLoading/blob/master/metaball2.gif" alt="Renderings"></p>
</li>
<li><p>SectorProgressView<br>一个圆形或环形的进度显示控件，用圆中扇形的角度大小来表示进度信息<br><br>项目地址：<a href="https://github.com/timqi/SectorProgressView" target="_blank" rel="external">https://github.com/timqi/SectorProgressView</a><br><br>Demo：<a href="https://github.com/timqi/SectorProgressView/raw/master/art/example.apk" target="_blank" rel="external">apk download</a> <br><br>效果图：<br><img src="https://github.com/timqi/SectorProgressView/raw/master/art/colorfulringprogressview.demo.gif" alt="ColorfulRingProgressView"> <img src="https://github.com/timqi/SectorProgressView/raw/master/art/sectorprogressview.demo.gif" alt="SectorProgressView"></p>
</li>
<li><p>CircularFillableLoaders<br>一个可以用于闪屏或者其他地方加载的控件<br><br>项目地址：<a href="https://github.com/lopspower/CircularFillableLoaders" target="_blank" rel="external">https://github.com/lopspower/CircularFillableLoaders</a><br><br>Demo地址：(<a href="https://play.google.com/store/apps/details?id=com.mikhaellopez.circularfillableloaderssample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.mikhaellopez.circularfillableloaderssample</a>) <br><br>效果图：<br><img src="https://camo.githubusercontent.com/b8e510f51d0781c1ac41a01713d81beb93ff30a9/687474703a2f2f6936362e74696e797069632e636f6d2f357a6771776e2e706e67" alt="CircularFillableLoaders"> <img src="https://lh3.googleusercontent.com/QUzoUjzTGirHKnGSmvziRfh230FRph12TPfEqUdZs9HXAgDnB79pSP6aCDLVpU9QvRZA=h310-rw" alt="CircularFillableLoaders"></p>
</li>
<li><p>PinWheel<br>一个旋转的大风车Dialog<br>项目地址：<a href="https://github.com/codingWang/PinWheel" target="_blank" rel="external">https://github.com/codingWang/PinWheel</a><br><br>效果图：<img src="https://github.com/codingWang/PinWheel/blob/master/gif/pinwheel.gif" alt="Renderings"></p>
</li>
<li><p>ColorArcProgressBar<br>一个可定制的圆形进度条，通过xml参数配置可实现QQ健康中步数的弧形进度显示、仪盘表显示速度、最常见的下载进度条等功能。<br><br>项目地址：<a href="https://github.com/Shinelw/ColorArcProgressBar" target="_blank" rel="external">https://github.com/Shinelw/ColorArcProgressBar</a><br><br>效果图：<br><img src="https://raw.githubusercontent.com/Shinelw/ColorArcProgressBar/master/Demo.gif" alt="ColorArcProgressBar"></p>
</li>
<li><p>LoadingDrawable<br>一些酷炫的android加载动画，可以与任何组件配合使用作为加载的组件或者ProgressBar。<br><br>项目地址：<a href="https://github.com/dinuscxj/LoadingDrawable" target="_blank" rel="external">https://github.com/dinuscxj/LoadingDrawable</a><br>效果图：<br><br><img src="https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/AnimalDrawable.gif?width=300" alt="LoadingDrawable"><br><img src="https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/SceneryDrawable.gif?width=300" alt="LoadingDrawable"><br><img src="https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/CircleJumpDrawable.gif?width=300" alt="LoadingDrawable"><br><img src="https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/CircleRotateDrawable.gif?width=300" alt="LoadingDrawable"></p>
</li>
<li>Android-SpinKit<br>Android加载动画库<br>项目地址：<a href="https://github.com/ybq/Android-SpinKit" target="_blank" rel="external">https://github.com/ybq/Android-SpinKit</a><br>效果图：<br><img src="https://raw.githubusercontent.com/ybq/AndroidSpinKit/master/art/screen.gif" alt="Renderings">  </li>
</ol>
<h4 id="八、TextView"><a href="#八、TextView" class="headerlink" title="八、TextView"></a>八、TextView</h4><p>包括 TextView 及所有继承自 TextView 控件，如 EditText、Button、RadioButton  </p>
<ol>
<li><p>android-flowtextview<br>文字自动环绕其他 View 的 Layout<br>项目地址：<a href="https://github.com/deano2390/FlowTextView" target="_blank" rel="external">https://github.com/deano2390/FlowTextView</a><br>效果图：<img src="http://i949.photobucket.com/albums/ad332/vostroman1500/1.png" alt="Renderings">  </p>
</li>
<li><p>Android Form EditText<br>验证输入合法性的编辑框，支持输入、英文、ip、url 等多种正则验证<br>项目地址：<a href="https://github.com/vekexasia/android-edittext-validator" target="_blank" rel="external">https://github.com/vekexasia/android-edittext-validator</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample</a>  </p>
</li>
<li><p>Emojicon<br>支持 emojis 的 TextView 和 EditText<br>项目地址：<a href="https://github.com/rockerhieu/emojicon" target="_blank" rel="external">https://github.com/rockerhieu/emojicon</a><br>文档介绍：<a href="http://rockerhieu.com/emojicon/" target="_blank" rel="external">http://rockerhieu.com/emojicon/</a>  </p>
</li>
<li><p>android-circlebutton<br>Android 圆形按钮，实际实现是继承自 ImageView<br>项目地址：<a href="https://github.com/markushi/android-circlebutton" target="_blank" rel="external">https://github.com/markushi/android-circlebutton</a><br>Demo 地址：<a href="https://github.com/markushi/android-circlebutton/blob/master/example/example.apk" target="_blank" rel="external">https://github.com/markushi/android-circlebutton/blob/master/example/example.apk</a>  </p>
</li>
<li><p>Segmented Radio Buttons for Android<br>iOS’s segmented controls 的实现<br>项目地址：<a href="https://github.com/vinc3m1/android-segmentedradiobutton" target="_blank" rel="external">https://github.com/vinc3m1/android-segmentedradiobutton</a><br>Demo 地址：<a href="https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true" target="_blank" rel="external">https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true</a><br>效果图：<img src="https://raw.github.com/vinc3m1/android-segmentedradiobutton/master/screens/segmentedradio.png" alt="Renderings">  </p>
</li>
<li><p>Chips EditText Library<br>支持国家名字联想从而选择显示该国国旗的 EditText，实际就是通过 SpannableStringBuilder 实现<br>项目地址：<a href="https://github.com/kpbird/chips-edittext-library" target="_blank" rel="external">https://github.com/kpbird/chips-edittext-library</a><br>Demo 地址：<a href="https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin" target="_blank" rel="external">https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin</a>  </p>
</li>
<li><p>AutoFitTextView<br>可固定边界内容字体大小自适应的 TextView<br>项目地址：<a href="https://github.com/grantland/android-autofittextview" target="_blank" rel="external">https://github.com/grantland/android-autofittextview</a>  </p>
</li>
<li><p>Shimmer for Android<br>文字发淡光的 TextView<br>项目地址：<a href="https://github.com/RomainPiel/Shimmer-android" target="_blank" rel="external">https://github.com/RomainPiel/Shimmer-android</a>  </p>
</li>
<li><p>Titanic<br>可以显示水位上升下降(不知道该怎么描述 囧)的 TextView<br>项目地址：<a href="https://github.com/RomainPiel/Titanic" target="_blank" rel="external">https://github.com/RomainPiel/Titanic</a><br>效果图：<img src="https://github.com/RomainPiel/Titanic/raw/master/titanic.gif" alt="Renderings">  </p>
</li>
<li><p>android-iconify<br>提供带 Icon 的 TextView,Menu,Button 等<br>项目地址：<a href="https://github.com/JoanZapata/android-iconify" target="_blank" rel="external">https://github.com/JoanZapata/android-iconify</a>  </p>
</li>
<li><p>Calligraphy<br>让我们在 android 开发中使用自定义字体变得更加简单<br>项目地址：<a href="https://github.com/chrisjenx/Calligraphy" target="_blank" rel="external">https://github.com/chrisjenx/Calligraphy</a><br>效果图：<img src="https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png" alt="Renderings">  </p>
</li>
<li><p>CreditsRoll<br>类似星球大战字幕效果的 TextView<br>项目地址：<a href="https://github.com/frakbot/CreditsRoll" target="_blank" rel="external">https://github.com/frakbot/CreditsRoll</a>  </p>
</li>
<li><p>android-process-buton<br>带加载或提交进度的 Button<br>项目地址：<a href="https://github.com/dmytrodanylyk/android-process-buton" target="_blank" rel="external">https://github.com/dmytrodanylyk/android-process-buton</a>  </p>
</li>
<li><p>FButton<br>扁平化的 Button<br>项目地址：<a href="https://github.com/hoang8f/android-flat-button" target="_blank" rel="external">https://github.com/hoang8f/android-flat-button</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo</a>  </p>
</li>
<li><p>FloatingActionButton<br>一个类似 Android 版 Google+浮动功能按钮的控件，可以响应 ListView 的滚动事件。当列表向上滚动的时候会自动显示，向下滚动的时候自动隐藏。<br>项目地址：<a href="https://github.com/makovkastar/FloatingActionButton" target="_blank" rel="external">https://github.com/makovkastar/FloatingActionButton</a><br>Demo 地址：<a href="https://github.com/makovkastar/FloatingActionButton/tree/master/" target="_blank" rel="external">https://github.com/makovkastar/FloatingActionButton/tree/master/</a><br>效果图：<img src="https://raw.githubusercontent.com/makovkastar/FloatingActionButton/master/art/demo.gif" alt="Renderings">  </p>
</li>
<li><p>Android Saripaar<br>Android 表单验证<br>项目地址：<a href="https://github.com/ragunathjawahar/android-saripaar/" target="_blank" rel="external">https://github.com/ragunathjawahar/android-saripaar/</a>  </p>
</li>
<li><p>JumpingBeans<br>文字像 Mexican beans 一样跳动<br>项目地址：<a href="https://github.com/frakbot/JumpingBeans" target="_blank" rel="external">https://github.com/frakbot/JumpingBeans</a><br>Demo 地址：<a href="http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo" target="_blank" rel="external">http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo</a><br>效果图：<img src="https://github.com/frakbot/JumpingBeans/blob/master/art/jumpingdots.gif" alt="Renderings">  </p>
</li>
<li><p>FancyButtons<br>一个不用图片就可以帮助我们创建出漂亮按钮的库。<br>项目地址：<a href="https://github.com/medyo/fancybuttons" target="_blank" rel="external">https://github.com/medyo/fancybuttons</a><br>Demo 地址：<a href="https://github.com/medyo/fancybuttons/tree/master/samples" target="_blank" rel="external">https://github.com/medyo/fancybuttons/tree/master/samples</a><br>效果图：<img src="https://camo.githubusercontent.com/8c5800ef180f69d302237132906737bf71a52caf/68747470733a2f2f7261772e6769746875622e636f6d2f6d6564796f2f66616e6379627574746f6e732f6d61737465722f73637265656e73686f74732f66616e63792e706e67" alt="Renderings"><br><a href="https://raw.githubusercontent.com/medyo/fancybuttons/master/screenshots/fancy2.png" target="_blank" rel="external">https://raw.githubusercontent.com/medyo/fancybuttons/master/screenshots/fancy2.png</a>  </p>
</li>
<li><p>Android-RobotoTextView<br>一个实现了所有 Roboto 字体的 TextView，包括新出的 Roboto Slab 字体。<br>项目地址：<a href="https://github.com/johnkil/Android-RobotoTextView" target="_blank" rel="external">https://github.com/johnkil/Android-RobotoTextView</a><br>Demo 地址：<a href="http://play.google.com/store/apps/details?id=com.devspark.robototextview" target="_blank" rel="external">http://play.google.com/store/apps/details?id=com.devspark.robototextview</a><br>Demo 项目：<a href="https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample" target="_blank" rel="external">https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample</a><br>效果图：<img src="https://camo.githubusercontent.com/f058c810055e1ff12fa995346059ad399d9c0f95/687474703a2f2f6934362e74696e797069632e636f6d2f6239646736392e706e67" alt="Renderings">  </p>
</li>
<li><p>Android-WizardPager<br>一个表单向导库<br>项目地址：<a href="https://github.com/romannurik/android-wizardpager" target="_blank" rel="external">https://github.com/romannurik/android-wizardpager</a><br>Demo 项目：<a href="https://github.com/str4d/android-wizardpager/tree/textfield" target="_blank" rel="external">https://github.com/str4d/android-wizardpager/tree/textfield</a><br>效果图：<img src="https://camo.githubusercontent.com/685a1eee3b9b7eb6a0409061031654ea7d6b0b17/68747470733a2f2f6c68352e676f6f676c6575736572636f6e74656e742e636f6d2f2d664944555a3074514373632f554a4e4c6a6e504c5447492f41414141414141416f4f382f784b63654f61746c6a50302f773431332d683638392d6e6f2f322e706e67" alt="Renderings">  </p>
</li>
<li><p>RippleView<br>一个实现了 Android L 上才引入的点击按钮后出现水波纹效果的按钮<br>项目地址：<a href="https://github.com/siriscac/RippleView" target="_blank" rel="external">https://github.com/siriscac/RippleView</a><br>Demo 项目：<a href="https://github.com/siriscac/RippleView/tree/master/RippleViewExample" target="_blank" rel="external">https://github.com/siriscac/RippleView/tree/master/RippleViewExample</a><br>效果图：<img src="https://camo.githubusercontent.com/eec41193900aad4803dcf18bc9915fafa3f7d1cf/68747470733a2f2f7261772e6769746875622e636f6d2f73697269736361632f526970706c65566965772f6d61737465722f53637265656e732f53637265656e2e676966" alt="Renderings">  </p>
</li>
<li><p>RippleEffect<br>一个实现 Material Design Ripple 效果的库，支持 Android API 9+以上版本。<br>项目地址：<a href="https://github.com/traex/RippleEffect" target="_blank" rel="external">https://github.com/traex/RippleEffect</a><br>Demo 项目：<a href="https://github.com/traex/RippleEffect/tree/master/sample" target="_blank" rel="external">https://github.com/traex/RippleEffect/tree/master/sample</a><br>效果图：<img src="https://raw.githubusercontent.com/traex/RippleEffect/master/header.png" alt="Renderings">  </p>
</li>
<li><p>RippleCompat<br>使用易于移植的方式为UI控件实现波纹效应，可以适配控件原背景及Palette支持。api简单，可自定义效果，兼容至Android API 7+。<br>项目地址：<a href="https://github.com/desmond1121/RippleCompat" target="_blank" rel="external">https://github.com/desmond1121/RippleCompat</a><br>Demo 项目：<a href="https://github.com/desmond1121/RippleCompat/tree/master/app" target="_blank" rel="external">https://github.com/desmond1121/RippleCompat/tree/master/app</a><br>效果图：<br><img src="https://raw.githubusercontent.com/desmond1121/RippleCompat/master/demo/Demo.gif" alt="Renderings"></p>
</li>
</ol>
<p>palette效果：<br><img src="https://raw.githubusercontent.com/desmond1121/RippleCompat/master/demo/Demo1.gif" alt="Renderings"></p>
<ol>
<li><p>Android Floating Label Widgets<br>包含一系列控件，这些控件特点是：有默认值，当值不为空时默认值浮动到上面变为提示<br>项目地址：<a href="https://github.com/marvinlabs/android-floatinglabel-widgets" target="_blank" rel="external">https://github.com/marvinlabs/android-floatinglabel-widgets</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo</a><br>在线演示：<a href="http://www.youtube.com/watch?v=hpZD9gJcRg0&amp;feature=youtu.be" target="_blank" rel="external">http://www.youtube.com/watch?v=hpZD9gJcRg0&amp;feature=youtu.be</a>  </p>
</li>
<li><p>MaterialEditText<br>EditText 的 Material Design 实现。包含 <a href="http://www.google.com/design/spec/components/text-fields.html" target="_blank" rel="external">Google Material Design Spec</a>中的 UI 效果和一些新增特性。<br>项目地址：<a href="https://github.com/rengwuxian/MaterialEditText" target="_blank" rel="external">https://github.com/rengwuxian/MaterialEditText</a>  </p>
</li>
<li><p>MaterialEditText<br>实现 <a href="http://www.google.com/design/spec/components/text-fields.html" target="_blank" rel="external">Material Design</a> 中 Ripple 效果线条背景的 EditText。直接替换原生 EditText 即可集成。<br>项目地址：<a href="https://github.com/DreamingInCodeZH/MaterialEditText" target="_blank" rel="external">https://github.com/DreamingInCodeZH/MaterialEditText</a>    </p>
</li>
<li><p>MultiActionTextView<br>可以分别给 TextView 中的某几个字设置点击事件的 TextView<br>项目地址：<a href="https://github.com/ajaysahani/MultiActionTextView" target="_blank" rel="external">https://github.com/ajaysahani/MultiActionTextView</a><br>效果图：<img src="https://camo.githubusercontent.com/1223e37d084e84ec0e22a1b27e7513661d0e1b39/687474703a2f2f692e696d6775722e636f6d2f773934576f53582e706e67" alt="Renderings">  </p>
</li>
<li><p>ToggleButton<br>状态切换的 Button，类似 iOS，用 View 实现<br>项目地址：<a href="https://github.com/zcweng/ToggleButton" target="_blank" rel="external">https://github.com/zcweng/ToggleButton</a><br>效果图：<img src="https://github.com/zcweng/ToggleButton/raw/master/ToggleButtonSample/21879.gif" alt="Renderings">  </p>
</li>
<li><p>SwitchButton<br>状态切换的 Button，类似 iOS，拥有良好的用户界面<br>项目地址：<a href="https://github.com/kyleduo/SwitchButton" target="_blank" rel="external">https://github.com/kyleduo/SwitchButton</a><br>效果图：<img src="https://raw.githubusercontent.com/kyleduo/SwitchButton/master/preview/demo_131.jpg" alt="Renderings">  </p>
</li>
<li><p>SlideSwitch<br>状态切换的开关，可以设置为类似 IOS 的圆形，也可以设置为矩形，用 View 实现<br>项目地址：<a href="https://github.com/Leaking/SlideSwitch" target="_blank" rel="external">https://github.com/Leaking/SlideSwitch</a><br>效果图：<img src="https://github.com/Leaking/SlideSwitch/blob/master/Example/TestLibs/res/drawable-hdpi/slide_c.gif" alt="Renderings">  </p>
</li>
<li><p>ExpandableTextView<br>可展开和收缩内容的 TextView。<br>项目地址：<a href="https://github.com/Manabu-GT/ExpandableTextView" target="_blank" rel="external">https://github.com/Manabu-GT/ExpandableTextView</a><br>效果图：<img src="https://camo.githubusercontent.com/8bf46083b3bd152c2051ae4c234649dbbb975376/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e6162752d47542f457870616e6461626c6554657874566965772f6d61737465722f6172742f726561646d655f64656d6f2e676966" alt="Renderings">  </p>
</li>
<li><p>TagCloudView(支持 SingleLine 模式的标签云)<br>标签云效果，只需要一行代码即可设置为 SingleLine 模式，轻松实现知乎问题话题列表效果。SingleLine 模式时末尾文字及图片可自定义。<br>项目地址：<a href="https://github.com/kingideayou/TagCloudView" target="_blank" rel="external">https://github.com/kingideayou/TagCloudView</a><br>示例APK地址：<a href="https://github.com/kingideayou/TagCloudView/raw/master/apk/Demo.apk" target="_blank" rel="external">https://github.com/kingideayou/TagCloudView/raw/master/apk/Demo.apk</a><br>APP示例：知乎<br>效果图：<img src="https://raw.githubusercontent.com/kingideayou/TagCloudView/master/imgs/tagCloudView_3.gif" alt="Renderings">  </p>
</li>
<li><p>BubbleTextView<br>Android Bubble View<br>项目地址：<a href="https://github.com/dupengtao/BubbleTextView" target="_blank" rel="external">https://github.com/dupengtao/BubbleTextView</a><br>效果图：<img src="https://camo.githubusercontent.com/3b8c44089da79868cb45a4da372f2eaae0f3341b/687474703a2f2f3764397069632e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f627562626c65775f766965772e706e67" alt="Renderings">  </p>
</li>
<li><p>shadow-layout<br>Android Shadow Layout<br>解决了<code>CardView</code>：1.不能画圆的阴影。2.设置阴影的位置。3.设置阴影颜色。<br>项目地址：<a href="https://github.com/dmytrodanylyk/shadow-layout" target="_blank" rel="external">https://github.com/dmytrodanylyk/shadow-layout</a><br>效果图：<br><img src="https://raw.githubusercontent.com/dmytrodanylyk/shadow-layout/master/screenshots/intro.png" alt="Renderings">  </p>
</li>
<li><p>MoneyTextView<br>一个支持加法运算的金额输入TextView<br>项目地址：<a href="https://github.com/andyken/MoneyTextView" target="_blank" rel="external">https://github.com/andyken/MoneyTextView</a><br>效果图：<br><img src="https://github.com/andyken/MoneyTextView/blob/master/sample/sample1.gif" alt="Renderings">  </p>
</li>
</ol>
<h4 id="九、ScrollView"><a href="#九、ScrollView" class="headerlink" title="九、ScrollView"></a>九、ScrollView</h4><ol>
<li><p>Discrollview<br>支持滚动时 Item 淡入淡出，平移，缩放效果的 ScrollView<br>项目地址：<a href="https://github.com/flavienlaurent/discrollview" target="_blank" rel="external">https://github.com/flavienlaurent/discrollview</a><br>Demo 地址：<a href="https://github.com/flavienlaurent/discrollview/raw/master/sample.apk" target="_blank" rel="external">https://github.com/flavienlaurent/discrollview/raw/master/sample.apk</a>  </p>
</li>
<li><p>PullScrollView<br>仿照新浪微博 Android 客户端个人中心的 ScrollView，下拉背景伸缩回弹效果。<br>项目地址：<a href="https://github.com/MarkMjw/PullScrollView" target="_blank" rel="external">https://github.com/MarkMjw/PullScrollView</a><br>效果图：<img src="https://raw.github.com/MarkMjw/PullScrollView/master/Screenshots/1.png" alt="Renderings">  </p>
</li>
<li><p>ArcLayout<br>一个非常简单的弧布局库<br>项目地址：<a href="https://github.com/ogaclejapan/ArcLayout" target="_blank" rel="external">https://github.com/ogaclejapan/ArcLayout</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo</a><br>效果图：<img src="https://raw.githubusercontent.com/ogaclejapan/ArcLayout/master/art/demo1.gif" alt="Renderings"><br><a href="https://raw.githubusercontent.com/ogaclejapan/ArcLayout/master/art/demo2.gif" target="_blank" rel="external">https://raw.githubusercontent.com/ogaclejapan/ArcLayout/master/art/demo2.gif</a>  </p>
</li>
<li><p>ParallaxScrollView<br>支持视差滚动的 ScrollView ，背景图片的滚动速度小于 ScrollView 中子控件的滚动速度<br>项目地址：<a href="https://github.com/chrisjenx/ParallaxScrollView" target="_blank" rel="external">https://github.com/chrisjenx/ParallaxScrollView</a><br>Demo 地址：<a href="http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk" target="_blank" rel="external">http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk</a>  </p>
</li>
<li><p>AKParallax-Android<br>支持视差滚动的 ScrollView<br>项目地址：<a href="https://github.com/ideaismobile/AKParallax-Android" target="_blank" rel="external">https://github.com/ideaismobile/AKParallax-Android</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample</a>  </p>
</li>
<li><p>Android-ObservableScrollView<br>监听滚动视图滚动事件的库，帮助与 Toolbar 的交互动效处理与 Material Design 的实现<br>项目地址：<a href="https://github.com/ksoichiro/Android-ObservableScrollView" target="_blank" rel="external">https://github.com/ksoichiro/Android-ObservableScrollView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2</a>  </p>
</li>
<li><p>OverScrollView<br>有弹性的 ScrollView，实现了当手指滑动到 ScrollView 的顶部、底部时，可以继续的向上、向下拉伸。当释放手指的时候，向上、下回弹<br>项目地址：<a href="https://github.com/EverythingMe/OverScrollView" target="_blank" rel="external">https://github.com/EverythingMe/OverScrollView</a>  </p>
</li>
</ol>
<h4 id="十、TimeView"><a href="#十、TimeView" class="headerlink" title="十、TimeView"></a>十、TimeView</h4><p>包括 TimePicker、DatePicker、CalendarView、Clock 等时间相关控件  </p>
<ol>
<li><p>android-times-square<br>Android 日历时间部件，支持选取单个日期，多个日期，及日期区间段和对话框形式显示<br>项目地址：<a href="https://github.com/square/android-times-square" target="_blank" rel="external">https://github.com/square/android-times-square</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true</a>  </p>
</li>
<li><p>android-calendar-card<br>日历<br>项目地址：<a href="https://github.com/kenumir/android-calendar-card" target="_blank" rel="external">https://github.com/kenumir/android-calendar-card</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.wt.calendarcardsample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.wt.calendarcardsample</a><br>效果图：<img src="https://raw.github.com/kenumir/android-calendar-card/master/calendar-card-sample/_work/device-2013-10-12-151801.png" alt="Renderings">  </p>
</li>
<li><p>AndroidWheel<br>Android Wheel 支持城市、多种日期时间、密码、图片<br>项目地址：<a href="https://code.google.com/p/android-wheel/" target="_blank" rel="external">https://code.google.com/p/android-wheel/</a><br>效果图：<img src="http://farm6.staticflickr.com/5532/11621528786_220c040ba5_o.jpg" alt="Renderings">  </p>
</li>
<li><p>GoogleDateTimePickers<br>时间选择部件<br>项目地址：<a href="https://github.com/Mirkoddd/GoogleDateTimePickers" target="_blank" rel="external">https://github.com/Mirkoddd/GoogleDateTimePickers</a><br>文档介绍：<a href="https://play.google.com/store/apps/details?id=com.mirko.sample&amp;hl=it" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.mirko.sample&amp;hl=it</a>  </p>
</li>
<li><p>DateTimePicker<br>日期选择部件(Google Agenda 的样式风格)<br>项目地址：<a href="https://github.com/flavienlaurent/datetimepicker" target="_blank" rel="external">https://github.com/flavienlaurent/datetimepicker</a><br>Demo 地址：<a href="https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk" target="_blank" rel="external">https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk</a><br>效果图：<img src="https://camo.githubusercontent.com/493edeea3eb553ad0d0b121dbead0d7ec6a858f2/68747470733a2f2f7261772e6769746875622e636f6d2f6269626f756e652f6461746574696d657069636b65722f6d61737465722f67726170686963732f696d67312e706e67" alt="Renderings">  </p>
</li>
<li><p>android-betterpickers<br>提供日期、数字、时间（数字方式和钟表方式）、重复周期（闹钟的周期重复）、HMS（时、分、秒）的选择，支持以 DialogFragment 的弹窗选择<br>项目地址：<a href="https://github.com/derekbrameyer/android-betterpickers" target="_blank" rel="external">https://github.com/derekbrameyer/android-betterpickers</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample</a><br>效果图：<img src="https://camo.githubusercontent.com/897ae3c71b49c4366565f3480719647687b1804a/68747470733a2f2f7261772e6769746875622e636f6d2f646572656b6272616d657965722f616e64726f69642d6265747465727069636b6572732f6d61737465722f73616d706c652f696d61676572792f7765625f666561747572655f677261706869632e706e67" alt="Renderings">  </p>
</li>
<li><p>Android Week View<br>日期控件，支持周，天视图，支持自定义样式<br>项目地址：<a href="https://github.com/alamkanak/Android-Week-View" target="_blank" rel="external">https://github.com/alamkanak/Android-Week-View</a><br>效果图：<img src="https://github.com/alamkanak/Android-Week-View/blob/master/images/screen-shot.png" alt="Renderings">  </p>
</li>
<li><p>PickerView<br>仿 iOS 的 PickerView 控件，有时间选择和选项选择并支持一二三级联动效果，TimePopupWindow 时间选择器，支持年月日时分，年月日，时分等格式；OptionsPopupWindow 选项选择器，支持一，二，三级选项选择，并且可以设置是否联动<br>项目地址：<a href="https://github.com/saiwu-bigkoo/Android-PickerView" target="_blank" rel="external">https://github.com/saiwu-bigkoo/Android-PickerView</a><br>效果图：<img src="https://github.com/saiwu-bigkoo/PickerView/blob/master/preview/pickerdemo.gif" alt="Renderings">  </p>
</li>
<li><p>CountdownView<br>Android 倒计时控件，使用Canvas绘制，支持多种样式<br>项目地址：<a href="https://github.com/iwgang/CountdownView" target="_blank" rel="external">https://github.com/iwgang/CountdownView</a><br>效果图：<img src="https://raw.githubusercontent.com/iwgang/CountdownView/master/screenshot/screenshot.gif" alt="Renderings"></p>
</li>
</ol>
<h4 id="十一、TipView"><a href="#十一、TipView" class="headerlink" title="十一、TipView"></a>十一、TipView</h4><p>包括 Toast、角标、UndoBar 等提示性控件  </p>
<ol>
<li><p>SVProgressHUD<br>SVProgressHUD For Android 精仿iOS的提示库 SVProgressHUD，api也几乎一样。<br>项目地址：<a href="https://github.com/saiwu-bigkoo/Android-SVProgressHUD" target="_blank" rel="external">https://github.com/saiwu-bigkoo/Android-SVProgressHUD</a><br>效果图：<img src="https://github.com/saiwu-bigkoo/Android-SVProgressHUD/raw/master/preview/svprogresshuddemo.gif" alt="Renderings">  </p>
</li>
<li><p>Crouton<br>丰富样式的 Toast，允许 alert、comfirm、info 样式及点击消失样式，允许设置 Toast 显示时间，允许自定义 View。 本文 32. SuperToasts 为其扩展版<br>项目地址：<a href="https://github.com/keyboardsurfer/Crouton" target="_blank" rel="external">https://github.com/keyboardsurfer/Crouton</a><br>Demo 地址：<a href="http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton" target="_blank" rel="external">http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton</a>  </p>
</li>
<li><p>supertooltips<br>带动画效果的 Tips 显示<br>项目地址：<a href="https://github.com/nhaarman/supertooltips" target="_blank" rel="external">https://github.com/nhaarman/supertooltips</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.haarman.supertooltips" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.haarman.supertooltips</a>  </p>
</li>
<li><p>Android ViewBadger<br>为其他 View 添加角标（消息圆点）等<br>项目地址：<a href="https://github.com/jgilfelt/android-viewbadger" target="_blank" rel="external">https://github.com/jgilfelt/android-viewbadger</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true</a><br>效果图：<img src="http://www.jeffgilfelt.com/viewbadger/vb-1a.png" alt="Renderings">  </p>
</li>
<li><p>SuperToasts<br>更丰富样式的 toast，支持 Button、Progress、Horizontal Progress 样式、支持进入动画、支持撤销及其动画设置<br>项目地址：<a href="https://github.com/JohnPersano/SuperToasts" target="_blank" rel="external">https://github.com/JohnPersano/SuperToasts</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.supertoastsdemo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.supertoastsdemo</a><br>效果图：<img src="http://i1331.photobucket.com/albums/w597/JohnPersano/supertoasts_githubimage_zps8a5ceb7c.png" alt="Renderings">  </p>
</li>
<li><p>UndoBar<br>屏幕底部显示取消或是确认的 PopupWindows<br>项目地址：<a href="https://github.com/soarcn/UndoBar" target="_blank" rel="external">https://github.com/soarcn/UndoBar</a><br>效果图：<img src="https://github.com/soarcn/UndoBar/blob/master/art/redo.png?raw=true" alt="Renderings">  </p>
</li>
<li><p>UndoBar<br>屏幕底部显示取消或是确认某操作<br>项目地址：<a href="https://github.com/jenzz/Android-UndoBar" target="_blank" rel="external">https://github.com/jenzz/Android-UndoBar</a><br>效果图：<img src="https://raw.github.com/jenzz/Android-UndoBar/master/assets/Screenshot2.png" alt="Renderings">  </p>
</li>
<li><p>Android-ActionItemBadge<br>可以在 ActionBar 的 MenuItem 上显示一个小角标<br>项目地址：<a href="https://github.com/mikepenz/Android-ActionItemBadge" target="_blank" rel="external">https://github.com/mikepenz/Android-ActionItemBadge</a><br>效果图：<img src="https://raw.githubusercontent.com/mikepenz/Android-ActionItemBadge/master/DEV/screenshot/screenshot1_small.png" alt="Renderings">  </p>
</li>
<li><p>SnackBar<br>Material Design 风格的 Toast，类似 Google inbox 中的提示<br>项目地址：<a href="https://github.com/MrEngineer13/SnackBar" target="_blank" rel="external">https://github.com/MrEngineer13/SnackBar</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample</a><br>效果图：<img src="https://camo.githubusercontent.com/67a39af16f3d46631567c1f7bd7dcddeb3c4c9e9/687474703a2f2f6d6174657269616c2d64657369676e2e73746f726167652e676f6f676c65617069732e636f6d2f696d616765732f636f6d706f6e656e74732d746f617374732d73706563732d737065635f746f6173745f30335f315f6c617267655f6d6470692e706e67" alt="Renderings">  </p>
</li>
<li><p>HeadsUp<br>在 2.3 上使用 android  5.0 的 HeadsUp 效果<br>项目地址：<a href="https://github.com/zzz40500/HeadsUp" target="_blank" rel="external">https://github.com/zzz40500/HeadsUp</a><br>效果图：<img src="http://upload-images.jianshu.io/upload_images/166866-543a5d26ab71d0f6.gif" alt="Renderings](gif">  </p>
</li>
</ol>
<h4 id="十二、FlipView"><a href="#十二、FlipView" class="headerlink" title="十二、FlipView"></a>十二、FlipView</h4><ol>
<li><p>android-flip<br>类似 Flipboard 翻转动画的实现<br>项目地址：<a href="https://github.com/openaphid/android-flip" target="_blank" rel="external">https://github.com/openaphid/android-flip</a><br>Demo 地址：<a href="https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true" target="_blank" rel="external">https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true</a><br>APP 示例：flipboard  </p>
</li>
<li><p>FlipImageView<br>支持 x、y、z 及动画选择的翻转动画的实现<br>项目地址：<a href="https://github.com/castorflex/FlipImageView" target="_blank" rel="external">https://github.com/castorflex/FlipImageView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview" target="_blank" rel="external">https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview</a>  </p>
</li>
<li><p>FoldableLayout<br>Flip 翻转效果的 ListView，目前还不支持 ListView 缓存<br>项目地址：<a href="https://github.com/alexvasilkov/FoldableLayout" target="_blank" rel="external">https://github.com/alexvasilkov/FoldableLayout</a><br>Demo 地址：<a href="http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample" target="_blank" rel="external">http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample</a>  </p>
</li>
<li><p>FlipViewPager.Draco<br>Flip 翻转效果的 ViewPager<br>项目地址：<a href="https://github.com/Yalantis/FlipViewPager.Draco" target="_blank" rel="external">https://github.com/Yalantis/FlipViewPager.Draco</a><br>效果：<img src="https://camo.githubusercontent.com/db312e031e5f5a445b548d35986b0498caa261d3/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313735383239382f39396d696c65732d66696e642d667269656e64732d696e746572666163652d616e696d6174696f6e2e676966" alt="flip.gif">  </p>
</li>
</ol>
<h4 id="十三、ColorPickView"><a href="#十三、ColorPickView" class="headerlink" title="十三、ColorPickView"></a>十三、ColorPickView</h4><ol>
<li><p>ColorPickerView<br>颜色选择器，支持 PopupWindows 或新的 Activity 中打开<br>项目地址：<a href="https://code.google.com/p/color-picker-view/" target="_blank" rel="external">https://code.google.com/p/color-picker-view/</a><br>效果图：<img src="http://oi41.tinypic.com/33c6mm8.jpg" alt="Renderings">  </p>
</li>
<li><p>HoloColorPicker<br>颜色选择器<br>项目地址：<a href="https://github.com/LarsWerkman/HoloColorPicker" target="_blank" rel="external">https://github.com/LarsWerkman/HoloColorPicker</a><br>Demo 地址：<a href="https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit" target="_blank" rel="external">https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit</a>  </p>
</li>
<li><p>ColorPickerPreference<br>颜色选择器<br>项目地址：<a href="https://github.com/attenzione/android-ColorPickerPreference" target="_blank" rel="external">https://github.com/attenzione/android-ColorPickerPreference</a><br>效果图：<img src="https://github.com/attenzione/android-ColorPickerPreference/raw/master/screen_2.png" alt="Renderings">  </p>
</li>
<li><p>ColorPicker<br>颜色选择器（Google Agenda 中的样式风格）<br>项目地址：<a href="https://github.com/flavienlaurent/colorpicker" target="_blank" rel="external">https://github.com/flavienlaurent/colorpicker</a><br>Demo 地址：<a href="https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk" target="_blank" rel="external">https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk</a><br>效果图：<img src="https://camo.githubusercontent.com/a42581e637ca379004855d69e262d85ea966fa35/68747470733a2f2f7261772e6769746875622e636f6d2f6269626f756e652f636f6c6f727069636b65722f6d61737465722f67726170686963732f696d67312e706e67" alt="Renderings">  </p>
</li>
</ol>
<h4 id="十四、GraphView"><a href="#十四、GraphView" class="headerlink" title="十四、GraphView"></a>十四、GraphView</h4><ol>
<li><p>MPAndroidChart<br>强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、网状图等；支持图的拖拽缩放；支持 Android 2.2 以上，支持横纵轴缩放，多指缩放，展现动画、高亮、保存到 sdcard、从文件读取图表<br>项目地址：<a href="https://github.com/PhilJay/MPAndroidChart" target="_blank" rel="external">https://github.com/PhilJay/MPAndroidChart</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample</a><br>Demo 项目：<a href="https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample" target="_blank" rel="external">https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample</a><br>效果图：<img src="https://camo.githubusercontent.com/a9eaa5fc7fb6c1e70b22acd09385055e0f5c4fe7/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6c696e656368617274342e706e67" alt="Renderings"><br><a href="https://camo.githubusercontent.com/78b4bc4e50e151970961daf56e81c4c0db72d27c/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6261726368617274332e706e67" target="_blank" rel="external">https://camo.githubusercontent.com/78b4bc4e50e151970961daf56e81c4c0db72d27c/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6261726368617274332e706e67</a><br><a href="https://camo.githubusercontent.com/65f51783ec05038730b481ed614b57a94e867d86/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727432642e706e67" target="_blank" rel="external">https://camo.githubusercontent.com/65f51783ec05038730b481ed614b57a94e867d86/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727432642e706e67</a><br><a href="https://camo.githubusercontent.com/f66a35bf430b12480d3e2ed8e3bc8d7a17db950f/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727433642e706e67" target="_blank" rel="external">https://camo.githubusercontent.com/f66a35bf430b12480d3e2ed8e3bc8d7a17db950f/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727433642e706e67</a><br><a href="https://camo.githubusercontent.com/60bd0d71462ad577df775b956944b191e939728a/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f70696563686172745f686f6c657261646975735f73706163652e706e67" target="_blank" rel="external">https://camo.githubusercontent.com/60bd0d71462ad577df775b956944b191e939728a/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f70696563686172745f686f6c657261646975735f73706163652e706e67</a><br><a href="https://camo.githubusercontent.com/6b254aa699df7f9464967009129c3017de721b77/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f7363617474657263686172742e706e67" target="_blank" rel="external">https://camo.githubusercontent.com/6b254aa699df7f9464967009129c3017de721b77/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f7363617474657263686172742e706e67</a><br>在线演示：<a href="https://www.youtube.com/watch?v=ufaK_Hd6BpI" target="_blank" rel="external">https://www.youtube.com/watch?v=ufaK_Hd6BpI</a>  </p>
</li>
<li><p>achartengine<br>强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、拨号图/表、立方线图及各种图的结合<br>项目地址：<a href="https://code.google.com/p/achartengine/" target="_blank" rel="external">https://code.google.com/p/achartengine/</a><br>效果图：<img src="http://www.achartengine.org/dimages/average_temperature.png" alt="Renderings"><br><a href="http://www.achartengine.org/dimages/sales_line_and_area_chart.png" target="_blank" rel="external">http://www.achartengine.org/dimages/sales_line_and_area_chart.png</a><br><a href="http://www.achartengine.org/dimages/temperature_range_chart.png" target="_blank" rel="external">http://www.achartengine.org/dimages/temperature_range_chart.png</a><br><a href="http://www.achartengine.org/dimages/combined_chart.png" target="_blank" rel="external">http://www.achartengine.org/dimages/combined_chart.png</a><br><a href="http://www.achartengine.org/dimages/budget_chart.png" target="_blank" rel="external">http://www.achartengine.org/dimages/budget_chart.png</a><br>官网网址：<a href="http://www.achartengine.org/" target="_blank" rel="external">http://www.achartengine.org/</a><br>APP 示例：Wordpress Android，Google Analytics  </p>
</li>
<li><p>GraphView<br>绘制图表和曲线图的 View，可用于 Android 上的曲形图、柱状图、波浪图展示<br>项目地址：<a href="https://github.com/jjoe64/GraphView" target="_blank" rel="external">https://github.com/jjoe64/GraphView</a><br>Demo 项目：<a href="https://github.com/jjoe64/GraphView-Demos" target="_blank" rel="external">https://github.com/jjoe64/GraphView-Demos</a><br>APP 示例：Wordpress Android，Google Analytics  </p>
</li>
<li><p>HoloGraphLibrary<br>绘制现状图、柱状图、饼状图<br>项目地址：<a href="https://bitbucket.org/danielnadeau/holographlibrary/src" target="_blank" rel="external">https://bitbucket.org/danielnadeau/holographlibrary/src</a><br>文档介绍：<a href="https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home" target="_blank" rel="external">https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home</a>  </p>
</li>
<li><p>XCL-Charts<br>XCL-Charts 基于原生的 Canvas 来绘制各种图表,在设计时，尽量在保证开发效率的同时，给使用者提供足够多的定制化能力。因此使用简便,同时具有相当灵活的定制能力。目前支持 3D/非 3D 柱形图(Bar Chart)、3D/非 3D 饼图(Pie Chart)、堆积图(Stacked Bar Chart)、面积图(Area Chart)、 折线图(Line Chart)、曲线图(Spline Chart)、环形图(Dount Chart)、南丁格尔玫瑰图(Rose Chart)、仪表盘(Dial Chart)、刻度盘(Gauge Chart)、雷达图(Radar Chart)、圆形图(Circle Chart)等图表。其它特性还包括支持图表缩放、手势移动、动画显示效果、高密度柱形显示、图表分界定制线、多图表的混合显示及同数据源不同类型图表切换等。<br>项目地址：<a href="https://github.com/xcltapestry/XCL-Charts" target="_blank" rel="external">https://github.com/xcltapestry/XCL-Charts</a><br>Demo 地址：<a href="https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true" target="_blank" rel="external">https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true</a>  </p>
</li>
<li><p>EazeGraph<br>Android 图表库，支持柱状图、分层柱状图、饼状图、线性图<br>项目地址：<a href="https://github.com/blackfizz/EazeGraph" target="_blank" rel="external">https://github.com/blackfizz/EazeGraph</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=org.eazegraph.app" target="_blank" rel="external">https://play.google.com/store/apps/details?id=org.eazegraph.app</a>  </p>
</li>
<li><p>WilliamChart<br>绘制图表的库，支持 LineChartView、BarChartView 和 StackBarChartView 三中图表类型，并且支持 Android 2.2 及以上的系统。<br>项目地址：<a href="https://github.com/diogobernardino/WilliamChart" target="_blank" rel="external">https://github.com/diogobernardino/WilliamChart</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.db.williamchartdemo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.db.williamchartdemo</a><br>Demo 项目：<a href="https://github.com/diogobernardino/WilliamChart/tree/master/sample" target="_blank" rel="external">https://github.com/diogobernardino/WilliamChart/tree/master/sample</a><br>效果图：<img src="https://github.com/diogobernardino/WilliamChart/raw/master/art/linechart.gif" alt="Renderings"><img src="https://github.com/diogobernardino/WilliamChart/raw/master/art/barchart.gif" alt="Renderings"><img src="https://github.com/diogobernardino/WilliamChart/raw/master/art/stackbarchart.gif" alt="Renderings">  </p>
</li>
<li><p>HelloCharts for Android<br>支持折线图、柱状图、饼图、气泡图、组合图；支持预览、放大缩小，滚动，部分图表支持动画；支持 Android 2.2 以上<br>项目地址：<a href="https://github.com/lecho/hellocharts-android" target="_blank" rel="external">https://github.com/lecho/hellocharts-android</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples" target="_blank" rel="external">https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples</a><br>在线演示：<a href="https://www.youtube.com/watch?v=xbSBjyjH2SY" target="_blank" rel="external">https://www.youtube.com/watch?v=xbSBjyjH2SY</a>  </p>
</li>
<li><p>PieChartView<br>比较简单直接的饼状统计报表图，使用方便，设置相应的属性参数即可<br>项目地址：<a href="https://github.com/wuseal/PieChartView" target="_blank" rel="external">https://github.com/wuseal/PieChartView</a><br>Demo 地址：<a href="https://github.com/wuseal/PieChartView" target="_blank" rel="external">https://github.com/wuseal/PieChartView</a><br>效果图：<br><img src="https://github.com/wuseal/PieChartView/blob/master/demo.png?raw=true" alt="Renderings">  </p>
</li>
</ol>
<h4 id="十五、UI-Style"><a href="#十五、UI-Style" class="headerlink" title="十五、UI Style"></a>十五、UI Style</h4><p>不同样式的系统 UI 风格，如 IOS、Bootstrap 风格  </p>
<ol>
<li><p>UITableView<br>ios 风格控件，包括 Button、ListView、TableView<br>项目地址：<a href="https://github.com/thiagolocatelli/android-uitableview" target="_blank" rel="external">https://github.com/thiagolocatelli/android-uitableview</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true</a>  </p>
</li>
<li><p>ATableView<br>ios 风格控件<br>项目地址：<a href="https://github.com/dmacosta/ATableView" target="_blank" rel="external">https://github.com/dmacosta/ATableView</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo</a>  </p>
</li>
<li><p>Cards-UI<br>卡片式 View，支持单个卡片，item 为卡片的 ListView<br>项目地址：<a href="https://github.com/afollestad/Cards-UI" target="_blank" rel="external">https://github.com/afollestad/Cards-UI</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true</a>  </p>
</li>
<li><p>cardslib<br>卡片式 View，支持单个卡片，item 为卡片的 ListView 和 GridView<br>项目地址：<a href="https://github.com/gabrielemariotti/cardslib" target="_blank" rel="external">https://github.com/gabrielemariotti/cardslib</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo</a>  </p>
</li>
<li><p>Android-Bootstrap<br>Bootstrap 风格的按钮<br>项目地址：<a href="https://github.com/Bearded-Hen/Android-Bootstrap" target="_blank" rel="external">https://github.com/Bearded-Hen/Android-Bootstrap</a><br>效果图：<img src="https://raw.github.com/Bearded-Hen/Android-Bootstrap/master/images/device_image.png" alt="Renderings">  </p>
</li>
<li><p>Material Design Android Library<br>Android L 中 Material Design 风格的组件适配到 Android 2.2+<br>项目地址：<a href="https://github.com/navasmdc/MaterialDesignLibrary" target="_blank" rel="external">https://github.com/navasmdc/MaterialDesignLibrary</a>  </p>
</li>
<li><p>Android FlatUI<br>Android 扁平化风格的组件，支持一些自定义样式<br>项目地址：<a href="https://github.com/eluleci/FlatUI" target="_blank" rel="external">https://github.com/eluleci/FlatUI</a><br>效果图：<img src="https://camo.githubusercontent.com/590d4a2ac322417b71f83223bd58b83903d58343/68747470733a2f2f7261772e6769746875622e636f6d2f656c756c6563692f466c617455492f6d61737465722f73616d706c652d696d616765732f73686f77636173652e706e67" alt="Renderings">  </p>
</li>
<li><p>cheesesquare<br>全新 Android 设计库演示 Demo，包括 Collapsing Toolbar、FloatingActionButton、View anchoring、NavigationView、Snackbar<br>项目地址：<a href="https://github.com/chrisbanes/cheesesquare" target="_blank" rel="external">https://github.com/chrisbanes/cheesesquare</a><br>效果图：<img src="http://7xikfc.com1.z0.glb.clouddn.com/Screenshot_2015-07-17-12-22-07.png" alt="Renderings">  </p>
</li>
</ol>
<h4 id="十六、其他"><a href="#十六、其他" class="headerlink" title="十六、其他"></a>十六、其他</h4><ol>
<li><p>SnappingStepper<br>一种漂亮的UI控件，能更灵活的控制数字的增减。可用于购物车商品数量控制。<br>项目地址：<a href="https://github.com/saiwu-bigkoo/Android-SnappingStepper" target="_blank" rel="external">https://github.com/saiwu-bigkoo/Android-SnappingStepper</a><br>效果图：<img src="https://github.com/saiwu-bigkoo/Android-SnappingStepper/blob/master/preview/snappingstepperdemo.gif" alt="Renderings">  </p>
</li>
<li><p>SwipeBackLayout<br>左右或向上滑动返回的 Activity<br>项目地址：<a href="https://github.com/Issacw0ng/SwipeBackLayout" target="_blank" rel="external">https://github.com/Issacw0ng/SwipeBackLayout</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo</a><br>APP 示例：知乎  </p>
</li>
<li><p>ParallaxBackLayout<br>视差滑动返回的 Activity<br>项目地址：<a href="https://github.com/anzewei/ParallaxBackLayout" target="_blank" rel="external">https://github.com/anzewei/ParallaxBackLayout</a><br>Demo 地址：<a href="https://github.com/anzewei/ParallaxBackLayout/blob/master/ext/demo.apk?raw=true" target="_blank" rel="external">https://github.com/anzewei/ParallaxBackLayout/blob/master/ext/demo.apk?raw=true</a><br>效果图：<img src="https://github.com/anzewei/ParallaxBackLayout/blob/master/ext/v0.2.gif" alt="Renderings">  </p>
</li>
<li><p>android-styled-dialogs<br>可自定义样式的 dialog，默认与 Holo 主题样式一致，在 Android2.2 以上同一样式<br>项目地址：<a href="https://github.com/inmite/android-styled-dialogs" target="_blank" rel="external">https://github.com/inmite/android-styled-dialogs</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true</a>  </p>
</li>
<li><p>Android Sliding Up Panel<br>可拖动的 View，能在当前 Activity 上扶起一个可拖动的 Panel<br>项目地址：<a href="https://github.com/umano/AndroidSlidingUpPanel" target="_blank" rel="external">https://github.com/umano/AndroidSlidingUpPanel</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.sothree.umano" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.sothree.umano</a><br>APP 示例：Google Music 精简播放栏  </p>
</li>
<li><p>TableFixHeaders<br>第一列固定的 Table<br>项目地址：<a href="https://github.com/InQBarna/TableFixHeaders" target="_blank" rel="external">https://github.com/InQBarna/TableFixHeaders</a><br>Demo 地址：<a href="http://bit.ly/13buAIq" target="_blank" rel="external">http://bit.ly/13buAIq</a>  </p>
</li>
<li><p>Inscription<br>可用于展示应用 change 和 new feature 信息<br>项目地址：<a href="https://github.com/MartinvanZ/Inscription" target="_blank" rel="external">https://github.com/MartinvanZ/Inscription</a>  </p>
</li>
<li><p>ActivityTransition<br>Activity 切换动画，包括渐变、flip、某个位置进入等等<br>项目地址：<a href="https://github.com/ophilbert/ActivityTransition" target="_blank" rel="external">https://github.com/ophilbert/ActivityTransition</a><br>文档介绍：<a href="https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true" target="_blank" rel="external">https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true</a>  </p>
</li>
<li><p>EasyAndroidAnimations<br>针对 View 的各种动画<br>项目地址：<a href="https://github.com/2359media/EasyAndroidAnimations" target="_blank" rel="external">https://github.com/2359media/EasyAndroidAnimations</a>  </p>
</li>
<li><p>ViewAnimation<br>对android view 动画进行封装,实现起更简单，自带三种常见运动路径，其他的可自定义<br>项目地址：<a href="https://github.com/guohuanwen/ViewAniamtion" target="_blank" rel="external">https://github.com/guohuanwen/ViewAniamtion</a><br>效果图：<img src="https://github.com/guohuanwen/ViewAniamtion/blob/master/sreenshots/AnimationGif.gif" alt="ViewAnimation"><br>APP 示例：QQ名片圈圈效果  </p>
</li>
<li><p>AndroidLoadingAnimation<br>多种android加载动画<br>项目地址：<a href="https://github.com/guohuanwen/AndroidLoadingAnimation" target="_blank" rel="external">https://github.com/guohuanwen/AndroidLoadingAnimation</a><br>效果图：<img src="https://github.com/guohuanwen/AndroidLoadingAnimation/blob/master/screenshots/taiji1.gif" alt="TaiJIView">  </p>
</li>
</ol>
<ol>
<li><p>android-lockpattern<br>Android 的图案密码解锁<br>项目地址：<a href="https://code.google.com/p/android-lockpattern/" target="_blank" rel="external">https://code.google.com/p/android-lockpattern/</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/爱早起/Android Lock Pattern 源码解析" target="_blank" rel="external">android-lockpattern</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo</a><br>文档介绍：<a href="https://code.google.com/p/android-lockpattern/wiki/QuickUse" target="_blank" rel="external">https://code.google.com/p/android-lockpattern/wiki/QuickUse</a><br>APP 示例：Android 开机的图案密码解锁，支付宝的密码解锁  </p>
</li>
<li><p>PatternLock<br>另一个 Android 图案解锁库<br>项目地址：<a href="https://github.com/DreaminginCodeZH/PatternLock" target="_blank" rel="external">https://github.com/DreaminginCodeZH/PatternLock</a><br>Demo 地址：<a href="https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk" target="_blank" rel="external">https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk</a><br>效果图：<img src="https://github.com/DreaminginCodeZH/PatternLock/raw/master/image/sample_small.png" alt="Renderings"><br>APP 示例：Android 开机的图案密码解锁，支付宝的密码解锁  </p>
</li>
<li><p>RangeBar<br>类似于 SeekBar，不同的是可以选择一个范围内的值而不是单个值<br>项目地址：<a href="https://github.com/edmodo/range-bar" target="_blank" rel="external">https://github.com/edmodo/range-bar</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true</a><br>效果图：<img src="http://i.imgur.com/q85GhRjl.png" alt="Renderings">  </p>
</li>
<li><p>ChromeView<br>利用 Chromium 实现的 WebView，解决各个 Android 版本 WebView 不同的问题，同时利用最新 Chrome 代码<br>项目地址：<a href="https://github.com/pwnall/chromeview" target="_blank" rel="external">https://github.com/pwnall/chromeview</a>  </p>
</li>
<li><p>android-phased-seek-bar<br>支持预先定义状态的 SeekBar<br>项目地址：<a href="https://github.com/ademar111190/android-phased-seek-bar" target="_blank" rel="external">https://github.com/ademar111190/android-phased-seek-bar</a><br>效果图：<img src="https://raw.githubusercontent.com/ademar111190/android-phased-seek-bar/master/images/sample.gif" alt="Renderings">  </p>
</li>
<li><p>Android Slider Preference Library<br>可添加到设置中的基于对话框的 RankBar 小部件<br>项目地址：<a href="https://github.com/jayschwa/AndroidSliderPreference" target="_blank" rel="external">https://github.com/jayschwa/AndroidSliderPreference</a>  </p>
</li>
<li><p>ShowcaseView library<br>用于高亮显示应用程序的特定部分，从而突出突出重点<br>项目地址：<a href="https://github.com/amlcurran/ShowcaseView" target="_blank" rel="external">https://github.com/amlcurran/ShowcaseView</a>  </p>
</li>
<li><p>android-segmented-control<br>Android 上的 Segmented Controls，相当于 RadioButton 组<br>项目地址：<a href="https://github.com/hoang8f/android-segmented-control" target="_blank" rel="external">https://github.com/hoang8f/android-segmented-control</a>  </p>
</li>
<li><p>Swipeable Cards<br>类似 Tinder 的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢<br>项目地址：<a href="https://github.com/kikoso/Swipeable-Cards" target="_blank" rel="external">https://github.com/kikoso/Swipeable-Cards</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo</a>  </p>
</li>
<li><p>EdgeEffectOverride<br>改变 ScrollView, ListView, ExpandableListView, GridView, ViewPager 等滚动控件滚动到边缘的颜色效果<br>项目地址：<a href="https://github.com/AndroidAlliance/EdgeEffectOverride" target="_blank" rel="external">https://github.com/AndroidAlliance/EdgeEffectOverride</a>  </p>
</li>
<li><p>android-pinned-header-listviews<br>使 ExpandListView 的 Group 滑动到顶端时会固定不动直到另外一个 Group 到达顶端<br>项目地址：<a href="https://github.com/rtyley/android-pinned-header-listviews" target="_blank" rel="external">https://github.com/rtyley/android-pinned-header-listviews</a>  </p>
</li>
<li><p>AndroidSwipeLayout<br>滑动 Layout，支持单个 View，ListView，GridView<br>项目地址：<a href="https://github.com/daimajia/AndroidSwipeLayout" target="_blank" rel="external">https://github.com/daimajia/AndroidSwipeLayout</a><br>Demo 地址：<a href="https://github.com/daimajia/AndroidSwipeLayout/releases/download/v1.0.0/AndroidSwipeLayout-Demo-1.0.1-snapshot.apk" target="_blank" rel="external">Download Demo</a><br>效果图：<img src="http://ww2.sinaimg.cn/mw690/610dc034jw1ejoplapwtqg208n0e74dx.gif" alt="Renderings">  </p>
</li>
<li><p>DynamicCardLayout<br>在 Android 中实现的类似 Windows8 的瓷片布局<br>项目地址：<a href="https://github.com/dodola/DynamicCardLayout" target="_blank" rel="external">https://github.com/dodola/DynamicCardLayout</a><br>效果图：<img src="https://github.com/dodola/DynamicCardLayout/blob/master/pic1.png?raw=true" alt="Renderings">  </p>
</li>
<li><p>Emoticons-Keyboard<br>带表情情符号的自定义键盘<br>项目地址：<a href="https://github.com/chiragjain/Emoticons-Keyboard" target="_blank" rel="external">https://github.com/chiragjain/Emoticons-Keyboard</a><br>效果图：<img src="https://github.com/chiragjain/Emoticons-Keyboard/raw/master/s2.png" alt="Renderings">  </p>
</li>
<li><p>Android Typeface Helper<br>可以帮你轻松实现自定义字体的库<br>项目地址：<a href="https://github.com/norbsoft/android-typeface-helper" target="_blank" rel="external">https://github.com/norbsoft/android-typeface-helper</a><br>效果图：<img src="https://camo.githubusercontent.com/b8e7d4f4ab84ff96a3919ea264e2a83aca46e04e/68747470733a2f2f7261772e6769746875622e636f6d2f6e6f7262736f66742f616e64726f69642d74797065666163652d68656c7065722f6d61737465722f726561646d655f73637265656e2e706e67" alt="Renderings">  </p>
</li>
<li><p>Android-Anim-Playground<br>几个动画效果，其中第二个基于 android-svg 的绘制效果非常好<br>项目地址：<a href="https://github.com/Tibolte/Android-Anim-Playground" target="_blank" rel="external">https://github.com/Tibolte/Android-Anim-Playground</a><br>效果图：<img src="https://raw.githubusercontent.com/Tibolte/Android-Anim-Playground/master/androiddemosvg.gif" alt="Renderings">  </p>
</li>
<li><p>AlertView<br>仿iOS的AlertViewController 几乎完美还原iOS 的 AlertViewController ，同时支持Alert和ActionSheet模式，每一个细节都是精雕细琢，并把api封装成懒到极致模式，一行代码就可以进行弹窗.<br>项目地址：<a href="https://github.com/saiwu-bigkoo/Android-AlertView" target="_blank" rel="external">https://github.com/saiwu-bigkoo/Android-AlertView</a><br>效果图：<img src="https://github.com/saiwu-bigkoo/Android-AlertView/blob/master/preview/alertviewdemo.gif" alt="Renderings">  </p>
</li>
<li><p>NiftyDialogEffects<br>支持自定义飞入动画样式的 Dialog<br>项目地址：<a href="https://github.com/sd6352051/NiftyDialogEffects" target="_blank" rel="external">https://github.com/sd6352051/NiftyDialogEffects</a><br>效果图：<img src="https://camo.githubusercontent.com/456687ac516bb07f1076928d635bfddf6b90d5ec/687474703a2f2f696d67302e70682e3132362e6e65742f69433436653162586b55316631724966555a6f3939773d3d2f363539373632303632313938343031393430382e676966" alt="Renderings"><br>在线演示：<a href="http://tympanus.net/Development/ModalWindowEffects/" target="_blank" rel="external">http://tympanus.net/Development/ModalWindowEffects/</a>  </p>
</li>
<li><p>PostOffice<br>创建 Holo 及 Material Design 样式的 Dialog<br>项目地址：<a href="https://github.com/r0adkll/PostOffice" target="_blank" rel="external">https://github.com/r0adkll/PostOffice</a><br>效果图：<img src="https://github.com/r0adkll/PostOffice/raw/master/images/po_2.png" alt="Renderings">  </p>
</li>
<li><p>Swipecards<br>类似 Tinder 的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢，根据 Kikoso’s Swipeable-Cards 改造而来<br>项目地址：<a href="https://github.com/Diolor/Swipecards" target="_blank" rel="external">https://github.com/Diolor/Swipecards</a>  </p>
</li>
<li><p>SeekArc<br>圆形的 SeekBar<br>项目地址：<a href="https://github.com/TriggerTrap/SeekArc" target="_blank" rel="external">https://github.com/TriggerTrap/SeekArc</a><br>效果图：<img src="https://camo.githubusercontent.com/6a5091cb39a50d4c49b8d2f08684cb260db55aa7/68747470733a2f2f7261772e6769746875622e636f6d2f6e65696c643030312f5365656b4172632f6d61737465722f7261772f6172635f7377656570732e706e67" alt="Renderings">  </p>
</li>
<li><p>BlurDialogFragment<br>显示  DialogFragment 时背景模糊效果<br>项目地址：<a href="https://github.com/tvbarthel/BlurDialogFragment" target="_blank" rel="external">https://github.com/tvbarthel/BlurDialogFragment</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample</a>  </p>
</li>
<li><p>range-seek-bar<br>随机值选取的 SeekBar<br>项目地址：<a href="https://github.com/yahoo/android-range-seek-bar" target="_blank" rel="external">https://github.com/yahoo/android-range-seek-bar</a><br>效果图：<img src="https://github.com/yahoo/android-range-seek-bar/raw/master/demo_screenshot.png" alt="Renderings">  </p>
</li>
<li><p>MaterialRangeBar<br>可以选择一个范围内的值而不是单个值的 SeekBar，RangeBar 的 Material Design 风格适配<br>项目地址：<a href="https://github.com/oli107/material-range-bar" target="_blank" rel="external">https://github.com/oli107/material-range-bar</a><br>效果图：<img src="https://github.com/oli107/material-range-bar/raw/master/Screenshots/pin%20expand.gif" alt="Renderings">  </p>
</li>
<li><p>MaterialList<br>Material Design 风格的 CardView<br>项目地址：<a href="https://github.com/dexafree/MaterialList" target="_blank" rel="external">https://github.com/dexafree/MaterialList</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample</a><br>效果图：<img src="https://camo.githubusercontent.com/b71bb064807465b7c9132d7f6072e2064f01fb85/687474703a2f2f692e696d6775722e636f6d2f454e78554741772e706e67" alt="Renderings">  </p>
</li>
<li><p>road-trip<br>设置 path 的各种动画效果，以及如何实现复杂路径动画，类似于 ios 中的指纹注册界面的指纹动画效果<br>项目地址：<a href="https://github.com/romainguy/road-trip" target="_blank" rel="external">https://github.com/romainguy/road-trip</a><br>效果图：<img src="https://github.com/zhangxin1989/RoadTrip/raw/master/screenshot/Road-Trip-200.gif" alt="Renderings">  </p>
</li>
<li><p>dialogplus<br>一个简单的 Android 对话框，支持不同的弹出模式<br>项目地址：<a href="https://github.com/orhanobut/dialogplus" target="_blank" rel="external">https://github.com/orhanobut/dialogplus</a><br>效果图：<img src="https://github.com/nr4bt/dialogplus/raw/master/art/dialogplus.gif" alt="Renderings">  </p>
</li>
<li><p>FlowLayout<br>一个简单的流式布局，用法类似 LinearLayout，但是能够让子元素根据宽度自动换行<br>项目地址：<a href="https://github.com/LyndonChin/AndroidFlowLayout" target="_blank" rel="external">FLowLayout</a><br>效果图：<img src="http://img02.taobaocdn.com/imgextra/i2/160310864/TB2MH8.bVXXXXa3XXXXXXXXXXXX_!!160310864.png" alt="Renderings">  </p>
</li>
<li><p>CircleSeekbar<br>一个环形Seekbar组件,支持叠加复合使用<br>项目地址：<a href="https://github.com/feeeei/CircleSeekbar" target="_blank" rel="external">CircleSeekbar</a><br>效果图：<br><img src="https://github.com/feeeei/CircleSeekbar/blob/master/gifs/withtext.gif" alt="Renderings"><br><img src="https://github.com/feeeei/CircleSeekbar/raw/master/gifs/union.gif" alt="Renderings"></p>
</li>
<li><p>FinestWebView<br>美麗的和可定制的Android的活動，顯示在一個應用程序的網頁。<br>项目地址: <a href="https://github.com/TheFinestArtist/FinestWebView-Android" target="_blank" rel="external">https://github.com/TheFinestArtist/FinestWebView-Android</a><br>Sample 地址: <a href="https://play.google.com/store/apps/details?id=com.thefinestartist.finestwebview.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.thefinestartist.finestwebview.sample</a><br>效果图: <img src="https://github.com/TheFinestArtist/FinestWebView-Android/blob/master/art/screenshots.png?raw=true" alt="Renderings"></p>
</li>
<li><p>YouTubePlayerActivity<br>只需通過一個URL來在新的活動播放YouTube視頻。它支持屏幕方向，媒體音量控制等。<br>项目地址: <a href="https://github.com/TheFinestArtist/YouTubePlayerActivity" target="_blank" rel="external">https://github.com/TheFinestArtist/YouTubePlayerActivity</a><br>Sample 地址: <a href="https://play.google.com/store/apps/details?id=com.thefinestartist.ytpa.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.thefinestartist.ytpa.sample</a><br>效果图: <img src="https://github.com/thefinestartist/YouTubePlayerActivity/blob/master/art/preview.gif" alt="Renderings">  </p>
</li>
<li><p>material-camera<br>material风格的camera。能使camera使用起来更简单的库。<br>项目地址：<a href="https://github.com/afollestad/material-camera" target="_blank" rel="external">https://github.com/afollestad/material-camera</a><br>效果图：<br><img src="https://raw.githubusercontent.com/afollestad/material-camera/master/art/deviceart.png" alt="Renderings">    </p>
</li>
<li><p>material-dialogs<br>各种material风格的dialog。<br>漂亮的的、易于使用的和可定制的Dialog API，你能够使用Material designed风格的Dialog到API 8。<br>项目地址：<a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="external">https://github.com/afollestad/material-dialogs</a><br>Sample地址：<a href="https://github.com/afollestad/material-dialogs/blob/master/sample/sample.apk" target="_blank" rel="external">https://github.com/afollestad/material-dialogs/blob/master/sample/sample.apk</a><br>效果图：<br><img src="https://raw.githubusercontent.com/afollestad/material-dialogs/master/art/mddemoshowcase.png" alt="Renderings">    </p>
</li>
<li><p>NotifyUtil<br>最常见的通知样式库<br>项目地址:<a href="https://github.com/wenmingvs/NotifyUtil" target="_blank" rel="external">https://github.com/wenmingvs/NotifyUtil</a><br>demo地址：<a href="https://github.com/wenmingvs/NotifyUtil#notifydemo" target="_blank" rel="external">https://github.com/wenmingvs/NotifyUtil#notifydemo</a>  </p>
</li>
<li><p>CanPhotos<br>使用fresco选取多张图片并可预览图片<br>项目地址：<a href="https://github.com/canyinghao/CanPhotos" target="_blank" rel="external">https://github.com/canyinghao/CanPhotos</a><br>效果图：<br><img src="https://raw.githubusercontent.com/canyinghao/CanPhotos/master/pic/CanPhotos.gif" alt="Renderings"></p>
</li>
<li><p>CanDialog<br>仿照系统Dialog所写，继承于FrameLayout，添加一些动画，一些显示类型。<br>项目地址：<a href="https://github.com/canyinghao/CanDialog" target="_blank" rel="external">https://github.com/canyinghao/CanDialog</a><br>效果图：<br><img src="https://raw.githubusercontent.com/canyinghao/CanDialog/master/pic/CanDialog.gif" alt="Renderings"></p>
</li>
<li><p>WindRoseDiagramView<br>一个风力玫瑰图的 View 组件，项目地址：<img src="https://github.com/timqi/WindRoseDiagramView/" alt="https://github.com/timqi/WindRoseDiagramView/"><br><img src="https://github.com/timqi/WindRoseDiagramView/raw/master/art/WindRoseDiagram.gif" alt="效果图"></p>
</li>
<li><p>MaterialRatingBar<br>与 Google 系应用设计相同、支持拉伸、修正原生实现诸多问题的星级评分条。可直接替换 RatingBar。<br>项目地址：<a href="https://github.com/DreaminginCodeZH/MaterialRatingBar" target="_blank" rel="external">https://github.com/DreaminginCodeZH/MaterialRatingBar</a><br>Demo 地址：<a href="https://github.com/DreaminginCodeZH/MaterialRatingBar/releases/download/v1.0.2/sample-release.apk" target="_blank" rel="external">https://github.com/DreaminginCodeZH/MaterialRatingBar/releases/download/v1.0.2/sample-release.apk</a><br><img src="https://github.com/DreaminginCodeZH/MaterialRatingBar/raw/master/screenshot/sample_app.jpg" alt="效果图">  </p>
</li>
</ol>
<h2 id="第二部分-工具库"><a href="#第二部分-工具库" class="headerlink" title="第二部分 工具库"></a>第二部分 工具库</h2><p>主要包括那些不错的开发库，包括依赖注入框架、图片缓存、网络请求、数据库 ORM 建模、Android 公共库、Android 高版本向低版本兼容、多媒体相关及其他。  </p>
<h4 id="一、依赖注入-DI"><a href="#一、依赖注入-DI" class="headerlink" title="一、依赖注入 DI"></a>一、依赖注入 DI</h4><p>通过依赖注入减少 View、服务、资源简化初始化，事件绑定等重复繁琐工作  </p>
<ol>
<li><p>AndroidAnnotations(Code Diet)<br>android 快速开发框架<br>项目地址：<a href="https://github.com/excilys/androidannotations" target="_blank" rel="external">https://github.com/excilys/androidannotations</a><br>文档介绍：<a href="https://github.com/excilys/androidannotations/wiki" target="_blank" rel="external">https://github.com/excilys/androidannotations/wiki</a><br>官网网址：<a href="http://androidannotations.org/" target="_blank" rel="external">http://androidannotations.org/</a><br>特点：(1) 依赖注入：包括 view，extras，系统服务，资源等等<br>(2) 简单的线程模型，通过 annotation 表示方法运行在 ui 线程还是后台线程<br>(3) 事件绑定：通过 annotation 表示 view 的响应事件，不用在写内部类<br>(4) REST 客户端：定义客户端接口，自动生成 REST 请求的实现<br>(5) 没有你想象的复杂：AndroidAnnotations 只是在在编译时生成相应子类<br>(6) 不影响应用性能：仅 50kb，在编译时完成，不会对运行时有性能影响。<br>其他：与 roboguice 的比较：roboguice 通过运行时读取 annotations 进行反射，所以可能影响应用性能，而 AndroidAnnotations 在编译时生成子类，所以对性能没有影响  </p>
</li>
<li><p>roboguice<br>帮你处理了很多代码异常，利用 annotation 使得更少的代码完成项目<br>项目地址：<a href="https://github.com/roboguice/roboguice" target="_blank" rel="external">https://github.com/roboguice/roboguice</a><br>文档介绍：<a href="https://github.com/roboguice/roboguice/wiki" target="_blank" rel="external">https://github.com/roboguice/roboguice/wiki</a>  </p>
</li>
<li><p>butterknife<br>利用 annotation 帮你快速完成 View 的初始化，减少代码<br>项目地址：<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">https://github.com/JakeWharton/butterknife</a><br>文档介绍：<a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="external">http://jakewharton.github.io/butterknife/</a>  </p>
</li>
<li><p>Dagger<br>依赖注入，适用于 Android 和 Java<br>项目地址：<a href="https://github.com/square/dagger" target="_blank" rel="external">https://github.com/square/dagger</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/扔物线/Dagger 源码解析" target="_blank" rel="external">Dagger</a><br>文档介绍：<a href="http://square.github.io/dagger/" target="_blank" rel="external">http://square.github.io/dagger/</a>  </p>
</li>
<li><p>AutoParcel<br>注解自动生成Parcelable实现代码的库<br>项目地址：<a href="https://github.com/frankiesardo/auto-parcel" target="_blank" rel="external">https://github.com/frankiesardo/auto-parcel</a><br>这篇文章详细介绍了它的使用方法：<a href="https://passy.svbtle.com/simpler-android-apis-with-autoparcel" target="_blank" rel="external">AutoParcel</a><br>作者认为使用AutoParcel的好处是，可以简化构造函数，方便IDE代码自动完成，方便测试，前向兼容，生成不可变的对象。<br>文档介绍：<a href="https://github.com/frankiesardo/auto-parcel" target="_blank" rel="external">https://github.com/frankiesardo/auto-parcel</a></p>
</li>
</ol>
<h4 id="二、图片缓存"><a href="#二、图片缓存" class="headerlink" title="二、图片缓存"></a>二、图片缓存</h4><ol>
<li><p>Android-Universal-Image-Loader<br>图片缓存，目前使用最广泛的图片缓存，支持主流图片缓存的绝大多数特性。<br>项目地址：<a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">https://github.com/nostra13/Android-Universal-Image-Loader</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/huxian99/Android Universal Image Loader 源码分析" target="_blank" rel="external">Android-Universal-Image-Loader</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true</a><br>文档介绍：<a href="http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html" target="_blank" rel="external">http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html</a>  </p>
</li>
<li><p>picasso<br>square 开源的图片缓存<br>项目地址：<a href="https://github.com/square/picasso" target="_blank" rel="external">https://github.com/square/picasso</a><br>文档介绍：<a href="http://square.github.io/picasso/" target="_blank" rel="external">http://square.github.io/picasso/</a><br>特点：(1)可以自动检测 adapter 的重用并取消之前的下载<br>(2)图片变换<br>(3)可以加载本地资源<br>(4)可以设置占位资源<br>(5)支持 debug 模式  </p>
</li>
<li><p>Cube ImageLoader<br>阿里巴巴一淘使用的图片加载，综合了 Android-Universal-Image-Loader 和 square 等组件优点，简单易用，良好的中文文档支持<br>项目地址：<a href="https://github.com/etao-open-source/cube-sdk" target="_blank" rel="external">https://github.com/etao-open-source/cube-sdk</a><br>Demo 地址：<a href="https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk" target="_blank" rel="external">https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk</a><br>文档介绍：<a href="http://cube-sdk.liaohuqiu.net/" target="_blank" rel="external">http://cube-sdk.liaohuqiu.net/</a><br>效果图：<img src="https://raw.githubusercontent.com/etao-open-source/cube-sdk/dev/screen-shot.png" alt="Renderings">  </p>
</li>
<li><p>fresco<br>一款强大的图片缓存工具，由 Facebook 开发<br>项目地址：<a href="https://github.com/facebook/fresco" target="_blank" rel="external">https://github.com/facebook/fresco</a><br>文档介绍：<a href="http://frescolib.org/" target="_blank" rel="external">http://frescolib.org/</a><br>特点：(1) 两个内存缓存加上磁盘缓存构成了三级缓存<br>(2) 支持流式，可以类似网页上模糊渐进式显示图片<br>(3) 对多帧动画图片支持更好，如 Gif、WebP<br>(4) 更多样的显示，如圆角、进度条、点击重试、自定义对焦点<br>(5) 更多样的加载，如支持 EXIF、全面支持 WebP<br>(6) 支持 Android 2.3+  </p>
</li>
<li><p>Glide<br>Glide 是一个 android 平台上的快速和高效的开源的多媒体资源管理库,提供 多媒体文件的压缩,内存和磁盘缓存, 资源池的接口。<br>它可以最大性能地在 Android 设备上读取、解码、显示图片和视频。Glide 可以将远程的图片、视频、动画图片等缓存在设备本地便于提高用户浏览图片的流畅体验。<br>项目地址：<a href="https://github.com/bumptech/glide" target="_blank" rel="external">https://github.com/bumptech/glide</a><br>特点：<br>(1) GIF 动画的解码<br>(2) 本地视频剧照的解码<br>(3) 支持缩略图<br>(4) Activity 生命周期的集成<br>(5) 转码的支持<br>(6) 动画的支持<br>(7) OkHttp 和 Volley 的支持  </p>
</li>
</ol>
<h4 id="三、网络请求"><a href="#三、网络请求" class="headerlink" title="三、网络请求"></a>三、网络请求</h4><ol>
<li><p>Volley<br>Google 提供的网络通信库，使得网络请求更简单、更快速<br>项目地址：<a href="https://android.googlesource.com/platform/frameworks/volley" target="_blank" rel="external">https://android.googlesource.com/platform/frameworks/volley</a><br>文档介绍：<a href="http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf" target="_blank" rel="external">http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf</a>  </p>
</li>
<li><p>Asynchronous Http Client for Android<br>Android 异步 Http 请求<br>项目地址：<a href="https://github.com/loopj/android-async-http" target="_blank" rel="external">https://github.com/loopj/android-async-http</a><br>文档介绍：<a href="http://loopj.com/android-async-http/" target="_blank" rel="external">http://loopj.com/android-async-http/</a><br>特点：(1) 在匿名回调中处理请求结果<br>(2) 在 UI 线程外进行 http 请求<br>(3) 文件断点上传<br>(4) 智能重试<br>(5) 默认 gzip 压缩<br>(6) 支持解析成 Json 格式<br>(7) 可将 Cookies 持久化到 SharedPreferences  </p>
</li>
<li><p>android-query<br>异步加载，更少代码完成 Android 加载<br>项目地址：<a href="https://github.com/androidquery/androidquery" target="_blank" rel="external">https://github.com/androidquery/androidquery</a> 或 <a href="https://code.google.com/p/android-query/" target="_blank" rel="external">https://code.google.com/p/android-query/</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.androidquery" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.androidquery</a><br>文档介绍：<a href="https://code.google.com/p/android-query/#Why_AQuery?" target="_blank" rel="external">https://code.google.com/p/android-query/#Why_AQuery?</a><br>特点：<a href="https://code.google.com/p/android-query/#Why_AQuery?" target="_blank" rel="external">https://code.google.com/p/android-query/#Why_AQuery?</a>  </p>
</li>
<li><p>Async Http Client<br>Java 异步 Http 请求<br>项目地址：<a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="external">https://github.com/AsyncHttpClient/async-http-client</a><br>文档介绍：<a href="http://sonatype.github.io/async-http-client/" target="_blank" rel="external">http://sonatype.github.io/async-http-client/</a>  </p>
</li>
<li><p>Ion<br>支持图片、json、http post 等异步请求<br>项目地址：<a href="https://github.com/koush/ion" target="_blank" rel="external">https://github.com/koush/ion</a><br>文档介绍：<a href="https://github.com/koush/ion#more-examples" target="_blank" rel="external">https://github.com/koush/ion#more-examples</a>  </p>
</li>
<li><p>Http Request<br>项目地址：<a href="https://github.com/kevinsawicki/http-request" target="_blank" rel="external">https://github.com/kevinsawicki/http-request</a><br>文档介绍：<a href="https://github.com/kevinsawicki/http-request#examples" target="_blank" rel="external">https://github.com/kevinsawicki/http-request#examples</a>  </p>
</li>
<li><p>okhttp<br>square 开源的 http 工具类<br>项目地址：<a href="https://github.com/square/okhttp" target="_blank" rel="external">https://github.com/square/okhttp</a><br>文档介绍：<a href="http://square.github.io/okhttp/" target="_blank" rel="external">http://square.github.io/okhttp/</a><br>特点：(1) 支持 SPDY( <a href="http://zh.wikipedia.org/wiki/SPDY" target="_blank" rel="external">http://zh.wikipedia.org/wiki/SPDY</a> )协议。SPDY 协议是 Google 开发的基于传输控制协议的应用层协议，通过压缩，多路复用(一个 TCP 链接传送网页和图片等资源)和优先级来缩短加载时间。<br>(2) 如果 SPDY 不可用，利用连接池减少请求延迟<br>(3) Gzip 压缩<br>(4) Response 缓存减少不必要的请求  </p>
</li>
<li><p>Retrofit<br>RESTFUL API 设计<br>项目地址：<a href="https://github.com/square/retrofit" target="_blank" rel="external">https://github.com/square/retrofit</a><br>文档介绍：<a href="http://square.github.io/retrofit/" target="_blank" rel="external">http://square.github.io/retrofit/</a>  </p>
</li>
<li><p>RoboSpice<br>Android 异步网络请求工具，支持缓存、REST 等等<br>项目地址：<a href="https://github.com/stephanenicolas/robospice" target="_blank" rel="external">https://github.com/stephanenicolas/robospice</a><br>Demo 地址：<a href="https://github.com/stephanenicolas/RoboDemo/downloads" target="_blank" rel="external">https://github.com/stephanenicolas/RoboDemo/downloads</a>  </p>
</li>
<li><p>TwistVolley<br>TwistVolley 是对 Volley 的一个封装库。提供类似 Picasso 一样的串联式 API。使得使用 Volley 更加方便。<br>项目地址：<a href="https://github.com/TwistedEquations/TwistVolley" target="_blank" rel="external">https://github.com/TwistedEquations/TwistVolley</a>  </p>
</li>
<li><p>OkHttpFinal<br>一个对OkHttp封装的简单易用型HTTP请求和文件下载管理框架<br>项目地址：<a href="https://github.com/pengjianbo/OkHttpFinal" target="_blank" rel="external">https://github.com/pengjianbo/OkHttpFinal</a><br>Demo 地址：<a href="https://github.com/pengjianbo/OkHttpFinal" target="_blank" rel="external">https://github.com/pengjianbo/OkHttpFinal</a>  </p>
</li>
</ol>
<h4 id="四、数据库-orm-工具包"><a href="#四、数据库-orm-工具包" class="headerlink" title="四、数据库 orm 工具包"></a>四、数据库 orm 工具包</h4><p>orm 的 db 工具类，简化建表、查询、更新、插入、事务、索引的操作</p>
<ol>
<li><p>greenDAO<br>Android Sqlite orm 的 db 工具类<br>项目地址：<a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">https://github.com/greenrobot/greenDAO</a><br>文档介绍：<a href="http://greendao-orm.com/documentation/" target="_blank" rel="external">http://greendao-orm.com/documentation/</a><br>官网网址：<a href="http://greendao-orm.com/" target="_blank" rel="external">http://greendao-orm.com/</a><br>特点：(1) 性能佳<br>(2) 简单易用的 API<br>(3) 内存小好小<br>(4) 库大小小  </p>
</li>
<li><p>GreenDaoUpgradeHelper<br>greenDAO的数据库升级帮助类，只需一行代码解决数据库升级<br>项目地址：<a href="https://github.com/yuweiguocn/GreenDaoUpgradeHelper" target="_blank" rel="external">https://github.com/yuweiguocn/GreenDaoUpgradeHelper</a></p>
</li>
</ol>
<ol>
<li><p>ActiveAndroid<br>Android Sqlite orm 的 db 工具类<br>项目地址：<a href="https://github.com/pardom/ActiveAndroid" target="_blank" rel="external">https://github.com/pardom/ActiveAndroid</a><br>文档介绍：<a href="https://github.com/pardom/ActiveAndroid/wiki/_pages" target="_blank" rel="external">https://github.com/pardom/ActiveAndroid/wiki/_pages</a>  </p>
</li>
<li><p>Sprinkles<br>Android Sqlite orm 的 db 工具类，比较显著的特点就是配合 <a href="https://github.com/square/retrofit" target="_blank" rel="external">https://github.com/square/retrofit</a> 能保存从服务器获取的数据<br>项目地址：<a href="https://github.com/emilsjolander/sprinkles" target="_blank" rel="external">https://github.com/emilsjolander/sprinkles</a><br>文档介绍：<a href="http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/" target="_blank" rel="external">http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/</a>  </p>
</li>
<li><p>Realm<br>移动端的数据库，适用于 Phone、Tablet、Wearable，支持 ORM，线程安全、支持连表及数据库加密，比 SQLite 性能更好<br>项目地址：<a href="https://github.com/realm/realm-java" target="_blank" rel="external">https://github.com/realm/realm-java</a><br>文档介绍：<a href="http://realm.io/docs/java/0.72.0/" target="_blank" rel="external">http://realm.io/docs/java/0.72.0/</a>  </p>
</li>
<li><p>ormlite-android<br>项目地址：<a href="https://github.com/j256/ormlite-android" target="_blank" rel="external">https://github.com/j256/ormlite-android</a><br>文档介绍：<a href="http://ormlite.com/sqlite_java_android_orm.shtml" target="_blank" rel="external">http://ormlite.com/sqlite_java_android_orm.shtml</a>  </p>
</li>
<li><p>Schematic<br>根据 SQLite 生成 ContentProvider<br>项目地址：<a href="https://github.com/SimonVT/schematic" target="_blank" rel="external">https://github.com/SimonVT/schematic</a>  </p>
</li>
<li><p>DBFlow<br>Android SQLite ORM 工具库。综合了 Active Android, Schematic, Ollie,Sprinkles 等库的优点；通过注解实现，性能好；能生成 ContentProvider。<br>项目地址：<a href="https://github.com/Raizlabs/DBFlow" target="_blank" rel="external">https://github.com/Raizlabs/DBFlow</a><br>文档介绍：<a href="https://github.com/Raizlabs/DBFlow#usage-docs" target="_blank" rel="external">https://github.com/Raizlabs/DBFlow#usage-docs</a>  </p>
</li>
<li><p>SnappyDB<br>SnappyDB是一个key-value数据库，非常流行的NoSQL数据库。<br>项目地址：<a href="https://github.com/nhachicha/SnappyDB" target="_blank" rel="external">https://github.com/nhachicha/SnappyDB</a><br>演示Demo：<a href="https://play.google.com/store/apps/details?id=com.snappydb.snippets.app" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.snappydb.snippets.app</a><br>性能对比图：<br><img src="https://camo.githubusercontent.com/0f6193a1f84aa8a77d07ac18d3566b87bc89999b/687474703a2f2f736e6170707964622e636f6d2f696d672f62656e63686d61726b5f73716c6974655f776974685f7472616e73616374696f6e2e706e67" alt="Renderings"></p>
</li>
</ol>
<h4 id="五、Android-公共库"><a href="#五、Android-公共库" class="headerlink" title="五、Android 公共库"></a>五、Android 公共库</h4><ol>
<li><p>Guava<br>Google 的基于 java1.6 的类库集合的扩展项目，包括 collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O 等等. 这些高质量的 API 可以使你的 JAVa 代码更加优雅，更加简洁<br>项目地址：<a href="https://code.google.com/p/guava-libraries/" target="_blank" rel="external">https://code.google.com/p/guava-libraries/</a><br>文档介绍：<a href="https://code.google.com/p/guava-libraries/wiki/GuavaExplained" target="_blank" rel="external">https://code.google.com/p/guava-libraries/wiki/GuavaExplained</a>  </p>
</li>
<li><p>AndroidCommon<br>Android 公共库<br>项目地址：<a href="https://github.com/Trinea/AndroidCommon" target="_blank" rel="external">https://github.com/Trinea/AndroidCommon</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=cn.trinea.android.demo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href="http://www.trinea.cn/android/android-common-lib/" target="_blank" rel="external">http://www.trinea.cn/android/android-common-lib/</a><br>包括：a. ImageCache 图片缓存，包含内存和 Sdcard 缓存<br><a href="http://www.trinea.cn/android/android-imagecache/" target="_blank" rel="external">http://www.trinea.cn/android/android-imagecache/</a><br>特点：(1)支持预取新图片，支持等待队列<br>(2)包含二级缓存，可自定义文件名保存规则<br>(3)可选择多种缓存算法(FIFO、LIFO、LRU、MRU、LFU、MFU 等 13 种)或自定义缓存算法<br>(4)可方便的保存及初始化恢复数据<br>(5)支持不同类型网络处理<br>(6)可根据系统配置初始化缓存等  </p>
</li>
<li><p>HttpCache Http 缓存<br>文档介绍：<a href="http://www.trinea.cn/android/android-http-cache" target="_blank" rel="external">http://www.trinea.cn/android/android-http-cache</a><br>特点是：(1) 根据 cache-control、expires 缓存 http 请求<br>(2) 支持同步、异步 Http 请求<br>(3) 在匿名回调中处理请求结果<br>(4) 在 UI 线程外进行 http 请求<br>(5) 默认 gzip 压缩<br>(2) 公共 View(下拉及底部加载更多 ListView、底部加载更多 ScrollView、滑动一页 Gallery)<br>(3) Android 常用工具类(网络、下载、Android 资源操作、shell、文件、Json、随机数、Collection 等等)  </p>
</li>
<li><p>DropDownListView 下拉刷新及滑动到底部加载更多 ListView<br>文档介绍：<a href="http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/" target="_blank" rel="external">http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/</a>  </p>
</li>
<li><p>shipfaster<br>整合了 Dagger Otto Retrofit Robolectric Picasso OkHttp，方便快速开发<br>项目地址：<a href="https://github.com/pyricau/shipfaster" target="_blank" rel="external">https://github.com/pyricau/shipfaster</a>  </p>
</li>
<li><p>CleanAndroidCode<br>整合了 Dagger Otto AndroidAnnotations，方便快速开发<br>项目地址：<a href="https://github.com/pyricau/CleanAndroidCode" target="_blank" rel="external">https://github.com/pyricau/CleanAndroidCode</a>  </p>
</li>
<li><p>xUtils<br>基于 Afinal，包含 DbUtils、ViewUtils、HttpUtils、BitmapUtils 四大模块，可用于快速开发<br>项目地址：<a href="https://github.com/wyouflf/xUtils" target="_blank" rel="external">https://github.com/wyouflf/xUtils</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/Caij/xUtils 源码解析" target="_blank" rel="external">xUtils</a>  </p>
</li>
<li><p>Afinal<br>Afinal 是一个 android 的 ioc，orm 框架，内置了四大模块功能：FinalAcitivity,FinalBitmap,FinalDb,FinalHttp。通过 finalActivity，我们可以通过注解的方式进行绑定 ui 和事件。通过 finalBitmap，我们可以方便的加载 bitmap 图片，而无需考虑 oom 等问题。通过 finalDB 模块，我们一行代码就可以对 android 的 sqlite 数据库进行增删改查。通过 FinalHttp 模块，我们可以以 ajax 形式请求 http 数据<br>项目地址：<a href="https://github.com/yangfuhai/afinal" target="_blank" rel="external">https://github.com/yangfuhai/afinal</a><br>官网网址：<a href="http://www.afinal.org" target="_blank" rel="external">http://www.afinal.org</a>  </p>
</li>
<li><p>UltimateAndroid<br>UltimateAndroid 是一个快速开发 Android 应用的框架，框架目前主要包含的功能有 View Injection,ORM,异步网络请求和图片加载，自动化脚本测试,磁盘 LRU 等功能.同时提供了类似于 TripleDes、Webview 快速设置、Md5 处理、String 处理,Https 处理等常用工具类，还有超过 100 多种 UI 控件效果。<br>项目地址：<a href="https://github.com/cymcsg/UltimateAndroid" target="_blank" rel="external">https://github.com/cymcsg/UltimateAndroid</a><br>官网网址：<a href="http://blog.marshalchen.com/UltimateAndroid/" target="_blank" rel="external">http://blog.marshalchen.com/UltimateAndroid/</a>  </p>
</li>
<li><p>SAF<br>SAF(Simple Android Framework)是一个简单的 android 框架，它为开发 Android app 提供了基础性组件。<br>项目地址：<a href="https://github.com/fengzhizi715/SAF" target="_blank" rel="external">https://github.com/fengzhizi715/SAF</a><br>官网网址：<a href="http://www.salesuite.cn/" target="_blank" rel="external">http://www.salesuite.cn/</a><br>包括：(1)Event Bus(事件总线)<br>(2) Rest Client(http 的框架)<br>(3) Image Cache(图片缓存)<br>(4) Dependency Injection(依赖注入)<br>(5) Sqlite ORM(sqlite 的 orm)<br>(6) Router(Activity、Fragment 的 Router)<br>(7) Utils(各种常用的工具类)  </p>
</li>
<li><p>Barber<br>Custom View 神器。通过简单的注解帮助你大大减少 Custom View 中的代码量。由于和 ButterKnife 一样使用了 Annotation Proccessor ，所以对程序性能没有影响。<br>项目地址：<a href="https://github.com/hzsweers/barber" target="_blank" rel="external">https://github.com/hzsweers/barber</a>  </p>
</li>
<li><p>device-year-class<br>A library that analyzes an Android device’s specifications and calculates which year the device would be considered “high end”.(facebook 开发的检测手机主流配置工具)<br>项目地址：<a href="https://github.com/facebook/device-year-class" target="_blank" rel="external">https://github.com/facebook/device-year-class</a>  </p>
</li>
<li><p>RxAndroid<br>对RxJava在Android上的扩展，使得Android上也很容易实现reactive components，简化线程操作，从而写出很漂亮的代码。<br>项目地址：<a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">https://github.com/ReactiveX/RxAndroid</a><br>文档介绍：<a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给Android 开发者的 RxJava 详解</a>  </p>
</li>
<li><p>MultiImageSelector<br>一个本地图片选择器，支持图片的单选和多选，直接返回所选图片的路径。<br>项目地址：<a href="https://github.com/lovetuzitong/MultiImageSelector.git" target="_blank" rel="external">https://github.com/lovetuzitong/MultiImageSelector.git</a></p>
</li>
</ol>
<h4 id="六、Android-高版本向低版本兼容"><a href="#六、Android-高版本向低版本兼容" class="headerlink" title="六、Android 高版本向低版本兼容"></a>六、Android 高版本向低版本兼容</h4><ol>
<li><p>Nine Old Androids<br>将 Android 3.0(Honeycomb)所有动画 API(ObjectAnimator ValueAnimator 等)兼容到 Android1.0<br>项目地址：<a href="https://github.com/JakeWharton/NineOldAndroids" target="_blank" rel="external">https://github.com/JakeWharton/NineOldAndroids</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/Mr.Simple/NineOldAnimations 源码解析" target="_blank" rel="external">Nine Old Androids</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample</a><br>文档介绍：<a href="http://nineoldandroids.com/" target="_blank" rel="external">http://nineoldandroids.com/</a>  </p>
</li>
<li><p>HoloEverywhere<br>将 Android 3.0 的 Holo 主题兼容到 Android2.1++<br>项目地址：<a href="https://github.com/Prototik/HoloEverywhere" target="_blank" rel="external">https://github.com/Prototik/HoloEverywhere</a><br>Demo 地址：<a href="https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk" target="_blank" rel="external">https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk</a><br>文档介绍：<a href="http://android-developers.blogspot.com/2012/01/holo-everywhere.html" target="_blank" rel="external">http://android-developers.blogspot.com/2012/01/holo-everywhere.html</a>  </p>
</li>
<li><p>SherlockNavigationDrawer<br>将 Android NavigationDrawer 和 ActionbarSherlock 结合，解决 4.0 以下 NavigationDrawer 的适配问题<br>项目地址：<a href="https://github.com/tobykurien/SherlockNavigationDrawer" target="_blank" rel="external">https://github.com/tobykurien/SherlockNavigationDrawer</a><br>文档介绍：<a href="http://developer.android.com/training/implementing-navigation/nav-drawer.html" target="_blank" rel="external">http://developer.android.com/training/implementing-navigation/nav-drawer.html</a>  </p>
</li>
<li><p>Notifications4EveryWhere<br>将 Android 4.1 的 Notification 兼容到 Android2.2++<br>项目地址：<a href="https://github.com/youxiachai/Notifications4EveryWhere" target="_blank" rel="external">https://github.com/youxiachai/Notifications4EveryWhere</a>  </p>
</li>
<li><p>Android Switch Widget Backport<br>将 Android Switch 和 SwitchPreference 的兼容到 Android2.1++<br>项目地址：<a href="https://github.com/BoD/android-switch-backport" target="_blank" rel="external">https://github.com/BoD/android-switch-backport</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample</a><br>文档介绍：<a href="https://github.com/BoD/android-switch-backport#using-the-switch" target="_blank" rel="external">https://github.com/BoD/android-switch-backport#using-the-switch</a>  </p>
</li>
<li><p>android-datepicker<br>将 Android 4.0 的 datepicker 兼容到 Android2.2++<br>项目地址：<a href="https://github.com/SimonVT/android-datepicker" target="_blank" rel="external">https://github.com/SimonVT/android-datepicker</a>  </p>
</li>
<li><p>Transitions Everywhere<br>Android 4.4 的 Transitions API 兼容到 Android 2.2 以上<br>项目地址：<a href="https://github.com/andkulikov/transitions-everywhere" target="_blank" rel="external">https://github.com/andkulikov/transitions-everywhere</a>  </p>
</li>
<li><p>KShareViewActivityManager<br>一个兼容Android 5.0 以下Shared Element Transition （页面间共享元素位移动画）库<br>项目地址：<a href="https://github.com/kot32go/KShareViewActivityManager" target="_blank" rel="external">https://github.com/kot32go/KShareViewActivityManager</a><br>效果图：<a href="http://i8.tietuku.com/aa5726b8302ae711.gif" target="_blank" rel="external">http://i8.tietuku.com/aa5726b8302ae711.gif</a>  </p>
</li>
</ol>
<h4 id="七、多媒体相关"><a href="#七、多媒体相关" class="headerlink" title="七、多媒体相关"></a>七、多媒体相关</h4><ol>
<li><p>cocos2d-x<br>跨平台的 2d 游戏框架，支持 Android、IOS、Linux、Windows 等众多平台<br>项目地址：<a href="https://github.com/cocos2d/cocos2d-x" target="_blank" rel="external">https://github.com/cocos2d/cocos2d-x</a><br>文档介绍：<a href="http://www.cocos2d-x.org/wiki" target="_blank" rel="external">http://www.cocos2d-x.org/wiki</a><br>官网网址：<a href="http://www.cocos2d-x.org/" target="_blank" rel="external">http://www.cocos2d-x.org/</a>  </p>
</li>
<li><p>JustWeEngine<br>Android的轻量级游戏框架，能大大缩减编写原生游戏的代码量和难度，仍在持续更新中。<br>项目地址: <a href="https://github.com/lfkdsk/JustWeEngine" target="_blank" rel="external">https://github.com/lfkdsk/JustWeEngine</a><br>Demo地址: <a href="https://github.com/lfkdsk/EngineDemo" target="_blank" rel="external">https://github.com/lfkdsk/EngineDemo</a>  </p>
</li>
<li><p>Vitamio<br>是一款 Android 与 iOS 平台上的全能多媒体开发框架<br>项目地址：<a href="https://github.com/yixia/VitamioBundle" target="_blank" rel="external">https://github.com/yixia/VitamioBundle</a><br>网站介绍：<a href="http://www.vitamio.org/docs/" target="_blank" rel="external">http://www.vitamio.org/docs/</a><br>特点：(1) 全面支持硬件解码与 GPU 渲染<br>(2) 能够流畅播放 720P 甚至 1080P 高清 MKV，FLV，MP4，MOV，TS，RMVB 等常见格式的视频<br>(3) 在 Android 与 iOS 上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议，包括点播与直播。</p>
</li>
<li><p>VDPlayerSDK<br>最容易集成的开源播放器组件，支持直播，支持软硬解切换，支持清晰度切换<br>项目地址：<a href="https://github.com/SinaVDDeveloper/" target="_blank" rel="external">https://github.com/SinaVDDeveloper/</a><br>Demo 地址：<a href="https://github.com/SinaVDDeveloper/demo" target="_blank" rel="external">https://github.com/SinaVDDeveloper/demo</a><br>文档介绍：<a href="https://github.com/SinaVDDeveloper/sinavideo_playersdk" target="_blank" rel="external">https://github.com/SinaVDDeveloper/sinavideo_playersdk</a><br>特点：<br>(1) 使用自定义控件方式提供播放器UI，不需要视频相关知识，能编写android应用就能使用<br>(2) 软硬解切换、点播直播支持<br>(3) 解码内核小于4M，更方便集成到非专业视频app中<br>(4) 修正一些vitaimio的问题，比如m3u8可以拖动等等</p>
</li>
<li><p>VideoPlayerManager<br>帮助实现VideoPlayer控制，使得它更容易使用ListView和recyclerview。它还可以跟踪滚动列表中可见的项。当列表中的新项可见域最大时，该库给出了接口来跟踪它。<br>项目地址：<a href="https://github.com/danylovolokh/VideoPlayerManager" target="_blank" rel="external">https://github.com/danylovolokh/VideoPlayerManager</a><br>文档介绍：<a href="https://medium.com/@v.danylo/implementing-video-playback-in-a-scrolled-list-listview-recyclerview-d04bc2148429#.hs5n0geqn" target="_blank" rel="external">https://medium.com/@v.danylo/implementing-video-playback-in-a-scrolled-list-listview-recyclerview-d04bc2148429#.hs5n0geqn</a>  </p>
</li>
<li><p>UniversalVideoView<br>Android上定义播放器控件,支持自定义控制UI, 全屏播放, 重力感应自动切换横竖屏.<br>项目地址：<a href="https://github.com/linsea/UniversalVideoView" target="_blank" rel="external">https://github.com/linsea/UniversalVideoView</a><br><img src="https://github.com/linsea/UniversalVideoView/raw/master/screenshot/screen1.png" alt="Sample Screenshot 1"><br><img src="https://github.com/linsea/UniversalVideoView/raw/master/screenshot/screen2.png" alt="Sample Screenshot 2"></p>
</li>
<li><p>PhotoProcessing<br>利用 ndk 处理图片库，支持 Instafix、Ansel、Testino、XPro、Retro、BW、Sepia、Cyano、Georgia、Sahara、HDR、Rotate(旋转)、Flip(翻转)等各种特效<br>项目地址：<a href="https://github.com/lightbox/PhotoProcessing" target="_blank" rel="external">https://github.com/lightbox/PhotoProcessing</a><br>Demo 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true</a>  </p>
</li>
<li><p>Android StackBlur<br>图片模糊效果工具类<br>项目地址：<a href="https://github.com/kikoso/android-stackblur" target="_blank" rel="external">https://github.com/kikoso/android-stackblur</a><br>Demo 地址：<a href="https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true" target="_blank" rel="external">https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true</a><br>文档介绍：<a href="https://github.com/kikoso/android-stackblur#usage" target="_blank" rel="external">https://github.com/kikoso/android-stackblur#usage</a>  </p>
</li>
<li><p>Bitmap Smart Clipping using OpenCV<br>图片智能裁剪保留重要部分显示<br>项目地址：<a href="https://github.com/beartung/tclip-android" target="_blank" rel="external">https://github.com/beartung/tclip-android</a><br>利用淘宝的 <a href="http://code.taobao.org/p/tclip/" target="_blank" rel="external">http://code.taobao.org/p/tclip/</a> 库完成<br>一淘玩客正在使用的图片裁剪，自动识别图片中的重要区域，并且在图片裁剪时保留重要区域<br>特点：(1). 能进行人脸识别。图片中有人脸，将自动视为人脸区域为重要区域，将不会被裁剪掉<br>(2).自动其它重要区域。如果图片中未识别出人脸，则会根据特征分布计算出重区域  </p>
</li>
<li><p>Cropper<br>图片局部剪切工具，可触摸控制选择区域或旋转<br>项目地址：<a href="https://github.com/edmodo/cropper" target="_blank" rel="external">https://github.com/edmodo/cropper</a><br>文档介绍：<a href="https://github.com/edmodo/cropper/wiki" target="_blank" rel="external">https://github.com/edmodo/cropper/wiki</a><br>效果图：<img src="https://github-camo.global.ssl.fastly.net/e4fde77bf41d4a60b234b4e268e5cfa8c17d9b6f/687474703a2f2f692e696d6775722e636f6d2f334668735467666c2e6a7067" alt="Renderings">  </p>
</li>
<li><p>uCrop<br>Yalantis 出品的强大的图片裁剪库 ，支持缩放，旋转图片，支持各种比例的裁剪框<br>项目地址：<a href="https://github.com/Yalantis/uCrop" target="_blank" rel="external">https://github.com/Yalantis/uCrop</a><br>效果图：<img src="https://camo.githubusercontent.com/8577338af603bb6046e0ff06e2530cbbedd94d85/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3232313933352f73637265656e73686f74732f323437343239352f616e696d6174696f6e2e676966" alt="Renderings"></p>
</li>
<li><p>android-crop<br>图片裁剪 Activity<br>项目地址：<a href="https://github.com/jdamcd/android-crop" target="_blank" rel="external">https://github.com/jdamcd/android-crop</a><br>效果图：<img src="https://github.com/jdamcd/android-crop/raw/master/screenshot.png" alt="Renderings">  </p>
</li>
<li><p>TileView<br>可分块显示大图，支持 2D 拖动、双击、双指放大、双指捏合<br>项目地址：<a href="https://github.com/moagrius/TileView" target="_blank" rel="external">https://github.com/moagrius/TileView</a><br>Demo 地址：<a href="http://moagrius.github.io/TileView/TileViewDemo.apk" target="_blank" rel="external">http://moagrius.github.io/TileView/TileViewDemo.apk</a>  </p>
</li>
<li><p>BlurEffectForAndroidDesign<br>图片模糊效果<br>项目地址：<a href="https://github.com/PomepuyN/BlurEffectForAndroidDesign" target="_blank" rel="external">https://github.com/PomepuyN/BlurEffectForAndroidDesign</a>  </p>
</li>
<li><p>android-eye<br>PC 端网页查看同一局域网内的手机摄像头内容，可以用来监控哦<br>项目地址：<a href="https://github.com/Teaonly/android-eye" target="_blank" rel="external">https://github.com/Teaonly/android-eye</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=teaonly.droideye" target="_blank" rel="external">https://play.google.com/store/apps/details?id=teaonly.droideye</a>  </p>
</li>
<li><p>libpng for Android<br>PNG 图片的 jni 库，支持几乎 png 的所有特性<br>项目地址：<a href="https://github.com/julienr/libpng-android" target="_blank" rel="external">https://github.com/julienr/libpng-android</a><br>文档介绍：<a href="http://www.libpng.org/pub/png/libpng.html" target="_blank" rel="external">http://www.libpng.org/pub/png/libpng.html</a>  </p>
</li>
<li><p>android-gpuimage<br>基于 GPU 的图片滤镜<br>项目地址：<a href="https://github.com/CyberAgent/android-gpuimage" target="_blank" rel="external">https://github.com/CyberAgent/android-gpuimage</a>  </p>
</li>
<li><p>AndroidFaceCropper<br>图片脸部自动识别，将识别后的局部图片返回<br>项目地址：<a href="https://github.com/lafosca/AndroidFaceCropper" target="_blank" rel="external">https://github.com/lafosca/AndroidFaceCropper</a>  </p>
</li>
<li><p>Android Video Crop<br>利用 TextureView 播放和剪切视频，类似 ImageView.setScaleType<br>项目地址：<a href="https://github.com/dmytrodanylyk/android-video-crop" target="_blank" rel="external">https://github.com/dmytrodanylyk/android-video-crop</a><br>Demo 地址：<a href="https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk" target="_blank" rel="external">https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk</a>  </p>
</li>
<li><p>svg-android<br>Android Svg 矢量图形支持<br>项目地址：<a href="https://github.com/japgolly/svg-android" target="_blank" rel="external">https://github.com/japgolly/svg-android</a> <a href="https://github.com/japgolly/svg-android" target="_blank" rel="external">https://github.com/japgolly/svg-android</a>  </p>
</li>
<li><p>Android Visualizer<br>从 Android MediaPlayer 获得音频，然后像 iTunes 及 WinAmp 一样展示音轨<br>项目地址：<a href="https://github.com/felixpalmer/android-visualizer" target="_blank" rel="external">https://github.com/felixpalmer/android-visualizer</a>  </p>
</li>
<li><p>ExoPlayer<br>包括仪表板和 SmoothStreaming 自适应回放，缓存持久化和自定义渲染器，方便自定义和扩展，并且可以通过应用商店更新<br>项目地址：<a href="https://github.com/google/ExoPlayer" target="_blank" rel="external">https://github.com/google/ExoPlayer</a>  </p>
</li>
<li><p>DanmakuFlameMaster<br>android 上开源弹幕解析绘制引擎项目<br>项目地址：<a href="https://github.com/ctiao/DanmakuFlameMaster" target="_blank" rel="external">https://github.com/ctiao/DanmakuFlameMaster</a>  </p>
</li>
<li><p>OpenDanmaku<br>android 上一个轻量级的更简单的开源弹幕控件<br>项目地址：<a href="https://github.com/linsea/OpenDanmaku" target="_blank" rel="external">https://github.com/linsea/OpenDanmaku</a>  </p>
</li>
<li><p>K-Sonic<br>一个基于Sonic的变音Demo,可调节Speed,Pitch,Rate.<br>项目地址：<a href="https://github.com/jcodeing/K-Sonic" target="_blank" rel="external">https://github.com/jcodeing/K-Sonic</a><br>Demo 地址：<a href="https://raw.githubusercontent.com/jcodeing/K-Sonic/master/K-Sonic-demo.apk" target="_blank" rel="external">Download here</a><br>效果图：<img src="https://raw.githubusercontent.com/jcodeing/K-Sonic/master/lookme.jpg" alt="Renderings">  </p>
</li>
</ol>
<h4 id="八、事件总线-订阅者模式"><a href="#八、事件总线-订阅者模式" class="headerlink" title="八、事件总线(订阅者模式)"></a>八、事件总线(订阅者模式)</h4><p>通过发布/订阅事件解耦事件发送和接受，从而简化应用程序组件(Activities, Fragments 及后台线程)之间的通信  </p>
<ol>
<li><p>EventBus<br>greenrobot 的开源项目<br>项目地址：<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">https://github.com/greenrobot/EventBus</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/Trinea/EventBus 源码解析" target="_blank" rel="external">EventBus</a><br>文档介绍：<a href="https://github.com/greenrobot/EventBus#general-usage-and-api" target="_blank" rel="external">https://github.com/greenrobot/EventBus#general-usage-and-api</a><br>特点：(1) 支持在不同类型的线程中处理订阅，包括发布所在线程，UI 线程、单一后台线程、异步线程<br>(2) 支持事件优先级定义，支持优先级高的订阅者取消事件继续传递，支持粘性事件，是不是跟系统的有序广播、粘性广播很像啊<br>(3) 不是基于 annotations<br>(4) 性能更优<br>(5) 体积小<br>(6) 支持单例创建或创建多个对象<br>(7) 支持根据事件类型订阅  </p>
</li>
<li><p>Otto<br>Square 的开源项目，基于 Guava 的 Android 优化<br>项目地址：<a href="https://github.com/square/otto" target="_blank" rel="external">https://github.com/square/otto</a><br>文档介绍：<a href="http://square.github.io/otto/" target="_blank" rel="external">http://square.github.io/otto/</a><br><a href="https://github.com/greenrobot/EventBus#comparison-with-squares-otto" target="_blank" rel="external">EventBus 与 Otto 的功能及性能对比文档</a><br><a href="https://play.google.com/store/apps/details?id=de.greenrobot.eventperf" target="_blank" rel="external">EventBus 与 Otto 性能对比 Demo Apk</a>  </p>
</li>
</ol>
<h4 id="九、传感器"><a href="#九、传感器" class="headerlink" title="九、传感器"></a>九、传感器</h4><ol>
<li><p>Great Android Sensing Toolkit<br>Android 感应器工具包，包含示例及使用过程中可能需要的算法<br>项目地址：<a href="https://github.com/gast-lib/gast-lib" target="_blank" rel="external">https://github.com/gast-lib/gast-lib</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=root.gast.playground" target="_blank" rel="external">https://play.google.com/store/apps/details?id=root.gast.playground</a><br>文档介绍：<a href="https://github.com/gast-lib/gast-lib#documentation" target="_blank" rel="external">https://github.com/gast-lib/gast-lib#documentation</a>  </p>
</li>
<li><p>SensorManager<br>Android 传感器管理<br>项目地址：<a href="https://github.com/nlathia/SensorManager" target="_blank" rel="external">https://github.com/nlathia/SensorManager</a><br>文档介绍：<a href="https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit" target="_blank" rel="external">https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit</a>  </p>
</li>
<li><p>GPSLogger<br>记录 GPS 信息<br>项目地址：<a href="https://github.com/mendhak/gpslogger" target="_blank" rel="external">https://github.com/mendhak/gpslogger</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.mendhak.gpslogger" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.mendhak.gpslogger</a><br>文档介绍：<a href="http://code.mendhak.com/gpslogger/" target="_blank" rel="external">http://code.mendhak.com/gpslogger/</a>  </p>
</li>
<li><p>Pedometer<br>计步器，使用硬件计步感应器<br>项目地址：<a href="https://github.com/j4velin/Pedometer" target="_blank" rel="external">https://github.com/j4velin/Pedometer</a>  </p>
</li>
<li><p>leapcast<br>ChromeCast 模拟器的 App<br>项目地址：<a href="https://github.com/dz0ny/leapcast" target="_blank" rel="external">https://github.com/dz0ny/leapcast</a>  </p>
</li>
<li><p>Arduino-Communicator<br>与 Arduino 通信的 App<br>项目地址：<a href="https://github.com/jeppsson/Arduino-Communicator" target="_blank" rel="external">https://github.com/jeppsson/Arduino-Communicator</a>  </p>
</li>
<li><p>android-pedometer<br>Android 计步器<br>项目地址：<a href="https://github.com/bagilevi/android-pedometer" target="_blank" rel="external">https://github.com/bagilevi/android-pedometer</a><br>Demo 地址：<a href="http://pedometer.googlecode.com/files/Pedometer-1.4.apk" target="_blank" rel="external">http://pedometer.googlecode.com/files/Pedometer-1.4.apk</a>  </p>
</li>
<li><p>OwnTracks for Android<br>自己的轨迹记录<br>项目地址：<a href="https://github.com/owntracks/android" target="_blank" rel="external">https://github.com/owntracks/android</a>  </p>
</li>
<li><p>Shake Detector library for Android<br>Android 手机震动摇晃检测库，提供供 UI 线程调用的回调接口<br>项目地址：<a href="https://github.com/tbouron/ShakeDetector" target="_blank" rel="external">https://github.com/tbouron/ShakeDetector</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example</a>  </p>
</li>
<li><p>Android heart rate monitor<br>Android 心跳检测<br>项目地址：<a href="https://github.com/phishman3579/android-heart-rate-monitor" target="_blank" rel="external">https://github.com/phishman3579/android-heart-rate-monitor</a>  </p>
</li>
<li><p>Bluetooth LE Library for Android<br>蓝牙源信息，包括宝库 Mac、更新时间、RSSI、UUID、信号源距离、影响范围等信息<br>项目地址：<a href="https://github.com/alt236/Bluetooth-LE-Library---Android" target="_blank" rel="external">https://github.com/alt236/Bluetooth-LE-Library---Android</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan" target="_blank" rel="external">https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan</a>  </p>
</li>
<li><p>farebot<br>通过 NFC 从公交卡中读取数据的一个应用<br>项目地址：<a href="https://github.com/codebutler/farebot" target="_blank" rel="external">https://github.com/codebutler/farebot</a>  </p>
</li>
</ol>
<h4 id="十、安全"><a href="#十、安全" class="headerlink" title="十、安全"></a>十、安全</h4><ol>
<li><p>SQLCipher<br>Sqlite 加密工具<br>项目地址：<a href="https://github.com/sqlcipher/sqlcipher" target="_blank" rel="external">https://github.com/sqlcipher/sqlcipher</a><br>文档介绍：<a href="http://sqlcipher.net/sqlcipher-for-android/" target="_blank" rel="external">http://sqlcipher.net/sqlcipher-for-android/</a>  </p>
</li>
<li><p>Conceal<br>快速高效的进行文件加密解密<br>项目地址：<a href="https://github.com/facebook/conceal" target="_blank" rel="external">https://github.com/facebook/conceal</a><br>文档介绍：<a href="https://github.com/facebook/conceal#usage" target="_blank" rel="external">https://github.com/facebook/conceal#usage</a>  </p>
</li>
<li><p>Android-PasscodeLock<br>应用锁，每次启动或从任何 Activity 启动应用都需要输入四位数字的密码方可进入<br>项目地址：<a href="https://github.com/wordpress-mobile/Android-PasscodeLock" target="_blank" rel="external">https://github.com/wordpress-mobile/Android-PasscodeLock</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=org.wordpress.android" target="_blank" rel="external">https://play.google.com/store/apps/details?id=org.wordpress.android</a><br>APP 示例：Wordpress Android，支付宝，挖财  </p>
</li>
<li><p>GlowPadBackport<br>将 Android4.2 的锁屏界面解锁扩展到 Android1.6 及 1.6+<br>项目地址：<a href="https://github.com/rock3r/GlowPadBackport" target="_blank" rel="external">https://github.com/rock3r/GlowPadBackport</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample" target="_blank" rel="external">https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample</a><br>效果图：<img src="https://lh6.ggpht.com/U070b6Lh6cVsVwx4jN-5nq0xqiB1PBzrYABPeJIEe2hZQ5UWOxc-FDUG77wADelToHA=h310-rw" alt="Renderings">  </p>
</li>
<li><p>GlowPadView<br>Android 4 锁屏界面解锁<br>项目地址：<a href="https://github.com/nadavfima/GlowPadView" target="_blank" rel="external">https://github.com/nadavfima/GlowPadView</a><br>效果图：<img src="https://raw.github.com/nadavfima/GlowPadView/master/example.png" alt="Renderings">  </p>
</li>
<li><p>Android-InsecureBank<br>关于 Android 不安全性的示例<br>项目地址：<a href="https://github.com/dineshshetty/Android-InsecureBankv2" target="_blank" rel="external">https://github.com/dineshshetty/Android-InsecureBankv2</a>  </p>
</li>
</ol>
<h4 id="十一、插件化"><a href="#十一、插件化" class="headerlink" title="十一、插件化"></a>十一、插件化</h4><p>更多见：<a href="http://www.trinea.cn/android/android-plugin/" target="_blank" rel="external">Android 插件化作用、概念以及不错的资料(包括开源项目)和解决方案</a>  </p>
<ol>
<li><p>dynamic-load-apk<br>Android 动态加载 Apk，热部署，利用 ClassLoader 以及 Activity 代理的方式解决<br>项目地址：<a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">https://github.com/singwhatiwanna/dynamic-load-apk</a><br>原理剖析文档：<a href="http://a.codekk.com/detail/Android/FFish/DynamicLoadApk 源码解析" target="_blank" rel="external">dynamic-load-apk</a><br>文档介绍：<a href="http://blog.csdn.net/singwhatiwanna/article/details/22597587" target="_blank" rel="external">http://blog.csdn.net/singwhatiwanna/article/details/22597587</a>  </p>
</li>
<li><p>Android Dynamic Loader<br>点评的实现方式，和上面不同的是：他不是用代理 Activity 的方式实现而是用 Fragment 以及 Schema 的方式实现<br>项目地址：<a href="https://github.com/mmin18/AndroidDynamicLoader" target="_blank" rel="external">https://github.com/mmin18/AndroidDynamicLoader</a><br>Demo 地址：<a href="https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk" target="_blank" rel="external">https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk</a>  </p>
</li>
<li><p>xCombine<br>Android App 插件式插件开发，插件必须先安装，更推荐看上面两个开源项目<br>项目地址：<a href="https://github.com/wyouflf/xCombine" target="_blank" rel="external">https://github.com/wyouflf/xCombine</a><br>文档介绍：<a href="http://my.oschina.net/u/1171837/blog/155377" target="_blank" rel="external">http://my.oschina.net/u/1171837/blog/155377</a>  </p>
</li>
<li><p>Android Plugin Framework<br>Android 插件式开发，开放的源码目前不完整<br>项目地址：<a href="https://github.com/umeng/apf" target="_blank" rel="external">https://github.com/umeng/apf</a>  </p>
</li>
<li><p>Android OpenAtlas<br>Android插件框架，基于OSGI，非代理方式，组件需要在宿主中声明<br>项目地址：<a href="https://github.com/bunnyblue/OpenAtlas" target="_blank" rel="external">https://github.com/bunnyblue/OpenAtlas</a><br>Demo 地址：<a href="https://github.com/bunnyblue/OpenAtlasExtension/blob/master/Dist/OpenAtlasLauncher.apk" target="_blank" rel="external">https://github.com/bunnyblue/OpenAtlasExtension/blob/master/Dist/OpenAtlasLauncher.apk</a></p>
</li>
<li><p>multidex<br>安装多 dex 的 classloader<br>项目地址：<a href="https://github.com/casidiablo/multidex" target="_blank" rel="external">https://github.com/casidiablo/multidex</a>  </p>
</li>
<li><p>ANR-WatchDog<br>Android ANR 监听，通过监听自己的 UI Thread 是否被执行确定是否发生了 ANR，并可以设置相关事件<br>项目地址：<a href="https://github.com/SalomonBrys/ANR-WatchDog" target="_blank" rel="external">https://github.com/SalomonBrys/ANR-WatchDog</a>  </p>
</li>
</ol>
<h4 id="十二、文件"><a href="#十二、文件" class="headerlink" title="十二、文件"></a>十二、文件</h4><p>对不同文档类型的处理，包括 PDF、Word、EPub、Html、Zip 等  </p>
<ol>
<li><p>purePDF<br>允许从任何运行的 SWF 文件读取和创建 PDF 文档<br>项目地址：<a href="https://github.com/sephiroth74/purePDF" target="_blank" rel="external">https://github.com/sephiroth74/purePDF</a>  </p>
</li>
<li><p>android-pdfview<br>快速解析 pdf 的 view，默认支持手势缩放和相关动画<br>项目地址：<a href="https://github.com/JoanZapata/android-pdfview" target="_blank" rel="external">https://github.com/JoanZapata/android-pdfview</a>  </p>
</li>
<li><p>Office 365 SDK for Android Preview<br>可支持 Microsoft SharePoint Lists, Microsoft SharePoint Files, Microsoft Exchange Calendar, Microsoft Exchange Contacts, Microsoft Exchange Mail<br>项目地址：<a href="https://github.com/OfficeDev/Office-365-SDK-for-Android" target="_blank" rel="external">https://github.com/OfficeDev/Office-365-SDK-for-Android</a>  </p>
</li>
<li><p>OpenSpritz-Android<br>EPub 阅读器<br>项目地址：<a href="https://github.com/OnlyInAmerica/OpenSpritz-Android" target="_blank" rel="external">https://github.com/OnlyInAmerica/OpenSpritz-Android</a>  </p>
</li>
<li><p>jsoup<br>一个解析 html 的 java 库，可方便的提取和操作数据<br>项目地址：<a href="https://github.com/jhy/jsoup" target="_blank" rel="external">https://github.com/jhy/jsoup</a><br>官网网址：<a href="http://jsoup.org/" target="_blank" rel="external">http://jsoup.org/</a><br>作用：(1) 从一个 url、文件或 string 获得 html 并解析<br>(2) 利用 dom 遍历或 css 选择器查找、提取数据<br>(3) 操作 html 元素<br>(4) 根据白名单去除用于提交的非法数据防止 xss 攻击<br>(5) 输出整齐的 html  </p>
</li>
<li><p>ZIP<br>java 压缩和解压库<br>项目地址：<a href="https://github.com/zeroturnaround/zt-zip" target="_blank" rel="external">https://github.com/zeroturnaround/zt-zip</a><br>文档介绍：<a href="https://github.com/zeroturnaround/zt-zip#examples" target="_blank" rel="external">https://github.com/zeroturnaround/zt-zip#examples</a><br>作用：(1) 解压和压缩，并支持文件夹内递归操作<br>(2) 支持包含和排除某些元素<br>(3) 支持重命名元素<br>(4) 支持遍历 zip 包内容<br>(5) 比较两个 zip 包等功能  </p>
</li>
<li><p>Image File Selector<br>轻量级的图片文件选择器，用系统api选取，压缩和裁切图片，可以方便的得要指定尺寸的图片<br>项目地址：<a href="https://github.com/sw926/ImageFileSelector" target="_blank" rel="external">https://github.com/sw926/ImageFileSelector</a>  </p>
</li>
</ol>
<h4 id="十三、其他"><a href="#十三、其他" class="headerlink" title="十三、其他"></a>十三、其他</h4><ol>
<li><p>FragmentStack<br>一个封装了启动模式的Fragment便捷使用库,方便构建单Activity+多Fragment轻量级框架<br>项目地址：<a href="https://github.com/Mr-wangyong/FragmentStack" target="_blank" rel="external">https://github.com/Mr-wangyong/FragmentStack</a><br>效果图：<a href="https://github.com/Mr-wangyong/FragmentStack/blob/master/play.gif" target="_blank" rel="external">https://github.com/Mr-wangyong/FragmentStack/blob/master/play.gif</a><br>App示例：<a href="http://www.wandoujia.com/apps/cn.vcinema.cinema" target="_blank" rel="external">南瓜电影</a>  </p>
</li>
<li><p>CustomTabsHelper<br>快速集成 CustomTabs 的工具类<br>项目地址：<a href="https://github.com/DreaminginCodeZH/CustomTabsHelper" target="_blank" rel="external">https://github.com/DreaminginCodeZH/CustomTabsHelper</a>  </p>
</li>
<li><p>Salvage view<br>带 View 缓存的 Viewpager PagerAdapter，很方便使用<br>项目地址：<a href="https://github.com/JakeWharton/salvage" target="_blank" rel="external">https://github.com/JakeWharton/salvage</a>  </p>
</li>
<li><p>Android Priority Job Queue<br>Android 后台任务队列<br>项目地址：<a href="https://github.com/path/android-priority-jobqueue" target="_blank" rel="external">https://github.com/path/android-priority-jobqueue</a><br>文档介绍：<a href="https://github.com/path/android-priority-jobqueue#getting-started" target="_blank" rel="external">https://github.com/path/android-priority-jobqueue#getting-started</a>  </p>
</li>
<li><p>Cobub Razor<br>开源的 mobile 行为分析系统，包括 web 端、android 端，支持 ios 和 window phone<br>项目地址：<a href="https://github.com/cobub/razor" target="_blank" rel="external">https://github.com/cobub/razor</a><br>Demo 地址：<a href="http://demo.cobub.com/razor" target="_blank" rel="external">http://demo.cobub.com/razor</a><br>官网网址：<a href="http://dev.cobub.com/" target="_blank" rel="external">http://dev.cobub.com/</a>  </p>
</li>
<li><p>Countly<br>Android 移动端数据采集分析系统<br>项目地址：<a href="https://github.com/Countly/countly-sdk-android" target="_blank" rel="external">https://github.com/Countly/countly-sdk-android</a><br>官网网址：<a href="https://count.ly/" target="_blank" rel="external">https://count.ly/</a>  </p>
</li>
<li><p>aFileChooser<br>文件选择器，可内嵌到程序中，而无需使用系统或三方文件选择器。<br>项目地址：<a href="https://github.com/iPaulPro/aFileChooser" target="_blank" rel="external">https://github.com/iPaulPro/aFileChooser</a>  </p>
</li>
<li><p>androidpn<br>基于 xmpp 协议的消息推送解决方案，包括服务器端和 android 端。<br>项目地址：<a href="https://github.com/dannytiehui/androidpn" target="_blank" rel="external">https://github.com/dannytiehui/androidpn</a>  </p>
</li>
<li><p>Bolts<br>Android 的异步编程模式<br>项目地址：<a href="https://github.com/BoltsFramework/Bolts-Android/" target="_blank" rel="external">https://github.com/BoltsFramework/Bolts-Android/</a><br>与 AsyncTask 比较：(1) 使用的是无大小限制的线程池<br>(2) 任务可组合可级联，防止了代码耦合  </p>
</li>
<li><p>CastCompanionLibrary-android<br>使 Android 程序中更快的接入 Google Cast<br>项目地址：<a href="https://github.com/googlecast/CastCompanionLibrary-android" target="_blank" rel="external">https://github.com/googlecast/CastCompanionLibrary-android</a><br>文档介绍：<a href="https://developers.google.com/cast/" target="_blank" rel="external">https://developers.google.com/cast/</a>  </p>
</li>
<li><p>CastVideos-android<br>从 Android 设备分享 Video 通过 Google Cast<br>项目地址：<a href="https://github.com/googlecast/CastVideos-android" target="_blank" rel="external">https://github.com/googlecast/CastVideos-android</a><br>文档介绍：<a href="https://developers.google.com/cast/" target="_blank" rel="external">https://developers.google.com/cast/</a>  </p>
</li>
<li><p>Uninstall_Statics<br>Android 应用自身被卸载监听及打开浏览器等反馈功能实现<br>项目地址：<a href="https://github.com/sevenler/Uninstall_Statics" target="_blank" rel="external">https://github.com/sevenler/Uninstall_Statics</a><br>文档介绍：<a href="http://www.cnblogs.com/zealotrouge/p/3157126.html" target="_blank" rel="external">http://www.cnblogs.com/zealotrouge/p/3157126.html</a>  <a href="http://www.cnblogs.com/zealotrouge/p/3159772.html" target="_blank" rel="external">http://www.cnblogs.com/zealotrouge/p/3159772.html</a>  </p>
</li>
<li><p>Memento<br>保证在系统配置改变时，Activity 中的某些数据可以简单安全的保持不变<br>项目地址：<a href="https://github.com/mttkay/memento" target="_blank" rel="external">https://github.com/mttkay/memento</a><br>文档介绍：<a href="https://github.com/mttkay/memento#usage" target="_blank" rel="external">https://github.com/mttkay/memento#usage</a>  </p>
</li>
<li><p>FreeFlow<br>布局引擎，更简单的创建自定义布局，并且当数据和布局改变时更美观的过渡动画<br>项目地址：<a href="https://github.com/Comcast/FreeFlow" target="_blank" rel="external">https://github.com/Comcast/FreeFlow</a><br>Demo 地址：<a href="https://github.com/Comcast/FreeFlow/releases" target="_blank" rel="external">https://github.com/Comcast/FreeFlow/releases</a>  </p>
</li>
<li><p>Android Gesture Detectors Framework<br>Android 手势框架，支持双指旋转、移动、平移、缩放等<br>项目地址：<a href="https://github.com/Almeros/android-gesture-detectors" target="_blank" rel="external">https://github.com/Almeros/android-gesture-detectors</a>  </p>
</li>
<li><p>Mapbox Android SDK<br>Android Map 的替代版<br>项目地址：<a href="https://github.com/mapbox/mapbox-android-sdk" target="_blank" rel="external">https://github.com/mapbox/mapbox-android-sdk</a>  </p>
</li>
<li><p>Activity animation<br>Activity 跳转动画，支持各个方向波浪的效果<br>项目地址：<a href="https://github.com/flavienlaurent/activityanimation" target="_blank" rel="external">https://github.com/flavienlaurent/activityanimation</a><br>在线演示：<a href="https://www.youtube.com/watch?v=-E0sc6w_Jck" target="_blank" rel="external">https://www.youtube.com/watch?v=-E0sc6w_Jck</a>  </p>
</li>
<li><p>KryoNet<br>通过 NIO 提供客户端和服务器端 TCP/UDP 网络传输的 Java 库<br>项目地址：<a href="https://github.com/EsotericSoftware/kryonet" target="_blank" rel="external">https://github.com/EsotericSoftware/kryonet</a>  </p>
</li>
<li><p>Rebound<br>一个模仿弹簧反弹的 Java 库，可用于创建动画<br>项目地址：<a href="https://github.com/facebook/rebound" target="_blank" rel="external">https://github.com/facebook/rebound</a>  </p>
</li>
<li><p>Android Social Networks<br>社交网络接入统一管理器，可方便的从 Twitter, LinkedIn, Facebook, Google Plus 登陆、获得个人信息、发送消息、发送专篇、添加或删除好友<br>项目地址：<a href="https://github.com/antonkrasov/AndroidSocialNetworks" target="_blank" rel="external">https://github.com/antonkrasov/AndroidSocialNetworks</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos</a>  </p>
</li>
<li><p>SmartAppUpdates<br>Android App 增量升级，包含前后端方案、Demo、以及 so 库，可用于商店或大体积 App 差分升级<br>项目地址：<a href="https://github.com/cundong/SmartAppUpdates" target="_blank" rel="external">https://github.com/cundong/SmartAppUpdates</a>  </p>
</li>
<li><p>Magnet<br>创建类似 Facebook 聊天桌面悬浮窗的效果<br>项目地址：<a href="https://github.com/premnirmal/Magnet" target="_blank" rel="external">https://github.com/premnirmal/Magnet</a>  </p>
</li>
<li><p>AcDisplay<br>将 Android 的通知都集中到锁屏显示<br>项目地址：<a href="https://github.com/AChep/AcDisplay" target="_blank" rel="external">https://github.com/AChep/AcDisplay</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.achep.acdisplay" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.achep.acdisplay</a>  </p>
</li>
<li><p>QrCodeScan<br>ZXing 和 ZBar 结合的二维码扫描项目，提高了扫描效率<br>项目地址：<a href="https://github.com/SkillCollege/QrCodeScan" target="_blank" rel="external">https://github.com/SkillCollege/QrCodeScan</a><br>效果图：<img src="http://www.eoeandroid.com/data/attachment/forum/201405/09/124538vteuz4leptgg1te6.png" alt="Renderings">  </p>
</li>
<li><p>Android-ScreenShot<br>实现 android 系统截屏功能<br>项目地址：<a href="https://github.com/Android-ScreenShot/AndroidScreenShotService" target="_blank" rel="external">https://github.com/Android-ScreenShot/AndroidScreenShotService</a><br>文档介绍：<a href="http://blog.csdn.net/buptgshengod/article/details/39155979" target="_blank" rel="external">http://blog.csdn.net/buptgshengod/article/details/39155979</a>  </p>
</li>
<li><p>card.io SDK for Android<br>信用卡扫描 Android SDK<br>项目地址：<a href="https://github.com/card-io/card.io-Android-SDK" target="_blank" rel="external">https://github.com/card-io/card.io-Android-SDK</a><br>Demo 项目：<a href="https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp" target="_blank" rel="external">https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp</a>  </p>
</li>
<li><p>ASNE<br>Twitter, Facebook, Google Plus, LinkedIn, Instagram, Vkontakte, Odnoklassniki 的集成库，包括他们的大多数功能<br>项目地址：<a href="https://github.com/gorbin/ASNE" target="_blank" rel="external">https://github.com/gorbin/ASNE</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne</a>  </p>
</li>
<li><p>Android Signature Pad<br>Android 自定义的签名 View，可自定义笔颜色和大小<br>项目地址：<a href="https://github.com/gcacace/android-signaturepad" target="_blank" rel="external">https://github.com/gcacace/android-signaturepad</a><br>Demo 项目：<a href="https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example" target="_blank" rel="external">https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example</a>  </p>
</li>
<li><p>Teleport<br>Android Wear 数据同步和消息传送库<br>项目地址：<a href="https://github.com/Mariuxtheone/Teleport" target="_blank" rel="external">https://github.com/Mariuxtheone/Teleport</a>  </p>
</li>
<li><p>DebugLog<br>可以帮你创建更简单和更容易理解的调试日志，能够友好的显示调试信息所在类和函数。<br>项目地址：<a href="https://github.com/MustafaFerhan/DebugLog" target="_blank" rel="external">https://github.com/MustafaFerhan/DebugLog</a><br>效果图：<img src="https://camo.githubusercontent.com/37deffede9f9b185886da48e96a4829ebd407260/68747470733a2f2f7261772e6769746875622e636f6d2f4d75737461666146657268616e2f44656275674c6f672f6d61737465722f44656275674c6f672d44656d6f2f6173736574732f7373322e6a7067" alt="Renderings">  </p>
</li>
<li><p>Logger<br>简单、美观而且十分强大的 Android 日志工具<br>项目地址：<a href="https://github.com/orhanobut/logger" target="_blank" rel="external">https://github.com/orhanobut/logger</a><br>Demo 地址：<a href="https://github.com/orhanobut/logger/tree/master/app" target="_blank" rel="external">https://github.com/orhanobut/logger/tree/master/app</a><br>效果图：<img src="https://github.com/orhanobut/logger/blob/master/images/description.png" alt="Renderings">  </p>
</li>
<li><p>jlog<br>可以灵活配置的日志工具，支持JSON打印，日志保存到指定文件，日志显示调用位置（混淆模式下依然有效）<br>项目地址：<a href="https://github.com/JiongBull/jlog" target="_blank" rel="external">https://github.com/JiongBull/jlog</a><br>Demo 地址：<a href="https://raw.githubusercontent.com/JiongBull/jlog/master/apk/JLog_sample.apk" target="_blank" rel="external">apk地址</a><br>效果图：<img src="http://7xize8.com1.z0.glb.clouddn.com/jlog_sample.gif" alt="Renderings">  </p>
</li>
<li><p>Phrase<br>square 组开源大牛写的字符串替换类<br>项目地址：<a href="https://github.com/square/phrase" target="_blank" rel="external">https://github.com/square/phrase</a>  </p>
</li>
<li><p>ColorPhrase<br>模仿 phrase 写的对字符串个别字符颜色改变的类，高效强大！<br>项目地址：<a href="https://github.com/THEONE10211024/ColorPhrase" target="_blank" rel="external">https://github.com/THEONE10211024/ColorPhrase</a><br>效果图：<img src="https://github.com/THEONE10211024/ColorPhrase/blob/master/screenshot/Screenshot_2015-05-16-18-12-23.jpeg" alt="Renderings">  </p>
</li>
<li><p>PinyinSearch<br>一个为 T9 搜索和 Qwerty 搜索,提供数据解析与匹配等方法的拼音搜索 java 库。<br>项目地址： <a href="https://github.com/handsomezhou/PinyinSearchLibrary" target="_blank" rel="external">https://github.com/handsomezhou/PinyinSearchLibrary</a><br>Demo 地址： <a href="https://github.com/handsomezhou/PinyinSearchLibrary/blob/master/external_res/bin/ContactsSearch.apk?raw=true" target="_blank" rel="external">ContactsSearch</a>    <a href="https://github.com/handsomezhou/PinyinSearchLibrary/blob/master/external_res/bin/AppSearch.apk?raw=true" target="_blank" rel="external">AppSearch</a><br>效果图：<img src="https://github.com/handsomezhou/PinyinSearchLibrary/blob/master/external_res/image/ContactsSearch.gif" alt="Renderings"><br>APP 示例： 通讯录应用，微信电话本  </p>
</li>
<li><p>PrainView<br>PaintView 是一个画图工具:<br>可直接使用设定按钮来实现已拥有的方法，且拓展性强<br>基础功能：更换颜色、更换橡皮、以及更换橡皮和笔的粗细、清屏、倒入图片<br>特殊功能：保存画笔轨迹帧动画、帧动画导入导出、ReDo和UnDo<br>项目地址：<a href="https://github.com/lfkdsk/JustWeTools" target="_blank" rel="external">Paintview</a><br>效果图：<img src="https://github.com/lfkdsk/JustWeTools/blob/master/picture/gif.gif" alt="p1">  </p>
<pre><code>![p2](https://github.com/lfkdsk/JustWeTools/blob/master/picture/io.gif)  
</code></pre><p>demo地址：<a href="https://github.com/lfkdsk/JustWeTools/blob/master/demo/DrawAPicture.apk" target="_blank" rel="external">apk地址</a><br>原理解析：<a href="http://www.cnblogs.com/lfk-dsk/p/4768850.html" target="_blank" rel="external">PaintView 绘图控件解析</a>  </p>
</li>
<li><p>CodeView<br>CodeView代码查看／修改工具: 基于WebView制作的代码编辑器,实现代码高亮，暗色主题<br>项目地址：<a href="https://github.com/lfkdsk/JustWeTools" target="_blank" rel="external">CodeView</a><br>效果图：<img src="https://github.com/lfkdsk/JustWeTools/blob/master/picture/accomplish.png" alt="p3">  </p>
<pre><code>![p4](https://github.com/lfkdsk/JustWeTools/blob/master/picture/edit.png)  
</code></pre><p>demo地址：<a href="https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk" target="_blank" rel="external">apk地址</a>  </p>
</li>
<li><p>ExplorerView<br>文件浏览器：继承自ListView，可拓展性强，可进行文件类型分析<br>项目地址：<a href="https://github.com/lfkdsk/JustWeTools" target="_blank" rel="external">CodeView</a><br>效果图：<img src="https://github.com/lfkdsk/JustWeTools/blob/master/picture/explorer1.png" alt="p5"><br><img src="https://github.com/lfkdsk/JustWeTools/blob/master/picture/explorer2.png" alt="p6"><br>demo地址：<a href="https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk" target="_blank" rel="external">apk地址</a>  </p>
</li>
<li><p>ReadView<br>小说阅读器，支持文字字体、颜色、背景、进度等多种调整，支持一键设置。<br>项目地址：<a href="https://github.com/lfkdsk/JustWeTools" target="_blank" rel="external">ReadView</a><br>效果图：<img src="https://github.com/lfkdsk/JustWeTools/blob/master/picture/readbook.png" alt="p7"><br>demo地址：<a href="https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk" target="_blank" rel="external">apk地址</a>  </p>
</li>
<li><p>MarkDownView<br>支持MarkDown语法的渲染器,基于WebView的MarkDown渲染器,支持标准化的MarkDown语法,<br>调用接口和CodeView保持一致使用简便<br>项目地址：<a href="https://github.com/lfkdsk/JustWeTools" target="_blank" rel="external">ReadView</a><br>效果图：<img src="https://github.com/lfkdsk/JustWeTools/blob/master/picture/markdown.png" alt="markdown"><br>demo地址：<a href="https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk" target="_blank" rel="external">apk地址</a>  </p>
</li>
<li><p>VerTextView竖行排版的TextView:<br>支持竖行排版，添加了下划线功能，开启简便，下划线粗细、颜色、间距均可自定义，<br>接口调用方式与TextView相似，使用简便。<br>项目地址：<a href="https://github.com/lfkdsk/JustWeTools" target="_blank" rel="external">ReadView</a><br>效果图：<img src="https://github.com/lfkdsk/JustWeTools/blob/master/picture/VerTextView.png" alt="vertextview"><br>demo地址：<a href="https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk" target="_blank" rel="external">apk地址</a>  </p>
</li>
<li><p>GHDownload下载框架<br>支持单线程和多线程断点下载，简单易用。<br>项目地址：<a href="https://github.com/guanchao/GHDownload" target="_blank" rel="external">GHDownload</a>  </p>
</li>
</ol>
<h2 id="第三部分-优秀项目"><a href="#第三部分-优秀项目" class="headerlink" title="第三部分 优秀项目"></a>第三部分 优秀项目</h2><p>主要介绍那些 Android 还不错的完整项目，目前包含的项目主要依据是项目有意思或项目分层规范比较好。  </p>
<h4 id="一、系统及平台"><a href="#一、系统及平台" class="headerlink" title="一、系统及平台"></a>一、系统及平台</h4><ol>
<li>Linux<br>项目地址：<a href="https://github.com/torvalds/linux" target="_blank" rel="external">https://github.com/torvalds/linux</a>  </li>
<li>Android<br>项目地址：<a href="https://android.googlesource.com/" target="_blank" rel="external">https://android.googlesource.com/</a>  </li>
</ol>
<h4 id="二、项目"><a href="#二、项目" class="headerlink" title="二、项目"></a>二、项目</h4><ol>
<li><p>ZXing<br>二维码扫描工具<br>项目地址：<a href="https://github.com/zxing/zxing" target="_blank" rel="external">https://github.com/zxing/zxing</a> 或 <a href="https://code.google.com/p/zxing/" target="_blank" rel="external">https://code.google.com/p/zxing/</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=com.google.zxing.client.android" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.google.zxing.client.android</a><br>其他：现在市面上很多应用的二维码扫描功能都是从这个修改而来  </p>
</li>
<li><p>photup<br>编辑机批量上传照片到 facebook 上<br>项目地址：<a href="https://github.com/chrisbanes/photup" target="_blank" rel="external">https://github.com/chrisbanes/photup</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=uk.co.senab.photup" target="_blank" rel="external">https://play.google.com/store/apps/details?id=uk.co.senab.photup</a><br>其他：代码分包合理，很棒。不过这个项目依赖的开源项目比较多，比较难编译  </p>
</li>
<li><p>github-android<br>Github 的 Android 客户端项目<br>项目地址：<a href="https://github.com/github/android" target="_blank" rel="external">https://github.com/github/android</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=com.github.mobile" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.github.mobile</a>  </p>
</li>
<li><p>Notes<br>MIUI 便签<br>项目地址：<a href="https://github.com/MiCode/Notes" target="_blank" rel="external">https://github.com/MiCode/Notes</a><br>APK 地址：<a href="https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true" target="_blank" rel="external">https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true</a><br>其他：项目分包比较合理，相比较 miui 的文件管理器 <a href="https://github.com/MiCode/FileExplorer" target="_blank" rel="external">https://github.com/MiCode/FileExplorer</a> 代码规范较好得多  </p>
</li>
<li><p>weicuiyuan<br>四次元-新浪微博客户端<br>项目地址：<a href="https://github.com/qii/weiciyuan" target="_blank" rel="external">https://github.com/qii/weiciyuan</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=org.qii.weiciyuan" target="_blank" rel="external">https://play.google.com/store/apps/details?id=org.qii.weiciyuan</a>  </p>
</li>
<li><p>Douya<br>豆芽——Material Design 的豆瓣客户端<br>项目地址：<a href="https://github.com/DreaminginCodeZH/Douya" target="_blank" rel="external">https://github.com/DreaminginCodeZH/Douya</a><br>效果图：<img src="https://raw.githubusercontent.com/DreaminginCodeZH/Douya/master/screenshot/00-main.png" alt="">  </p>
</li>
<li><p>gnucash-android<br>一个记账理财软件<br>项目地址：<a href="https://github.com/codinguser/gnucash-android" target="_blank" rel="external">https://github.com/codinguser/gnucash-android</a><br>APK 地址：<a href="http://play.google.com/store/apps/details?id=org.gnucash.android" target="_blank" rel="external">http://play.google.com/store/apps/details?id=org.gnucash.android</a>  </p>
</li>
<li><p>AntennaPod<br>支持 rss 订阅、音乐订阅<br>项目地址：<a href="https://github.com/danieloeh/AntennaPod" target="_blank" rel="external">https://github.com/danieloeh/AntennaPod</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=de.danoeh.antennapod" target="_blank" rel="external">https://play.google.com/store/apps/details?id=de.danoeh.antennapod</a>  </p>
</li>
<li><p>ChaseWhisplyProject<br>打鬼游戏<br>项目地址：<a href="https://github.com/tvbarthel/ChaseWhisplyProject" target="_blank" rel="external">https://github.com/tvbarthel/ChaseWhisplyProject</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply" target="_blank" rel="external">https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply</a>  </p>
</li>
<li><p>Tweet Lanes<br>功能完整的 Twitter 客户端<br>项目地址：<a href="https://github.com/chrislacy/TweetLanes" target="_blank" rel="external">https://github.com/chrislacy/TweetLanes</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=com.tweetlanes.android" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.tweetlanes.android</a>  </p>
</li>
<li><p>Financius<br>简单易用的记账程序<br>项目地址：<a href="https://github.com/mvarnagiris/Financius" target="_blank" rel="external">https://github.com/mvarnagiris/Financius</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=com.code44.finance" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.code44.finance</a>  </p>
</li>
<li><p>todo.txt-android<br>todo.txt 的官方 Android 应用<br>项目地址：<a href="https://github.com/ginatrapani/todo.txt-android" target="_blank" rel="external">https://github.com/ginatrapani/todo.txt-android</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch</a>  </p>
</li>
<li><p>simpletask<br>基于 todo.txt 官方应用的另一个客户端<br>项目地址：<a href="https://github.com/mpcjanssen/simpletask-android" target="_blank" rel="external">https://github.com/mpcjanssen/simpletask-android</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo" target="_blank" rel="external">https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo</a>  </p>
</li>
<li><p>Muzei Live Wallpaper<br>定时更换桌面精美壁纸<br>项目地址：<a href="https://github.com/romannurik/muzei" target="_blank" rel="external">https://github.com/romannurik/muzei</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=net.nurik.roman.muzei" target="_blank" rel="external">https://play.google.com/store/apps/details?id=net.nurik.roman.muzei</a>  </p>
</li>
<li><p>Scanbook<br>扫描搜索查询图书信息<br>项目地址：<a href="https://github.com/JayFang1993/ScanBook" target="_blank" rel="external">https://github.com/JayFang1993/ScanBook</a><br>APK 地址：<a href="http://www.wandoujia.com/apps/com.scanbook" target="_blank" rel="external">http://www.wandoujia.com/apps/com.scanbook</a>  </p>
</li>
<li><p>iosched<br>The Google I/O 2014 Android App<br>项目地址：<a href="https://github.com/google/iosched" target="_blank" rel="external">https://github.com/google/iosched</a><br>APK 地址：<a href="https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched</a>  </p>
</li>
</ol>
<h2 id="第四部分-开发工具及测试工具"><a href="#第四部分-开发工具及测试工具" class="headerlink" title="第四部分 开发工具及测试工具"></a>第四部分 开发工具及测试工具</h2><p>主要介绍和 Android 开发工具和测试工具相关的开源项目。  </p>
<h4 id="一、开发效率工具"><a href="#一、开发效率工具" class="headerlink" title="一、开发效率工具"></a>一、开发效率工具</h4><ol>
<li><p>Parceler<br>通过注解及工具类自动完成实体类 Parcelable 及值传递<br>项目地址：<a href="https://github.com/johncarl81/parceler" target="_blank" rel="external">https://github.com/johncarl81/parceler</a>  </p>
</li>
<li><p>Json2Java<br>根据 JSon 数据自动生成对应的 Java 实体类，还支持 Parcel、Gson Annotations 对应代码自动生成。期待后续的提取父类以及多 url 构建整个工程的功能<br>项目地址：<a href="https://github.com/jonfhancock/JsonToJava" target="_blank" rel="external">https://github.com/jonfhancock/JsonToJava</a><br>在线演示：<a href="http://jsontojava.appspot.com/" target="_blank" rel="external">http://jsontojava.appspot.com/</a>  </p>
</li>
<li><p>IntelliJ Plugin for Android Parcelable boilerplate code generation<br>Android studio 插件，生成 Parcelable 代码<br>项目地址：<a href="https://github.com/mcharmas/android-parcelable-intellij-plugin" target="_blank" rel="external">https://github.com/mcharmas/android-parcelable-intellij-plugin</a><br>效果图：<img src="https://github.com/mcharmas/android-parcelable-intellij-plugin/raw/master/screenshot.png" alt="Renderings">  </p>
</li>
<li><p>Android Holo Colors IntelliJ Plugin<br>Android studio 插件，生成 holo 样式 9 patch 图片<br>项目地址：<a href="https://github.com/jeromevdl/android-holo-colors-idea-plugin" target="_blank" rel="external">https://github.com/jeromevdl/android-holo-colors-idea-plugin</a><br>效果图：<img src="https://raw.github.com/jeromevdl/android-holo-colors-idea-plugin/master/other/holocolorsidea.png" alt="Renderings">  </p>
</li>
<li><p>Android Drawable Factory<br>用于生成各个分辨率的图片<br>项目地址：<a href="https://github.com/tizionario/AndroidDrawableFactory" target="_blank" rel="external">https://github.com/tizionario/AndroidDrawableFactory</a><br>效果图：<img src="https://github-camo.global.ssl.fastly.net/5c3844b345a9779296f996490070dab0bfc9dbf5/68747470733a2f2f646c2e64726f70626f7875736572636f6e74656e742e636f6d2f752f32363636343637352f416e64726f69644472617761626c65466163746f72792f312e706e67" alt="Renderings">  </p>
</li>
<li><p>SelectorChapek for Android<br>Android Studio 插件，可根据固定文件名格式资源自动生成 drawable selectors xml 文件。<br>项目地址：<a href="https://github.com/inmite/android-selector-chapek" target="_blank" rel="external">https://github.com/inmite/android-selector-chapek</a>  </p>
</li>
<li><p>Android Action Bar Style Generator<br>Android ActionBar 样式生成器，可在线选择 ActionBar 样式自动生成所需要的图片资源及 xml 文件<br>项目地址：<a href="https://github.com/jgilfelt/android-actionbarstylegenerator" target="_blank" rel="external">https://github.com/jgilfelt/android-actionbarstylegenerator</a><br>在线演示：<a href="http://jgilfelt.github.io/android-actionbarstylegenerator/" target="_blank" rel="external">http://jgilfelt.github.io/android-actionbarstylegenerator/</a>  </p>
</li>
<li><p>ButterKnifeZelezny<br>用于快速生成<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">ButterKnife</a>View 注入代码的 Android Studio/IDEA 插件<br>项目地址：<a href="https://github.com/inmite/android-butterknife-zelezny" target="_blank" rel="external">https://github.com/inmite/android-butterknife-zelezny</a>  </p>
</li>
<li><p>RoboCoP<br>利用 Gradle task 根据固定格式的 json 文件生成 ContentProvider<br>项目地址：<a href="https://github.com/mediarain/RoboCoP" target="_blank" rel="external">https://github.com/mediarain/RoboCoP</a>  </p>
</li>
<li><p>appiconsizes<br>用于生成各个分辨率的图片<br>项目地址：<a href="http://www.appiconsizes.com/" target="_blank" rel="external">http://www.appiconsizes.com/</a>  </p>
</li>
<li><p>AndroidUtiles<br>集合了所有常用的安卓工具类<br>项目地址：<a href="https://github.com/l123456789jy/Lazy" target="_blank" rel="external">https://github.com/l123456789jy/Lazy</a></p>
</li>
</ol>
<ol>
<li><p>Gradle Retrolambda Plugin<br><a href="https://github.com/orfjackal/retrolambda" target="_blank" rel="external">Retrolambda</a>是将 Java8 的 Lambdas 应用于 Java7 的工具，本项目是 Gradle 插件，通过 Retrolambda 从而使 Java 或 Android 项目用 Java8 的 Lambdas 编写，将编译后的字节码转换为 Java6 和 7 的字节码从而正常运行<br>项目地址：<a href="https://github.com/evant/gradle-retrolambda" target="_blank" rel="external">https://github.com/evant/gradle-retrolambda</a>  </p>
</li>
<li><p>Dagger IntelliJ Plugin<br>dagger 的 intellij 插件<br>项目地址：<a href="https://github.com/square/dagger-intellij-plugin" target="_blank" rel="external">https://github.com/square/dagger-intellij-plugin</a>  </p>
</li>
<li><p>Android Gen Drawable Maven plugin<br>在编译时根据 SVG 描述文件生成不同分辨率的 jpg、png 或点 9 图片<br>项目地址：<a href="https://github.com/avianey/androidgendrawable-maven-plugin" target="_blank" rel="external">https://github.com/avianey/androidgendrawable-maven-plugin</a>  </p>
</li>
<li><p>Android Asset Studio<br>各种 Android 资源自动生成器，包括启动图标、ActionBar 图标、通知栏图标、点 9 等<br>项目地址：<a href="https://github.com/romannurik/AndroidAssetStudio" target="_blank" rel="external">https://github.com/romannurik/AndroidAssetStudio</a><br>在线演示：<a href="http://romannurik.github.io/AndroidAssetStudio/" target="_blank" rel="external">http://romannurik.github.io/AndroidAssetStudio/</a>  </p>
</li>
<li><p>jsonschema2pojo<br>根据 Json 内容生成 java 对象，支持 jackjson 和 gson<br>项目地址：<a href="https://github.com/joelittlejohn/jsonschema2pojo" target="_blank" rel="external">https://github.com/joelittlejohn/jsonschema2pojo</a><br>在线演示：<a href="http://www.jsonschema2pojo.org/" target="_blank" rel="external">http://www.jsonschema2pojo.org/</a>  </p>
</li>
<li><p>GsonFormat<br>根据 JSONObject 格式的字符串,自动生成实体类参数的 Android Studio/IntelliJ IDEA 插件<br>项目地址：<a href="https://github.com/zzz40500/GsonFormat" target="_blank" rel="external">https://github.com/zzz40500/GsonFormat</a><br>效果图：<img src="https://camo.githubusercontent.com/fbf4b89e2ec64e80d351f725d11762ebd2b7a515/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f3136363836362d303766333038346262363735386566612e676966" alt="Renderings">  </p>
</li>
<li><p>Json2Class<br>根据Json生成Java文件的Android Studio/IntelliJ IDEA 插件，并且可以选择Parcelable或者Serializable<br>项目地址：<a href="https://github.com/anzewei/Json2Class" target="_blank" rel="external">https://github.com/anzewei/Json2Class</a><br>效果图：<img src="https://raw.githubusercontent.com/anzewei/Json2Class/master/screenshot/screenshot_15002.png" alt="Renderings">  </p>
</li>
<li><p>9-Patch-Resizer<br>自动生成 png 及点 9 图片的不同分辨率版本<br>项目地址：<a href="https://github.com/redwarp/9-Patch-Resizer" target="_blank" rel="external">https://github.com/redwarp/9-Patch-Resizer</a>  </p>
</li>
<li><p>AndroidLocalizationer<br>可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件<br>项目地址：<a href="https://github.com/westlinkin/AndroidLocalizationer" target="_blank" rel="external">https://github.com/westlinkin/AndroidLocalizationer</a>  </p>
</li>
<li><p>Material Palette<br>一个将现有的色彩方案组合成材料设计的调色板方案，提供下载。选取两个主要色彩后便可以提供下载，提供下载的格式可以是 android 的资源 xml 文件，以色彩的方式提供，也可以是 CSS、SVG、PNG 等常见格式文件。<br>项目地址：<a href="http://www.materialpalette.com/" target="_blank" rel="external">http://www.materialpalette.com/</a>  </p>
</li>
</ol>
<h4 id="二、开发自测相关"><a href="#二、开发自测相关" class="headerlink" title="二、开发自测相关"></a>二、开发自测相关</h4><ol>
<li><p>Quality Tools for Android<br>Android 测试及自测工具集合和示例<br>项目地址：<a href="https://github.com/stephanenicolas/Quality-Tools-for-Android" target="_blank" rel="external">https://github.com/stephanenicolas/Quality-Tools-for-Android</a>  </p>
</li>
<li><p>android-test-kit<br>Google 的 Android 测试工具<br>包括 GoogleInstrumentationTestRunner(增强版的 InstrumentationTestRunner)和 Espresso(用于快速写出可靠测试用例的 API)<br>项目地址：<a href="https://code.google.com/p/android-test-kit/" target="_blank" rel="external">https://code.google.com/p/android-test-kit/</a><br>文档介绍：<a href="https://code.google.com/p/android-test-kit/w/list" target="_blank" rel="external">https://code.google.com/p/android-test-kit/w/list</a>  </p>
</li>
<li><p>robolectric<br>测试用例编写框架<br>项目地址：<a href="https://github.com/robolectric/robolectric" target="_blank" rel="external">https://github.com/robolectric/robolectric</a><br>Demo 地址：<a href="https://github.com/robolectric/robolectricsample" target="_blank" rel="external">https://github.com/robolectric/robolectricsample</a><br>文档介绍：<a href="http://robolectric.org/" target="_blank" rel="external">http://robolectric.org/</a><br>特点：(1). 不需要模拟器在一般 JVM 就可以运行测试用例<br>(2). 能完成在真机上的大部分测试包括感应器<br>其他的测试用例及相关模块 Mock 可见：<a href="https://code.google.com/p/android-mock/" target="_blank" rel="external">android-mock</a>, <a href="https://code.google.com/p/mockito/" target="_blank" rel="external">mockito</a>, <a href="https://github.com/easymock/easymock" target="_blank" rel="external">easy-mock</a>  </p>
</li>
<li><p>Android FEST<br>提供一些列方便的断言，可用于提高编写 Android 自测代码效率<br>项目地址：<a href="https://github.com/square/fest-android" target="_blank" rel="external">https://github.com/square/fest-android</a>  </p>
</li>
<li><p>BoundBox<br>可用于测试类各种访问权限的属性、方法。实际是通过 BoundBox 这个 annotation 生成一个属性和方法都是 public 权限的中间类并对此类进行测试完成的<br>项目地址：<a href="https://github.com/stephanenicolas/boundbox" target="_blank" rel="external">https://github.com/stephanenicolas/boundbox</a>  </p>
</li>
<li><p>Hugo<br>用于打印函数信息及执行时间的工具，仅在 debug 模式生效<br>项目地址：<a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">https://github.com/JakeWharton/hugo</a>  </p>
</li>
<li><p>scalpel<br>在应用下面添加一层用于界面调试<br>项目地址：<a href="https://github.com/JakeWharton/scalpel" target="_blank" rel="external">https://github.com/JakeWharton/scalpel</a>  </p>
</li>
<li><p>Android Screenshot library<br>Android 截图工具类，用于在持续集成时截图<br>项目地址：<a href="https://github.com/rtyley/android-screenshot-lib" target="_blank" rel="external">https://github.com/rtyley/android-screenshot-lib</a>  </p>
</li>
<li><p>sonar-android-lint-plugin<br>将 android lint 的错误在 sonar 中展现<br>项目地址：<a href="https://github.com/SonarCommunity/sonar-android" target="_blank" rel="external">https://github.com/SonarCommunity/sonar-android</a>  </p>
</li>
</ol>
<h4 id="三、测试工具"><a href="#三、测试工具" class="headerlink" title="三、测试工具"></a>三、测试工具</h4><ol>
<li><p>Spoon<br>可用于 android 不同机型设备自动化测试，能将应用 apk 和测试 apk 运行在不同机器上并生成相应测试报告。<br>项目地址：<a href="https://github.com/square/spoon" target="_blank" rel="external">https://github.com/square/spoon</a>  </p>
</li>
<li><p>Tencent APT<br>APT 是腾讯开源的一个 Android 平台高效性能测试组件，提供丰富实用的功能，适用于开发自测、定位性能瓶颈；测试人员完成性能基准测试、竞品对比测试<br>项目地址：<a href="https://github.com/stormzhang/APT" target="_blank" rel="external">https://github.com/stormzhang/APT</a>  </p>
</li>
<li><p>Emmagee<br>网易开源的性能测试工具，包括 CPU、内存、网络流量、启动时间、电池状态等<br>项目地址：<a href="https://github.com/NetEase/Emmagee" target="_blank" rel="external">https://github.com/NetEase/Emmagee</a>  </p>
</li>
<li><p>Android py-uiautomator<br>py-uiautomator 是一个对 Android uiautomator 用 python 进行封装的测试框架.<br>项目地址：<a href="https://github.com/xiaocong/uiautomator" target="_blank" rel="external">https://github.com/xiaocong/uiautomator</a>  </p>
</li>
<li><p>Augmented Traffic Control<br>模拟网络状况，包括带宽、时延抖动、丢包率、错包率、包重排率<br>项目地址：<a href="https://github.com/facebook/augmented-traffic-control" target="_blank" rel="external">https://github.com/facebook/augmented-traffic-control</a>  </p>
</li>
<li><p>stetho<br>强大的 Android Debug 工具。支持网络请求监控以及数据库查看，可以和 Chrome DevTools 结合或者命令行模式。<br>项目地址：<a href="https://github.com/facebook/stetho" target="_blank" rel="external">https://github.com/facebook/stetho</a>  </p>
</li>
</ol>
<h4 id="四、开发及编译环境"><a href="#四、开发及编译环境" class="headerlink" title="四、开发及编译环境"></a>四、开发及编译环境</h4><ol>
<li><p>Buck<br>facebook 开源的 Android 编译工具，效率是 ant 的两倍。主要优点在于：<br>(1) 加快编译速度，通过并行利用多核 cpu 和跟踪不变资源减少增量编译时间实现<br>(2) 可以在编译系统中生成编译规则而无须另外的系统生成编译规则文件<br>(3) 编译同时可生成单元测试结果<br>(4) 既可用于 IDE 编译也可用于持续集成编译<br>(5) facebook 持续优化中<br>项目地址：<a href="https://github.com/facebook/buck" target="_blank" rel="external">https://github.com/facebook/buck</a>  </p>
</li>
<li><p>Android Maven Plugin<br>Android Maven 插件，可用于对 android 三方依赖进行管理。在 J2EE 开发中，maven 是非常成熟的依赖库管理工具，可统一管理依赖库。<br>项目地址：<a href="https://github.com/jayway/maven-android-plugin" target="_blank" rel="external">https://github.com/jayway/maven-android-plugin</a>  </p>
</li>
<li><p>umeng-muti-channel-build-tool<br>渠道打包工具<br>项目地址：<a href="https://github.com/umeng/umeng-muti-channel-build-tool" target="_blank" rel="external">https://github.com/umeng/umeng-muti-channel-build-tool</a><br>另可参见 Google 的构建系统 Gradle：<a href="http://tools.android.com/tech-docs/new-build-system/user-guide" target="_blank" rel="external">http://tools.android.com/tech-docs/new-build-system/user-guide</a>  </p>
</li>
<li><p>Genymotion<br>目前最好用最快的 android 模拟器<br>项目地址：<a href="http://www.genymotion.com/" target="_blank" rel="external">http://www.genymotion.com/</a><br>Android studio 集成控件： <a href="http://plugins.jetbrains.com/plugin/7269?pr=idea" target="_blank" rel="external">http://plugins.jetbrains.com/plugin/7269?pr=idea</a><br>Cyril Mottier 推荐：<a href="http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/" target="_blank" rel="external">http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/</a>  </p>
</li>
<li><p>gradle-mvn-push<br>方便的将 Gradle 的 Artifacts 上传到 Maven 仓库<br>项目地址：<a href="https://github.com/chrisbanes/gradle-mvn-push" target="_blank" rel="external">https://github.com/chrisbanes/gradle-mvn-push</a><br>文档介绍：<a href="https://github.com/chrisbanes/gradle-mvn-push#usage" target="_blank" rel="external">https://github.com/chrisbanes/gradle-mvn-push#usage</a>  </p>
</li>
<li><p>Android Emulator Plugin for Jenkins<br>Android 模拟器 jenkins 插件，用于 Jenkins 做持续集成时跑模拟器测试<br>项目地址：<a href="https://github.com/jenkinsci/android-emulator-plugin" target="_blank" rel="external">https://github.com/jenkinsci/android-emulator-plugin</a>  </p>
</li>
<li><p>Android Maven Plugin<br>管理应用所需要的依赖库。包括的构建工具有 Maven、Gradle、ant、sbt<br>项目地址：<a href="https://github.com/mosabua/maven-android-sdk-deployer" target="_blank" rel="external">https://github.com/mosabua/maven-android-sdk-deployer</a>  </p>
</li>
<li><p>SDK Manager Plugin<br>下载和管理 Android SDK 的 Gradle 插件<br>项目地址：<a href="https://github.com/JakeWharton/sdk-manager-plugin" target="_blank" rel="external">https://github.com/JakeWharton/sdk-manager-plugin</a>  </p>
</li>
<li><p>Gradle Protobuf Plugin<br>将.proto 文件转换成 Java 文件的 gradle 插件<br>项目地址：<a href="https://github.com/andrewkroh/gradle-protobuf-plugin" target="_blank" rel="external">https://github.com/andrewkroh/gradle-protobuf-plugin</a>  </p>
</li>
<li><p>ChromeADB<br>Chrome 的 Adb 插件，当登录后，能看到所有连接的设备并操作，可以看应用、进程、内存及磁盘使用情况等<br>项目地址：<a href="https://github.com/importre/chromeadb" target="_blank" rel="external">https://github.com/importre/chromeadb</a>  </p>
</li>
</ol>
<h4 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h4><ol>
<li><p>GT<br>APP的随身调试平台，它是直接运行在手机上的“集成调试环境”(IDTE, Integrated Debug Environment)。<br>项目地址：<a href="https://github.com/TencentOpen/GT" target="_blank" rel="external">https://github.com/TencentOpen/GT</a><br>文档介绍：<a href="http://gt.qq.com/docs.html" target="_blank" rel="external">http://gt.qq.com/docs.html</a>  </p>
</li>
<li><p>ViewServer<br>允许 app 运行在任何手机上都可以用 HierarchyViewer 查看<br>项目地址：<a href="https://github.com/romainguy/ViewServer" target="_blank" rel="external">https://github.com/romainguy/ViewServer</a>  </p>
</li>
<li><p>GridWichterle for Android<br>在整个系统上显示一个 grid，用来帮助查看应用布局及使得布局更美观，可设置 grid 网格大小和颜色，android 推荐 48dp 和 8dp，可见 Android Design Guidelines – Metrics and Grids，比起 hierarchyviewer 相差甚远，不过偶尔可用来作为布局查看工具。<br>项目地址：<a href="https://github.com/inmite/android-grid-wichterle" target="_blank" rel="external">https://github.com/inmite/android-grid-wichterle</a><br>Demo 地址：<a href="https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle" target="_blank" rel="external">https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle</a>  </p>
</li>
<li><p>Catlog<br>手机端 log 查看工具，支持不同颜色显示、关键字过滤、级别过滤、进程 id 过滤、录制功能等<br>项目地址：<a href="https://github.com/nolanlawson/Catlog" target="_blank" rel="external">https://github.com/nolanlawson/Catlog</a><br>在线演示：<a href="https://play.google.com/store/apps/details?id=com.nolanlawson.logcat" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.nolanlawson.logcat</a>  </p>
</li>
<li><p>PID Cat<br>根据 package 查看 logcat 日志<br>项目地址：<a href="https://github.com/JakeWharton/pidcat" target="_blank" rel="external">https://github.com/JakeWharton/pidcat</a>  </p>
</li>
<li><p>ACRA<br>应用崩溃信息日志上报到 GoogleDoc 工具，网页版展现结果三方开源地址 <a href="https://github.com/BenoitDuffez/crashreportsviewer" target="_blank" rel="external">https://github.com/BenoitDuffez/crashreportsviewer</a><br>项目地址：<a href="https://github.com/ACRA/acra" target="_blank" rel="external">https://github.com/ACRA/acra</a><br>文档介绍：<a href="https://github.com/ACRA/acra/wiki/BasicSetup" target="_blank" rel="external">https://github.com/ACRA/acra/wiki/BasicSetup</a>  </p>
</li>
<li><p>Crashlytics<br>提供丰富的应用崩溃信息日志收集<br>轻量级，丰富，可自定义应用崩溃信息收集器，附有邮件通知<br>项目地址：<a href="http://www.crashlytics.com/" target="_blank" rel="external">http://www.crashlytics.com/</a><br>集成插件：<a href="http://try.crashlytics.com/sdk-android/?utm_source=blog&amp;utm_medium=blog&amp;utm_campaign=Announcing_android_studio_wp&amp;utm_content=CTA_button" target="_blank" rel="external">Android Studio, Eclipse and IntelliJ</a>  </p>
</li>
<li><p>Android Resource Navigator<br>chrome 插件，可以方便的查看 github 上 android 源码工程的 styles.xml 和 themes.xml。主要功能：<br>(1) 快速打开 android styles.xml themes.xml<br>(2) 方便在资源间跳转。styles.xml themes.xml 文件中资源链接跳转，可以方便跳转到某个资源<br>(3) 方便查找某个 style 和 theme。chrome 地址栏输入 arn+tab+搜索内容回车即可<br>(4) 自动下载不同分辨率下的 drawable<br>(5) 通过映射查找那些不是按照固定命名规则命名的 style 和 theme<br>项目地址：<a href="https://github.com/jgilfelt/android-resource-navigator" target="_blank" rel="external">https://github.com/jgilfelt/android-resource-navigator</a><br>在线演示：<a href="https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&amp;gl=GB" target="_blank" rel="external">https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&amp;gl=GB</a>  </p>
</li>
<li><p>android-resource-remover<br>根据 lint 的提示删除项目中无用的资源，减少包的大小<br>项目地址：<a href="https://github.com/KeepSafe/android-resource-remover" target="_blank" rel="external">https://github.com/KeepSafe/android-resource-remover</a>  </p>
</li>
<li><p>Telescope<br>通过手势截图以特定主题发送到特定邮箱地址报告 Bug<br>项目地址：<a href="https://github.com/mattprecious/telescope" target="_blank" rel="external">https://github.com/mattprecious/telescope</a>  </p>
</li>
<li><p>Complete Android Fragment &amp; Activity Lifecycle<br>完整的 Android Fragment/Activity 生命周期图<br>项目地址：<a href="https://github.com/xxv/android-lifecycle" target="_blank" rel="external">https://github.com/xxv/android-lifecycle</a>  </p>
</li>
<li><p>Bugsnag Notifier for Android<br>通过<code>Thread.UncaughtExceptionHandler</code>捕获应用未处理的异常崩溃 Bug 并用 Notification 展示同时上传到后台服务器<br>项目地址：<a href="https://github.com/bugsnag/bugsnag-android" target="_blank" rel="external">https://github.com/bugsnag/bugsnag-android</a><br>文档介绍：<a href="https://github.com/bugsnag/bugsnag-android#installation--setup" target="_blank" rel="external">https://github.com/bugsnag/bugsnag-android#installation--setup</a>  </p>
</li>
<li><p>Material Design Icons<br>Google Material Design 规范中的 Icon<br>项目地址：<a href="https://github.com/google/material-design-icons" target="_blank" rel="external">https://github.com/google/material-design-icons</a>  </p>
</li>
<li><p>scrollscreenshot<br>Android 滚动屏幕自动截图 jar 包，支持纵向、横向滚动截屏拼接<br>项目地址：<a href="https://github.com/PGSSoft/scrollscreenshot" target="_blank" rel="external">https://github.com/PGSSoft/scrollscreenshot</a><br>效果图：<img src="https://github.com/PGSSoft/scrollscreenshot/raw/master/samplehorizontal.png" alt="Renderings">  </p>
</li>
<li><p>droidicon<br>1600+的海量 Icon，包括 750+的 Material Design icons<br>项目地址：<a href="https://github.com/theDazzler/droidicon" target="_blank" rel="external">https://github.com/theDazzler/droidicon</a>  </p>
</li>
<li><p>leakcanary<br>Android 内存泄露检测工具，集成方便，出现泄露后报告直观<br>项目地址：<a href="https://github.com/square/leakcanary" target="_blank" rel="external">https://github.com/square/leakcanary</a><br>效果图：<img src="https://github.com/square/leakcanary/blob/master/assets/screenshot.png" alt="Renderings">  </p>
</li>
<li><p>CacheUtilsLibrary<br>将任何Java Object类型的数据序列化后写入缓存文件，将来使用时读取缓存文件并反序列化成对应Java Object的库<br>项目地址：<a href="https://github.com/westlinkin/CacheUtilsLibrary" target="_blank" rel="external">https://github.com/westlinkin/CacheUtilsLibrary</a></p>
</li>
<li><p>BlockCanary<br>BlockCanary是一个Android平台的一个非侵入式的性能监控组件，应用只需要实现一个抽象类，提供一些该组件需要的上下文环境，就可以在平时使用应用的时候检测主线程上的各种卡慢问题，并通过组件提供的各种信息分析出原因并进行修复。<br>项目地址: <a href="https://github.com/moduth/blockcanary" target="_blank" rel="external">https://github.com/moduth/blockcanary</a>  </p>
</li>
</ol>
<h2 id="第五部分"><a href="#第五部分" class="headerlink" title="第五部分"></a>第五部分</h2><p>主要介绍那些乐于分享并且有一些很不错的开源项目的个人和组织。Follow 大神，深挖大神的项目和 following，你会发现很多。  </p>
<h4 id="一、个人"><a href="#一、个人" class="headerlink" title="一、个人"></a>一、个人</h4><ol>
<li><p>JakeWharton<br>就职于 Square，绝对牛逼的大神，项目主要集中在 Android 版本兼容，ViewPager 及开发工具上<br>Github 地址：<a href="https://github.com/JakeWharton" target="_blank" rel="external">https://github.com/JakeWharton</a><br>代表作：ActionBarSherlock，Android-ViewPagerIndicator，Nine Old Androids，SwipeToDismissNOA，hugo，butterknife，Android-DirectionalViewPager, scalpel<br>pidcat 另外对 square 及其他开源项目有很多贡献<br>主页：<a href="http://jakewharton.com/" target="_blank" rel="external">http://jakewharton.com/</a>  </p>
</li>
<li><p>Chris Banes<br>Github 地址：<a href="https://github.com/chrisbanes" target="_blank" rel="external">https://github.com/chrisbanes</a><br>代表作：ActionBar-PullToRefresh，PhotoView，Android-BitmapCache，Android-PullToRefresh<br>主页：<a href="http://chris.banes.me/" target="_blank" rel="external">http://chris.banes.me/</a>  </p>
</li>
<li><p>Koushik Dutta<br>就职于 ClockworkMod<br>Github 地址：<a href="https://github.com/koush" target="_blank" rel="external">https://github.com/koush</a><br>代表作：Superuser，AndroidAsync，UrlImageViewHelper，ion, 另外对 <a href="https://github.com/CyanogenMod" target="_blank" rel="external">https://github.com/CyanogenMod</a> 的开源项目有很多贡献<br>主页：<a href="http://koush.com/" target="_blank" rel="external">http://koush.com/</a>  </p>
</li>
<li><p>Simon Vig<br>Github 地址：<a href="https://github.com/SimonVT" target="_blank" rel="external">https://github.com/SimonVT</a><br>代表作：android-menudrawer，MessageBar<br>主页：<a href="http://simonvt.net/" target="_blank" rel="external">http://simonvt.net/</a>  </p>
</li>
<li><p>Manuel Peinado<br>Github 地址：<a href="https://github.com/ManuelPeinado" target="_blank" rel="external">https://github.com/ManuelPeinado</a><br>代表作：FadingActionBar，GlassActionBar，RefreshActionItem，QuickReturnHeader  </p>
</li>
<li><p>Emil Sj?lander<br>Github 地址：<a href="https://github.com/emilsjolander" target="_blank" rel="external">https://github.com/emilsjolander</a><br>代表作：StickyListHeaders，sprinkles，android-FlipView<br>主页：<a href="http://emilsjolander.se/" target="_blank" rel="external">http://emilsjolander.se/</a>  </p>
</li>
<li><p>greenrobot<br>Github 地址：<a href="https://github.com/greenrobot" target="_blank" rel="external">https://github.com/greenrobot</a><br>代表作：greenDAO，EventBus<br>主页：<a href="http://greenrobot.de/" target="_blank" rel="external">http://greenrobot.de/</a>  </p>
</li>
<li><p>Jeff Gilfelt<br>Github 地址：<a href="https://github.com/jgilfelt" target="_blank" rel="external">https://github.com/jgilfelt</a><br>代表作：android-mapviewballoons，android-viewbadger，android-actionbarstylegenerator，android-sqlite-asset-helper<br>主页：<a href="http://jeffgilfelt.com" target="_blank" rel="external">http://jeffgilfelt.com</a>  </p>
</li>
<li><p>Romain Guy<br>Android team 成员(2013.10 已离开 Android team，仍在 Google)<br>Github 地址：<a href="https://github.com/romainguy" target="_blank" rel="external">https://github.com/romainguy</a><br>代表作：ViewServer<br>主页：<a href="http://www.curious-creature.org/category/android/" target="_blank" rel="external">http://www.curious-creature.org/category/android/</a><br>個人攝影作品：<a href="http://www.flickr.com/photos/romainguy" target="_blank" rel="external">http://www.flickr.com/photos/romainguy</a>  </p>
</li>
<li><p>sephiroth74<br>就职于 Aviary.com<br>Github 地址：<a href="https://github.com/sephiroth74" target="_blank" rel="external">https://github.com/sephiroth74</a><br>代表作：ImageViewZoom，HorizontalVariableListView，AndroidWheel，purePDF<br>主页：<a href="http://www.sephiroth.it/" target="_blank" rel="external">http://www.sephiroth.it/</a>  </p>
</li>
<li><p>Cyril Mottier<br>Google 开发者专家认证，发布一些 Android 技巧及文章<br>Github 地址：<a href="https://github.com/cyrilmottier" target="_blank" rel="external">https://github.com/cyrilmottier</a><br>代表作：GreenDroid，Polaris<br>主页：<a href="http://cyrilmottier.com/" target="_blank" rel="external">http://cyrilmottier.com/</a>  </p>
</li>
</ol>
<h4 id="二、组织"><a href="#二、组织" class="headerlink" title="二、组织"></a>二、组织</h4><ol>
<li><p>Square<br>有态度有良心的企业，很多不错的分享<br>Github 地址：<a href="https://github.com/square" target="_blank" rel="external">https://github.com/square</a><br>代表作：okhttp、fest-android，android-times-square、picasso、dagger、spoon 等等<br>主页：<a href="http://square.github.io/" target="_blank" rel="external">http://square.github.io/</a>  </p>
</li>
<li><p>Inmite s.r.o.<br>Github 地址：<a href="https://github.com/inmite" target="_blank" rel="external">https://github.com/inmite</a><br>代表作：android-styled-dialogs，android-grid-wichterle，android-selector-chapek<br>主页：<a href="http://www.inmite.eu/" target="_blank" rel="external">http://www.inmite.eu/</a>  </p>
</li>
</ol>
<h4 id="三、博客"><a href="#三、博客" class="headerlink" title="三、博客"></a>三、博客</h4><p><a href="https://github.com/android-cn/android-dev-com" target="_blank" rel="external">部分国外著名 Android 开发者信息</a>  </p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">Android 开源项目分类汇总</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目前包括：&quot;&gt;&lt;a href=&quot;#目前包括：&quot; class=&quot;headerlink&quot; title=&quot;目前包括：&quot;&gt;&lt;/a&gt;目前包括：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E4%B8%AA%E6%80%A7%E5%8C%96%E6%8E%A7%E4%BB%B6view&quot;&gt;Android 开源项目第一篇——个性化控件(View)篇&lt;/a&gt;&lt;br&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;包括&lt;br&gt;&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E4%B8%80listview&quot;&gt;ListView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E4%BA%8Cactionbar&quot;&gt;ActionBar&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E4%B8%89menu&quot;&gt;Menu&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%9B%9Bviewpager-gallery&quot;&gt;ViewPager&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%9B%9Bviewpager-gallery&quot;&gt;Gallery&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E4%BA%94gridview&quot;&gt;GridView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%85%ADimageview&quot;&gt;ImageView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E4%B8%83progressbar&quot;&gt;ProgressBar&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%85%ABtextview&quot;&gt;TextView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E4%B9%9Dscrollview&quot;&gt;ScrollView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%8D%81timeview&quot;&gt;TimeView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%8D%81%E4%B8%80tipview&quot;&gt;TipView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%8D%81%E4%BA%8Cflipview&quot;&gt;FlipView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%8D%81%E4%B8%89colorpickview&quot;&gt;ColorPickView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%8D%81%E5%9B%9Bgraphview&quot;&gt;GraphView&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E5%8D%81%E4%BA%94ui-style&quot;&gt;UI Style&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#十六其他&quot;&gt;其他&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E5%B7%A5%E5%85%B7%E5%BA%93&quot;&gt;Android 开源项目第二篇——工具库篇&lt;/a&gt;&lt;br&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;包括&lt;a href=&quot;https://github.com/Trinea/android-open-project#一依赖注入-di&quot;&gt;依赖注入&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#二图片缓存&quot;&gt;图片缓存&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#三网络请求&quot;&gt;网络请求&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#四数据库-orm-工具包&quot;&gt;数据库 ORM 工具包&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#五android-公共库&quot;&gt;Android 公共库&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#六android-高版本向低版本兼容&quot;&gt;高版本向低版本兼容库&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#七多媒体相关&quot;&gt;多媒体&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#八事件总线订阅者模式&quot;&gt;事件总线&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#九传感器&quot;&gt;传感器&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#十安全&quot;&gt;安全&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#十一插件化&quot;&gt;插件化&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#十二文件&quot;&gt;文件&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#十三其他&quot;&gt;其他&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86-%E4%BC%98%E7%A7%80%E9%A1%B9%E7%9B%AE&quot;&gt;Android 开源项目第三篇——优秀项目篇&lt;/a&gt;&lt;br&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;比较有意思的完整的 Android 项目&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7&quot;&gt;Android 开源项目第四篇——开发及测试工具篇&lt;/a&gt;&lt;br&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;包括&lt;a href=&quot;https://github.com/Trinea/android-open-project#一开发效率工具&quot;&gt;开发效率工具&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#二开发自测相关&quot;&gt;开发自测相关&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#三测试工具&quot;&gt;测试工具&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#四开发及编译环境&quot;&gt;开发及编译环境&lt;/a&gt;、&lt;a href=&quot;https://github.com/Trinea/android-open-project#五其他&quot;&gt;其他&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86&quot;&gt;Android 开源项目第五篇——优秀个人和团体篇&lt;/a&gt;&lt;br&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;乐于分享并且有一些很不错的开源项目的&lt;a href=&quot;https://github.com/Trinea/android-open-project#一个人&quot;&gt;个人&lt;/a&gt;和&lt;a href=&quot;https://github.com/Trinea/android-open-project#二组织&quot;&gt;组织&lt;/a&gt;，包括 JakeWharton、Chris Banes、Koushik Dutta 等大牛&lt;/em&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
      <category term="Trinea" scheme="http://ipcreator.me/tags/Trinea/"/>
    
  </entry>
  
  <entry>
    <title>Less Code——For the Best Android Tools Library</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Android/3rdLib/less-code/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Android/3rdLib/less-code/</id>
    <published>2017-03-30T14:18:06.000Z</published>
    <updated>2017-03-30T14:18:17.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><blockquote>
<ul>
<li>support more effective methods than android</li>
<li>high performence</li>
<li>easy integration</li>
<li>small size (only 45k~ by proguard)</li>
<li>open source</li>
</ul>
</blockquote>
<a id="more"></a>
<h1 id="LessCode"><a href="#LessCode" class="headerlink" title="LessCode"></a>LessCode</h1><p>less code, more efficient for android, for the best android tools library!</p>
<h2 id="中文版文档"><a href="#中文版文档" class="headerlink" title="中文版文档"></a><a href="https://github.com/openproject/LessCode/blob/master/README-cn.md" target="_blank" rel="external">中文版文档</a></h2><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile(<span class="string">'com.jayfeng:lesscode-core:2.1'</span>)</div></pre></td></tr></table></figure>
<h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><table>
<thead>
<tr>
<th>源码</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>ActivityLess</td>
<td>Activity相关辅助类：去标题，全屏，两次退出提示，优化Overdraw背景等</td>
</tr>
<tr>
<td>AdapterLess</td>
<td>打造通用的BaseAdapter，PagerAdapter，RecyclerView.Adapter等</td>
</tr>
<tr>
<td>AlarmLess</td>
<td>定时器相关</td>
</tr>
<tr>
<td>AppLess</td>
<td>获取应用版本，名称，签名，清理缓存等</td>
</tr>
<tr>
<td>BitmapLess</td>
<td>Bitmap处理相关</td>
</tr>
<tr>
<td>CacheLess</td>
<td>缓存网络请求返回的json</td>
</tr>
<tr>
<td>DeviceLess</td>
<td>获取设备信息，比如mac</td>
</tr>
<tr>
<td>DisplayLess</td>
<td>屏幕相关，比如dp和px的转换，状态栏或者标题栏的高度，dpi判断</td>
</tr>
<tr>
<td>DrawableLess</td>
<td>通用的着色方案</td>
</tr>
<tr>
<td>EncodeLess</td>
<td>md5加密</td>
</tr>
<tr>
<td>FileLess</td>
<td>文件处理相关</td>
</tr>
<tr>
<td>HttpLess</td>
<td>简单的Http工具类，如果是专业用途还是用其他更强大的第三方库吧</td>
</tr>
<tr>
<td>ImageLess</td>
<td>图片相关</td>
</tr>
<tr>
<td>KeyBoardLess</td>
<td>输入法的弹出或隐藏</td>
</tr>
<tr>
<td>LogLess</td>
<td>强大的Log库</td>
</tr>
<tr>
<td>NetworkLess</td>
<td>网络判断</td>
</tr>
<tr>
<td>ResourceLess</td>
<td>根据资源名获取ID</td>
</tr>
<tr>
<td>SerializeLess</td>
<td>序列化和反序列化</td>
</tr>
<tr>
<td>SharedPreferenceLess</td>
<td>简化和增强SharedPreference的操作</td>
</tr>
<tr>
<td>StorageLess</td>
<td>手机存储相关,包括:手机内存,内置存储卡(Sdcard),外置存储卡(ExtSdcard)</td>
</tr>
<tr>
<td>ToastLess</td>
<td>简化Toast的使用</td>
</tr>
<tr>
<td>UpdateLess/UpdateService</td>
<td>简单但完整的自动更新实现，无缝对接(已分离到LessCode-Update项目)</td>
</tr>
<tr>
<td>ViewLess</td>
<td>简化繁琐的findViewById和强制转换</td>
</tr>
</tbody>
</table>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>####Config</p>
<ul>
<li><p>Required</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.getInstance()</div><div class="line"> .context(getApplicationContext())</div><div class="line"> .build();</div></pre></td></tr></table></figure>
</li>
<li><p>Optional</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$.getInstance()</div><div class="line"> .context(getApplicationContext())</div><div class="line"> .log(BuildConfig.DEBUG, <span class="string">"LESSCODE"</span>) <span class="comment">// LogLess - debug, tag</span></div><div class="line"> .update(<span class="keyword">null</span>, <span class="number">5</span>) <span class="comment">// UpdateLess - null means the default value, 5 is the notification frequent, default is 5</span></div><div class="line"> .http(<span class="number">5000</span>, <span class="number">5000</span>) <span class="comment">// HttpLess - default connect and read timeout</span></div><div class="line"> .build();</div></pre></td></tr></table></figure>
</li>
</ul>
<p>####Android VS LessCode</p>
<ul>
<li><p>ViewLess</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 强制转化View类型</span></div><div class="line"><span class="comment">// Before</span></div><div class="line">ListView listView = (ListView) findViewById(R.id.list);</div><div class="line"><span class="comment">// After</span></div><div class="line">ListView listView = ViewLess.$(<span class="keyword">this</span>, R.id.list);</div></pre></td></tr></table></figure>
</li>
<li><p>ActivityLess</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 无标题全屏</span></div><div class="line"><span class="comment">// Before</span></div><div class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line">getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);</div><div class="line">            activity.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,</div><div class="line">                    WindowManager.LayoutParams.FLAG_FULLSCREEN);</div><div class="line"><span class="comment">// After</span></div><div class="line">ActivityLess.$noTitle(<span class="keyword">this</span>);</div><div class="line">ActivityLess.$fullScreen(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Proguard"><a href="#Proguard" class="headerlink" title="Proguard"></a>Proguard</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-dontwarn com.jayfeng.lesscode.**</div></pre></td></tr></table></figure>
<p>See more details on the <a href="https://github.com/openproject/LessCode/wiki" target="_blank" rel="external">Wiki</a></p>
<h2 id="Alternative-libraries"><a href="#Alternative-libraries" class="headerlink" title="Alternative libraries"></a>Alternative libraries</h2><ul>
<li><a href="https://github.com/wyouflf/xUtils3" target="_blank" rel="external">xUtils3</a></li>
<li><a href="https://github.com/litesuits/android-common" target="_blank" rel="external">LiteCommon</a></li>
<li><a href="https://github.com/Trinea/android-common" target="_blank" rel="external">TrineaAndroidCommon</a></li>
<li><a href="https://github.com/jingle1267/android-utils" target="_blank" rel="external">AndroidUtils</a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/openproject/LessCode" target="_blank" rel="external">LessCode</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;support more effective methods than android&lt;/li&gt;
&lt;li&gt;high performence&lt;/li&gt;
&lt;li&gt;easy integration&lt;/li&gt;
&lt;li&gt;small size (only 45k~ by proguard)&lt;/li&gt;
&lt;li&gt;open source&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
      <category term="Less Code" scheme="http://ipcreator.me/tags/Less-Code/"/>
    
  </entry>
  
  <entry>
    <title>Quality Tools for Android</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Android/3rdLib/quality-tools-for-Android/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Android/3rdLib/quality-tools-for-Android/</id>
    <published>2017-03-30T12:18:06.000Z</published>
    <updated>2017-03-30T23:42:12.634Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/19ac85515150735e28bd312043339ca20bbc3462/68747470733a2f2f7261772e6769746875622e636f6d2f7374657068616e656e69636f6c61732f5175616c6974792d546f6f6c732d666f722d416e64726f69642f6d61737465722f6766782f62756764726f69642d64756b652d61726d6f722e6a7067" alt=""></p>
<p>This is an Android sample app + tests that will be used to work on various project to increase the quality of the Android platform.</p>
<p>The idea is that Android programming is still in its infancy compared to the Java world. The Android community needs more robustness in Android apps and it looks like a good idea to build on the Java world experience and use its best tools for Quality Analysis.</p>
<p>We want to provide a full featured industrial development environment that can be used to create more robust projects on Android, by using any of the most interesting and popular technologies.</p>
<p>Here are <a href="https://speakerdeck.com/stephanenicolas/devoxx-2013-fr-beef-you-android-apps-using-java-tools" target="_blank" rel="external">some slides</a> to present Quality Tools for Android.</p>
<a id="more"></a>
<h1 id="Already-integrated"><a href="#Already-integrated" class="headerlink" title="Already integrated :"></a>Already integrated :</h1><ul>
<li>Standard Android testing framework and code coverage using emma, reported in Sonar. That also covers robotium, easy mock and mockito technologies.</li>
<li>Robolectric testing framework and code coverage using Cobertura, reported in Sonar. Now in same eclipse project / maven module as app under test <a href="https://github.com/rgladwell/m2e-android/issues/52" target="_blank" rel="external">thanks to this thread</a>.</li>
<li>UI Automator testing through a new android maven plugin goal (to be released in android-maven-plugin-3.5.2) and result in sonar.</li>
<li>Espresso / Android test kit</li>
<li>Configuration works out of the box in eclipse</li>
<li>Lint integration via Maven.</li>
<li>PMD, findbugs, checkstyle integration via Maven, reported in Sonar.</li>
<li><a href="https://github.com/lewisd32/lint-maven-plugin" target="_blank" rel="external">lint android maven lint</a> integration (pom checker)</li>
<li>Monkey testing is now automated and reported in Sonar.</li>
<li>Add <a href="http://classycle.sourceforge.net/" target="_blank" rel="external">classycle</a> support, to enforce architectural constraints, through <a href="https://github.com/hcoles/classycle-maven-plugin" target="_blank" rel="external">classycle maven plugin</a></li>
<li><a href="https://github.com/square/spoon" target="_blank" rel="external">Spoon from square</a>, including screenshots during tests.<br>*</li>
<li><a href="https://github.com/mosabua/maven-android-sdk-deployer" target="_blank" rel="external">maven-android-sdk-deployer</a> to deliver android jars (including uiautomator)</li>
<li><a href="https://github.com/jeromevdl/sonar-android-lint-plugin" target="_blank" rel="external">sonar android lint plugin</a></li>
<li><a href="https://github.com/square/fest-android" target="_blank" rel="external">FEST Android</a>.</li>
<li>Jacoco <a href="https://github.com/jacoco/jacoco/pull/64#issuecomment-12150910" target="_blank" rel="external">offline instrumentation</a> for both robolectric and standard junit tests.</li>
<li>Testing  technologies integrated :<ul>
<li>Standard Android tests   <ul>
<li>easymock</li>
<li>mockito</li>
<li>mockwebserver</li>
<li>robotium</li>
<li>fest-android</li>
</ul>
</li>
<li>robolectric tests<ul>
<li>hamcrest</li>
<li>easymock</li>
<li>mockito</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/rtyley/android-screenshot-lib" target="_blank" rel="external">Screenshot lib</a> works during UIAutomator tests.</li>
<li><a href="https://github.com/stephanenicolas/boundbox" target="_blank" rel="external">BoundBox</a> is used in some StandardAndroid tests and Robolectric tests.</li>
<li>support for <a href="https://travis-ci.org/stephanenicolas/Quality-Tools-for-Android" target="_blank" rel="external">Travis CI</a>.</li>
<li>Build Status on Travis: <a href="https://api.travis-ci.org/stephanenicolas/Quality-Tools-for-Android" target="_blank" rel="external"><img src="https://api.travis-ci.org/stephanenicolas/Quality-Tools-for-Android.png" alt="Build Status on Travis:"></a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/stephanenicolas/Quality-Tools-for-Android" target="_blank" rel="external">Quality-Tools-for-Android</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/19ac85515150735e28bd312043339ca20bbc3462/68747470733a2f2f7261772e6769746875622e636f6d2f7374657068616e656e69636f6c61732f5175616c6974792d546f6f6c732d666f722d416e64726f69642f6d61737465722f6766782f62756764726f69642d64756b652d61726d6f722e6a7067&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is an Android sample app + tests that will be used to work on various project to increase the quality of the Android platform.&lt;/p&gt;
&lt;p&gt;The idea is that Android programming is still in its infancy compared to the Java world. The Android community needs more robustness in Android apps and it looks like a good idea to build on the Java world experience and use its best tools for Quality Analysis.&lt;/p&gt;
&lt;p&gt;We want to provide a full featured industrial development environment that can be used to create more robust projects on Android, by using any of the most interesting and popular technologies.&lt;/p&gt;
&lt;p&gt;Here are &lt;a href=&quot;https://speakerdeck.com/stephanenicolas/devoxx-2013-fr-beef-you-android-apps-using-java-tools&quot;&gt;some slides&lt;/a&gt; to present Quality Tools for Android.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Findbugs" scheme="http://ipcreator.me/tags/Findbugs/"/>
    
      <category term="Checkstyle" scheme="http://ipcreator.me/tags/Checkstyle/"/>
    
      <category term="PMD" scheme="http://ipcreator.me/tags/PMD/"/>
    
      <category term="Lint" scheme="http://ipcreator.me/tags/Lint/"/>
    
  </entry>
  
  <entry>
    <title>Design Pattern in Android</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Java/design-pattern-in-android/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Java/design-pattern-in-android/</id>
    <published>2017-03-30T12:17:06.000Z</published>
    <updated>2017-03-31T04:07:23.545Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://sourcemaking.com/files/v2/landings/DesignPatterns-cover.png" alt=""></p>
<p>在系统的学习设计模式之后，我们需要达到3个层次：</p>
<ol>
<li>能在白纸上画出所有的模式结构和时序图；</li>
<li>能用代码实现；如果模式的代码都没有实现过，是用不出来的；即所谓，看得懂，不会用；</li>
<li>灵活应用到工作中的项目中；</li>
</ol>
<a id="more"></a>
<h2 id="Design-Patterns"><a href="#Design-Patterns" class="headerlink" title="Design Patterns"></a>Design Patterns</h2><p>In software engineering, a design pattern is a general repeatable solution to a commonly occurring problem in software design. A design pattern isn’t a finished design that can be transformed directly into code. It is a description or template for how to solve a problem that can be used in many different situations.</p>
<h2 id="Uses-of-Design-Patterns"><a href="#Uses-of-Design-Patterns" class="headerlink" title="Uses of Design Patterns"></a>Uses of Design Patterns</h2><p>Design patterns can speed up the development process by providing tested, proven development paradigms. Effective software design requires considering issues that may not become visible until later in the implementation. Reusing design patterns helps to prevent subtle issues that can cause major problems and improves code readability for coders and architects familiar with the patterns.</p>
<p>Often, people only understand how to apply certain software design techniques to certain problems. These techniques are difficult to apply to a broader range of problems. Design patterns provide general solutions, documented in a format that doesn’t require specifics tied to a particular problem.</p>
<p>In addition, patterns allow developers to communicate using well-known, well understood names for software interactions. Common design patterns can be improved over time, making them more robust than ad-hoc designs.</p>
<h2 id="Creational-Design-Patterns"><a href="#Creational-Design-Patterns" class="headerlink" title="Creational Design Patterns"></a>Creational Design Patterns</h2><p><img src="https://sourcemaking.com/files/v2/content/patterns/Abstract_Factory_example1-2x.png" alt=""></p>
<h3 id="Abstract-Factory"><a href="#Abstract-Factory" class="headerlink" title="Abstract Factory"></a><a href="https://sourcemaking.com/design_patterns/abstract_factory" target="_blank" rel="external">Abstract Factory</a></h3><p>Creates an instance of several families of classes</p>
<h3 id="Builder"><a href="#Builder" class="headerlink" title="Builder"></a><a href="https://sourcemaking.com/design_patterns/builder" target="_blank" rel="external">Builder</a></h3><p>Separates object construction from its representation</p>
<h3 id="Factory-Method"><a href="#Factory-Method" class="headerlink" title="Factory Method"></a><a href="https://sourcemaking.com/design_patterns/factory_method" target="_blank" rel="external">Factory Method</a></h3><p>Creates an instance of several derived classes</p>
<h3 id="Object-Pool"><a href="#Object-Pool" class="headerlink" title="Object Pool"></a><a href="https://sourcemaking.com/design_patterns/object_pool" target="_blank" rel="external">Object Pool</a></h3><p>Avoid expensive acquisition and release of resources by recycling objects that are no longer in use</p>
<h3 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a><a href="https://sourcemaking.com/design_patterns/prototype" target="_blank" rel="external">Prototype</a></h3><p>A fully initialized instance to be copied or cloned</p>
<h3 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a><a href="https://sourcemaking.com/design_patterns/singleton" target="_blank" rel="external">Singleton</a></h3><p>A class of which only a single instance can exist</p>
<h2 id="Structural-Design-Patterns"><a href="#Structural-Design-Patterns" class="headerlink" title="Structural Design Patterns"></a><a href="https://sourcemaking.com/design_patterns/structural_patterns" target="_blank" rel="external">Structural Design Patterns</a></h2><p><img src="https://sourcemaking.com/files/v2/content/patterns/Decorator_example-2x.png" alt=""></p>
<p><img src="https://sourcemaking.com/files/v2/content/patterns/Proxy_example1-2x.png" alt=""></p>
<p>These design patterns are all about Class and Object composition. Structural class-creation patterns use inheritance to compose interfaces. Structural object-patterns define ways to compose objects to obtain new functionality.</p>
<h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a><a href="https://sourcemaking.com/design_patterns/adapter" target="_blank" rel="external">Adapter</a></h3><p>Match interfaces of different classes</p>
<h3 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a><a href="https://sourcemaking.com/design_patterns/bridge" target="_blank" rel="external">Bridge</a></h3><p>Separates an object’s interface from its implementation</p>
<h3 id="Composite"><a href="#Composite" class="headerlink" title="Composite"></a><a href="https://sourcemaking.com/design_patterns/composite" target="_blank" rel="external">Composite</a></h3><p>A tree structure of simple and composite objects</p>
<h3 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a><a href="https://sourcemaking.com/design_patterns/decorator" target="_blank" rel="external">Decorator</a></h3><p>Add responsibilities to objects dynamically</p>
<h3 id="Facade"><a href="#Facade" class="headerlink" title="Facade"></a><a href="https://sourcemaking.com/design_patterns/facade" target="_blank" rel="external">Facade</a></h3><p>A single class that represents an entire subsystem</p>
<h3 id="Flyweight"><a href="#Flyweight" class="headerlink" title="Flyweight"></a><a href="https://sourcemaking.com/design_patterns/flyweight" target="_blank" rel="external">Flyweight</a></h3><p>A fine-grained instance used for efficient sharing</p>
<h3 id="Private-Class-Data"><a href="#Private-Class-Data" class="headerlink" title="Private Class Data"></a><a href="https://sourcemaking.com/design_patterns/private_class_data" target="_blank" rel="external">Private Class Data</a></h3><p>Restricts accessor/mutator access</p>
<h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a><a href="https://sourcemaking.com/design_patterns/proxy" target="_blank" rel="external">Proxy</a></h3><p>An object representing another object</p>
<h2 id="Behavioral-Design-Patterns"><a href="#Behavioral-Design-Patterns" class="headerlink" title="Behavioral Design Patterns"></a><a href="https://sourcemaking.com/design_patterns" target="_blank" rel="external">Behavioral Design Patterns</a></h2><p>These design patterns are all about Class’s objects communication. Behavioral patterns are those patterns that are most specifically concerned with communication between objects.</p>
<p><img src="https://sourcemaking.com/files/v2/content/patterns/Interpreter_example1-2x.png" alt=""></p>
<p><img src="https://sourcemaking.com/files/v2/content/patterns/State_example1-2x.png" alt=""></p>
<p><a href="https://sourcemaking.com/design_patterns/chain_of_responsibility" target="_blank" rel="external">Chain of responsibility</a><br>A way of passing a request between a chain of objects</p>
<p><a href="https://sourcemaking.com/design_patterns/command" target="_blank" rel="external">Command</a><br>Encapsulate a command request as an object</p>
<p><a href="https://sourcemaking.com/design_patterns/interpreter" target="_blank" rel="external">Interpreter</a><br>A way to include language elements in a program</p>
<p><a href="https://sourcemaking.com/design_patterns/iterator" target="_blank" rel="external">Iterator</a><br>Sequentially access the elements of a collection</p>
<p><a href="https://sourcemaking.com/design_patterns/mediator" target="_blank" rel="external">Mediator</a><br>Defines simplified communication between classes</p>
<p><a href="https://sourcemaking.com/design_patterns/memento" target="_blank" rel="external">Memento</a><br>Capture and restore an object’s internal state</p>
<p><a href="https://sourcemaking.com/design_patterns/null_object" target="_blank" rel="external">Null Object</a><br>Designed to act as a default value of an object</p>
<p><a href="https://sourcemaking.com/design_patterns/observer" target="_blank" rel="external">Observer</a><br>A way of notifying change to a number of classes</p>
<p><a href="https://sourcemaking.com/design_patterns/state" target="_blank" rel="external">State</a><br>Alter an object’s behavior when its state changes</p>
<p><a href="https://sourcemaking.com/design_patterns/strategy" target="_blank" rel="external">Strategy</a><br>Encapsulates an algorithm inside a class</p>
<p><a href="https://sourcemaking.com/design_patterns/template_method" target="_blank" rel="external">Template method</a><br>Defer the exact steps of an algorithm to a subclass</p>
<p><a href="https://sourcemaking.com/design_patterns/visitor" target="_blank" rel="external">Visitor</a><br>Defines a new operation to a class without change</p>
<h2 id="Criticism"><a href="#Criticism" class="headerlink" title="Criticism"></a>Criticism</h2><p>The concept of design patterns has been criticized by some in the field of computer science.</p>
<h3 id="Targets-the-wrong-problem"><a href="#Targets-the-wrong-problem" class="headerlink" title="Targets the wrong problem"></a>Targets the wrong problem</h3><p>The need for patterns results from using computer languages or techniques with insufficient abstraction ability. Under ideal factoring, a concept should not be copied, but merely referenced. But if something is referenced instead of copied, then there is no “pattern” to label and catalog. Paul Graham writes in the essay Revenge of the Nerds.</p>
<p>Peter Norvig provides a similar argument. He demonstrates that 16 out of the 23 patterns in the Design Patterns book (which is primarily focused on C++) are simplified or eliminated (via direct language support) in Lisp or Dylan.</p>
<h3 id="Lacks-formal-foundations"><a href="#Lacks-formal-foundations" class="headerlink" title="Lacks formal foundations"></a>Lacks formal foundations</h3><p>The study of design patterns has been excessively ad hoc, and some have argued that the concept sorely needs to be put on a more formal footing. At OOPSLA 1999, the Gang of Four were (with their full cooperation) subjected to a show trial, in which they were “charged” with numerous crimes against computer science. They were “convicted” by ⅔ of the “jurors” who attended the trial.</p>
<h3 id="Leads-to-inefficient-solutions"><a href="#Leads-to-inefficient-solutions" class="headerlink" title="Leads to inefficient solutions"></a>Leads to inefficient solutions</h3><p>The idea of a design pattern is an attempt to standardize what are already accepted best practices. In principle this might appear to be beneficial, but in practice it often results in the unnecessary duplication of code. It is almost always a more efficient solution to use a well-factored implementation rather than a “just barely good enough” design pattern.</p>
<h3 id="Does-not-differ-significantly-from-other-abstractions"><a href="#Does-not-differ-significantly-from-other-abstractions" class="headerlink" title="Does not differ significantly from other abstractions"></a>Does not differ significantly from other abstractions</h3><p>Some authors allege that design patterns don’t differ significantly from other forms of abstraction, and that the use of new terminology (borrowed from the architecture community) to describe existing phenomena in the field of programming is unnecessary. The Model-View-Controller paradigm is touted as an example of a “pattern” which predates the concept of “design patterns” by several years. It is further argued by some that the primary contribution of the Design Patterns community (and the Gang of Four book) was the use of Alexander’s pattern language as a form of documentation; a practice which is often ignored in the literature.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://sourcemaking.com/design_patterns" target="_blank" rel="external">Design Patterns</a><br>[2]<a href="http://blog.csdn.net/zhao_zepeng/article/category/6200162" target="_blank" rel="external"> java/android 设计模式学习笔记</a><br>[3]<a href="https://github.com/zhaozepeng/Design-Patterns" target="_blank" rel="external">Design-Patterns</a><br>[4]<a href="www.douban.com">Android源码设计模式解析与实战</a><br>[5]<a href="http://design-patterns.readthedocs.io/zh_CN/latest/index.html#" target="_blank" rel="external">图说设计模式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://sourcemaking.com/files/v2/landings/DesignPatterns-cover.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在系统的学习设计模式之后，我们需要达到3个层次：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;能在白纸上画出所有的模式结构和时序图；&lt;/li&gt;
&lt;li&gt;能用代码实现；如果模式的代码都没有实现过，是用不出来的；即所谓，看得懂，不会用；&lt;/li&gt;
&lt;li&gt;灵活应用到工作中的项目中；&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Design Pattern" scheme="http://ipcreator.me/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Why I Insist on Practicing deliberately Everyday</title>
    <link href="http://ipcreator.me/2017/03/30/MyView/Original/Why/why-i-insist-on-practicing-deliberately-eveyday/"/>
    <id>http://ipcreator.me/2017/03/30/MyView/Original/Why/why-i-insist-on-practicing-deliberately-eveyday/</id>
    <published>2017-03-30T12:17:06.000Z</published>
    <updated>2017-04-05T14:01:20.284Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>I can feel and see my growth everyday.<br>Achievement and Rhythm are very important when you insist everyday.<br>Accumulation is powerful. <strong>Big Bang</strong><br>Only normal and healthy way can last longer.<br>Only deliberate practice can makes you to an expert.</p>
</blockquote>
<a id="more"></a>
<h2 id="李笑来《通往财富自由之路》-1"><a href="#李笑来《通往财富自由之路》-1" class="headerlink" title="李笑来《通往财富自由之路》[1]"></a>李笑来《通往财富自由之路》<a href="#Reference"><sup>[1]</sup></a></h2><blockquote>
<p>人与人之间的技能差异，证据确凿地来自于“刻意练习”delieberate practice，而一个人能够做到刻意锻炼，唯一能够仰仗的就是元认知能力。反过来，元认知能力也必然会在可以锻炼的过程中不断被加强。</p>
</blockquote>
<p>如果你需要一个自己设计并且足够让你上瘾的锻炼方法，最好能够精确地控制锻炼后的反馈。虽然不一定是每次练完就有的反馈，但是应该找一个合适的频率不断给自己激励，让自己看到成果，进而激发更多的兴趣。<strong>这种刻意练习的设计会让你慢慢形成一个正循环，从而能够持续不断地练习下去。</strong></p>
<p>练习和增加兴趣是相辅相成的。每当你突破了一个玻璃顶，你对于这件事情的兴趣就会加强，并且促使你进一步去可以练习。</p>
<p>充足的休息也是健身的重要环节。锻炼元认知能力其实也是类似的过程。反思就相当于你不断地运用元认知去锻炼，而坐享和兴趣则更像是你在放松恢复的过程。</p>
<p>过去的兴趣之所以在工作之后被磨灭，大部分的原因就在于：缺少刻意练习。</p>
<p>没有经历过刻意练习的兴趣，多半经受不住生活的考验。一旦不那么顺利的时候，我们就会轻易放弃这些兴趣。</p>
<p>不论是锻炼还是休息，都需要尽可能百分百投入。</p>
<p>有元认知能力的人，就有机会摆脱当局者的角色。我总觉得大部分人只是缺少一个启发，让他们知道其实自己有能力控制思维，跳出当局者的视角，从更高的层次来审视自己的生活。</p>
<p><strong>之所以说是刻意练习，就是因为它需要调动你的注意力，全神贯注地完成。因此一定不会很轻松，也不会很顺利。</strong></p>
<p>当我们把注意力集中在某一处，并且开始主动不去思考时，我们的大脑会比平常更为活跃，能够产生更多的连接。</p>
<p><strong>有兴趣——刻意练习——做的更好——更有兴趣——继续刻意练习</strong></p>
<p><u><strong>兴趣和练习其实是相辅相成的。没有兴趣，你可能不会坚持去做枯燥的练习；没有练习，原本的兴趣也会很快枯竭。</strong></u></p>
<h2 id="天才训练指南-2"><a href="#天才训练指南-2" class="headerlink" title="天才训练指南[2]"></a>天才训练指南<sup>[2]</sup></h2><p>心理学家 Anders Ericsson 的这项研究从技术角度解决了这个问题。研究覆盖了从职业运动员，艺术家到程序员差不多所有需要天才的领域，出版了一本900多页的书，结论是 天才还真是练出来的，但是关键在于怎么练。</p>
<p>想要训练一个天才绝不是整天苦练就行，你需要的是 “deliberate practice“：</p>
<p>&gt;<br>– 每次训练有明确的目标<br>– 获得即时的反馈<br>– 既要注重结果，也要注重技术</p>
<p>宁可在本科的时候发几篇灌水小文章也比苦读十年期待一鸣惊人强。一提基础科学，有人总说”板凳要坐十年冷”，这种思想完全不适合现代化科研体系。坐十年 板凳的运动员国家队能用么？马俊仁当年是一般比赛不参加，专门参加奥运会世界杯一鸣惊人结果人家怀疑你是不是服用禁药啊，一旦有点小事整个队伍居然崩溃 了。这种做法现在已经被淘汰。正确的做法是象现在刘翔这样有什么大奖赛都去，追求一个稳定的成绩。</p>
<p>科学工作者就好像运动员一样，需要不停的比赛，而不是不停的看录像。</p>
<h2 id="怎样练习一万小时-3"><a href="#怎样练习一万小时-3" class="headerlink" title="怎样练习一万小时[3]"></a>怎样练习一万小时<sup>[3]</sup></h2><p>2006年，一本900多页的书，The Cambridge Handbook of Expertise and Expert Performance， 出版。这是“怎样炼成天才”研究的一本里程碑式的学术著作，此书直接引领了后来一系列畅销书的出现，包括格拉德威尔的《异类》，Geoff Colvin 的 Talent is Overrated，和 Daniel Coyle 的 The Talent Code 等等。科学家们不但证明了高手是练出来的，而且通过考察各个领域最好的训练方法的共性，总结了一套统一的练习方法，这就是所谓“刻意练习”（deliberate practice）。</p>
<h3 id="刻意练习"><a href="#刻意练习" class="headerlink" title="刻意练习"></a>刻意练习</h3><p>首次提出“刻意练习”这个概念的是佛罗里达大学心理学家 K. Anders Ericsson。这套练习方法的核心假设是，专家级水平是逐渐地练出来的，而有效进步的关键在于找到一系列的小任务让受训者按顺序完成。这些小任务必须是受训者正好不会做，但是又正好可以学习掌握的。完成这种练习要求受训者思想高度集中，这就与那些例行公事或者带娱乐色彩的练习完全不同。“刻意练习”的理论目前已经被广泛接受，我们可以总结一下它的特点。</p>
<h4 id="1-只在“学习区”练习"><a href="#1-只在“学习区”练习" class="headerlink" title="1. 只在“学习区”练习"></a>1. 只在“学习区”练习</h4><p>科学家们考察花样滑冰运动员的训练，发现在同样的练习时间内，普通的运动员更喜欢练自己早已掌握了的动作，而顶尖运动员则更多地练习各种高难度的跳。普通爱好者打高尔夫球纯粹是为了享受打球的过程，而职业运动员则集中练习在各种极端不舒服的位置打不好打的球。真正的练习不是为了完成运动量，练习的精髓是要持续地做自己做不好的事。</p>
<p>心理学家把人的知识和技能分为层层嵌套的三个圆形区域：</p>
<blockquote>
<p>最内一层是“舒适区”，是我们已经熟练掌握的各种技能；<br>最外一层是“恐慌区”，是我们暂时无法学会的技能，<br>二者中间则是“学习区”。</p>
</blockquote>
<p><u>只有在学习区里面练习，一个人才可能进步。有效的练习任务必须精确的在受训者的“学习区”内进行，具有高度的针对性。在很多情况下这要求必须要有一个好的老师或者教练，从旁观者的角度更能发现我们最需要改进的地方。</u></p>
<p>只在学习区练习，是一个非常强的要求。一般的学校课堂往往有几十人按照相同的进度学习知识，这种学习是没有针对性的。同样的内容，对某些同学来说是舒适区根本无需再练，而对某些学生则是恐慌区。科学教学必须因材施教，小班学习，甚至是一对一的传授。真正高手训练与其说是老师教学生，不如说是师傅带学徒。</p>
<p>一旦已经学会了某个东西，就不应该继续在上面花时间，应该立即转入下一个难度。长期使用这种方法训练必然事半功倍。2004年的一项研究表明，大学生的学习成绩和他们在学习上投入的总时间没有直接关系，关键是学习方法。</p>
<h4 id="2-大量重复训练。"><a href="#2-大量重复训练。" class="headerlink" title="2. 大量重复训练。"></a>2. 大量重复训练。</h4><p>从不会到会，秘诀是重复。美国加州有个“害羞诊所”（The Shyness Clinic），专门帮助那些比如说不敢和异性说话的人克服害羞心理。这个诊所的心理学家不相信什么心理暗示疗法，什么童年回忆之类，他们相信练习。他们认为使人害羞的并不是事情本身，而是我们对事情的观点。怎么治疗恐女症？做法是设计各种不同难度的场合进行对话训练。最初是在房间内集体对话，角色扮演。然后是到直接跑到大街上找陌生美女搭讪要求约会。最高难度是有意在公共场合做出使自己难堪的事情，比如去超市把一个西瓜掉在地上摔坏。</p>
<p><strong>这种把不常见的高难度事件重复化的办法正是MBA课程的精髓</strong>。在商学院里一个学生每周可能要面对20个真实发生过的商业案例，学生们首先自己研究怎么决策，提出解决方案，最后老师给出实际的结果并作点评。学习商业决策的最好办法不是观察老板每个月做两次决策，而是自己每周做20次模拟的决策。军事学院的模拟战，飞行员在计算机上模拟各种罕见的空中险情，包括丘吉尔对着镜子练习演讲，都是重复训练。</p>
<p>在体育和音乐训练中，比较强调“分块”练习。首先你要把整个动作或者整首曲子过一遍，看专家是怎么做的。然后把它分解为很多小块，一块一块地学习掌握。在这种训练中一定要慢，只有慢下来才能感知技能的内部结构，注意到自己的错误。在美国一所最好的小提琴学校里，甚至有禁止学生把一支曲子连贯地演奏的要求，规定如果别人听出来你拉的是什么曲子，那就说明你没有正确练习。职业的体育训练往往是针对技术动作，而不是比赛本身。一个高水平的美式足球运动员只有1%的时间用于队内比赛，其他都是各种相关的基础训练。</p>
<p>反过来说如果没有这种事先的重复训练，一个人面对不常见的事件往往会不知所措。统计表明工作多年的医生通过读X光片诊断罕见病症的水平反而不如刚毕业的医学院学生 — 因为很少遇到这种病例，而在医学院学到的东西早就忘了。最好的办法其实是定期地让医生们拿过去的旧X光片集中训练，而不是期待在工作中碰到。</p>
<h4 id="3-持续获得有效的反馈。"><a href="#3-持续获得有效的反馈。" class="headerlink" title="3. 持续获得有效的反馈。"></a>3. 持续获得有效的反馈。</h4><p>传道，授业，解惑，老师和教练最大的用处是什么？也许对一般人来说小学老师最大的作用是激发了他学习的兴趣，教会了他什么东西，曾经有过传道授业解惑。而真正的高手都有很强的自学能力，对他们而言，老师和教练的最重要作用是提供即时的反馈。</p>
<p>一个动作做得好与不好，最好有教练随时指出，本人必须能够随时了解练习结果。看不到结果的练习等于没有练习：如果只是应付了事，你不但不会变好，而且会对好坏不再关心。在某种程度上，刻意练习是以错误为中心的练习。练习者必须建立起对错误的极度敏感，一旦发现自己错了会感到非常不舒服，一直练习到改正为止。</p>
<p>从训练的角度，一个真正好教练是什么样的？John Wooden 是美国最具传奇色彩的大学篮球教练，他曾经率领 UCLA 队在12年内10次获得 NCAA 冠军。为了获得 Wooden 的执教秘诀，两位心理学家曾经全程观察他的训练课，甚至记录下了他给球员的每一条指令。结果统计表明，在记录的2326条指令之中, 6.9%是表扬，6.6%是表示不满，而有75% 是纯粹的信息，也就是做什么动作和怎么做。他最常见的办法是三段论：<strong>演示一遍正确动作，表现一遍错误动作，再演示一遍正确动作。</strong></p>
<p>与外行想象的不同，最好的教练从不发表什么激情演说，甚至不讲课，说话从不超过20秒。他们只给学生非常具体的即时反馈。所有训练都事先进行无比详细的计划，甚至包括教运动员怎么系鞋带。他们仿佛有一种诡异的知道学员在想什么的能力，即使是第一次见面能指出学生在技术上最需要什么。他们是绝对的因材施教，源源不断地提供高度具有针对性的具体指导。</p>
<p>获得反馈的最高境界是自己给自己当教练。高手工作的时候会以一个旁观者的角度观察自己，每天都有非常具体的小目标，对自己的错误极其敏感，并不断寻求改进。</p>
<h4 id="4-精神高度集中。"><a href="#4-精神高度集中。" class="headerlink" title="4. 精神高度集中。"></a>4. 精神高度集中。</h4><p>刻意练习没有“寓教于乐”这个概念。曾经有个著名小提琴家说过，如果你是练习手指，你可以练一整天；可是如果你是练习脑子，你每天能练两个小时就不错了。高手的练习每次最多1到1.5小时，每天最多4到5小时。没人受得了更多。一般女球迷可能认为贝克汉姆那样的球星很可爱，她们可能不知道的是很少有球员能完成贝克汉姆的训练强度，因为太苦了。</p>
<p>科学家们曾经调查研究了一个音乐学院。他们把这里的所有小提琴学生分为好（将来主要是做音乐教师），更好，和最好（将来做演奏家）三个组。这三个组的学生 在很多方面都相同，比如都是从8岁左右开始练习，甚至现在每周的总的音乐相关活动（上课，学习， 练习）时间也相同，都是51个小时。</p>
<p>研究人员发现，所有学生都了解一个道理：<strong>真正决定你水平的不是全班一起上的音乐课，而是单独练习</strong>：</p>
<p>－ 最好的两个组学生平均每周有24小时的单独练习，而第三个组只有9小时。<br>－ 他们都认为单独练习是最困难也是最不好玩的活动。<br>－ 最好的两个组的学生利用上午的晚些时候和下午的早些时候单独练习，这时候他们还很清醒；而第三个组利用下午的晚些时候单独练习，这时候他们已经很困了。<br>－ 最好的两个组不仅仅练得多，而且睡眠也多。他们午睡也多。</p>
<p>那么是什么因素区分了前两个组呢？是学生的历史练习总时间。到18岁，最好的组中，学会平均总共练习了7410小时，而第二组是 5301小时，第三组 3420小时。第二组的人现在跟最好的组一样努力，可是已经晚了。可见要想成为世界级高手，一定要尽早投入训练，这就是为什么天才音乐家都是从很小的时候就开始苦练了。</p>
<h3 id="人脑的学习原理"><a href="#人脑的学习原理" class="headerlink" title="人脑的学习原理"></a>人脑的学习原理</h3><p>现代神经科学和认知科学认为，几乎没有任何技能是人一出生就会的。哪怕是对简单物体的识别，把东西抓取过来这些简单的动作，也是婴儿后天学习的结果。一个人一出生的时候根本不可能预见到将来自己需要什么技能，基因不可能把一切技能都用遗传的方法事先编程，那样的话太浪费大脑的存储空间。最好的办法是不预设任何技能，只提供一个能够学习各种技能的能力，这就是人脑的巧妙之处。基因的做法是先预设一些对刺激的基本反应和感觉，比如看见好吃的东西我们会饿等等。这些基本的反应需要调动的神经较少。但对于更高级别的技能，比如演奏音乐，需要协调调动很多神经，就必须靠后天学习了。</p>
<p><u><strong>人的任何一个技能，都是大脑内一系列神经纤维传递的电脉冲信号的组合。解剖表明拥有不同技能的人，其大脑的神经结构非常不同，比如出租车司机大脑内识别方向的区域就特别发达。也就是说与计算机不同，人对于技能的掌握是在大脑硬件层次实现的。</strong></u></p>
<p>而最近有一派科学家认为，髓磷脂是技能训练的关键，它的作用是像胶皮把电线包起来一样，把这些神经纤维给包起来，通过防止电脉冲外泄而使得信号更强，更快，更准确。不管练习什么，我们都是在练习大脑中的髓磷脂，就好像把一堆杂乱无章的电线被排列整齐变成电缆。直到2000年新技术允许科学家直接观察活体大脑内的髓磷脂之后，髓磷脂的作用才被发现，而且一直到2006年才第一次被在学术期刊上说明。科学家认为髓磷脂是脑神经的高速公路，提高信号传递速度，并且可以把延迟时间减少30倍，总共提速3000倍，甚至可以控制速度，想慢就慢。<br>人脑之中分布着大量“自由的”髓磷脂，它们观测脑神经纤维的信号发射和组合，哪些神经纤维用的越多，它们就过去把这一段线路给包起来，使得线路中的信号传递更快，形成高速公路。这就是为什么练习是如此重要。</p>
<p>髓磷脂理论可以解释很多事情。比如为什么小孩常会犯错？他们的神经系统都在，也知道对错，只是需要时间去建立起来髓磷脂的高速网络。为什么习惯一旦养成不容易改变？因为所谓“习惯”，其实是以神经纤维电缆组合的形式“长”在大脑之中的，髓磷脂一旦把神经包起来，它不会自动散开 — 改变习惯的唯一办法是形成新习惯。</p>
<p><strong>为什么年轻人学东西快？因为尽管人的一生之中髓磷脂都在生长，但年轻人生长得最快。最激进的理论则认为人跟猴子的最显著区别不在于脑神经元的多少，而在于人的髓磷脂比猴子多20%！解剖表明，爱因斯坦的大脑中的神经元数量是平均水平，但他拥有更多能够产生髓磷脂的细胞。</strong></p>
<h2 id="Reading"><a href="#Reading" class="headerlink" title="Reading"></a>Reading</h2><pre><code>+ Stackflow
+ CSDN
+ Github
+ iGet
+ Duokan
+ Douban
+ Zhihu
</code></pre><h2 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h2><pre><code>+ Blog
</code></pre><h2 id="Deep-Thinking"><a href="#Deep-Thinking" class="headerlink" title="Deep Thinking"></a>Deep Thinking</h2><pre><code>+ Sixty Three Game
</code></pre><h2 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h2><pre><code>+ Professional
+ Life
</code></pre><h2 id="Steps-you-move-everyday"><a href="#Steps-you-move-everyday" class="headerlink" title="Steps you move everyday"></a>Steps you move everyday</h2><p>One–&gt;Ten–&gt;Hundred–&gt;Thousand–&gt;Ten Thousand–&gt;One Hundred Thousand<br>–&gt;Million–&gt;Ten Million–&gt;One Hundred Million–&gt;Billion–&gt;…</p>
<h2 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h2><pre><code>+ Code snippet
+ Design Pattern
+ Search Skill
</code></pre><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>不论如何，刻意练习是个科学方法，值得我们把它运用到日常工作中去。显然我们平时中做的绝大多数事情都不符合刻意练习的特点，这可能就是为什么大多数人都没能成为世界级高手。天才来自刻意练习。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h3 id="1-《通往财富自由之路》"><a href="#1-《通往财富自由之路》" class="headerlink" title="[1]《通往财富自由之路》"></a>[1]<a href="/2017/01/02/MyShare/iGet/lixiaolai-lead-to-freedom-of-wealth/">《通往财富自由之路》</a></h3><h3 id="2-天才训练指南"><a href="#2-天才训练指南" class="headerlink" title="[2]天才训练指南"></a>[2]<a href="http://www.geekonomics10000.com/100" target="_blank" rel="external">天才训练指南</a></h3><h3 id="3-怎样练习一万小时"><a href="#3-怎样练习一万小时" class="headerlink" title="[3]怎样练习一万小时"></a>[3]<a href="http://www.geekonomics10000.com/519" target="_blank" rel="external">怎样练习一万小时</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;I can feel and see my growth everyday.&lt;br&gt;Achievement and Rhythm are very important when you insist everyday.&lt;br&gt;Accumulation is powerful. &lt;strong&gt;Big Bang&lt;/strong&gt;&lt;br&gt;Only normal and healthy way can last longer.&lt;br&gt;Only deliberate practice can makes you to an expert.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Useful Android Resources</title>
    <link href="http://ipcreator.me/2017/03/30/Program/Android/android-knowledge-base/"/>
    <id>http://ipcreator.me/2017/03/30/Program/Android/android-knowledge-base/</id>
    <published>2017-03-30T12:13:06.000Z</published>
    <updated>2017-03-30T15:14:04.922Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Useful Android Resources</p>
</blockquote>
<h2 id="Android-开发中值得看的优秀内容和工具-1"><a href="#Android-开发中值得看的优秀内容和工具-1" class="headerlink" title="Android 开发中值得看的优秀内容和工具[1]"></a>Android 开发中值得看的优秀内容和工具<sup>[1]</sup></h2><h3 id="Android-性能优化"><a href="#Android-性能优化" class="headerlink" title="Android 性能优化"></a>Android 性能优化</h3><ul>
<li><a href="https://github.com/Juude/awesome-android-performance" target="_blank" rel="external">Android性能优化视频，文档以及工具</a></li>
<li><a href="http://hukai.me/blog/archives/" target="_blank" rel="external">胡凯-性能优化</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/42238627" target="_blank" rel="external">Android最佳性能实践(1)：合理管理内存</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/42238633" target="_blank" rel="external">Android最佳性能实践(2)：分析内存的使用情况</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/42318689" target="_blank" rel="external">Android最佳性能实践(3)：高性能编码优化</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/43376527" target="_blank" rel="external">Android最佳性能实践(4)：布局优化技巧</a></li>
<li><a href="https://github.com/moduth/blockcanary" target="_blank" rel="external">blockcanary-轻松找出Android App界面卡顿元凶</a></li>
<li><a href="http://blog.csdn.net/yanzhenjie1003/article/details/52201896" target="_blank" rel="external">Android Splash页秒开 Activity白屏 Activity黑屏</a></li>
</ul>
<a id="more"></a>
<h3 id="Android插件化开发与动态加载"><a href="#Android插件化开发与动态加载" class="headerlink" title="Android插件化开发与动态加载"></a>Android插件化开发与动态加载</h3><ul>
<li><a href="https://github.com/bunnyblue/ACDD" target="_blank" rel="external">OpenAtlas，已改名为ACDD，可以在手机淘宝中见到踪影</a></li>
<li><a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">360的DroidPlugin</a></li>
<li><a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">dynamic-load-apk</a></li>
<li><a href="https://github.com/CtripMobile/DynamicAPK" target="_blank" rel="external">携程DynamicAPK</a></li>
<li><a href="http://tech.meituan.com/mt-android-auto-split-dex.html" target="_blank" rel="external">美团分包</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207151651&amp;idx=1&amp;sn=9eab282711f4eb2b4daf2fbae5a5ca9a&amp;3rd=MzA3MDU4NTYzMw==&amp;scene=6#rd" target="_blank" rel="external">微信/手Q加载方案</a></li>
<li><a href="https://github.com/wequick/Small" target="_blank" rel="external">Small</a></li>
<li><a href="http://www.androidblog.cn/index.php/Index/detail/id/16" target="_blank" rel="external">Android博客周刊专题之《插件化开发》</a></li>
<li><a href="https://github.com/asLody/TurboDex" target="_blank" rel="external">Fast load dex in memory</a></li>
<li><a href="https://github.com/limpoxe/Android-Plugin-Framework" target="_blank" rel="external">Android Plugin Framework 插件开发框架及示例程序，原理介绍等</a></li>
<li><a href="https://github.com/lizhangqu/MainDex" target="_blank" rel="external">获取主dex</a></li>
<li><a href="https://github.com/asLody/VirtualApp" target="_blank" rel="external">应用双开VirtualApp</a></li>
<li><a href="http://yydcdut.com/2016/03/20/split-dex/" target="_blank" rel="external">Android Dex分包之旅</a></li>
<li><a href="https://github.com/iReaderAndroid/ZeusPlugin" target="_blank" rel="external">掌阅-最简单易懂的Android插件补丁框架</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20515113" target="_blank" rel="external">ANROID动态加载技术 系列索引</a></li>
</ul>
<h3 id="Android-热更新"><a href="#Android-热更新" class="headerlink" title="Android 热更新"></a>Android 热更新</h3><ul>
<li><a href="https://github.com/alibaba/dexposed" target="_blank" rel="external">dexposed</a></li>
<li><a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">AndFix</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=0#wechat_redirect" target="_blank" rel="external">QQ空间热修复</a></li>
<li><a href="https://github.com/dodola/HotFix" target="_blank" rel="external">QQ空间热修复实现方案</a></li>
<li><a href="https://github.com/jasonross/Nuwa" target="_blank" rel="external">Nuwa 女娲</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIzMDEyNzM4NQ==&amp;mid=2650956297&amp;idx=1&amp;sn=f4bfdd7b16f95b6d34c6f34d8ce392e0&amp;scene=0&amp;uin=MTY4NDEwODc2Mg%3D%3D&amp;key=cf237d7ae24775e8a8b56c7ea2bb2868382d9036f67165867c202e363b23bb4e596335de9da22825b530281867b47449&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.6+build(15G31" target="_blank" rel="external">Android HotPatch从入门到“放弃”</a>&amp;version=12000006&amp;lang=zh_CN&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=95LpBT0hMvr3CsOzDCiFvaRxltvzQUdRKYWgyVX2qwUNRC1PW%2Bmf8ebbmyh6bwrH)</li>
<li><a href="http://wereadteam.github.io/2016/07/26/AndroidPatch/?from=timeline&amp;isappinstalled=0" target="_blank" rel="external">Android Patch 方案与持续交付</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286341&amp;idx=1&amp;sn=054d595af6e824cbe4edd79427fc2706&amp;scene=2&amp;srcid=0804Rg6BqGmPSPyeUOOLXds3&amp;from=timeline&amp;isappinstalled=0&amp;uin=MTY4NDEwODc2Mg%3D%3D&amp;key=cf237d7ae24775e86d7c5f57902ee2b81f05b64d1b6baf39ba9ad8115ea453e72d5d9f36a58c506d01f2a84e9b6c2eca&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.6+build(15G31" target="_blank" rel="external">Android N混合编译与对热补丁影响解析</a>&amp;version=12000006&amp;lang=zh_CN&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=95LpBT0hMvr3CsOzDCiFvaRxltvzQUdRKYWgyVX2qwUNRC1PW%2Bmf8ebbmyh6bwrH)</li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286306&amp;idx=1&amp;sn=d6b2865e033a99de60b2d4314c6e0a25&amp;scene=0&amp;uin=MTY4NDEwODc2Mg%3D%3D&amp;key=cf237d7ae24775e8857eb5c8144bf27076228deefafb6a0afd4416d54ed479daa6a67f0363c96df893d5cf4e4d3db423&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.6+build(15G31" target="_blank" rel="external">微信Android热补丁实践演进之路</a>&amp;version=12000006&amp;lang=zh_CN&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=95LpBT0hMvr3CsOzDCiFvaRxltvzQUdRKYWgyVX2qwUNRC1PW%2Bmf8ebbmyh6bwrH)</li>
<li><a href="http://blog.csdn.net/sbsujjbcy/article/details/51475499" target="_blank" rel="external">Android热更新之so库的热更新</a></li>
<li><a href="http://blog.csdn.net/sbsujjbcy/article/details/51405207" target="_blank" rel="external">Android aapt实现资源分区（补充携程aapt源码）</a></li>
<li><a href="http://blog.csdn.net/sbsujjbcy/article/details/50839263" target="_blank" rel="external">Android 热修复使用Gradle Plugin1.5改造Nuwa插件</a></li>
<li><a href="http://blog.csdn.net/sbsujjbcy/article/details/50812674" target="_blank" rel="external">Android 热修复Nuwa的原理及Gradle插件源码解析</a></li>
<li><a href="https://github.com/zzz40500/Tinker_imitator" target="_blank" rel="external">Tinker_imitator</a></li>
<li><a href="https://github.com/iReaderAndroid/PatchPluginForZeus" target="_blank" rel="external">ZeusPlugin插件框架热修复gradle插件源码</a></li>
<li><a href="https://github.com/dodola/RocooFix" target="_blank" rel="external">RocooFix</a></li>
<li><a href="http://blog.csdn.net/sbsujjbcy/article/details/51760578" target="_blank" rel="external"> Android Classloader热修复技术之百家齐放</a></li>
<li><a href="http://zjutkz.net/2016/05/10/%E4%BB%8EInstant-Run%E5%87%BA%E5%8F%91%EF%BC%8C%E8%B0%88%E8%B0%88Android%E4%B8%8A%E7%9A%84%E7%83%AD%E4%BF%AE%E5%A4%8D/" target="_blank" rel="external">从Instant-Run出发，谈谈Android上的热修复</a></li>
<li><a href="https://github.com/byteam/delta" target="_blank" rel="external">Android热修复与增量升级，基于微信Tinker原理</a></li>
<li><a href="http://tech.meituan.com/android_robust.html" target="_blank" rel="external">美团Android热更新方案Robust</a></li>
<li><a href="https://github.com/Tencent/tinker" target="_blank" rel="external">腾讯Tinker</a></li>
</ul>
<h3 id="Android-加固与反编译"><a href="#Android-加固与反编译" class="headerlink" title="Android 加固与反编译"></a>Android 加固与反编译</h3><ul>
<li><a href="https://github.com/Juude/droidReverse" target="_blank" rel="external">android反编译工具的合集</a></li>
<li><a href="http://ibotpeaches.github.io/Apktool/" target="_blank" rel="external">Apktool</a></li>
<li><a href="http://sourceforge.net/projects/dex2jar/" target="_blank" rel="external">dex2jar</a></li>
<li><a href="https://github.com/MasonLiuChn/DecompileApk" target="_blank" rel="external">DecompileApk</a></li>
<li><a href="http://www.jianshu.com/p/856bf5b437aa" target="_blank" rel="external">Android APK加固技术方案调研</a></li>
<li><a href="https://github.com/joker535/Baffle" target="_blank" rel="external">Android apk包res 资源混淆工具</a></li>
<li><a href="https://github.com/shwenzhang/AndResGuard" target="_blank" rel="external">微信资源混淆</a></li>
<li><a href="http://tech.meituan.com/mt-android-resource-obfuscation.html" target="_blank" rel="external">美团Android资源混淆保护实践</a></li>
<li><a href="https://github.com/JohnnyYin/ResProguard" target="_blank" rel="external">美团Android资源混淆实现方案</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIzNDA3MDgwNA==&amp;mid=2649229991&amp;idx=1&amp;sn=0fc62c65609143936d10849de6eb8069&amp;scene=2&amp;srcid=0629LJbsgjl7ctiSLYjRYXf5&amp;from=timeline&amp;isappinstalled=0&amp;uin=MTY4NDEwODc2Mg%3D%3D&amp;key=cf237d7ae24775e8a22350257773584f0e2dc2ae515c3e0b8779155f7a039c04e16a736510fe4d44b761a3f2b651a43b&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.6+build(15G31" target="_blank" rel="external">Apk脱壳圣战之—如何脱掉“360加固”的壳</a>&amp;version=12000006&amp;lang=zh_CN&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=95LpBT0hMvr3CsOzDCiFvaRxltvzQUdRKYWgyVX2qwUNRC1PW%2Bmf8ebbmyh6bwrH)</li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzIzNDA3MDgwNA==&amp;mid=2649229983&amp;idx=1&amp;sn=de2bd1a408d74e102ecd13a05512d1fa&amp;scene=21#wechat_redirect" target="_blank" rel="external">Android脱壳圣战之—如何脱掉”爱加密”家的保护壳</a></li>
<li><a href="https://github.com/zhonghanwen/AndroidProguardPlugin" target="_blank" rel="external">一键生成项目混淆代码插件</a></li>
<li><a href="http://blog.csdn.net/jiangwei0910410003/article/details/49336613" target="_blank" rel="external">Android逆向之旅—SO(ELF)文件格式详解</a></li>
<li><a href="http://blog.csdn.net/jiangwei0910410003/article/details/50568487" target="_blank" rel="external">Android逆向之旅—解析编译之后的AndroidManifest文件格式</a></li>
<li><a href="http://blog.csdn.net/jiangwei0910410003/article/details/50628894" target="_blank" rel="external">Android逆向之旅—解析编译之后的Resource.arsc文件格式</a></li>
<li><a href="http://blog.csdn.net/jiangwei0910410003/article/details/50668549" target="_blank" rel="external">Android逆向之旅—解析编译之后的Dex文件格式</a></li>
</ul>
<h3 id="Android-Studio专题"><a href="#Android-Studio专题" class="headerlink" title="Android Studio专题"></a>Android Studio专题</h3><ul>
<li><a href="https://github.com/rholder/gradle-view" target="_blank" rel="external">查看依赖关系的插件</a></li>
<li><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="external">IntelliJ IDEA 简体中文专题教程</a></li>
<li><a href="http://tianweishu.com/2015/12/21/android-studio-debug-tips-you-may-not-know/" target="_blank" rel="external">Android Studio 你不知道的调试技巧</a></li>
<li><a href="http://www.jayfeng.com/2015/11/07/Android%E6%89%93%E5%8C%85%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/" target="_blank" rel="external">Android打包的那些事</a></li>
<li><a href="https://github.com/keyboardsurfer/idea-live-templates" target="_blank" rel="external">idea-live-templates 模板</a></li>
<li><a href="https://github.com/KeepSafe/dexcount-gradle-plugin" target="_blank" rel="external">方法数统计插件，可用于统计是否达到65536个方法</a></li>
<li><a href="https://github.com/winterDroid/android-drawable-importer-intellij-plugin" target="_blank" rel="external">Android-Drawable-Importer插件</a></li>
<li><a href="https://github.com/zzz40500/GsonFormat" target="_blank" rel="external">GsonFormat Json对应的Bean快速生成插件</a></li>
<li><a href="https://github.com/inmite/android-selector-chapek" target="_blank" rel="external">android-selector-chapek Selector生成插件</a></li>
<li><a href="https://github.com/avast/android-butterknife-zelezny" target="_blank" rel="external">快速生成butterknife注解插件</a></li>
<li><a href="https://github.com/konifar/android-material-design-icon-generator-plugin" target="_blank" rel="external">android-material-design-icon-generator图标插件</a></li>
<li><a href="https://github.com/evant/gradle-retrolambda" target="_blank" rel="external">Retrolambda 在java 6 7中使用 lambda表达式插件</a></li>
<li><a href="https://github.com/ligi/GradleDependenciesHelperPlugin" target="_blank" rel="external">Gradle依赖自动补齐插件</a></li>
<li><a href="https://github.com/nicoulaj/idea-markdown" target="_blank" rel="external">idea-markdown编辑器插件</a></li>
<li><a href="https://github.com/Haehnchen/idea-android-studio-plugin" target="_blank" rel="external">从布局中生成View的声明插件</a></li>
<li><a href="https://www.codota.com/" target="_blank" rel="external">codota代码片段搜索，支持Chrome和Android Studio</a></li>
<li><a href="https://github.com/dmytrodanylyk/folding-plugin" target="_blank" rel="external">布局文件分组插件</a></li>
<li><a href="https://github.com/JerzyPuchalski/Android-DPI-Calculator" target="_blank" rel="external">DPI计算插件</a></li>
<li><a href="https://github.com/msdx/gradle-publish" target="_blank" rel="external">gradle-publish 发布库插件</a></li>
<li><a href="https://github.com/andforce/release-android-lib-to-jcenter" target="_blank" rel="external">发布lib到jcenter</a></li>
<li><a href="https://chrome.google.com/webstore/detail/vysor-beta/gidgenkbbabolejbgbpnhbimgjbffefm" target="_blank" rel="external">vysor 这个是Chrome的插件，电脑操作手机</a></li>
<li><a href="http://www.developerphil.com/android-studio-tips-tricks-moving-around/" target="_blank" rel="external">android-studio-tips-tricks-moving-around/</a></li>
<li><a href="http://www.developerphil.com/android-studio-tips-of-the-day-roundup-1/" target="_blank" rel="external">http://www.developerphil.com/android-studio-tips-of-the-day-roundup-1/</a></li>
<li><a href="http://www.developerphil.com/android-studio-tips-of-the-day-roundup-2/" target="_blank" rel="external">http://www.developerphil.com/android-studio-tips-of-the-day-roundup-2/</a></li>
<li><a href="http://www.developerphil.com/android-studio-tips-of-the-day-roundup-3/" target="_blank" rel="external">http://www.developerphil.com/android-studio-tips-of-the-day-roundup-3/</a></li>
<li><a href="http://www.developerphil.com/android-studio-tips-of-the-day-roundup-4/" target="_blank" rel="external">http://www.developerphil.com/android-studio-tips-of-the-day-roundup-4/</a></li>
<li><a href="http://www.developerphil.com/android-studio-tips-of-the-day-roundup-5/" target="_blank" rel="external">http://www.developerphil.com/android-studio-tips-of-the-day-roundup-5/</a></li>
<li><a href="http://www.developerphil.com/android-studio-tips-of-the-day-roundup-6/" target="_blank" rel="external">http://www.developerphil.com/android-studio-tips-of-the-day-roundup-6/</a></li>
<li><a href="http://jiajixin.cn/2015/10/11/android-studio-plugin-dev/" target="_blank" rel="external">Android Studio插件开发</a></li>
<li><a href="http://jiajixin.cn/2015/10/11/android-sdk-mirror/" target="_blank" rel="external">Android SDK镜像服务器搭建</a></li>
<li><p><a href="https://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/" target="_blank" rel="external">Android Studio 插件整理 48 个</a></p>
<h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><ul>
<li><a href="https://segmentfault.com/a/1190000004229002" target="_blank" rel="external">Gradle for Android</a></li>
<li><a href="http://google.github.io/android-gradle-dsl/current/" target="_blank" rel="external">谷歌Gradle官方文档</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIzNTA3MjQwNw==&amp;mid=2650672318&amp;idx=1&amp;sn=74fb2afc4e409be3014ea83aa623a792&amp;scene=2&amp;srcid=0814iBs3jyLcRldTGb3oqFIT&amp;from=timeline&amp;isappinstalled=0&amp;uin=MTY4NDEwODc2Mg%3D%3D&amp;key=cf237d7ae24775e8ab813a673c218977220f758d689261e1700639f2be2698a142186e9c68a3727f6e55683cee9ee94e&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.6+build(15G31" target="_blank" rel="external">Android Gradle 构建系统·初探</a>&amp;version=12000006&amp;lang=zh_CN&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=95LpBT0hMvr3CsOzDCiFvaRxltvzQUdRKYWgyVX2qwUNRC1PW%2Bmf8ebbmyh6bwrH)</li>
<li><a href="http://blog.csdn.net/sbsujjbcy/article/details/52079413" target="_blank" rel="external">Gradle系列之从init.gradle说起</a></li>
<li><a href="http://blog.csdn.net/innost/article/details/48228651" target="_blank" rel="external">深入理解Android之Gradle</a></li>
</ul>
<h3 id="Android-开发中值得看的优秀内容和工具"><a href="#Android-开发中值得看的优秀内容和工具" class="headerlink" title="Android 开发中值得看的优秀内容和工具"></a>Android 开发中值得看的优秀内容和工具</h3><ul>
<li><a href="http://androidcat.com/?step=1&amp;view=CatFragment" target="_blank" rel="external">androidcat</a></li>
<li><a href="https://github.com/mzlogin/awesome-adb" target="_blank" rel="external">ADB 用法大全</a></li>
<li><a href="http://gudong.name/2016/04/07/checkstyle.html" target="_blank" rel="external">使用 CheckStyle 检查代码</a></li>
<li><a href="http://www.jianshu.com/p/3518cf8c6e4c" target="_blank" rel="external">图解 Retrofit - ServiceMethod</a></li>
<li><a href="http://www.jianshu.com/p/aad5aacd79bf" target="_blank" rel="external">OkHttp3源码分析-综述</a></li>
<li><a href="http://dev.qq.com/topic/57ac4a0ea374c75371c08ce8" target="_blank" rel="external">Android进程保活招式大全</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzA5MDg3MjczMg==&amp;mid=2652003543&amp;idx=1&amp;sn=849c06ac198cbfe9cdcfae90b2a17021&amp;scene=1&amp;srcid=0815jxyNu3OlM7PEE8PGhNYa&amp;key=305bc10ec50ec19b21a47f33276f15cf9aee4503429d7392ce9c57f25fe26abae9fb7cffaa188ed67fd7057f3bbdd764&amp;ascene=0&amp;uin=MTM5ODYyMTY4Mg%3D%3D" target="_blank" rel="external">08/07 北京 GDG Android Meetup 活动回顾，讲义，照片</a></li>
<li><a href="https://github.com/square/javapoet" target="_blank" rel="external">Java源码生成（Square JavaWriter）</a></li>
<li><a href="https://github.com/CameloeAnthony/AndroidArchitectureCollection/blob/master/README.md" target="_blank" rel="external">安卓架构文章合集（a collection of android Architecture）</a></li>
<li><a href="http://www.eyrefree.org/2016/03/23/2016-03-23-Hexo-Coding-Pages/" target="_blank" rel="external">OS X 下使用 Hexo 和 Coding Pages 搭建静态博客</a></li>
<li><a href="http://androidxref.com" target="_blank" rel="external">Android系统源码查看，支持在线跟踪引用</a></li>
<li><a href="http://jiajixin.cn" target="_blank" rel="external">贾吉鑫</a></li>
<li><a href="http://wangxinghe.me/blog/2016-02-25/android-tools-traceview/" target="_blank" rel="external">TraceView性能优化工具使用</a></li>
<li><a href="https://github.com/facebook/network-connection-class" target="_blank" rel="external">network-connection-class</a></li>
<li><a href="https://github.com/amfe/article" target="_blank" rel="external">阿里巴巴技术文章</a></li>
<li><a href="http://www.jayfeng.com/2015/11/07/Android%E6%89%93%E5%8C%85%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/" target="_blank" rel="external">Android打包的那些事</a></li>
<li><a href="http://www.infoq.com/cn/android-weekly/" target="_blank" rel="external">InfoQAndroid周报</a></li>
<li><a href="http://www.devtf.cn/" target="_blank" rel="external">开发技术前线</a></li>
<li><a href="http://tech.meituan.com/mt-android-auto-split-dex.html" target="_blank" rel="external">美团Android DEX自动拆包及动态加载简介</a></li>
<li><a href="https://github.com/kesenhoo/android-training-course-in-chinese" target="_blank" rel="external">Android官方培训课程中文版</a></li>
<li><a href="https://github.com/bboyfeiyu/android-tech-frontier" target="_blank" rel="external">一个定期翻译国外Android优质的技术、开源库、软件架构设计、测试等文章的开源项目</a></li>
<li><a href="https://github.com/codepath/android_guides" target="_blank" rel="external">Android Guides</a></li>
<li><a href="https://github.com/android-cn/android-open-project-analysis" target="_blank" rel="external">Android 开源项目源码解析</a></li>
<li><a href="http://chiuki.github.io/android-shaders-filters" target="_blank" rel="external">Android 图像处理教学</a></li>
<li><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">Android 开源项目分类汇总</a></li>
<li><a href="https://github.com/simple-android-framework-exchange/the-fucking-traps-in-android-dev" target="_blank" rel="external">开发过程中遇到的坑</a></li>
<li><a href="https://github.com/aosp-exchange-group/share" target="_blank" rel="external">Android 开源交流</a></li>
<li><a href="https://github.com/simple-android-framework-exchange/simple-android-opensource-framework" target="_blank" rel="external">Android 著名开源库的简版实现</a></li>
<li><a href="https://github.com/android-cn/android-discuss" target="_blank" rel="external">Android 问题交流讨论，大部分是面试题</a></li>
<li><a href="https://github.com/simple-android-framework-exchange/android_design_patterns_analysis" target="_blank" rel="external">android 设计模式</a></li>
<li><a href="https://github.com/android-cn/android-jobs" target="_blank" rel="external">Android 全国职位列表</a></li>
<li><a href="https://github.com/aosp-exchange-group/fuck-2014-flirt-2015" target="_blank" rel="external">fuck-2014-flirt-2015</a></li>
<li><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">AndroidDevTools开发相关资料下载</a></li>
<li><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">android-best-practices最佳实践</a></li>
<li><a href="https://github.com/iluwatar/java-design-patterns" target="_blank" rel="external">java设计模式</a></li>
<li><a href="https://github.com/tianzhijiexian/Android-Best-Practices" target="_blank" rel="external">Android最佳实践示例</a></li>
<li><a href="http://droidyue.com/blog/2014/09/20/interaction-between-java-and-javascript-in-android/?comefrom=http://blogread.cn/news/" target="_blank" rel="external">Android 中 Java 与JavaScript 交互最详尽的总结</a></li>
<li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0824/3356.html" target="_blank" rel="external">如何为drawable着色</a></li>
<li><a href="http://www.race604.com/tint-drawable/" target="_blank" rel="external">Drawable 着色的后向兼容方案</a></li>
<li><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">Awesome-MaterialDesign</a></li>
<li><a href="https://github.com/lizhangqu/InterviewQuestion" target="_blank" rel="external">Android 面试题InterviewQuestion</a></li>
<li><a href="https://github.com/JStumpp/awesome-android" target="_blank" rel="external">awesome-android</a></li>
<li><a href="https://futurestud.io/blog/retrofit-getting-started-and-android-client/" target="_blank" rel="external">Retrofit相关文章</a></li>
<li><a href="http://litesuits.com/" target="_blank" rel="external">Lite Android</a></li>
<li><a href="http://bugly.qq.com/blog/" target="_blank" rel="external">Bugly Blog</a></li>
<li><a href="http://gold.xitu.io/#/tag/Android" target="_blank" rel="external">掘金</a></li>
</ul>
<h3 id="安卓网络层-包含图片"><a href="#安卓网络层-包含图片" class="headerlink" title="安卓网络层(包含图片)"></a>安卓网络层(包含图片)</h3><ul>
<li><a href="https://github.com/square/okhttp" target="_blank" rel="external">okhttp</a></li>
<li><a href="https://github.com/square/retrofit" target="_blank" rel="external">retrofit</a></li>
<li><a href="http://square.github.io/picasso/" target="_blank" rel="external">picasso</a></li>
<li><a href="https://android.googlesource.com/platform/frameworks/volley" target="_blank" rel="external">Volley</a></li>
<li><a href="https://github.com/facebook/fresco" target="_blank" rel="external">fresco</a></li>
<li><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">Android-Universal-Image-Loader</a></li>
<li><a href="https://github.com/stephanenicolas/robospice" target="_blank" rel="external">robospice</a></li>
<li><a href="http://loopj.com/android-async-http/" target="_blank" rel="external">android-async-http</a></li>
<li><a href="https://github.com/amitshekhariitbhu/Fast-Android-Networking" target="_blank" rel="external">Fast-Android-Networking</a></li>
</ul>
</li>
</ul>
<h3 id="安卓orm框架，用得比较多的就GreenDao，Ormlite"><a href="#安卓orm框架，用得比较多的就GreenDao，Ormlite" class="headerlink" title="安卓orm框架，用得比较多的就GreenDao，Ormlite"></a>安卓orm框架，用得比较多的就GreenDao，Ormlite</h3><ul>
<li><a href="http://greendao-orm.com/" target="_blank" rel="external">greenDAO</a></li>
<li><a href="http://ormlite.com/sqlite_java_android_orm.shtml" target="_blank" rel="external">ORMLite</a></li>
<li><a href="https://github.com/pardom/ActiveAndroid/wiki/Getting-started" target="_blank" rel="external">ActiveAndroid</a></li>
<li><a href="http://satyan.github.io/sugar/index.html" target="_blank" rel="external">SugarORM</a></li>
<li><a href="http://siminov.github.io/android-orm/" target="_blank" rel="external">Siminov</a></li>
<li><a href="http://www.androrm.net/" target="_blank" rel="external">androrm</a></li>
<li><p><a href="https://bitbucket.org/qbusict/cupboard/wiki/GettingStarted" target="_blank" rel="external">cupboard</a></p>
<h3 id="安卓Json解析"><a href="#安卓Json解析" class="headerlink" title="安卓Json解析"></a>安卓Json解析</h3></li>
<li><a href="https://github.com/google/gson" target="_blank" rel="external">Gson,用法简单，速度慢</a></li>
<li><a href="https://github.com/alibaba/fastjson" target="_blank" rel="external">fastjson，号称最快</a></li>
<li><p><a href="https://github.com/FasterXML/jackson" target="_blank" rel="external">jackson</a></p>
<h3 id="Android-单元测试"><a href="#Android-单元测试" class="headerlink" title="Android 单元测试"></a>Android 单元测试</h3></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzIwOTQ1MjAwMg==&amp;mid=2247483744&amp;idx=1&amp;sn=e322c5dc19952c563e00a24815399300&amp;scene=0#wechat_redirect" target="_blank" rel="external">使用Mockito和Roboletric进行Android单元测试</a></li>
<li><p><a href="http://robolectric.org/" target="_blank" rel="external">Robolectric</a></p>
<h3 id="Android-开源软件"><a href="#Android-开源软件" class="headerlink" title="Android 开源软件"></a>Android 开源软件</h3></li>
<li><a href="https://github.com/wangdan/AisenWeiBo" target="_blank" rel="external">一个第三方开源微博</a></li>
<li><a href="https://github.com/openproject/AndroidDigest" target="_blank" rel="external">android相关的干货(文摘，名博，github等等)</a></li>
<li><a href="https://github.com/Leaking/WeGit" target="_blank" rel="external">第三方github客户端</a></li>
<li><a href="http://git.oschina.net/oschina/" target="_blank" rel="external">开源中国的系列软件</a></li>
<li><a href="https://github.com/Jhuster/EWeightScale" target="_blank" rel="external">体重档案</a></li>
<li><a href="http://skillcollege.github.io/SimplifyReader/" target="_blank" rel="external">Simplifyreader</a></li>
<li><a href="https://github.com/lzjun567/XiYuanFangApp" target="_blank" rel="external">西源坊</a></li>
</ul>
<h3 id="Android-开发辅助工具"><a href="#Android-开发辅助工具" class="headerlink" title="Android 开发辅助工具"></a>Android 开发辅助工具</h3><ul>
<li><a href="http://gold.xitu.io/entry/56488b7660b20fc9b9c2f0be" target="_blank" rel="external">Charles 从入门到精通</a></li>
<li><a href="http://apps.evozi.com/apk-downloader/" target="_blank" rel="external">Google Play APK下载器</a></li>
<li><a href="http://www.slideshare.net/" target="_blank" rel="external">slideshare</a></li>
<li><a href="https://www.codota.com/" target="_blank" rel="external">codota代码片段搜索，支持Chrome和Android Studio</a></li>
<li><a href="https://chrome.google.com/webstore/detail/vysor-beta/gidgenkbbabolejbgbpnhbimgjbffefm" target="_blank" rel="external">vysor 这个是Chrome的插件，电脑操作手机</a></li>
<li><a href="https://github.com/buunguyen/octotree" target="_blank" rel="external">Browser extension to display GitHub code in tree format</a></li>
<li><a href="http://laod.cn/hosts/2015-google-hosts.html" target="_blank" rel="external">google hosts翻墙，有vpn的忽略</a></li>
<li><a href="http://tool.oschina.net/" target="_blank" rel="external">开源中国在线工具</a></li>
<li><a href="http://apistore.baidu.com/" target="_blank" rel="external">百度ApiStore</a></li>
<li><a href="https://github.com/vim-scripts/Auto-Pairs" target="_blank" rel="external">Vim插件</a></li>
<li><a href="https://github.com/macdao/ocds-guide-to-setting-up-mac" target="_blank" rel="external">强迫症的 Mac 设置指南</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial" target="_blank" rel="external">Linux-Tutorial</a></li>
<li><a href="https://github.com/judasn/Markdown-Syntax-CN" target="_blank" rel="external">Markdown-Syntax-CN</a></li>
</ul>
<h3 id="Android-推送（含IM）"><a href="#Android-推送（含IM）" class="headerlink" title="Android 推送（含IM）"></a>Android 推送（含IM）</h3><ul>
<li><a href="http://www.easemob.com/" target="_blank" rel="external">环信，支持即时音视频</a></li>
<li><a href="http://www.qcloud.com/product/avc.html" target="_blank" rel="external">腾讯云通讯，支持即时音视频</a></li>
<li><a href="https://www.jpush.cn/" target="_blank" rel="external">极光推送和IM</a></li>
<li><a href="http://www.getui.com/" target="_blank" rel="external">个推</a></li>
<li><a href="http://dev.xiaomi.com/doc/?page_id=1670" target="_blank" rel="external">小米推送，在MIUI上属于系统服务框架，共享系统级长连接</a></li>
<li><a href="http://push.baidu.com/" target="_blank" rel="external">百度云推送,部分机型收不到推送，如小米，Bug是否修复未知</a></li>
<li><a href="http://xg.qq.com/xg/" target="_blank" rel="external">腾讯信鸽推送</a></li>
<li><a href="https://www.umeng.com/push" target="_blank" rel="external">友盟推送</a></li>
<li><a href="https://leancloud.cn/" target="_blank" rel="external">leancloud</a></li>
<li><a href="http://www.bmob.cn/products" target="_blank" rel="external">bmob云推送，含IM</a></li>
<li><a href="https://github.com/mogujie/TeamTalk" target="_blank" rel="external">蘑菇街TeamTalk</a></li>
<li><a href="http://www.igniterealtime.org/downloads/index.jsp" target="_blank" rel="external">Openfire+Smack开源Xmpp解决方案</a></li>
</ul>
<h3 id="Android后端等服务"><a href="#Android后端等服务" class="headerlink" title="Android后端等服务"></a>Android后端等服务</h3><ul>
<li><a href="https://parse.com/" target="_blank" rel="external">parse，缺点是服务器在国外，速度慢</a></li>
<li><a href="https://leancloud.cn/" target="_blank" rel="external">leancloud，国内的，仿parse</a></li>
<li><a href="http://www.bmob.cn/" target="_blank" rel="external">Bmob后端云</a></li>
<li><a href="http://www.qiniu.com/" target="_blank" rel="external">七牛云存储</a></li>
<li><p><a href="http://www.apicloud.com/" target="_blank" rel="external">apicloud</a></p>
<h3 id="Android-应用内测平台"><a href="#Android-应用内测平台" class="headerlink" title="Android 应用内测平台"></a>Android 应用内测平台</h3></li>
<li><a href="http://www.pgyer.com/" target="_blank" rel="external">蒲公英，内测应用</a></li>
<li><p><a href="http://fir.im/" target="_blank" rel="external">Fir.im，内测应用</a></p>
<h3 id="Android社会化分享，短信验证，意见反馈，支付等相关"><a href="#Android社会化分享，短信验证，意见反馈，支付等相关" class="headerlink" title="Android社会化分享，短信验证，意见反馈，支付等相关"></a>Android社会化分享，短信验证，意见反馈，支付等相关</h3></li>
<li><p><a href="http://www.umeng.com/" target="_blank" rel="external">友盟,社会化分析，意见反馈</a></p>
</li>
<li><a href="http://mob.com/" target="_blank" rel="external">Sharesdk，社会化分析</a></li>
<li><a href="https://pingxx.com" target="_blank" rel="external">Ping++，支付</a></li>
<li><a href="http://docs.bmob.cn/androidpay/index.html?menukey=fast_start&amp;key=start_android_pay" target="_blank" rel="external">bmob支付，Bmob为广大开发人员提供的统一、正规的收费手段，让没有企业认证的个人开发者，也能通过支付宝和微信向用户收费</a></li>
<li><a href="http://www.yuntongxun.com/ability/toPriceTariff" target="_blank" rel="external">容联云通讯</a></li>
</ul>
<h3 id="安卓开发值得关注的库"><a href="#安卓开发值得关注的库" class="headerlink" title="安卓开发值得关注的库"></a>安卓开发值得关注的库</h3><ul>
<li><a href="https://github.com/JZ-Darkal/AndroidHttpCapture" target="_blank" rel="external">AndroidHttpCapture 手机上抓包</a></li>
<li><a href="https://projectlombok.org/" target="_blank" rel="external">方法自动生成</a></li>
<li><a href="https://github.com/xiaopansky/SpiderWebScoreView" target="_blank" rel="external">Android上的一个蛛网评分控件</a></li>
<li><a href="https://github.com/KeepSafe/ReLinker" target="_blank" rel="external">ReLinker 安全加载so库的方式</a></li>
<li><a href="https://github.com/mthli/SugarTask" target="_blank" rel="external">SugarTask</a></li>
<li><a href="https://github.com/taoliuh/v2ex" target="_blank" rel="external">sync adapter</a></li>
<li><a href="https://github.com/badoo/android-weak-handler" target="_blank" rel="external">Android Weak Handler防止内存泄露</a></li>
<li><a href="https://github.com/path/android-priority-jobqueue" target="_blank" rel="external">Android Priority Job Queue 异步任务调度</a></li>
<li><a href="https://github.com/yigit/android-priority-jobqueue" target="_blank" rel="external">android-priority-jobqueue</a></li>
<li><a href="https://github.com/H07000223/FlycoDialog_Master" target="_blank" rel="external">Android对话框</a></li>
<li><a href="https://github.com/tianzhijiexian/ExRecyclerView/" target="_blank" rel="external">扩展的RecyclerView，拥有添加头、底等多种操作</a></li>
<li><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">MaterialDesign相关库</a></li>
<li><a href="https://github.com/ikew0ng/SwipeBackLayout" target="_blank" rel="external">右滑返回SwipeBackLayout</a></li>
<li><a href="https://github.com/JulienGenoud/android-percent-support-lib-sample" target="_blank" rel="external">百分比布局</a></li>
<li><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a></li>
<li><a href="https://github.com/ksoichiro/Android-ObservableScrollView/" target="_blank" rel="external">ObservableScrollView</a></li>
<li><a href="https://github.com/openproject/LessCode" target="_blank" rel="external">工具库less code, more efficient for android</a></li>
<li><a href="https://github.com/JoanZapata/base-adapter-helper" target="_blank" rel="external">通用适配器</a></li>
<li><a href="https://github.com/SnowdreamFramework/android-log" target="_blank" rel="external">android-log</a></li>
<li><a href="http://nineoldandroids.com/" target="_blank" rel="external">NineOldAndroids</a></li>
<li><a href="https://github.com/jgilfelt/android-viewbadger" target="_blank" rel="external">BadgeView </a></li>
<li><a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="external">CircleImageView</a></li>
<li><a href="https://github.com/MostafaGazar/CustomShapeImageView" target="_blank" rel="external">CustomShapeImageView</a></li>
<li><a href="https://github.com/pedant/sweet-alert-dialog" target="_blank" rel="external">SweetAlert for Android, a beautiful and clever alert dialog</a></li>
<li><a href="https://github.com/johannilsson/android-pulltorefresh" target="_blank" rel="external">android-pulltorefresh</a></li>
<li><a href="https://github.com/jfeinstein10/SlidingMenu" target="_blank" rel="external">SlidingMenu</a></li>
<li><a href="https://github.com/JakeWharton/ViewPagerIndicator" target="_blank" rel="external">ViewPagerIndicator</a></li>
<li><a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="external">一个动画集合库</a></li>
<li><a href="https://github.com/JoanZapata/android-iconify" target="_blank" rel="external">FontAwesome for Android</a></li>
<li><a href="https://github.com/lucasr/twoway-view" target="_blank" rel="external">RecyclerView made simple</a></li>
<li><a href="http://jsoup.org/" target="_blank" rel="external">jsoup库(java)</a></li>
<li><a href="https://github.com/maarek/android-wheel" target="_blank" rel="external">android-wheel</a></li>
<li><a href="https://github.com/wyouflf/xUtils" target="_blank" rel="external">xUtils</a></li>
<li><a href="https://github.com/Trinea/android-common" target="_blank" rel="external">android-common</a></li>
<li><a href="https://github.com/zxing/zxing" target="_blank" rel="external">zxing</a></li>
<li><a href="https://github.com/wangjiegulu/AndroidBucket" target="_blank" rel="external">Android开发常用整理</a></li>
<li><a href="https://github.com/ZhaoKaiQiang/ParticleLayout" target="_blank" rel="external">左滑粒子删除效果</a></li>
<li><a href="https://github.com/typicode/json-server" target="_blank" rel="external">JSON Server：零编码快速“伪造” REST API</a></li>
<li><a href="https://github.com/owncloud/" target="_blank" rel="external">owncloud</a></li>
<li><a href="https://github.com/Freelander/Android_Data" target="_blank" rel="external">Android_Data (Android 学习资料收集)</a></li>
</ul>
<h3 id="安卓资源相关"><a href="#安卓资源相关" class="headerlink" title="安卓资源相关"></a>安卓资源相关</h3><ul>
<li><a href="http://androiddrawables.com/" target="_blank" rel="external">安卓每个版本的Drawable图标</a></li>
<li><a href="https://github.com/liltof/font-awsome-for-android" target="_blank" rel="external">FontAwesome字体图标安卓字符串</a></li>
<li><a href="http://www.google.com/design/spec/style/color.html" target="_blank" rel="external">色系</a></li>
<li><a href="https://github.com/MatthewYork/Colours" target="_blank" rel="external">颜色库</a></li>
<li><a href="https://www.iconfinder.com/" target="_blank" rel="external">IconFinder图标资源</a></li>
<li><a href="http://www.iconfont.cn/" target="_blank" rel="external">阿里巴巴矢量图</a></li>
<li><a href="https://icomoon.io/app/#/select" target="_blank" rel="external">icomoon</a></li>
<li><a href="http://romannurik.github.io/AndroidAssetStudio/" target="_blank" rel="external">AndroidAssetStudio</a></li>
<li><a href="http://android-holo-colors.com/" target="_blank" rel="external">Android Holo颜色生成器</a></li>
<li><a href="http://jgilfelt.github.io/android-actionbarstylegenerator/" target="_blank" rel="external">Android Action Bar Style Generator</a></li>
<li><a href="http://romannurik.github.io/AndroidAssetStudio/nine-patches.html" target="_blank" rel="external">在线.9.png图片生成器</a></li>
<li><a href="http://angrytools.com/android/button/" target="_blank" rel="external">安卓button在线制作工具</a></li>
<li><a href="http://omapzoom.org/?p=platform/frameworks/base.git;a=blob;f=core/res/res/values/themes.xml;hb=master" target="_blank" rel="external">Theme.xml属性</a></li>
<li><p><a href="https://www.parse.com/" target="_blank" rel="external">移动APP云计算平台Parse</a></p>
<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a></li>
<li><a href="http://segmentfault.com/a/1190000003836345?utm_source=Weibo&amp;utm_medium=shareLink&amp;utm_campaign=socialShare" target="_blank" rel="external">用 Git Hooks 进行自动部署</a></li>
<li><a href="http://blog.jobbole.com/76861/" target="_blank" rel="external">Git工作流指南：Forking工作流</a></li>
</ul>
<h3 id="Android-NoSql"><a href="#Android-NoSql" class="headerlink" title="Android NoSql"></a>Android NoSql</h3><ul>
<li><a href="https://github.com/realm/realm-java" target="_blank" rel="external">realm-java</a></li>
<li><a href="https://github.com/couchbase/couchbase-lite-android" target="_blank" rel="external">couchbase-lite-android</a></li>
<li><a href="https://github.com/Jearil/SimpleNoSQL" target="_blank" rel="external">SimpleNoSQL</a></li>
<li><p><a href="https://github.com/nhachicha/SnappyDB/" target="_blank" rel="external">SnappyDB</a></p>
<h3 id="设计网站，可以寻找一些酷炫的设计稿"><a href="#设计网站，可以寻找一些酷炫的设计稿" class="headerlink" title="设计网站，可以寻找一些酷炫的设计稿"></a>设计网站，可以寻找一些酷炫的设计稿</h3></li>
<li><p><a href="https://dribbble.com/" target="_blank" rel="external">https://dribbble.com/</a></p>
</li>
<li><a href="http://pttrns.com/" target="_blank" rel="external">http://pttrns.com/</a></li>
<li><p><a href="http://capptivate.co/" target="_blank" rel="external">http://capptivate.co/</a></p>
<h3 id="国外个人博客"><a href="#国外个人博客" class="headerlink" title="国外个人博客"></a>国外个人博客</h3></li>
<li><a href="http://jakewharton.com/blog" target="_blank" rel="external">Jakewharton</a></li>
<li><a href="http://www.curious-creature.com/" target="_blank" rel="external">Romain Guy</a></li>
<li><a href="http://cyrilmottier.com/" target="_blank" rel="external">Cyril Mottier</a></li>
<li><a href="http://blog.stylingandroid.com/" target="_blank" rel="external">Mark Allison</a></li>
<li><a href="http://blog.danlew.net/" target="_blank" rel="external">Daniel Lew</a></li>
<li><a href="http://www.androidhive.info/" target="_blank" rel="external">Ravi Tamada</a></li>
<li><a href="http://loseyourmarbles.co/about-me/" target="_blank" rel="external">Chris Nash</a></li>
<li><a href="http://www.androiduipatterns.com/" target="_blank" rel="external">juhani@fatrobot.io</a></li>
<li><a href="http://www.grokkingandroid.com/" target="_blank" rel="external">Wolfram Rittmeyer</a></li>
<li><a href="http://geekyouup.blogspot.com/" target="_blank" rel="external">Rich Hyndman</a></li>
</ul>
<h3 id="国外的一些优秀网站"><a href="#国外的一些优秀网站" class="headerlink" title="国外的一些优秀网站"></a>国外的一些优秀网站</h3><ul>
<li><a href="http://androidweekly.net/" target="_blank" rel="external">androidweekly.net</a></li>
<li><a href="http://android-developers.blogspot.ca/" target="_blank" rel="external">Android Developers Blog</a></li>
<li><a href="http://www.vogella.com/tutorials/android.html" target="_blank" rel="external">vogella</a></li>
<li><a href="http://www.tutorialspoint.com/android/" target="_blank" rel="external">tutorialspoint</a></li>
<li><a href="http://code.tutsplus.com/categories/android-sdk" target="_blank" rel="external">tutsplus</a></li>
<li><a href="http://www.coderzheaven.com/android-tutorials/" target="_blank" rel="external">oderzheaven</a></li>
<li><a href="https://thenewcircle.com/training/android/" target="_blank" rel="external">thenewcircle</a></li>
<li><a href="http://www.coreservlets.com/android-tutorial/" target="_blank" rel="external">coreservlets</a></li>
<li><a href="http://droid-blog.net/" target="_blank" rel="external">Droid-Blog</a></li>
<li><a href="https://www.coursera.org/" target="_blank" rel="external">coursera.org</a></li>
<li><a href="http://commonsware.com/blog/archive.html" target="_blank" rel="external">commonsware.com</a></li>
<li><a href="http://android.amberfog.com/" target="_blank" rel="external">http://android.amberfog.com/</a></li>
<li><a href="http://www.anddev.org/" target="_blank" rel="external">anddev</a></li>
</ul>
<h2 id="Android-Knowledge-Base-2"><a href="#Android-Knowledge-Base-2" class="headerlink" title="Android-Knowledge-Base[2]"></a>Android-Knowledge-Base<sup>[2]<sup></sup></sup></h2><h3 id="android不同版本适配"><a href="#android不同版本适配" class="headerlink" title="android不同版本适配"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E9%80%82%E9%85%8D.md" target="_blank" rel="external">android不同版本适配</a></strong></h3><h3 id="android布局适配"><a href="#android布局适配" class="headerlink" title="android布局适配"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%E5%B8%83%E5%B1%80%E9%80%82%E9%85%8D.md" target="_blank" rel="external">android布局适配</a></strong></h3><h3 id="android单元测试"><a href="#android单元测试" class="headerlink" title="android单元测试"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.md" target="_blank" rel="external">android单元测试</a></strong></h3><h3 id="android混淆打包发布"><a href="#android混淆打包发布" class="headerlink" title="android混淆打包发布"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%E6%B7%B7%E6%B7%86%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83.md" target="_blank" rel="external">android混淆打包发布</a></strong></h3><h3 id="Android-Matrix"><a href="#Android-Matrix" class="headerlink" title="Android Matrix"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/Android%20Matrix.md" target="_blank" rel="external">Android Matrix</a></strong></h3><h3 id="Android-studio-配置详细介绍"><a href="#Android-studio-配置详细介绍" class="headerlink" title="Android studio 配置详细介绍"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%20studio.md" target="_blank" rel="external">Android studio 配置详细介绍</a></strong></h3><h3 id="Android-项目重构"><a href="#Android-项目重构" class="headerlink" title="Android 项目重构"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%E9%A1%B9%E7%9B%AE%E9%87%8D%E6%9E%84.md" target="_blank" rel="external">Android 项目重构</a></strong></h3><h3 id="Android-内存分析"><a href="#Android-内存分析" class="headerlink" title="Android 内存分析"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%20%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90.md" target="_blank" rel="external">Android 内存分析</a></strong></h3><h3 id="Android-进程保活"><a href="#Android-进程保活" class="headerlink" title="Android 进程保活"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/android%E8%BF%9B%E7%A8%8B%E4%BF%9D%E6%B4%BB.md" target="_blank" rel="external">Android 进程保活</a></strong></h3><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="external">设计模式</a></strong></h3><h3 id="java-相关知识"><a href="#java-相关知识" class="headerlink" title="java 相关知识"></a><strong><a href="https://github.com/zhaozepeng/Android-Knowledge-Base/blob/master/java%20%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86.md" target="_blank" rel="external">java 相关知识</a></strong></h3><h2 id="最全面的-Material-Design-学习资料-3"><a href="#最全面的-Material-Design-学习资料-3" class="headerlink" title="最全面的 Material Design 学习资料[3]"></a>最全面的 Material Design 学习资料<sup>[3]</sup></h2><h2 id="Material-Design-使用教程"><a href="#Material-Design-使用教程" class="headerlink" title="Material Design 使用教程"></a>Material Design 使用教程</h2><ul>
<li><a href="https://material.google.com/" target="_blank" rel="external">Material Design 官网</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="external">Material Design 中文版(极客学院)</a></li>
<li><a href="https://github.com/zdhxiong/Material-Design-Chinese" target="_blank" rel="external">Material Design 最新中文版</a></li>
<li><a href="https://developer.android.com/training/material/index.html" target="_blank" rel="external">Android 5.0 文档</a></li>
<li><a href="https://bboyfeiyu.gitbooks.io/android-tech-frontier/content/issue-8/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0Material%20Design.html" target="_blank" rel="external">开始学习 Materila Design</a></li>
<li><a href="http://blog.csdn.net/growth58/article/details/47972467" target="_blank" rel="external">Android Design Support Library 概览</a> 一系列教程对 Material Design 的常用控件都做了很详细的讲解</li>
<li><a href="http://www.jianshu.com/p/107a2529a56f" target="_blank" rel="external">Android Material Design 简单使用</a></li>
<li><a href="http://www.jianshu.com/p/40efd44802ef" target="_blank" rel="external">Material Design Library 使用汇总</a></li>
<li><a href="http://www.jianshu.com/p/1078568e859f" target="_blank" rel="external">Android Design Support Library 的 代码实验</a></li>
<li><a href="http://www.jianshu.com/p/378ea4ee5a54" target="_blank" rel="external">Material Design 资料收集</a> 这个不得不推荐，向前辈致敬</li>
<li><a href="http://blog.csdn.net/qibin0506/article/details/49069089" target="_blank" rel="external">Android Material Design 动画</a></li>
<li><a href="http://blog.csdn.net/a396901990/article/details/40187203" target="_blank" rel="external">Material Design 详解（动画篇)</a></li>
</ul>
<h2 id="Awesome-系列"><a href="#Awesome-系列" class="headerlink" title="Awesome 系列"></a>Awesome 系列</h2><ul>
<li><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">Awesome-MaterialDesign</a></li>
<li><a href="https://github.com/sachin1092/awesome-material" target="_blank" rel="external">awesome-material</a></li>
<li><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome-android-ui</a></li>
</ul>
<h2 id="开源库"><a href="#开源库" class="headerlink" title="开源库"></a>开源库</h2><ul>
<li><a href="https://github.com/soyoungboy/android-material-design-Open-source-projects" target="_blank" rel="external">android-material-design-Open-source-projects</a> Material Design 开源库集合</li>
<li><a href="https://github.com/navasmdc/MaterialDesignLibrary" target="_blank" rel="external">MaterialDesignLibrary</a> Material Design 风格的各种控件</li>
<li><a href="https://github.com/rey5137/material" target="_blank" rel="external">Material</a> 同上面那个库差不多，也是各种控件</li>
<li><a href="https://github.com/DenisMondon/material-design-library" target="_blank" rel="external">Material Design Library</a> 第三方的 Material Design</li>
<li><a href="https://github.com/florent37/MaterialViewPager" target="_blank" rel="external">MaterialViewPager</a> Material Design 风格的 ViewPager</li>
<li><a href="https://github.com/prolificinteractive/material-calendarview" target="_blank" rel="external">material-calendarview</a> Material Design 风格的日历</li>
<li><a href="https://github.com/jpardogo/PagerSlidingTabStrip" target="_blank" rel="external">PagerSlidingTabStrip</a> Material Design 风格的 TabLayout</li>
<li><a href="https://github.com/rengwuxian/MaterialEditText" target="_blank" rel="external">MaterialEditText</a> Material Design 风格的输入框</li>
<li><a href="https://github.com/MiguelCatalan/MaterialSearchView" target="_blank" rel="external">MaterialSearchView</a> Material Design 风格的搜索框</li>
<li><a href="https://github.com/lsjwzh/MaterialLoadingProgressBar" target="_blank" rel="external">MaterialLoadingProgressBar</a> Material Design 风格的进度指示器</li>
<li><a href="https://github.com/oli107/material-range-bar" target="_blank" rel="external">material-range-bar</a> Material Design 风格的 RangeBar</li>
<li><a href="https://github.com/afollestad/material-camera" target="_blank" rel="external">material-camera</a> Material Design 风格的 Camera</li>
<li><a href="https://github.com/lgvalle/Material-Animations" target="_blank" rel="external">Material-Animations</a> Material Design 动画效果</li>
<li><a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="external">material-dialogs</a> MD 风格的弹框</li>
<li><a href="https://github.com/balysv/material-ripple" target="_blank" rel="external">material-ripple</a> 支持 api 14 以上的水波纹效果</li>
<li><a href="https://github.com/deano2390/MaterialShowcaseView" target="_blank" rel="external">MaterialShowcaseView</a> MD 风格的透明指示层</li>
<li><a href="https://github.com/iammert/MaterialIntroView" target="_blank" rel="external">MaterialIntroView</a> 类似 <a href="http://www.thefabulous.co/" target="_blank" rel="external">Fabulous App</a> MD 风格的功能引导库</li>
<li><a href="https://github.com/material-components/material-components-android" target="_blank" rel="external">material-components-android</a> MD 风格的组件集合</li>
</ul>
<h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><ul>
<li><a href="http://weibo.com/ttarticle/p/show?id=2309404021772117763644" target="_blank" rel="external">十款 Material Design 风格的 Android 开源项目</a></li>
<li><a href="https://github.com/googlesamples/android-UniversalMusicPlayer#universal-android-music-player-sample" target="_blank" rel="external">Universal Android Music Player</a> 谷歌的一款 Material Design 风格的音乐播放器播放器，非常的漂亮</li>
<li><a href="https://github.com/nickbutcher/plaid" target="_blank" rel="external">plaid</a> 非常给力的一个项目，有着很酷炫的动画效果</li>
<li><a href="https://github.com/saulmm/Material-Movies" target="_blank" rel="external">Material-Movies</a> Material Design 风格的视频播放器</li>
<li><a href="https://github.com/chentao0707/SimplifyReader" target="_blank" rel="external">Simplifyreader</a></li>
<li><a href="https://github.com/xcc3641/" target="_blank" rel="external">SeeWeather</a></li>
<li><a href="https://github.com/Qixingchen/MD-BiliBili" target="_blank" rel="external">MD-BiliBili</a> 基于 Material Design 的 BiliBili 第三方 Android 客户端</li>
<li><a href="https://github.com/drakeet/meizhi" target="_blank" rel="external">meizhi</a> 妹纸，满满的福利</li>
<li><a href="https://github.com/Freelander/Elephant" target="_blank" rel="external">Elephant</a> PHPHub 第三方客户端</li>
<li><a href="https://github.com/chenyangcun/MaterialDesignExample" target="_blank" rel="external">MaterialDesignExample</a> 最早出现的 Material Design 风格的app之一，用来演示 Material Design 控件的使用</li>
<li><a href="https://github.com/hymanme/MaterialHome" target="_blank" rel="external">MaterialHome</a> 一款图书展示类 app</li>
<li><a href="https://github.com/hefuyicoder/ListenerMusicPlayer" target="_blank" rel="external">ListenerMusicPlayer</a> 一款优雅的遵循 Material Design 的开源音乐播放器</li>
<li><a href="https://github.com/frogermcs/InstaMaterial" target="_blank" rel="external">InstaMaterial</a> Material Design 设计风格的 Instagram</li>
<li><a href="https://github.com/harjot-oberai/MusicDNA" target="_blank" rel="external">MusicDNA</a> 这款播放器真是炫瞎眼了</li>
</ul>
<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><ul>
<li><a href="http://www.jikexueyuan.com/course/124.html?Hmsr=p_w" target="_blank" rel="external">谷歌 Material Design 设计语言详解</a> 极客学院的 Material Design 视频教程</li>
<li><a href="http://www.imooc.com/learn/215" target="_blank" rel="external">Android 5.0新特性-Material Design</a> 慕课网上的视频教程</li>
<li><a href="https://www.youtube.com/watch?v=fuSx8J6xLho&amp;list=PLshdtb5UWjSoLy2LPP1FsHi1hwoAS4SBi" target="_blank" rel="external">Android Material Design Tutorial</a> YouTobe 上的视频教程</li>
</ul>
<h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><ul>
<li><a href="https://www.materialui.co/icons" target="_blank" rel="external">Material UI Icons</a></li>
<li><a href="https://material.io/icons/" target="_blank" rel="external">Material icons</a></li>
<li><a href="https://github.com/google/material-design-icons" target="_blank" rel="external">material-design-icons</a></li>
<li><a href="http://jaqen.me/mdpub/" target="_blank" rel="external">Android Material 材料风格图标LOGO生成器</a></li>
<li><a href="https://github.com/LPZilva/Google-Material-Icons-for-Sketch" target="_blank" rel="external">Google-Material-Icons-for-Sketch</a></li>
</ul>
<h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><ul>
<li><a href="https://www.materialpalette.com/" target="_blank" rel="external">material palette</a> Material Design 调色板</li>
<li><a href="https://material.uplabs.com/" target="_blank" rel="external">MaterialUp</a> 如果你不知道怎样设计一款漂亮的 Material Design 风格的 APP，那你可以参考它，上面有很多漂亮的模板</li>
<li><a href="http://next.36kr.com/posts/collections/200" target="_blank" rel="external">优秀的 Material Design 产品</a> 收集的都是 Material Desing 风格的应用</li>
</ul>
<h2 id="知乎讨论"><a href="#知乎讨论" class="headerlink" title="知乎讨论"></a>知乎讨论</h2><ul>
<li><a href="https://www.zhihu.com/question/24276657" target="_blank" rel="external">如何理解 Google 的 Material Design 设计语言?</a></li>
<li><a href="https://www.zhihu.com/question/37376355" target="_blank" rel="external">哪些因素阻碍国内 BAT 的移动应用采用 Material Design?</a></li>
<li><a href="https://www.zhihu.com/question/36992060" target="_blank" rel="external">Material Design 设计规范是否不太适合像淘宝这样大而全的厚重的应用程序？</a></li>
<li><a href="https://www.zhihu.com/question/24431206" target="_blank" rel="external">Material Design 有什么缺点？</a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/lizhangqu/CoreLink" target="_blank" rel="external">Android 开发中的日常积累</a><br>[2]<a href="https://github.com/zhaozepeng/Android-Knowledge-Base" target="_blank" rel="external">Android-Knowledge-Base</a><br>[3]<a href="https://github.com/Luosunce/material-design-data" target="_blank" rel="external">最全面的 Material Design 学习资料</a><br>[4]<a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">Curated list of awesome lists</a><br>[5]<a href="https://github.com/vhf/free-programming-books" target="_blank" rel="external">Freely available programming books</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Useful Android Resources&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Android-开发中值得看的优秀内容和工具-1&quot;&gt;&lt;a href=&quot;#Android-开发中值得看的优秀内容和工具-1&quot; class=&quot;headerlink&quot; title=&quot;Android 开发中值得看的优秀内容和工具[1]&quot;&gt;&lt;/a&gt;Android 开发中值得看的优秀内容和工具&lt;sup&gt;[1]&lt;/sup&gt;&lt;/h2&gt;&lt;h3 id=&quot;Android-性能优化&quot;&gt;&lt;a href=&quot;#Android-性能优化&quot; class=&quot;headerlink&quot; title=&quot;Android 性能优化&quot;&gt;&lt;/a&gt;Android 性能优化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Juude/awesome-android-performance&quot;&gt;Android性能优化视频，文档以及工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hukai.me/blog/archives/&quot;&gt;胡凯-性能优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/42238627&quot;&gt;Android最佳性能实践(1)：合理管理内存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/42238633&quot;&gt;Android最佳性能实践(2)：分析内存的使用情况&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/42318689&quot;&gt;Android最佳性能实践(3)：高性能编码优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/43376527&quot;&gt;Android最佳性能实践(4)：布局优化技巧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/moduth/blockcanary&quot;&gt;blockcanary-轻松找出Android App界面卡顿元凶&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/yanzhenjie1003/article/details/52201896&quot;&gt;Android Splash页秒开 Activity白屏 Activity黑屏&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Resource" scheme="http://ipcreator.me/tags/Resource/"/>
    
  </entry>
  
  <entry>
    <title>Leak Canary——A memory leak detection library for Android and Java</title>
    <link href="http://ipcreator.me/2017/03/29/Program/Android/3rdLib/leak-canary/"/>
    <id>http://ipcreator.me/2017/03/29/Program/Android/3rdLib/leak-canary/</id>
    <published>2017-03-29T09:47:06.000Z</published>
    <updated>2017-03-29T10:59:51.627Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/square/leakcanary/raw/master/assets/screenshot.png" alt=""></p>
<p>A memory leak detection library for Android and Java.</p>
<p>“A small leak will sink a great ship.” - Benjamin Franklin</p>
<a id="more"></a>
<h1 id="LeakCanary"><a href="#LeakCanary" class="headerlink" title="LeakCanary"></a>LeakCanary</h1><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>In your <code>build.gradle</code>:</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">  debugCompile <span class="string">'com.squareup.leakcanary:leakcanary-android:1.5'</span></div><div class="line">  releaseCompile <span class="string">'com.squareup.leakcanary:leakcanary-android-no-op:1.5'</span></div><div class="line">  testCompile <span class="string">'com.squareup.leakcanary:leakcanary-android-no-op:1.5'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In your <code>Application</code> class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    <span class="keyword">if</span> (LeakCanary.isInAnalyzerProcess(<span class="keyword">this</span>)) &#123;</div><div class="line">      <span class="comment">// This process is dedicated to LeakCanary for heap analysis.</span></div><div class="line">      <span class="comment">// You should not init your app in this process.</span></div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    LeakCanary.install(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">// Normal app init code...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>You’re good to go!</strong> LeakCanary will automatically show a notification when an activity memory leak is detected in your debug build.</p>
<p>Questions? Check out <a href="https://github.com/square/leakcanary/wiki/FAQ" target="_blank" rel="external">the FAQ</a>!</p>
<p><img src="https://github.com/square/leakcanary/raw/master/assets/icon_512.png" alt="icon_512.png"></p>
<h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理[2]"></a>原理<sup>[2]<sup></sup></sup></h2><p>LeakCanary通过square自家的HAHA来自动化分析Android heap dumps，内部基于MAT, vshor/mat，AndroMAT来做Java和Android特定的heap分析，亮点则是其将需要人工分析的事情做到了完全自动化，并给出能帮助快速定位修复内存泄露的信息。</p>
<p>在Application中使用LeakCanary.install(this)后，LeakCanary就会自动install一个ActivityRefWatcher来自动化检测activity是否在onDestroy后有泄露。具体步骤大致是</p>
<ol>
<li>自动把activity加入到KeyedWeakReference</li>
<li>在background线程中，检查onDestroy后reference是否被清除，且没有触发gc</li>
<li>如果reference没有被清除，则dump heap到一个hprof文件并保存到app文件系统中</li>
<li>在一个单独进程中启动HeapAnalyzerService，HeapAnalyzer使用HAHA来分析heap dump。</li>
<li>HeapAnalyzer在heap dump中根据reference key找到KeyedWeakReference。</li>
<li>HeapAnalyzer计算出到GC Roots的最短强引用路径来判断是否存在泄露，然后build出造成这个泄露的引用链。</li>
<li>结果被传回来app进程的DisplayLeakService，并展示一个泄露的notification。</li>
<li>square称从用了LeakCanary后，发现并修复了很多他们app中的内存泄露，而且找到了一些Android SDK中的泄露，最终减少了94%因为OOM错误导致的crash。</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/square/leakcanary" target="_blank" rel="external">LeakCanary</a><br>[2]<a href="http://blog.zhaiyifan.cn/2015/05/21/import-leakcanary/" target="_blank" rel="external">接入LeakCanary检测内存泄露</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/square/leakcanary/raw/master/assets/screenshot.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;A memory leak detection library for Android and Java.&lt;/p&gt;
&lt;p&gt;“A small leak will sink a great ship.” - Benjamin Franklin&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
      <category term="Leak Canary" scheme="http://ipcreator.me/tags/Leak-Canary/"/>
    
  </entry>
  
  <entry>
    <title>Block Canary——Android Performance Monitor</title>
    <link href="http://ipcreator.me/2017/03/29/Program/Android/3rdLib/block-canary/"/>
    <id>http://ipcreator.me/2017/03/29/Program/Android/3rdLib/block-canary/</id>
    <published>2017-03-29T08:48:06.000Z</published>
    <updated>2017-03-29T08:59:32.625Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/markzhai/AndroidPerformanceMonitor/raw/master/art/flow.png" alt=""></p>
<p>A transparent ui-block detection library for Android, app only needs one-line-code to setup.</p>
<a id="more"></a>
<p><a href="https://github.com/markzhai/AndroidPerformanceMonitor/blob/master/README_CN.md" target="_blank" rel="external">Chinese README</a></p>
<h1 id="Android-Performance-Monitor"><a href="#Android-Performance-Monitor" class="headerlink" title="Android Performance Monitor "></a>Android Performance Monitor <a href="https://maven-badges.herokuapp.com/maven-central/com.github.markzhai/blockcanary-android" target="_blank" rel="external"><img src="https://maven-badges.herokuapp.com/maven-central/com.github.markzhai/blockcanary-android/badge.svg?style=flat" alt="Maven Central"></a></h1><p>A transparent ui-block detection library for Android, app only needs one-line-code to setup.</p>
<p>The naming is to pay respect to the great library <a href="https://github.com/square/leakcanary" target="_blank" rel="external">LeakCanary</a>, ui-related codes are modified from leakcanary’s ui part.</p>
<h1 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h1><p>You may choose how to assemble them as you like.</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="comment">// most often used way, enable notification to notify block event</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.github.markzhai:blockcanary-android:1.5.0'</span></div><div class="line"></div><div class="line">    <span class="comment">// this way you only enable BlockCanary in debug package</span></div><div class="line">    <span class="comment">// debugCompile 'com.github.markzhai:blockcanary-android:1.5.0'</span></div><div class="line">    <span class="comment">// releaseCompile 'com.github.markzhai:blockcanary-no-op:1.5.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>As this library uses <code>getMainLooper().setMessageLogging()</code>, please check if you set it in your app (related issue <a href="https://github.com/moduth/blockcanary/issues/27" target="_blank" rel="external">https://github.com/moduth/blockcanary/issues/27</a>)</p>
<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>Maximum log count is set to 500, you can rewrite it in your app <code>int.xml</code>.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">integer</span> <span class="attr">name</span>=<span class="string">"block_canary_max_stored_count"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Monitor app’s label and icon can be configured by placing a <code>block_canary_icon</code> drawable in your xhdpi drawable directory and in <code>strings.xml</code>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"block_canary_display_activity_label"</span>&gt;</span>Blocks<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="comment">// Do it on main process</span></div><div class="line">        BlockCanary.install(<span class="keyword">this</span>, <span class="keyword">new</span> AppBlockCanaryContext()).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Implement your application <code>BlockCanaryContext</code> context (strongly recommend you to check all these configs)：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppBlockCanaryContext</span> <span class="keyword">extends</span> <span class="title">BlockCanaryContext</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Implement in your project.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Qualifier which can specify this installation, like version + flavor.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">provideQualifier</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"unknown"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Implement in your project.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> user id</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">provideUid</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"uid"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Network type</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125; like 2G, 3G, 4G, wifi, etc.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">provideNetworkType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"unknown"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Config monitor duration, after this time BlockCanary will stop, use</div><div class="line">     * with &#123;<span class="doctag">@code</span> BlockCanary&#125;'s isMonitorDurationEnd</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> monitor last duration (in hour)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">provideMonitorDuration</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Config block threshold (in millis), dispatch over this duration is regarded as a BLOCK. You may set it</div><div class="line">     * from performance of device.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> threshold in mills</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">provideBlockThreshold</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1000</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Thread stack dump interval, use when block happens, BlockCanary will dump on main thread</div><div class="line">     * stack according to current sample cycle.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Because the implementation mechanism of Looper, real dump interval would be longer than</div><div class="line">     * the period specified here (especially when cpu is busier).</div><div class="line">     * &lt;/p&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> dump interval (in millis)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">provideDumpInterval</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> provideBlockThreshold();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Path to save log, like "/blockcanary/", will save to sdcard if can.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> path of log files</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">providePath</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"/blockcanary/"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * If need notification to notice block.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> true if need, else if not need.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">displayNotification</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Implement in your project, bundle files into a zip file.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> src  files before compress</div><div class="line">     * <span class="doctag">@param</span> dest files compressed</div><div class="line">     * <span class="doctag">@return</span> true if compression is successful</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">zip</span><span class="params">(File[] src, File dest)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Implement in your project, bundled log files.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> zippedFile zipped file</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">(File zippedFile)</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Packages that developer concern, by default it uses process name,</div><div class="line">     * put high priority one in pre-order.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> null if simply concern only package with process name.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">concernPackages</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Filter stack without any in concern package, used with @&#123;code concernPackages&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> true if filter, false it not.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filterNonConcernStack</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Provide white list, entry in white list will not be shown in ui list.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> return null if you don't need white-list filter.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">provideWhiteList</span><span class="params">()</span> </span>&#123;</div><div class="line">        LinkedList&lt;String&gt; whiteList = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        whiteList.add(<span class="string">"org.chromium"</span>);</div><div class="line">        <span class="keyword">return</span> whiteList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Whether to delete files whose stack is in white list, used with white-list.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> true if delete, false it not.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteFilesInWhiteList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Block interceptor, developer may provide their own actions.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBlock</span><span class="params">(Context context, BlockInfo blockInfo)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h1><p>Blog in Chinese: <a href="http://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/" target="_blank" rel="external">BlockCanary</a>.</p>
<p>Principle flow picture:</p>
<p><img src="https://github.com/markzhai/AndroidPerformanceMonitor/raw/master/art/flow.png" alt="flow"></p>
<h1 id="Screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h1><p><img src="https://github.com/markzhai/AndroidPerformanceMonitor/raw/master/art/shot1.png" alt=""><br><img src="https://github.com/markzhai/AndroidPerformanceMonitor/raw/master/art/shot2.png" alt=""></p>
<h1 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h1><p>This library is initially created by <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a>, and maintained under the organization <a href="https://github.com/moduth" target="_blank" rel="external">moduth</a> with <a href="https://github.com/nimengbo" target="_blank" rel="external">nimengbo</a> and <a href="https://github.com/zzz40500" target="_blank" rel="external">zzz40500</a>.</p>
<p>Special thanks to <a href="https://github.com/android-cjj" target="_blank" rel="external">android-cjj</a>, <a href="https://github.com/baoyongzhang" target="_blank" rel="external">Mr.Bao</a>, <a href="https://github.com/chiahaolu" target="_blank" rel="external">chiahaolu</a> to contribute.</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>熟悉Message/Looper/Handler系列的同学们一定知道Looper.java中这么一段:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">private static Looper sMainLooper;  // guarded by Looper.class</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">/**</div><div class="line"> * Initialize the current thread as a looper, marking it as an</div><div class="line"> * application&apos;s main looper. The main looper for your application</div><div class="line"> * is created by the Android environment, so you should never need</div><div class="line"> * to call this function yourself.  See also: &#123;@link #prepare()&#125;</div><div class="line"> */</div><div class="line">public static void prepareMainLooper() &#123;</div><div class="line">    prepare(false);</div><div class="line">    synchronized (Looper.class) &#123;</div><div class="line">        if (sMainLooper != null) &#123;</div><div class="line">            throw new IllegalStateException(&quot;The main Looper has already been prepared.&quot;);</div><div class="line">        &#125;</div><div class="line">        sMainLooper = myLooper();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/** Returns the application&apos;s main looper, which lives in the main thread of the application.</div><div class="line"> */</div><div class="line">public static Looper getMainLooper() &#123;</div><div class="line">    synchronized (Looper.class) &#123;</div><div class="line">        return sMainLooper;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是的，就是这个Printer - mLogging，它在每个message处理的前后被调用，而如果<strong>主线程卡住了，不就是在dispatchMessage里卡住了吗？</strong></p>
<p>核心流程图：<br><img src="http://blog.zhaiyifan.cn/images/blockcanary_flow.png" alt=""></p>
<p>该组件利用了主线程的消息队列处理机制，通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Looper.getMainLooper().setMessageLogging(mainLooperPrinter);</div></pre></td></tr></table></figure></p>
<p>并在mainLooperPrinter中判断start和end，来获取主线程dispatch该message的开始和结束时间，并判定该时间超过阈值(如2000毫秒)为主线程卡慢发生，并dump出各种信息，提供开发者分析性能瓶颈。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void println(String x) &#123;</div><div class="line">    if (!mStartedPrinting) &#123;</div><div class="line">        mStartTimeMillis = System.currentTimeMillis();</div><div class="line">        mStartThreadTimeMillis = SystemClock.currentThreadTimeMillis();</div><div class="line">        mStartedPrinting = true;</div><div class="line">    &#125; else &#123;</div><div class="line">        final long endTime = System.currentTimeMillis();</div><div class="line">        mStartedPrinting = false;</div><div class="line">        if (isBlock(endTime)) &#123;</div><div class="line">            notifyBlockEvent(endTime);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private boolean isBlock(long endTime) &#123;</div><div class="line">    return endTime - mStartTimeMillis &gt; mBlockThresholdMillis;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说到此处，想到是不是可以用mainLooperPrinter来做更多事情呢？既然主线程都在这里，那只要parse出app包名的第一行，每次打印出来，是不是就不需要打点也能记录出用户操作路径？ 再者，比如想做onClick到页面创建后的耗时统计，是不是也能用这个原理呢？ 之后可以试试看这个思路（目前存在问题是获取线程堆栈是定时3秒取一次的，很可能一些比较快的方法操作一下子完成了没法在stacktrace里面反映出来）。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>BlockCanary作为一个Android组件，目前还有局限性，因为其在一个完整的监控系统中只是一个生产者，还需要对应的消费者去分析日志，比如归类排序，以便看出哪些卡慢更有修复价值，需要优先处理；又比如需要过滤机型，有些奇葩机型的问题造成的卡慢，到底要不要去修复是要斟酌的。扯远一点的话，像是埋点除了统计外，完全还能用来做链路监控，比如一个完整的流程是A -&gt; B -&gt; D -&gt; E, 但是某个时间节点突然A -&gt; B -&gt; D后没有到达E，这时候监控平台就可以发出预警，让开发人员及时定位。很多监控方案都需要C/S两端的配合。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/markzhai/AndroidPerformanceMonitor" target="_blank" rel="external">AndroidPerformanceMonitor</a><br>[2]<a href="http://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/" target="_blank" rel="external">BlockCanary — 轻松找出Android App界面卡顿元凶</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/markzhai/AndroidPerformanceMonitor/raw/master/art/flow.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;A transparent ui-block detection library for Android, app only needs one-line-code to setup.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
      <category term="Block Canary" scheme="http://ipcreator.me/tags/Block-Canary/"/>
    
  </entry>
  
  <entry>
    <title>EventBus——the  No.1 Open Source Event Library for Android</title>
    <link href="http://ipcreator.me/2017/03/29/Program/Android/3rdLib/event-bus/"/>
    <id>http://ipcreator.me/2017/03/29/Program/Android/3rdLib/event-bus/</id>
    <published>2017-03-29T07:26:06.000Z</published>
    <updated>2017-03-29T15:30:37.405Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/greenrobot/EventBus/raw/master/EventBus-Publish-Subscribe.png" alt=""></p>
<p>EventBus is an open-source library for Android using the publisher/subscriber pattern for loose coupling. EventBus enables central communication to decoupled classes with just a few lines of code – simplifying the code, removing dependencies, and speeding up app development.</p>
<a id="more"></a>
<h2 id="EventBus…"><a href="#EventBus…" class="headerlink" title="EventBus…"></a>EventBus…</h2><ul>
<li>simplifies the communication between components<ul>
<li>decouples event senders and receivers</li>
<li>performs well with Activities, Fragments, and background threads</li>
<li>avoids complex and error-prone dependencies and life cycle issues</li>
</ul>
</li>
<li>makes your code simpler</li>
<li>is fast</li>
<li>is tiny (~50k jar)</li>
<li>is proven in practice by apps with 100,000,000+ installs</li>
<li>has advanced features like delivery threads, subscriber priorities, etc.</li>
</ul>
<h2 id="EventBus-in-3-steps"><a href="#EventBus-in-3-steps" class="headerlink" title="EventBus in 3 steps"></a>EventBus in 3 steps</h2><h3 id="Step-1-Define-events"><a href="#Step-1-Define-events" class="headerlink" title="Step 1: Define events"></a>Step 1: Define events</h3><p> Events are POJO (plain old Java object) without any specific requirements.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class MessageEvent &#123;</div><div class="line"></div><div class="line">    public final String message;</div><div class="line"></div><div class="line">    public MessageEvent(String message) &#123;</div><div class="line">        this.message = message;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Step-2-Prepare-subscribers"><a href="#Step-2-Prepare-subscribers" class="headerlink" title="Step 2: Prepare subscribers"></a>Step 2: Prepare subscribers</h3><p> Subscribers implement event handling methods (also called “subscriber methods”) that will be called when an event is posted. These are defined with the @Subscribe annotation.</p>
<p> Note that with EventBus 3 the method name can be chosen freely (no naming conventions like in EventBus 2).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// This method will be called when a MessageEvent is posted (in the UI thread for Toast)</div><div class="line">@Subscribe(threadMode = ThreadMode.MAIN)</div><div class="line">public void onMessageEvent(MessageEvent event) &#123;</div><div class="line">    Toast.makeText(getActivity(), event.message, Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// This method will be called when a SomeOtherEvent is posted</div><div class="line">@Subscribe</div><div class="line">public void handleSomethingElse(SomeOtherEvent event) &#123;</div><div class="line">    doSomethingWith(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> Subscribers also need to register themselves to and unregister from the bus. Only while subscribers are registered, they will receive events. In Android, in activities and fragments you should usually register according to their life cycle. For most cases onStart/onStop works fine:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onStart() &#123;</div><div class="line">    super.onStart();</div><div class="line">    EventBus.getDefault().register(this);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void onStop() &#123;</div><div class="line">    EventBus.getDefault().unregister(this);</div><div class="line">    super.onStop();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Step-3-Post-events"><a href="#Step-3-Post-events" class="headerlink" title="Step 3: Post events"></a>Step 3: Post events</h3><p> Post an event from any part of your code. All currently registered subscribers matching the event type will receive it.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().post(new MessageEvent(&quot;Hello everyone!&quot;));</div></pre></td></tr></table></figure>
<p><strong>Read the full <a href="http://greenrobot.org/eventbus/documentation/how-to-get-started/" target="_blank" rel="external">getting started guide</a>.</strong></p>
<h2 id="Add-EventBus-to-your-project"><a href="#Add-EventBus-to-your-project" class="headerlink" title="Add EventBus to your project"></a>Add EventBus to your project</h2><p>Please ensure that you are using the latest version by <a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.greenrobot%22%20AND%20a%3A%22eventbus%22" target="_blank" rel="external">checking here</a></p>
<p>Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'org.greenrobot:eventbus:3.0.0'</span></div></pre></td></tr></table></figure></p>
<p>Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.greenrobot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eventbus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.greenrobot%22%20AND%20a%3A%22eventbus%22" target="_blank" rel="external">Or download EventBus from Maven Central</a></p>
<h2 id="Homepage-Documentation-Links"><a href="#Homepage-Documentation-Links" class="headerlink" title="Homepage, Documentation, Links"></a>Homepage, Documentation, Links</h2><p>For more details on EventBus please check <a href="http://greenrobot.org/eventbus" target="_blank" rel="external">EventBus’ website</a>. Here are some direct links you may find useful:</p>
<p><a href="http://greenrobot.org/eventbus/features/" target="_blank" rel="external">Features</a></p>
<p><a href="http://greenrobot.org/eventbus/documentation/" target="_blank" rel="external">Documentation</a></p>
<p><a href="http://greenrobot.org/eventbus/changelog/" target="_blank" rel="external">Changelog</a></p>
<p><a href="http://greenrobot.org/eventbus/documentation/faq/" target="_blank" rel="external">FAQ</a></p>
<p>How does EventBus compare to other solutions, like Otto from Square? Check this <a href="COMPARISON.md">comparison</a>.</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Copyright (C) 2012-2016 Markus Junginger, greenrobot (<a href="http://greenrobot.org" target="_blank" rel="external">http://greenrobot.org</a>)</p>
<p>EventBus binaries and source code can be used according to the <a href="LICENSE">Apache License, Version 2.0</a>.</p>
<h2 id="More-Open-Source-by-greenrobot"><a href="#More-Open-Source-by-greenrobot" class="headerlink" title="More Open Source by greenrobot"></a>More Open Source by greenrobot</h2><p><a href="https://github.com/greenrobot/greenrobot-common" target="_blank" rel="external"><strong>greenrobot-common</strong></a> is a set of utility classes and hash functions for Android &amp; Java projects.</p>
<p><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external"><strong>greenDAO</strong></a> is an ORM optimized for Android: it maps database tables to Java objects and uses code generation for optimal speed.</p>
<p><a href="https://plus.google.com/b/114381455741141514652/+GreenrobotDe/posts" target="_blank" rel="external">Follow us on Google+</a> or check our <a href="http://greenrobot.org/" target="_blank" rel="external">homepage</a> to stay up to date.</p>
<h2 id="EventBus源码分析-3"><a href="#EventBus源码分析-3" class="headerlink" title="EventBus源码分析[3]"></a>EventBus源码分析<sup>[3]</sup></h2><p>EventBus的好处是显而易见的，完全解耦了请求链之间的关系，避免了请求者被长持有，又比广播更轻量，比LocalBroadcast则更强大，接口也简单实用。缺点的话，像是各种Event的定义是一个工作量。</p>
<h2 id="EventBus-otto-LocalBroadcast的选择-4"><a href="#EventBus-otto-LocalBroadcast的选择-4" class="headerlink" title="EventBus, otto, LocalBroadcast的选择[4]"></a>EventBus, otto, LocalBroadcast的选择<sup>[4]</sup></h2><ol>
<li>greenrobot的EventBus</li>
<li>square的otto</li>
<li>android support包里提供的LocalBroadcast</li>
</ol>
<p>三者都是类似订阅/发布的模式，降低了耦合度。与callback比起来，这种事件总线的模式使得两个类没有直接的依赖关系，对架构来说进行了解耦，把双向依赖变成了单向依赖，在大型项目中尤其显得重要。</p>
<h3 id="Why-publish-subscribe"><a href="#Why-publish-subscribe" class="headerlink" title="Why publish/subscribe"></a>Why publish/subscribe</h3><p>一方面，callback很容易产生内存泄露，如I/O、网络操作持有了Activity/Fragment的引用，导致不能及时释放，而团队中也很难保证每个成员都足够优秀在写callback的时候能使用弱引用或静态变量。相比起来订阅/发布者模式则比较简单，直接在BaseActivity的onDestroy释放掉，避免了可能的坑。</p>
<p>另外，从可扩展性、可维护性的角度来说，callback也更局限，比如以前某个接口是告诉上层网络数据拉回来了，现在我们希望扩展，这个接口也支持直接告诉上层数据库拉回来了，向上层屏蔽数据来源，如果用callback，则在一次回调结束后，没有办法再次进行回调了。页面必须自己去处理数据来源和拉数据的逻辑。</p>
<p>虽然有些over-architect的嫌疑，但是<a href="https://github.com/android10/Android-CleanArchitecture" target="_blank" rel="external">Android-CleanArchitecture</a> 确实是一种很clean的architecture，而其也正是通过观察者/订阅者模式来实现了单向依赖。</p>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>EventBus的github上就有其和otto的比较： <a href="https://github.com/greenrobot/EventBus/blob/master/COMPARISON.md" target="_blank" rel="external">EventBus vs Otto</a></p>
<p>总的来说，两者功能差的不多，otto多了Event producers (e.g. for coding cached events)，而EventBus则多了各种线程的处理、订阅者继承、sticky event等。</p>
<p>但从性能来说，由于otto使用了基于反射的annotation，而和EventBus产生了一定的差距（内部应该还有一些其他问题导致的性能差异，待研究）</p>
<p><strong>三者都不支持跨进程，LocalBroadcast内部其实使用的是Handler，所以其实更像是一个utils类。</strong></p>
<p>如果要做选择的话，LocalBroadcast更轻量，otto相比起api更好用，而EventBus则拥有很棒的线程模型，我投EventBus一票，因为onEvent的各种线程回调真的很方便。</p>
<h2 id="Android-Clean-Architecture-5"><a href="#Android-Clean-Architecture-5" class="headerlink" title="Android Clean Architecture[5]"></a>Android Clean Architecture<sup>[5]</sup></h2><h3 id="Clean-architecture"><a href="#Clean-architecture" class="headerlink" title="Clean architecture"></a>Clean architecture</h3><p><img src="https://github.com/android10/Sample-Data/raw/master/Android-CleanArchitecture/clean_architecture.png" alt=""></p>
<h3 id="Architectural-approach"><a href="#Architectural-approach" class="headerlink" title="Architectural approach"></a>Architectural approach</h3><p><img src="https://github.com/android10/Sample-Data/raw/master/Android-CleanArchitecture/clean_architecture_layers.png" alt=""></p>
<h3 id="Architectural-reactive-approach"><a href="#Architectural-reactive-approach" class="headerlink" title="Architectural reactive approach"></a>Architectural reactive approach</h3><p><img src="https://github.com/android10/Sample-Data/raw/master/Android-CleanArchitecture/clean_architecture_layers_details.png" alt=""></p>
<h2 id="应用MVP模式写出可维护的优美Android应用-6"><a href="#应用MVP模式写出可维护的优美Android应用-6" class="headerlink" title="应用MVP模式写出可维护的优美Android应用[6]"></a>应用MVP模式写出可维护的优美Android应用<sup>[6]</sup></h2><h3 id="MVP是什么"><a href="#MVP是什么" class="headerlink" title="MVP是什么"></a>MVP是什么</h3><p>MVP是MVC模式的一个衍生物，可以简单看下图。在MVP模式中，V层完全和M层（在Android中可能是Model、DAO、或者通用的business logic）分开。在中间用P层分隔，从而把数据有关和UI有关完全分离开。</p>
<p><img src="http://img.blog.csdn.net/20150627173920530" alt=""></p>
<h3 id="主流的MVP又有两种实现方式"><a href="#主流的MVP又有两种实现方式" class="headerlink" title="主流的MVP又有两种实现方式"></a>主流的MVP又有两种实现方式</h3><p>１）Activity、Fragment、View直接作为V层。Presenter通过继承被视图层实例化或者通过注入得到。这样Presenter在理想状态下可以完全和Android分离，也剥离了activity的那些生命周期。</p>
<p>2）Activity和Fragment作为P层，另外单独创建一个V层类，持有Activity里面的各种view，并提供接口让Activity调用来更新界面。</p>
<p>为了让V层和P层解耦，通常P层对V层的持有是通过interface的。</p>
<p>一个完整的mvp事件流可以是<br><img src="http://img.blog.csdn.net/20150627174025122" alt=""></p>
<h3 id="个人心得"><a href="#个人心得" class="headerlink" title="个人心得"></a>个人心得</h3><p>不要把presenter当做OnClickListener，View才是来处理用户输入和给予反馈的，presenter不应该知道view内部的逻辑来判断点击某个按钮后做出什么相应。一个简单的判断某个逻辑是否属于presenter的方法是，如果view层不是android，而是java桌面应用，那你的presenter层是不是还能不做更改地work。</p>
<p>view层只做presenter层让你做的，比如上图view层用户点了一个按钮，View调用了presenter.loadUsers，presenter一边在background thread去getUsers，一边调用了view.showLoading()，view层不该自说自话地showLoading。不过如何showLoading，比如展示怎么样的动画，那就是view层的内部矛盾了。</p>
<p>一个很大的好处，就是通过MVP，异步变得很清晰，view层的东西完全是主线程的，只需要等着presenter调就行了。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a><br>[2]<a href="http://greenrobot.org/eventbus/documentation/how-to-get-started/" target="_blank" rel="external">How to get started with EventBus in 3 steps</a><br>[3]<a href="http://blog.zhaiyifan.cn/2015/08/20/EventBus-source/" target="_blank" rel="external">EventBus源码分析</a><br>[4]<a href="http://blog.zhaiyifan.cn/2015/08/17/EventBus:otto:LocalBroadcast%E7%9A%84%E9%80%89%E6%8B%A9/" target="_blank" rel="external">EventBus, otto, LocalBroadcast的选择</a><br>[5]<a href="https://github.com/android10/Android-CleanArchitecture" target="_blank" rel="external">Android-CleanArchitecture</a><br>[6]<a href="http://blog.zhaiyifan.cn/2015/06/01/use-mvp-to-write-nice-code/" target="_blank" rel="external">应用MVP模式写出可维护的优美Android应用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/greenrobot/EventBus/raw/master/EventBus-Publish-Subscribe.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;EventBus is an open-source library for Android using the publisher/subscriber pattern for loose coupling. EventBus enables central communication to decoupled classes with just a few lines of code – simplifying the code, removing dependencies, and speeding up app development.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
      <category term="Event Bus" scheme="http://ipcreator.me/tags/Event-Bus/"/>
    
  </entry>
  
  <entry>
    <title>Butter Knife——Field and method binding for Android views</title>
    <link href="http://ipcreator.me/2017/03/29/Program/Android/3rdLib/butterknife/"/>
    <id>http://ipcreator.me/2017/03/29/Program/Android/3rdLib/butterknife/</id>
    <published>2017-03-29T03:16:06.000Z</published>
    <updated>2017-03-29T03:43:15.424Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/butter%20knife%20logo.png" alt=""></p>
<p>Bind Android views and callbacks to fields and methods.</p>
<a id="more"></a>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Annotate fields with @BindView and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class ExampleActivity extends Activity &#123;</div><div class="line">  @BindView(R.id.title) TextView title;</div><div class="line">  @BindView(R.id.subtitle) TextView subtitle;</div><div class="line">  @BindView(R.id.footer) TextView footer;</div><div class="line"></div><div class="line">  @Override public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.simple_activity);</div><div class="line">    ButterKnife.bind(this);</div><div class="line">    // TODO Use fields...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Instead of slow reflection, code is generated to perform the view look-ups. Calling bind delegates to this generated code that you can see and debug.</p>
<p>The generated code for the above example is roughly equivalent to the following:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void bind(ExampleActivity activity) &#123;</div><div class="line">  activity.subtitle = (android.widget.TextView) activity.findViewById(2130968578);</div><div class="line">  activity.footer = (android.widget.TextView) activity.findViewById(2130968579);</div><div class="line">  activity.title = (android.widget.TextView) activity.findViewById(2130968577);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="RESOURCE-BINDING"><a href="#RESOURCE-BINDING" class="headerlink" title="RESOURCE BINDING"></a>RESOURCE BINDING</h2><p>Bind pre-defined resources with @BindBool, @BindColor, @BindDimen, @BindDrawable, @BindInt, @BindString, which binds an R.bool ID (or your specified type) to its corresponding field.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class ExampleActivity extends Activity &#123;</div><div class="line">  @BindString(R.string.title) String title;</div><div class="line">  @BindDrawable(R.drawable.graphic) Drawable graphic;</div><div class="line">  @BindColor(R.color.red) int red; // int or ColorStateList field</div><div class="line">  @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="NON-ACTIVITY-BINDING"><a href="#NON-ACTIVITY-BINDING" class="headerlink" title="NON-ACTIVITY BINDING"></a>NON-ACTIVITY BINDING</h2><p>You can also perform binding on arbitrary objects by supplying your own view root.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class FancyFragment extends Fragment &#123;</div><div class="line">  @BindView(R.id.button1) Button button1;</div><div class="line">  @BindView(R.id.button2) Button button2;</div><div class="line"></div><div class="line">  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</div><div class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, false);</div><div class="line">    ButterKnife.bind(this, view);</div><div class="line">    // TODO Use fields...</div><div class="line">    return view;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Another use is simplifying the view holder pattern inside of a list adapter.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class MyAdapter extends BaseAdapter &#123;</div><div class="line">  @Override public View getView(int position, View view, ViewGroup parent) &#123;</div><div class="line">    ViewHolder holder;</div><div class="line">    if (view != null) &#123;</div><div class="line">      holder = (ViewHolder) view.getTag();</div><div class="line">    &#125; else &#123;</div><div class="line">      view = inflater.inflate(R.layout.whatever, parent, false);</div><div class="line">      holder = new ViewHolder(view);</div><div class="line">      view.setTag(holder);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    holder.name.setText(&quot;John Doe&quot;);</div><div class="line">    // etc...</div><div class="line"></div><div class="line">    return view;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  static class ViewHolder &#123;</div><div class="line">    @BindView(R.id.title) TextView name;</div><div class="line">    @BindView(R.id.job_title) TextView jobTitle;</div><div class="line"></div><div class="line">    public ViewHolder(View view) &#123;</div><div class="line">      ButterKnife.bind(this, view);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can see this implementation in action in the provided sample.</p>
<p>Calls to ButterKnife.bind can be made anywhere you would otherwise put findViewById calls.</p>
<h2 id="Other-provided-binding-APIs"><a href="#Other-provided-binding-APIs" class="headerlink" title="Other provided binding APIs:"></a>Other provided binding APIs:</h2><p>Bind arbitrary objects using an activity as the view root. If you use a pattern like MVC you can bind the controller using its activity with ButterKnife.bind(this, activity).</p>
<p>Bind a view’s children into fields using ButterKnife.bind(this). If you use <merge> tags in a layout and inflate in a custom view constructor you can call this immediately after. Alternatively, custom view types inflated from XML can use it in the onFinishInflate() callback.</merge></p>
<h2 id="VIEW-LISTS"><a href="#VIEW-LISTS" class="headerlink" title="VIEW LISTS"></a>VIEW LISTS</h2><p>You can group multiple views into a List or array.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@BindViews(&#123; R.id.first_name, R.id.middle_name, R.id.last_name &#125;)</div><div class="line">List&lt;EditText&gt; nameViews;</div></pre></td></tr></table></figure>
<p>The apply method allows you to act on all the views in a list at once.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ButterKnife.apply(nameViews, DISABLE);</div><div class="line">ButterKnife.apply(nameViews, ENABLED, false);</div></pre></td></tr></table></figure>
<p>Action and Setter interfaces allow specifying simple behavior.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">static final ButterKnife.Action&lt;View&gt; DISABLE = new ButterKnife.Action&lt;View&gt;() &#123;</div><div class="line">  @Override public void apply(View view, int index) &#123;</div><div class="line">    view.setEnabled(false);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">static final ButterKnife.Setter&lt;View, Boolean&gt; ENABLED = new ButterKnife.Setter&lt;View, Boolean&gt;() &#123;</div><div class="line">  @Override public void set(View view, Boolean value, int index) &#123;</div><div class="line">    view.setEnabled(value);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>An Android Property can also be used with the apply method.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ButterKnife.apply(nameViews, View.ALPHA, 0.0f);</div></pre></td></tr></table></figure></p>
<h2 id="LISTENER-BINDING"><a href="#LISTENER-BINDING" class="headerlink" title="LISTENER BINDING"></a>LISTENER BINDING</h2><p>Listeners can also automatically be configured onto methods.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@OnClick(R.id.submit)</div><div class="line">public void submit(View view) &#123;</div><div class="line">  // TODO submit data to server...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>All arguments to the listener method are optional.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@OnClick(R.id.submit)</div><div class="line">public void submit() &#123;</div><div class="line">  // TODO submit data to server...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Define a specific type and it will automatically be cast.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@OnClick(R.id.submit)</div><div class="line">public void sayHi(Button button) &#123;</div><div class="line">  button.setText(&quot;Hello!&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Specify multiple IDs in a single binding for common event handling.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@OnClick(&#123; R.id.door1, R.id.door2, R.id.door3 &#125;)</div><div class="line">public void pickDoor(DoorView door) &#123;</div><div class="line">  if (door.hasPrizeBehind()) &#123;</div><div class="line">    Toast.makeText(this, &quot;You win!&quot;, LENGTH_SHORT).show();</div><div class="line">  &#125; else &#123;</div><div class="line">    Toast.makeText(this, &quot;Try again&quot;, LENGTH_SHORT).show();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Custom views can bind to their own listeners by not specifying an ID.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class FancyButton extends Button &#123;</div><div class="line">  @OnClick</div><div class="line">  public void onClick() &#123;</div><div class="line">    // TODO do something!</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="BINDING-RESET"><a href="#BINDING-RESET" class="headerlink" title="BINDING RESET"></a>BINDING RESET</h2><p>Fragments have a different view lifecycle than activities. When binding a fragment in onCreateView, set the views to null in onDestroyView.</p>
<p>Butter Knife returns an Unbinder instance when you call bind to do this for you. Call its unbind method in the appropriate lifecycle callback.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class FancyFragment extends Fragment &#123;</div><div class="line">  @BindView(R.id.button1) Button button1;</div><div class="line">  @BindView(R.id.button2) Button button2;</div><div class="line">  private Unbinder unbinder;</div><div class="line"></div><div class="line">  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</div><div class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, false);</div><div class="line">    unbinder = ButterKnife.bind(this, view);</div><div class="line">    // TODO Use fields...</div><div class="line">    return view;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override public void onDestroyView() &#123;</div><div class="line">    super.onDestroyView();</div><div class="line">    unbinder.unbind();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="OPTIONAL-BINDINGS"><a href="#OPTIONAL-BINDINGS" class="headerlink" title="OPTIONAL BINDINGS"></a>OPTIONAL BINDINGS</h2><p>By default, both @Bind and listener bindings are required. An exception will be thrown if the target view cannot be found.</p>
<p>To suppress this behavior and create an optional binding, add a @Nullable annotation to fields or the @Optional annotation to methods.</p>
<p>Note: Any annotation named @Nullable can be used for fields. It is encouraged to use the @Nullable annotation from Android’s “support-annotations” library.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Nullable @BindView(R.id.might_not_be_there) TextView mightNotBeThere;</div><div class="line"></div><div class="line">@Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() &#123;</div><div class="line">  // TODO ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="MULTI-METHOD-LISTENERS"><a href="#MULTI-METHOD-LISTENERS" class="headerlink" title="MULTI-METHOD LISTENERS"></a>MULTI-METHOD LISTENERS</h2><p>Method annotations whose corresponding listener has multiple callbacks can be used to bind to any one of them. Each annotation has a default callback that it binds to. Specify an alternate using the callback parameter.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@OnItemSelected(R.id.list_view)</div><div class="line">void onItemSelected(int position) &#123;</div><div class="line">  // TODO ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">@OnItemSelected(value = R.id.maybe_missing, callback = NOTHING_SELECTED)</div><div class="line">void onNothingSelected() &#123;</div><div class="line">  // TODO ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="BONUS"><a href="#BONUS" class="headerlink" title="BONUS"></a>BONUS</h2><p>Also included are findById methods which simplify code that still has to find views on a View, Activity, or Dialog. It uses generics to infer the return type and automatically performs the cast.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">View view = LayoutInflater.from(context).inflate(R.layout.thing, null);</div><div class="line">TextView firstName = ButterKnife.findById(view, R.id.first_name);</div><div class="line">TextView lastName = ButterKnife.findById(view, R.id.last_name);</div><div class="line">ImageView photo = ButterKnife.findById(view, R.id.photo);</div><div class="line">Add a static import for ButterKnife.findById and enjoy even more fun.</div></pre></td></tr></table></figure>
<h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p><strong>GRADLE</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.jakewharton:butterknife:(insert latest version)&apos;</div><div class="line">annotationProcessor &apos;com.jakewharton:butterknife-compiler:(insert latest version)&apos;</div></pre></td></tr></table></figure>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Copyright 2013 Jake Wharton</div><div class="line"></div><div class="line">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</div><div class="line">you may not use this file except in compliance with the License.</div><div class="line">You may obtain a copy of the License at</div><div class="line"></div><div class="line">   http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"></div><div class="line">Unless required by applicable law or agreed to in writing, software</div><div class="line">distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</div><div class="line">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">See the License for the specific language governing permissions and</div><div class="line">limitations under the License.</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/butter%20knife%20logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Bind Android views and callbacks to fields and methods.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Jake Wharton" scheme="http://ipcreator.me/tags/Jake-Wharton/"/>
    
      <category term="Butter Knife" scheme="http://ipcreator.me/tags/Butter-Knife/"/>
    
      <category term="Third Library" scheme="http://ipcreator.me/tags/Third-Library/"/>
    
  </entry>
  
  <entry>
    <title>Why I Insist on Writing Blog</title>
    <link href="http://ipcreator.me/2017/03/29/MyView/Original/Why/why-i-write-blog/"/>
    <id>http://ipcreator.me/2017/03/29/MyView/Original/Why/why-i-write-blog/</id>
    <published>2017-03-29T01:19:06.000Z</published>
    <updated>2017-03-31T07:23:45.059Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/blog.jpg" alt=""></p>
<blockquote>
<p>Improving your  ability of deep thinking by writing<br>Record your  learning and growing up<br>Gain new insights through reviewing old materials<br>Force myself to Using English</p>
</blockquote>
<a id="more"></a>
<h2 id="For-Yourself"><a href="#For-Yourself" class="headerlink" title="For Yourself"></a>For Yourself</h2><h2 id="Share-for-Others"><a href="#Share-for-Others" class="headerlink" title="Share for Others"></a>Share for Others</h2><h2 id="Other-People-Say"><a href="#Other-People-Say" class="headerlink" title="Other People Say"></a>Other People Say</h2><h3 id="你为什么非写不可"><a href="#你为什么非写不可" class="headerlink" title="你为什么非写不可"></a><a href="/2017/01/02/MyShare/iGet/lixiaolai-lead-to-freedom-of-wealth/">你为什么非写不可</a></h3><p>写作（其实公开演讲也一样），本质上来看，目的是为了产生影响。注意力产生价值描绘出来基本像是复利曲线——必须到达拐点才真正有意义，因为获得注意力本身也同样是有成本的，在拐点之前，收益可能其实是负数……</p>
<p>读书破万卷，下笔如有神。<br>要提高输出质量，首先要提高输入质量。</p>
<p>很多时候，你没去做不是因为自己真的做不好，只是你以为自己做不好。<br>更准确地说：你以为自己永远做不好。<br>只要你开始写，你就已经有了质的改变。</p>
<p>写不写和写得好不好在我看来是两件事，而前者的意义远大于后者。因为大部分人都是被挡在了这道门槛上。<br>实际上，只要你开始写，并且一直写下去，你就一定会越写越好。</p>
<p>所以不要再觉得或者认为什么了，现在就去动笔吧。</p>
<p>很多苛刻的要求，其实是我们自己无意识加进去的。<br>一想到英语，就是无障碍地和外国人交流，或者看外国电影不用字幕；一想到编程，就是要做一个华丽的APP，或者做一个酷炫的网站。<br>这个时候，要及时地给自己提个醒：你又犯了过度预期的毛病了。</p>
<p>我们总是会对自己将要做的事情抱有无限的憧憬，不然也就不会有理想很丰满，现实很骨感的感叹了。<br>丰满的理想多半是你自己意想出来的，和这种臆测来对比，估计没有几个现实不显得骨感。</p>
<p>所以开始的时候，不要把目标定得太高，甚至可以先不去考虑目标，直接去做。<br>有了第一步，你自然就会知道下一步应该定什么样的目标是合适的了。</p>
<h3 id="如何判断自己文章的好坏？"><a href="#如何判断自己文章的好坏？" class="headerlink" title="如何判断自己文章的好坏？"></a><a href="/2017/01/02/MyShare/iGet/lixiaolai-lead-to-freedom-of-wealth/">如何判断自己文章的好坏？</a></h3><h4 id="一、三条基础常识建议"><a href="#一、三条基础常识建议" class="headerlink" title="一、三条基础常识建议"></a>一、三条基础常识建议</h4><ol>
<li><strong>多写、多写、多写</strong></li>
<li><strong>认真思考所选择品类的受众属性</strong><br>什么对读者来说最重要？<br>散文/诗歌，意境<br>短篇小说，创意<br>报告文学，真相<br>剧本，结构<br>说理类文章，认真思考三个要素<br>简单VS复杂、已知VS未知、次要VS重要</li>
</ol>
<p>有没有向读者展示某件貌似简单的事情其实是非常复杂的？<br>或者反过来，我有没有做到化繁为简？</p>
<p>我有没有让读者意识到某件看起来已知的事情其实是未知的？<br>或者反过来，我有没有做到让读者意识到某件貌似未知的事情其实是早就知道的？</p>
<p>我有没有让读者意识到某件事时积极重要的？<br>或者反过来，我有没有做到证明给读者看，某个他们一直重视的东西其实是次要的？</p>
<p>概括起来，就是不管怎样，都要真相。</p>
<p>大多数人总是误以为写作是一种表达方式，进而当遇到差评的时候会生气，认为对方不识货……<br>这其实是幼稚的——对方原本就没有识货的义务和责任啊！</p>
<p>沟通最大的难度在于理解对方。写作的真正难度在于当作者意识到自己是与一百人、一千人、一万人、十万人……<br>甚至是千万读者说话的时候，有没有能力做到自己说的话足够准确乃至于不被误解，</p>
<p>自己说的话是否足够恰当乃至于没有伤及无辜，<br>自己说的话是否足够完整乃至于即便是遗漏了或者得罪了某一类人也在所不惜……</p>
<p>大多数人没有这样的自我训练。</p>
<p>当众讲话、公开写作，基本上是个寻找最大公约数的游戏。<br>你有能力理解多少人，就最多能拥有多少读者。</p>
<ol>
<li><strong>写作是双向沟通而不是单向表达</strong></li>
</ol>
<h4 id="二、内容质量判断原则"><a href="#二、内容质量判断原则" class="headerlink" title="二、内容质量判断原则"></a>二、内容质量判断原则</h4><ol>
<li>逻辑严谨</li>
<li>论证精彩</li>
</ol>
<p>逻辑推理，有三个层面：</p>
<p><strong>A、形式逻辑，Formal Logic</strong></p>
<p>三段论，一个大前提，一个小前提，推出一个结论，当大前提和小前提都正确的时候，结论必然是正确的；<br>或与非的逻辑判断，A属于B，B属于C，所以A必然属于C<br>形式逻辑处理的是必然的推理，这种逻辑推理在现实中根本不够用——<br>现实中更普遍的不是必然，而是可能。</p>
<p>这世界竟然有70%的人识别不出以下简单的形式逻辑错误（肯定后件）：<br>if p then q，<br>q，therefore，p</p>
<p><strong>B、非形式逻辑，Informal Logic</strong></p>
<p>人们普遍畏惧不确定性与未知，所以，绝大多数人其实是跟着感觉走，听从内心的声音，最终从<br>骨子里就回避学习非形式逻辑，乃至于最终对所身处的世界不可能有清晰的认识。</p>
<p><strong>三、认知偏差纠正，Cognitive Bias Correction</strong></p>
<p>认知偏误列表</p>
<p>精彩的例子（证据）是攒出来的，不是找来的。长期且系统地收集整理证据（例子）。</p>
<p>长期这两个字已经把九成的写作者干掉了——绝大多数人一生都没有能够摆脱临时抱佛脚的窘境，想要系统，起码要做到两点：</p>
<p>1、知道自己要什么？<br>2、琢磨手里的东西可以用在哪些地方？</p>
<p>其实例子啊，证据啊，满天飞的。大多数人只是因为没仔细想过自己要的是什么，好例子好证据对他们来说总是擦肩而过来无影去无踪春梦了无恒。</p>
<p>例子、证据攒得足够多了，精彩的发挥余地就很大，否则就完全没有可能。</p>
<p><u><strong>写并不难，难的是正确思考和系统积累。还是那句话：“你做了哪些别人看不到的工作？”</strong></u></p>
<h4 id="三、关于所谓文采判断"><a href="#三、关于所谓文采判断" class="headerlink" title="三、关于所谓文采判断"></a>三、关于所谓文采判断</h4><p><strong>修辞</strong></p>
<p>修辞有很多种，我只用一种：类比，类比的好处很少有人深入探究，在我看来类比是一种非常特殊且有效的沟通工具，我找到对方已知的点，然后用那个对方已知的点让对方理解对方未知的点——这多精妙啊！</p>
<p>你怎么知道对方哪些未知、哪些已知？这还是靠积累和经验啊！一些人通过长期耐心沟通观察的结果就是可以做到未卜先知。</p>
<p><strong>韵律</strong><br>在我看来，无非两个方面，韵脚和节奏。</p>
<p><u><strong>事实上，绝大多数被理解为“文采”的东西，最终其实是思考与习惯的结果。</strong></u></p>
<h4 id="四、格式化写作的好处"><a href="#四、格式化写作的好处" class="headerlink" title="四、格式化写作的好处"></a>四、格式化写作的好处</h4><p>所有论文都是有套路的：</p>
<ol>
<li>提出一个观点；</li>
<li>说明这个观点的意义究竟有多大；</li>
<li>证明这个观点；</li>
<li>驳斥对这个观点的质疑；</li>
<li>说清楚这个观点的超级意义……</li>
</ol>
<p>《七年就是一辈子》的所有文章都是一模一样的套路，简单讲，就是：<br>说清楚一个重要的概念。<br>展开之后还是套路：</p>
<ol>
<li>我要说的是什么概念？</li>
<li>这个概念为什么重要？</li>
<li>这个概念普遍被如何误解？</li>
<li>这个概念实际上是怎么回事儿？</li>
<li>正解这个概念有什么意义？</li>
<li>如何正确使用这个概念？</li>
<li>错误使用这个概念有什么可怕之处？</li>
<li>这个概念与什么其他重要的概念有重要的联系？</li>
</ol>
<p>所谓的聪明，指的就是一个人脑子里拥有足够多的、清楚、正确、必要的概念，并且在这些概念之间建立了足够多、清楚、准确、必要的关联。</p>
<p>所谓的进步与成长，无非就是不断习得新的重要的概念与关联，不断更新已有的概念与关联。这个过程不大可能是瞬间完成的，只能靠积累——这是长期的挣扎。</p>
<h3 id="计算机从业者的技术成长学习之路-1"><a href="#计算机从业者的技术成长学习之路-1" class="headerlink" title="计算机从业者的技术成长学习之路[1]"></a><a href="http://blog.zhaiyifan.cn/2016/04/28/about-learning/" target="_blank" rel="external">计算机从业者的技术成长学习之路</a><sup>[1]</sup></h3><blockquote>
<p>写博客是为了什么？<br>至少对我来说，写下的东西更多是对自己的一个总结和交待。如果我能写下来，至少能证明我有信心自己确实是这么去理解的，没有去坑人。另外，姑且也算是一种成长的足迹吧，偶尔自己还会去看看笔记。<br>分享也是目的之一，希望大家能互相进步，这样才能促进发展。<br>写博客也好，写一些笔记也好，点点滴滴也是对自己的一种整理。</p>
</blockquote>
<h3 id="我为什么坚持写博客-2"><a href="#我为什么坚持写博客-2" class="headerlink" title="我为什么坚持写博客[2]"></a><a href="http://raychase.iteye.com/blog/1508053" target="_blank" rel="external">我为什么坚持写博客</a><sup>[2]</sup></h3><blockquote>
<p>写博客可以保持思考的习惯。<br>写博客可以帮助其他的程序员。<br>写博客可以记录自己的故事。<br>写博客可以保持前沿技术敏感性，督促自己不断学习。<br>写博客可以认识一些让我尊敬的人。</p>
</blockquote>
<h3 id="我为什么坚持写博客？-3"><a href="#我为什么坚持写博客？-3" class="headerlink" title="我为什么坚持写博客？[3]"></a><a href="http://geek.csdn.net/news/detail/58708" target="_blank" rel="external">我为什么坚持写博客？</a><sup>[3]</sup></h3><blockquote>
<p><strong>知识的总结</strong><br>项目开发中也许学到了一个技能，或者一个知识点，但是通过写博客会加深巩固自己学习的东西，自己写不出来可能说明你对这个知识点理解还不够深入。</p>
<p><strong>表达能力的提升</strong><br>程序员大都不善于沟通，是因为表达能力不行，但是通过坚持写博客，自己的表达能力与表达逻辑会慢慢锻炼出来，逐渐的就会影响自己的沟通交流能力，这点我深有体会。</p>
<p><strong>面试加分</strong><br>假设我们同时面试了两个人，两人各方面能力差不多，但是一个写博客，一个不写，我想我肯定优先选择坚持写博客的人。他能坚持写博客，起码知道他善于经验总结，很勤快，因为大部分人不写博客很大原因是因为懒。</p>
<p><strong>提升写作能力</strong><br>写的多了，写作能力也就提升了，比如我，相信我的写作能力应该比大部分程序员要优秀，你们认同么？</p>
<p><strong>提升名气</strong><br>如果持续产出高质量的博客，被越来越多的人知道，那名气就会上升了，有了名气自身的价值一下就提升了，我深有感受，自从有了名气之后，每天都能收到各大猎头、CEO等的各种优越条件的邀请，选择接受或拒绝是一回事，但是有没有收到邀请就是另一回事了。</p>
<p><strong>赚取外快</strong><br>这个容易理解，有了名气之后就可以有办法赚取各种外快，而且本身也并不可耻，不偷不抢，靠自身技术赚点零花钱有何不可？比如我，如果哪一天我很缺钱了（虽然现在也缺），我可以立刻想办法花点精力去赚更多的钱，只不过现在我选择了我最喜欢，最不受约束的方式而已。</p>
</blockquote>
<h2 id="Good-blogs"><a href="#Good-blogs" class="headerlink" title="Good blogs"></a>Good blogs</h2><h3 id="郭霖的专栏"><a href="#郭霖的专栏" class="headerlink" title="郭霖的专栏"></a><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">郭霖的专栏</a></h3><h3 id="酷壳-–-CoolShell-cn"><a href="#酷壳-–-CoolShell-cn" class="headerlink" title="酷壳 – CoolShell.cn"></a><a href="http://coolshell.cn/" target="_blank" rel="external">酷壳 – CoolShell.cn</a></h3><h3 id="stormzhang"><a href="#stormzhang" class="headerlink" title="stormzhang"></a><a href="http://stormzhang.com/" target="_blank" rel="external">stormzhang</a></h3><h2 id="自媒体2-0，比用户数、“10万-”更重要的是什么？-6"><a href="#自媒体2-0，比用户数、“10万-”更重要的是什么？-6" class="headerlink" title="自媒体2.0，比用户数、“10万+”更重要的是什么？[6]"></a>自媒体2.0，比用户数、“10万+”更重要的是什么？<sup>[6]<sup></sup></sup></h2><p><img src="http://img.mp.itc.cn/upload/20170331/7d09c8a43ce84aaf8d2eaa7d6e2f4619_th.jpeg" alt=""><br>自媒体从2012年8月份开始出现，全球都没有对应的发展模式，它解决了媒体行业牌照的事情，所以使传播进入了一个重构的状态。别的发达国家没有传媒牌照制度，所以它的产业结构和获利模型和中国是不一样的。中国自媒体进入了前所未见的发展状态中。经过几年的发展后，到2016年底，所谓1.0时代已经结束，我们现在进入了2.0，到了新的发展阶段，但并不是说我们进入了秋天或者冬天，这是一个阶段性发展的变化。</p>
<h3 id="比用户数更重要的是用户关系"><a href="#比用户数更重要的是用户关系" class="headerlink" title="比用户数更重要的是用户关系"></a>比用户数更重要的是用户关系</h3><p><img src="http://img.mp.itc.cn/upload/20170331/accbeb53e1294067a0c6484d28ea8ed2_th.jpeg" alt=""></p>
<p>我觉得比用户数更重要的是用户关系的建立。</p>
<p>这是我们看到的真实情况，所谓的粉丝数跟你真实拥有的用户互动关系不是对应关系。在座的各位都做自媒体，你会发现一个情况，当你的用户数在50万的时候，你的头条是5万、7万，打开率10%到15%左右。等到你的粉丝做到100万的时候，你的头条依然是6万、7万，用户的活跃和交互，并不跟你的用户数的增长呈正比关系。</p>
<p>我们现在的头条打开每周在20-22万左右，可能我在100万左右用户的时候就已经达到这个数据了，但没有因为到了200多万粉丝而实现一个同比的增长。这说明很多用户沉淀了，很多用户“僵尸”了，所以用户数本身并不能反映出一个自媒体真实的用户关系。</p>
<p><img src="http://img.mp.itc.cn/upload/20170331/2ff7242e283a49e5a333dc8d93c1e816_th.jpeg" alt=""></p>
<p>真实的用户关系是什么？一是价值观念认同。用户当中有多少是认同你的价值观念的。在2015年吴晓波频道一周年的时候我提出来：“认可商业之美，崇尚自我奋斗，乐于分享贡献，反对屌丝文化”。我们在那个时候就开始建立自己的价值观。如果没有价值观，所有的用户加在一起是乌合之众，没有任何价值。</p>
<p>其次，是在你这个自媒体中有没有形成一种社区和交互关系，用户愿不愿意为你买单、为你点赞、为你评论。用户关系大于我们现在所看到的用户数，这是第一个变化，我们需要重新建立我们跟用户之间的关系。</p>
<h3 id="比10万-更重要的是“百万单品”"><a href="#比10万-更重要的是“百万单品”" class="headerlink" title="比10万+更重要的是“百万单品”"></a>比10万+更重要的是“百万单品”</h3><p><img src="http://img.mp.itc.cn/upload/20170331/2bf892ebb8f746caac188f18aec4f4a3_th.jpeg" alt=""></p>
<p>1.0时代大家都一样的，第一你有多少粉丝，第二你有多少文章10万+。但是在未来我认为一个公号产生10万+的文章已经变成前提，不是自媒体价值最最重要的指标。最重要的是这10万+的文章最终在商业中产生多大的效应，我们不再为过程负责。</p>
<p>如果大家是玩票的性质，是一个个人的爱好，那没有关系，过程本身所产生的快乐已经把我所有的劳动给消化掉了。</p>
<p>但如果是一个已经职业化的自媒体，已经得到融资，或者说未来想要变成一个商业性的机构，或者未来想要上市，想要变成一个被并购的标的，那我们的用户数也好，我们的10万+也好，不再是一个结果，它是一个过程，是一个商业型组织完成产品化的一个过程。</p>
<p><img src="http://img.mp.itc.cn/upload/20170331/76b10e1e51e3493a9275b113d175dd88_th.jpeg" alt=""></p>
<p>所以，比10万+更重要的是你这篇文章，或是一年200篇10万+、500篇10万+最终兑现的商业价值。这就要重新思考内容本身和最终结果之间的一个关系。</p>
<p>在今天，我认为对一个自媒体来讲，比产生10万+更重要的是什么？更重要的是你这一篇或者一系列的10万+的文章，有没有可能产生一个人民币收入百万级的产品。它可能是一个知识付费的产品，是一个旅游的产品，是一个与品牌互动的产品。有没有可能产生100万销量级的产品，这件事情变得更加重要。从传媒化向产品化的迭代，是自媒体2.0时代的一个艰难的升级。</p>
<h3 id="比排名更重要的是“品类第一”"><a href="#比排名更重要的是“品类第一”" class="headerlink" title="比排名更重要的是“品类第一”"></a>比排名更重要的是“品类第一”</h3><p><img src="http://img.mp.itc.cn/upload/20170331/425d41bcdb5f460facf1d4bf981de602_th.jpeg" alt=""></p>
<p>去年底，吴晓波频道融资完成的时候估值20亿，我有一个朋友说：“吴老师你们的排名在300名以外，那么排在你前面的应该估值多少？”直到今天我们依然不是全中国用户量最大的，在座的有好多个都比我们要大。<br>我觉得大家都做得非常好。但是我觉得可能比排名也好，比用户数也好，更重要的是，在整个格局形成以后，你在单一品类中的影响力。<br>今天，中国社会圈层化的特点已经直接投影到了自媒体，自媒体的成长就是社会圈层化的结果，整个公共市场被解构了，大众品牌被解构了。</p>
<p><img src="http://img.mp.itc.cn/upload/20170331/c57d78569c9544c990c847b15efce6e6_th.jpeg" alt=""></p>
<p>自媒体无非是用内容的方式把用户吸引过来。所谓“变现大过天”是指，内容吸引过来的人，最终有没有可能沉淀形成一种商业价值和商业互动关系。<br>道理是一样的，商场通过打广告把人吸引进来，我们无非是通过内容把人吸引过来。那么就有价值、阶层化、商品需求的问题，沉淀后有没有可能把它变成商业价值？这是自媒体成长最自然的逻辑。</p>
<p>当这个变成前提以后，你的价值在哪里？</p>
<p>你的价值在于，当大众市场被解构以后，中国社会进入一个圈层化体系，与这个圈层中的同品类相比，你排第几名。所以品类变成最重要的，哪怕你做一个酒的产品，像我们吴晓波频道是做财经知识内容的，在这个品类中你在全国能够排到第几位？做到品类第一，变成比你的用户数更加重要的事情，只有你做到品类第一的时候才能被选择。</p>
<p>为什么刚才曹国熊说，从2012年8月份到2016年底，大的格局已经定了？因为在品类上的格局大概已经定下。目前排在前三位的，日子都还挺好过。但是三位以外，就变得越来越困难。</p>
<p>所以今天对所有的自媒体运营者来讲，这是一个专业化的问题，你有没有冲到前三名的能力。当你在前三名的时候，有没有能力筑起足够高的护城河或者说城墙，这回到企业竞争本身的关系上。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://blog.zhaiyifan.cn/2016/04/28/about-learning/" target="_blank" rel="external">计算机从业者的技术成长学习之路</a><br>[2]<a href="http://raychase.iteye.com/blog/1508053" target="_blank" rel="external">我为什么坚持写博客</a><br>[3]<a href="http://geek.csdn.net/news/detail/58708" target="_blank" rel="external">我为什么坚持写博客？</a><br>[4]<a href="https://www.forbes.com/sites/williamvanderbloemen/2016/01/11/why-i-require-everyone-at-my-company-to-blog/2/#34b8c3a83061" target="_blank" rel="external">Why I Require Everyone At My Company To Blog</a><br>[5]<a href="https://www.theatlantic.com/magazine/archive/2008/11/why-i-blog/307060/" target="_blank" rel="external">Why I Blog</a><br>[6]<a href="http://business.sohu.com/20170331/n485728335.shtml" target="_blank" rel="external">吴晓波：自媒体2.0，比用户数、“10万+”更重要的是什么？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/blog.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Improving your  ability of deep thinking by writing&lt;br&gt;Record your  learning and growing up&lt;br&gt;Gain new insights through reviewing old materials&lt;br&gt;Force myself to Using English&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Why I Insist on Using English</title>
    <link href="http://ipcreator.me/2017/03/29/English/why-i-insist-on-using-english/"/>
    <id>http://ipcreator.me/2017/03/29/English/why-i-insist-on-using-english/</id>
    <published>2017-03-29T01:19:06.000Z</published>
    <updated>2017-04-03T15:34:12.945Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/Learn-English.jpg" alt=""></p>
<blockquote>
<p>Using  is the only and the best way of learning English.<br>Program skills depend  on English.<br>You can appreciate and taste more precious beauty things , such as great mind, good books, fabulous music, touching movies…</p>
</blockquote>
<a id="more"></a>
<h2 id="Sentence-5"><a href="#Sentence-5" class="headerlink" title="Sentence[5]"></a>Sentence<sup>[5]<sup></sup></sup></h2><p>He who knows others is learned, and he who knows himself is wise.</p>
<p>To conquer yourself is more powerful than to defeat other people.</p>
<p>Study serve the practical purpose.</p>
<p>Knowledge is action, action is knowledge.</p>
<p>Don’t forget why start off, otherwise it is difficult to achieve the ultimate goal.</p>
<p>Many people start a career with a dream, then get busy forgetting it.</p>
<p>Without purpose, the days would have ended, as such days always end, in disintegration.</p>
<p>If you set your goals ridiculously high and it’s a failure, you will fail above everyone else’s success.</p>
<p><strong>Our plans miscarry because they have no aim. If one does not know to which port one is sailing, no wind is favorable.</strong></p>
<h2 id="Article-4"><a href="#Article-4" class="headerlink" title="Article[4]"></a>Article<sup>[4]<sup></sup></sup></h2><h3 id="Youth"><a href="#Youth" class="headerlink" title="Youth"></a>Youth</h3><p>Youth is not a time of life; it is a state of mind; it is not a matter of rosy cheeks, red lips and supple knees; it is a matter of the will, a quality of the imagination, a vigor of the emotions; it is the freshness of the deep springs of life.</p>
<p>Youth means a temperamental predominance of courage over timidity, of the appetite for adventure over the love of ease. This often exists in a man of 60 more than a boy of 20. Nobody grows old merely by a number of years. We grow old by deserting our ideals.</p>
<p><strong>Years may wrinkle the skin, but to give up enthusiasm wrinkles the soul. Worry, fear, self-distrust bows the heart and turns the spirit back to dust.</strong></p>
<p>Whether 60 or 16, there is in every human being’s heart the lure of wonders, the unfailing child appetite for what’s next and the joy of the game of living. In the center of your heart and my heart, there is a wireless station; so long as it receives messages of beauty, hope, cheer, courage and power from man and from the infinite, so long as you are young.</p>
<p>When your aerials are down, and your spirit is covered with snows of cynicism and the ice of pessimism, then you’ve grown old, even at 20; but as long as your aerials are up, to catch waves of optimism, there’s hope you may die young at 80.</p>
<h2 id="Music-8"><a href="#Music-8" class="headerlink" title="Music[8]"></a>Music<sup>[8]<sup></sup></sup></h2><p>Santana——Smooth</p>
<h2 id="Movie-9"><a href="#Movie-9" class="headerlink" title="Movie[9]"></a>Movie<sup>[9]<sup></sup></sup></h2><p>Billy Lynn’s Long Halftime Walk</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="/2017/01/20/MyView/English/how-to-use-english/">How to Use English</a><br>[2]<a href="/2017/01/13/MyView/English/english-is-a-friend-for-everybody/">English is a Friend for Everyone</a><br>[3]<a href="/2017/02/22/MyView/English/my-translations/">Quotes by Famous People</a><br>[4]<a href="/2017/02/21/MyView/English/beautiful-article-of-english/">Beautiful Articles of English</a><br>[5]<a href="/2016/12/31/MyView/English/view-of-english/">Beauty of English</a><br>[6]<a href="/2017/03/26/MyView/English/computer-english-words/">Professional Words of Computer</a><br>[7]<a href="/2017/02/22/MyView/English/love-words/">Love English Words</a><br>[8]<a href="/2017/03/27/MyView/Music/santana-smooth/">Santana——Smooth</a><br>[9]<a href="/2017/03/08/MyView/Movie/billy-lynn&#39;s-long-halftime-walk/">Billy Lynn’s Long Halftime Walk</a><br>[10]<a href="https://movie.douban.com/top250" target="_blank" rel="external">Douban Movie Top250</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/Learn-English.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using  is the only and the best way of learning English.&lt;br&gt;Program skills depend  on English.&lt;br&gt;You can appreciate and taste more precious beauty things , such as great mind, good books, fabulous music, touching movies…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="English" scheme="http://ipcreator.me/categories/English/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Jiang Tao——Only 2% Persons Can be Winner of AI</title>
    <link href="http://ipcreator.me/2017/03/29/AI/Business/Jiang-tao--only-2%25-persons-can-be-winner-of-AI/"/>
    <id>http://ipcreator.me/2017/03/29/AI/Business/Jiang-tao--only-2%-persons-can-be-winner-of-AI/</id>
    <published>2017-03-28T23:54:06.000Z</published>
    <updated>2017-03-29T01:13:16.967Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20170328163055792" alt=""></p>
<p>现在去xxx创业大街向天上扔一沓美金，砸到10个路人，有9个都自称投资人，其中8个投人工智能。</p>
<p>满嘴的Artificial Intelligence、摩尔定律、大数据、新算法、认知技术、计算机视觉、机器学习、自然语言处理、机器人技术、语音识别……要是不懂点Deep Learning基本原理，没看过雷·库兹韦尔的《奇点临近》都不好意思和别人打招呼。</p>
<p>事实真的是这样吗？23年后人工智能会统治地球吗？说实话，这些暂时和你没有太大关系，你只需要知道，</p>
<blockquote>
<p>人工智能的第一波红利已来临！</p>
</blockquote>
<a id="more"></a>
<p>在2016 Techcrunch论坛上，李开复曾经说过：“当人工智能识别人脸，超过人的时候，保安的工作至少一部分就没有了；当人工智能能够听懂语音的时候，客服和打电话卖东西人的工作就没有了；当人工智能能够更聪明的炒股的时候，很多人的工作就没有了。”</p>
<p>今年是人工智能发展的第61个年头，所有的投资机构都在谈论和布局该领域，但人工智能将在哪些产业爆发？传统企业又该如何挖掘第一桶金？要知道，<strong>每个风口都只有2%的人能够成为赢家。</strong></p>
<p>黑马学院特邀CSDN&amp;极客帮基金创始人蒋涛（黑马连营第5期连长），今晚9点-10点，将在103个黑马社群同步直播，讲讲人工智能的第一波红利！</p>
<h2 id="WHY-人工智能为什么会火？"><a href="#WHY-人工智能为什么会火？" class="headerlink" title="WHY 人工智能为什么会火？"></a>WHY 人工智能为什么会火？</h2><p>谈到科技革命，时下最火的莫过于人工智能。</p>
<p>我自己做技术社区，做了十几年，看到过一波一波的技术浪潮过来。当年移动互联网大潮过来的时候，我们原来在PC端做的事情，都可以用移动互联网的理念把它重新做一遍。简单来说，<strong>现在的人工智能就相当于原来移动互联网的概念，原来移动端做过的事情，现在又可以结合人工智能的方式再做一遍，而且会比之前更具颠覆性的效果。</strong> 毫不夸张地说，我认为人工智能所带给我们的冲击，将会像工业革命一样。</p>
<p>今年是「人工智能」诞生的61周年（注：1956年夏“人工智能之父”麦卡锡首次提出这个概念），同时也是它的第三次浪潮。这次浪潮和以往的前两次都不一样，这次有了实质性的突破。以前，相当于你想到对面去，但是面前有一堵墙；现在这堵墙被凿开了，之所以这么讲，是因为我有以下三点的观察思考：</p>
<p><strong>第一点：人工智能虽然还处于技术创新期，但到人工智能的普及期，我认为也就需要十到二十年的时间。</strong> 现在相当于移动时代的2005年，虽然第一部3G手机2007年才出现，但2005年我们已经很清楚2G是要到3G的。虽然<strong>人工智能还没有找到突破口，不知道会怎么商业化</strong>，但是大方向是有的。所以，现在只要你在这个领域冲到第一名，就会持续得到投资。</p>
<p>第二点：人工智能的基础已经充实，它是一个逻辑上的发展，这个发展可以分为三个阶段。</p>
<p>1）<strong>云计算</strong>，把信息基础云化，云计算基础设施的完善使得人工智能响应速度更快。</p>
<p>2）<strong>大数据</strong>，计算的过程中累积了数据，数据的极大丰富，使得基于大数据做出行为分析及短期预判成为可能，各个行业的信息化也为此奠定了良好的基础。</p>
<p>3）<strong>判断决策</strong>，对大数据的判断从而产生了更好的决策，决策实际上就是人工智能的进展。</p>
<p>现在我们的生活中就有很多计算机技术在做决定，坐车是滴滴在帮你调度；去餐馆是大众点评用算法把离你最近、人气最高的餐馆选出来等等，所以你的生活已经和人工智能相关了。</p>
<p>第三点：人工智能之所以取得重大的突破，除了前两个阶段的铺垫外，深度学习的发展也贡献了非常重要的力量。</p>
<h2 id="未来是“AIR”的世界"><a href="#未来是“AIR”的世界" class="headerlink" title="未来是“AIR”的世界"></a>未来是“AIR”的世界</h2><blockquote>
<p>未来你看到的是物理世界和虚拟世界的叠加，这就是VR和AR，也就是R时代；I时代是物联网时代；A时代也就是人工智能时代。</p>
</blockquote>
<p>其实你看到的世界很可能不是真的。为什么这么说？因为这是从视神经系统处理出来的。现在我们可以用计算机处理掉，叠加到视网膜上。比如：我不用递名片，只要念头一转，你的名片就应该自动出来了。那怎么能做到这样呢？就是把所有的信息都连接到网络上，这样物理世界和虚拟世界才能叠加在一起。人之所以和其他生物不一样是因为人会做思考、决策，比动物要高一个级别，具有抽象的能力，这是未来20年的大趋势。</p>
<p>AI技术体现在图像识别的突破上，更重要的可能是智能语言的突破，他能理解你讲的话，写出来的文字，甚至能理解照片，当做到这些的时候，行业就会产生变革。</p>
<blockquote>
<p>各个行业基本可分为4个阶段：数字化、数据化、自动化和智能化。越到后面它的武器越强。原来是长枪、大矛，练的是武功，后面就变成机关枪了，扫射的时候你会发现不一样。</p>
</blockquote>
<p>今年我们做了AI100，也叫人工智能100年。今年是人工智能的第61年，可能再过20年到40年，这个世界90%的人就不用工作了。在未来，我们要培养200万名数据分析师，因为决策和运营都是用数据驱动的。同时我们也会与投资相结合，帮助中国30万家企业走向智能化阶段。</p>
<h2 id="Where-第一波红利的三个产业"><a href="#Where-第一波红利的三个产业" class="headerlink" title="Where 第一波红利的三个产业"></a>Where 第一波红利的三个产业</h2><p>人工智能究竟会改变哪些领域？如何改变呢？</p>
<h3 id="自动驾驶"><a href="#自动驾驶" class="headerlink" title="自动驾驶"></a>自动驾驶</h3><p>任何领域有非常大的数据量，人工智能都可以用上。全世界和运输价值相关的公司，都已经相信无人驾驶的发展是必然的。所以在无人驾驶、电动车的框架之下，未来的司机基本上会被无人驾驶取代。</p>
<p>单车智能与智慧交通是无人驾驶技术发展的两个阶段。其中，单车智能是无人驾驶技术的基础，是实现无人驾驶终极形态的根本路径；车联网与智能交通则是推进无人驾驶技术发展的强力催化剂，将助力无人驾驶技术的普及。无人驾驶技术的成熟将最终构建城市智能驾驶生态圈，为未来出行提供新的解决方案。</p>
<h3 id="客服行业"><a href="#客服行业" class="headerlink" title="客服行业"></a>客服行业</h3><p>做金融服务的宜信，有1万多个客服，携程大概有7、8千个客服，每天负责就接各种投诉电话，每次都是被用户狂骂、抱怨，未来将有更多工业机器人替代这些低效率的人力。 人工智能客服系统主要是整合邮件、电话、微博、微信、网页、API接口、移动SDK等渠道在内的服务渠道，并统一自动分配工单，同时留存用户信息便于下次咨询时识别。</p>
<p>基本能做到：<br>1）24小时机器人客服在线，随时响应客户的相关资讯和需求；<br>2）建立客服机器人的内容库，用深度学习的方式自动回复重复问题；<br>3）接入人工时机器人给予部分回复建议，加快反馈速度；<br>4）接入内部办公系统，推动多部门协作反馈以及用户精准营销；<br>5）后台实时数据统计汇总，管理用户评价，进行数据挖掘和数据分析；</p>
<h3 id="医疗领域"><a href="#医疗领域" class="headerlink" title="医疗领域"></a>医疗领域</h3><p>医疗人员医院里有大量的临床病历数据，而且不断的产出数据。医疗方面的人工智能主要分为两部分：一是图像识别，应用于感知环节，其主要目的是将影像这类非结构化数据进行分析，获取一些有意义的信息；二是深度学习，应用于学习和分析环节，是AI应用的最核心环节，通过大量的影像数据和诊断数据，不断对神经元网络进行深度学习训练，促使其掌握“诊断”的能力。不管是什么病，图像只是其中一个参数，而治疗疾病则需要多个参数。此外，80%的数据属于非结构化数据，亦即报告+影像。未来，人工智能的使用将大大提高治疗效率。</p>
<h2 id="How-传统企业如何获得红利？"><a href="#How-传统企业如何获得红利？" class="headerlink" title="How 传统企业如何获得红利？"></a>How 传统企业如何获得红利？</h2><p>简单来说，现在的人工智能就相当于原来移动互联网的概念，原来移动端做过的事情，现在又可以结合人工智能的方式再做一遍，而且会比之前更具颠覆性的效果。毫不夸张地说，我认为人工智能所带给我们的冲击，将会像工业革命一样。</p>
<h3 id="传统制造业智能化设想"><a href="#传统制造业智能化设想" class="headerlink" title="传统制造业智能化设想"></a>传统制造业智能化设想</h3><p>传统企业的未来有两个方向：<br>第一，你有没有用户的服务和连接。<br>第二，在这个基础上，有没有做智能化决策和分析。<br>后来就是本身在生产线上的提升，生产线也面临着一个问题，你的控制有没有数据化。</p>
<p>在一些制造业工厂，升级之后有没有更好的成本上的控制。极客帮有个合作的LP，专门给小米做代工，他就给我看传统的生产线，就是一条生产线，都是自动化的设备。所以它能够做到手环40元钱，还有利润挣。就卖40元钱还能挣钱，而且挣得还不少。总的来说，我们看到的一个方向的趋势。</p>
<p><strong>对制造业来说，意义最大的是把它的制造过程，原来的控制系统做成一定的数据化，再看看能不能做规划。那些大规模生产的时代已经结束，一定要往前端走，差异化可能在产品设计上、包装上、服务上，从大生产时代到个性化时代，未来到一个智能化时代。</strong></p>
<p>“创业者埋头苦干的同时也要抬头看天。欢迎加入我的黑马连营战队，和我一起探寻人工智能趋势背后的行业商机！”</p>
<p>尽管人类是科技的创造者，却无法掌控其发展。我们所能做的就是掌握科技的发展趋势。人工智能浪潮来临，它将如何颠覆我们的工作和生活呢？</p>
<p>近日，黑马营7期营员、黑马连营第5期连长蒋涛与我们分享了他的看法。他认为，未来是AIR的世界，各个行业将会进入数字化、数据化、自动化和智能化4个阶段。</p>
<p>嘉宾介绍：<br>蒋涛：CSDN创始人，极客帮基金创始合伙人；黑马营7期营员，黑马连营第5期连长；有24年软件开发经验，其创立的CSDN是全球最大的开发者社区；同时具备投资人身份，先后投资了聚合数据、IT桔子等90余家高科技创业公司。<br>行业：人工智能<br>关键词：趋势洞察家、技术达人、极客范儿</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://geek.csdn.net/news/detail/189314" target="_blank" rel="external">人工智能风口只有2%的人能够成为赢家！——CSDN蒋涛</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170328163055792&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在去xxx创业大街向天上扔一沓美金，砸到10个路人，有9个都自称投资人，其中8个投人工智能。&lt;/p&gt;
&lt;p&gt;满嘴的Artificial Intelligence、摩尔定律、大数据、新算法、认知技术、计算机视觉、机器学习、自然语言处理、机器人技术、语音识别……要是不懂点Deep Learning基本原理，没看过雷·库兹韦尔的《奇点临近》都不好意思和别人打招呼。&lt;/p&gt;
&lt;p&gt;事实真的是这样吗？23年后人工智能会统治地球吗？说实话，这些暂时和你没有太大关系，你只需要知道，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人工智能的第一波红利已来临！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Jiang Tao" scheme="http://ipcreator.me/tags/Jiang-Tao/"/>
    
      <category term="Winner" scheme="http://ipcreator.me/tags/Winner/"/>
    
  </entry>
  
  <entry>
    <title>Yann LeCun——Prediction Learning is the Future of AI</title>
    <link href="http://ipcreator.me/2017/03/29/AI/Business/yann-leCun-predict-learning-is-the-future-of-AI/"/>
    <id>http://ipcreator.me/2017/03/29/AI/Business/yann-leCun-predict-learning-is-the-future-of-AI/</id>
    <published>2017-03-28T23:36:06.000Z</published>
    <updated>2017-03-29T01:13:18.861Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20170323205555509" alt=""></p>
<p>在一票难求的Yann LeCun清华演讲当天上午，LeCun本人现身中国科学院自动化研究所，参与了一个“限制级”的高端私享会，CSDN记者整理了以下三条重要摘要。</p>
<ol>
<li>我对什么感兴趣</li>
<li>我怎样看Human-like learning</li>
<li>请把自己当做一名科学家</li>
</ol>
<a id="more"></a>
<h2 id="我对什么感兴趣"><a href="#我对什么感兴趣" class="headerlink" title="我对什么感兴趣"></a>我对什么感兴趣</h2><blockquote>
<p>非监督学习以及预测学习</p>
</blockquote>
<p>迄今为止，在机器学习以及深度学习领域，我们已经取得了一些成功，这些成功都依赖于监督学习。监督学习有它本身的局限性，因为需要很多数据，并且这些数据需要经过人工标注，数据的背后需要很多的知识作为支撑。所以问题就转化成了我们如何让机器像动物和人类一样能够从现实世界自动学习，这样一来我们就需要搞清楚动物和人类学习背后的原理。</p>
<p>有些人认为，人类的学习方式是增强学习。而我个人认为，人类的学习方式是<strong>非监督学习，且是以预测为驱动的。</strong> 所以我们的大脑其实是一个预测引擎，从一定程度上说，能够预测是机器通往智能道路上的一道关卡。如果我们知道如何用深度学习或者其他的算法使得机器能够通过预测来解决问题的话，那么我们在制造更智能的机器的路上就取得了一个非常大的进步。</p>
<p>以科学家的视角来看，我对智能的本质，不论是人类智能还是人工智能都很感兴趣。从实用的角度来说，这也并不冲突，在很多的人工智能应用中，机器需要对这个世界有广泛的知识储备，甚至机器需要能够理解他们自己。举例来说，如果你想要开发一个对话系统或者虚拟助手，这种很有趣且很实用的系统。这种时候，机器就需要如前面所说的，对世界有的广泛的知识储备。据我所知，这种量级的知识储备不能够通过监督学习或者增强学习来达到。这也是我对非监督学习以及预测学习感兴趣的原因。</p>
<h2 id="我怎样看Human-like-learning"><a href="#我怎样看Human-like-learning" class="headerlink" title="我怎样看Human-like learning"></a>我怎样看Human-like learning</h2><blockquote>
<p>如果你说你现在就能做出这样的机器…<br>Come on！别骗自己了</p>
</blockquote>
<p>因为现在我们还不知道如何让机器像人类一样思考，所以当我们讨论Human-like machine的时候，我们是在讨论一个还不存在的东西。所以就出现了正反两派。但是在我看来，那些现在就声称他们能够或者已经做出Human-like learning的人是夸大其词了。但Human-like learning确实是一个重要的研究方向。</p>
<p>要达到Human-like learning，或许需要监督、非监督以及增强学习的结合。拿预测做例子，比如说我放一个苹果在桌子上，然后我离开了，苹果可能会呆在桌子上也可能会滚下来，除非我们有一个预测模型，否则到底会发生什么是很难预测的。对于我们人类来说，如果我们知道这个桌子承不住这个苹果的话，苹果就会掉下来。所以说我们到底要如何教会机器理解这个世界，不仅要考虑到这个世界很大，还要考虑到这个世界充满了巧合和外力作用。</p>
<p>我们用力推一个东西它会动，推另一个东西它可能不会动。所以说对事物的区分和预测是我们人类对世界认知的一个体现。问题在于，这种预测不是任务导向型的（Task oriented ），而是任务独立型的（Task independent），所以有很多时候机器学到的事情可能对我们没有用，这就是为什么我们需要监督学习和增强学习来让机器学习对我们有用的事情。</p>
<p>现在经典的人工智能系统都是监督学习与增强学习的结合，这是很多研究人员、很多后起之秀正在从事的领域，是现在很多AI系统的一个共性。相信在座的很多人都从事过人工智能在感知层面的工作，我们从现实世界中提取信号以供机器学习，这是人工智能的第一步，还有第二步就是让机器能够对现实世界中将要发生的事情进行预测，以及对事物将会保留在何种状态进行预测。</p>
<p>所以近期大家越来越强调AI系统的整体性，即perception、prediction、reasoning、planning以及底层的监督、非监督、强化学习算法。AI一直以来在游戏方面表现得非常活跃，现在AI也能参与到一些实时的策略类游戏中了，例如星球大战这类游戏。这是对AI系统的一个很好的测试，因为接下来这些系统将会被用到现实世界中，这是一个非常令人激动的研究方向。</p>
<h2 id="请把自己当做一名科学家"><a href="#请把自己当做一名科学家" class="headerlink" title="请把自己当做一名科学家"></a>请把自己当做一名科学家</h2><blockquote>
<p>首批造飞机的工程师一定懂仿生学</p>
</blockquote>
<p>对于深度学习的研究者来说，你们很幸运处于最好的时代。我相信，几年之后，人工智能将会对交通、医疗、生物、科学等诸多领域产生革命性的改变，而你们将要参与其中。</p>
<p>当代科学有三大未解问题：宇宙由什么组成、生命的本质是什么、人脑是如何工作的。我们正在从事的，正是这个探寻本质的过程。人工智能表面看起来是计算机科学相关的问题，但其实它关系到更多更广泛的科学研究。就像多年以前工程师们试图造飞机时一样，在一切都还未知的情况下，工程师需要考虑很多与工程制造看似不相关的问题，例如生物学的理论等。</p>
<p>我们虽说是计算机科学研究人员，但由于人工智能涉及到的范围之广，研究者对其他相关领域的涉猎也非常重要。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="http://geek.csdn.net/news/detail/188777" target="_blank" rel="external">CNN之父Yann LeCun：预测学习才是AI的未来</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170323205555509&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在一票难求的Yann LeCun清华演讲当天上午，LeCun本人现身中国科学院自动化研究所，参与了一个“限制级”的高端私享会，CSDN记者整理了以下三条重要摘要。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我对什么感兴趣&lt;/li&gt;
&lt;li&gt;我怎样看Human-like learning&lt;/li&gt;
&lt;li&gt;请把自己当做一名科学家&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Yann LeCun" scheme="http://ipcreator.me/tags/Yann-LeCun/"/>
    
      <category term="Prediction Learning" scheme="http://ipcreator.me/tags/Prediction-Learning/"/>
    
  </entry>
  
  <entry>
    <title>The Legend of 1900</title>
    <link href="http://ipcreator.me/2017/03/28/MyView/Movie/the-legend-of-1900/"/>
    <id>http://ipcreator.me/2017/03/28/MyView/Movie/the-legend-of-1900/</id>
    <published>2017-03-28T11:38:18.000Z</published>
    <updated>2017-03-29T04:18:01.307Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>Make you cry，laugh  touching and thinking</strong><br>Crying for  his loneliness and ending of  the story.<br>Touching by the wonderful melody.<br>Laughing for those humor lines.<br>Deep thinking: In the big city, What’s your piano ? Where is your Virginia ?</p>
</blockquote>
<p><img src="https://img1.doubanio.com/view/movie_poster_cover/lpst/public/p511146957.webp" alt=""></p>
<a id="more"></a>
<p>导演: 朱塞佩·托纳多雷<br>编剧: 亚利桑德罗·巴里克 / 朱塞佩·托纳多雷<br>主演: 蒂姆·罗斯 / 普路特·泰勒·文斯 / 比尔·努恩 / 梅兰尼·蒂埃里 / 阿尔贝托·巴斯克斯<br>类型: 剧情 / 音乐<br>制片国家/地区: 意大利<br>语言: 英语 / 法语<br>上映日期: 1998-10-28(意大利)<br>片长: 165分钟 / 120分钟(法国版) / 169分钟(加长版)<br>又名: 声光伴我飞(港) / 一九零零的传奇 / 1900海上钢琴师 / 传奇1900 / The Legend of 1900<br>IMDb链接: <a href="http://www.imdb.com/title/tt0120731" target="_blank" rel="external">tt0120731</a></p>
<p>本片讲述了一个钢琴天才传奇的一生。</p>
<p>　　1900年，Virginian号豪华邮轮上，一个孤儿被遗弃在头等舱，由船上的水手抚养长大，取名1900（蒂姆•罗斯 饰）。1900慢慢长大，显示出了无师自通的非凡钢琴天赋，在船上的乐队表演钢琴，每个听过他演奏的人，都被深深打动。爵士 乐鼻祖杰尼听说了1900的高超技艺，专门上船和他比赛，最后自叹弗如，黯然离去。<br>　　可惜，这一切的事情都发生在海上，1900从来不愿踏上陆地，直到有一天，他爱上了一个女孩，情愫在琴键上流淌。他会不会为了爱情，踏上陆地开始新的生活，用他的琴声惊艳世界？他将怎样谱写自己非凡的人生。 ©豆瓣</p>
<h2 id="大人者，不失其赤子之心者也"><a href="#大人者，不失其赤子之心者也" class="headerlink" title="大人者，不失其赤子之心者也"></a><a href="https://movie.douban.com/subject/1292001/" target="_blank" rel="external">大人者，不失其赤子之心者也</a></h2><p>市侩们总是抱着捧杀的态度来看待天才的，这也无足多怪。重要的是，天才如何看待自己的选择。</p>
<p>许多人把实现自我价值同“功成名就”和“飞黄腾达”联系在一起，其中不乏某些天才。他们为此奋斗一生，也许终能得偿所愿。然而，功成名就之后呢？罗马帝国的战胜者凯旋时，一个奴隶会在他耳边轻轻私语：“一切荣华富贵，都是过眼烟云！”这道出了所有成功者风光无限的背后那不为人知的空虚——曾经追求的，固然已经得到，现在拥有的，也将归于破灭。其中的幸运者，还能像张翰那样“人生贵得适意尔，何能羁宦数千里以要名爵!”全身而退；不幸者，恐怕只能哀叹“吾欲与若复牵黄犬俱出上蔡东门逐狡兔，岂可得乎！”人生的荣辱，不过是一个围城。城里的人想冲出去，城外的人想冲进来。待到一切荣光都已失去，他们还会为当初的选择而感到骄傲，抑或后悔吗？</p>
<blockquote>
<p>“你知道琴上88个键一个不多一个也不少，琴键是有限的，但你是无限的，在这些键上所能创造出来的音乐，那才是无限的，这个我喜欢，也是我愿意做的，但是在舷梯上，摆在我面前的琴键有成千上万，永远也数不完的琴键”，“而在这个无限大的键盘上，你根本就无法去演奏”，“天呐，你没有看见那些街道吗？有上千条！你怎么去选择那一个？”。窝囊废似的一番话，彻底关死了1900通往成功与显赫的道路。似乎很难想象这样一个才华横溢的人会选择一条破船作为归宿，甚至宁愿最终被几吨炸药所终结。其实，1900是幸运的，他不入围城，自觉放弃未来的诱惑与烦嚣，换来对已经拥有的执着与坚守。也就无怨无悔，虽死何憾？老子云：知其雄 ，守其雌 ，为天下溪。为天下溪 常德不离 复归於婴儿。想必直到生命终结的那一刻，1900依然可以骄傲地宣称：“大人者，不失其赤子之心者也。”</p>
</blockquote>
<h2 id="俗人理解不了的幸福"><a href="#俗人理解不了的幸福" class="headerlink" title="俗人理解不了的幸福"></a><a href="https://movie.douban.com/subject/1292001/" target="_blank" rel="external">俗人理解不了的幸福</a></h2><p>大概只有小号手是愿意聆听1900的内心而非琴声的人，他不理解他，但是他尊重他。他用尊重成全了1900完整的独立。我看到有人说如果他是那胖子他就会把1900敲昏然后拖下船。我想这样的想法也就注定他成不了那个胖子，成不了1900唯一的真正的朋友。</p>
<p>如果我们较真一点，假设小号手真的把1900弄下船了，故事将怎样延伸？我们都知道，落魄的小号手没有能力去为朋友找一艘新的船，找88个琴键和尽头。1900将无可避免被磨去棱角和平庸，落入红尘变成一个凡人。</p>
<p>活着，还是活得安心。这也是个问题。凡人的选择是无论如何先活下去再说，”活着”这件事情本身比什么都重要。而天才则把心灵的舒适看得更重，生死则次之。所以凡人可以忍辱，天才却情愿玉碎。每一种人都获得了他最看重的东西，说起来谁也不比谁亏。</p>
<p>差异导致孤独。葆存了差异性的ET在承受异样目光的同时也承受着巨大的孤独，远超出凡人的孤独。凡人们如我们虽然也还都残留一些差异，但大致面貌八九不离十。我们失恋了后觉得痛苦比谁的都大，我们拥抱心爱的人自认比谁都幸福。但一个残酷的事实是：每个人的痛苦和幸福都没什么区别。我们在不断重复，千篇一律。</p>
<p>我们丢了个性却换来了共鸣。我们借助艺术寻找通感，在人性中相交叉的部分，抹着眼泪互相慰藉，或者说，互相平衡（原来有人比我还惨啊，这下心里舒坦多了）。而被称为天才的人站在人群之外，忧郁地注视这群有些像他又不是他的物种。用他们ET的本能将那些交叉部分，提炼、放大、直抵内心。那些永远无法交叉的部分，则作为孤独的源头，令他们永远无法融入人群。他们只有躲在自己的轮船里，躲在自己的内心世界里，孤独地活着，然后死去。</p>
<h2 id="我们无处安放的孤独"><a href="#我们无处安放的孤独" class="headerlink" title="我们无处安放的孤独"></a><a href="https://movie.douban.com/review/1316127/" target="_blank" rel="external">我们无处安放的孤独</a></h2><p>我一直觉得1900的一生是存在主义思想的体现，他藐视规则，藐视这个社会认可的规则，他害怕上岸其实是拒绝上岸，藐视上岸。他重自身的存在大于外界对自身的认可，他可以轻易打败爵士乐的开山祖师并对他表示鄙夷，他可以靠他的才华赚取无数的名利但是他拒绝音乐与自身的分离，他可以用音乐去探究所有人的心灵，可以在音乐里去旅行，可以寻觅到自己的爱情，但是他没有常人那样去要去追，他轻轻地将这些丢进了大海，他将迈向陆地的脚收回。</p>
<p>在存在主义者看来，人生活在一个与自己对立的、失望的世界之中，人在世界上的地位是不确定的。绝对自由的人也是烦恼和无所依靠的孤独者。人虽然有选择的自由，但他面对的未来的生活却是混沌而没有目标的。他只是盲目地走向未来，他只知道人生的真实的终结就是死亡。死亡作为人生的最后归宿，对于个人的存在具有非常重要的意义。 所以存在主义者都是悲观者，在他们眼里，人生是一场悲剧。</p>
<blockquote>
<p>“城市那么大，看不到尽头，我停下来不是因为所见是因为所不见，是因为看不见的东西。连绵不绝的城市什么都有，就是没有尽头，我需要看见世界的尽头。上了岸，何去何从？爱一个女人，住一间屋，买一块地，望一个景，走一条死路，太多的选择我无所适从。漫漫无尽，思前想后你不怕精神崩溃？那样的日子怎样过？我无法遗弃这艘船，宁可遗弃自己的生命。”</p>
</blockquote>
<p>后来我才知道生活的大多数时候其实是孤独的，是我们心里无处安放的孤独，不被这个世界所认可的孤独。1900是孤独的，所以他选择一辈子不上岸，和那座海上浮城共生共死，而我们呢？我们没有一座属于自己的城，让我们来安放我们的孤独，让我们来逃避自己不喜欢的一切，所以我们比1900更孤独更可怜。</p>
<h2 id="微尘世界，我们都已是最好的钢琴手。"><a href="#微尘世界，我们都已是最好的钢琴手。" class="headerlink" title="微尘世界，我们都已是最好的钢琴手。"></a><a href="https://movie.douban.com/review/1971957/" target="_blank" rel="external">微尘世界，我们都已是最好的钢琴手。</a></h2><p>1900代表着一种理想，代表着这个尘世中的多数人，注定不会付诸行动，却会始终心怀向往的理想。矗立在那里，自由，决绝，而悲伤。</p>
<p>我们是生活在“外面的世界”里的人。这个世界的意义在于“传承”。就像一个游戏，每个人都是其中的玩家，然而获得的任务，却是如何使这个游戏永远存在。赡养父母，繁衍后代，诸多必须背负的责任令前行显得缓慢而艰难。然而我们的人生对于整个游戏而言，存在的时间或许只有一秒，或者更短。也唯有越短暂，这个游戏的运行时间才会越长，才有可能，“永不结束”。<br>这样一想会不会又心有不甘呢？辛苦奋斗的一生，其实不过一粒微尘，轻得仿佛随时都会消失。<br>然而在闭上眼的那一瞬还会不会含笑着想起，自己的孩子在不久前，正带领他们的孩子在绿草地上放起风筝；会不会含笑着想起，自己曾拥有良人在侧，从此不再无枝可依；会不会含笑着想起更久远的从前，父母曾令你无忧无虑，而那些萌生的小情绪，或许唯有感慨地大笑出声，无奈地摇摇头，道一句，那时真小。<br>会不会想起那些温暖的片段，想起自己曾经的付出与所得，带着回望的沧桑，感怀，和崭新的希望。<br>　　　　<br>我们为什么不会像1900一样，选择在漫天火光中永沉海底。这样壮烈，却获得永生的自由？</p>
<blockquote>
<p>因为，因为我们一直生活在这个“外面的世界”，清楚地看见它的混乱，却因为某一瞬间体验到的那些温情，那些无以伦比的美好，而心甘情愿地忍受着它所给予的伤害，努力弹奏出最华美的人生乐章。</p>
</blockquote>
<p>我们或许从来都不是天才，但是我们至少能做到勤恳、踏实。我们从坚硬和纯白开始，学会圆滑，学会世故，但内心深处，终究会一直记得，这一生所做的种种妥协，不过是为了在这个微尘世界，在这架上帝给予的钢琴上，创作出独属于自己的旋律与琴音。</p>
<h2 id="我们都是宅男"><a href="#我们都是宅男" class="headerlink" title="我们都是宅男"></a><a href="https://movie.douban.com/review/1238757/" target="_blank" rel="external">我们都是宅男</a></h2><p>我们或许没有《海上钢琴师》中的1900看的更加清楚，他一生生活在邮轮上，他不愿离开一个让他感到安定自由、无忧无虑的空间，他永远没有踏上陆地，开启他的“远大前程”，在我们看来，他是自闭的，但是，他也是最清醒的，在最后无比绚烂的死亡中，他走的孤独而坦然。</p>
<p>和1900对无限的恐惧相反，现代人正是在追逐着无限，我们贪大，贪全，贪广，房子要住大的，哪怕被每月的房贷压的生活质量下降；交际圈要交广些，哪怕每天疲于奔命于并不让自己愉快的应酬；旅游要走遍世界，哪怕其实只是疲惫的赶着在一个又一个景点的人群中拍照；炒股也有“不涨到翻倍不痛快”，哪怕每天被指数折磨的大喜大悲。还是看看这个“宅男”1900，反观自己，其实我们都是宅男，我们都是在自己营造的世界里生活，我们总有个无形或有形的圈子，但是似乎“开疆扩土”是人的本能，我们总是希望这个世界更大些，更广些。其实，并不是因为你走遍了这个城市的大街小巷，你的世界便扩展到了整个城市，哪怕真的这样，你也只是有了个城市这样一个更大的宅子。所以，1900不贪求太多，他一生都在一艘船上生活，这是有限的；但是他一生都有音乐相伴快乐的生活，这是无限的，快乐而自在的生活才是无限的。正如我们拼命拓展的交际网永远是有限的，但是和其中几个真正的知己在一起的快乐才是无限的。</p>
<p>1900在邮轮上有自己的快乐，也伴随着一些悲伤，但是，快乐从来不是仅仅以空间的广度来评判的，就如你有一笔钱，可以买大房子简装修，也可以买小房子按照自己的意愿精装修（当然，精装修的意义不是买一堆豪华家俱的堆砌）。1900选择在一个相对狭小的世界里精心构筑他的世界，安逸而愉快。而在我们看来，这样的小小的快乐永远是“有病”的，就如我们如果看到一个人沉溺于数学而废寝忘食，会认为他是一个科学怪人，为他随时可能的英年早逝而悲哀；如果看到一个人长期执着的在农村搞什么社会试验而履受挫折，会认为他是一个理想主义者，为他干些“不实际”的事情而悲哀。诸如此类的事情还有很多，我们总是很自恋，常常看到他人沉浸于一些比较“独特”的事物而不问世事而感到“悲哀”，而对他们表示不解和“同情”，特别当这些人甚至为之折寿或是如1900那样“找死”后，更是如此。其实，生活方式本来没有定义，其实想想，1900在一艘船上就活的那么滋润，一些人一天到晚在屋子里闷头看武侠小说、漫画书就那么快活，我们这些号称精神健康，性格乐观的人却常常无名的不停唠叨“真郁闷”，这时的我们是不是会突然感到一丝沮丧，而对宅男们有些羡慕，同时意识到，其实我们都不过是在自己的世界里有喜有乐的宅男。</p>
<h2 id="漂流在大海上的音乐浮城"><a href="#漂流在大海上的音乐浮城" class="headerlink" title="漂流在大海上的音乐浮城"></a><a href="https://movie.douban.com/review/1000830/" target="_blank" rel="external">漂流在大海上的音乐浮城</a></h2><p>对于1900而言，音乐，是用来娱乐自己的——他永远为了自己而弹奏着，永远不让自己的音乐和自己分离。</p>
<p>1900的存在很特别么？未必，他的生命因为没有踏足过真实世界而显得尤为纯净和清澈，甚至纯净和清澈得不能够生活在这个真实的现实世界里。最适宜他生活的地方，是Virginian，一个漂浮在海上的乌托邦，一个能够让1900这样纯粹且单纯的音乐圣徒栖息的地方。他不能，也不应该走进我们的世界，我们的世界对于1900而言，太肮脏，太复杂了。</p>
<p>究竟是1900把自己禁锢在狭小的空间里了，还是我们让陆地桎梏了我们自身？城市里有着成千的街道，我们迷失于其中，看不到天的尽头，而大海以其广博的胸襟，容忍并珍藏了1900这个特异的存在，也甚至是因为大海的广博，1900看到了世界的尽头。</p>
<blockquote>
<p>当影片行进到最后，Max问及1900为何不愿意离开Virginian的那一瞬间，我们就不难理解1900的答案了——琴键太大，音乐无从而生；城市太大，我们无从而生……</p>
</blockquote>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1]<a href="https://movie.douban.com/subject/1292001/" target="_blank" rel="external">海上钢琴师 La leggenda del pianista sull’oceano (1998)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Make you cry，laugh  touching and thinking&lt;/strong&gt;&lt;br&gt;Crying for  his loneliness and ending of  the story.&lt;br&gt;Touching by the wonderful melody.&lt;br&gt;Laughing for those humor lines.&lt;br&gt;Deep thinking: In the big city, What’s your piano ? Where is your Virginia ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img1.doubanio.com/view/movie_poster_cover/lpst/public/p511146957.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="English" scheme="http://ipcreator.me/tags/English/"/>
    
      <category term="Movie" scheme="http://ipcreator.me/tags/Movie/"/>
    
  </entry>
  
  <entry>
    <title>The Beauty of Life</title>
    <link href="http://ipcreator.me/2017/03/28/MyView/Original/beauty-of-life/"/>
    <id>http://ipcreator.me/2017/03/28/MyView/Original/beauty-of-life/</id>
    <published>2017-03-28T11:38:18.000Z</published>
    <updated>2017-03-28T15:33:10.225Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/beautiful-switzerland-43.jpg" alt=""></p>
<blockquote>
<p>训练美感，先学会欣赏，与其寻找或等待，不如自己创造。</p>
<p>人生如歌，有高潮也有低潮，高潮有高潮时的快感，低潮有低潮时的风景，美好的事物太多，时光太短暂，注意力太宝贵，聚焦并追逐梦想，享受人生过程，无暇也无需他顾。</p>
<p>Programmer Vs Pianist，都需要创造力，都需要持久的刻意练习以升级到更高水准，都属于超级个体类别，哦，对了，还都需要一个好的Keyboard还都喜欢Music:)</p>
</blockquote>
<a id="more"></a>
<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p><img src="https://img1.doubanio.com/lpic/s27653128.jpg" alt=""></p>
<h3 id="数学之美"><a href="#数学之美" class="headerlink" title="数学之美"></a><a href="https://book.douban.com/subject/26163454/" target="_blank" rel="external">数学之美</a></h3><blockquote>
<p>读了“数学之美”，才发现大学时学的数学知识，比如马尔可夫链、矩阵计算，甚至余弦函数原来都如此亲切，并且栩栩如生，才发现自然语言和信息处理这么有趣。</p>
<p>把高深的数学原理讲得更加通俗易懂，让非专业读者也能领略数学的魅力。读者通过具体的例子学到的是思考问题的方式 —— 如何化繁为简，如何用数学去解决工程问题，如何跳出固有思维不断去思考创新。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s7019271.jpg" alt=""><br><a href="https://book.douban.com/subject/7064456/" target="_blank" rel="external">研究之美</a></p>
<blockquote>
<p>《研究之美》是计算机科学大师、“算法分析之父”高德纳（Donald E.Knuth）在20世纪70年代旅居挪威时撰写的适用于计算机科学的一种全新基础数学结构的情景小品。全书以一对追求自由精神生活的青年男女为主人公，展开了一段对于该种全新结构的发现和构造的对白。在此过程中，本书充分展示了计算机科学的从业人员进行全新领域探索时所必备的怀疑、立论、构造、证明、归纳、演绎等逻辑推理和深入反思的能力。《研究之美》可以看作是读懂高德纳的艰深著作《计算机程序设计艺术》和《具体数学》的钥匙。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s27881184.jpg" alt=""></p>
<h3 id="科学之美——从大爆炸到数字时代"><a href="#科学之美——从大爆炸到数字时代" class="headerlink" title="科学之美——从大爆炸到数字时代"></a><a href="https://book.douban.com/subject/26270565/" target="_blank" rel="external">科学之美——从大爆炸到数字时代</a></h3><blockquote>
<p>欧瑞尔为我们讲述了古希腊人如何基于音乐和谐与完美几何的理念为这个世界建立物理模型；这一理想模型随后被另一同样美丽的建模项目所取代，而该项目的基础正是牛顿的“理性力学”，该理论将宇宙规律简化为一些优雅的方程。欧瑞尔进而开始转向介绍当代前沿物理学理论，诸如超对称弦理论。与之前的众多理论一样，这一理论的提出与流行也再次受到了人们深层审美观的影响。他清晰地为我们阐明了物理学家们在历史上的考察结果，以及近期的研究成果，包括希格斯玻色子的发现。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s6882903.jpg" alt=""></p>
<h3 id="物理学之美"><a href="#物理学之美" class="headerlink" title="物理学之美"></a><a href="https://book.douban.com/subject/6782542/" target="_blank" rel="external">物理学之美</a></h3><blockquote>
<p>《物理学之美》从浩淼的物理学历史中，寻找最有典型意义的物理学理论发现的过程，深入浅出地分析在不同时代，物理学家对物理学之美的观点，探讨他们如何利用自己的审美判断来建构物理理论，以及他们的困惑和成功。作者综合分析不同时代物理学之美的演变和进化，最后得到物理学之美的最高层次：数学结构美。《物理学之美》史料丰富，行文自然流畅，整体归纳性强，加上数百幅珍贵图片，给读者以美的享受和智慧的启迪。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s27316094.jpg" alt=""></p>
<h3 id="宇宙之美"><a href="#宇宙之美" class="headerlink" title="宇宙之美"></a><a href="https://book.douban.com/subject/25919532/" target="_blank" rel="external">宇宙之美</a></h3><blockquote>
<p>从宇宙诞生到宇宙未来，以全彩大开本的精美装帧，讲述浩瀚宇宙的神秘之美。每一个天体都在多维空间中书写自己的故事。<br>从太阳到太阳系的其他成员，再到恒星、星团、银河系和其他星系，7个章节全方位介绍宇宙天体的基础数据、形态特征、运行规律等知识。</p>
</blockquote>
<h2 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h2><p><img src="https://img5.doubanio.com/lpic/s9233126.jpg" alt=""><br><a href="https://book.douban.com/subject/3004255/" target="_blank" rel="external">编程之美</a></p>
<blockquote>
<p>这本书收集了约60道算法和程序设计题目，这些题目大部分在近年的笔试、面试中出现过，或者是被微软员工热烈讨论过。作者试图从书中各种有趣的问题出发，引导读者发现问题，分析问题，解决问题，寻找更优的解法。本书的内容分为下面几个部分：<br>（1）游戏之乐：从游戏和其他有趣问题出发，化繁为简，分析总结。<br>（2）数字之魅：编程的过程实际上就是和数字及字符打交道的过程。这一部分收集了一些好玩的对数字进行处理的题目。<br>（3）结构之法：汇集了常见的对字符串、链表、队列，以及树等进行操作的题目。<br>（4）数学之趣：列举了一些不需要写具体程序的数学问题，锻炼读者的抽象思维能力。<br>书中绝大部分题目都提供了详细的解说。 每道题目后面还有一至两道扩展问题，供读者进一步钻研。<br>书中还讲述了面试的各种小故事，告诉读者微软需要什么样的技术人才，重视什么样的能力，如何甄别人才。回答读者关于IT业面试，招聘，职业发展的疑问。这本书的很多题目会出现在IT 行业的各种笔试、面试中，但这本书更深层的意义在于引导读者思考，和读者共享思考之乐，编程之美。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s3337523.jpg" alt=""></p>
<h3 id="代码之美"><a href="#代码之美" class="headerlink" title="代码之美"></a><a href="https://book.douban.com/subject/3224524/" target="_blank" rel="external">代码之美</a></h3><blockquote>
<p>《代码之美》33章，有38位作者，每位作者贡献一章。每位作者都将自己心目中对于“美丽的代码”的认识浓缩在一章当中，张力十足。38位大牛，每个人对代码之美都有自己独特的认识，现在一览无余的放在一起，对于热爱程序的每个人都不啻一场盛宴。虽然本书的涉猎范围很广，但也只能代表一小部分在这个软件开发这个最令人兴奋领域所发生的事情。</p>
</blockquote>
<p><img src="https://img5.doubanio.com/lpic/s6509546.jpg" alt=""><br><a href="https://book.douban.com/subject/6439420/" target="_blank" rel="external">数据可视化之美</a></p>
<blockquote>
<p>在《数据可视化之美》中，20多位可视化专家包括艺术家、设计师、评论家、科学家、分析师、统计学家等，展示了他们如何在各自的学科领域内开展项目。他们共同展示了可视化所能实现的功能以及如何使用它来改变世界。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s4476325.jpg" alt=""><br><a href="https://book.douban.com/subject/5269219/" target="_blank" rel="external">数据之美</a></p>
<blockquote>
<p>“数据被证实好比下一代计算机应用的‘因特尔内核’。在本书中，各业界领袖描述了他们的项目如何通过新的方式来驾驭数据的力量。对于任何对未来关于数据和问题解决感兴趣的读者来说，本书是必读的佳作。”<br>——Tim O’Reilly, O’Reilly Media公司创始人兼CEO<br>探索数据的范围可以多么广泛，其工作可以多么美丽！通过这部个人故事集合，在这个领域的39个最佳数据实践者阐释了他们如何为各种项目开发简单优雅的解决方案，包括从火星着陆探测器到Radiohead视频的制作……</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s4018061.jpg" alt=""></p>
<h3 id="架构之美"><a href="#架构之美" class="headerlink" title="架构之美"></a><a href="https://book.douban.com/subject/4086029/" target="_blank" rel="external">架构之美</a></h3><blockquote>
<p>本书围绕5个主题领域来组织本书的内容：概述、企业应用、系统、最终用户应用和编程语言。本书让最优秀的设计师和架构师来描述他们选择的软件架构，剥开架构的各层，展示他们如何让软件做到实现功能、可靠、易用、高效率、可维护、可移植和优雅。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s4329171.jpg" alt=""></p>
<h3 id="团队之美"><a href="#团队之美" class="headerlink" title="团队之美"></a><a href="https://book.douban.com/subject/4803982/" target="_blank" rel="external">团队之美</a></h3><blockquote>
<p>一个优秀的软件开发团队面临一个棘手的问题，在这样的团队中工作是一种什么情形呢？如何才能打造一个富有战斗力的团队？一组不能融洽相处的人也能够开发出好的软件吗？当项目关系重大、进度又很紧张的时候，团队领导如何让每个人都能符合既定的要求和日程安排？<br>本书带你到幕后看一看软件工程历史上最引人关注的团队。通过最杰出的程序员、架构师、项目经理和思想领袖的一系列引人入胜的故事和访谈，你将从资深团队领导的成功与失败中学到经验。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s3833845.jpg" alt=""><br><a href="https://book.douban.com/subject/3668161/" target="_blank" rel="external">项目管理之美</a></p>
<blockquote>
<p>通过本书，你可以从一位经验丰富、从事多年软件开发和Web开发的经理那里学习如何计划、管理和领导项目。书中的那些宝贵而有用的建议，是作者十多年经验的积累，从很多复杂的概念和挑战中提炼而来。本书引人思考、生动有趣、坦诚直率、引人注目，是你和你的团队在当前和未来的项目中所必备的参考。.<br>包括如下主题：..<br>·如何制定好的决策<br>·想法以及如何处理<br>·领导力和信任<br>·当事情出错时该怎么办</p>
</blockquote>
<p><img src="https://img1.doubanio.com/lpic/s4416878.jpg" alt=""><br><a href="https://book.douban.com/subject/4805950/" target="_blank" rel="external">测试之美</a></p>
<blockquote>
<p>本书主要介绍各种优美的测试方法、测试工具、测试案例，以及杰出的测试人员和结构良好的测试群体。各种从业人员通过了解本书提供的不同场景并借鉴以往成功的经验可以提高测试能力和水平。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s4702850.jpg" alt=""><br><a href="https://book.douban.com/subject/6039240/" target="_blank" rel="external">安全之美</a></p>
<blockquote>
<p>《安全之美》包含以下内容：<br>个人信息背后的经济：它的运作方式、犯罪分子之间的关系以及他们攻击猎物的新方法。<br>社交网络、云计算及其他流行的趋势如何帮助或损害在线安全。<br>度量指标、需求收集、设计和法律如何将安全提高到一个新水平。<br>PGP不为人所知的真实历史。</p>
</blockquote>
<p><img src="https://img1.doubanio.com/lpic/s27280759.jpg" alt=""></p>
<h3 id="数据之美"><a href="#数据之美" class="headerlink" title="数据之美"></a><a href="https://book.douban.com/subject/25833225/" target="_blank" rel="external">数据之美</a></h3><blockquote>
<p>这是一本教我们如何制作完美可视化图表，挖掘大数据背后意义的书。作者认为，可视化是一种媒介，向我们揭示了数据背后的故事。他循序渐进、深入浅出地道出了数据可视化的步骤和思想。本书让我们知道了如何理解数据可视化，如何探索数据的模式和寻找数据间的关联，如何选择适合自己的数据和目的的可视化方式，有哪些我们可以利用的可视化工具以及这些工具各有怎样的利弊。<br>作者给我们提供了丰富的可视化信息以及查看、探索数据的多元视角，丰富了我们对于数据、对于可视化的认知。对那些对设计和分析过程感兴趣的人，本书无疑就是一本必读书。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s4577092.jpg" alt=""></p>
<h3 id="短码之美"><a href="#短码之美" class="headerlink" title="短码之美"></a><a href="https://book.douban.com/subject/5416095/" target="_blank" rel="external">短码之美</a></h3><blockquote>
<p>本书主要介绍短码编程，首先介绍了短码编程的三要素：数据结构和算法、执行环境以及短码编程的精神。书中以北京大学的PKU Judge Online 在线评分系统为编程环境，选取了该系统中比较典型的问题，如海狸啃木头、旋转拼图、葡萄酒买卖，利用数据结构和算法的知识加以分析，最 后编程实现，并尝试使用各种编程语言，不断地将源代码缩短。同时还介绍并分析了一些钻安全漏洞的代码，旨在通过短码编程帮助程序员集中注意力，锻炼忍耐力，开拓视野。</p>
</blockquote>
<h2 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h2><p><img src="https://img3.doubanio.com/lpic/s27095600.jpg" alt=""></p>
<h3 id="互联网产品之美"><a href="#互联网产品之美" class="headerlink" title="互联网产品之美"></a><a href="https://book.douban.com/subject/25748470/" target="_blank" rel="external">互联网产品之美</a></h3><blockquote>
<p>《互联网产品之美》为读者展示了产品人的现状、窘境以及喜悦，语言生动活泼、一气呵成。作为产品经理，如何磨砺你的眼光，用敏锐的嗅觉来发现产品的价值之美、设计之美、运营之美、营销之美，完成从优秀到卓越的涅槃？作为项目管理者，如何深入洞察并快速响应客户需求，突破固化思维模式，在跨团队、多项目压力下快速推进业务合作，通过产品创新不断引领运营的发展？本书从人文情感与体验式服务的角度，致力于构筑一个科学的产品经理成长体系。通过产品的价值与机会、更新改版、运营服务、数据挖掘等方面的讲解，让你身临其境体验产品人的美妙之旅，快速找到产品创意的“杀手锏”，拥有自己的核心竞争力。</p>
</blockquote>
<h2 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h2><p><img src="https://img3.doubanio.com/lpic/s4336091.jpg" alt=""></p>
<h3 id="设计之美"><a href="#设计之美" class="headerlink" title="设计之美"></a><a href="https://book.douban.com/subject/4263899/" target="_blank" rel="external">设计之美</a></h3><blockquote>
<p>设计中历史的、背景的、哲学的、技术的、视觉的以及实践的方法经常单独地出现在设计者面前。但是，每种方法又影响到其它方法，它们共同作用着我们对设计的全面理解。《设计之美》一书将这些方法作为一个整体系统地呈现出来，详尽讲解了各种基本概念，引领读者把设计中不同的元素联系起来。<br>本书在本质上并不是讲述美的哲学，而是通过融入实用、历史、文本问题介绍设计，这些问题通常被当作分离的实体教授，但全都是成为优秀的设计师所必需具备的知识。一名优秀的设计师应该能够面对众多新问题，提出美妙的整体的解决方案。<br>全书生动易读，一步一步带领读者领略设计中的品位、设计演变、构图、色彩、绘图、传播以及表达等主要话题；此外，还概括地讲解了书中复杂但又十分必要的概念。书中大量精美的插图展示了各种精美的设计案例。<br>“我们有证据证明极具美感的物品能使人工作更加出色……让我们感觉良好的物品和体系能更容易相处，并能创造出更和谐的氛围。”<br>——唐纳德•诺曼(Donald Norman)，美国西北大学教授、情感设计大师</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s24642460.jpg" alt=""></p>
<h3 id="简约之美"><a href="#简约之美" class="headerlink" title="简约之美"></a><a href="https://book.douban.com/subject/20445258/" target="_blank" rel="external">简约之美</a></h3><blockquote>
<p>《简约之美:软件设计之道》将软件设计作为一门严谨的科学，阐述了开发出优雅简洁的代码所应该遵循的基本原则。作者从为什么以前软件设计没有像数学等学科一样成为一门科学开始入手，道出了软件以及优秀的软件设计的终极目标，并给出了具体的指导规则。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s27829295.jpg" alt=""></p>
<h3 id="简单之美"><a href="#简单之美" class="headerlink" title="简单之美"></a><a href="https://book.douban.com/subject/4714092/" target="_blank" rel="external">简单之美</a></h3><blockquote>
<p>本书以软件开发的基本顺序为主线，以简单、想象和文化的开发思想为线索，以为软件开发实践提供指导价值为目标。本书力图做到传递经过组织的、可操作的软件开发经验，使软件开发领域的新手在知识（软件开发思想）积累过程中少走弯路，也使软件开发领域的老手可以对照自己的经验把可能的困惑降到最低。有一些有趣例子为那些有价值的思考提供支持。</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s6508251.jpg" alt=""></p>
<h3 id="秩序之美"><a href="#秩序之美" class="headerlink" title="秩序之美"></a><a href="https://book.douban.com/subject/6393626/" target="_blank" rel="external">秩序之美</a></h3><blockquote>
<p>怎样才能设计出简洁大方而不落于俗套的超人气网站？纽约时报网站的资深设计师Khoi Vinh在这《秩序之美——网页中的网格设计》一书中将为你揭示其中的奥秘。<br>　　《秩序之美——网页中的网格设计》将源自传统平面设计、被众多平面设计大师推崇的网格设计方法应用于网页设计，向读者详细介绍了网格设计成熟而经典的设计模式，并以整个网站的设计为例，对工作流程、设计工具和方法进行了系统而全面的介绍，手把手教读者从零开始，完成网站主要页面的设计。<br>　　《秩序之美——网页中的网格设计》为所有网站设计人员提供了一个完美的设计参考。在阅读并实践本书的内容后，读者不但可以开拓眼界，更能提升自己的设计水平。</p>
</blockquote>
<p><img src="https://img1.doubanio.com/lpic/s11344578.jpg" alt=""></p>
<h3 id="信息之美"><a href="#信息之美" class="headerlink" title="信息之美"></a><a href="https://book.douban.com/subject/10749405/" target="_blank" rel="external">信息之美</a></h3><blockquote>
<p>《信息之美》告诉读者信息视觉效果的显示和信息如何关联，以及和这些信息相关的事实，让信息设计更有意思，信息决策更高效。我们生活在一个信息爆炸的时代，每一分钟、每一秒钟都会从电视、报纸或互联网获得信息，我们甚至都来不及思索，就已经被这些信息淹没。所以，我们需要一种新的方法，来发现信息的美和乐趣。《信息之美》作者花了一年的时间，收集了200多个新的图像信息设计案例，并探索出一系列视觉主题。</p>
</blockquote>
<h2 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h2><p><img src="https://img3.doubanio.com/lpic/s11430191.jpg" alt=""></p>
<h3 id="系统之美"><a href="#系统之美" class="headerlink" title="系统之美"></a><a href="https://book.douban.com/subject/11528220/" target="_blank" rel="external">系统之美</a></h3><blockquote>
<p>作为一本实用的入门指南，本书不仅讲解了系统动力学的基本概念、列举了常见的系统结构，还详细陈述了复杂系统的3大特征、8大陷阱与对策、12大变革方式以及15大生存法则。作者把系统思考从计算机和方程式的世界中解脱出来，以各种真实的案例，阐述了系统思考如何应用于各种现实问题，向读者展示了如何提升和应用系统思考技能——这一项普遍被认为是21世纪全球领导力的核心技能。</p>
</blockquote>
<h2 id="Nature"><a href="#Nature" class="headerlink" title="Nature"></a>Nature</h2><p><img src="https://img3.doubanio.com/lpic/s28033535.jpg" alt=""></p>
<h3 id="自然之美"><a href="#自然之美" class="headerlink" title="自然之美"></a><a href="https://book.douban.com/subject/26345725/" target="_blank" rel="external">自然之美</a></h3><blockquote>
<p>中国国家地理与一群优秀的自然记录者合作，一本有关自然的珍藏之书！<br>• 中国第一本自然影像志，以影像、图说的方式带你认识了解中国的自然、物种；<br>• 国内33位最前沿的自然摄影师的精彩作品；<br>• 中国多个人迹罕至的自然保护区和野外生境中的珍贵图片；<br>• 多种生活在未知荒野的珍稀物种，在书里首次介绍 ；</p>
</blockquote>
<p><img src="https://img1.doubanio.com/lpic/s3920239.jpg" alt=""></p>
<h3 id="自然之美-1"><a href="#自然之美-1" class="headerlink" title="自然之美"></a><a href="https://book.douban.com/subject/3628453/" target="_blank" rel="external">自然之美</a></h3><blockquote>
<p>《自然之美》主要内容：天地有大美而不言，所幸的是人类有一双发现美的眼睛。当我们把镜头对准包蕴万千、鬼斧神工的大自然时，会发现美丽就在我们身边。世外桃源般的香格里拉，人间的梦幻天堂，被多少人引为终老之地；古朴沧桑的科罗拉多大峡谷，造化之笔造就的粗犷与壮观，让人以为站到了地球的边缘；欧洲最后的净土。圣诞老人的故乡——拉普兰的皑皑白雪、驯鹿雪橇，带你进入童话世界；远方的安赫尔瀑布，九天之水倾泻而下，涤荡心胸，让你无比震撼……人类在时间长河中是何等的渺小，历史在自然面前变得寂静无声。<br>真正的天堂就是生活在美的自然中间，于是我们去美洲，让飞泻的雷霆之水涤荡坠入凡尘的心灵；于是我们去非洲，让那种原始的未被任何人类行为干涉过的粗犷打动灵魂；于是我们去大洋洲，让心灵因与世无争而纯洁美丽。<br>徜徉于自然之中，得失之心、凡尘俗事俱烟消云散，透过炫目的光圈，都化作浓浓淡淡的幸福。</p>
</blockquote>
<h3 id="极致之美"><a href="#极致之美" class="headerlink" title="极致之美"></a><a href="https://book.douban.com/subject/25831306/" target="_blank" rel="external">极致之美</a></h3><blockquote>
<p>精选《中国国家地理》10余年600余期杂志的经典摄影作品。<br>•汇集67位中国顶尖风光、地理、生态摄影师的162幅优秀作品。<br>•《中国国家地理》推出的第一本综合题材精装画册，李栓科社长主编并撰写序言。<br>•以“大地理”的分类形式，重新汇总、梳理中国极致生态和风光景观，详细展示《中国国家地理》的审美视角和观察方法。<br>•封面由获第50届台湾“金马奖”最佳纪录片导演齐柏林拍摄。<br>这是《中国国家地理》推出的第一本、由中国摄影师的作品精选而成的精装画册。编辑团队历时7个月，从山到海，从荒野到沙漠，从过去到现在，从成千上万张作品中，精选了162张表现中国风光、自然、生态的图片。这些图片展示的是摄影师们在中国各个极致之地，探索到的隐藏其中的绝美景色。<br>除视觉享受之外，此画册还为探索中国的自然、历史、景观带来一种观看方式的参考。</p>
</blockquote>
<h2 id="Literature"><a href="#Literature" class="headerlink" title="Literature"></a>Literature</h2><p><img src="https://img1.doubanio.com/lpic/s1171759.jpg" alt=""></p>
<h3 id="无言之美"><a href="#无言之美" class="headerlink" title="无言之美"></a><a href="https://book.douban.com/subject/1226353/" target="_blank" rel="external">无言之美</a></h3><blockquote>
<p>《无言之美》选取了朱先生围绕这些问题所写的一些短文，分“星光”、“化境”、“妙悟”和“生趣”四编，配以美图，展现了美学大师的穆然深思和悠然遐想。朱光潜先生的美学体系涉及美、艺术作品、审美经验和审美人生等基本问题。</p>
</blockquote>
<h2 id="IPCreator"><a href="#IPCreator" class="headerlink" title="IPCreator"></a>IPCreator</h2><h3 id="英语之美"><a href="#英语之美" class="headerlink" title="英语之美"></a>英语之美</h3><p>单词之美<br>句子之美<br>文章之美</p>
<h3 id="成长之美"><a href="#成长之美" class="headerlink" title="成长之美"></a>成长之美</h3><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1]<a href="https://book.douban.com/subject/26163454/" target="_blank" rel="external">数学之美 （第二版）</a><br>[2]<a href="https://book.douban.com/subject/7064456/" target="_blank" rel="external">研究之美</a><br>[3]<a href="https://book.douban.com/subject/3004255/" target="_blank" rel="external">编程之美</a><br>[4]<a href="https://book.douban.com/subject/11528220/" target="_blank" rel="external">系统之美</a><br>[5]<a href="https://book.douban.com/subject/3224524/" target="_blank" rel="external">代码之美</a><br>[6]<a href="https://book.douban.com/subject/4263899/" target="_blank" rel="external">设计之美</a><br>[7]<a href="https://book.douban.com/subject/6439420/" target="_blank" rel="external">数据可视化之美</a><br>[8]<a href="https://book.douban.com/subject/5269219/" target="_blank" rel="external">数据之美</a><br>[9]<a href="https://book.douban.com/subject/4086029/" target="_blank" rel="external">架构之美</a><br>[10]<a href="https://book.douban.com/subject/4803982/" target="_blank" rel="external">团队之美</a><br>[11]<a href="https://book.douban.com/subject/3668161/" target="_blank" rel="external">项目管理之美</a><br>[12]<a href="https://book.douban.com/subject/4805950/" target="_blank" rel="external">测试之美</a><br>[13]<a href="https://book.douban.com/subject/6039240/" target="_blank" rel="external">安全之美</a><br>[14]<a href="https://book.douban.com/subject/26345725/" target="_blank" rel="external">自然之美</a><br>[15]<a href="https://book.douban.com/subject/10749405/" target="_blank" rel="external">信息之美</a><br>[16]<a href="https://book.douban.com/subject/25831306/" target="_blank" rel="external">极致之美</a><br>[17]<a href="https://book.douban.com/subject/1226353/" target="_blank" rel="external">无言之美</a><br>[18]<a href="https://book.douban.com/subject/6393626/" target="_blank" rel="external">秩序之美</a><br>[19]<a href="https://book.douban.com/subject/25833225/" target="_blank" rel="external">数据之美</a><br>[20]<a href="https://book.douban.com/subject/5416095/" target="_blank" rel="external">短码之美</a><br>[21]<a href="https://book.douban.com/subject/20445258/" target="_blank" rel="external">简约之美</a><br>[22]<a href="https://book.douban.com/subject/4714092/" target="_blank" rel="external">简单之美</a><br>[23]<a href="https://book.douban.com/subject/26270565/" target="_blank" rel="external">科学之美——从大爆炸到数字时代</a><br>[24]<a href="https://book.douban.com/subject/6782542/" target="_blank" rel="external">物理学之美</a><br>[25]<a href="https://book.douban.com/subject/25748470/" target="_blank" rel="external">互联网产品之美</a><br>[26]<a href="https://book.douban.com/subject/25919532/" target="_blank" rel="external">宇宙之美</a><br>[27]<a href="https://book.douban.com/subject/3628453/" target="_blank" rel="external">自然之美</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/beautiful-switzerland-43.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;训练美感，先学会欣赏，与其寻找或等待，不如自己创造。&lt;/p&gt;
&lt;p&gt;人生如歌，有高潮也有低潮，高潮有高潮时的快感，低潮有低潮时的风景，美好的事物太多，时光太短暂，注意力太宝贵，聚焦并追逐梦想，享受人生过程，无暇也无需他顾。&lt;/p&gt;
&lt;p&gt;Programmer Vs Pianist，都需要创造力，都需要持久的刻意练习以升级到更高水准，都属于超级个体类别，哦，对了，还都需要一个好的Keyboard还都喜欢Music:)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Error Concepts in My Past Brain OS</title>
    <link href="http://ipcreator.me/2017/03/28/MyView/Original/error-concept-in-my-past-brain-os/"/>
    <id>http://ipcreator.me/2017/03/28/MyView/Original/error-concept-in-my-past-brain-os/</id>
    <published>2017-03-27T22:59:18.000Z</published>
    <updated>2017-03-28T06:16:06.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>IPCreator：观念的落后就是最大的落后</p>
</blockquote>
<p><a href="https://h5.sao.cn/product/detail?alias=onhnfsdtybxb" target="_blank" rel="external">通往财富自由之路</a></p>
<p><img src="http://ong8f1obl.bkt.clouddn.com/basic%20brain%20concept.jpg" alt=""></p>
<p>复利效应的公式：（1+r）<sup>n</sup> ，其中1是你的起点，r代表每天的进步。它可以很小，但是你要保证，它一定得是正的。</p>
<p>如果我们脑子里没有一个概念的话，我们的脑子就倾向于不去想那个事情。</p>
<p><u>如果脑子里的一个概念不准确、或者没有准确、正确的定义，那么我们必然没有办法准确、正确地继续思考下去。</u><sup>[1]</sup> 进而产生的连锁反应是，因为定义不准确，所以思考范围模糊，选择依据缺失，进而行动错误…进而影响整个生活。</p>
<p>清晰且正确的概念是一切思考的基石。而衡量一个人是否聪明，几乎可以凝练这两个条件：</p>
<ol>
<li>有没有足够多清晰、准确、正确的概念；</li>
<li>概念之间有没有清晰、准确、正确的练习。靠着主动给自己清晰大脑，人是可以变得更聪明的。</li>
</ol>
<p>学一门课程的时候，最开始的“概论”最难学，因为你关于这门课的<strong>知识体系</strong>几乎等于0，概论里提到的每一个新概念对你来说都要从0学起，也都有可能分散你最初学习的注意力。每当你对一个<strong>领域的理解</strong>上了一个新台阶，你都会发现自己提升这个领域的能力的速度也在加快。</p>
  <a id="more"></a>
<h2 id="什么是“财富自由”"><a href="#什么是“财富自由”" class="headerlink" title="什么是“财富自由”"></a>什么是“财富自由”</h2><blockquote>
<p>所谓的个人财富自由，指的是某个人再也不用为了满足生活必需而出售自己的时间了。</p>
<p>我们每个人做得所有奋斗的本质，都是让自己出售的时间单价更高。</p>
</blockquote>
<p>你做得事情终将成为你生命中的一部分。在你获得财富自由之后，还是会不断做得事情，比如，专注成长而不是专注成功，很多人没有意识到的是，不管你获得了怎样的成功，你依然需要成长，财富自由不是终点，那只是通往终点过程中的一个里程碑而已。</p>
<h2 id="成长才是根本关键"><a href="#成长才是根本关键" class="headerlink" title="成长才是根本关键"></a>成长才是根本关键</h2><p>为了成长，你必需选择。</p>
<p>最终的一切，都是自己选的。很多人完全没有意识到，自己总是可以有所选择的，当然也就更不知道有了选择的时候应该如何判断。</p>
<blockquote>
<p>选择的判断标准有一个就足够了：我选择的事能不能让我积累更多的能力？没有能力积累的努力，就是原地踏步呀。</p>
</blockquote>
<p><strong>陷阱</strong></p>
<p>很多人在做选择的时候，考虑的是，在这个选择之后，我过往的能力能否用得上？</p>
<p>这还是<u>“终点式思维”，不是“里程碑式思维”。</u>正是因为这样想了，所以大多数人习得新能力的可能性越来越低。因为他们不知不觉已被自己的已有能力禁锢了。</p>
<p>真正正确的思考方式应该是：在这个选择之后，能帮我完善那个已有能力，能让我获得什么新能力。</p>
<h2 id="重视价值忽略估值"><a href="#重视价值忽略估值" class="headerlink" title="重视价值忽略估值"></a>重视价值忽略估值</h2><p>就像股票一样，每个人也存在一个市场给你的“估值”和真实的“价值”，通过简单的类比你就能知道，外人很难准确知道你的价值。</p>
<p>当你在意估值的时候，你就会忘记你的价值，你就会不由自主做那些提高你估值的事，而不是去想办法提高你的价值。<u>长期来看，估值是虚幻的，虽有波动，却实际上锚定在价值上，价值不增长，长期来看估值一定长不上去，而且既然有极度高估，那么就不但随时有低估，还随时会有极度低估。</u></p>
<h2 id="耐心比什么都重要"><a href="#耐心比什么都重要" class="headerlink" title="耐心比什么都重要"></a>耐心比什么都重要</h2><blockquote>
<p>耐心的力量，相当于交易中的复利效应，并且一定会通过复利效应展现出来。</p>
</blockquote>
<p>用心智的力量去时刻告诉自己，觉得困难的阶段不过是必经之路——而这正是耐心的真谛。<br>很多人最终失去对事情的耐心，都是因为先失去了对“低效率的自己”的耐心。</p>
<p><u>没有耐心的人，更容易选择“终点式思维”</u>，他们希望快一点完事儿，快一点看到结果，然后就能去他们意想出来的那个世界了。<u>没耐心的人不会有好的积累，他们不会把每件事都当做自己的事来做；没耐心的人当然也更注重估值，甚至愿意为之而自欺和欺人，因为他们只能想到短期效益；没耐心的人甚至都不会思考真正重要的事——价值。</u></p>
<p><strong>陷阱</strong><br>有很多人会为自己的缺乏耐心找一个看似站得住脚的借口：我现在做得事情不喜欢，才会出现这样那样的问题，等我做到那件真正喜欢的事情的时候，我就可以……</p>
<p>就算你以极高的成本最终进入了所谓你喜欢的领域，你也永远不可能达到你所意想的那种效率状态的。</p>
<p>但是无论用经验还是纯理性去想，你会发现，做不到当下自己喜欢的那件事，是几乎所有人的常态。越是这种时候越需要耐心，耐心之所以宝贵也体现于此。</p>
<h2 id="“绝大多数人就是做不到只字不差地阅读”"><a href="#“绝大多数人就是做不到只字不差地阅读”" class="headerlink" title="“绝大多数人就是做不到只字不差地阅读”"></a>“绝大多数人就是做不到只字不差地阅读”</h2><p>在过去的那么多年里，我最仰仗的是自己的学习能力——“需要什么，就能学会什么”，这实在是幸运的源泉。我的信条是“一生只有一个职业——学生”。这么多年的观察和思考，你知道我认为大多数人学习能力差的最根本原因是什么吗？</p>
<blockquote>
<p>“绝大多数人就是做不到只字不差地阅读”</p>
</blockquote>
<p><u>只字不差地阅读，要多简单有多简单，与此同时，要多重要就有多重要。</u></p>
<blockquote>
<p>1.阅读本身，几乎没有任何价值；<br>2.阅读之后的思考，思考之后的选择，<strong>选择之后的行动才有价值</strong>；<br>3.通往财富自由之路很长很长，弄不好要走一辈子（七年就是一辈子）以上，所以仅仅行动本身都不够……<br>4.<strong>只有持续正确的行动才可能有积累效果，才可能引发真正有意义的变化</strong>；<br>5.又，财富自由只不过是个里程碑；路过它之后，你依然有很长很长的路要走，否则那之前的路也没有什么意义……</p>
</blockquote>
<p><strong>陷阱</strong><br>所以，他们自己总也读不明白，甚至竟然在没有读明白的情况下认为自己读明白了；到了用的时候，才发现自己不会，然后竟然“坚决不去认真只字不差地读书”，非要花钱报个班，听别人的“解读”……</p>
<p>都吃了那么多年的亏了，还不自知，整天速读、跳读、扫读，还以为自己多有效率呢，你说那些人能不注定吃亏吗？吃亏不可怕，可怕的是吃着亏还以为占了便宜，这可是双重负载，还是可能引发无数负循坏的双重负载。</p>
<h2 id="你拥有的最重要、却被人忽视了的最宝贵财富是什么？"><a href="#你拥有的最重要、却被人忽视了的最宝贵财富是什么？" class="headerlink" title="你拥有的最重要、却被人忽视了的最宝贵财富是什么？"></a>你拥有的最重要、却被人忽视了的最宝贵财富是什么？</h2><blockquote>
<p><strong>注意力</strong></p>
</blockquote>
<p>钱不是最重要的，因为它可以再生；时间也不是最重要的，因为它本质上不属于你，你只能试着与它做朋友，让它为你所用。你的注意力才是你所拥有的最重要、最高贵的资源——从这个角度望过去，人生其实是公平的，<u>因为你的注意力确实是你自己可以做主的，除非你自己放弃。</u>所以，那结局是好是坏，其实真的是你自己选的。</p>
<p>必须<u>把最宝贵的注意力全部放在你自己身上</u>。因为，最终，你的一切价值，都是你的注意力的产出。</p>
<p>那放在自己的哪儿上？答案明确而又唯一：<u>放在“成长”上</u>。</p>
<p><u>真正的安全感、归属感、成就感，应该来自自我的成长积淀，而不是通过透支自己宝贵的注意力来获得的一些短期的错觉。</u></p>
<p>把注意力放在自己的成长上。放在一切可以有积累效应的技能上，然后给予充分的学习、思考和磨练。有些技能在初期不会显现出特别像一个“技能”的模样，但是<u>随着积累的加深，它对你能力提升曲线的影响会变为指数式</u>。升级升级再升级，真的没空折腾别的乱七八糟的事情。</p>
<p>害怕孤独和真爱是有本质区别的，这种区别我们可以视作是“弱”与“强”的区别。因为<u>真爱的意思是，你甚至愿意把自己最宝贵的财富“浪费”在他们身上，这恰恰是掌握资源的体现，但是害怕孤独的人，会假借爱的名义疯狂索取</u>。</p>
<p><strong>三个大坑</strong></p>
<blockquote>
<p>第一个大坑，叫“莫名其妙地凑热闹”</p>
</blockquote>
<p>那么多的人其实没什么正事儿可做，连读书都不会，闲得要死；大量闲置的时间需要被杀掉，大量闲置的精力需要被发泄，大量的好奇心需要个喷射的出口……</p>
<blockquote>
<p>第二个大坑，叫“心急火燎地随大流”</p>
</blockquote>
<p>若是内容创业真的是大趋势，大潮流，那么，在此之前已经写了十年字的那票人显然是“虽然不故意却必然准备最充分”的呀，这才开始心急火燎的人，哪儿是另外一票人的对手呢？</p>
<p>平日里整天挂在嘴边的那句话“机会属于有准备的人”到了这个时候就好像完全没听说过似的，究竟是为什么呢？只因为平日里从无积累。</p>
<p>可惜，<u>平日里只有一颗上进的心，一样滚烫，却从未有过积累的行动</u>。</p>
<blockquote>
<p>第三个大坑，叫“操碎了别人的心肝”</p>
</blockquote>
<p>失败乃成功之母，这不是每个人都知道的正确道理吗？别人失败了，你怎么就知道人家不会在失败中总结经验呢？你怎么就那么笃定人家失败了就从此一蹶不振呢？你就没听过那首歌吗？那些弄不死我的只能让我更强？谁说失败不是正常生活的必需构成部分？</p>
<p><u>两个字：闲的。</u></p>
<p>一句话：自己是泥菩萨，一条小河都过不去，却要操碎了别人的心肝，真不知道图个啥。人家创业失败了，你也不会有损失，可若是人家创业成功了，你害怕，是不？</p>
<h2 id="凡是能用钱买的其实都是便宜的。"><a href="#凡是能用钱买的其实都是便宜的。" class="headerlink" title="凡是能用钱买的其实都是便宜的。"></a>凡是能用钱买的其实都是便宜的。</h2><p>绝大多数人的基础观念就是错的——绝大多数人骨子里就是认为钱是最重要的。这也很容易理解，因为他们在生活里时时刻刻都能感受到赚钱的困难。因为困难，所以难得，因为难得，所以重要……看似逻辑相当严谨。</p>
<blockquote>
<p>注意力&gt;时间&gt;金钱，凡是能用钱买来的时间就是便宜的；凡是能用时间换来的注意力持续就是有价值的。</p>
</blockquote>
<p>许多家庭不幸福的根本原因就是相互之间时间投资太少——就这么简单。</p>
<p><strong>麻烦守恒定律</strong><br>麻烦总量一定，解决麻烦只是一个分配问题。人承担一部分，工具承担一部分，人需要投入的是时间和注意力，工具需要投入的更多的是金钱。</p>
<p>拿钱换时间，换注意力不是我们的根本目的。我们的目的是为了每天有所积累，有所成长。用钱买时间和注意力只是手段，目的是为了更有效地提升自我。旅游也只是手段，目的是为了放松自我。不要沉迷于手段，而忘记了最初的目的。</p>
<p>最吃亏的则是事事都一知半解，总希望找捷径和免费教材的人，绕了一圈下来，感觉金钱上没有付出太多，但实际上已经浪费了太多的精力和时间，最终也没有收获好的结果。</p>
<h2 id="IPCreator践行录"><a href="#IPCreator践行录" class="headerlink" title="IPCreator践行录"></a>IPCreator践行录</h2><p>一切都靠积累——《把时间当做朋友》<br>《人人都能学英语》是《把时间当做朋友》的践行版<br>英语这种技能，只有用起来才有积累——《人人都能学英语》<br>《通往财富自由之路》是《新生——七年就是一辈子》的践行版</p>
<h3 id="元技能-Meta-Skills"><a href="#元技能-Meta-Skills" class="headerlink" title="元技能 Meta Skills"></a>元技能 Meta Skills</h3><p>Google、English、Innovation Thinking</p>
<h3 id="元习惯-Meta-Habits"><a href="#元习惯-Meta-Habits" class="headerlink" title="元习惯 Meta Habits"></a>元习惯 Meta Habits</h3><p>Basic ConceptPatience、Focus Attention、<br>Reading Word by Word、Writing method</p>
<h3 id="英语怎么用？"><a href="#英语怎么用？" class="headerlink" title="英语怎么用？"></a>英语怎么用？</h3><p>将其作为一种语言工具，获取对自己有用的信息或提升生活品质的工具<br>而不是为了学而学，为了记单词而记单词……</p>
<ol>
<li>Blog</li>
<li>Goolge</li>
<li>Wikipedia</li>
<li>Program</li>
<li>Music/Movie</li>
</ol>
<h3 id="编程怎么用？"><a href="#编程怎么用？" class="headerlink" title="编程怎么用？"></a>编程怎么用？</h3><p>同样，不为了学而学，为了解决生活中的实际痛点<br>化整为零，各个击破，把握好成就感和节奏感<br>学会利用English、Google和OpenSource等相关工具及资源<br>阅读整合、搜集整理代码片段、动手实践实用项目<br>实战中整理、完善知识框架及各个技能点</p>
<h3 id="专利怎么用？"><a href="#专利怎么用？" class="headerlink" title="专利怎么用？"></a>专利怎么用？</h3><p>技术/产品专利化，专利技术/产品化<br>专利信息是一座宝库，可以充分利用<br>复用English、Google、Program等相关知识和技能</p>
<h3 id="AI潮流怎么抓住？"><a href="#AI潮流怎么抓住？" class="headerlink" title="AI潮流怎么抓住？"></a>AI潮流怎么抓住？</h3><p>基于TensorFlow和Android平台，聚焦UI和IPR两个领域，<br>基于日常操作行为和习惯，给用户带来智能、高效的创新体验。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]<a href="/2017/01/02/MyShare/iGet/lixiaolai-lead-to-freedom-of-wealth/">通往财富自由之路</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;IPCreator：观念的落后就是最大的落后&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://h5.sao.cn/product/detail?alias=onhnfsdtybxb&quot;&gt;通往财富自由之路&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/basic%20brain%20concept.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;复利效应的公式：（1+r）&lt;sup&gt;n&lt;/sup&gt; ，其中1是你的起点，r代表每天的进步。它可以很小，但是你要保证，它一定得是正的。&lt;/p&gt;
&lt;p&gt;如果我们脑子里没有一个概念的话，我们的脑子就倾向于不去想那个事情。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;如果脑子里的一个概念不准确、或者没有准确、正确的定义，那么我们必然没有办法准确、正确地继续思考下去。&lt;/u&gt;&lt;sup&gt;[1]&lt;/sup&gt; 进而产生的连锁反应是，因为定义不准确，所以思考范围模糊，选择依据缺失，进而行动错误…进而影响整个生活。&lt;/p&gt;
&lt;p&gt;清晰且正确的概念是一切思考的基石。而衡量一个人是否聪明，几乎可以凝练这两个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有没有足够多清晰、准确、正确的概念；&lt;/li&gt;
&lt;li&gt;概念之间有没有清晰、准确、正确的练习。靠着主动给自己清晰大脑，人是可以变得更聪明的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;学一门课程的时候，最开始的“概论”最难学，因为你关于这门课的&lt;strong&gt;知识体系&lt;/strong&gt;几乎等于0，概论里提到的每一个新概念对你来说都要从0学起，也都有可能分散你最初学习的注意力。每当你对一个&lt;strong&gt;领域的理解&lt;/strong&gt;上了一个新台阶，你都会发现自己提升这个领域的能力的速度也在加快。&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
  </entry>
  
  <entry>
    <title>Why</title>
    <link href="http://ipcreator.me/2017/03/27/MyView/Original/Why/why/"/>
    <id>http://ipcreator.me/2017/03/27/MyView/Original/Why/why/</id>
    <published>2017-03-27T14:04:06.000Z</published>
    <updated>2017-03-27T14:51:30.917Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/5why.jpg" alt=""></p>
<blockquote>
<p>无论是学习研究，还是个人成长，多问为什么？</p>
</blockquote>
<p>所谓5why分析法，又称“5问法”，也就是对一个问题点连续以5个“为什么”来自问，以追究其根本原因。虽为5个为什么，但使用时不限定只做“5次为什么的探讨”，主要是必须找到根本原因为止，有时可能只要3次，有时也许要10次，如古话所言：打破砂锅问到底。</p>
<p>5why法的关键所在：鼓励解决问题的人要努力避开主观或自负的假设和逻辑陷阱，<u><strong>从结果着手，沿着因果关系链条，顺藤摸瓜，直至找出原有问题的根本原因</strong></u>。<sup>[1]</sup></p>
<a id="more"></a>
<h2 id="5Whys"><a href="#5Whys" class="headerlink" title="5Whys"></a>5Whys</h2><p>Rules of performing 5Whys <sup>[2]<sup></sup></sup></p>
<p>In order to carry out the 5-Why analysis properly, the following advice should be followed:</p>
<ol>
<li><p>It is necessary to engage the management in the 5Whys process in the company. For the analysis itself, consider what is the right working group. Also consider bringing in a facilitator for more difficult topics.</p>
</li>
<li><p>Use paper or whiteboard instead of computers.</p>
</li>
<li><p>Write down the problem and make sure that all people understand it.</p>
</li>
<li><p>Distinguish causes from symptoms.</p>
</li>
<li><p>Pay attention to the logic of cause-and-effect relationship.</p>
</li>
<li><p>Make sure that root causes certainly lead to the mistake by reversing the sentences created as a result of the analysis with the use of the expression “and therefore”.</p>
</li>
<li><p>Try to make our answers more precise.</p>
</li>
<li><p>Look for the cause step by step. Don’t jump to conclusions.</p>
</li>
<li><p>Base our statements on facts and knowledge.</p>
</li>
<li><p>Assess the process, not people.</p>
</li>
<li><p>Never leave “human error”, “worker’s inattention”, etc., as the root cause.</p>
</li>
<li><p>Foster an atmosphere of trust and sincerity.</p>
</li>
<li><p>Ask the question “Why” until the root cause is determined, i.e. the cause the elimination of which will prevent the error from occurring again.</p>
</li>
<li><p>When you form the answer for question “Why” - it should happen from the customer’s point of view.</p>
</li>
</ol>
<h2 id="分析示例"><a href="#分析示例" class="headerlink" title="分析示例"></a>分析示例</h2><p>Why 1：为什么不能行动/聚焦/刻意练习/坚持…<br>Why 2：为什么急于求成/追求及时反馈…<br>Why 3： 别人为什么能够做到及时行动/聚焦/刻意练习/坚持？<br>Why 4：别人为什么有耐心？<br>Why 5：根本性的差异在哪里，包括客观和主观上的？<br>Why 6：为什么会产生这样的差异？<br>Why 7：别人是怎样成长到今天的？为什么？<br>Why 8：自己的成长策略又是什么？如何落实？为什么？<br>Why 9：回到Why1，形成一个正向循环。</p>
<h2 id="Kaifu-Lee"><a href="#Kaifu-Lee" class="headerlink" title="Kaifu Lee"></a>Kaifu Lee</h2><p>生病之前，我被美国《时代周刊》评选为“影响世界百大人物”之一，我意气风发地赴美受奖，自认实至名归、当之无愧。然而，吊诡的是，领奖回来没几个月，我就发现自己生病了。病中赤裸裸地暴露在病痛的风暴中，再大的影响力、再高的知名度都帮不了忙；在诊疗间、在病床上，我什么都不是，就是一个随时可能在呼吸之间顿失所有的病人。<sup>[3]</sup></p>
<p>那时候，我<strong>常常怨天怨地、责怪老天爷对我不公平，我从内心深处发出呼喊：“为什么是我？我做错了什么？这是因果报应吗？”</strong> 我是天之骄子啊！我有能力改变世界、造福人类，老天爷应该特别眷顾我，怎么可能会把我抛在癌症的烂泥地里，跟一群凡夫俗子一样在这里挣扎求生？</p>
<p>大师重重点醒了我：“追求最大化影响力，最后就会用影响力当借口，去追求名利。不承认的人，只是在骗自己。”为了追求更大的影响力，我像机器一样盲目地快速运转，我心中那只贪婪的野兽霸占了我的灵魂，各种堂而皇之的借口， 遮蔽了心中的明灯，让我失去准确的判断力。我告诉自己，有了影响力，我就可以伸张正义、做更多有意义的事，我的<strong>身体很诚实，我长期睡不好、痛风、便秘，还患了几次带状疱疹。这些警示都太微弱了，无法撼动我那越来越强大的信念；人说“不到黄河心不死”，狂心难歇，最后身体只好用一场大病来警告我，把我逼到生命的最底层，让我看看自己的无知、脆弱、渺小；也让我从身体小宇宙的复杂多变，体会宇宙人生的深邃和奥妙。</strong></p>
<p>身体病了，我才发现，其实我的心病得更严重！当我<strong>被迫将不停运转的机器停下来，不必再依赖咖啡提神，我的头脑才终于可以保持清醒，并清楚地看到，追逐名利的人生是肤浅的，为了改变世界的人生是充满压力的。珍贵的生命旅程，应该抱着初学者的心态，对世界保持儿童般的好奇心，好好体验人生；让自己每天都比前一天有进步、有成长，不必改变别人，只要做事问心无愧、对人真诚平等，这就足够了。如果世界上每个人都能如此，世界就会更美好，不必等待任何一个救世主来拯救。</strong></p>
<h2 id="Yu-Juan"><a href="#Yu-Juan" class="headerlink" title="Yu Juan"></a>Yu Juan</h2><p>《此生未完成》<sup>[4]</sup>在确诊得癌症之后，于娟没有大哭大闹，或者凄凄切切，而是冷静思考自己为什么得癌症？因为病患在身，恶毒诅咒也好，悔过自新也罢，都改变不了患癌事实。</p>
<h3 id="一、饮食习惯"><a href="#一、饮食习惯" class="headerlink" title="一、饮食习惯"></a>一、饮食习惯</h3><blockquote>
<p>瞎吃乱喝</p>
</blockquote>
<p>于娟吃了一些很多不该吃的东西：孔雀、海鸥、鲸鱼、河豚、梅花鹿、熊、麋鹿等，诸如此类不胜枚举。这些动物十分珍贵，且不说破坏自然和谐，暴虐地去吃受保护的动物。于娟还说到，所谓天物珍馐，一点都不好吃。那些动物，经过高压锅长时间煮炖，还是硬邦邦，咬下去就像啃森林里的千年老藤，好干好硬。想一下我们以前的老祖宗流传下来的食谱，经过那么多年的筛选，才锁定了现在的食材，如果孔雀比鸡好吃，那么现在孔雀就是鸡，鸡就是孔雀。</p>
<blockquote>
<p>暴饮暴食</p>
</blockquote>
<p>吃东西是大碗喝酒大口吃肉。吃的东西比男生还多，贪吃蛇的越吃越多越迟钝，无论你在灵巧灵敏，贪吃的后果是自食其果。</p>
<blockquote>
<p>嗜荤如命</p>
</blockquote>
<p>只吃荤，不吃素。身为山东西北的土孩子，吃不了海边长大的海鲜，但还是顿顿吃海鲜。一方水土养一方人，没有海边渔民的体质就不要吃那么多海鲜。以动物为主的膳食会导致慢性疾病的发生；以植物为主的膳食最有利健康，也能有效地预防和控制慢性疾病。所以少吃蔬菜和水果，少吃鸡、鸭、鱼、蛋、奶等。</p>
<h3 id="二、睡眠习惯"><a href="#二、睡眠习惯" class="headerlink" title="二、睡眠习惯"></a>二、睡眠习惯</h3><p>晚睡，以及长久的熬夜对身体很不好。熬夜直接危害肝脏，23时到次日3时是肝脏最佳的排毒时期，如果肝脏得不到休息，会导致肝脏血流相对不足，已受损害的肝细胞难以修复并加剧恶化。而肝脏是人体最大的代谢器官，肝脏受损，足以损害全身。所以，长期熬夜等于慢性自杀啊。</p>
<h3 id="三、突击作业"><a href="#三、突击作业" class="headerlink" title="三、突击作业"></a>三、突击作业</h3><p>现在很多人都有拖延症，喜欢把学习、作业、功课、考试、工作、拖到deadline前几天，然后通宵达旦地赶出来，去复习，赶论文，赶项目。于娟是2w女，所谓2W女就是在考前2周才认真复习的女生：2weeks，考出来的成绩也是too weak。</p>
<p>在考前2周埋头苦学、下死本折腾自己、快马加鞭、马不停蹄、呕心沥血看书……</p>
<p>拼心血、拼精力、拼死拼命去学习，还经常搞突击，搞高强度的学习、工作，即使你拥有硬朗的身体，健硕的体魄，也会报废的。</p>
<p>有些人熬夜是学习工作，有些人熬夜是玩、唱k、蹦迪、想想如果是去娱乐场所high到死，那好可怜，也很不值得。</p>
<h3 id="四、环境问题"><a href="#四、环境问题" class="headerlink" title="四、环境问题"></a>四、环境问题</h3><p>大环境问题，我国空气质量不如从前，污染严重。于娟在挪威留学回到上海，喉咙干、空气呛、不是感冒，就是发烧等等一些小病痛、小手术。现在的癌症发病率是多少？我不知道，总之比于娟前几年查到的数据高，环境污染严重，这是一个大前提。</p>
<p>在一个周边空气污染、水污染和食品安全危机的大环境下，还玩命地熬夜，往往用力过猛，反而伤了自己。</p>
<p>因为于娟的丈夫是化学材料的博士，有一次在家里打开甲醛测试仪，发现家具的甲醛指数严重超标，才把那些不合格的家具一个个丢掉。从使用甲醛超标的家具到发现家具甲醛超标，中间已经有2年已久了。</p>
<p>肿瘤的肿块不是容易形成的，癌症的发生需要一个长期的、渐进的过程，要经历多个阶段。从正常的细胞到演变成癌细胞，再到形成形成肿瘤，需要10-20年，甚至更长。</p>
<p>一个终年在实验室发明除甲醛新材料的人，从来没有意识到自己的爱人（于娟）却经年累月浸泡在甲醛超标的环境里，最终得了绝症。</p>
<h3 id="五、穿着问题"><a href="#五、穿着问题" class="headerlink" title="五、穿着问题"></a>五、穿着问题</h3><p>于娟在选择Bra的时候总在纠结一番，大一码的有点大，小一码的有点小，不喜欢罩杯有点空，就选择了小一码的Bra，也许爱美的女生都喜欢缸满钵满的：女人的Bra犹如男人的钱包，男人谁也不会嫌钱包厚。但是男人的钱包扑出来顶多就挤出几张钞票，而女人选小点的Bra让乳房扑出来，却很有可能因为气血不畅积淤成乳腺癌、纤维癌。</p>
<h3 id="六、性格"><a href="#六、性格" class="headerlink" title="六、性格"></a>六、性格</h3><p>乳腺癌病人里性格内向阴郁的太少太少，相反太多的人都有重控制、重权欲，争强好胜、急躁、外向的性格倾向。</p>
<p>于娟太过喜欢争抢好胜，太过喜欢凡事做到最好，太过喜欢统领大局，太过喜欢操心，太过不甘心碌碌无为。</p>
<p>这样的性格会让自己忙碌，匆忙，凡事亲为，使自己的不容得休息，哪会有时间休息。长时间工作的机器偶尔也会短路会烧掉整个电板。更何况人呢？</p>
<p>拼死累活赶着提前博士毕业，毕业后，想在3年内搞个副教授来做做，又玩命开课题，发文章。得了病才知道，那么名利权情，到死了，也带不走。</p>
<blockquote>
<p>世间的一切，隔岸看花、云淡风轻。</p>
</blockquote>
<p>人之一生，犹如赶路，背负行囊马不停蹄，从起点到终点，从生到死。<br>以上的道理我们都听过，父母的谆谆教诲，唠唠叨叨里的话语里无不传达这些生命真理，但是我们都不会做。</p>
<h3 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h3><p>因为懒<br>因为喜欢<br>因为戒不掉<br>因为习惯熬夜<br>因为那样会无聊<br>因为……<br>借口多多，所以身体很差。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]<a href="http://baike.baidu.com/item/5why%E5%88%86%E6%9E%90%E6%B3%95" target="_blank" rel="external">5why分析法</a><br>[2]<a href="https://en.wikipedia.org/wiki/5_Whys" target="_blank" rel="external">5 Whys</a><br>[3]<a href="http://rufodao.qq.com/a/20150713/042430.htm" target="_blank" rel="external">李开复：星云大师穿透我的内心</a><br>[4]<a href="http://www.jianshu.com/p/2b4c0854c1af" target="_blank" rel="external">于娟：为啥是我得癌症</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/5why.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无论是学习研究，还是个人成长，多问为什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所谓5why分析法，又称“5问法”，也就是对一个问题点连续以5个“为什么”来自问，以追究其根本原因。虽为5个为什么，但使用时不限定只做“5次为什么的探讨”，主要是必须找到根本原因为止，有时可能只要3次，有时也许要10次，如古话所言：打破砂锅问到底。&lt;/p&gt;
&lt;p&gt;5why法的关键所在：鼓励解决问题的人要努力避开主观或自负的假设和逻辑陷阱，&lt;u&gt;&lt;strong&gt;从结果着手，沿着因果关系链条，顺藤摸瓜，直至找出原有问题的根本原因&lt;/strong&gt;&lt;/u&gt;。&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Forty Years History of AI in China</title>
    <link href="http://ipcreator.me/2017/03/27/AI/Basic%20Concept/history-of-ai-in-china/"/>
    <id>http://ipcreator.me/2017/03/27/AI/Basic Concept/history-of-ai-in-china/</id>
    <published>2017-03-27T06:14:06.000Z</published>
    <updated>2017-03-27T10:02:18.861Z</updated>
    
    <content type="html"><![CDATA[<p>中国的人工智能经历了怎样的发展过程？取得哪些成绩？存在什么问题？面临何种机遇？有哪些解决方案？</p>
<p>雷锋网按：本文作者蔡自兴，来自湖南省自兴人工智能研究院、中南大学智能系统与智能软件研究所。文章来自北邮人机与认知实验室，雷锋网(公众号：雷锋网)已获授权。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58590044782c5.png?imageMogr2/format/jpg/quality/90" alt=""></p>
 <a id="more"></a>
<h1 id="中国人工智能40年"><a href="#中国人工智能40年" class="headerlink" title="中国人工智能40年"></a>中国人工智能40年</h1><p>智能机器是一种能够呈现出人类智能行为的机器。人工智能（ArtificialIntelligence，AI）是计算机科学或智能科学中涉及研究、设计和应用智能机器的一个分支。人工智能的近期主要目标在于研究用机器来模仿和执行人脑的某些智力功能，而远期目标是用自动机模仿人类的思维活动和智力功能。</p>
<p>智能机器是一种能够呈现出人类智能行为的机器。人工智能（ArtificialIntelligence，AI）是计算机科学或智能科学中涉及研究、设计和应用智能机器的一个分支。人工智能的近期主要目标在于研究用机器来模仿和执行人脑的某些智力功能，而远期目标是用自动机模仿人类的思维活动和智力功能。</p>
<p>人工智能探索历史</p>
<p>人类对人工智能和智能机器的梦想与追求，可以追溯到3000 多年前。中国也不乏这方面的故事与史料。</p>
<p>近代科学技术的许多重大进展都是人类智慧、思维、梦想和奋斗的成果。人类历史上从来没有出现过像今天这样的思想大解放，关于宇宙、星球、生命、人类、时空、进化和智能等思想与作品，如雨后春笋破土而出，似百花争艳迎春怒放。其中，人工智能尤其引人注目。进入20世纪后，人工智能开始孕育于人类社会母胎。到20世纪30—40年代发生了两件极其重要的事件：数理逻辑的形式化和智能可计算（机器能思维）的思想，建立了计算与智能关系的概念。被称为“人工智能之父”（The father of AI）的图灵（Turing AM），于1936年创立了自动机理论，提出一个理论计算机模型，奠定电子计算机设计基础，促进人工智能特别是思维机器的研究。1950 年图灵的论文“机器能思考吗？”，为即将问世的人工智能提供了科学性和开创性的构思。</p>
<p>1956 年夏季由麦卡锡（McCarthyJ）、明斯基（Minsky ML）、罗彻斯特（Lochester N）和香农（Shannon CE）共同发起，并邀请其他6位年轻的科学家，在美国达特茅斯（Dartmouth）大学举办了一次长达两个月的十人研讨会，讨论用机器模拟人类智能问题，首次使用“人工智能”这一术语。这是人类历史上第一次人工智能研讨会，标志着国际人工智能学科的诞生，具有十分重要的历史意义。发起这次研讨会的人工智能学者麦卡锡和明斯基，则被誉为国际人工智能的“奠基者”或“创始人”（The founding father），有时也称为“人工智能之父”。</p>
<p>中国的人工智能经历了怎样的发展过程？取得哪些成绩？存在什么问题？面临何种机遇？有哪些解决方案？本文力图逐一探讨。</p>
<h2 id="一、发展过程"><a href="#一、发展过程" class="headerlink" title="一、发展过程"></a>一、发展过程</h2><p>与国际上人工智能的发展情况相比，国内的人工智能研究不仅起步较晚，而且发展道路曲折坎坷，历经了质疑、批评甚至打压的十分艰难的发展历程。直到改革开放之后，中国的人工智能才逐渐走上发展之路。</p>
<h3 id="1-迷雾重重"><a href="#1-迷雾重重" class="headerlink" title="1.迷雾重重"></a>1.迷雾重重</h3><p>20世纪50—60年代，人工智能在西方国家得到重视和发展，而在苏联却受到批判，将其斥为“资产阶级的反动伪科学”。当时，受苏联批判人工智能和控制论（Cybernetics）的影响，中国在20世纪50年代几乎没有人工智能研究；20世纪60年代后期和70年代，虽然苏联解禁了控制论和人工智能的研究，但因中苏关系恶化，中国学术界将苏联的这种解禁斥之为“修正主义”，人工智能研究继续停滞。那时，人工智能在中国要么受到质疑，要么与“特异功能”一起受到批判，被认为是伪科学和修正主义。《摘译外国自然科学哲学》月刊1976年第3期刊文称：“在批判‘图像识别’和‘人工智能’研究领域各种反动思潮的斗争中，走自己的道路”。这足见中国人工智能研究迷雾重重的艰难处境。</p>
<p>1978年3月，全国科学大会在北京召开。在华国锋主持的大会开幕式上，邓小平发表了“科学技术是生产力”的重要讲话。大会提出“向科学技术现代化进军”的战略决策，打开解放思想的先河，促进中国科学事业的发展，使中国科技事业迎来了科学的春天[9]。这是中国改革开放的先声，广大科技人员出现了思想大解放，人工智能也在酝酿着进一步的解禁。吴文俊提出的利用机器证明与发现几何定理的新方法——几何定理机器证明（图1），获得1978年全国科学大会重大科技成果奖就是一个好的征兆。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58590044782c5.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>20世纪80年代初期，钱学森等主张开展人工智能研究，中国的人工智能研究进一步活跃起来。但是，由于当时社会上把“人工智能”与“特异功能”混为一谈，使中国人工智能走过一段很长的弯路。一方面，包括许多人工智能学者在内的研究者把人工智能与特异功能搅在一起“研究”；另一方面，社会上在批判“特异功能”时将“人工智能”一起进行批判，把两者一并斥之为“伪科学”。</p>
<h3 id="2-艰难起步"><a href="#2-艰难起步" class="headerlink" title="2.艰难起步"></a>2.艰难起步</h3><p>20世纪70年代末至80年代，知识工程和专家系统在欧美发达国家得到迅速发展，并取得重大的经济效益。当时中国相关研究处于艰难起步阶段，一些基础性的工作得以开展。</p>
<h4 id="1）-派遣留学生出国研究人工智能。"><a href="#1）-派遣留学生出国研究人工智能。" class="headerlink" title="1） 派遣留学生出国研究人工智能。"></a>1） 派遣留学生出国研究人工智能。</h4><p>改革开放后，自1980 年起中国大批派遣留学生赴西方发达国家研究现代科技，学习科技新成果，其中包括人工智能和模式识别等学科领域。这些人工智能“海归”专家，已成为中国人工智能研究与开发应用的学术带头人和中坚力量，为发展中国人工智能做出举足轻重的贡献。</p>
<h4 id="2）-成立中国人工智能学会。"><a href="#2）-成立中国人工智能学会。" class="headerlink" title="2） 成立中国人工智能学会。"></a>2） 成立中国人工智能学会。</h4><p>1981 年9 月，中国人工智能学会（CAAI）在长沙成立，秦元勋当选第一任理事长。于光远在大会期间主持了一次大型座谈会，讨论有关人工智能的一些认识问题。他指出：“人工智能是一门新兴的科学，我们应该积极支持；对所谓‘人体特异功能’的研究是一门伪科学，不但不应该支持，而且要坚决反对。”1982年，中国人工智能学会刊物《人工智能学报》在长沙创刊，成为国内首份人工智能学术刊物。</p>
<p>CAAI首任理事长秦元勋也颇受争议。秦元勋获美国哈佛大学博士学位后于1948年回国，历任中国科学院数学研究所研究员、执行副所长，中国核学会计算物理学会理事长，中国人工智能学会首届理事长等职。他在常微分方程的定性理论、运动稳定性、近似解析、机器推理等方面的研究，在中国处于开创的地位。其中极限环的研究，具有国际先进水平。他曾负责完成了中国第一颗原子弹和氢弹的威力计算工作，是1982年国家自然科学奖一等奖的原子弹氢弹设计原理中的物理力学数学理论项目的主要工作者之一，并开辟了计算物理学这一新的学科分支。</p>
<h4 id="3）-开始人工智能的相关项目研究。"><a href="#3）-开始人工智能的相关项目研究。" class="headerlink" title="3） 开始人工智能的相关项目研究。"></a>3） 开始人工智能的相关项目研究。</h4><p>20世纪70年代末至80年代前期，一些人工智能相关项目已被纳入国家科研计划。例如，在1978年召开的中国自动化学会年会上，报告了光学文字识别系统、手写体数字识别、生物控制论和模糊集合等研究成果，表明中国人工智能在生物控制和模式识别等方向的研究已开始起步。又如，1978年把“智能模拟”纳入国家研究计划。不过，当时还未能直接提到“人工智能”研究，说明中国的人工智能禁区有待进一步打开。</p>
<h3 id="3-迎来曙光"><a href="#3-迎来曙光" class="headerlink" title="3.迎来曙光"></a>3.迎来曙光</h3><p>1984年1月和2月，邓小平分别在深圳和上海观看儿童与计算机下棋时，指示“计算机普及要从娃娃抓起”。此后，中国人工智能研究的境遇有所好转。例如，人民日报关于人工智能的报道也渐渐多了起来。20世纪80年代中期，中国的人工智能迎来曙光，开始走上比较正常的发展道路。</p>
<p>国防科工委于1984年召开了全国智能计算机及其系统学术讨论会，1985年又召开了全国首届第五代计算机学术研讨会。1986年起把智能计算机系统、智能机器人和智能信息处理等重大项目列入国家高技术研究发展计划（863计划）。</p>
<p>1986 年，清华大学校务委员会经过三次讨论后，决定同意在清华大学出版社出版《人工智能及其应用》著作。</p>
<p>1987年7月《人工智能及其应用》在清华大学出版社公开出版，成为国内首部具有自主知识产权的人工智能专著。接着，中国首部人工智能、机器人学和智能控制著作分别于1987年、1988 年和1990 年问世。1988 年2月，主管国家科技工作的国务委员兼国家科委主任宋健亲笔致信蔡自兴（图2），对《人工智能及其应用》的公开出版和人工智能学科给予高度评价，指出该人工智能著作的编著和出版“使这一前沿学科的最精彩的成就迅速与中国读者见面，这对人工智能在中国的传播和发展必定会起到重大的推动作用……我深信，以人工智能和模式识别为带头的这门新学科，将为人类迈进智能自动化时期做出奠基性贡献。”宋健对该书的高度评价，体现出他对发展中国人工智能的关注和对作者的鼓励，对中国人工智能的发展产生了重大和深远的影响。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/585905375ab50.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>在这封信中宋健还提到：“十年前，当我们和钱先生修订工程控制论时，尚无系统参考书可言，只能断断续续介绍一些思路。现在钱先生看到此书，也一定会欣喜万分。”这体现了宋健的谦虚品德，也表现出钱学森当时对人工智能的热烈支持。</p>
<blockquote>
<p>1987年《模式识别与人工智能》杂志创刊。<br>1989年首次召开了中国人工智能联合会议（CJCAI），至2004年共召开了8次。此外，还曾经联合召开过6届中国机器人学联合会议。<br>1993年起，把智能控制和智能自动化等项目列入国家科技攀登计划。<br>1993年7月，宋健应邀为中国人工智能学会智能机器人分会成立题词“人智能则国智科技强则国强”，向成立大会表示祝贺。本题词很好地阐明了人工智能与提高民族素质、增强科技实力和建设现代化强国的辩证关系，也是国家科技领域领导人对中国人工智能事业的有力支持以及对全国人工智能工作者的殷切期望。</p>
</blockquote>
<h3 id="4-蓬勃发展"><a href="#4-蓬勃发展" class="headerlink" title="4.蓬勃发展"></a>4.蓬勃发展</h3><p>进入21世纪后，更多的人工智能与智能系统研究课题获得国家自然科学基金重点和重大项目、国家高技术研究发展计划（863 计划）和国家重点基础研究发展计划（973计划）项目、科技部科技攻关项目、工信部重大项目等各种国家基金计划支持，并与中国国民经济和科技发展的重大需求相结合，力求为国家做出更大贡献。这方面的研究项目很多，代表性的研究有视觉与听觉的认知计算、面向Agent的智能计算机系统、中文智能搜索引擎关键技术、智能化农业专家系统、虹膜识别、语音识别、人工心理与人工情感、基于仿人机器人的人机交互与合作、工程建设中的智能辅助决策系统、未知环境中移动机器人导航与控制等。</p>
<p>2006年8月，中国人工智能学会联合其他学会和有关部门，在北京举办了“庆祝人工智能学科诞生50周年”大型庆祝活动。除了人工智能国际会议外，纪念活动还包括由中国人工智能学会主办的首届中国象棋计算机博弈锦标赛暨首届中国象棋人机大战。东北大学的“棋天大圣”象棋软件获得机器博弈冠军；“浪潮天梭”超级计算机以11：9的成绩战胜了中国象棋大师。这些赛事的成功举办，彰显了中国人工智能科技的长足进步，也向广大公众进行了一次深刻的人工智能基本知识普及教育。主办者认为，这次中国象棋人机大战“无论赢家是人类大师或超级计算机，都是人类智慧的胜利”。</p>
<p>同年，《智能系统学报》创刊（图3），这是继《人工智能学报》和《模式识别与人工智能》之后国内第3份人工智能类期刊。他们为国内人工智能学者和高校师生提供了一个学术交流平台，对中国人工智能研究与应用起到促进作用。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58590559ccd2a.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>2009 年，中国人工智能学会牵头组织，向国家学位委员会和国家教育部提出设置“智能科学与技术”学位授权一级学科的建议。该建议指出：现在信息化向智能化迈进”的趋势已经显现；因此，今天培养的智能科学技术高级人才大军，正好赶上明天信息化向智能化大规模迈进的需要。为此，一个顺理而紧迫的建议就是：为了适应信息化向智能化迈进的大趋势，为了实现建设创新型国家的大目标，在中国学位体系中增设智能科学与技术博士和硕士学位授权一级学科。这个建议凝聚了中国广大人工智能教育工作者的心智心血和他们的远见卓识，对中国人工智能学科建设具有十分深远的意义。</p>
<h3 id="5-国家战略"><a href="#5-国家战略" class="headerlink" title="5.国家战略"></a>5.国家战略</h3><p>近两年来，中国的人工智能已发展成为国家战略。国家最高领导人习近平、李克强发表重要讲话，对发展中国人工智能和机器人学给予高屋建瓴的指示与支持。</p>
<p>2014年6月9日，习近平总书记在中国科学院第十七次院士大会、中国工程院第十二次院士大会开幕式上发表重要讲话强调：“由于大数据、云计算、移动互联网等新一代信息技术同机器人技术相互融合步伐加快，3D打印、人工智能迅猛发展，制造机器人的软硬件技术日趋成熟，成本不断降低，性能不断提升，军用无人机、自动驾驶汽车、家政服务机器人已经成为现实，有的人工智能机器人已具有相当程度的自主思维和学习能力。……我们要审时度势、全盘考虑、抓紧谋划、扎实推进。”这是党和国家最高领导人首次对人工智能和相关智能技术的高度评价，是对开展人工智能和智能机器人技术开发的庄严号召和大力推动。</p>
<p>2015年十二届全国人大三次会议上，李克强总理在政府工作报告中提出：“人工智能技术将为基于互联网和移动互联网等领域的创新应用提供核心基础。未来人工智能技术将进一步推动关联技术和新兴科技、新兴产业的深度融合，推动新一轮的信息技术革命，势必将成为我国经济结构转型升级的新支点。”这是对人工智能技术的重要作用给予的充分肯定，是对人工智能的有力促进。</p>
<p>2015年5月，国务院发布《中国制造2025》（图4），部署全面推进实施制造强国战略。这是中国实施制造强国战略第一个十年的行动纲领。围绕实现制造强国的战略目标，《中国制造2025》明确了9项战略任务和重点。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/5859067cb1989.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>这些战略任务，无论是提高创新能力、信息化与工业化深度融合、强化工业基础能力、加强质量品牌建设，或是推动重点领域突破发展、全面推行绿色制造、推进制造业结构调整、发展服务型制造和生产性服务业、提高制造业国际化发展水平，都离不开人工智能的参与，都与人工智能的发展密切相关。人工智能是智能制造不可或缺的核心技术。</p>
<p>2016年4月，工业和信息化部、国家发展改革委、财政部等三部委联合印发了《机器人产业发展规划（2016—2020年）》，为“十三五”期间中国机器人产业发展描绘了清晰的蓝图。该发展规划提出的大部分任务，如智能生产、智能物流、智能工业机器人、人机协作机器人、消防救援机器人、手术机器人、智能型公共服务机器人、智能护理机器人等，都需要采用各种人工智能技术。人工智能也是智能机器人产业发展的关键核心技术。</p>
<p>2016年5月，国家发改委和科技部等4部门联合印发《“互联网+”人工智能三年行动实施方案》，明确未来3年智能产业的发展重点与具体扶持项目，进一步体现出人工智能已被提升至国家战略高度。根据方案的内容，未来3年将在3个大方面、9个小项推进智能产业发展。</p>
<p>国家最高领导人对人工智能的高度评价和对发展我国人工智能的指示，《中国制造2025》、《机器人产业发展规划（2016—2020 年）》和《“互联网+”人工智能三年行动实施方案》的发布与施行，体现了中国已把人工智能技术提升到国家发展战略的高度，为人工智能的发展创造了前所未有的优良环境，也赋予人工智能艰巨而光荣的历史使命。</p>
<p>2015年7月在北京召开了“2015中国人工智能大会”。发表了《中国人工智能白皮书》，包括“中国智能机器人白皮书”、“中国自然语言理解白皮书”、“中国模式识别白皮书”、“中国智能驾驶白皮书”和“中国机器学习白皮书”，为中国人工智能相关行业的科技发展描绘一个轮廓，给产业界指引一个发展方向。</p>
<p>2016年4月由中国人工智能学会发起，联合20余家国家一级学会，在北京举行“2016 全球人工智能技术大会暨人工智能60 周年纪念活动启动仪式”（图5）。这次活动恰逢国际人工智能诞辰60周年，谷歌AlphaGo与韩国围棋九段棋手李世石上演“世纪人机大战”（图6），将人工智能的关注度推到了前所未有的高度。启动仪式共同庆祝国际人工智能诞辰60周年，传承和弘扬人工智能的科学精神，开启智能化时代的新征程。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/585906b78c2d7.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>现在，人工智能已发展成为国家发展战略，中国已有数以10万计的科技人员和大学师生从事不同层次的人工智能相关领域研究、学习、开发与应用，人工智能研究与应用已在中国空前开展，硕果累累，必将为促进其他学科的发展和中国的现代化建设做出新的重大贡献。</p>
<h2 id="二、主要成就"><a href="#二、主要成就" class="headerlink" title="二、主要成就"></a>二、主要成就</h2><p>中国的人工智能研究开发、学科建设、产业应用和社会服务等方面，已经取得不俗的成就，主要可以从以下几点得到证实。</p>
<h3 id="1-形成人工智能学科"><a href="#1-形成人工智能学科" class="headerlink" title="1.形成人工智能学科"></a>1.形成人工智能学科</h3><p>1981年9月建立了全国性的人工智能组织中国人工智能学会（CAAI），标志着中国人工智能学科的诞生。1982年在长沙创办中国人工智能学会刊物《人工智能学报》，成为中国人工智能学科领域的第一份学术刊物。中国人工智能学会大会每两年举行一次，至目前已举办16届。中国人工智能学会成立后，又相继成立了中国人工智能学会智能机器人专业委员会、机器学习专业委员会、模式识别专业委员会、自然语言处理专业委员会和智能控制专业委员会、人工智能教育工作委员会等。</p>
<p>此外，中国计算机学会的一些二级学会也开展人工智能相关学术活动，为中国人工智能的发展做出了应有贡献。例如，中国计算机学会成立了人工智能与模式识别专业委员会，中国自动化学会成立了模式识别与机器智能专业委员会以及智能自动化专业委员会等二级学会。有些省市也成立了地方人工智能学会。1989—2004 年，由中国人工智能学会、中国计算机学会等多个学会联合举办过7届中国人工智能联合会议（CJCAI）。</p>
<p>与人工智能密切相关的机器学习、模式识别、智能机器人、自然语言处理、专家系统等领域的学术组织也先后成立，学术活动也十分热烈。例如，国内机器学习的重要学术活动包括每两年举行一次的中国机器学习会议和每年举行的中国机器学习及其应用研讨会。前者由中国计算机学会人工智能与模式识别专业委员会协办，目前已历经15届。后者每届会议包括特邀报告、大会交流及Top Conference Review等部分，迄今已历经13届。又如，中国人工智能学会智能机器人专业委员会自1993年成立以来，每两年举行一次全国智能机器人学术会议，已组织过11届，还与其他学会共同举办过6次中国机器人联合会议。在王湘浩倡导与组织下，全国高校人工智能研讨会研究班自1980年起每年举行一次，是国内最早的人工智能学术研讨活动。</p>
<p>这些人工智能学术组织和会议开展广泛深入的国内外学术交流，对开展人工智能学术活动和组织科技交流起到积极的作用，有力推动了中国人工智能科技发展和学科建设。</p>
<h3 id="2-科学研究成绩斐然"><a href="#2-科学研究成绩斐然" class="headerlink" title="2.科学研究成绩斐然"></a>2.科学研究成绩斐然</h3><p>国家已先后设立了各种与人工智能相关的研究课题，如国家自然科学基金重大专项、重点项目和面上项目，国家863计划项目，国家重大战略项目智能制造2025等。在这些科研基金的支持下，国内人工智能研究已取得许多突出成果。</p>
<h4 id="1）人工智能基础研究成果突出"><a href="#1）人工智能基础研究成果突出" class="headerlink" title="1）人工智能基础研究成果突出"></a>1）人工智能基础研究成果突出</h4><p>除了前面提到的几何定理证明的“吴氏方法”外，吴文俊还于2004 年发表了重要论文“计算机时代的脑力劳动机械化与科学技术现代化”，宣布他在几何定理证明“机械化”方面的系列成果，指出：“在几何定理机器证明取得成功之后的20多年来，笔者与许多志同道合的同志们在科技部、科学院、基金委等大力支持下，开展了一场可谓‘数学机械化’的‘运动’，在理论与应用诸多方面都已取得了若干成功。”</p>
<p>国内学者在人工智能的诸多领域，如问题求解、不确定推理、泛逻辑理论、拓扑学、模式识别、图像处理、机器学习、专家系统、智能计算和智能控制等领域的基础研究也多有建树，取得一批具有国际先进水平的创造性成果。例如，在模式识别方面，对文字识别、语音识别（图7）、指纹识别、人脸识别、虹膜识别和步态识别等进行深入研究，涉及生物医学、卫星遥感、机器人视觉、货物检测、目标跟踪、自主导航、保安、银行、交通、军事、电子商务和多媒体网络通信等应用领域。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/585908a8275b7.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>又如，机器学习也是人工智能的核心研究领域之一。现在机器学习的大数据往往体现出多源异构、语义复杂、规模巨大、动态多变等特殊性质，为传统机器学习技术带来了新的挑战。为应对这一挑战，国内科技企业巨头华为、百度等与国外巨头谷歌、微软、亚马逊等展开竞争，纷纷成立以机器学习技术为核心的研究院，以充分挖掘大数据中蕴含的巨大商业与应用价值。深度学习是机器学习领域一个新兴的子领域与研究方向，它是一种通过多层表示来对数据之间的复杂关系进行建模的算法。深度学习模仿人脑结构，具有更强的建模和推理能力，能够更有效地解决多类复杂的智能问题。近年来，中国在深度学习研究方面也取得重要进展，一些研究成果接近或达到国际先进水平。</p>
<p>中国学者在自动规划领域也取得开创性成果。1985年提出与发展了基于专家系统的机器人规划机理与方法，实现了人工智能专家系统与机器人技术的结合，为基于知识的自动规划和高层控制开辟了一条新途径，对提高生产的智能化水平具有重要意义，并推动国内外机器人规划研究的发展。该成果被广泛引用，并被收入清华大学吴麒等主编的全国高校规划教材《自动控制原理》。1999年以来，又在机器人进化规划方面取得创新性成果。</p>
<p>国内在认知计算、情感计算、模式识别、神经网络、智能驾驶、水下机器人和其他智能机器人等领域也取得一批具有国际先进水平的研究成果，培养了一批优秀的学术带头人：郭爱克、任继福、李衍达、王守觉、焦李成、贺汉根、蔡鹤皋、徐玉如和黄心汉等。</p>
<p>此外，有些人工智能基础研究获得国际奖励，如1990年张钹获得ICL欧洲人工智能奖，蔡自兴指导的王勇博士获得2015 IEEE计算智能学会优秀博士学位论文奖等。</p>
<p>值得一提的是美籍华裔学者王浩对人工智能的杰出贡献。1958 年夏天，王浩在纽约州的IBM实验室的一台IBM704机器上用汇编语言编写了3个程序，证明了罗素和怀特海《数学原理》中的200多个定理。他关于数理逻辑的一个命题被国际上定为“ 王氏悖论”。1966年，他在哈佛大学指导的博士生Stephen Cook，因NP 完全性方面的开创性研究成果而获得1982年图灵奖。王浩还与吴文俊进行了合作研究。</p>
<h4 id="2）专用人工智能开发有所突破"><a href="#2）专用人工智能开发有所突破" class="headerlink" title="2）专用人工智能开发有所突破"></a>2）专用人工智能开发有所突破</h4><p>中国在专用人工智能领域取得了突破性的进展，已在自然语言处理和语音识别、图像识别、机器学习、虚拟现实、智能处理器、认知计算、智能驾驶和智能机器人等方面取得一大批具有国际先进水平的应用成果。</p>
<p>互联网和大数据推动人工智能进入了新的发展阶段。中国的智能语音技术在移动互联网、呼叫中心、智能家居、汽车电子等领域的研究与应用逐步深入，带动智能语音产业规模持续快速增长。2013年科大讯飞以54.2%的市场份额继续处于国内领先地位。智能语音正在成为主流的交互方式之一。</p>
<p>近几年在多层神经网络基础上发展起来的深度学习和深度神经网络已在中国很多模式识别领域获得成功应用。其中，中国科学院自动化研究所谭铁牛团队在虹膜识别领域，坚持从虹膜图像信息获取的源头进行系统创新，全面突破虹膜识别领域的成像装置、图像处理、特征抽取、识别检索、安全防伪等一系列关键技术，建立了虹膜识别比较系统的计算理论和方法体系，还建成目前国际上最大规模的共享虹膜图像库，已大规模用于煤矿人员辨识和北京城铁监控等，并在70个国家和地区的3000 多个科研团队推广使用，有力推动了虹膜识别学科发展。</p>
<p>在2010年举行的国际上难度最高、规模最大的虹膜识别专业测评竞赛中，谭铁牛团队提交的算法，从来自25个国家和地区的41支参赛团队里脱颖而出，以测试性能指标超过第2名41.3%的绝对优势蝉联虹膜识别算法赛事冠军（图8）。在2008年进行的上届国际虹膜识别算法竞赛上，谭铁牛团队战胜来自35个国家和地区的97支参赛队伍。这充分展示出中国在虹膜识别领域领先国际的整体实力。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/585909293d30f.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>在模式识别领域，石青云领衔的北大高科指纹技术有限公司在指纹识别领域取得领先成果，成为国家科技强警的利剑。</p>
<p>专家系统已在国内获得广泛应用，应用领域涉及工业、农业等行业，其经济效益相当可观。例如，在冶金专家系统的开发与应用方面，已把专家系统技术用于高炉建模、监控与诊断等，建立了基于多核学习的高炉自动化框架、基于Volterra级数的高炉系统数据驱动建模、高炉热风炉流量设定、高炉炉温预测、铁水含硅量预报、数据采集处理、布料状态评估、炉况分析与监控、诊断与决策支持等专家系统，实现高炉炼铁过程的智能化（图9）。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/5859094328f53.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<h4 id="3）计算智能与进化计算研究引人注目"><a href="#3）计算智能与进化计算研究引人注目" class="headerlink" title="3）计算智能与进化计算研究引人注目"></a>3）计算智能与进化计算研究引人注目</h4><p>计算智能是人工智能的新领域，涉及模糊计算，神经计算、进化计算和免疫计算等。近10多年来，中国在计算智能特别是进化计算研究方面取得不少国际领先成果。中国科技大学、中南大学、西安电子科技大学和中国科学院自动化研究所等院校都做出颇具影响的贡献。蔡自兴团队在进化计算领域研究取得的成果就是一个很好的例证。</p>
<p>蔡自兴团队提出的一些进化计算算法处于国际领先水平，引起国际进化计算学界的广泛重视，已成为相关算法比较的基准，不仅对算法设计观点颇有指导价值，而且已成功地应用于国内外30多个领域，并得到国际高级检索机构的顶级检录，已对国际计算智能研究产生重要影响。例如，他们提出的一种单目标差分进化算法CoDE，已成为美国加州大学伯克利分校Rickard O C 和Sitar N 设计的商业软件bSLOP 的核心技术；该软件已在苹果官方网站上售出。Sahalos J N、Yao X 和Najy W K A 分别把CoDE 算法成功地直接应用于移动通信系统设计、产品缺陷预测软件和电网保护协调。很少有同类算法能够引起国际上如此密切关注和获得这么多的优化问题的成功应用。此外，他们提出的一种被国际上广泛引用和应用的算法，被称为“蔡王算法”（CW Algorithm），获得好评。</p>
<p>近10多年来，计算智能“中国海外军团”异军突起，成绩斐然。在计算智能与进化算法研究领域，Yao X（姚Jin Y C（金耀初）等的研究成果获得国际同行公认，成为进化计算领域的国际学术领军人物，并为中国的计算智能与进化计算研究起到促进作用。</p>
<h3 id="3-著作和科技论文出版发行"><a href="#3-著作和科技论文出版发行" class="headerlink" title="3.著作和科技论文出版发行"></a>3.著作和科技论文出版发行</h3><p>据不完全统计，自1987 年人工智能著作开禁以来全国已编著出版了70多部人工智能著作。这些著作有专著，也有教材，不乏深受读者欢迎的高水平作品。例如，上面提到的引领人工智能著作开禁的《人工智能及其应用》（图10），已先后出版了7个版本，印刷50多次，发行40多万册，拥有上百万读者，得到广泛应用，对国内人工智能基础研究、开发应用和人才培养发挥了重大作用。张钹的专著《问题求解理论与应用》先后在国内外出版，提出基于统计推断的启发式搜索和基于拓扑的空间规划方法，降低了计算复杂性，具有重要的应用价值。此外，谭铁牛、陆汝钤、何新贵、石青云、何志均、涂序彦、钟义信、李德毅、周志华、蔡自兴、蔡文、史忠植、何华灿、施鹏飞、王万森等在国内外出版的人工智能相关专著，在一定程度上反映出中国人工智能的研究成果，对进一步开展国内外学术交流起到重要作用。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/5859098bd9cba.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>此外，从事人工智能相关研究人员和高校师生，已在国内外知名刊物与学术会议上发表了数以万计的人工智能相关论文。其中不乏高水平文章，例如，王勇与蔡自兴合作的论文曾被列为2012 年进化计算国际顶级刊物《IEEETransactions on EvolutionaryComputation》他引次数最高的论文。</p>
<p>还有一些论文被评为国内外学术会议与学术刊物的优秀论文。</p>
<h3 id="4-人工智能教育培养大批专门人才"><a href="#4-人工智能教育培养大批专门人才" class="headerlink" title="4.人工智能教育培养大批专门人才"></a>4.人工智能教育培养大批专门人才</h3><p>人工智能教育和人才培养是人工智能学科发展的重要基础。国内自20世纪80年代中期始，在少数高校开设各种人工智能类课程。经过推广与提高，30年前的人工智能星星之火如今已形成燎原之势，数以百计的高校开设了各种层次的人工智能课程，有些课程已成为我国高校教育园地上的奇葩。</p>
<p>例如，中南大学的“人工智能”课程已成为首批国家级精品课程、教育部新世纪优秀网络课程、国家级全国双语示范课程、首批国家级精品视频公开课和国家级精品资源共享课程。表1所示为入选国家级质量工程的人工智能类相关精品课程名单。这些人工智能类课程在改革中不断发展壮大，已为国家培养了成千上万的人工智能专门人才。虽然这些课程只占数以千计的国家级质量工程课程的冰山一角，但也表明人工智能课程仍然占有一席之地，并具有不可替代的作用，产生了非常的影响力。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/585909b36db13.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>全国智能科学与技术教育暨教学学术会议是国内人工智能教育与教学领域具有特色的最权威的学术盛会，自2003年起已举办10次，对于人工智能及其相关学科的教育教学、学科建设和人才培养发挥了关键作用。</p>
<p>2005年在北京大学开设的智能科学与技术专业，已在全国近30所大学开设，仅这些大学的“智能”专业每年就培养大约2000名人工智能专业人才。据估计，近30年来，全国高校已培养人工智能及其相关学科的硕士和博士数以千计，本科毕业生数以万计。这些高层次的人工智能专门人才是中国发展人工智能的最为宝贵的财富。他们有幸遇上难逢的人工智能大好发展机遇，必将成为中国人工智能跨越式发展的中坚力量。</p>
<h3 id="5-人工智能产业化蓬勃发展"><a href="#5-人工智能产业化蓬勃发展" class="headerlink" title="5.人工智能产业化蓬勃发展"></a>5.人工智能产业化蓬勃发展</h3><p>尽管中国的人工智能产业化应用尚存在较大不足，但仍然已建立了一定的基础，并呈现蓬勃发展的势头。据不完全统计，最近5年内，中国在人工智能产业化应用领域的投资已超过1000多亿元。下面略举数例说明中国人工智能产业化的发展情况。</p>
<h4 id="1）模式识别"><a href="#1）模式识别" class="headerlink" title="1）模式识别"></a>1）模式识别</h4><p>在虹膜识别、步态识别、身份识别等领域取得新成果。近年来，在多层神经网络基础上发展起来的深度学习和深度神经网络在很多模式识别应用领域产生了领先的性能，成为当前最热门的方法。前面提到的虹膜识别及其在身份识别等方面的成功应用，已形成产业，占领国内外市场，就是很好的例证。</p>
<h4 id="2）语音识别"><a href="#2）语音识别" class="headerlink" title="2）语音识别"></a>2）语音识别</h4><p>中国在自然语言处理特别是语音识别领域已经达到国际先进水平。</p>
<p>2015 年中国智能语音产业规模达到40.3亿元，较2014年增长41.0%，远高于全球语音产业增长速度。预计到2017年，中国语音产业规模预计达到100.7亿元。2015年智能语音市场继续保持寡头垄断格局，科大讯飞已跻身全球排名前五，占有中文语音技术市场70%以上市场份额，语音合成产品市场份额达到70%以上。现在中国智能语音的应用需求不断增加，应用市场更加广阔，已在智能家居、智能车载、智能客服、智能金融、智能教育和智能医院等场合得到越来越多的应用。此外，一些海外留学人员也在语音识别领域取得国际领先水平的成果，微软研究院黄学东就是该领域的一位突出代表。</p>
<h4 id="3）人机博弈"><a href="#3）人机博弈" class="headerlink" title="3）人机博弈"></a>3）人机博弈</h4><p>中国象棋是中华民族的文化瑰宝，是一种怡神益智的活动，千百年来长盛不衰，深受广大群众的喜爱。自2006年8月举行“浪潮杯”首届中国象棋人机大战（图11），至今已有10年，共举行过5届大赛，产生深远影响。同样中国也是国际围棋的发源地，无论是国际围棋或中国象棋，在国内具有众多的人机博弈爱好者，其产业发展和市场前景十分看好。仅一款象棋对战游戏平台软件，就可以万人同时参与在线对决。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58590ad26c67f.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<h4 id="4）专家系统"><a href="#4）专家系统" class="headerlink" title="4）专家系统"></a>4）专家系统</h4><p>自20世纪80年代以来，专家系统在工业、农业、商业、科技、教育、服务业等领域获得广泛应用。以农业专家系统为例，开展了各种农业专家系统的研究、开发及推广应用（图12）。例如，作物病虫预测专家系统、农作制度专家系统、玉米低温冷害防御专家系统、蚕育种专家系统、小麦专家系统等。</p>
<p>20世纪90年代以后，中国农业专家系统得到了迅速发展，已成为农业信息技术的突破口。国家自然科学基金委、科技部、农业部和许多省级部门都安排了相应的攻关课题；863计划项目已将农业专家系统等智能化农业信息技术列为国家重点课题，搭建了中国农业专家系统研究开发的战略平台，为农业专家系统的进一步开发起到了积极催化作用。进入2l 世纪以后，农业专家系统的开发速度日益加快，不仅数量增多，而且涉及的领域也更加全面，开发的深度和广度有了很大的进展，为大范围推广应用农业专家系统铺平了道路。如小麦栽培管理农业专家系统、水稻高产栽培专家决策系统、番茄栽培管理专家系统、温室番茄病虫害缺素诊断与防治系统等。这些农业专家系统的开发，促进了农业科技成果的转化，为发展高产、优质、高效农业做出了巨大贡献。</p>
<p>此外，我国在机器学习、智能机器人、智能驾驶等人工智能领域，也已有不同程度的产业集聚，产业化步伐逐步加快。</p>
<p>在中国人工智能产业化过程中，企业巨头抢滩布局人工智能产业链，各大IT公司积极投入人工智能产业研发。</p>
<p>他们非常关注深度学习的应用前景，纷纷成立以机器学习技术为核心的研究院，充分挖掘大数据中蕴含的巨大商业与应用价值。例如，2012年，华为成立诺亚方舟实验室，运用以深度学习为代表的人工智能技术对移动信息大数据进行挖掘，寻找有价值的规律。2013年，百度成立深度学习研究院，研究如何运用深度学习技术对大数据进行智能处理，提高分类和预测等任务的准确性。近年来还涌现出寒武纪、甲骨文、地平线、北京云知音和湖南自兴等一批初露头角的涉及人工智能的创业实体，从某种程度上体现出人工智能领域大众创业万众创新的磅礴生机。</p>
<p>从整体来看，中国的人工智能产业化仍处于起步阶段。毫无疑问，在人工智能产业创业与竞争过程中，会出现多家实力强大的企业，有些企业也会在某些领域内形成领先优势甚至垄断局面。</p>
<h3 id="6-开设多种人工智能奖项"><a href="#6-开设多种人工智能奖项" class="headerlink" title="6.开设多种人工智能奖项"></a>6.开设多种人工智能奖项</h3><p>为了总结中国人工智能的研究成果，表彰人工智能工作者的突出贡献，鼓励更多的人员投身人工智能的创造性研究，设立了一些人工智能奖项，其中比较重要的有如下几种。</p>
<p>吴文俊人工智能科学技术奖是中国智能科学技术领域唯一以个人名字命名、依托社会力量设立的科学技术奖。该奖项以“尊重知识、尊重人才、尊重创造”为方针，奖励在智能科学技术活动中做出突出贡献的单位和个人，以不断推进中国智能科学技术领域创新与发展。该奖项是经国家科学技术奖励委员会批准设立的全国奖项，被誉为“ 中国人工智能科技最高奖”，于2010年起开设，已举行了5届。</p>
<p>其中，有4位人工智能杰出学者获得（终身）成就奖。中国计算机学会也于2010年始设立终身成就奖，授予70岁以上、在计算领域做出卓越成就与贡献、被业界广泛认可的老科学家，其中，有2位从事人工智能研究取得突出成果的计算机学者获得此项殊荣。</p>
<p>“中国象棋人机大战”计算机博弈大赛始于2006年，已举行5届，引起国内外人工智能学界和主流媒体的高度重视。随着今年AlphaGo与围棋九段李世石人机对决引发的新一轮的人工智能与机器博弈热潮，中国象棋的人机大战必将攀上新的高度，为推动中国人工智能发展做出其独特的贡献。</p>
<p>自1998 年以来，已在中国举行了数百场智能系统、智能机器人和智能小车比赛，其中包括一些国际比赛。这些比赛吸引了成千上万的青少年学生参加，并获得大批国内外奖励，这对于提高他们对信息科技特别是人工智能的兴趣，培养他们的创新思维和创新能力，锻炼人工智能科技接班人具有不可替代的重要作用。</p>
<p>中国一些学者和学生还获得国际重要奖励。例如，王勇获得2015 年IEEE计算智能学会优秀博士学位论文奖（图17），这是中国大学首次获得该项殊荣。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58590b3846f73.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>据不完全统计，表2给出获得国内外人工智能重要奖项的名单。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58590c9460b73.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<h3 id="7-国际交流"><a href="#7-国际交流" class="headerlink" title="7.国际交流"></a>7.国际交流</h3><p>改革开放以来，特别是进入21世纪以来，中国的人工智能国际交流与合作进一步开展。</p>
<p>2006 年，中国人工智能学会联合美国人工智能学会和欧洲人工智能协调委员会，共同发起在北京召开了International Conference on ArtificialIntelligence（人工智能国际学术会议，图18），隆重庆祝国际人工智能学科诞生50周年。时任全国人大常委会副委员长的许嘉璐等在大会上致词。中国人工智能研究开拓者和领军人物吴文俊、模糊数学创始人美国Zadeh LA、国际EBMT机器翻译方法发明人Nagao M等在大会上做主题报告。大会开得非常成功，影响广泛。</p>
<p>2013年还承办了第23届国际人工智能联合会议（InternationalJointConference on Artificial Intelligence，IJCAI），这是国际人工智能领域规模最大、影响最广泛、学术地位最高的综合性会议。承办国际人工智能联合会议表明中国的人工智能研究与应用已在世界范围内产生积极影响。</p>
<p>中国还创办与主办一些人工智能或与人工智能密切相关的国际会议。例如，2010 年举办了全球智能控制与自动化国际会议（The World Congresson Intelligent Control and Automation，WCICA），自1993年以来每2年举行一次，共举行了12届。本会议已成为具有国际影响力的智能科技盛会。此外，中国人工智能学会还发起组织“国际高级智能会议”，已经举办了2次。</p>
<h3 id="8-人工智能对社会的影响日益扩大"><a href="#8-人工智能对社会的影响日益扩大" class="headerlink" title="8.人工智能对社会的影响日益扩大"></a>8.人工智能对社会的影响日益扩大</h3><p>人工智能的发展已对人类及其未来产生深远影响，这些影响涉及人类的经济利益、社会作用和文化生活等方面。仅社会影响而言，就包括劳动就业问题、社会结构变化、思维方式与观念、心理上的威胁等。</p>
<h4 id="1）劳务就业问题。"><a href="#1）劳务就业问题。" class="headerlink" title="1）劳务就业问题。"></a>1）劳务就业问题。</h4><p>由于人工智能能够代替人类进行各种脑力劳动，将会使一部分人不得不改变他们的工作方式或工种，甚至造成失业。</p>
<p>####2）社会结构变化。<br>社会结构正在悄然改变，人-机器的社会结构终将被人-智能机器（人工智能）-机器的社会结构取代。从发展的角度看，从医院里看病的“医生”和护理病人的“护士”，旅馆、饭店和商店的“服务员”，办公室的“秘书”，指挥交通的“交通警察”，到家庭的“勤杂工”和“保姆”等，都将由智能机器人取代。因此，人们将不得不学会与智能机器相处，并适应这种变化了的社会结构。</p>
<p>####3）思维方式与观念的变化。<br>一旦智能系统的用户开始相信系统（智能机器）的判断和决定，那么他们有可能不愿多动脑筋，变得懒惰，并失去对许多问题及其求解任务的责任感和敏感性。过分地依赖计算机的建议而不加分析地接受，将会使智能机器用户的认知能力下降，并增加误解。</p>
<p>####4）心理上的威胁。<br>人工智能还使一部分社会成员感到心理上的威胁，或叫做精神威胁。人们一般认为，只有人类才具有感知精神，而且以此与机器相别。如果智能机器的人工智能会超过人类的自然智能，那么人类可能沦为智能机器和智能系统的奴隶。</p>
<p>上述这些影响在国内同样存在。针对社会各界广泛关注人工智能对人类社会的影响，国内已开展人工智能科技知识的普及宣传。例如，通过视频公开课普及人工智能知识。精品视频公开课是向大学生和社会大众免费开放的科学与文化素质教育网络视频课程与讲座，着力广泛传播人类文明优秀成果和现代科学技术前沿知识，提升大学生及社会大众的科学文化素养，服务社会主义先进文化建设，增强中国文化软实力和中华文化国际影响力。国家级精品视频公开课“人工智能PK人类智能”和“从自然世界到智能时代”等，在国内网络媒体播出后，反映热烈，深受欢迎，对扩大人工智能对社会的正面影响，减少人工智能对社会的负面影响起到积极引导的应有效果。</p>
<h2 id="三、存在的问题"><a href="#三、存在的问题" class="headerlink" title="三、存在的问题"></a>三、存在的问题</h2><p>虽然国内人工智能已取得许多骄人成就，但与国家发展战略要求相差甚远，与国际先进水平差距较大。概括起来存在如下几方面的问题。</p>
<h3 id="1）经济效益至上，缺乏远大眼光。"><a href="#1）经济效益至上，缺乏远大眼光。" class="headerlink" title="1）经济效益至上，缺乏远大眼光。"></a>1）经济效益至上，缺乏远大眼光。</h3><p>许多人工智能企业和一些地方政府缺乏远大眼光，追求短期的经济效益，企望1~2年或2~3年内获得明显的经济回报，致使很大一部分人工智能创业企业急功近利，底气不足，发展乏力。需要追求经济效益，但像人工智能这样的高科技产业，或把人工智能技术用于促进其他产业转型升级的产业，其发展应当遵循一定的规律，需要一个过程，需要一定的时间，不能急于求成，过早追求经济效益。</p>
<h3 id="2）人工智能整体水平亟待提高。"><a href="#2）人工智能整体水平亟待提高。" class="headerlink" title="2）人工智能整体水平亟待提高。"></a>2）人工智能整体水平亟待提高。</h3><p>由于国内人工智能起步较晚，未能较早参与相应的人工智能国际技术、专利及标准制定，因此奉上了数额不菲的“学费”。在国内人工智能领域，有很多科研机构和企业在参与技术研发，并在某些领域处于与国外基本同步甚至领先水平，这对于提升中国在未来人工智能领域的技术、标准话语权以及市场应用主导权至关重要。但是，中国人工智能的整体能力和水平远未达到通用智能化程度，人工智能基础研究的总体水平，与国际先进水平仍然存在明显差距。要在整体上赶上国际先进水平依然任重道远，需要时日。</p>
<h3 id="3）国家的决策有待落实于行动。"><a href="#3）国家的决策有待落实于行动。" class="headerlink" title="3）国家的决策有待落实于行动。"></a>3）国家的决策有待落实于行动。</h3><p>中国虽已公布了一批与人工智能相关的发展规划，如《智能制造2025》、《机器人产业发展规划（2016—2020年）》和《“互联网+”人工智能三年行动实施方案》等，但尚未制定全面发展人工智能的国家战略。上述规划与方案也需要把政策规划转化为行动，变成看得见的效益。</p>
<h3 id="4）国家资金支持力度有待进一步提高。"><a href="#4）国家资金支持力度有待进一步提高。" class="headerlink" title="4）国家资金支持力度有待进一步提高。"></a>4）国家资金支持力度有待进一步提高。</h3><p>如前所述，中国已经在许多国家级科学研究和科技发展项目中，支持人工智能及其相关科技项目的研究，而且支持力度不断加大。不过，与“ 互联网+”、智能制造等项目，与欧美一些发达国家的相关项目投入相比，国内对人工智能科研和产业发展的资金支持力度还远远不够。况且，比起其他项目，人工智能需要研究的问题更多，涉及面更广，难度也更大，需要国家支持的力度也更大。</p>
<h3 id="5）科研经费分配不够公正。"><a href="#5）科研经费分配不够公正。" class="headerlink" title="5）科研经费分配不够公正。"></a>5）科研经费分配不够公正。</h3><p>长期以来，对科研经费的分配问题不时引发争议。首先，未能把有限的经费用到最重要和最急需的项目上，而是平均分配，致使一些并不急需使用经费的项目与急需重点支持的项目“平分秋色”。其次，有些基金项目“专家组”成员，以权谋私，为本单位申请项目的立项出力，甚至相互勾结，为专家组成员单位获得项目助一臂之力，而许多非专家组单位成员申请的项目就受到不公正待遇；在一段时间内这几乎成为潜规则。再次，科研经费的评定与使用缺乏有效监督，这些问题在人工智能领域同样存在。</p>
<h3 id="6）公众对人工智能的发展存在顾虑。"><a href="#6）公众对人工智能的发展存在顾虑。" class="headerlink" title="6）公众对人工智能的发展存在顾虑。"></a>6）公众对人工智能的发展存在顾虑。</h3><p>自人工智能孕育于人类社会母胎之日起，人工智能的社会影响就引起人类社会的广泛关注。社会上有一部分人对人工智能和智能机器人的出现与发展表示担忧，担心有朝一日人工智能和智能机器会威胁到人类的生存与发展，其中最典型的要算史蒂芬·霍金。作为当今世界一位极具影响力的物理学家，他担心运用人工智能技术制造能够独立思考的机器，最终会威胁到人类的生存。霍金说：人工智能的全面发展可能导致人类的灭绝（图22）。他的观点引起包括众多民众和一些科技人员的共鸣。当然，社会上也存在另一种观点的，他们认为，尽管人工智能经过60年的发展已取得了巨大进步，但在看得见的未来人工智能的整体水平还难以超越人类智能，还不足以威胁到人类的生存。他们主张必须高度重视人工智能对人类社会的影响，不失时机地研究与制定对策，以消除公众顾虑，确保人类自身安全。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58592e725fcf5.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<h3 id="7）一哄而起可能导致无序竞争。"><a href="#7）一哄而起可能导致无序竞争。" class="headerlink" title="7）一哄而起可能导致无序竞争。"></a>7）一哄而起可能导致无序竞争。</h3><p>有人认为，中国社会存在一种传统文化，即普遍存在“一哄而起，遍地开花”，全国许多地方开发同一产品的现象。这些行为劳民伤财，无法保证产品质量，造成资源和人力的巨大浪费，最终既无经济效益，也无社会效益。以往的大炼钢铁、射流技术、可控硅（晶闸管）器件是这样，现在的汽车生产、机器人产业园、无人机开发等也是如此。当前，不但汽车产能过剩，而且机器人产业园内的多数企业都面临无序竞争的艰难境地，很可能在不久的将来有被淘汰出局的危险。</p>
<p>现在，中国人工智能及其产业已引起政府和社会各界的前所未有的高度重视，值得庆幸的是还没有出现人工智能产业“一哄而起，遍地开花”的现象。人工智能产业的科技起点的门槛比较高，开发创业的难度和风险比较大，有胆识、有基础、有实力的创业者可能要比机器人创业者少，但愿不会重复机器人产业园一哄而起的现象。</p>
<h3 id="8）-盲目乐观和夜郎自大不利发展。"><a href="#8）-盲目乐观和夜郎自大不利发展。" class="headerlink" title="8） 盲目乐观和夜郎自大不利发展。"></a>8） 盲目乐观和夜郎自大不利发展。</h3><p>许多有识之士认为，当前国内人工智能基础研究和应用开发与国际先进水平存在很大差距，国际影响力有待提高。然而，国内有一部分人工智能研究与开发人员却过高地估计成绩，认为国内人工智能已经在很多方面甚至全面超过国际先进水平。</p>
<p>评价一门学科是否达到与超过国际先进水平，不但要有客观标准和国际同行普遍认可，而且要有一批令人信服的标志性成果。这里不准备具体讨论或争论这个问题，而是想从国际计算机学科的科技最高奖图灵奖的获奖情况来说明中国人工智能的发展水平。</p>
<p>自1969 年以来，美国计算机学会先后举行过48届图灵奖评审与颁奖，图灵奖得主共计64位。其中，美籍华裔计算机科学家姚期智2000年获得图灵奖，他是图灵奖设立48年以来获得该奖项的唯一华裔学者。在64位图灵奖得主中，有12位杰出人工智能专家获此殊荣，当中没有一个是中国人。</p>
<p>中国已数次蝉联国际超级计算机运行速度冠军，值得庆贺；但这不足以说明中国人工智能科技已达国际先进水平。许多国内企业巨头的人工智能开发虽然进步很快，成绩可喜可贺，但在总体上也远未达到国际领先水平。</p>
<p>国际IT巨头及欧美日发达国家都纷纷投入巨资，力争在本轮人工智能全球竞争中占据主导地位。我们切不可盲目乐观，过高地估计自己的成绩。</p>
<h3 id="9）存在以哲学研究代替人工智能研究倾向。"><a href="#9）存在以哲学研究代替人工智能研究倾向。" class="headerlink" title="9）存在以哲学研究代替人工智能研究倾向。"></a>9）存在以哲学研究代替人工智能研究倾向。</h3><p>人工智能有哲学问题需要研究，但人工智能不属于哲学。有些人从信息哲学或其他哲学角度进行人工智能研究，既是需要的，也是值得支持的。不过，长期以来国内存在一种以哲学研究代替人工智能研究的倾向，并过分夸大哲学问题对人工智能的作用，甚至企图以哲学主导人工智能学科，值得警惕[129]。</p>
<p>需要就人工智能主流问题进行踏踏实实的研究。吴文俊曾经语重心长地告诫：我们真正的意图绝不在于口舌之争，在字面上夸夸其谈。真正应该做的事是实干巧干，借计算机时代来临的大好契机，率先在全世界推行脑力劳动机械化，以具体成就和向世人表明我们的主张。</p>
<h3 id="10）国际合作需要进一步加强。"><a href="#10）国际合作需要进一步加强。" class="headerlink" title="10）国际合作需要进一步加强。"></a>10）国际合作需要进一步加强。</h3><p>中国虽然进行了一些人工智能的国际合作，包括举办人工智能国际会议、出国出席人工智能国际会议和派遣人员参加人工智能国际合作研究等。这些合作不仅在规模上需要扩大，而且合作水平和成果也需要提升。应该说，人工智能的国际合作需要进一步加强，中国的人工智能国际地位有待进一步提高。</p>
<h2 id="四、发展机遇"><a href="#四、发展机遇" class="headerlink" title="四、发展机遇"></a>四、发展机遇</h2><p>中国的人工智能正面临前所未有的历史发展机遇，具备诸多发展优势。</p>
<h3 id="1）国际大势所趋。"><a href="#1）国际大势所趋。" class="headerlink" title="1）国际大势所趋。"></a>1）国际大势所趋。</h3><p>人类社会的信息环境与科技水平已取得了重大进步，与计算机和人工智能密切相关的大数据、云计算、互联网等已获得快速发展。人工智能已开始对人类社会结构产生重大影响，人——机器二元社会正在逐渐地向人-机器-智能机器三元社会发展。人、机器、智能机器协作与共存将成为人类社会结构的新常态，人、机器、智能机器和谐共存既是社会发展的必然，也为人工智能和人工智能产业提供了用武之地。纵观国际社会与科技发展潮流，人工智能的发展是人类社会进入信息社会后继续前行的重要标志，是国际科技发展的大势所趋，将引领一轮新的机器革命，促进世界产业结构调整，为经济复苏与发展注入正能量。这也是中国人工智能遇上的千载难逢的发展机遇期。</p>
<h3 id="2）国家战略驱动。"><a href="#2）国家战略驱动。" class="headerlink" title="2）国家战略驱动。"></a>2）国家战略驱动。</h3><p>回顾国内人工智能的发展过程可以看到，公众对人工智能的认识、人工智能产业的发展和政府对人工智能重视程度都已经发生了很大变化。</p>
<p>如前所述，中央领导人鼓励发展人工智能，习近平、李克强等对中国人工智能和机器人学的发展给予高度支持和明确指示，并提出目标要求；国务院和相关政府部门已制订与发布了人工智能相关的发展战略规划，如《“互联网+”人工智能三年行动实施方案》、《智能制造2025》和《机器人产业发展规划2016—2020》等。国家战略与政府推动是中国人工智能科技与产业健康发展之源，人工智能如果离开了国家的政策协调，就寸步难行；有了国家的战略支持，就能阔步前进。</p>
<h3 id="3）国内发展需求。"><a href="#3）国内发展需求。" class="headerlink" title="3）国内发展需求。"></a>3）国内发展需求。</h3><p>发展人工智能是国内产业转型升级的需要，发展智能产业和智慧经济需要人工智能的持续创新，人工智能产业化是国家发展的大趋势。</p>
<p>中国的社会经济发展正面临新的机遇与挑战。劳动力红利的缺失、老龄化社会的来临、精英人才的需求、关键技术的开发，都需要通过发展来逐一解决。发展人工智能和智能机器能够实现“机器换人”和产业转型升级，“人工智能+X”将成为万众创新的新时尚和新潮流。不能说发展人工智能能够解决所有的经济问题和社会问题，但是可以说人工智能产业能够为解决现有的经济问题和社会问题创造良机。中国的社会进步和经济发展迫切需要人工智能的得力参与，中国产业转型升级和社会发展重构也为人工智能科技和人工智能产业发展提供了“用武之地”。</p>
<h3 id="4）智力资源优势。"><a href="#4）智力资源优势。" class="headerlink" title="4）智力资源优势。"></a>4）智力资源优势。</h3><p>尽管中国的人工智能起步较晚，又走过一段很长的曲折发展道路，但在中国发展人工智能具备得天独厚的智力资源优势。</p>
<p>其一，人工智能重在智能软件，中国人在这方面具有优良传统和特别的智慧。被誉为“中国人工智能之父”的吴文俊指出：中国不仅具有作为典型脑力劳动的数学机械化的合适土壤，而且也是各种脑力劳动机械化的沃土。古代中国是脑力劳动机械化的故乡，也是脑力劳动机械化的发源地。它有着发展脑力劳动机械化所需要的坚实基础、有效手段与丰富经验。中国历史上研究数学的“术”方法，与现在研究人工智能的“算法”，具有异曲同工之妙。</p>
<p>其二，现在中国拥有庞大的互联网网民群体、最大的网民基数和人才基数，形成首屈一指的人工智能群体资源优势。</p>
<p>其三，中国派遣的大批出国研究人工智能的“海归”专家，已成为中国人工智能研究与开发应用的中流砥柱和学科带头人，对人工智能研究开发、产业应用和人才培养极为重要。</p>
<p>其四，中国改革开放的优越发展环境，已经并将继续汲引更多的从事人工智能研发的海外学子和外国专家前来加盟中国的人工智能建设。</p>
<p>处在最好发展机遇期的中国人工智能科技与产业，只要制定与执行好人才策略，何惧无人？</p>
<h3 id="5）产业初步基础。"><a href="#5）产业初步基础。" class="headerlink" title="5）产业初步基础。"></a>5）产业初步基础。</h3><p>与机器人产业相比，中国的人工智能产业起步很晚，但近年来已在人工智能科研成果及其产业转化上取得长足进展，已与10年前的情况不可同日而语。在当前大数据、云计算、移动互联网深入发展与广泛应用的背景下，国内外IT 企业不失时机布局人工智能产业。以智能语音产业为例，2015 年全球智能语音产业规模达到61.2亿美元，较2014年增长34.2%。其中，中国智能语音产业规模达到40.3亿元人民币，较2014年增长41.0%，远高于全球语音产业增长速度。预计到2016年，中国语音产业规模将达到59亿元人民币。</p>
<p>中国语音产业规模提升主要源于以下3个原因：</p>
<p>首先，政府在智能语音技术研发及产业化方面的政策支持，为语音产业发展创造了良好的发展环境。</p>
<p>其次，语音技术提供商不断优化产品性能，进一步深化了智能语音在车载信息服务系统、智能家居等领域的应用。</p>
<p>其三，4G网络的普及、大数据和云计算的发展，为智能语音应用提供了强有力的保障。</p>
<p>这3个原因也是中国智能语音产业发展的重要基础。</p>
<p>当前IT巨头以智能语音为切入点，积极布局人工智能领域发展。国际上，谷歌、苹果、微软、IBM、Facebook等互联网企业在积极推进智能语音技术研发与应用之后，以此为切入点开始布局整个人工智能领域。国内的百度、腾讯、阿里巴巴、科大讯飞、小i机器人、思必驰、云知声、华大基因、捷通华声等企业，以智能交互（文本或语音）为切入点，积极布局人工智能领域，抢占产业发展制高点。</p>
<p>除了智能语音产业外，中国在自然语言处理的其他方面也有一些创新产品和产业集结。此外，图像处理、机器学习、智能驾驶、智能家居、智能传感器等领域，也已经或正在酝酿产业布局。</p>
<p>中国的人工智能产业正在逐步形成中，其规范性也特别需要加强。</p>
<h3 id="6）金融资本助力。"><a href="#6）金融资本助力。" class="headerlink" title="6）金融资本助力。"></a>6）金融资本助力。</h3><p>随着经济的快速发展和国力的空前提高，中国的金融资本实力已具有举足轻重的国际地位，已向国内外大量投资。近年来，国内的金融资本市场已为人工智能产业的发展开辟了很好的土壤。据最新一期国际金融报报道，随着人工智能的发展，它将像当年互联网的崛起一样，打造一批新的人工智能巨无霸，这些新巨人可能从现有的企业巨头进化而来，也可能从目前还名不见经传的小公司甚至个人创客成长而来。</p>
<p>与此同时，资本市场对智能机器人的热捧，让股市呈现出难得的大合唱格局。机器人行业2015年的投资水涨船高，机器人产业的融资金额达到2014年的3倍以上。同时，机器人产业的并购金额也逐年攀升，众多上市公司纷纷涉足机器人并购，一些国内企业开始瞄准海外市场，掀起更大规模的并购高潮，中国的代步工具开发商纳恩博全资收购美国自平衡车Segway公司就是一例。</p>
<p>随着《中国制造2025》规划进一步落地，中国机器人产业势能将进一步释放。根据公开数据显示，2015年，国内已有约70家上市公司并购或投资了机器人及智能自动化项目，其中许多首次涉足机器人业务，而这一数据将在2016年有望快速被打破。有迹象表明，一旦国家全面出台人工智能战略，国内外金融资本将会以不亚于对智能机器人的热情，投资人工智能产业链。</p>
<p>让机器模仿甚至超越人的智力行为和思考方式，始终是充满丰富想象与巨大挑战的科学领域，近期无人驾驶及AlphaGo等为代表的人工智能技术的重大进展，激发金融资本进入人工智能领域的热情。有的科技巨头更是直白地宣称人类社会将从移动互联时代跨入人工智能时代。</p>
<h2 id="五、发展对策"><a href="#五、发展对策" class="headerlink" title="五、发展对策"></a>五、发展对策</h2><p>针对中国人工智能的发展基础、存在问题、发展机遇，特提出发展中国人工智能产业的战略思考，供讨论与决策参考。</p>
<h3 id="1-出台与实施国家大脑计划"><a href="#1-出台与实施国家大脑计划" class="headerlink" title="1.出台与实施国家大脑计划"></a>1.出台与实施国家大脑计划</h3><p>国务院印发的《“互联网+”行动指导意见》中已明确提出人工智能为形成新产业模式的11 个重点发展领域之一。国家发改委和科技部等4部门于2016年5月23日联合发布《“互联网+”人工智能三年行动实施方案》。根据该方案，未来3年将在3个大方面、9个小项推进智能产业发展。智能家居、智能可穿戴设备、智能机器人等都将成为发展的重点扶持项目。该实施方案明确未来3年人工智能产业的发展重点与具体扶持项目，体现出人工智能领域已被提升至国家战略高度。在国家高度重视下,科研投入增加与人才红利注入预期将加速产业变革,如人脸识别、语言识别、智能机器人等细分领域的应用将不断拓宽并进一步实现商品化。</p>
<p>人工智能已上升到国家战略高度，有必要借鉴西方先进科技国家的做法，探讨并在适当时机出台与实施中国的国家大脑计划（图23）。<br><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58592e39875cc.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<p>近年来，美国、欧盟和日本先后启动了投资巨大的大脑计划。2013年4月，美国总统奥巴马宣布启动“大脑基金计划”，将在未来10年投资约45亿美元。分为2个阶段：前5年着重开发探知大脑的新技术，如功能性核磁共振、电子或光学探针、功能性纳米粒子、合成生物学技术；后5年力争用新技术实现脑科学的新发现包括绘制人类大脑动态图。2013年1月，欧盟启动“人类大脑计划”，将在未来10年内投人10亿欧元，研究重点除了医学和神经科学外还有未来计算机技术。2014年4月，日本的脑计划也宣布启动。</p>
<p>面对激烈的国际竞争，中国有必要汲取欧美日等国的经验教训，跨学科、跨行业讨论论证，集思广益，探讨中国是否需要制订大脑计划？如果需要大脑计划，应该包括哪些内容？什么时候出台与实施符合中国国情的国家大脑计划？“大脑计划”的实施不仅涉及人工智能，而且还与生命科学特别是神经科学密不可分。建议在脑科学领域采用“人工智能+生命科学”的合作模式，集中优势资源，解决当下最迫切的社会需求，如发展预防和治疗脑疾病的诊疗手段，尤其是神经发育疾病、精神类疾病、神经退行性病变的早期诊断和干预。主要的研究应聚焦在脑工作原理和与脑重大疾病防治的相关前沿领域上。</p>
<h3 id="2-全面打牢人工智能基础"><a href="#2-全面打牢人工智能基础" class="headerlink" title="2.全面打牢人工智能基础"></a>2.全面打牢人工智能基础</h3><p>人工智能的基础涉及数学、经济学、神经科学、心理学、哲学、计算机工程、控制论、语言学、生物学、认知科学、仿生学等学科及其交叉。人工智能学科有着十分广泛和极其丰富的研究内容，包括认知建模、知识表示、知识推理、知识工程、机器感知、机器思维、机器学习、机器行为等。不同的人工智能研究者从不同的角度对人工智能内容进行研究。例如，基于脑功能模拟、基于应用领域和应用系统、基于系统结构和支撑环境、分布式人工智能系统、机器定理证明、不确定性推理等。中国学者在人工智能基础研究方面已在机器定理证明、分层知识表示与推理、自动规划、虹膜识别、语音识别、可拓数据挖掘、进化优化等方面取得一些重要成果，具有较大的国际影响力；但总体上看成果还不够多，面不够广，整体影响力也有待进一步提高。</p>
<p>人工智能基础研究是人工智能科技可持续发展的基石。只有打牢人工智能基础，才能为人工智能及其应用的蓬勃发展与全面升级提供原动力。需要全面加强人工智能基础研究，鼓励多学科交叉创新研究，重视和加强人工智能前瞻性基础研究，经过长期努力与积累，使中国的人工智能基础研究整体水平走向国际先进行列。</p>
<h3 id="3-深化人工智能技术开发与推广应用"><a href="#3-深化人工智能技术开发与推广应用" class="headerlink" title="3.深化人工智能技术开发与推广应用"></a>3.深化人工智能技术开发与推广应用</h3><p>应用需求是科技创新的不竭之源，也是人工智能技术的创新之源。被称为加速第四次工业革命到来的“德国工业4.0”，其主题即为3个智能：智能工厂、智能生产和智能物流。《中国制造2025》规划的核心内容就是建立智能化生产线，采用智能化管理运营模式，从设计、工艺、生产、服务保障、管理5个方面的智能化入手，最终全面实现智能制造。人工智能技术对智能制造的关键作用由此可见一斑。</p>
<p>人工智能技术的应用可以推广至各行各业，这些行业需要各自的人工智能典型产品、项目或系统。例如，对工矿企业应用人工智能技术进行的智能化开发可包括：</p>
<p>1）采用智能机器（含智能机器人）代替危险、有毒、放射性等有害环境下和笨重、单调、高空、粉尘等恶劣条件下的劳动，减轻体力和脑力劳动强度，保护工人健康。</p>
<p>2）采用人工智能技术进行厂矿、生产车间、工段和设备的设计，快速优化设计方案，实现生产设计的智能化。</p>
<p>3）应用智能化技术，全面实现制造过程智能化。</p>
<p>4）开发智能咨询与决策系统，提供生产过程的科学咨询、决策与管理，走向生产和人员管理智能化。</p>
<p>5）研发各种专家系统，用于生产规划、生产过程监控与控制、生产系统和设备的智能故障诊断，提高劳动生产率和产品质量。</p>
<p>人工智能开发者要结合各类企业的特点，以推进“中国制造2025”和“互联网+人工智能”为契机，抓住第二次机器革命的历史机遇，实现“人工智能+”，大力发展人工智能技术与产业，为经济新常态注入智能化的思路。要提高工业领域人工智能技术的研发和创新能力，开发高水平的人工智能产品，避免低水平重复和无序竞争。要深化人工智能技术的推广应用，做大做强智能产业。人工智能作为高新技术，更需要创新政策机制、管理体制、市场机制和成果转化机制，为人工智能及其产业的发展提供优良环境，为人工智能的健康发展保驾护航。要出台人工智能应用的鼓励政策，在人工智能技术应用推广和市场开发中，得到国家政策、资金及应用等方面的扶持与支持，加快人工智能新技术尽早从实验室走向应用领域。</p>
<p>在开发与应用人工智能技术过程中，要求真务实，有序发展；要谨防“全民动手，遍地开花”。</p>
<h3 id="4-培养高素质人工智能人才"><a href="#4-培养高素质人工智能人才" class="headerlink" title="4.培养高素质人工智能人才"></a>4.培养高素质人工智能人才</h3><p>人工智能教育是人工智能科技和人工智能产业赖以发展的强化剂和推动力，也是高素质人工智能人才培养及人工智能科技与产业可持续发展的根本保证。中国的人工智能教育已初步形成学科教育与课程教学体系，已在大学计算机、智能科学技术、电子信息、自动化等专业开设不同层次的人工智能课程。中国人工智能发展的存在问题和人工智能的基础建设问题，都与人工智能人才培养密不可分。只有培养好足够多的高素质人工智能人才，才能保证中国人工智能的顺利发展，攀登国际人工智能的高峰。</p>
<p>人工智能人才培养方面，提出以下值得注意的建议：</p>
<h4 id="1）把人工智能人才培养上升为国家教育重点。"><a href="#1）把人工智能人才培养上升为国家教育重点。" class="headerlink" title="1）把人工智能人才培养上升为国家教育重点。"></a>1）把人工智能人才培养上升为国家教育重点。</h4><p>不久前的AlphaGo与李世石的国际围棋人工智能秀，促进中国兴起了一个以人工智能技术推进经济社会智能化的浪潮。人工智能人才是人工智能基础建设的重中之重。做好发展规划、掌握关键技术、进行推广应用都需要高素质的人才去实现。要适应这一社会需求，全面规划高素质人工智能人才培养，为中国人工智能进入新的发展机遇期和可持续发展提供人才保障。需要进一步提高对人工智能人才培养的认识，建立人工智能人才培养制度，全面规划人工智能人才培养，把人工智能人才培养上升为国家教育重点（图24）。</p>
<p><img src="http://static.leiphone.com/uploads/new/article/740_740/201612/58592e50c8817.png?imageMogr2/format/jpg/quality/90" alt=""></p>
<h4 id="2）-建立与规范各级人工智能教育。"><a href="#2）-建立与规范各级人工智能教育。" class="headerlink" title="2） 建立与规范各级人工智能教育。"></a>2） 建立与规范各级人工智能教育。</h4><p>根据市场需求，全面规范各级人工智能教育，开办一定规模与比例的各类学校，包括大学、职业技术学院、人工智能学院、技工学校等；建议国家教育部全面扩大现有“智能科学与技术”专业设置，支持办好“智能科学与技术”等本科专业，加强本科人工智能教学；在部分相关专业设立人工智能研究生培养方向，加强人工智能方向的研究生教育力度；在中小学开设人工智能科技或科普课程，开展形式多样的人工智能课外活动，培养中小学生对人工智能的兴趣；搞好人工智能师资培训，提高人工智能教师水平，规范与组织编写各类人工智能教材，为人工智能人才培养提供基本保障。</p>
<h4 id="3）多模式多渠道培养高素质人工智能人才。"><a href="#3）多模式多渠道培养高素质人工智能人才。" class="headerlink" title="3）多模式多渠道培养高素质人工智能人才。"></a>3）多模式多渠道培养高素质人工智能人才。</h4><p>努力探索通过多模式多渠道培养各类高素质人工智能人才，进行人工智能品牌产品开发和市场化营销，总结经验，加以推广。政府主管部门应当为人工智能人才培养提供相关政策支持；国营和民营研究所主要进行人工智能产品开发与创新，让人工智能科技人员发挥才智；学校和学院除参与人工智能产品研发外，首要任务是提供知识资源，培养各层次的高素质人工智能人才；企业要精益求精进行人工智能产品生产，让人工智能科技人才和技术工人充分发挥作用。要建立人工智能人才激励机制，鼓励各类能工巧匠和大师级精英等人工智能优秀人才脱颖而出。鼓励从事人工智能学习与开发的本科生、研究生和科技工作者进行人工智能科技创新创业，对他们的创新思想和原型成果给予创业基金支持。</p>
<h4 id="4）充分利用互联网培养人工智能人才。"><a href="#4）充分利用互联网培养人工智能人才。" class="headerlink" title="4）充分利用互联网培养人工智能人才。"></a>4）充分利用互联网培养人工智能人才。</h4><p>充分利用互联网技术，为人工智能系统的“人工智能+”提供得力的技术保障，为人工智能人才培养提供有效手段。利用与国际接轨的高水平人工智能平台，创建与发展人工智能主流媒体；开发与完善国内人工智能网络教学平台，为各层次人工智能教学提供网络教育服务，为其他课程提供辅助教学工具。</p>
<h3 id="5-深刻认识与国际先进水平的差距"><a href="#5-深刻认识与国际先进水平的差距" class="headerlink" title="5.深刻认识与国际先进水平的差距"></a>5.深刻认识与国际先进水平的差距</h3><p>有些学者或企业家认为，中国的人工智能科技水平已经与美国不相上下。需要科学客观地评估已有成绩，既不要妄自菲薄，又不能夜郎自大。既要充分肯定成绩，又要深刻认识差距。过高地估计中国现有人工智能成果既不实事求是，又不利于人工智能产业的健康发展。</p>
<p>美国是现在人工智能科技整体水平最高的国家。分析中美两国在人工智能方面的差距，有助于我们保持清醒的认识。许多人工智能界内专家指出：我们在人工智能方面一直跟踪美国的理论，然后应用并在一些地方有所创新，应用上的追赶很快。但是，在基础理论研究方面和美国还是差距很大。</p>
<p>国内做人工智能基础理论研究的人很少，这是学术环境问题造成的。例如，美国把脑科学和类脑科学排在研究的最前面，而中国在这方面的自主研发能力却比较薄弱，在突破和创新上也有所差距。又如，国内在深度学习方面发表了不少论文，但真正有理论上创新或具备重要应用价值的研究并不多。</p>
<p>美国人已经在构思下一个人工智能是什么，而国内还没有起步。这是我们面临的最大挑战，这是个难题，牵涉面很广，不是一两个团队投入进去就能解决的。这种差距在很大程度上源于国内学术评价体系以及以实际应用为导向。学术评价体系、待遇保障都有需要改进的地方。我们可能要通过10~20年努力才能在人工智能方面全面赶上美国。</p>
<p>美国公司会投入大量资金培养一批高端的纯技术人员，从他们博士毕业开始，招聘到公司，并致力于人工智能纯技术研发。这样的一个顶尖精英团队，以科技兴趣和信念为动力进行技术研发，在人工智能的研究领域遥遥领先世界水平也不足为奇。而在国内，很少有公司会愿意花大笔经费培养这样的纯技术人工智能团队，公司内部也缺乏奖励机制。在国内高校，人工智能的研究水平也与世界领先水平有很大的差距。</p>
<h3 id="6-增大研究经费支持力度，科学地合理分配经费"><a href="#6-增大研究经费支持力度，科学地合理分配经费" class="headerlink" title="6.增大研究经费支持力度，科学地合理分配经费"></a>6.增大研究经费支持力度，科学地合理分配经费</h3><p>首先，国家要大幅度加大对人工智能的投入力度，特别要重视对人工智能基础研究的长期经费支持，有针对性地加强对有基础和有优势的人工智能产业的支持。要吸取以往国家科研与开发经费分配的经验教训，制订完善合理的经费分配原则和办法，采取有效公正措施，解决国家研究经费分配不公的问题，让国家研究经费“物尽其用”，发挥最大的支持与激励作用。</p>
<p> 其次，鼓励民间金融资本对人工智能产业与创业的投资。在当前人工智能热潮的激励下，许多民间资本有意与人工智能产业结缘。巨头与创业公司发力，共助盘活人工智能市场。百度、阿里巴巴、腾讯等互联网公司均已布局人工智能领域,资金的注入有望盘活市场。据艾瑞咨询调查,目前已有近百家创业公司布局人工智能领域，约65家获得投资,融资金额达29.1 亿元人民币。在国家政策支持、应用需求倒逼、技术进步升级和资金注入等因素共同推动下，千亿级市场盛宴正在开启。注意为非公有人工智能企业营造良好的发展环境，在市场准入、审批办照、待遇与服务等方面，提供宽松和良好的服务，调动民营企业的积极性，加快非公有经济的发展。</p>
<p>不过，由于人工智能产业具有应用前景广、科技含量高、投资回报周期长、技术迭代周期短等特点，不少投资者在谈及人工智能技术时直言“看不懂”，令涉足该领域的资本需付出更多智慧。</p>
<p>他们必须评估所投资的人工智能领域或项目在国内外的技术先进性和商业化应用前景，需要具备一定的专业技术和长线投资眼光。现在很多投资机构比较关注的是短期投资价值，希望3~5年内能够产生回报，但投资人工智能的项目往往回报周期比较长，能不能在预期内产生回报，就需要进一步去判断。投资人工智能科技与产业，必须三思而行。</p>
<p>在加大人工智能研发支持力度的同时，需要加强研发经费的管理。建议在项目评审与实施过程中实行全程科学管理，加强同行评议特别是经费评审和经费使用管理，杜绝浪费，防止腐败，使有限的经费用在人工智能研发的“刀刃”上，助推人工智能科技和产业强劲发展。</p>
<h3 id="7-建设开放共享的人工智能创新发展平台"><a href="#7-建设开放共享的人工智能创新发展平台" class="headerlink" title="7.建设开放共享的人工智能创新发展平台"></a>7.建设开放共享的人工智能创新发展平台</h3><p>李彦宏曾在2015年全国政协发言中提出：建议搞一个全球最大规模的人工智能开发平台。我们姑且不谈这个建议跟“中国大脑”有什么关系，而是想来探讨建立一个全国人工智能的开发大平台的必要性和可行性。</p>
<p>在互联网、大数据、云计算的网络时代，像人工智能这样的高新技术和超大数据科学与产业如果没有自己的人工智能通用平台，那要发展是不可想象的。要让科研机构和企业以至个人创客都能公平地在这个平台上做各种各样的创新。现在，人工智能技术已有了实质性的应用，无论是语音识别、图像识别、多语种翻译、机器学习、智能规划、智能控制，还是无人驾驶汽车、无人飞行器和水下自主航行器等智能移动机器人，其核心基础技术都是人工智能技术。智能机器人开发平台、大数据与云计算开发平台、互联网金融开发平台、智能游戏开发平台、人工智能训练开发平台、智能物流系统开发平台、智能电网、智能服务、智能交通、智慧城市、智慧旅游、专家系统等也需要建设开放的人工智能创新发展平台，实现资源设施共享，获得人工智能大平台的强力支持。</p>
<p>中国已拥有极其丰富的计算机和互联网技术资源。随着计算资源和网络资源越来越丰富，成本越来越低，原来计算机不能模拟的许多智力功能现在已经能够模拟了。人工智能是当今世界一个技术的制高点，中国有能力构建一个具有全球影响力的人工智能大平台。同时，要认识到，实现全国甚至全球人工智能资源共享、数据共存和数据积累，还是有很大的差距与难度的，切不可掉以轻心。</p>
<h3 id="8-抓实人工智能产品的标准化建设"><a href="#8-抓实人工智能产品的标准化建设" class="headerlink" title="8.抓实人工智能产品的标准化建设"></a>8.抓实人工智能产品的标准化建设</h3><p>人工智能产品兼有硬件和软件等，而以软件为其技术核心。以往我国的人工智能产品为数不多，虽然没有国家标准，但影响较小。随着人工智能产业的迅速崛起，人工智能新产品很可能出现井喷之势。这些人工智能产品可能鱼目混珠，泥沙俱下，不可避免地会掺杂一批伪劣产品，扰乱市场。为保障人工智能产业的健康发展，保护广大消费者的正当权益，政府立法与质量检查部门以及市场管理部门，需要未雨绸缪，不失时机抓紧制订或审定人工智能产品标准，严格产品检查，严禁不合格的人工智能产品投放市场。只有让合格的人工智能制品进入市场，才能维护人工智能高科技的信誉，使人工智能产业形成良性发展，进而促进人工智能产业真正成为智能制造的核心技术、国民经济结构转型升级的新支点和新一轮产业革命的引擎。</p>
<h3 id="9-发展人工智能文化"><a href="#9-发展人工智能文化" class="headerlink" title="9.发展人工智能文化"></a>9.发展人工智能文化</h3><p>人工智能对人类文化有诸多影响。人工智能技术能够改善人类知识、改善人类语言、改善文化生活。需要营造与发展人工智能文化。人工智能知识的普及工作也是人工智能文化的一个重要组成部分。</p>
<p>人工智能的科学普及涉及两个方面。一方面向大众传播人工智能基础知识，让他们客观了解人工智能，正确认识人工智能，积极支持人工智能。另一方面向广大青少年普及人工智能基本知识，培养他们对人工智能的兴趣，甚至发现与培养一批人工智能科学技术的接班人。为此，需要开展一系列的工作。</p>
<p>首先，大力开展人工智能科普活动需要加强人工智能的教育和科普人才队伍建设，这是人工智能可持续发展的重要保证。要让人工智能成为天使而不是魔鬼，科普工作将起到十分重要的作用。</p>
<p>其次，要争取国家和企业的大力支持，建立人工智能科普基地，为普及人工智能知识发挥示范作用；鼓励科技人员和各级教师进行人工智能科普创作，支持出版人工智能科普作品，广泛传播与普及人工智能知识；出版人工智能科普杂志，向青少年介绍国内外人工智能的发展动态、应用示例、科普知识、趣闻轶事；规范与举办各类人工智能科技竞赛和夏令营、冬令营活动，通过丰富多彩的活动，培养广大群众特别是青少年对人工智能的兴趣；面向全国大学生和中小学生，举办人工智能网络竞赛，营造良好的人工智能生态文化。</p>
<p>此外，在发展人工智能文化和科技中，要特别注意发挥各级学术团体的作用，让学会组织为普及人工智能知识和发展人工智能文化发挥特别作用。</p>
<h3 id="10-重视人工智能社会学研究"><a href="#10-重视人工智能社会学研究" class="headerlink" title="10.重视人工智能社会学研究"></a>10.重视人工智能社会学研究</h3><p>人工智能在给创造者、销售者和用户带来经济利益的同时，就像任何新技术一样，其发展也引起或即将出现许多问题，并使一些人感到担心或懊恼。这些问题涉及劳务就业、社会结构变化、思维方式与观念的变化、心理上的威胁和技术失控危险等。社会上一些人担心人工智能技术会抢夺他们的饭碗而导致失业，担忧智能机器人的智慧超过人类而威胁人类安全等。这些都是值得高度关注的影响社会安定和谐的社会问题。</p>
<p>有必要把人工智能的社会学问题提上议事日程。政府部门、科研机构和学术团体，都要把人工智能社会学研究纳入相应计划，研究解决对策与办法。人工智能可能出现的一些负面效应或新问题，如利用人工智能技术进行金融犯罪（即所谓“智能犯罪”），智能驾驶车辆需要出台相应的交通法规等。因此，需要建立相关的政策和法律法规，避免可能风险，确保人工智能的正面效应。只有人工智能应用得好、把握得好，才能确保人工智能不被滥用，确保人工智能是天使而不是魔鬼。</p>
<p>此外，如前所述，人工智能已使社会结构产生变化，人-智能机器-机器协作与共存将成为人类社会结构的新常态，必将对人类社会产生具有跨时代的影响。</p>
<h2 id="六、结论"><a href="#六、结论" class="headerlink" title="六、结论"></a>六、结论</h2><p>国际人工智能经过60年的发展已经取得了巨大进步，目前正呈现爆发增长之势。近年来，国内外人工智能出现前所未有的良好发展环境，各种人工智能新思想和新技术如雨后春笋般破土而出，人工智能的应用领域更加拓展，人工智能的人才队伍日益壮大。但总体上看，人工智能仍处于初级发展阶段，仍远不足以威胁到人类的生存，但是它的社会影响问题应当得到高度重视。</p>
<p>由于历史原因，中国人工智能起步较晚，而且走过一段很长的弯路。不过，改革开放以来，中国人工智能逐步走上发展的康庄大道。如今，中国人工智能迎来了发展的春天，正在酝酿一场重大的人工智能变革与创新，必将为中国的现代化建设做出历史性贡献。</p>
<p>作为智能化时代的关键技术，人工智能将日益成为新一轮产业革命的引擎，必将深刻影响国际产业竞争格局和国家的国际竞争力。应当以“互联网+”、“中国制造2025”和“人工智能+”等国家战略为契机，抓住第二次机器革命的历史机遇，大力发展人工智能技术与产业，为经济的新常态注入智能化思路。要系统谋划，瞄准国际人工智能发展趋势，立足国内社会发展实际需求，统筹整合国内相关资源，科学设定发展目标。要尊重与探索人工智能发展规律，认清发展形势，发现存在差距，明确努力方向，迎头赶上人工智能的国际先进水平，为国际人工智能的发展做出中国人应有的积极贡献。</p>
<p>发展人工智能科技及其产业，开拓者们需要下定决心，坚定信心，胸怀虚心，树立恒心，锻炼耐心，追求精心，独具匠心，保持细心，让全国人民放心。相信在人工智能发展良机面前，中国各级政府部门和人工智能开发者一定能够抓住机遇，创造新的辉煌，迎接人工智能发展的新时代。人工智能技术和产品就在大家身旁，人工智能时代就在前面。</p>
<p>在本文即将脱稿之际，传来了习近平总书记在全国科技创新大会上发表的“为建设世界科技强国而奋斗”的重要讲话。他在大会上提出的5点要求应当成为包括人工智能在内的中国科技研究探索的指路明灯。让我们响应习总书记的号召，发动人工智能科技创新的强大引擎，向着人工智能科技强国目标不断前进！</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.leiphone.com/author/beiyourenjiyurenzhishiyanshi" target="_blank" rel="external">人机与认知实验室</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中国的人工智能经历了怎样的发展过程？取得哪些成绩？存在什么问题？面临何种机遇？有哪些解决方案？&lt;/p&gt;
&lt;p&gt;雷锋网按：本文作者蔡自兴，来自湖南省自兴人工智能研究院、中南大学智能系统与智能软件研究所。文章来自北邮人机与认知实验室，雷锋网(公众号：雷锋网)已获授权。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.leiphone.com/uploads/new/article/740_740/201612/58590044782c5.png?imageMogr2/format/jpg/quality/90&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="History" scheme="http://ipcreator.me/tags/History/"/>
    
      <category term="China" scheme="http://ipcreator.me/tags/China/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning</title>
    <link href="http://ipcreator.me/2017/03/27/AI/Business/concept-of-machine-learning/"/>
    <id>http://ipcreator.me/2017/03/27/AI/Business/concept-of-machine-learning/</id>
    <published>2017-03-27T01:58:06.000Z</published>
    <updated>2017-03-27T09:06:23.123Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/330px-Hopfield-net.png" alt=""></p>
<p>机器学习是人工智能的一个分支。人工智能的研究是从以“推理”为重点到以“知识”为重点，再到以“学习”为重点，一条自然、清晰的脉络。</p>
<p>机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。机器学习在近30多年已发展为一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。</p>
<p>机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。</p>
<a id="more"></a>
<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><p>机器学习是人工智能的一个分支。人工智能的研究是从以“推理”为重点到以“知识”为重点，再到以“学习”为重点，一条自然、清晰的脉络。显然，机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。机器学习在近30多年已发展为一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。算法设计方面，机器学习理论关注可以实现的，行之有效的学习算法。很多推论问题属于无程序可循难度，所以部分的机器学习研究是开发容易处理的近似算法。</p>
<p>机器学习已广泛应用于数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人等领域。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>机器学习有下面几种定义：<br>机器学习是一门人工智能的科学，该领域的主要研究对象是人工智能，特别是如何在经验学习中改善具体算法的性能。<br>机器学习是对能通过经验自动改进的计算机算法的研究。<br>机器学习是用数据或以往的经验，以此优化计算机程序的性能标准。<br>一种经常引用的英文定义是：</p>
<blockquote>
<p>A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.</p>
</blockquote>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>机器学习可以分成下面几种类别：</p>
<h3 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h3><p>从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。训练集中的目标是由人标注的。常见的监督学习算法包括回归分析和统计分类。</p>
<h3 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h3><p>与监督学习相比，训练集没有人为标注的结果。常见的无监督学习算法有聚类。</p>
<h3 id="半监督学习"><a href="#半监督学习" class="headerlink" title="半监督学习"></a>半监督学习</h3><p>介于监督学习与无监督学习之间。</p>
<h3 id="增强学习"><a href="#增强学习" class="headerlink" title="增强学习"></a>增强学习</h3><p>通过观察来学习做成如何的动作。每个动作都会对环境有所影响，学习对象根据观察到的周围环境的反馈来做出判断。</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>具体的机器学习算法有：</p>
<h3 id="构造间隔理论分布：聚类分析和模式识别"><a href="#构造间隔理论分布：聚类分析和模式识别" class="headerlink" title="构造间隔理论分布：聚类分析和模式识别"></a>构造间隔理论分布：聚类分析和模式识别</h3><p>人工神经网络<br>决策树<br>感知器<br>支持向量机<br>集成学习AdaBoost<br>降维与度量学习<br>聚类<br>贝叶斯分类器</p>
<h3 id="构造条件概率：回归分析和统计分类"><a href="#构造条件概率：回归分析和统计分类" class="headerlink" title="构造条件概率：回归分析和统计分类"></a>构造条件概率：回归分析和统计分类</h3><p>高斯过程回归<br>线性判别分析<br>最近邻居法<br>径向基函数核</p>
<h3 id="通过再生模型构造概率密度函数"><a href="#通过再生模型构造概率密度函数" class="headerlink" title="通过再生模型构造概率密度函数"></a>通过再生模型构造概率密度函数</h3><p>最大期望算法<br>概率图模型：包括贝叶斯网和Markov随机场<br>Generative Topographic Mapping</p>
<h3 id="近似推断技术"><a href="#近似推断技术" class="headerlink" title="近似推断技术"></a>近似推断技术</h3><p>马尔可夫链<br>蒙特卡罗方法<br>变分法</p>
<h3 id="最优化"><a href="#最优化" class="headerlink" title="最优化"></a>最优化</h3><p>大多数以上方法，直接或者间接使用最优化算法。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0" target="_blank" rel="external">机器学习</a><br>Bishop, C. M. (1995). 《模式识别神经网络》，牛津大学出版社。ISBN 0-19-853864-2<br>Bishop, C. M. (2006). 《模式识别与机器学习》，Springer。ISBN 978-0-387-31073-2<br>Richard O. Duda, Peter E. Hart, David G. Stork (2001) 《模式分类》（第2版）, Wiley, New York, ISBN 0-471-05669-3.<br>MacKay, D. J. C. (2003). 《信息理论、推理和学习算法》，剑桥大学出版社。ISBN 0-521-64298-1<br>Mitchell, T. (1997). 《机器学习》, McGraw Hill. ISBN 0-07-042807-7<br>Sholom Weiss, Casimir Kulikowski (1991). Computer Systems That Learn, Morgan Kaufmann. ISBN 1-55860-065-5</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/330px-Hopfield-net.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;机器学习是人工智能的一个分支。人工智能的研究是从以“推理”为重点到以“知识”为重点，再到以“学习”为重点，一条自然、清晰的脉络。&lt;/p&gt;
&lt;p&gt;机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。机器学习在近30多年已发展为一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。&lt;/p&gt;
&lt;p&gt;机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Machine Learning" scheme="http://ipcreator.me/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Floating Point</title>
    <link href="http://ipcreator.me/2017/03/27/Program/Tools/Computer/float/"/>
    <id>http://ipcreator.me/2017/03/27/Program/Tools/Computer/float/</id>
    <published>2017-03-27T01:58:06.000Z</published>
    <updated>2017-04-09T01:24:38.552Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/Float_mantissa_exponent.png" alt=""></p>
<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>在计算机科学中，浮点（英语：floating point，缩写为FP）是一种对于实数的近似值数值表现法，由一个有效数字（即尾数）加上幂数来表示，通常是乘以某个基数的整数次指数得到。以这种表示法表示的数值，称为浮点数（floating-point number）。利用浮点进行运算，称为浮点计算，这种运算通常伴随着因为无法精确表示而进行的近似或舍入。</p>
<a id="more"></a>
<p>这种表示方法类似于基数为10的科学记数法，在计算机上，通常使用2为基数的幂数来表示。一个浮点数a由两个数m和e来表示：a = m × b^e。在任意一个这样的系统中，我们选择一个基数b（记数系统的基）和精度p（即使用多少位来存储）。m（即尾数）是形如±d.ddd…ddd的p位数（每一位是一个介于0到b-1之间的整数，包括0和b-1）。如果m的第一位是非0整数，m称作正规化的。有一些描述使用一个单独的符号位（s 代表+或者-）来表示正负，这样m必须是正的。e是指数。</p>
<p>这种表示法的设计，来自于对于值的表现范围，与精密度之间的取舍：可以在某个固定长度的存储空间内表示出某个实数的近似值。例如，一个指数范围为±4的4位十进制浮点数可以用来表示43210，4.321或0.0004321，但是没有足够的精度来表示432.123和43212.3（必须近似为432.1和43210）。当然，实际使用的位数通常远大于4。<br>此外，浮点数表示法通常还包括一些特别的数值：+∞和−∞（正负无穷大）以及NaN（’Not a Number’）。无穷大用于数太大而无法表示的时候，NaN则指示非法操作或者无法定义的结果。<br>其中，无穷大，可表示为inf，在内存中的值是阶码为全1，尾数全0。而NaN在内存中的值则是阶码全1，尾数不全0。</p>
<h3 id="计算机的浮点数"><a href="#计算机的浮点数" class="headerlink" title="计算机的浮点数"></a>计算机的浮点数</h3><p>浮点指的是带有小数的数值，浮点运算即是小数的四则运算，常用来测量电脑运算速度。大部分计算机采用二进制（b=2）的表示方法。位（bit）是衡量浮点数所需存储空间的单位，通常为32位或64位，分别被叫作单精度和双精度。有一些计算机提供更大的浮点数，例如英特尔公司的浮点运算单元Intel8087协处理器（以及其被集成进x86处理器中的后代产品）提供80位长的浮点数，用于存储浮点运算的中间结果。还有一些系统提供128位的浮点数（通常用软件实现）。</p>
<h3 id="浮点数的标准"><a href="#浮点数的标准" class="headerlink" title="浮点数的标准"></a>浮点数的标准</h3><p>在电脑使用的浮点数被电气电子工程师协会（IEEE）规范化为IEEE 754。</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>π的值可以表示为π = 3.1415926…10（十进制）。当在一个支持17位尾数的计算机中表示时，它会变为0.11001001000011111 × 2^2。</p>
<h3 id="准确性"><a href="#准确性" class="headerlink" title="准确性"></a>准确性</h3><p>由于浮点数不能表达所有实数，浮点运算与相应的数学运算有所差异，有时此差异极为显著。<br>比如，二进制浮点数不能表达0.1和0.01，0.1的平方既不是准确的0.01，也不是最接近0.01的可表达的数。单精度（24比特）浮点数表示0.1的结果为<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/3cc0c417147d35e6a577cbf56c88600d17b5b9d1" alt=""><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/801cf7477f2d78a751e2f9469059824a28cc9265" alt=""><br>即<br>0.100000001490116119384765625<br>此数的平方是<br>0.010000000298023226097399174250313080847263336181640625<br>但最接近0.01的可表达的数是<br>0.009999999776482582092285156250<br>浮点数也不能表达圆周率<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9be4ba0bb8df3af72e90a0535fabcc17431e540a" alt="">，所以<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/34d582abaef83367f85ead3cba0d03900851c5fb" alt="">不等于正无穷，也不会溢出。下面的C语言代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">double pi = 3.1415926535897932384626433832795;</div><div class="line">double z = tan(pi/2.0);</div></pre></td></tr></table></figure></p>
<p>的计算结果为16331239353195370.0，如果用单精度浮点数，则结果为−22877332.0。同样的，<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/c01b1f6c3bf7f8586a1bf6103afea822725d53cf" alt=""><br>由于浮点数计算过程中丢失了精度，浮点运算的性质与数学运算有所不同。浮点加法和乘法不匹配结合律和分配律。</p>
<h2 id="单精度浮点数"><a href="#单精度浮点数" class="headerlink" title="单精度浮点数"></a>单精度浮点数</h2><p>单精度浮点数格式是一种计算机数据格式，在计算机存储器中占用4个字节（32 bits），利用“浮点”（浮动小数点）的方法，可以表示一个范围很大的数值。<br>在IEEE 754-2008的定义中，32-bit base 2格式被正式称为binary32格式。这种格式在IEEE 754-1985被定义为single，即单精度。需要注意的是，在更早的一些计算机系统中，也存在着其他4字节的浮点数格式。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>第1位表示正负，中间8位表示指数，后23位储存有效数位（有效数位是24位）。<br>正负号0代表正，1代表负。<br>指数可以是二补码；或0到255，前半代表负，127代表零，后半代表正。<br>有效数位最左手边的1并不会储存，因为它一定存在（二进制的第一个有效数字必定是1）。换言之，有效数位是24位，实际储存23位。<br><img src="http://ong8f1obl.bkt.clouddn.com/single%20float%20point.jpg" alt=""></p>
<h2 id="双精度浮点数"><a href="#双精度浮点数" class="headerlink" title="双精度浮点数"></a>双精度浮点数</h2><p>双精度浮点数（double）是计算机使用的一种数据类型。比起单精度浮点数，双精度浮点数(double)使用 64 位（8字节） 来存储一个浮点数。 它可以表示十进制的15或16位有效数字，其可以表示的数字的绝对值范围大约是<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9c07267b5bfa31654492905ea02d28eae470f716" alt=""></p>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>sign bit(符号): 用来表示正负号<br>exponent(指数): 用来表示次方数<br>mantissa(尾数): 用来表示精确度<br><img src="http://ong8f1obl.bkt.clouddn.com/General_double_precision_float.png" alt=""></p>
<h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><p>0代表数值为正，1代表数值为负。</p>
<h3 id="指数"><a href="#指数" class="headerlink" title="指数"></a>指数</h3><p>类比整型使用所有位为 0 的数字表示数值“0”，双精度浮点数表示 0 时指数部分也为 0。若如此，便可能产生冲突：比如全 0 的数字可能表示“0”，也可能表示<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/23dd92324d8b592a21be50a44cf2c48dba20e3f2" alt="">（参考下文“尾数”的解释）。于是此处规定：<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/22cb404192ab64c4954a3263c51ec5202928e520" alt="">用来代表带符号的 0（尾数为 0）或下溢数（尾数不为 0）。<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f24e15fbd966772fe4a91b3da51a54562f7a6647" alt="">用来代表无穷大（尾数为 0）或NaN（尾数不为 0）。<br>其他：代表 2 的（exponent-0x3ff）次方。</p>
<h3 id="尾数"><a href="#尾数" class="headerlink" title="尾数"></a>尾数</h3><p>在二进制的“科学记号”，数字被表示为：<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/40d1a2e7879ca1fe008f5d9b7796ea520c0227ee" alt=""><br>为了最大限度提高精确度，可以要求尾数规格化，把尾数处理到大于等于1而小于2的区间内，便可省去前导的“1”。例如：</p>
<p><img src="http://ong8f1obl.bkt.clouddn.com/double%20float.jpg" alt=""></p>
<p>于是，可得以下形式：<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/45b5245fa64a99f69255fb29eee882430b6b30f7" alt=""></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>根据以上的叙述，一个双精度浮点数所代表的数值为：<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/7983ffbff10fe08e4741b16cb180f8bde8ef31b7" alt=""></p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">3ff0 0000 0000 0000   = 1</div><div class="line"> c000 0000 0000 0000   = -2</div><div class="line"> 7fef ffff ffff ffff   ~ 1.7976931348623157 x 10308 (Max Double)</div><div class="line"> 3fd5 5555 5555 5555   ~ 1/3</div><div class="line"> 0000 0000 0000 0000   = 0</div><div class="line"> 8000 0000 0000 0000   = -0</div><div class="line"> 7ff0 0000 0000 0000   = 無限大</div><div class="line"> fff0 0000 0000 0000   = 負無限大</div></pre></td></tr></table></figure>
<h2 id="计算机基础——信息的表示与存储"><a href="#计算机基础——信息的表示与存储" class="headerlink" title="计算机基础——信息的表示与存储"></a><a href="http://math.ecnu.edu.cn/~jypan/Teaching/Cpp/ch01_Intro.pdf" target="_blank" rel="external">计算机基础——信息的表示与存储</a></h2><p><img src="http://ong8f1obl.bkt.clouddn.com/convert.jpg" alt=""><br><img src="http://ong8f1obl.bkt.clouddn.com/convert1.jpg" alt=""><br><img src="http://ong8f1obl.bkt.clouddn.com/original.jpg" alt=""><br><img src="http://ong8f1obl.bkt.clouddn.com/opposite.jpg" alt=""><br><img src="http://ong8f1obl.bkt.clouddn.com/complementary.jpg" alt=""></p>
<h2 id="浮点数在计算机中存储方式"><a href="#浮点数在计算机中存储方式" class="headerlink" title="浮点数在计算机中存储方式"></a><a href="http://www.cnblogs.com/jillzhang/archive/2007/06/24/793901.html" target="_blank" rel="external">浮点数在计算机中存储方式</a></h2><p>不论是float还是double在存储方式上都是遵从IEEE的规范的，float遵从的是IEEE R32.24 ,而double 遵从的是R64.53。</p>
<ol>
<li>符号位(Sign) : 0代表正，1代表为负</li>
<li>指数位（Exponent）:用于存储科学计数法中的指数数据，并且采用移位存储</li>
<li><p>尾数部分（Mantissa）：尾数部分</p>
<p>其中float的存储方式如下图所示：<br><img src="http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image001%5B3%5D_2.gif" alt=""></p>
<p>而双精度的存储方式为:<br><img src="http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image001%5B6%5D_2.gif" alt=""></p>
<p>R32.24和R64.53的存储方式都是用科学计数法来存储数据的，比如8.25用十进制的科学计数法表示就为:8.25<em><img src="http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image0021_thumb.gif" alt="">,而120.5可以表示为:1.205</em><img src="http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image0022_thumb.gif" alt="">,这些小学的知识就不用多说了吧。而我们傻蛋计算机根本不认识十进制的数据，他只认识0，1，</p>
<p>所以在计算机存储中，首先要将上面的数更改为二进制的科学计数法表示，8.25用二进制表示可表示为1000.01,我靠，不会连这都不会转换吧?那我估计要没辙了。120.5用二进制表示为：1110110.1用二进制的科学计数法表示1000.01可以表示为1.0001<em><img src="http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image002%5B2%5D_thumb_1.gif" alt="">,1110110.1可以表示为1.1101101</em><img src="http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image002%5B3%5D_thumb_1.gif" alt="">,任何一个数都的科学计数法表示都为1.xxx*<img src="http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image002%5B1%5D_thumb_1.gif" alt="">,尾数部分就可以表示为xxxx,第一位都是1嘛，干嘛还要表示呀？可以将小数点前面的1省略，所以23bit的尾数部分，可以表示的精度却变成了24bit，道理就是在这里，那24bit能精确到小数点后几位呢，我们知道9的二进制表示为1001，所以4bit能精确十进制中的1位小数点，24bit就能使float能精确到小数点后6位，而对于指数部分，因为指数可正可负，8位的指数位能表示的指数范围就应该为:-127-128了，所以指数部分的存储采用移位存储，存储的数据为元数据+127，下面就看看8.25和120.5在内存中真正的存储方式。</p>
<p>首先看下8.25，用二进制的科学计数法表示为:1.0001*<img src="http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image002%5B2%5D_thumb_1.gif" alt=""></p>
</li>
</ol>
<p>按照上面的存储方式，符号位为:0，表示为正，指数位为:3+127=130 ,位数部分为,故8.25的存储方式如下图所示:<br><img src="http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image002%5B5%5D.gif" alt=""></p>
<p>而单精度浮点数120.5的存储方式如下图所示:<br>1.1101101*<img src="http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image002%5B3%5D_thumb_1.gif" alt=""></p>
<p><img src="http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image002_12.gif" alt=""></p>
<p>那么如果给出内存中一段数据，并且告诉你是单精度存储的话，你如何知道该数据的十进制数值呢？其实就是对上面的反推过程，比如给出如下内存数据：0100001011101101000000000000，首先我们现将该数据分段，0 10000 0101 110 1101 0000 0000 0000 0000，在内存中的存储就为下图所示：</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image001_1.gif" target="_blank" rel="external">http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image001_1.gif</a></p>
<p>根据我们的计算方式，可以计算出，这样一组数据表示为:1.1101101*<img src="http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image002%5B3%5D_thumb_1.gif" alt="">=120.5</p>
<p>而双精度浮点数的存储和单精度的存储大同小异，不同的是指数部分和尾数部分的位数。所以这里不再详细的介绍双精度的存储方式了，只将120.5的最后存储方式图给出，大家可以仔细想想为何是这样子的<br><img src="http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image001_2.gif" alt=""></p>
<p>下面我就这个基础知识点来解决一个我们的一个疑惑，请看下面一段程序，注意观察输出结果</p>
<pre><code>float f = 2.2f;
double d = (double)f;
Console.WriteLine(d.ToString(&quot;0.0000000000000&quot;));
f = 2.25f;
d = (double)f;
Console.WriteLine(d.ToString(&quot;0.0000000000000&quot;));
</code></pre><p>可能输出的结果让大家疑惑不解，单精度的2.2转换为双精度后，精确到小数点后13位后变为了2.2000000476837，而单精度的2.25转换为双精度后，变为了2.2500000000000，为何2.2在转换后的数值更改了而2.25却没有更改呢？很奇怪吧？其实通过上面关于两种存储结果的介绍，我们已经大概能找到答案。首先我们看看2.25的单精度存储方式，很简单 0 1000 0001 001 0000 0000 0000 0000 0000,而2.25的双精度表示为:0 100 0000 0001 0010 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000,这样2.25在进行强制转换的时候，数值是不会变的，而我们再看看2.2呢，2.2用科学计数法表示应该为：将十进制的小数转换为二进制的小数的方法为将小数<em>2，取整数部分，所以0.282=0.4，所以二进制小数第一位为0.4的整数部分0，0.4×2=0.8，第二位为0,0.8</em>2=1.6,第三位为1，0.6×2 = 1.2，第四位为1，0.2*2=0.4，第五位为0，这样永远也不可能乘到=1.0，得到的二进制是一个无限循环的排列 00110011001100110011… ,对于单精度数据来说，尾数只能表示24bit的精度，所以2.2的float存储为:</p>
<p><img src="http://images.cnblogs.com/cnblogs_com/jillzhang/WindowsLiveWriter/float_A919/clip_image001_7.gif" alt=""></p>
<p>但是这样存储方式，换算成十进制的值，却不会是2.2的，应为十进制在转换为二进制的时候可能会不准确，如2.2，而double类型的数据也存在同样的问题，所以在浮点数表示中会产生些许的误差，在单精度转换为双精度的时候，也会存在误差的问题，对于能够用二进制表示的十进制数据，如2.25，这个误差就会不存在，所以会出现上面比较奇怪的输出结果。</p>
<p>本文属作者原创，只发布在博客园，希望大家在转载的时候，注明出处和作者，谢谢。</p>
<p>注：本文在写作过程中，参照了如下资料：</p>
<p><a href="http://www.msdn.net/library/chs/default.asp?url=/library/CHS/vccore/html/_core_why_floating_point_numbers_may_lose_precision.asp" target="_blank" rel="external">http://www.msdn.net/library/chs/default.asp?url=/library/CHS/vccore/html/_core_why_floating_point_numbers_may_lose_precision.asp</a></p>
<p><a href="http://blog.csdn.net/ganxingming/archive/2006/12/19/1449526.aspx" target="_blank" rel="external">http://blog.csdn.net/ganxingming/archive/2006/12/19/1449526.aspx</a></p>
<h2 id="C语言中float-double类型-在内存中的结构-存储方式"><a href="#C语言中float-double类型-在内存中的结构-存储方式" class="headerlink" title="C语言中float,double类型,在内存中的结构(存储方式)"></a><a href="http://www.linuxidc.com/Linux/2012-07/65987.htm" target="_blank" rel="external">C语言中float,double类型,在内存中的结构(存储方式)</a></h2><p>C语言中float,double类型,在内存中的结构(存储方式)<br>从存储结构和算法上来讲，double和float是一样的，不一样的地方仅仅是float是32位的，double是64位的，所以double能存储更高的精度。</p>
<p>任何数据在内存中都是以二进制（0或1）顺序存储的，每一个1或0被称为1位，而在x86CPU上一个字节是8位。比如一个16位（2 字节）的short int型变量的值是1000，那么它的二进制表达就是：00000011 11101000。由于Intel CPU的架构原因，它是按字节倒 序存储的，那么就因该是这样：11101000 00000011，这就是定点数1000在内存中的结构。</p>
<p>目前C/C++编译器标准都遵照IEEE制定的浮点数表示法来进行float,double运算。</p>
<p>这种结构是一种科学计数法，用符号、指数和 尾数来表示，底数定为2——即把一个浮点数表示为尾数乘以2的指数次方再添上符号。</p>
<p>下面是具体的规格：</p>
<p>类型      符号位 阶码  尾数  长度<br>float       1      8     23    32<br>double    1     11    52    64<br>临时数     1     15    64    80</p>
<p>由于通常C编译器默认浮点数是double型的，下面以double为例： 共计64位，折合8字节。</p>
<p>由最高到最低位分别是第63、62、61、……、0位： 最高位63位是符号位，1表示该数为负，0正； 62-52位，一共11位是指数位； 51-0位，一共52位是尾数位。</p>
<p>按照IEEE浮点数表示法，下面将把double型浮点数38414.4转换为十六进制代码。</p>
<p>把整数部和小数部分开处理:整数部直接化十六进制：960E。小数的处理: 0.4=0.5<em>0+0.25</em>1+0.125<em>1+0.0625</em>0+…… 实际上这永远算不完！这就是著名的浮点数精度问题。所以直到加上前面的整数部分算够53位就行了（隐藏位技术：最高位的1 不写入内存）。</p>
<p>如果你够耐心，手工算到53位那么因该是：38414.4(10)=1001011000001110.0110101010101010101010101010101010101(2)</p>
<p>科学记数法为：1.001……乘以2的15次方。指数为15！ 于是来看阶码，一共11位，可以表示范围是-1024 ~ 1023。因为指数可以为负，为了便于计算，规定都先加上1023，在这里， 15+1023=1038。</p>
<p>二进制表示为：100 00001110 符号位：正—— 0 ！ 合在一起（尾数二进制最高位的1不要）： 01000000 11100010 11000001 11001101 01010101 01010101 01010101 01010101 按字节倒序存储的十六进制数就是： 55 55 55 55 CD C1 E2 40。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%B5%AE%E7%82%B9%E6%95%B0" target="_blank" rel="external">浮点数</a><br><a href="https://zh.wikipedia.org/wiki/%E5%96%AE%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8" target="_blank" rel="external">单精度浮点数</a><br><a href="https://zh.wikipedia.org/wiki/%E9%9B%99%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8" target="_blank" rel="external">双精度浮点数</a><br><a href="http://math.ecnu.edu.cn/~jypan/Teaching/Cpp/ch01_Intro.pdf" target="_blank" rel="external">计算机基础——信息的表示与存储</a><br><a href="http://www.cnblogs.com/jillzhang/archive/2007/06/24/793901.html" target="_blank" rel="external">浮点数在计算机中存储方式</a><br><a href="http://www.linuxidc.com/Linux/2012-07/65987.htm" target="_blank" rel="external">C语言中float,double类型,在内存中的结构(存储方式)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/Float_mantissa_exponent.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;浮点数&quot;&gt;&lt;a href=&quot;#浮点数&quot; class=&quot;headerlink&quot; title=&quot;浮点数&quot;&gt;&lt;/a&gt;浮点数&lt;/h2&gt;&lt;p&gt;在计算机科学中，浮点（英语：floating point，缩写为FP）是一种对于实数的近似值数值表现法，由一个有效数字（即尾数）加上幂数来表示，通常是乘以某个基数的整数次指数得到。以这种表示法表示的数值，称为浮点数（floating-point number）。利用浮点进行运算，称为浮点计算，这种运算通常伴随着因为无法精确表示而进行的近似或舍入。&lt;/p&gt;
    
    </summary>
    
      <category term="Program" scheme="http://ipcreator.me/categories/Program/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Floating point" scheme="http://ipcreator.me/tags/Floating-point/"/>
    
  </entry>
  
  <entry>
    <title>Concept of AI</title>
    <link href="http://ipcreator.me/2017/03/27/AI/Business/concept-of-ai/"/>
    <id>http://ipcreator.me/2017/03/27/AI/Business/concept-of-ai/</id>
    <published>2017-03-27T01:33:06.000Z</published>
    <updated>2017-03-27T09:36:48.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><p><img src="http://ong8f1obl.bkt.clouddn.com/ArtificialFictionBrain.png" alt=""></p>
<p>AI的核心问题包括推理、知识、规划、学习、交流、感知、移动和操作物体的能力等。强人工智能目前仍然是该领域的长远目标。目前比较流行的方法包括统计方法，计算智能和传统意义的AI。目前有大量的工具应用了人工智能，其中包括搜索和数学优化、逻辑推演。而基于仿生学、认知心理学，以及基于概率论和经济学的算法等等也在逐步探索当中。</p>
<a id="more"></a>
<h1 id="人工智能-1"><a href="#人工智能-1" class="headerlink" title="人工智能"></a>人工智能</h1><p>人工智能（英语：Artificial Intelligence, AI）亦称机器智能，是指由人工制造出来的系统所表现出来的智能。通常人工智能是指通过普通电脑实现的智能。该词同时也指研究这样的智能系统是否能够实现，以及如何实现的科学领域。</p>
<p>一般教材中的定义领域是“智能主体（intelligent agent）的研究与设计”[1]，智能主体是指一个可以观察周遭环境并作出行动以达致目标的系统。[2]约翰·麦卡锡于1955年的定义是[3]“制造智能机器的科学与工程。”[4]</p>
<p>人工智能的研究是高度技术性和专业的，各分支领域都是深入且各不相通的，因而涉及范围极广。[5]</p>
<p>人工智能的研究可以分为几个技术问题。其分支领域主要集中在解决具体问题，其中之一是，如何使用各种不同的工具完成特定的应用程序。AI的核心问题包括推理、知识、规划、学习、交流、感知、移动和操作物体的能力等。[6]强人工智能目前仍然是该领域的长远目标。[7]目前比较流行的方法包括统计方法，计算智能和传统意义的AI。目前有大量的工具应用了人工智能，其中包括搜索和数学优化、逻辑推演。而基于仿生学、认知心理学，以及基于概率论和经济学的算法等等也在逐步探索当中。</p>
<h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><p>人工智能的定义可以分为两部分，即“人工”和“智能”。“人工”比较好理解，争议性也不大。有时我们会要考虑什么是人力所能及制造的，或者人自身的智能程度有没有高到可以创造人工智能的地步，等等。但总的来说，“人工系统”就是通常意义下的人工系统。<br>关于什么是“智能”，就问题多多了。这涉及到其它诸如意识（consciousness）、自我（self）、心灵（mind），包括无意识的精神（unconscious mind）等等问题。人唯一了解的智能是人本身的智能，这是普遍认同的观点。但是我们对我们自身智能的理解都非常有限，对构成人的智能的必要元素也了解有限，所以就很难定义什么是“人工”制造的“智能”了。因此人工智能的研究往往涉及对人的智能本身的研究。其它关于动物或其它人造系统的智能也普遍被认为是人工智能相关的研究课题。<br>人工智能目前在计算机领域内，得到了愈加广泛的发挥。并在机器人、经济政治决策、控制系统、仿真系统中得到应用。</p>
<h2 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h2><p><div class="rellink noprint relarticle mainarticle">主条目：<a href="/wiki/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E5%8E%86%E5%8F%B2" class="mw-redirect" title="人工智能的历史">人工智能的历史</a></div></p>
<table class="wikitable"><br><tr><br><th>年代</th><br><th>20世纪40年代</th><br><th>20世纪50年代</th><br><th>20世纪60年代</th><br><th>20世纪70年代</th><br><th>20世纪80年代</th><br><th>20世纪90年代</th><br></tr><br><tr><br><th>计算机</th><br><td>1945 <a href="/wiki/%E8%A8%88%E7%AE%97%E6%A9%9F" class="mw-redirect" title="计算机">计算机</a>（<a href="/wiki/ENIAC" class="mw-redirect" title="ENIAC">ENIAC</a>）</td><br><td>1957 <a href="/wiki/FORTRAN%E8%AF%AD%E8%A8%80" class="mw-redirect" title="FORTRAN语言">FORTRAN语言</a></td><br><td></td><br><td></td><br><td></td><br><td></td><br></tr><br><tr><br><th>人工智能研究</th><br><td></td><br><td>1953 <a href="/wiki/%E5%8D%9A%E5%BC%88%E8%AB%96" class="mw-redirect" title="博弈论">博弈论</a><br><br>1956 <a href="/wiki/%E8%BE%BE%E7%89%B9%E7%9F%9B%E6%96%AF%E4%BC%9A%E8%AE%AE" title="达特矛斯会议">达特矛斯会议</a></td><br><td></td><br><td>1977 <span class="ilh-all" data-orig-title="知識工程" data-lang-code="en" data-lang-name="英语" data-foreign-title="Knowledge engineering"><span class="ilh-page"><a href="/w/index.php?title=%E7%9F%A5%E8%AD%98%E5%B7%A5%E7%A8%8B&amp;action=edit&amp;redlink=1" class="new" title="知识工程（页面不存在）">知识工程</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英语</span><span class="ilh-colon">：</span><span class="ilh-link"><a href="https://en.wikipedia.org/wiki/Knowledge_engineering" class="extiw" title="en:Knowledge engineering" target="_blank" rel="external"><span lang="en" dir="auto" xml:lang="en">Knowledge engineering</span></a></span>）</span></span>宣言</td><br><td>1982 <a href="/wiki/%E7%AC%AC%E4%BA%94%E4%BB%A3%E9%9B%BB%E8%85%A6" title="第五代电脑">第五代电脑</a>计划开始</td><br><td>1991 <a href="/wiki/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C" title="人工神经网络">人工神经网络</a></td><br></tr><br><tr><br><th>人工智能语言</th><br><td></td><br><td></td><br><td>1960 <a href="/wiki/LISP%E8%AF%AD%E8%A8%80" class="mw-redirect" title="LISP语言">LISP语言</a></td><br><td>1973 <a href="/wiki/PROLOG%E8%AF%AD%E8%A8%80" class="mw-redirect" title="PROLOG语言">PROLOG语言</a></td><br><td></td><br><td></td><br></tr><br><tr><br><th><a href="/wiki/%E7%9F%A5%E8%AF%86%E8%A1%A8%E8%BE%BE" class="mw-redirect" title="知识表达">知识表达</a></th><br><td></td><br><td></td><br><td></td><br><td>1973 <a href="/wiki/%E7%94%9F%E7%94%A2%E7%B3%BB%E7%B5%B1" title="生产系统">生产系统</a><br><br>1976 <a href="/wiki/%E6%A1%86%E6%9E%B6%E7%90%86%E8%AB%96" title="框架理论">框架理论</a></td><br><td></td><br><td></td><br></tr><br><tr><br><th><a href="/wiki/%E5%B0%88%E5%AE%B6%E7%B3%BB%E7%B5%B1" class="mw-redirect" title="专家系统">专家系统</a></th><br><td></td><br><td></td><br><td>1965 <span class="ilh-all" data-orig-title="DENDRAL" data-lang-code="en" data-lang-name="英语" data-foreign-title="Dendral"><span class="ilh-page"><a href="/w/index.php?title=DENDRAL&amp;action=edit&amp;redlink=1" class="new" title="DENDRAL（页面不存在）">DENDRAL</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英语</span><span class="ilh-colon">：</span><span class="ilh-link"><a href="https://en.wikipedia.org/wiki/Dendral" class="extiw" title="en:Dendral" target="_blank" rel="external"><span lang="en" dir="auto" xml:lang="en">Dendral</span></a></span>）</span></span></td><br><td>1975 <span class="ilh-all" data-orig-title="MYCIN" data-lang-code="en" data-lang-name="英语" data-foreign-title="Mycin"><span class="ilh-page"><a href="/w/index.php?title=MYCIN&amp;action=edit&amp;redlink=1" class="new" title="MYCIN（页面不存在）">MYCIN</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英语</span><span class="ilh-colon">：</span><span class="ilh-link"><a href="https://en.wikipedia.org/wiki/Mycin" class="extiw" title="en:Mycin" target="_blank" rel="external"><span lang="en" dir="auto" xml:lang="en">Mycin</span></a></span>）</span></span></td><br><td>1980 <a href="/wiki/Xcon" title="Xcon">Xcon</a></td><br><td></td><br></tr><br></table>

<h2 id="研究课题"><a href="#研究课题" class="headerlink" title="研究课题"></a>研究课题</h2><p>目前人工智能的研究方向已经被分成几个子领域，研究人员希望一个人工智能系统应该具有某些特定能力，以下将这些能力列出并说明。[6]</p>
<h3 id="演绎、推理和解决问题"><a href="#演绎、推理和解决问题" class="headerlink" title="演绎、推理和解决问题"></a>演绎、推理和解决问题</h3><p>早期的人工智能研究人员直接模仿人类进行逐步的推理，就像是玩棋盘游戏或进行逻辑推理时人类的思考模式。[8]到了1980和1990年代，利用概率和经济学上的概念，人工智能研究还发展了非常成功的方法处理不确定或不完整的资讯。[9]<br>对于困难的问题，有可能需要大量的运算资源，也就是发生了“可能组合爆增”：当问题超过一定的规模时，电脑会需要天文数量级的存储器或是运算时间。寻找更有效的算法是优先的人工智能研究项目。[10]<br>人类解决问题的模式通常是用最快捷、直观的判断，而不是有意识的、一步一步的推导，早期人工智能研究通常使用逐步推导的方式。[11]人工智能研究已经于这种“次表征性的”解决问题方法获取进展：实体化Agent研究强调感知运动的重要性。神经网络研究试图以模拟人类和动物的大脑结构重现这种技能。</p>
<h3 id="知识表示法"><a href="#知识表示法" class="headerlink" title="知识表示法"></a>知识表示法</h3><p>主条目：知识表示和常识知识库</p>
<h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><p>智能Agent必须能够制定目标和实现这些目标。[12]他们需要一种方法来创建一个可预测的世界模型（将整个世界状态用数学模型表现出来，并能预测它们的行为将如何改变这个世界），这样就可以选择功效最大的行为。[13] 在传统的规划问题中，智能Agent被假定它是世界中唯一具有影响力的，所以它要做出什么行为是已经确定的。[14]但是，如果事实并非如此，它必须定期检查世界模型的状态是否和自己的预测相匹配。如果不匹配，它必须改变它的计划。因此智能代理必须具有在不确定结果的状态下推理的能力。[15] 在多Agent中，多个Agent规划以合作和竞争的方式去完成一定的目标，使用演化算法和群体智能可以达成一个整体的突现行为目标。[16]</p>
<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>主条目：机器学习<br>机器学习的主要目的是为了从用户和输入数据等处获得知识，从而可以帮助解决更多问题、减少错误，提高解决问题的效率。对于人工智能来说，机器学习从一开始就很重要。1956年，在最初的达特茅斯夏季会议上，雷蒙德索洛莫诺夫[来源请求]写了一篇关于不监视的概率性机器学习：一个归纳推理的机器。</p>
<h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><p>主条目：自然语言处理</p>
<h3 id="运动和控制"><a href="#运动和控制" class="headerlink" title="运动和控制"></a>运动和控制</h3><p>主条目：机器人学</p>
<h3 id="知觉"><a href="#知觉" class="headerlink" title="知觉"></a>知觉</h3><p>主条目：机器感知，计算机视觉和语音识别<br>机器感知[17]是指能够使用感测器所输入的数据（如照相机、麦克风、声纳以及其他的特殊感测器）然后推断世界的状态。计算机视觉[18]能够分析视频输入。另外还有语音识别[19]、人脸辨识和物体辨识。[20]</p>
<h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><p>主条目：情感计算<br>情感和社交技能对于一个智能agent是很重要的。首先，通过了解他们的动机和情感状态，代理人能够预测别人的行动（这涉及要素 博弈论、决策理论以及能够塑造人的情感和情绪感知能力检测）。此外，为了良好的人机交互，智能代理人也需要表现出情绪来。至少它必须出现礼貌地和人类打交道。至少，它本身应该有正常的情绪。</p>
<h3 id="创造力"><a href="#创造力" class="headerlink" title="创造力"></a>创造力</h3><p>主条目：计算机创造力<br>一个人工智能的子领域，代表了理论（从哲学和心理学的角度）和实际（通过特定的实现产生的系统的输出是可以考虑的创意，或系统识别和评估创造力）所定义的创造力。相关领域研究的包括了人工直觉和人工想像。</p>
<h3 id="多元智能"><a href="#多元智能" class="headerlink" title="多元智能"></a>多元智能</h3><p>大多数研究人员希望他们的研究最终将被纳入一个具有多元智能（称为强人工智能），结合以上所有的技能并且超越大部分人类的能力。[7]有些人认为要达成以上目标，可能需要拟人化的特性，如人工意识或人工大脑。[22][23] 上述许多问题被认为是人工智能完整性：为了解决其中一个问题，你必须解决全部的问题。即使一个简单和特定的任务，如机器翻译，要求机器按照作者的论点（推理），知道什么是被人谈论（知识），忠实地再现作者的意图（情感计算）。因此，机器翻译被认为是具有人工智能完整性：它可能需要强人工智能，就像是人类一样。[24]</p>
<h3 id="伦理管理"><a href="#伦理管理" class="headerlink" title="伦理管理"></a>伦理管理</h3><p>史蒂芬·霍金、比尔盖茨、 Elon Musk 、 Jaan Tallinn 以及 Nick Bostrom 等人都对于人工智能技术的未来公开表示忧心[25]，人工智能若在许多方面超越人类智能水平的智能、不断更新、自我提升，进而获取控制管理权，人类是否有足够的能力及时停止人工智能领域的“军备竞赛”，能否保有最高掌控权，现有事实是：机器常失控导致人员伤亡，这样的情况是否会更加扩大规模出现，历史显然无法给出可靠的乐观答案。特斯拉电动车马斯克（Elon Musk）在麻省理工学院（MIT）航空航天部门百年纪念研讨会上称人工智能是“召唤恶魔”行为，英国发明家Clive Sinclair认为一旦开始制造抵抗人类和超越人类的智能机器，人类可能很难生存，盖茨同意马斯克和其它人所言，且不知道为何有些人不担忧这个问题。[26]<br>DeepMind的人工智能（AI）系统在2016年“AlphaGo”对战韩国棋王李世乭获胜，开发商表示在内部设立伦理委员会，针对人工智能的应用制定政策，防范人工智能沦为犯罪开发者。[27]<br>科技进步，人工智能科技产生“自主武器”军备竞赛已悄悄展开，英国、以色列与挪威，都已部署自主导弹与无人操控的无人机，具“射后不理”（fire-and-forget）能力的导弹，多枚导弹还可互相沟通，分享找到攻击目标。 霍金等人在英国独立报发表文章警告未来人工智能可能会比人类金融市场、科学家、人类领袖更能操纵人心、甚至研发出人们无法理解的武器。专家恐发展到无法控制的局面，援引联合国禁止研发某些特定武器的“特定常规武器公约”加以限制。[28]新南威尔士大学（New South Wales）人工智能的沃尔什（Toby Walsh）教授认为这是一种欺骗，因为机器无区别战敌和平民的技术。[29]</p>
<h3 id="经济冲击"><a href="#经济冲击" class="headerlink" title="经济冲击"></a>经济冲击</h3><p>据CNN财经网数字媒体未来学家兼Webbmedia集团创始人艾米·韦伯（Amy Webb）；美国在线[30]…等纷纷预测一些即将被机器人替换的职业，日本野村总合研究所也与英国牛津大学的研究学者共同调查指出，10至20年后，日本有49%的职业(235种职业)可能会被机械和人工智能替换而消失，直接影响约达2500万人，[31]例如：超市店员、一般事务员、计程车司机、收费站运营商和收银员、市场营销人员、客服人员、制造业工人、金融中间人和分析师、新闻记者、电话公司职员、麻醉师、士兵和保安、律师、医生、软件开发者和操盘手、股票交易员等等高薪酬的脑力职业将最先受到冲击[32]。</p>
<h2 id="强人工智能和弱人工智能"><a href="#强人工智能和弱人工智能" class="headerlink" title="强人工智能和弱人工智能"></a>强人工智能和弱人工智能</h2><p>人工智能的一个比较流行的定义，也是该领域较早的定义，是由当时麻省理工学院的约翰·麦卡锡在1956年的 达特矛斯会议上提出的：人工智能就是要让机器的行为看起来就像是人所表现出的智能行为一样。但是这个定义似乎忽略了强人工智能的可能性（见下）。另一个定义指人工智能是人造机器所表现出来的智能。总体来讲，目前对人工智能的定义大多可划分为四类，即机器“像人一样思考”、“像人一样行动”、“理性地思考”和“理性地行动”。这里“行动”应广义地理解为采取行动，或制定行动的决策，而不是肢体动作。</p>
<h3 id="强人工智能"><a href="#强人工智能" class="headerlink" title="强人工智能"></a>强人工智能</h3><p>主条目：强人工智能<br>强人工智能观点认为有可能制造出真正能推理（Reasoning）和解决问题（解决问题）的智能机器，并且，这样的机器能将被认为是有知觉的，有自我意识的。强人工智能可以有两类：<br>类人的人工智能，即机器的思考和推理就像人的思维一样。<br>非类人的人工智能，即机器产生了和人完全不一样的知觉和意识，使用和人完全不一样的推理方式。</p>
<h3 id="弱人工智能"><a href="#弱人工智能" class="headerlink" title="弱人工智能"></a>弱人工智能</h3><p>弱人工智能观点认为不可能制造出能真正地推理和解决问题的智能机器，这些机器只不过看起来像是智能的，但是并不真正拥有智能，也不会有自主意识。<br>强人工智能的研究目前处于停滞不前的状态下。人工智能研究者不一定同意弱人工智能，也不一定在乎或者了解强人工智能和弱人工智能的内容与差别。就现下的人工智能研究领域来看，研究者已大量造出看起来像是智能的机器，获取相当丰硕的理论上和实质上的成果，如2009年康乃尔大学教授Hod Lipson 和其博士研究生Michael Schmidt 研发出的 Eureqa计算机程序，只要给予一些数据，这计算机程序自己只用几十个小时计算就推论出牛顿花费多年研究才发现的牛顿力学公式，等于只用几十个小时就自己重新发现牛顿力学公式，这计算机程序也能用来研究很多其他领域的科学问题上。</p>
<h3 id="对强人工智能的哲学争论"><a href="#对强人工智能的哲学争论" class="headerlink" title="对强人工智能的哲学争论"></a>对强人工智能的哲学争论</h3><p>“强人工智能”一词最初是约翰·罗杰斯·希尔勒针对计算机和其它信息处理机器创造的，其定义为：<br>“强人工智能观点认为计算机不仅是用来研究人的思维的一种工具；相反，只要运行适当的程序，计算机本身就是有思维的。”（J Searle in Minds Brains and Programs. The Behavioral and Brain Sciences, vol. 3, 1980）<br>关于强人工智能的争论，不同于更广义的一元论和二元论的争论。其争论要点是：如果一台机器的唯一工作原理就是转换编码数据，那么这台机器是不是有思维的？希尔勒认为这是不可能的。他举了个中文房间的例子来说明，如果机器仅仅是转换数据，而数据本身是对某些事情的一种编码表现，那么在不理解这一编码和这实际事情之间的对应关系的前提下，机器不可能对其处理的数据有任何理解。基于这一论点，希尔勒认为即使有机器通过了图灵测试，也不一定说明机器就真的像人一样有思维和意识。<br>也有哲学家持不同的观点。丹尼尔·丹尼特在其著作《意识的解释》（Consciousness Explained）里认为，人也不过是一台有灵魂的机器而已，为什么我们认为：“人可以有智能，而普通机器就不能”呢？他认为像上述的数据转换机器是有可能有思维和意识的。<br>有的哲学家认为如果弱人工智能是可实现的，那么强人工智能也是可实现的。比如西蒙·布莱克本（Simon Blackburn）在其哲学入门教材Think里说道，一个人的看起来是“智能”的行动并不能真正说明这个人就真的是智能的。我永远不可能知道另一个人是否真的像我一样是智能的，还是说她／他仅仅是看起来是智能的。基于这个论点，既然弱人工智能认为可以令机器看起来像是智能的，那就不能完全否定这机器是真的有智能的。布莱克本认为这是一个主观认定的问题。<br>需要指出的是，弱人工智能并非和强人工智能完全对立，也就是说，即使强人工智能是可能的，弱人工智能仍然是有意义的。至少，今日的计算机能做的事，像算术运算等，在一百多年前是被认为很需要智能的。并且，即使强人工智能被证明为可能的，也不代表强人工智能必定能被研制出来。</p>
<h2 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h2><p>目前没有统一的原理或范式指导人工智能研究。许多问题上研究者都存在争论。[33]<br>其中几个长久以来仍没有结论的问题是：是否应从心理或神经方面模拟人工智能?或者像鸟类生物学对于航空工程一样，人类生物学对于人工智能研究是没有关系的？[34]智能行为能否用简单的原则（如逻辑或优化）来描述？还是必须解决大量完全无关的问题？[35]<br>智能是否可以使用高级符号表达，如词和想法？还是需要“子符号”的处理？[36] 约翰·豪格兰德（John Haugeland）提出了GOFAI（出色的老式人工智能）的概念，也提议人工智能应归类为synthetic intelligence，[37]这个概念后来被某些非GOFAI研究者采纳。[38][39]</p>
<h3 id="控制论与大脑模拟"><a href="#控制论与大脑模拟" class="headerlink" title="控制论与大脑模拟"></a>控制论与大脑模拟</h3><p>主条目：控制论和计算神经科学<br>20世纪40年代到50年代，许多研究者探索神经学、信息理论及控制论之间的联系。其中还造出一些使用电子网络构造的初步智能，如格雷·华特（W. Grey Walter）的乌龟（turtle）和约翰霍普金斯野兽（Johns Hopkins Beast）。<br>这些研究者还经常在普林斯顿大学和英国的Ratio Club举行技术协会会议。[40]直到1960，大部分人已经放弃这个方法，尽管在80年代再次提出这些原理。</p>
<h3 id="符号处理"><a href="#符号处理" class="headerlink" title="符号处理"></a>符号处理</h3><p>主条目：GOFAI<br>当20世纪50年代，数字计算机研制成功，研究者开始探索人类智能是否能简化成符号处理。研究主要集中在卡内基梅隆大学，斯坦福大学和麻省理工学院，而各自有独立的研究风格。约翰·豪格兰德（John Haugeland）称这些方法为GOFAI（出色的老式人工智能）[41]。60年代，符号方法在小型证明程序上模拟高级思考有很大的成就。基于控制论或神经网络的方法则置于次要[42]。60－70年代的研究者确信符号方法最终可以成功创造强人工智能的机器，同时这也是他们的目标。</p>
<h4 id="认知模拟"><a href="#认知模拟" class="headerlink" title="认知模拟"></a>认知模拟</h4><p>经济学家赫伯特·西蒙和艾伦·纽厄尔研究人类问题解决能力和尝试将其形式化，同时他们为人工智能的基本原理打下基础，如认知科学、运筹学和经营科学。他们的研究团队使用心理学实验的结果开发模拟人类解决问题方法的程序。这方法一直在卡内基梅隆大学沿袭下来，并在80年代于Soar发展到高峰[43][44]。</p>
<h4 id="基于逻辑"><a href="#基于逻辑" class="headerlink" title="基于逻辑"></a>基于逻辑</h4><p>不像艾伦·纽厄尔和赫伯特·西蒙，约翰·麦卡锡认为机器不需要模拟人类的思想，而应尝试找到抽象推理和解决问题的本质，不管人们是否使用同样的算法[34]。他在斯坦福大学的实验室致力于使用形式化逻辑解决多种问题，包括知识表示，智能规划和机器学习[45]。致力于逻辑方法的还有爱丁堡大学，而促成欧洲的其他地方开发编程语言Prolog和逻辑编程科学[46]。</p>
<p>####“反逻辑”<br>斯坦福大学的研究者 （如马文·闵斯基和西摩尔·派普特）[47]发现要解决计算机视觉和自然语言处理的困难问题，需要专门的方案：他们主张不存在简单和通用原理（如逻辑）能够达到所有的智能行为。罗杰·单克（Roger Schank）描述他们的“反逻辑”方法为“scruffy”[35]。常识知识库（如道格拉斯·莱纳特的Cyc）就是“scruffy”AI的例子，因为他们必须人工一次编写一个复杂的概念[48]。</p>
<h4 id="基于知识"><a href="#基于知识" class="headerlink" title="基于知识"></a>基于知识</h4><p>大约在1970年出现大容量内存计算机，研究者分别以三个方法开始把知识构造成应用软件[49]。这场“知识革命”促成专家系统的开发与计划，这是第一个成功的人工智能软件形式[50]。“知识革命”同时让人们意识到许多简单的人工智能软件可能需要大量的知识。</p>
<h3 id="子符号方法"><a href="#子符号方法" class="headerlink" title="子符号方法"></a>子符号方法</h3><p>1980年代符号人工智能停滞不前，很多人认为符号系统永远不可能模仿人类所有的认知过程，特别是感知、机器人、机器学习和模式识别。很多研究者开始关注子符号方法解决特定的人工智能问题[36]。</p>
<h4 id="自下而上、接口agent、嵌入环境（机器人）、行为主义、新式AI"><a href="#自下而上、接口agent、嵌入环境（机器人）、行为主义、新式AI" class="headerlink" title="自下而上、接口agent、嵌入环境（机器人）、行为主义、新式AI"></a>自下而上、接口agent、嵌入环境（机器人）、行为主义、新式AI</h4><p>机器人领域相关的研究者，如罗德尼·布鲁克斯（Rodney Brooks），否定符号人工智能而专注于机器人移动和求生等基本的工程问题。[51]他们的工作再次关注早期控制论研究者的观点，同时提出了在人工智能中使用控制理论。这与认知科学领域中的表征感知论点是一致的:更高的智能需要个体的表征（如移动，感知和形象）。</p>
<h4 id="计算智能"><a href="#计算智能" class="headerlink" title="计算智能"></a>计算智能</h4><p>1980年代中大卫·鲁姆哈特（David E. Rumelhart）等再次提出神经网络和联结主义[52]。这和其他的子符号方法，如模糊控制和进化计算，都属于计算智能学科研究范畴[53]。</p>
<h3 id="统计学方法"><a href="#统计学方法" class="headerlink" title="统计学方法"></a>统计学方法</h3><p>1990年代，人工智能研究发展出复杂的数学工具来解决特定的分支问题。这些工具是真正的科学方法，即这些方法的结果是可测量的和可验证的，同时也是近期人工智能成功的原因。共用的数学语言也允许已有学科的合作（如数学，经济或运筹学）。Stuart J. Russell和Peter Norvig指出这些进步不亚于“革命”和“neats的成功”[54]。有人批评这些技术太专注于特定的问题，而没有考虑长远的强人工智能目标[55]。</p>
<h3 id="集成方法"><a href="#集成方法" class="headerlink" title="集成方法"></a>集成方法</h3><h4 id="智能agent范式"><a href="#智能agent范式" class="headerlink" title="智能agent范式"></a>智能agent范式</h4><p>智能agent是一个会感知环境并作出行动以达致目标的系统。最简单的智能agent是那些可以解决特定问题的程序。更复杂的agent包括人类和人类组织（如公司）。这些范式可以让研究者研究单独的问题和找出有用且可验证的方案，而不需考虑单一的方法。一个解决特定问题的agent可以使用任何可行的方法-一些agent用符号方法和逻辑方法，一些则是子符号神经网络或其他新的方法。范式同时也给研究者提供一个与其他领域沟通的共同语言–如决策论和经济学（也使用abstract agents的概念）。1990年代智能agent范式被广泛接受。[2]</p>
<h4 id="agent体系结构和认知体系结构"><a href="#agent体系结构和认知体系结构" class="headerlink" title="agent体系结构和认知体系结构"></a>agent体系结构和认知体系结构</h4><p>研究者设计出一些系统来处理多agent系统中智能agent之间的相互作用。[56]一个系统中包含符号和子符号部分的系统称为混合智能系统，而对这种系统的研究则是人工智能系统集成。分级控制系统则给反应级别的子符号AI和最高级别的传统符号AI提供桥梁，同时放宽了规划和世界建模的时间。</p>
<h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>机器视觉、指纹识别、人脸识别、视网膜识别、虹膜识别、掌纹识别、专家系统、自动规划等。</p>
<h2 id="学科范畴"><a href="#学科范畴" class="headerlink" title="学科范畴"></a>学科范畴</h2><p>人工智能是一门边缘学科，属于自然科学和社会科学的交叉。</p>
<h3 id="涉及学科"><a href="#涉及学科" class="headerlink" title="涉及学科"></a>涉及学科</h3><p>物理学<br>哲学和认知科学<br>逻辑学<br>数学<br>心理学<br>计算机科学<br>控制论<br>决定论<br>不确定性原理<br>社会学<br>犯罪学<br>智能犯罪</p>
<h3 id="研究范畴"><a href="#研究范畴" class="headerlink" title="研究范畴"></a>研究范畴</h3><p>自然语言处理（NLP; Natural Language Processing）<br>知识表现（Knowledge Representation）<br>智能搜索（Intelligent Search）<br>推理<br>规划（Planning）<br>机器学习（Machine Learning）<br>增强式学习（Reinforcement Learning）<br>知识获取<br>感知问题<br>模式识别<br>逻辑程序设计<br>软计算（Soft Computing）<br>不精确和不确定的管理<br>人工生命（Artificial Life）<br>人工神经网络（Artificial Neural Network）<br>复杂系统<br>遗传算法<br>数据挖掘（Data Mining）<br>模糊控制</p>
<h2 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h2><p>智能控制<br>机器人学<br>自动化技术<br>语言和图像理解<br>遗传编程<br>法学信息系统</p>
<h2 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h2><p>人工生命<br>认知神经科学<br>电脑围棋<br>伪春菜<br>艾伦·图灵<br>恐怖谷理论<br>电子世界争霸战<br>计算机科学<br>计算机科学课程列表<br>认知科学<br>意识<br>希尔勒的中文房间<br>语义学<br>技术奇异点<br>集体智能<br>控制论<br>心理学<br>国际人工智能联合会议<br>OWL<br>游戏树<br>量子计算机<br>生物化学计算机-例：人脑</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD" target="_blank" rel="external">人工智能</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;人工智能&quot;&gt;&lt;a href=&quot;#人工智能&quot; class=&quot;headerlink&quot; title=&quot;人工智能&quot;&gt;&lt;/a&gt;人工智能&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/ArtificialFictionBrain.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;AI的核心问题包括推理、知识、规划、学习、交流、感知、移动和操作物体的能力等。强人工智能目前仍然是该领域的长远目标。目前比较流行的方法包括统计方法，计算智能和传统意义的AI。目前有大量的工具应用了人工智能，其中包括搜索和数学优化、逻辑推演。而基于仿生学、认知心理学，以及基于概率论和经济学的算法等等也在逐步探索当中。&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
  </entry>
  
  <entry>
    <title>History of AI</title>
    <link href="http://ipcreator.me/2017/03/27/AI/Basic%20Concept/history-of-ai/"/>
    <id>http://ipcreator.me/2017/03/27/AI/Basic Concept/history-of-ai/</id>
    <published>2017-03-27T01:13:06.000Z</published>
    <updated>2017-03-27T08:12:35.726Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/225px-Gottfried_Wilhelm_von_Leibniz.jpg" alt=""></p>
<a id="more"></a>
<h1 id="人工智能史"><a href="#人工智能史" class="headerlink" title="人工智能史"></a>人工智能史</h1><p>人工智能的历史源远流长。在古代的神话传说中，技艺高超的工匠可以制作人造人，并为其赋予智能或意识。[1]现代意义上的AI始于古典哲学家用机械符号处理的观点解释人类思考过程的尝试。20世纪40年代基于抽象数学推理的可编程数字计算机的发明使一批科学家开始严肃地探讨构造一个电子大脑的可能性。</p>
<p>1956年，在达特茅斯学院举行的一次会议上正式确立了人工智能的研究领域。会议的参加者在接下来的数十年间是AI研究的领军人物。他们中有许多人预言，经过一代人的努力，与人类具有同等智能水平的机器将会出现。同时，上千万美元被投入到AI研究中，以期实现这一目标。</p>
<p>研究人员发现自己大大低估了这一工程的难度，人工智能史上共出现过好几次低潮。由于James Lighthill爵士的批评和国会方面的压力，美国和英国政府于1973年停止向没有明确目标的人工智能研究项目拨款。七年之后受到日本政府研究规划的刺激，美国政府和企业再次在AI领域投入数十亿研究经费，但这些投资者在80年代末重新撤回了投资。AI研究领域诸如此类的高潮和低谷不断交替出现；至今仍有人对AI的前景作出异常乐观的预测。[2]</p>
<p>尽管在政府官僚和风投资本家那里经历了大起大落，AI领域仍在取得进展。某些在20世纪70年代被认为不可能解决的问题今天已经获得了圆满解决并已成功应用在商业产品上。与第一代AI研究人员的乐观估计不同，具有与人类同等智能水平的机器至今仍未出现。图灵在1950年发表的一篇催生现代智能机器研究的著名论文中称，“我们只能看到眼前的一小段距离……但是，我们可以看到仍有许多工作要做”。[3]</p>
<h2 id="先驱"><a href="#先驱" class="headerlink" title="先驱"></a>先驱</h2><p>McCorduck写道[1]：“某种形式上的人工智能是一个遍布于西方知识分子历史的观点，是一个急需被实现的梦想，”先民对人工智能的追求表现在诸多神话，传说，故事，预言以及制作机器人偶（automaton）的实践之中。[4]</p>
<h3 id="神话，幻想和预言中的AI"><a href="#神话，幻想和预言中的AI" class="headerlink" title="神话，幻想和预言中的AI"></a>神话，幻想和预言中的AI</h3><p>希腊神话中已经出现了机械人和人造人,如赫淮斯托斯的黄金机器人和皮格马利翁的伽拉忒亚。[5]中世纪出现了使用巫术或炼金术将意识赋予无生命物质的传说,如贾比尔的Takwin,帕拉塞尔苏斯的何蒙库鲁兹和Judah Loew的魔像。[6]19世纪的幻想小说中出现了人造人和会思考的机器之类题材，例如玛丽·雪莱的《弗兰肯斯坦》和卡雷尔·恰佩克的《罗素姆的万能机器人》。[7]Samuel Butler的《机器中的达尔文（Darwin among the Machines）》一文（1863）探讨了机器通过自然选择进化出智能的可能性。[8]至今人工智能仍然是科幻小说的重要元素。</p>
<h3 id="自动人偶"><a href="#自动人偶" class="headerlink" title="自动人偶"></a>自动人偶</h3><p>许多文明中都有创造自动人偶的杰出工匠，例如偃师（中国西周）[9]，希罗（希腊）[10]，加扎利[11]和Wolfgang von Kempelen[12] 等等。已知最古老的“机器人”是古埃及和古希腊的圣像，忠实的信徒认为工匠为这些神像赋予了思想，使它们具有智慧和激情。赫耳墨斯·特里斯墨吉斯忒斯（Hermes Trismegistus）写道“当发现神的本性时，人就能够重现他”[13][14]</p>
<h3 id="形式推理"><a href="#形式推理" class="headerlink" title="形式推理"></a>形式推理</h3><p>人工智能的基本假设是人类的思考过程可以机械化。对于机械化推理（即所谓“形式推理（formal reasoning）”）的研究已有很长历史。中国，印度和希腊哲学家均已在公元前的第一个千年里提出了形式推理的结构化方法。他们的想法为后世的哲学家所继承和发展，其中著名的有亚里士多德（对三段论逻辑进行了形式分析），欧几里得（其著作《几何原本》是形式推理的典范），花剌子密（代数学的先驱，“algorithm”一词由他的名字演变而来）以及一些欧洲经院哲学家，如奥卡姆的威廉和邓斯·司各脱。[15]<br>马略卡哲学家拉蒙·柳利（1232-1315）开发了一些“逻辑机”，试图通过逻辑方法获取知识。[16] 柳利的机器能够将基本的，无可否认的真理通过机械手段用简单的逻辑操作进行组合，以求生成所有可能的知识。[17]Llull的工作对莱布尼兹产生了很大影响，后者进一步发展了他的思想。[18]<br>在17世纪中，莱布尼兹，托马斯·霍布斯和笛卡儿尝试将理性的思考系统化为代数学或几何学那样的体系。[19]霍布斯在其著作《利维坦》中有一句名言：“推理就是计算（reason is nothing but reckoning）。” [20]莱布尼兹设想了一种用于推理的普适语言（他的通用表意文字），能将推理规约为计算，从而使“哲学家之间，就像会计师之间一样，不再需要争辩。他们只需拿出铅笔放在石板上，然后向对方说（如果想要的话，可以请一位朋友作为证人）：‘我们开始算吧。’”[21] 这些哲学家已经开始明确提出形式符号系统的假设，而这一假设将成为AI研究的指导思想。<br>在20世纪，数理逻辑研究上的突破使得人工智能好像呼之欲出。这方面的基础著作包括布尔的《思维的定律》与弗雷格的《概念文字》。基于弗雷格的系统，罗素和怀特海在他们于1913年出版的巨著《数学原理》中对数学的基础给出了形式化描述。这一成就激励了希尔伯特，后者向20世纪20年代和30年代的数学家提出了一个基础性的难题：“能否将所有的数学推理形式化?” [15]这个问题的最终回答由哥德尔不完备定理，图灵机和Alonzo Church的λ演算给出。[15][22]他们的答案令人震惊：首先，他们证明了数理逻辑的局限性；其次（这一点对AI更重要），他们的工作隐含了任何形式的数学推理都能在这些限制之下机械化的可能性。<br>邱奇-图灵论题暗示，一台仅能处理0和1这样简单二元符号的机械设备能够模拟任意数学推理过程。这里最关键的灵感是图灵机：这一看似简单的理论构造抓住了抽象符号处理的本质。这一创造激发科学家们探讨让机器思考的可能。[15][23]</p>
<h3 id="计算机科学"><a href="#计算机科学" class="headerlink" title="计算机科学"></a>计算机科学</h3><p>主条目：计算机硬件历史<br>用于计算的机器古已有之；历史上许多数学家对其作出了改进。19世纪初，查尔斯·巴贝奇设计了一台可编程计算机（“分析机”），但未能建造出来。爱达·勒芙蕾丝预言，这台机器“将创作出无限复杂，无限宽广的精妙的科学乐章”。[24]（她常被认为是第一个程序员，因为她留下的一些笔记完整地描述了使用这一机器计算伯努利数的方法。）<br>第一批现代计算机是二战期间建造的大型译码机（包括Z3，ENIAC和Colossus等）。[25]后两个机器的理论基础是图灵和约翰·冯·诺伊曼提出和发展的学说。[26]</p>
<h2 id="人工智能的诞生：1943-1956"><a href="#人工智能的诞生：1943-1956" class="headerlink" title="人工智能的诞生：1943 - 1956"></a>人工智能的诞生：1943 - 1956</h2><p>[27]在20世纪40年代和50年代，来自不同领域（数学，心理学，工程学，经济学和政治学）的一批科学家开始探讨制造人工大脑的可能性。1956年，人工智能被确立为一门学科。</p>
<h3 id="控制论与早期神经网络"><a href="#控制论与早期神经网络" class="headerlink" title="控制论与早期神经网络"></a>控制论与早期神经网络</h3><p>最初的人工智能研究是30年代末到50年代初的一系列科学进展交汇的产物。神经学研究发现大脑是由神经元组成的电子网络，其激励电平只存在“有”和“无”两种状态，不存在中间状态。维纳的控制论描述了电子网络的控制和稳定性。克劳德·香农提出的信息论则描述了数字信号（即高低电平代表的二进制信号）。图灵的计算理论证明数字信号足以描述任何形式的计算。这些密切相关的想法暗示了构建电子大脑的可能性。[28]<br>这一阶段的工作包括一些机器人的研发，例如W。Grey Walter的“乌龟（turtles）”，还有“约翰霍普金斯兽”（Johns Hopkins Beast）。这些机器并未使用计算机，数字电路和符号推理；控制它们的是纯粹的模拟电路。[29]<br>Walter Pitts和Warren McCulloch分析了理想化的人工神经元网络，并且指出了它们进行简单逻辑运算的机制。他们是最早描述所谓“神经网络”的学者。[30]马文·闵斯基是他们的学生，当时是一名24岁的研究生。1951年他与Dean Edmonds一道建造了第一台神经网络机，称为SNARC。在接下来的五十年中，闵斯基是AI领域最重要的领导者和创新者之一。</p>
<h3 id="游戏AI"><a href="#游戏AI" class="headerlink" title="游戏AI"></a>游戏AI</h3><p>1951年，Christopher Strachey使用曼彻斯特大学的Ferranti Mark 1机器写出了一个西洋跳棋（checkers）程序；Dietrich Prinz则写出了一个国际象棋程序。[31]Arthur Samuel在五十年代中期和六十年代初开发的国际象棋程序的棋力已经可以挑战具有相当水平的业余爱好者。[32]游戏AI一直被认为是评价AI进展的一种标准。</p>
<h3 id="图灵测试"><a href="#图灵测试" class="headerlink" title="图灵测试"></a>图灵测试</h3><p>1950年，图灵发表了一篇划时代的论文，文中预言了创造出具有真正智能的机器的可能性。[33]由于注意到“智能”这一概念难以确切定义，他提出了著名的图灵测试：如果一台机器能够与人类展开对话（通过电传设备）而不能被辨别出其机器身份，那么称这台机器具有智能。这一简化使得图灵能够令人信服地说明“思考的机器”是可能的。论文中还回答了对这一假说的各种常见质疑。[34]图灵测试是人工智能哲学方面第一个严肃的提案。</p>
<h3 id="符号推理与“逻辑理论家”程序"><a href="#符号推理与“逻辑理论家”程序" class="headerlink" title="符号推理与“逻辑理论家”程序"></a>符号推理与“逻辑理论家”程序</h3><p>50年代中期，随着数字计算机的兴起，一些科学家直觉地感到可以进行数字操作的机器也应当可以进行符号操作，而符号操作可能是人类思维的本质。这是创造智能机器的一条新路。[35]<br>1955年，Newell和（后来荣获诺贝尔奖的）Simon在J. C. Shaw的协助下开发了“逻辑理论家（Logic Theorist）”。这个程序能够证明《数学原理》中前52个定理中的38个，其中某些证明比原著更加新颖和精巧。[36]Simon认为他们已经“解决了神秘的心/身问题，解释了物质构成的系统如何获得心灵的性质。”[37] （这一断言的哲学立场后来被John Searle称为“强人工智能”，即机器可以像人一样具有思想。）[38]</p>
<h3 id="1956年达特茅斯会议：AI的诞生"><a href="#1956年达特茅斯会议：AI的诞生" class="headerlink" title="1956年达特茅斯会议：AI的诞生"></a>1956年达特茅斯会议：AI的诞生</h3><p>主条目：达特矛斯会议<br>1956年达特矛斯会议[39]的组织者是马文·闵斯基，约翰·麦卡锡和另两位资深科学家Claude Shannon以及Nathan Rochester，后者来自IBM。会议提出的断言之一是“学习或者智能的任何其他特性的每一个方面都应能被精确地加以描述，使得机器可以对其进行模拟。” [40]与会者包括Ray Solomonoff，Oliver Selfridge，Trenchard More，Arthur Samuel，Newell和Simon，他们中的每一位都将在AI研究的第一个十年中作出重要贡献。[41]会上纽厄尔和西蒙讨论了“逻辑理论家”，而麦卡锡则说服与会者接受“人工智能”一词作为本领域的名称。[42]1956年达特矛斯会议上AI的名称和任务得以确定，同时出现了最初的成就和最早的一批研究者，因此这一事件被广泛承认为AI诞生的标志。[43]</p>
<h2 id="黄金年代：1956-1974"><a href="#黄金年代：1956-1974" class="headerlink" title="黄金年代：1956 - 1974"></a>黄金年代：1956 - 1974</h2><p>达特茅斯会议之后的数年是大发现的时代。对许多人而言，这一阶段开发出的程序堪称神奇：[44]计算机可以解决代数应用题，证明几何定理，学习和使用英语。当时大多数人几乎无法相信机器能够如此“智能”。[45] 研究者们在私下的交流和公开发表的论文中表达出相当乐观的情绪，认为具有完全智能的机器将在二十年内出现。[46] ARPA（国防高等研究计划署）等政府机构向这一新兴领域投入了大笔资金。[47]</p>
<h3 id="研究工作"><a href="#研究工作" class="headerlink" title="研究工作"></a>研究工作</h3><p>从50年代后期到60年代涌现了大批成功的AI程序和新的研究方向。下面列举其中最具影响的几个。</p>
<h4 id="搜索式推理"><a href="#搜索式推理" class="headerlink" title="搜索式推理"></a>搜索式推理</h4><p>许多AI程序使用相同的基本算法。为实现一个目标（例如赢得游戏或证明定理），它们一步步地前进，就像在迷宫中寻找出路一般；如果遇到了死胡同则进行回溯。这就是“搜索式推理”。[48]<br>这一思想遇到的主要困难是，在很多问题中，“迷宫”里可能的线路总数是一个天文数字（所谓“指数爆炸”）。研究者使用启发式算法去掉那些不太可能导出正确答案的支路，从而缩小搜索范围。[49]<br>Newell和Simon试图通过其“通用解题器（General Problem Solver）”程序，将这一算法推广到一般情形。[50]另一些基于搜索算法证明几何与代数问题的程序也给人们留下了深刻印象，例如Herbert Gelernter的几何定理证明机（1958）和Minsky的学生James Slagle开发的SAINT（1961）。[51]还有一些程序通过搜索目标和子目标作出决策，如斯坦福大学为控制机器人Shakey而开发的STRIPS系统。[52]</p>
<h4 id="自然语言"><a href="#自然语言" class="headerlink" title="自然语言"></a>自然语言</h4><p>AI研究的一个重要目标是使计算机能够通过自然语言（例如英语）进行交流。早期的一个成功范例是Daniel Bobrow的程序STUDENT，它能够解决高中程度的代数应用题。[53]<br>如果用节点表示语义概念（例如“房子”，“门”），用节点间的连线表示语义关系（例如“有 – 一个”），就可以构造出“语义网（semantic net）”。第一个使用语义网的AI程序由Ross Quillian开发；[54] 而最为成功（也是最有争议）的一个则是Roger Schank的“概念关联（Conceptual Dependency）”。[55]<br>Joseph Weizenbaum的ELIZA是第一个聊天机器人，可能也是最有趣的会说英语的程序。与ELIZA“聊天”的用户有时会误以为自己是在和人类，而不是和一个程序，交谈。但是实际上ELIZA根本不知道自己在说什么。它只是按固定套路作答，或者用符合语法的方式将问题复述一遍。[56]</p>
<h4 id="微世界"><a href="#微世界" class="headerlink" title="微世界"></a>微世界</h4><p>60年代后期，麻省理工大学AI实验室的马文·闵斯基和Seymour Papert建议AI研究者们专注于被称为“微世界”的简单场景。他们指出在成熟的学科中往往使用简化模型帮助基本原则的理解，例如物理学中的光滑平面和完美刚体。许多这类研究的场景是“积木世界”，其中包括一个平面，上面摆放着一些不同形状，尺寸和颜色的积木。[57]<br>在这一指导思想下，Gerald Sussman（研究组长），Adolfo Guzman，David Waltz（“约束传播（constraint propagation）”的提出者），特别是Patrick Winston等人在机器视觉领域作出了创造性贡献。同时，Minsky和Papert制作了一个会搭积木的机器臂，从而将“积木世界”变为现实。微世界程序的最高成就是Terry Winograd的SHRDLU，它能用普通的英语句子与人交流，还能作出决策并执行操作。[58]</p>
<h3 id="乐观思潮"><a href="#乐观思潮" class="headerlink" title="乐观思潮"></a>乐观思潮</h3><p>第一代AI研究者们曾作出了如下预言:<br>1958年，H. A. Simon，Allen Newell：“十年之内，数字计算机将成为国际象棋世界冠军。” “十年之内，数字计算机将发现并证明一个重要的数学定理。”[59]<br>1965年，H. A. Simon：“二十年内，机器将能完成人能做到的一切工作。”[60]<br>1967年，Marvin Minsky：“一代之内……创造‘人工智能’的问题将获得实质上的解决。”[61]<br>1970年，Marvin Minsky：“在三到八年的时间里我们将得到一台具有人类平均智能的机器。”[62]</p>
<h3 id="经费"><a href="#经费" class="headerlink" title="经费"></a>经费</h3><p>1963年6月，MIT从新建立的ARPA（即后来的DARPA，国防高等研究计划局）获得了二百二十万美元经费，用于资助MAC工程，其中包括Minsky和McCarthy五年前建立的AI研究组。此后ARPA每年提供三百万美元，直到七十年代为止。[63]ARPA还对Newell和Simon在卡内基梅隆大学的工作组以及斯坦福大学AI项目（由John McCarthy于1963年创建）进行类似的资助。[64]另一个重要的AI实验室于1965年由Donald Michie在爱丁堡大学建立。[65]在接下来的许多年间，这四个研究机构一直是AI学术界的研究（和经费）中心。[66]<br>经费几乎是无条件地提供的：时任ARPA主任的J. C. R. Licklider相信他的组织应该“资助人，而不是项目”，并且允许研究者去做任何感兴趣的方向。[67]这导致了MIT无约无束的研究氛围及其hacker文化的形成，[68]但是好景不长。</p>
<h2 id="第一次AI低谷：1974-1980"><a href="#第一次AI低谷：1974-1980" class="headerlink" title="第一次AI低谷：1974 - 1980"></a>第一次AI低谷：1974 - 1980</h2><p>到了70年代，AI开始遭遇批评，随之而来的还有资金上的困难。AI研究者们对其课题的难度未能作出正确判断：此前的过于乐观使人们期望过高，当承诺无法兑现时，对AI的资助就缩减或取消了。[69]同时，由于马文·闵斯基对感知器的激烈批评，联结主义（即神经网络）销声匿迹了十年。[70]70年代后期，尽管遭遇了公众的误解，AI在逻辑编程，常识推理等一些领域还是有所进展。[71]</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>70年代初，AI遭遇了瓶颈。即使是最杰出的AI程序也只能解决它们尝试解决的问题中最简单的一部分，也就是说所有的AI程序都只是“玩具”。[72]AI研究者们遭遇了无法克服的基础性障碍。尽管某些局限后来被成功突破，但许多至今仍无法满意地解决。[73]<br>计算机的运算能力。当时的计算机有限的内存和处理速度不足以解决任何实际的AI问题。例如，Ross Quillian在自然语言方面的研究结果只能用一个含二十个单词的词汇表进行演示，因为内存只能容纳这么多。[74]1976年Hans Moravec指出，计算机离智能的要求还差上百万倍。他做了个类比：人工智能需要强大的计算能力，就像飞机需要大功率动力一样，低于一个门限时是无法实现的；但是随着能力的提升，问题逐渐会变得简单。[75]<br>计算复杂性和指数爆炸。1972年Richard Karp根据Stephen Cook于1971年提出的Cook-Levin理论证明，许多问题只可能在指数时间内获解（即，计算时间与输入规模的幂成正比）。除了那些最简单的情况，这些问题的解决需要近乎无限长的时间。这就意味着AI中的许多玩具程序恐怕永远也不会发展为实用的系统。[76]<br>常识与推理。许多重要的AI应用，例如机器视觉和自然语言，都需要大量对世界的认识信息。程序应该知道它在看什么，或者在说些什么。这要求程序对这个世界具有儿童水平的认识。研究者们很快发现这个要求太高了：1970年没人能够做出如此巨大的数据库，也没人知道一个程序怎样才能学到如此丰富的信息。[77]<br>莫拉维克悖论。证明定理和解决几何问题对计算机而言相对容易，而一些看似简单的任务，如人脸识别或穿过屋子，实现起来却极端困难。这也是70年代中期机器视觉和机器人方面进展缓慢的原因。[78]<br>框架和资格问题。采取逻辑观点的AI研究者们（例如John McCarthy）发现，如果不对逻辑的结构进行调整，他们就无法对常见的涉及自动规划（planning or default reasoning）的推理进行表达。为解决这一问题，他们发展了新逻辑学（如非单调逻辑（non-monotonic logics）和模态逻辑（modal logics））。[79]</p>
<h3 id="停止拨款"><a href="#停止拨款" class="headerlink" title="停止拨款"></a>停止拨款</h3><p>由于缺乏进展，对AI提供资助的机构（如英国政府，DARPA和NRC）对无方向的AI研究逐渐停止了资助。早在1966年ALPAC（Automatic Language Processing Advisory Committee，自动语言处理顾问委员会）的报告中就有批评机器翻译进展的意味，预示了这一局面的来临。NRC（National Research Council，美国国家科学委员会）在拨款二千万美元后停止资助。[80]1973年Lighthill针对英国AI研究状况的报告批评了AI在实现其“宏伟目标”上的完全失败，并导致了英国AI研究的低潮[81]（该报告特别提到了指数爆炸问题，以此作为AI失败的一个原因）。[82]DARPA则对CMU的语音理解研究项目深感失望，从而取消了每年三百万美元的资助。[83]到了1974年已经很难再找到对AI项目的资助。<br>Hans Moravec将批评归咎于他的同行们不切实际的预言：“许多研究者落进了一张日益浮夸的网中”。[84]还有一点，自从1969年Mansfield修正案通过后，DARPA被迫只资助“具有明确任务方向的研究，而不是无方向的基础研究”。60年代那种对自由探索的资助一去不复返；此后资金只提供给目标明确的特定项目，比如自动坦克，或者战役管理系统。[85]</p>
<h3 id="来自大学的批评"><a href="#来自大学的批评" class="headerlink" title="来自大学的批评"></a>来自大学的批评</h3><p>一些哲学家强烈反对AI研究者的主张。其中最早的一个是John Lucas，他认为哥德尔不完备定理已经证明形式系统（例如计算机程序）不可能判断某些陈述的真理性，但是人类可以。[86]Hubert Dreyfus讽刺六十年代AI界那些未实现的预言，并且批评AI的基础假设，认为人类推理实际上仅涉及少量“符号处理”，而大多是具体的，直觉的，下意识的“窍门（know how）”。[87][88] John Searle于1980年提出“中文房间”实验，试图证明程序并不“理解”它所使用的符号，即所谓的“意向性（intentionality）”问题。Searle认为，如果符号对于机器而言没有意义，那么就不能认为机器是在“思考”。[89]<br>AI研究者们并不太把这些批评当回事，因为它们似乎有些离题，而计算复杂性和“让程序具有常识”等问题则显得更加紧迫和严重。对于实际的计算机程序而言，“常识”和“意向性”的区别并不明显。Minsky提到Dreyfus和Searle时说，“他们误解了，所以应该忽略”。[90]在MIT任教的Dreyfus遭到了AI阵营的冷遇：他后来说，AI研究者们“生怕被人看到在和我一起吃中饭”。[91] ELIZA程序的作者Joseph Weizenbaum感到他的同事们对待Dreyfus的态度不太专业，而且有些孩子气。虽然他直言不讳地反对Dreyfus的论点，但他“清楚地表明了他们待人的方式不对”。[92]<br>Weizenbaum后来开始思考AI相关的伦理问题，起因是Kenneth Colby开发了一个模仿医师的聊天机器人DOCTOR，并用它当作真正的医疗工具。二人发生争执；虽然Colby认为Weizenbaum对他的程序没有贡献，但这于事无补。1976年Weizenbaum出版著作《计算机的力量与人类的推理》，书中表示人工智能的滥用可能损害人类生命的价值。[93]</p>
<h3 id="感知器与联结主义遭到冷落"><a href="#感知器与联结主义遭到冷落" class="headerlink" title="感知器与联结主义遭到冷落"></a>感知器与联结主义遭到冷落</h3><p>感知器是神经网络的一种形式，由Frank Rosenblatt于1958年提出。与多数AI研究者一样，他对这一发明的潜力非常乐观，预言说“感知器最终将能够学习，作出决策和翻译语言”。整个六十年代里这一方向的研究工作都很活跃。<br>1969年Minsky和Papert出版了著作《感知器》，书中暗示感知器具有严重局限，而Frank Rosenblatt的预言过于夸张。这本书的影响是破坏性的：联结主义的研究因此停滞了十年。后来新一代研究者使这一领域获得重生，并使其成为人工智能中的重要部分；遗憾的是Rosenblatt没能看到这些，他在《感知器》问世后不久即因游船事故去世。[70]</p>
<h3 id="“简约派（the-neats）”：逻辑，Prolog语言和专家系统"><a href="#“简约派（the-neats）”：逻辑，Prolog语言和专家系统" class="headerlink" title="“简约派（the neats）”：逻辑，Prolog语言和专家系统"></a>“简约派（the neats）”：逻辑，Prolog语言和专家系统</h3><p>早在1958年，John McCarthy就提出了名为“纳谏者（Advice Taker）”的一个程序构想，将逻辑学引入了AI研究界。[94]1963年，J. Alan Robinson发现了在计算机上实现推理的简单方法：归结（resolution）与合一（unification）算法。然而，根据60年代末McCarthy和他的学生们的工作，对这一想法的直接实现具有极高的计算复杂度：即使是证明很简单的定理也需要天文数字的步骤。[95]70年代Robert Kowalsky在Edinburgh大学的工作则更具成效：法国学者Alain Colmerauer和Phillipe Roussel在他的合作下开发出成功的逻辑编程语言Prolog。[96]<br>Dreyfus等人针对逻辑方法的批评观点认为，人类在解决问题时并没有使用逻辑运算。心理学家Peter Wason，Eleanor Rosch，阿摩司·特沃斯基，Daniel Kahneman等人的实验证明了这一点。[97]McCarthy则回应说，人类怎么思考是无关紧要的：真正想要的是解题机器，而不是模仿人类进行思考的机器。[98]</p>
<h3 id="“芜杂派（the-scruffies）”：框架和脚本"><a href="#“芜杂派（the-scruffies）”：框架和脚本" class="headerlink" title="“芜杂派（the scruffies）”：框架和脚本"></a>“芜杂派（the scruffies）”：框架和脚本</h3><p>对McCarthy的做法持批评意见的还有他在MIT的同行们。马文·闵斯基，Seymour Papert和Roger Schank等试图让机器像人一样思考，使之能够解决“理解故事”和“目标识别”一类问题。为了使用“椅子”，“饭店”之类最基本的概念，他们需要让机器像人一样作出一些非逻辑的假设。不幸的是，这些不精确的概念难以用逻辑进行表达。Gerald Sussman注意到，“使用精确的语言描述本质上不精确的概念，并不能使它们变得精确起来”。[99]Schank用“芜杂（scruffy）”一词描述他们这一“反逻辑”的方法，与McCarthy，Kowalski，Feigenbaum，Newell和Simon等人的“简约（neat）”方案相对。[100]<br>在1975年的一篇开创性论文中，Minsky注意到与他共事的“芜杂派”研究者在使用同一类型的工具，即用一个框架囊括所有相关的常识性假设。例如，当我们使用“鸟”这一概念时，脑中会立即浮现出一系列相关事实，如会飞，吃虫子，等等。我们知道这些假设并不一定正确，使用这些事实的推理也未必符合逻辑，但是这一系列假设组成的结构正是我们所想和所说的一部分。他把这个结构称为“框架（frames）”。Schank使用了“框架”的一个变种，他称之为“脚本（scripts）”，基于这一想法他使程序能够回答关于一篇英语短文的提问。[101] 多年之后的面向对象编程采纳了AI“框架”研究中的“继承（inheritance）”概念。</p>
<h2 id="繁荣：1980-1987"><a href="#繁荣：1980-1987" class="headerlink" title="繁荣：1980 - 1987"></a>繁荣：1980 - 1987</h2><p>在80年代，一类名为“专家系统”的AI程序开始为全世界的公司所采纳，而“知识处理”成为了主流AI研究的焦点。日本政府在同一年代积极投资AI以促进其第五代计算机工程。80年代早期另一个令人振奋的事件是John Hopfield和David Rumelhart使联结主义重获新生。AI再一次获得了成功。</p>
<h3 id="专家系统获得赏识"><a href="#专家系统获得赏识" class="headerlink" title="专家系统获得赏识"></a>专家系统获得赏识</h3><p>专家系统是一种程序，能够依据一组从专门知识中推演出的逻辑规则在某一特定领域回答或解决问题。最早的示例由Edward Feigenbaum和他的学生们开发。1965年起设计的Dendral能够根据分光计读数分辨混合物。1972年设计的MYCIN能够诊断血液传染病。它们展示了这一方法的威力。[102]<br>专家系统仅限于一个很小的知识领域，从而避免了常识问题；其简单的设计又使它能够较为容易地编程实现或修改。总之，实践证明了这类程序的实用性。直到现在AI才开始变得实用起来。[103]<br>1980年CMU为DEC（Digital Equipment Corporation，数字设备公司）设计了一个名为XCON的专家系统，这是一个巨大的成功。在1986年之前，它每年为公司省下四千万美元。[104]全世界的公司都开始研发和应用专家系统，到1985年它们已在AI上投入十亿美元以上，大部分用于公司内设的AI部门。为之提供支持的产业应运而生，其中包括Symbolics，Lisp Machines等硬件公司和IntelliCorp，Aion等软件公司。[105]</p>
<h3 id="知识革命"><a href="#知识革命" class="headerlink" title="知识革命"></a>知识革命</h3><p>专家系统的能力来自于它们存储的专业知识。这是70年代以来AI研究的一个新方向。 [106] Pamela McCorduck在书中写道，“不情愿的AI研究者们开始怀疑，因为它违背了科学研究中对最简化的追求。智能可能需要建立在对分门别类的大量知识的多种处理方法之上。” “70年代的教训是智能行为与知识处理关系非常密切。有时还需要在特定任务领域非常细致的知识。” [107]知识库系统和知识工程成为了80年代AI研究的主要方向。[108]<br>第一个试图解决常识问题的程序Cyc也在80年代出现，其方法是建立一个容纳一个普通人知道的所有常识的巨型数据库。发起和领导这一项目的Douglas Lenat认为别无捷径，让机器理解人类概念的唯一方法是一个一个地教会它们。这一工程几十年也没有完成。[109]</p>
<h3 id="重获拨款：第五代工程"><a href="#重获拨款：第五代工程" class="headerlink" title="重获拨款：第五代工程"></a>重获拨款：第五代工程</h3><p>1981年，日本经济产业省拨款八亿五千万美元支持第五代计算机项目。其目标是造出能够与人对话，翻译语言，解释图像，并且像人一样推理的机器。[110]令“芜杂派”不满的是，他们选用Prolog作为该项目的主要编程语言。[111]<br>其他国家纷纷作出响应。英国开始了耗资三亿五千万英镑的Alvey工程。美国一个企业协会组织了MCC（Microelectronics and Computer Technology Corporation，微电子与计算机技术集团），向AI和信息技术的大规模项目提供资助。[112][113] DARPA也行动起来，组织了战略计算促进会（Strategic Computing Initiative），其1988年向AI的投资是1984年的三倍。[114]</p>
<h3 id="联结主义的重生"><a href="#联结主义的重生" class="headerlink" title="联结主义的重生"></a>联结主义的重生</h3><p>982年，物理学家John Hopfield证明一种新型的神经网络（现被称为“Hopfield网络”）能够用一种全新的方式学习和处理信息。大约在同时（早于Paul Werbos），David Rumelhart推广了反向传播算法，一种神经网络训练方法。这些发现使1970年以来一直遭人遗弃的联结主义重获新生。[113][115]<br>1986年由Rumelhart和心理学家James McClelland主编的两卷本论文集“分布式并行处理”问世，这一新领域从此得到了统一和促进。90年代神经网络获得了商业上的成功，它们被应用于光字符识别和语音识别软件。[113][116]</p>
<h2 id="第二次AI低谷：1987-1993"><a href="#第二次AI低谷：1987-1993" class="headerlink" title="第二次AI低谷：1987 - 1993"></a>第二次AI低谷：1987 - 1993</h2><p>80年代中商业机构对AI的追捧与冷落符合经济泡沫的经典模式，泡沫的破裂也在政府机构和投资者对AI的观察之中。尽管遇到各种批评，这一领域仍在不断前进。来自机器人学这一相关研究领域的Rodney Brooks和Hans Moravec提出了一种全新的人工智能方案。</p>
<h3 id="人工智能的低谷"><a href="#人工智能的低谷" class="headerlink" title="人工智能的低谷"></a>人工智能的低谷</h3><p>“AI之冬”一词由经历过1974年经费削减的研究者们创造出来。他们注意到了对专家系统的狂热追捧，预计不久后人们将转向失望。[117]事实被他们不幸言中：从80年代末到90年代初，AI遭遇了一系列财政问题。<br>变天的最早征兆是1987年AI硬件市场需求的突然下跌。Apple和IBM生产的台式机性能不断提升，到1987年时其性能已经超过了Symbolics和其他厂家生产的昂贵的Lisp机。老产品失去了存在的理由：一夜之间这个价值五亿美元的产业土崩瓦解。[118]<br>XCON等最初大获成功的专家系统维护费用居高不下。它们难以升级，难以使用，脆弱（当输入异常时会出现莫名其妙的错误），成了以前已经暴露的各种各样的问题（例如资格问题（en:qualification problem））的牺牲品。专家系统的实用性仅仅局限于某些特定情景。[119]<br>到了80年代晚期，战略计算促进会大幅削减对AI的资助。DARPA的新任领导认为AI并非“下一个浪潮”，拨款将倾向于那些看起来更容易出成果的项目。[120]<br>1991年人们发现十年前日本人宏伟的“第五代工程”并没有实现。事实上其中一些目标，比如“与人展开交谈”，直到2010年也没有实现。[121] 与其他AI项目一样，期望比真正可能实现的要高得多。[121]</p>
<h3 id="躯体的重要性：Nouvelle-AI与嵌入式推理"><a href="#躯体的重要性：Nouvelle-AI与嵌入式推理" class="headerlink" title="躯体的重要性：Nouvelle AI与嵌入式推理"></a>躯体的重要性：Nouvelle AI与嵌入式推理</h3><p>80年代后期，一些研究者根据机器人学的成就提出了一种全新的人工智能方案。[122] 他们相信，为了获得真正的智能，机器必须具有躯体 - 它需要感知，移动，生存，与这个世界交互。他们认为这些感知运动技能对于常识推理等高层次技能是至关重要的，而抽象推理不过是人类最不重要，也最无趣的技能（参见Moravec悖论）。[123]他们号召“自底向上”地创造智能，这一主张复兴了从60年代就沉寂下来的控制论。<br>另一位先驱是在理论神经科学上造诣深厚的David Marr，他于70年代来到MIT指导视觉研究组的工作。他排斥所有符号化方法（不论是McCarthy的逻辑学还是Minsky的框架），认为实现AI需要自底向上地理解视觉的物理机制，而符号处理应在此之后进行。[124]<br>在发表于1990年的论文“大象不玩象棋（Elephants Don’t Play Chess）”中，机器人研究者Rodney Brooks提出了“物理符号系统假设”，认为符号是可有可无的，因为“这个世界就是描述它自己最好的模型。它总是最新的。它总是包括了需要研究的所有细节。诀窍在于正确地，足够频繁地感知它。” [125]在80年代和90年代也有许多认知科学家反对基于符号处理的智能模型，认为身体是推理的必要条件，这一理论被称为“具身的心灵/理性/ 认知（embodied mind/reason/cognition）”论题。[126]</p>
<h2 id="AI：1993-现在"><a href="#AI：1993-现在" class="headerlink" title="AI：1993 - 现在"></a>AI：1993 - 现在</h2><p>现已年过半百的AI终于实现了它最初的一些目标。它已被成功地用在技术产业中，不过有时是在幕后。这些成就有的归功于计算机性能的提升，有的则是在高尚的科学责任感驱使下对特定的课题不断追求而获得的。不过，至少在商业领域里AI的声誉已经不如往昔了。“实现人类水平的智能”这一最初的梦想曾在60年代令全世界的想象力为之着迷，其失败的原因至今仍众说纷纭。各种因素的合力将AI拆分为各自为战的几个子领域，有时候它们甚至会用新名词来掩饰“人工智能”这块被玷污的金字招牌。[127]AI比以往的任何时候都更加谨慎，却也更加成功。</p>
<h3 id="里程碑和摩尔定律"><a href="#里程碑和摩尔定律" class="headerlink" title="里程碑和摩尔定律"></a>里程碑和摩尔定律</h3><p>1997年5月11日，深蓝成为战胜国际象棋世界冠军卡斯帕罗夫的第一个计算机系统。[128]2005年，Stanford开发的一台机器人在一条沙漠小径上成功地自动行驶了131英里，赢得了DARPA挑战大赛头奖。[129]2009年，蓝脑计划声称已经成功地模拟了部分鼠脑。2011年，IBM 沃森参加《危险边缘》节目，在最后一集打败了人类选手。2016年3月，AlphaGo击败李世乭，成为第一个不让子而击败职业围棋棋士的电脑围棋程式。<br>这些成就的取得并不是因为范式上的革命。它们仍然是工程技术的复杂应用，但是计算机性能已经今非昔比了。[130]事实上，深蓝计算机比Christopher Strachey在1951年用来下棋的Ferranti Mark 1快一千万倍。[131]这种剧烈增长可以用摩尔定律描述：计算速度和内存容量每两年翻一番。计算性能上的基础性障碍已被逐渐克服。</p>
<h3 id="智能代理"><a href="#智能代理" class="headerlink" title="智能代理"></a>智能代理</h3><p>90年代，被称为“智能代理”的新范式被广泛接受。[132]尽管早期研究者提出了模块化的分治策略，[133] 但是直到Judea Pearl，Alan Newell等人将一些概念从决策理论和经济学中引入AI之后现代智能代理范式才逐渐形成。[134]当经济学中的“理性代理（rational agent）”与计算机科学中的“对象”或“模块”相结合，“智能代理”范式就完善了。<br>智能代理是一个系统，它感知周围环境，然后采取措施使成功的几率最大化。最简单的智能代理是解决特定问题的程序。已知的最复杂的智能代理是理性的，会思考的人类。智能代理范式将AI研究定义为“对智能代理的学习”。这是对早期一些定义的推广：它超越了研究人类智能的范畴，涵盖了对所有种类的智能的研究。[135]<br>这一范式让研究者们通过学习孤立的问题找到可证的并且有用的解答。它为AI各领域乃至经济学，控制论等使用抽象代理概念的领域提供了描述问题和共享解答的一种通用语言。人们希望能找到一种完整的代理架构（像Newell的en:SOAR那样），允许研究者们应用交互的智能代理建立起通用的智能系统。[134][136]</p>
<h3 id="“简约派”的胜利"><a href="#“简约派”的胜利" class="headerlink" title="“简约派”的胜利"></a>“简约派”的胜利</h3><p>越来越多的AI研究者们开始开发和使用复杂的数学工具。[137]人们广泛地认识到，许多AI需要解决的问题已经成为数学，经济学和运筹学领域的研究课题。数学语言的共享不仅使AI可以与其他学科展开更高层次的合作，而且使研究结果更易于评估和证明。AI已成为一门更严格的科学分支。[138] Russell和Norvig（2003）将这些变化视为一场“革命”和“简约派的胜利”。[139][140]<br>Judea Pearl发表于1988年的名著[141]将概率论和决策理论引入AI。现已投入应用的新工具包括贝叶斯网络，隐马尔可夫模型，信息论，随机模型和经典优化理论。针对神经网络和进化算法等“计算智能”范式的精确数学描述也被发展出来。[139]</p>
<h3 id="幕后的AI"><a href="#幕后的AI" class="headerlink" title="幕后的AI"></a>幕后的AI</h3><p>AI研究者们开发的算法开始变为较大的系统的一部分。AI曾经解决了大量的难题，[142]这些解决方案在产业界起到了重要作用。[143]应用了AI技术的有数据挖掘，工业机器人，物流[144]，语音识别[145]，银行业软件[146]，医疗诊断[146]和Google搜索引擎等。[147]<br>AI领域并未从这些成就之中获得多少益处。AI的许多伟大创新仅被看作计算机科学工具箱中的一件工具。[148]Nick Bostrom解释说，“很多AI的前沿成就已被应用在一般的程序中，不过通常没有被称为AI。这是因为，一旦变得足够有用和普遍，它就不再被称为AI了。”[149]<br>90年代的许多AI研究者故意用其他一些名字称呼他们的工作，例如信息学，知识系统，认知系统或计算智能。部分原因是他们认为他们的领域与AI存在根本的不同，不过新名字也有利于获取经费。至少在商业领域，导致AI之冬的那些未能兑现的承诺仍然困扰着AI研究，正如New York Times在2005年的一篇报道所说：“计算机科学家和软件工程师们避免使用人工智能一词，因为怕被认为是在说梦话。”[150][151][152]</p>
<h3 id="HAL-9000在哪里"><a href="#HAL-9000在哪里" class="headerlink" title="HAL 9000在哪里?"></a>HAL 9000在哪里?</h3><p>1968年亚瑟·克拉克和史丹利·库柏力克创作的《“2001太空漫游”》中设想2001年将会出现达到或超过人类智能的机器。他们创造的这一名为HAL-9000的角色是以科学事实为依据的：当时许多顶极AI研究者相信到2001年这样的机器会出现。[153]<br>“那么问题是，为什么在2001年我们并未拥有HAL呢?” 马文·闵斯基问道。[154] Minsky认为，问题的答案是绝大多数研究者醉心于钻研神经网络和遗传算法之类商业应用，而忽略了常识推理等核心问题。另一方面，John McCarthy则归咎于资格问题（en:qualification problem）。[155]Ray Kurzweil相信问题在于计算机性能，根据摩尔定律，他预测具有人类智能水平的机器将在2029年出现。[156]Jeff Hawkins认为神经网络研究忽略了人类大脑皮质的关键特性，而简单的模型只能用于解决简单的问题。[157]还有许多别的解释，每一个都对应着一个正在进行的研究计划。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8F%B2" target="_blank" rel="external">人工智能史</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/225px-Gottfried_Wilhelm_von_Leibniz.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="History" scheme="http://ipcreator.me/tags/History/"/>
    
  </entry>
  
  <entry>
    <title>Santana——Smooth</title>
    <link href="http://ipcreator.me/2017/03/27/MyView/Music/santana-smooth/"/>
    <id>http://ipcreator.me/2017/03/27/MyView/Music/santana-smooth/</id>
    <published>2017-03-26T23:42:06.000Z</published>
    <updated>2017-03-29T04:18:01.287Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om845dfwl.bkt.clouddn.com/Santanasmooth.jpg" alt=""></p>
<p><a href="https://en.wikipedia.org/wiki/Smooth_(song" target="_blank" rel="external">From Wikipedia, the free encyclopedia</a>)</p>
<p>“Smooth” is a collaboration between Latin rock band Santana and Matchbox Twenty vocalist Rob Thomas. The song was written by Thomas, DeGaetano, and Itaal Shur, produced by Matt Serletic and sung by Thomas. It won three Grammy Awards: <strong>Record of the Year</strong>, <strong>Song of the Year</strong>, and <strong>Best Pop Collaboration with Vocals</strong>. Not only was it the final number-one Hot 100 hit of the 1990s, it was also the number-two Hot 100 hit of the 20th century. “Smooth” is the only song to appear on two decade-end Billboard charts. As of 2013, “Smooth” is ranked the second most successful song of all time by Billboard.</p>
<a id="more"></a>
<h2 id="SANTANA-LYRICS"><a href="#SANTANA-LYRICS" class="headerlink" title="SANTANA LYRICS"></a>SANTANA LYRICS</h2><p>“Smooth”<br>(feat. Rob Thomas)</p>
<p>Man, it’s a hot one<br>Like seven inches from the midday sun<br>Well, I hear you whisper and the words melt everyone<br>But you stay so cool</p>
<p>My muñequita,<br>My Spanish Harlem Mona Lisa<br>You’re my reason for reason<br>The step in my groove, yeah.</p>
<p>[Bridge]<br>And if you said, “This life ain’t good enough.”<br>I would give my world to lift you up<br>I could change my life to better suit your mood<br>Because you’re so smooth</p>
<p>[Chorus]<br>And it’s just like the ocean under the moon<br>Well, that’s the same as the emotion that I get from you<br>You got the kind of loving that can be so smooth, yeah.<br>Gimme your heart, make it real<br>Or else forget about it</p>
<p>Well, I’ll tell you one thing<br>If you would leave it’d be a crying shame<br>In every breath and every word<br>I hear your name calling me out</p>
<p>Out from the barrio,<br>You hear my rhythm on your radio<br>You feel the turning of the world so soft and slow<br>Turning you ‘round and ‘round</p>
<p>[Bridge]</p>
<p>[Chorus]</p>
<p>[Chorus]</p>
<p>Or else forget about it<br>Or else forget about it<br>Oh, let’s don’t forget about it<br>(Gimme your heart, make it real)<br>Let’s don’t forget about it (hey)<br>Let’s don’t forget about it (no oh no oh)<br>Let’s don’t forget about it (no no no oh)<br>Let’s don’t forget about it (hey no no oh)<br>Let’s don’t forget about it (hey hey hey)</p>
<h2 id="SANTANA-歌词"><a href="#SANTANA-歌词" class="headerlink" title="SANTANA 歌词"></a>SANTANA 歌词</h2><p>Man it’s a hot one<br>天,这是多么性感的人。</p>
<p>Like seven inches from the midday sun<br>就像站在正午7英尺近的太阳下。</p>
<p>I hear you whisper &amp; the words melt everyone<br> 我听到你的轻声细语,且说得如此动人。</p>
<p>But you stay so cool<br>但是你太难以接近。</p>
<p>My muñequita, my Spanish harlem mona lisa<br>你是我的骑士,我的西班牙黑珍珠蒙娜丽莎。</p>
<p>Your my reason for reason<br>你是我生存的理由。</p>
<p>The step in my groove<br> (认识你的那段时间)是我(一生中的)最佳时刻。</p>
<p>And if you say this life ain’t good enough<br>如果你说这样的生活不够好。</p>
<p>I would give my world to lift you up<br>我会贡献出我的世界以使你满足。</p>
<p>I could change my life to better suit your mood<br>我会改变自己的生活以适应你的喜好。</p>
<p>Cause you’re so smooth<br>因为你是如此的柔美。</p>
<p>And just like the ocean under the moon<br>就像月光下的海洋。</p>
<p>Well that’s the same emotion that I get from you<br>那种心绪就如同你给我的感觉一般。</p>
<p>You got the kind of lovin that can be so smooth<br> 你拥有一种柔美的爱。</p>
<p>Gimme your heart, make it real<br>给我你的爱,就此实现吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>I’ll tell you one thing<br> 我要告诉你一件事。</p>
<p>If you would leave it would be a crying shame<br>如果你离去,我将无地自容。</p>
<p>In every breath and every word<br>我每声每息都听见你的名字</p>
<p>I hear your name calling me out<br>在向我呼唤</p>
<p>Out from the barrio,<br>在西班牙地区以外的地方,</p>
<p>you hear my rhythm from your radio<br>你会从电台里听到我的音乐。</p>
<p>You feel the turning of the world so soft and slow<br>让你感到这世界转动得如此地温柔而舒缓。</p>
<p>Turning you round and round<br>带着你转啊转着。</p>
<p>And if you say this life ain’t good enough<br>如果你说这样的生活不够好。</p>
<p>I would give my world to lift you up<br>我会贡献出我的世界以使你满足。</p>
<p>I could change my life to better suit your mood<br>我会改变自己的生活以适应你的喜好。</p>
<p>Cause you’re so smooth<br>因为你是如此的柔美。</p>
<p>And just like the ocean under the moon<br>就像月光下的海洋。</p>
<p>Well that’s the same emotion that I get from you<br>那种心绪就如同你给我的感觉一般。</p>
<p>You got the kind of lovin that can be so smooth<br>你拥有一种柔美的爱。</p>
<p>Gimme your heart, make it real<br>给我你的爱,就此实现吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>And just like the ocean under the moon<br>就像月光下的海洋。</p>
<p>Well that’s the same emotion that I get from you<br>那种心绪就如同你给我的感觉一般。</p>
<p>You got the kind of lovin that can be so smooth<br>你拥有一种柔美的爱。</p>
<p>Gimme your heart, make it real<br>给我你的爱,就此实现吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>Gimme your heart, make it real<br>给我你的爱,就此实现吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<p>Or else forget about it<br>否则就忘了它吧。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://en.wikipedia.org/wiki/Smooth_(song" target="_blank" rel="external">Smooth (song)</a>)<br><a href="http://blog.sina.com.cn/s/blog_477cd8220100og3f.html" target="_blank" rel="external">每天一首英文歌 歌词翻译 Smooth【Santana】</a><br><a href="https://answers.yahoo.com/question/index?qid=20070615142236AAQPwtU" target="_blank" rel="external">What does it mean-My mu-equita, my Spanish harlem mona lisa Your my reason for reason the step in my groove?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om845dfwl.bkt.clouddn.com/Santanasmooth.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Smooth_(song&quot;&gt;From Wikipedia, the free encyclopedia&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;“Smooth” is a collaboration between Latin rock band Santana and Matchbox Twenty vocalist Rob Thomas. The song was written by Thomas, DeGaetano, and Itaal Shur, produced by Matt Serletic and sung by Thomas. It won three Grammy Awards: &lt;strong&gt;Record of the Year&lt;/strong&gt;, &lt;strong&gt;Song of the Year&lt;/strong&gt;, and &lt;strong&gt;Best Pop Collaboration with Vocals&lt;/strong&gt;. Not only was it the final number-one Hot 100 hit of the 1990s, it was also the number-two Hot 100 hit of the 20th century. “Smooth” is the only song to appear on two decade-end Billboard charts. As of 2013, “Smooth” is ranked the second most successful song of all time by Billboard.&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="English" scheme="http://ipcreator.me/tags/English/"/>
    
      <category term="Music" scheme="http://ipcreator.me/tags/Music/"/>
    
  </entry>
  
  <entry>
    <title>Core Competitiveness</title>
    <link href="http://ipcreator.me/2017/03/27/MyView/my-core-competitiveness/"/>
    <id>http://ipcreator.me/2017/03/27/MyView/my-core-competitiveness/</id>
    <published>2017-03-26T23:42:06.000Z</published>
    <updated>2017-04-05T14:00:23.104Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omj173lhw.bkt.clouddn.com/20170322_165448.jpg" alt=""></p>
<p><strong>Deliberate</strong> practice makes perfect.<br><strong>Using</strong> is the best way of learning.<br><strong>Insisting</strong> is the most important habits for growing up.</p>
<blockquote>
<p>Action speaks louder than word.<br>Codes can talk, and talk by codes.<br>Growing up little by little and day by day.<br>Do what you love ,and love what you do.<br>A thousand miles starts with a single step.<br>Accumulation is powerful.</p>
</blockquote>
<a id="more"></a>
<h2 id="Health"><a href="#Health" class="headerlink" title="Health"></a>Health</h2><h3 id="Mind"><a href="#Mind" class="headerlink" title="Mind"></a>Mind</h3><ol>
<li>Focus your attention on what’s important to you.</li>
<li>Attention is the most precious resource for you.</li>
<li>Relax yourself by sixty-three game.</li>
</ol>
<h3 id="Movement"><a href="#Movement" class="headerlink" title="Movement"></a>Movement</h3><ol>
<li>Ten-thousand steps per day.</li>
<li>7th Gymnastics.</li>
</ol>
<h3 id="Sleep"><a href="#Sleep" class="headerlink" title="Sleep"></a>Sleep</h3><ol>
<li>Eight hours per day.</li>
</ol>
<h2 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h2><h3 id="English"><a href="#English" class="headerlink" title="English"></a>English</h3><blockquote>
<p>English is a language and  a tool</p>
</blockquote>
<ol>
<li>Vocabulary<ul>
<li>Ordinary Life</li>
<li>Professional Vocabulary<br>+</li>
</ul>
</li>
<li>Grammar</li>
<li>Sentence<ul>
<li>Ordinary Life</li>
<li>Quotes from Famous People</li>
</ul>
</li>
<li>Reading/Writing<ul>
<li>Input</li>
<li>Output</li>
<li>Reading word by word.</li>
</ul>
</li>
<li>Listen/Talk<ul>
<li>Breaking through listening by talking.</li>
</ul>
</li>
</ol>
<h3 id="Google-Wikipedia"><a href="#Google-Wikipedia" class="headerlink" title="Google/Wikipedia"></a>Google/Wikipedia</h3><ol>
<li>Research base on search.</li>
<li>Accurate concept is most important for research.</li>
</ol>
<h3 id="Coding-Reference"><a href="#Coding-Reference" class="headerlink" title="Coding Reference"></a>Coding Reference</h3><ol>
<li>StackFlow</li>
<li>CSDN</li>
</ol>
<h3 id="Reading-Writing"><a href="#Reading-Writing" class="headerlink" title="Reading/Writing"></a>Reading/Writing</h3><ol>
<li>Read more, write more.</li>
<li>Read the best , write the best.</li>
</ol>
<h3 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h3><h4 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h4><ol>
<li><p>Git</p>
<ul>
<li>Git</li>
<li>Github</li>
</ul>
</li>
<li><p>Web</p>
<ul>
<li>Local——Apache(XAMPP)</li>
<li>Server——QiNiu</li>
</ul>
</li>
<li><p>OS</p>
<ul>
<li>Ubuntu</li>
</ul>
</li>
<li><p>Editor</p>
<ul>
<li>Atom</li>
<li>Notepad++</li>
</ul>
</li>
<li><p>Reader</p>
<ul>
<li>SourceInsight</li>
</ul>
</li>
<li><p>Others</p>
<ul>
<li>BeyondCompare</li>
<li>Hexo</li>
<li>Next</li>
<li>Yilia</li>
<li>FastStone Capture</li>
<li>Tianxing</li>
<li>Baiduyun searcher</li>
<li>P2P Searcher</li>
<li>Xunlei Downloader</li>
<li>Youdao Note</li>
<li>Eclipse</li>
<li>Chrome</li>
<li><a href="https://color.adobe.com/zh/" target="_blank" rel="external">Adobe Color</a></li>
</ul>
</li>
</ol>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><blockquote>
<p>Great mind thinks alike.</p>
</blockquote>
<ol>
<li>The design principles of operating system and application.</li>
</ol>
<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><ol>
<li><p>Tools</p>
<ul>
<li>AndroidStudio</li>
<li>Gradle</li>
<li>Log</li>
<li>ADB</li>
<li>Git</li>
</ul>
</li>
<li><p>App</p>
<ul>
<li>Contact</li>
<li>Music Player</li>
<li>Camera</li>
<li>BMI</li>
<li>Cool Weather</li>
</ul>
</li>
<li><p>Basic Concept</p>
<ul>
<li><p>Permission</p>
<ul>
<li>Manifest</li>
<li>Run Permission</li>
</ul>
</li>
<li><p>Activity</p>
<ul>
<li>standard</li>
<li>singleTop</li>
<li>singleTask</li>
<li>singleInstance</li>
</ul>
</li>
<li><p>Intent</p>
<ul>
<li>obvious</li>
<li>intent-filter</li>
<li>getExtra/putExtra</li>
<li>startActivityForResult</li>
<li>Serializable</li>
<li>Parcelable</li>
</ul>
</li>
<li><p>Broadcast</p>
<ul>
<li>static</li>
<li>dynamic</li>
<li>local</li>
<li>standard</li>
<li>order</li>
</ul>
</li>
<li><p>Service</p>
<ul>
<li>Binder</li>
<li>ServiceConnection</li>
<li>bindService/UnbindService</li>
<li>Foreground</li>
<li>IntentService</li>
</ul>
</li>
<li><p>Alarm</p>
</li>
<li><p>Doze</p>
</li>
<li><p>Content Provider</p>
</li>
<li><p>UI</p>
<ul>
<li><p>Layout</p>
<ul>
<li>Linear</li>
<li>Relative</li>
<li>Frame</li>
<li>PercentFrame</li>
<li>Constraint</li>
</ul>
</li>
<li><p>Toast</p>
</li>
<li>Notification</li>
<li><p><a href="https://github.com/zhaozepeng/FloatWindowPermission" target="_blank" rel="external">FloatWindow</a></p>
</li>
<li><p>Menu</p>
</li>
<li>TextView</li>
<li>Button</li>
<li>EditText</li>
<li>ImageView</li>
<li>ProgressBar</li>
<li>AlertDialog</li>
<li>ProgressDialog</li>
<li>ListView</li>
<li>RecyclerView</li>
<li>Custom Control</li>
<li>Fragment</li>
<li><p>MulitiWindow</p>
</li>
<li><p>Material Design</p>
<ul>
<li>Toolbar</li>
<li>DrawerLayout</li>
<li>NavigationView</li>
<li>FloatingActionButton</li>
<li>Snackbar</li>
<li>CoordinatorLayout</li>
<li>CardView</li>
<li>AppBarLayout</li>
<li>CollapsingToolbarLayout</li>
</ul>
</li>
<li><p>Nine-Patch</p>
</li>
</ul>
</li>
<li><p>Data Persistence</p>
<ul>
<li>File IO</li>
<li>SharedPreferences</li>
<li><p>SQLite DataBase</p>
<ul>
<li>Create</li>
<li>Retrieve</li>
<li>Update</li>
<li>Delete</li>
<li>Add</li>
</ul>
</li>
<li><p>LitePal</p>
</li>
</ul>
</li>
<li><p>MultiMedia</p>
<ul>
<li>Picture</li>
<li>Gif</li>
<li>Music</li>
<li>Video</li>
</ul>
</li>
<li><p>LBS</p>
</li>
<li><p>Network</p>
<ul>
<li>WebView</li>
<li>HttpURLConnection</li>
<li>OkHttp</li>
<li>XML<ul>
<li>Pull</li>
<li>SAX</li>
</ul>
</li>
<li>JSON</li>
<li><p>GSON</p>
</li>
<li><p>MultiThread</p>
<ul>
<li>Thread</li>
<li>Runnable</li>
<li>AsyncTask</li>
<li>Handler</li>
<li>Message</li>
<li>runOnUiThread</li>
<li>ViewPost</li>
<li>HandlerPost</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol>
<li><p>The 3rd Lib</p>
<ul>
<li>LitePal</li>
<li>Glide</li>
<li>Gson</li>
<li>CircleImageView</li>
<li>Jsoup</li>
<li>Picasso</li>
<li>Android Gif Drawable</li>
<li>Custom Activityon Crash</li>
<li>Stetho</li>
<li>Fast Android Networking</li>
<li>Qiniu Android Sdk</li>
<li>Debug Db</li>
<li>LeakCanary</li>
</ul>
</li>
<li><p>Best Practice</p>
<blockquote>
<p>Coding, Coding, Coding</p>
</blockquote>
</li>
</ol>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><blockquote>
<p>Base the open source and don’t reinvent the same  wheel.</p>
</blockquote>
<ol>
<li><p>Design Pattern</p>
<ul>
<li>Adapter</li>
<li>Mediator</li>
<li>State</li>
<li>Singleton</li>
<li>Simple Factory</li>
<li>Factory</li>
<li>Abstract Factory</li>
<li>Strategy</li>
<li>Facade</li>
<li>Template</li>
<li>Composite</li>
</ul>
</li>
<li><p>Basic Concept</p>
<ul>
<li>Object</li>
<li>Operators</li>
<li>Control</li>
<li>Initialization</li>
<li>Access</li>
<li>Net</li>
<li>Reusing</li>
<li>Polymorphism</li>
<li>Interface</li>
<li>Inner Class</li>
<li>Holding</li>
<li>Exception</li>
<li>String</li>
<li>Type Info</li>
<li>Generic</li>
<li>Array</li>
<li>Container</li>
<li>IO</li>
<li>XML</li>
<li>Enumerated</li>
<li>Annotations</li>
<li>Concurrency</li>
<li>GUI</li>
<li>Frogbean</li>
<li>Bangbean</li>
<li>SWT</li>
</ul>
</li>
</ol>
<ol>
<li><p>IO</p>
</li>
<li><p>Network</p>
</li>
<li><p>DataBase</p>
</li>
<li><p>MultiProcess/MultiThread</p>
</li>
<li><p>Data Type</p>
</li>
</ol>
<h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><p>The first promgram language in my colleague.</p>
<ol>
<li>Basic Concept<ul>
<li>Data Type</li>
<li>Operator</li>
<li>Control</li>
</ul>
</li>
</ol>
<h4 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h4><p>The future platform in AI era.</p>
<ol>
<li>Basic Concept<ul>
<li>Data Type</li>
<li>Operator<br>+</li>
</ul>
</li>
<li>Application<br> +</li>
</ol>
<h3 id="Patent"><a href="#Patent" class="headerlink" title="Patent"></a>Patent</h3><ol>
<li><p>Basic Concept</p>
<ul>
<li>Patent</li>
<li>Type</li>
<li>Process</li>
</ul>
</li>
<li><p>Innovation</p>
<ul>
<li>Parallel thinking</li>
<li>Six Thinking hats</li>
</ul>
</li>
</ol>
<h2 id="Wealth"><a href="#Wealth" class="headerlink" title="Wealth"></a>Wealth</h2><h3 id="Investment"><a href="#Investment" class="headerlink" title="Investment"></a>Investment</h3><h4 id="Business"><a href="#Business" class="headerlink" title="Business"></a>Business</h4><ol>
<li>Semi Conductor</li>
<li>M-ICT</li>
<li>AI</li>
</ol>
<h4 id="Company"><a href="#Company" class="headerlink" title="Company"></a>Company</h4><ol>
<li>MeiTu</li>
<li>SMIC</li>
</ol>
<h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><table>
<thead>
<tr>
<th>no.</th>
<th>Date</th>
<th>Price</th>
<th>Company</th>
<th>Strategy</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>03.22</td>
<td>10.12</td>
<td>SMIC</td>
<td>Bottom &amp; Government Strategy</td>
</tr>
<tr>
<td>2</td>
<td>03.22</td>
<td>10.08</td>
<td>SMIC</td>
<td>Bottom &amp; Government Strategy</td>
</tr>
<tr>
<td>3</td>
<td>03.22</td>
<td>10.06</td>
<td>SMIC</td>
<td>Bottom &amp; Government Strategy</td>
</tr>
<tr>
<td>4</td>
<td>03.22</td>
<td>10.00</td>
<td>SMIC</td>
<td>Bottom &amp; Government Strategy</td>
</tr>
<tr>
<td>5</td>
<td>03.29</td>
<td>09.96</td>
<td>SMIC</td>
<td>Bottom &amp; Government Strategy</td>
</tr>
<tr>
<td>6</td>
<td>03.29</td>
<td>12.88</td>
<td>MeiTu</td>
<td>AI Future &amp; Wensheng Cai &amp; Kaifu Lee</td>
</tr>
</tbody>
</table>
<h4 id="Capital"><a href="#Capital" class="headerlink" title="Capital"></a>Capital</h4><ol>
<li>Money</li>
<li>Time</li>
<li>Wisdom<ul>
<li>Self-growing</li>
<li>Patience</li>
<li>Wisdom of choose.</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omj173lhw.bkt.clouddn.com/20170322_165448.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deliberate&lt;/strong&gt; practice makes perfect.&lt;br&gt;&lt;strong&gt;Using&lt;/strong&gt; is the best way of learning.&lt;br&gt;&lt;strong&gt;Insisting&lt;/strong&gt; is the most important habits for growing up.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Action speaks louder than word.&lt;br&gt;Codes can talk, and talk by codes.&lt;br&gt;Growing up little by little and day by day.&lt;br&gt;Do what you love ,and love what you do.&lt;br&gt;A thousand miles starts with a single step.&lt;br&gt;Accumulation is powerful.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Knowledge Framework" scheme="http://ipcreator.me/tags/Knowledge-Framework/"/>
    
      <category term="Skill Graph" scheme="http://ipcreator.me/tags/Skill-Graph/"/>
    
  </entry>
  
  <entry>
    <title>Thanks to...</title>
    <link href="http://ipcreator.me/2017/03/26/MyView/special-thanks/"/>
    <id>http://ipcreator.me/2017/03/26/MyView/special-thanks/</id>
    <published>2017-03-26T15:00:00.000Z</published>
    <updated>2017-03-27T09:48:11.163Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://okkntqe2h.bkt.clouddn.com/thanks.png" alt=""></p>
<p>Standing on Shoulders of Giants</p>
<p>站在巨人的肩上，才有可能在有限的时间里取得最大的成绩…</p>
<p>发现趋势，追随趋势，顺势而安、乘势而起、造势而雄，不做旁观者，要成弄潮儿<br>如果进入了痛苦的高原期，请记住：付出与收获成正比，成功之路本身就不轻松，与戴皇冠必承其重，<br>此时，你需要坚信自己的判断和选择，坚持、坚持再坚持，基于量变到质变的法则，<br>一般都会“踏破铁鞋无觅处，得来全不费工夫”，届时，”待到山花烂漫时，君在丛中笑”。</p>
 <a id="more"></a>
<p> 学之者不如好之者，好之者不如乐之者，兴趣是最好的老师<br> 化整为零，先易后难，循序渐进，各个击破，坚持是成功的密码，自胜者强</p>
<p> 若贪多求快，则欲速不达<br> 若聚焦极致，则迎刃而解</p>
<p> 别急，慢慢来，一切都来得及<br> 架构思考、动手实践、检索分析、复盘总结、循环递进</p>
<p> 保持节奏感、创造成就感</p>
<h2 id="Best-Practice"><a href="#Best-Practice" class="headerlink" title="Best Practice"></a>Best Practice</h2><h3 id="The-first-line-code-2rd"><a href="#The-first-line-code-2rd" class="headerlink" title="The first line code(2rd)"></a>The first line code(2rd)</h3><h3 id="Fast-Android-network"><a href="#Fast-Android-network" class="headerlink" title="Fast Android network"></a>Fast Android network</h3><h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><h3 id="Git-amp-Github"><a href="#Git-amp-Github" class="headerlink" title="Git &amp; Github"></a>Git &amp; Github</h3><h3 id="Design-Pattern"><a href="#Design-Pattern" class="headerlink" title="Design Pattern"></a>Design Pattern</h3><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p><img src="http://okkntqe2h.bkt.clouddn.com/nougat_bg.jpg" alt=""><br><a href="https://developer.android.com/index.html" target="_blank" rel="external">Android</a>——See what’s new with Android - from phones to watches and more.<br><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">郭霖的专栏</a>——每当你在感叹，如果有这样一个东西就好了的时候，请注意，其实这是你的机会<br><a href="http://blog.csdn.net/luoshengyang" target="_blank" rel="external">老罗的Android之旅</a>——爱生活，爱Android<br><a href="http://hukai.me/" target="_blank" rel="external">胡凯</a><br><a href="http://blog.csdn.net/eclipsexys" target="_blank" rel="external">eclipse_xu</a><br><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">Android官方培训课程中文版(v0.9.7)</a><br><a href="http://blog.csdn.net/aqi00/article/details/50012511" target="_blank" rel="external">湖前琴亭</a>——好好做技术，认真写博文<br><a href="https://book.douban.com/subject/26855851/" target="_blank" rel="external">Android群英传</a>——神兵利器<br><a href="https://book.douban.com/subject/26644935/" target="_blank" rel="external">Android源码设计模式解析与实战</a><br><a href="https://book.douban.com/subject/26915433/" target="_blank" rel="external">第一行代码：Android（第2版）</a><br><a href="https://book.douban.com/subject/19986441/" target="_blank" rel="external">Android系统源代码情景分析</a><br><a href="https://github.com/ipcreator/Android-Learning-Resources" target="_blank" rel="external">Android学习资源网站大全</a><br><a href="https://github.com/ipcreator/android_design_patterns_analysis" target="_blank" rel="external">Android源码设计模式分析开源项目</a><br><a href="http://www.runoob.com/w3cnote/android-tutorial-contents.html" target="_blank" rel="external">2015年最新Android基础入门教程</a></p>
<h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><img src="https://camo.githubusercontent.com/ee91ac3c9f5ad840ebf70b54284498fe0e6ddb92/68747470733a2f2f7777772e74656e736f72666c6f772e6f72672f696d616765732f74665f6c6f676f5f7472616e73702e706e67" alt=""><br><a href="https://www.tensorflow.org/" target="_blank" rel="external">TensorFlow</a>——An open-source software library for Machine Intelligence<br><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="external">tensorflow</a><br><a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples" target="_blank" rel="external">tensorflow examples</a><br><a href="https://github.com/miyosuda/TensorFlowAndroidDemo" target="_blank" rel="external">TensorFlowAndroidDemo</a><br><a href="https://github.com/miyosuda/TensorFlowAndroidMNIST" target="_blank" rel="external">TensorFlowAndroidMNIST</a><br><a href="http://wiki.jikexueyuan.com/project/tensorflow-zh/" target="_blank" rel="external">TensorFlow 官方文档中文版</a><br><a href="https://github.com/tobegit3hub/deep_recommend_system" target="_blank" rel="external">deep_recommend_system</a><br><a href="https://github.com/FishermanZzhang/ID-Card_with_TensorFlow_Opencv_in_Android" target="_blank" rel="external">ID-Card_with_TensorFlow_Opencv_in_Android</a><br><a href="https://github.com/natanielruiz/android-yolo" target="_blank" rel="external">android-yolo</a>——Real-time object detection on Android using the YOLO network with TensorFlow<br><a href="https://github.com/dongchangzhang/NewFeelings" target="_blank" rel="external">NewFeelings</a>——Android平台相册应用，使用Google开源机器学习框架tensorflow处理图片以提供更好的图片浏览体验<br><a href="https://github.com/aerdy/Android-Tensorflow-Sample" target="_blank" rel="external">TensorFlow Android Camera Demo</a><br><a href="https://book.douban.com/subject/26708119/" target="_blank" rel="external">机器学习</a><br><a href="https://book.douban.com/subject/26838557/" target="_blank" rel="external">智能时代</a>——大数据与智能革命重新定义未来<br><a href="https://book.douban.com/subject/10750155/" target="_blank" rel="external">数学之美</a><br><a href="https://book.douban.com/subject/19949020/" target="_blank" rel="external">程序员的数学</a>——编程的基础是计算机科学，而计算机科学的基础是数学。<br><a href="https://book.douban.com/subject/26593822/" target="_blank" rel="external">程序员的数学 2概率统计</a><br><a href="https://book.douban.com/subject/26740548/" target="_blank" rel="external">程序员的数学 3线性代数</a></p>
<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><p><img src="http://okkntqe2h.bkt.clouddn.com/github-logo.jpg" alt=""><br><a href="https://github.com/" target="_blank" rel="external">Github</a><br><a href="https://coding.net/" target="_blank" rel="external">Coding</a><br><a href="http://stackoverflow.com/" target="_blank" rel="external">Stack Overflow</a><br><a href="http://www.qiniu.com/pricing" target="_blank" rel="external">七牛</a><br><a href="http://www.google.com/ncr" target="_blank" rel="external">Google</a><br><a href="http://zhibimo.com/read/xiaolai/everyone-can-use-english/" target="_blank" rel="external">English</a><br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a><br><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python教程</a><br><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">hexo-theme-yilia</a><br><a href="https://atom.io/" target="_blank" rel="external">atom</a>——A hackable text editor for the 21st Century<br><a href="https://book.douban.com/subject/10794788/" target="_blank" rel="external">鸟哥的Linux私房菜（第三版）</a><br><a href="https://book.douban.com/subject/5333562/" target="_blank" rel="external">深入理解计算机系统</a><br><a href="大话数据结构"></a><br><a href="大话设计模式"></a><br><a href="https://book.douban.com/subject/26829016/" target="_blank" rel="external">Python编程：从入门到实践</a><br><a href="https://book.douban.com/subject/25708312/" target="_blank" rel="external">C++ Primer 中文版（第 5 版）</a><br><a href="https://book.douban.com/subject/2130190/" target="_blank" rel="external">Java编程思想 （第4版）</a><br><a href="https://book.douban.com/subject/1139336/" target="_blank" rel="external">C程序设计语言</a><br><a href="https://github.com/ipcreator/free-programming-books-zh_CN" target="_blank" rel="external">免费的编程中文书籍索引</a></p>
<h2 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h2><p><a href="http://stormzhang.com/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">ANDROID学习之路</a><br><a href="https://zhuanlan.zhihu.com/p/19959253?columnSlug=xiao-jing-mo" target="_blank" rel="external">编程入门指南 v1.5</a></p>
<h2 id="Open-Source"><a href="#Open-Source" class="headerlink" title="Open Source"></a>Open Source</h2><p><img src="http://okkntqe2h.bkt.clouddn.com/Example1.gif" alt=""><br><a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">lottie-android</a><br><a href="https://github.com/zhongyao/Android-Universal-Image-Loader" target="_blank" rel="external">Android-Universal-Image-Loader</a><br><a href="https://github.com/koral--/android-gif-drawable" target="_blank" rel="external">android-gif-drawable</a><br><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome-android-ui</a><br><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">android-open-project</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://okkntqe2h.bkt.clouddn.com/thanks.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Standing on Shoulders of Giants&lt;/p&gt;
&lt;p&gt;站在巨人的肩上，才有可能在有限的时间里取得最大的成绩…&lt;/p&gt;
&lt;p&gt;发现趋势，追随趋势，顺势而安、乘势而起、造势而雄，不做旁观者，要成弄潮儿&lt;br&gt;如果进入了痛苦的高原期，请记住：付出与收获成正比，成功之路本身就不轻松，与戴皇冠必承其重，&lt;br&gt;此时，你需要坚信自己的判断和选择，坚持、坚持再坚持，基于量变到质变的法则，&lt;br&gt;一般都会“踏破铁鞋无觅处，得来全不费工夫”，届时，”待到山花烂漫时，君在丛中笑”。&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Implement of Upload Files to QiNiu Server</title>
    <link href="http://ipcreator.me/2017/03/26/Program/Android/MyApp/qi-niu-upload/"/>
    <id>http://ipcreator.me/2017/03/26/Program/Android/MyApp/qi-niu-upload/</id>
    <published>2017-03-26T08:10:06.000Z</published>
    <updated>2017-04-10T13:38:38.643Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/2017-03-26_173401.jpg" alt=""></p>
<blockquote>
<p>Understand the concept,  read the official documents carefully, based on common sense thinking, combined with the reference sample, keep on  deliberate practice.</p>
</blockquote>
 <a id="more"></a>
<h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h2><p>功能要求：使用第三方开源库Fast-Android-Networking实现从七牛服务器快速下载和上传文件；<br>应用场景：快速完成/取消文件下载/上传，支持回调以更新进度等相关UI。</p>
<h2 id="设计及实现"><a href="#设计及实现" class="headerlink" title="设计及实现"></a>设计及实现</h2><h3 id="Fast-Android-Networking第三方库"><a href="#Fast-Android-Networking第三方库" class="headerlink" title="Fast-Android-Networking第三方库"></a>Fast-Android-Networking第三方库</h3><p><a href="/2017/03/25/Program/Android/fast-android-networking/">Fast-Android-Networking</a></p>
<h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><p><strong>下载</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">String realDownFileURL = auth.privateDownloadUrl(QINIU_DOWNLOAD_PRIVATE_TEST_FILE);</div><div class="line"></div><div class="line">                AndroidNetworking.download(realDownFileURL,//&quot;http://om845dfwl.bkt.clouddn.com/smile.mp3&quot;</div><div class="line">                        Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath(),</div><div class="line">                        &quot;fast android network test.jpg&quot;)</div><div class="line">                        .setTag(&quot;downloadTest&quot;)</div><div class="line">                        .setPriority(Priority.MEDIUM)</div><div class="line">                        .build()</div><div class="line">                        .setDownloadProgressListener(new DownloadProgressListener() &#123;</div><div class="line">                            @Override</div><div class="line">                            public void onProgress(long bytesDownloaded, long totalBytes) &#123;</div><div class="line">                                // do anything with progress</div><div class="line">                                int progress = (int)(bytesDownloaded/totalBytes);</div><div class="line">                                progressBar.setProgress(progress);</div><div class="line"></div><div class="line">                                notificationManager.notify(NOTIFICATION_ID_DOWNLOAD,getNotification(&quot;Downloading...&quot;,</div><div class="line">                                        &quot;fast android network test.jpg&quot;,progress));</div><div class="line">                            &#125;</div><div class="line">                        &#125;)</div><div class="line">                        .startDownload(new DownloadListener() &#123;</div><div class="line">                            @Override</div><div class="line">                            public void onDownloadComplete() &#123;</div><div class="line">                                // do anything after completion</div><div class="line">                                notificationManager.notify(NOTIFICATION_ID_DOWNLOAD,</div><div class="line">                                        getNotification(&quot;Download Success&quot;,&quot;fast android network test.jpg&quot;, 0));</div><div class="line">                                progressBar.setProgress(100);</div><div class="line">                            &#125;</div><div class="line">                            @Override</div><div class="line">                            public void onError(ANError error) &#123;</div><div class="line">                                // handle error</div><div class="line">                                notificationManager.notify(NOTIFICATION_ID_DOWNLOAD,</div><div class="line">                                        getNotification(&quot;Download Failed&quot;,&quot;fast android network test.jpg&quot;, -1));</div><div class="line">                                progressBar.setProgress(0);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div></pre></td></tr></table></figure></p>
<p><strong>上传</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String uploadPath =Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath()+&quot;/smile.mp3&quot;;</div><div class="line"></div><div class="line">File uploadFile=new File(uploadPath);</div><div class="line"></div><div class="line">QiNiuAuth auth =  create(ACCESS_KEY, SECRET_KEY);</div><div class="line"></div><div class="line">String token = auth.uploadToken(BUCKET);</div><div class="line"></div><div class="line">AndroidNetworking.upload(QI_NIU_UPLOAD_URL)//&quot;http://upload.qiniu.com/&quot;</div><div class="line">                        .addMultipartFile(&quot;file&quot;,uploadFile)</div><div class="line">                        .addMultipartParameter(&quot;token&quot;,token)</div><div class="line">                        .addMultipartParameter(&quot;key&quot;,&quot;2017/3/26/smile.mp3&quot;)</div><div class="line">                        .setTag(&quot;uploadTest&quot;)</div><div class="line">                        .setPriority(Priority.HIGH)</div><div class="line">                        .build()</div><div class="line">                        .setUploadProgressListener(new UploadProgressListener() &#123;</div><div class="line">                            @Override</div><div class="line">                            public void onProgress(long bytesUploaded, long totalBytes) &#123;</div><div class="line">                                // do anything with progress</div><div class="line">                                long lTotalBytes = uploadFile.length();</div><div class="line">                                int progress = (int)((bytesUploaded*100)/lTotalBytes);</div><div class="line">                                progressBar.setProgress(progress);</div><div class="line">                                notificationManager.notify(NOTIFICATION_ID_DOWNLOAD,</div><div class="line">                                        getNotification(&quot;Uploading...&quot;,&quot;smile.mp3&quot;,progress));</div><div class="line">                            &#125;</div><div class="line">                        &#125;)</div><div class="line">                        .getAsJSONObject(new JSONObjectRequestListener() &#123;</div><div class="line">                            @Override</div><div class="line">                            public void onResponse(JSONObject response) &#123;</div><div class="line">                                // do anything with response</div><div class="line">                                textView.setText(response.toString());</div><div class="line">                            &#125;</div><div class="line">                            @Override</div><div class="line">                            public void onError(ANError error) &#123;</div><div class="line">                                // handle error</div><div class="line">                                notificationManager.notify(NOTIFICATION_ID_DOWNLOAD,</div><div class="line">                                        getNotification(&quot;Upload Failed&quot;,&quot;smile.mp3&quot;, -1));</div><div class="line">                                progressBar.setProgress(0);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="七牛存储基本概念"><a href="#七牛存储基本概念" class="headerlink" title="七牛存储基本概念"></a><a href="https://developer.qiniu.com/kodo/manual/concepts" target="_blank" rel="external">七牛存储基本概念</a></h3><h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><p>资源是七牛云存储服务中的逻辑存储单元。对于每一个账号，该账号里存放的每个资源都有唯一的 空间 与 键(Key) 标识。资源键名是一个字符串，例如：level1/level2/example1.jpg，它可以包含任意字符（包括 UTF-8 编码形式的 Unicode 字符）。</p>
<p>使用者可以在上传资源时为其指定一个方便管理的键名，通过前缀来达到类似于文件目录的分类和层次效果。例如对于一个网站的资源，我们可以用如下键名命名资源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">index.html</div><div class="line">features/index.html</div><div class="line">imgs/features/feature1.png</div><div class="line">about.html</div></pre></td></tr></table></figure></p>
<h4 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h4><p>空间是资源的组织管理单位，一个资源必然位于某个空间中。可以为每个空间设置一系列的属性，以对资源提供合理的管理动作。 常见的属性有：</p>
<ol>
<li>将空间设置为公开或私有，以控制对空间内资源的访问权限。</li>
<li>设置资源的数据处理样式，以便于用简短方式对资源进行处理。</li>
</ol>
<h4 id="开发者和用户"><a href="#开发者和用户" class="headerlink" title="开发者和用户"></a>开发者和用户</h4><p>开发者是七牛云存储服务的直接使用者，用户是开发者所推出产品的使用者即七牛云存储服务的间接使用者。<br><img src="https://ok0kc3ycj.qnssl.com/kodo-image/png/usecase.png" alt=""></p>
<h4 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h4><p>键值对 (Key-Value) 是一个常用的数据结构概念，通常又称为字典 (Dictionary) 或映射 (Map)。每个存放到该数据结构中的值 (Value) 都对应一个全局唯一的键 (Key)。该数据结构的特征是以空间换时间，通过键查询值通常是比较快速的过程。</p>
<h4 id="存储区域"><a href="#存储区域" class="headerlink" title="存储区域"></a>存储区域</h4><p>存储区域是在创建空间时指定的，一旦指定后就不允许修改。存储区域表示七牛云对象存储服务的数据中心所在区域，物理位置。您可以根据费用、请求来源等综合考虑选择合适的存储区域。一般来说，选择离您近的存储区域访问速度更快。</p>
<p>存储区域是数个存储机房的逻辑联合体，提供一组独立的具体访问域名，将流量导向最适合的存储机房。</p>
<p>七牛云对象存储目前提供四个存储区域：华东、华北、华南、北美，您可以根据实际需求选用，以获取最高访问性能和最佳用户体验。</p>
<p>注意：不同存储区域的数据并非互为备份副本，比如存储在华东的文件，不能通过华北访问域名访问。</p>
<h4 id="访问密钥-AK-SK"><a href="#访问密钥-AK-SK" class="headerlink" title="访问密钥 (AK/SK)"></a>访问密钥 (AK/SK)</h4><p>Access Key 与 Secret Key 是七牛颁发的一对密钥，用于对操作请求进行授权签名。</p>
<ol>
<li>用户凭证 (Access Key) 简称 AK ，是七牛云存储颁发给用户的标识。用户将用户凭证放入访问请求，以便七牛云存储识别访问者的身份。</li>
<li>签名密钥 (Secret Key) 简称 SK ，是七牛云存储颁发给用户，用于对访问请求签名的字串。用户使用签名密钥对访问请求的核心要素进行签名，获得请求认证 令牌。用户将令牌随同访问请求一起发送至七牛云存储服务，七牛云存储将对令牌进行校验，以确认用户请求的合法性。<br>用户凭证和签名密钥成对颁发，不会重复。一个用户可以拥有两对用户凭证和签名密钥，用于不同的访问。</li>
</ol>
<h4 id="存储机房"><a href="#存储机房" class="headerlink" title="存储机房"></a>存储机房</h4><p>存储机房是部署了一套完整的七牛云存储集群的单一数据中心机房，每个机房均配备多个 IP 作为上传和下载入口，并有对应的访问域名指向这些 IP。</p>
<h4 id="编程模型"><a href="#编程模型" class="headerlink" title="编程模型"></a><a href="https://developer.qiniu.com/kodo/manual/programming-model" target="_blank" rel="external">编程模型</a></h4><p><img src="https://odum9helk.qnssl.com/FuAHhZgiYaHTDqLritFe1K85AVrI" alt=""></p>
<p>七牛云存储服务是以<a href="https://developer.qiniu.com/kodo/manual/concepts#key-value" target="_blank" rel="external">键值对</a>方式提供非结构化资源存储服务。向业务服务器提供资源管理服务，向客户端提供资源上传和下载服务。</p>
<p>关键的几个交互过程：</p>
<p><strong>上传</strong></p>
<p>客户端在上传资源到七牛云存储之前要先从业务服务器获取一个有效的<a href="https://developer.qiniu.com/kodo/manual/upload-token" target="_blank" rel="external">上传凭证</a>，因此需要先后和两个服务端打交道。<br><img src="https://odum9helk.qnssl.com/Fmy1Y_s9I4oCPYuMGDrvYxCRv2FM" alt=""></p>
<p>如果有设置回调，则上传完成时七牛云存储会自动发起回调到指定的业务服务器。<br><img src="https://odum9helk.qnssl.com/FkPZ31ECmtGnEisOahMKc5kQkuRr" alt=""></p>
<p><strong>下载</strong></p>
<p>公开资源不需要对应的下载凭证，客户端可以直接从七牛云存储下载对应资源。私有资源需要对应的下载凭证，因此必须先和业务服务器打交道。</p>
<p>按照实际的使用场景，客户端对于内容的展示非常类似一个动态网页的生成过程，因此无论该页面内容是公开还是私有，均需要从业务服务器获取展示该页面的动态布局信息。所以通常显示过程也是需要先后和业务服务器及七牛云存储服务打交道。</p>
<h4 id="关键原则"><a href="#关键原则" class="headerlink" title="关键原则"></a>关键原则</h4><p>这个模型的关键点如下：</p>
<ol>
<li>整个架构中需要一个业务服务器组件。</li>
<li>无论如何，访问密钥（AK/SK）均不得包含在客户端的分发包中（如二进制代码、配置文件或网页中）。</li>
<li>SecretKey不得在任何场景中的公网上传输，更不得传输到客户端。</li>
<li>业务服务器端应维持一个用于管理资源元数据的数据库和一个用于管理最终用户账号信息的数据库。</li>
<li>原则上客户端和七牛云存储之间的交互只有上传和下载，不应使用任何其他的API。</li>
</ol>
<h4 id="安全机制"><a href="#安全机制" class="headerlink" title="安全机制"></a>安全机制</h4><p>数据安全性是云存储服务的重中之重。云存储的安全机制主要需要考虑以下几个因素：</p>
<p>如何判断该请求方是否合法，且对目标空间有相应的访问权限。<br>因为服务的访问协议同时支持 HTTP 和 HTTPS，服务端需要判断收到的请求是否经过篡改。<br>相比上传新资源，覆盖文件或删除已有资源拥有更高的风险。因此对上传或修改动作，需要确认请求方是否拥有修改或删除的权限。<br>在使用七牛云存储服务的过程中，需要考虑安全机制的场景主要有如下几种：</p>
<p>上传资源<br>访问资源<br>管理和修改资源<br>这三个场景需要考虑不同的安全因素，因此七牛针对性的提供了三种安全机制：<a href="https://developer.qiniu.com/kodo/manual/upload-token" target="_blank" rel="external">上传凭证</a>、<a href="https://developer.qiniu.com/kodo/manual/download-token" target="_blank" rel="external">下载凭证</a>和<a href="https://developer.qiniu.com/kodo/manual/access-token" target="_blank" rel="external">管理凭证</a>。</p>
<p>因为凭证的生成需要用到SecretKey，因此该生成动作不应在不受信任的环境中进行。需要注意的是，开发者绝不能将密钥包含在分发给最终用户的程序中，无论是包含在配置文件中还是二进制文件中都会带来非常大的密钥泄漏风险。</p>
<p>推荐的模型如下所示：<br><img src="https://ok0kc3ycj.qnssl.com/kodo-image/png/token.png" alt=""></p>
<p><strong>上传凭证（UploadToken）</strong><br>客户端上传前需要先获取从服务端颁发的上传凭证，并在上传资源时将上传凭证包含为请求内容的一部分。不带凭证或带非法凭证的请求将返回 HTTP 错误码 401，代表认证失败。</p>
<p>生成上传凭证时需要指定以下要素：</p>
<p><strong>权限</strong>，指定上传的目标空间或允许覆盖的指定资源。<br><strong>凭证有效期</strong>，即一个符合Unix时间戳规范的数值，单位为秒。<br>注意： 因为时间戳的创建和验证在不同的服务端进行（在业务服务器创建，在云存储服务器验证），因此开发者的业务服务器需要尽可能校准时间，否则可能出现凭证刚创建就过期等各种奇怪的问题。<br>可选择设置的最终用户标识 ID。这是为了让业务服务器在收到结果回调时能够识别产生该请求的最终用户信息。</p>
<p>我们使用<a href="https://developer.qiniu.com/kodo/manual/put-policy" target="_blank" rel="external">上传策略 (PutPolicy)</a>保存和传递这些设置。关于上传策略和上传凭证的生成细节，请查阅上传凭证。</p>
<p><strong>下载凭证（DownloadToken）</strong><br>下载私有资源的请求需要带一个合法的下载凭证。不带凭证或带非法凭证的请求将返回 HTTP 错误码 401，代表认证失败。</p>
<p>与上传凭证相比，下载凭证的作用比较简单：</p>
<p>保证请求发起者拥有对目标空间的访问权限。<br>保证服务端收到的下载请求内容未经中途篡改，具体包括目标资源的 URI 和该访问请求的有效期信息均应未受到篡改。<br>关于下载凭证的生成细节，请查阅下载凭证。</p>
<p><strong>防盗链</strong><br>下载还有一种常见的场景，即公开资源的防盗链，例如禁止特定来源域名的访问，禁止非浏览器发起的访问等。</p>
<p>我们可以通过 HTTP 协议支持的 Referer 机制即<a href="https://developer.qiniu.com/kodo/glossary/h" target="_blank" rel="external">HTTP Referer</a>来进行相应的来源识别和管理。</p>
<p>防盗链是一个系统设置，不影响开发工作。如发现有盗链情况，开发者可在七牛开发者平台里的 融合CDN加速 中的 高级配置 进行设置。</p>
<p><strong>管理凭证（AccessToken）</strong></p>
<p>在管理现有资源时，例如查看资源元数据、删除或移动资源等，通常需要带一个合法的管理凭证。不带凭证或带非法凭证的管理请求将返回 HTTP 错误码 401，代表认证失败。</p>
<p>管理凭证的作用与下载凭证比较类似：</p>
<p>保证请求发起者拥有对目标空间的管理权限。<br>保证服务端收到的管理请求内容未经中途篡改，具体包括代表管理动作的 URI 和该管理动作的参数信息均应未受到篡改。<br>关于管理凭证的生成细节，请查阅管理凭证。</p>
<p><strong>跨域访问</strong><br>出于安全的考虑，Web 浏览器从很早之前就定下同域安全策略的标准，默认情况下同一域名下的页面只能向同域（包括 CNAME 域名、端口）下的 URL 发送所有类型的 HTTP 请求。而向不同域的地址发送非 GET 请求时，默认情况下只能返回同域安全策略错误。</p>
<p>对此，在发起上传或下载请求的时候，七牛的服务会返回相应的支持跨域的 Header：</p>
<p>上传(upload.qiniu.com)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Headers: X-File-Name, X-File-Type, X-File-Size</div><div class="line">Access-Control-Allow-Methods: OPTIONS, HEAD, POST</div><div class="line">Access-Control-Allow-Origin: *</div></pre></td></tr></table></figure></p>
<p>下载(<bucket>.qiniudn.com)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: *</div></pre></td></tr></table></figure></bucket></p>
<h4 id="上传凭证Token在线生成"><a href="#上传凭证Token在线生成" class="headerlink" title="上传凭证Token在线生成"></a>上传凭证Token在线生成</h4><p><a href="http://jsfiddle.net/gh/get/extjs/4.2/icattlecoder/jsfiddle/tree/master/uptoken" target="_blank" rel="external">Token</a></p>
<p><strong>算法</strong></p>
<p>1.构造上传策略：<br>用户根据业务需求，确定上传策略要素，构造出具体的上传策略。例如用户要向空间 my-bucket 上传一个名为 sunflower.jpg 的图片，授权有效期截止到 2015-12-31 00:00:00（该有效期指上传完成后在七牛生成文件的时间，而非上传的开始时间），并且希望得到图片的名称、大小、宽高和校验值。那么相应的上传策略各字段分别为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">scope = &apos;my-bucket:sunflower.jpg&apos;</div><div class="line">deadline = 1451491200</div><div class="line">returnBody = &apos;&#123;</div><div class="line">      &quot;name&quot;: $(fname),</div><div class="line">      &quot;size&quot;: $(fsize),</div><div class="line">      &quot;w&quot;: $(imageInfo.width),</div><div class="line">      &quot;h&quot;: $(imageInfo.height),</div><div class="line">      &quot;hash&quot;: $(etag)</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure></p>
<p>2.将上传策略序列化成为JSON：</p>
<p>用户可以使用各种语言的 JSON 库，也可以手工拼接字符串。序列化后，应得到如下形式的字符串（字符串值以外部分不含空格或换行）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">putPolicy =</div><div class="line">&apos;&#123;</div><div class="line">  &quot;scope&quot;: &quot;my-bucket:sunflower.jpg&quot;,</div><div class="line">  &quot;deadline&quot;:1451491200,</div><div class="line">  &quot;returnBody&quot;:</div><div class="line">  &quot;&#123;</div><div class="line">    \&quot;name\&quot;:$(fname),</div><div class="line">    \&quot;size\&quot;:$(fsize),</div><div class="line">    \&quot;w\&quot;:$(imageInfo.width),</div><div class="line">    \&quot;h\&quot;:$(imageInfo.height),</div><div class="line">    \&quot;hash\&quot;:$(etag)</div><div class="line">   &#125;&quot;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure></p>
<p>3.对 JSON 编码的上传策略进行URL 安全的 Base64 编码，得到待签名字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">encodedPutPolicy = urlsafe_base64_encode(putPolicy)</div><div class="line"></div><div class="line">#实际值为：</div><div class="line">encodedPutPolicy = &quot;eyJzY29wZSI6Im15LWJ1Y2tldDpzdW5mbG93ZXIuanBnIiwiZGVhZGxpbmUiOjE0NTE0OTEyMDAsInJldHVybkJvZHkiOiJ7XCJuYW1lXCI6JChmbmFtZSksXCJzaXplXCI6JChmc2l6ZSksXCJ3XCI6JChpbWFnZUluZm8ud2lkdGgpLFwiaFwiOiQoaW1hZ2VJbmZvLmhlaWdodCksXCJoYXNoXCI6JChldGFnKX0ifQ==&quot;</div></pre></td></tr></table></figure></p>
<p>4.使用访问密钥（AK/SK）对上一步生成的待签名字符串计算HMAC-SHA1签名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sign = hmac_sha1(encodedPutPolicy, &quot;&lt;SecretKey&gt;&quot;)</div><div class="line"></div><div class="line">#假设 SecretKey 为 MY_SECRET_KEY，实际签名为：</div><div class="line">sign = &quot;c10e287f2b1e7f547b20a9ebce2aada26ab20ef2&quot;</div></pre></td></tr></table></figure></p>
<p>注意：签名结果是二进制数据，此处输出的是每个字节的十六进制表示，以便核对检查。</p>
<p>5.对签名进行URL安全的Base64编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">encodedSign = urlsafe_base64_encode(sign)</div><div class="line"></div><div class="line">#最终签名值为：</div><div class="line">encodedSign = &quot;wQ4ofysef1R7IKnrziqtomqyDvI=&quot;</div></pre></td></tr></table></figure></p>
<p>6.将访问密钥（AK/SK）、encodedSign 和 encodedPutPolicy 用英文符号 : 连接起来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">uploadToken = AccessKey + &apos;:&apos; + encodedSign + &apos;:&apos; + encodedPutPolicy</div><div class="line"></div><div class="line">#假设用户的 AccessKey 为 MY_ACCESS_KEY ，则最后得到的上传凭证应为：</div><div class="line">uploadToken = &quot;MY_ACCESS_KEY:wQ4ofysef1R7IKnrziqtomqyDvI=:eyJzY29wZSI6Im15LWJ1Y2tldDpzdW5mbG93ZXIuanBnIiwiZGVhZGxpbmUiOjE0NTE0OTEyMDAsInJldHVybkJvZHkiOiJ7XCJuYW1lXCI6JChmbmFtZSksXCJzaXplXCI6JChmc2l6ZSksXCJ3XCI6JChpbWFnZUluZm8ud2lkdGgpLFwiaFwiOiQoaW1hZ2VJbmZvLmhlaWdodCksXCJoYXNoXCI6JChldGFnKX0ifQ==&quot;</div></pre></td></tr></table></figure></p>
<p>注意：为确保客户端、业务服务器和七牛服务器对于授权截止时间的理解保持一致，需要同步校准各自的时钟。频繁返回 401 状态码时请先检查时钟同步性与生成 deadline 值的代码逻辑。</p>
<h4 id="上传凭证Token本地生成"><a href="#上传凭证Token本地生成" class="headerlink" title="上传凭证Token本地生成"></a>上传凭证Token本地生成</h4><p><a href="https://github.com/qiniu/java-sdk/blob/master/src/main/java/com/qiniu/util/Auth.java" target="_blank" rel="external">Auth.java</a></p>
<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="报错”incorrect-region-please-use-up-z2-qiniu-com”"><a href="#报错”incorrect-region-please-use-up-z2-qiniu-com”" class="headerlink" title="报错”incorrect region, please use up-z2.qiniu.com”"></a>报错”incorrect region, please use up-z2.qiniu.com”</h3><p>因为空间与上传域名有对应关系，详见<a href="https://developer.qiniu.com/kodo/manual/region-endpoint" target="_blank" rel="external">访问域名和存储区域</a></p>
<p>up-z2对应华南<br>UP HTTP 上传    <a href="http://up-z2.qiniu.com" target="_blank" rel="external">http://up-z2.qiniu.com</a><br>上传源站 HTTP 地址, 适用于服务器端上传<br><a href="http://upload-z2.qiniu.com" target="_blank" rel="external">http://upload-z2.qiniu.com</a><br>上传 HTTP 加速地址, 适用于客户端上传</p>
<p>up.qiniu.com对应华东<br>UP HTTP 上传    <a href="http://up.qiniu.com" target="_blank" rel="external">http://up.qiniu.com</a><br>上传源站 HTTP 地址, 适用于服务器端上传<br><a href="http://upload.qiniu.com" target="_blank" rel="external">http://upload.qiniu.com</a><br>上传 HTTP 加速地址, 适用于客户端上传</p>
<h3 id="直传文件"><a href="#直传文件" class="headerlink" title="直传文件"></a><a href="https://developer.qiniu.com/kodo/api/upload" target="_blank" rel="external">直传文件</a></h3><p>upload接口，用于在一次 HTTP 会话中上传单一的一个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;form method=&quot;post&quot; action=&quot;http://upload.qiniu.com/&quot;</div><div class="line"> enctype=&quot;multipart/form-data&quot;&gt;</div><div class="line">  &lt;input name=&quot;key&quot; type=&quot;hidden&quot; value=&quot;&lt;resource_key&gt;&quot;&gt;</div><div class="line">  &lt;input name=&quot;x:&lt;custom_name&gt;&quot; type=&quot;hidden&quot; value=&quot;&lt;custom_value&gt;&quot;&gt;</div><div class="line">  &lt;input name=&quot;token&quot; type=&quot;hidden&quot; value=&quot;&lt;upload_token&gt;&quot;&gt;</div><div class="line">  &lt;input name=&quot;file&quot; type=&quot;file&quot; /&gt;</div><div class="line">  &lt;input name=&quot;crc32&quot; type=&quot;hidden&quot; /&gt;</div><div class="line">  &lt;input name=&quot;accept&quot; type=&quot;hidden&quot; /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line"></div><div class="line">POST / HTTP/1.1</div><div class="line">Host:           upload.qiniu.com</div><div class="line">Content-Type:   multipart/form-data; boundary=&lt;frontier&gt;</div><div class="line">Content-Length: &lt;multipartContentLength&gt;</div><div class="line"></div><div class="line">--&lt;frontier&gt;</div><div class="line">Content-Disposition:       form-data; name=&quot;token&quot;</div><div class="line"></div><div class="line">&lt;uploadToken&gt;</div><div class="line">--&lt;frontier&gt;</div><div class="line">Content-Disposition:       form-data; name=&quot;key&quot;</div><div class="line"></div><div class="line">&lt;key&gt;</div><div class="line">--&lt;frontier&gt;</div><div class="line">Content-Disposition:       form-data; name=&quot;&lt;xVariableName&gt;&quot;</div><div class="line"></div><div class="line">&lt;xVariableValue&gt;</div><div class="line">--&lt;frontier&gt;</div><div class="line">Content-Disposition:       form-data; name=&quot;crc32&quot;</div><div class="line"></div><div class="line">&lt;crc32&gt;</div><div class="line">--&lt;frontier&gt;</div><div class="line">Content-Disposition:       form-data; name=&quot;accept&quot;</div><div class="line"></div><div class="line">&lt;acceptContentType&gt;</div><div class="line">--&lt;frontier&gt;</div><div class="line">Content-Disposition:       form-data; name=&quot;file&quot;; filename=&quot;&lt;fileName&gt;&quot;</div><div class="line">Content-Type:              application/octet-stream</div><div class="line">Content-Transfer-Encoding: binary</div><div class="line"></div><div class="line">&lt;fileBinaryData&gt;</div><div class="line">--&lt;frontier&gt;--</div></pre></td></tr></table></figure></p>
<h3 id="如何在空间下创建文件夹？"><a href="#如何在空间下创建文件夹？" class="headerlink" title="如何在空间下创建文件夹？"></a>如何在空间下创建文件夹？</h3><p>在空间中不能创建文件夹，但是为了区分不同的文件，可以这么做:<br>文件名以 2017/1/12/1.img , 即创建这样的虚拟目录 2017/1/12/ 做区分。</p>
<h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><h3 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h3><p>ETag为HTTP协议的一部分，它是 HTTP 提供web缓存验证机制之一。以这种方式使用etag类似于指纹,他们可以通过快速比较来确定两个资源是否相同。</p>
<h3 id="Exif"><a href="#Exif" class="headerlink" title="Exif"></a>Exif</h3><p>Exif 意指可交换图像文件格式，专门为数码相机的照片所设计，可以记录数码照片的属性信息和拍摄数据。Exif 信息是由数码相机在拍摄过程中采集的一系列信息，然后这些信息放置在我们熟知的 JPEG/TIFF 文件的头部。</p>
<h3 id="HTTP-Referer"><a href="#HTTP-Referer" class="headerlink" title="HTTP Referer"></a>HTTP Referer</h3><p>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器藉此可以获得一些信息用于处理。</p>
<h3 id="HMAC-SHA1"><a href="#HMAC-SHA1" class="headerlink" title="HMAC-SHA1"></a>HMAC-SHA1</h3><p>HMAC是哈希运算消息认证码 (Hash-based Message Authentication Code)，HMAC运算利用哈希算法，以一个密钥和一个消息为输入，生成一个消息摘要作为输出。您可以使用它同时验证数据的完整性和消息的真实性。HMAC-SHA1签名算法是一种常用的签名算法，用于对一段信息进行生成签名摘要。</p>
<h3 id="键-key"><a href="#键-key" class="headerlink" title="键 (key)"></a>键 (key)</h3><p>空间中资源的唯一标识符。空间中的每个资源都有一个对应的键。因为空间和键一起唯一标识每一个资源，您可以认为七牛云存储是基于空间＋键和资源本身之间的基本数据映射。</p>
<p>例如：<a href="http://78re52.com1.z0.glb.clouddn.com/resource/AllEast.jpg" target="_blank" rel="external">http://78re52.com1.z0.glb.clouddn.com/resource/AllEast.jpg</a></p>
<p>78re52.com1.z0.glb.clouddn.com是空间的绑定域名<br>resource/AllEast.jpg是键</p>
<h3 id="签名密钥"><a href="#签名密钥" class="headerlink" title="签名密钥"></a>签名密钥</h3><p>签名密钥 (Secret Key) 简称 SK ，是七牛云存储颁发给用户，用于对访问请求签名的字串。用户使用签名密钥对访问请求的核心要素进行签名，获得请求认证令牌。用户将令牌随同访问请求一起发送至七牛云存储服务，七牛云存储将对令牌进行校验，以确认用户请求的合法性。</p>
<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON（JavaScript Object Notation）一种轻量级的数据交换格式，具有良好的可读和便于快速编写的特性。可在不同平台之间进行数据交换。JSON采用兼容性很高的、完全独立于语言文本格式，同时也具备类似于C语言的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）体系的行为。这些特性使JSON成为理想的数据交换语言。</p>
<h3 id="令牌-Token"><a href="#令牌-Token" class="headerlink" title="令牌 (Token)"></a>令牌 (Token)</h3><p>令牌是用户访问七牛云存储时，进行身份验证的凭证。当用户将一个Bucket设置为私有后，在访问七牛云存储时，必须通过身份验证。用户将访问请求中的一些要素整合起来，用签名密钥对其加密，得到令牌。然后将令牌随同请求一起发送至七牛云存储。用户可以在令牌中指定请求的时效（七牛云存储统一使用UTC时间计算令牌有效期），防止请求被非法使用。</p>
<h3 id="Unix-时间戳"><a href="#Unix-时间戳" class="headerlink" title="Unix 时间戳"></a>Unix 时间戳</h3><p>Unix时间戳，是一种时间表示方式，定义为从1970年01月01日00时00分00秒起至现在的总秒数。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://developer.qiniu.com/kodo/sdk/android" target="_blank" rel="external">Android SDK</a><br><a href="https://developer.qiniu.com/kodo/sdk/java" target="_blank" rel="external">Java SDK</a><br><a href="https://developer.qiniu.com/kodo/kb/seven-niuyun-upload-download-instructions" target="_blank" rel="external">七牛云上传下载操作指南</a><br><a href="http://78re52.com1.z0.glb.clouddn.com/tsdocs/%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86.pdf" target="_blank" rel="external">七牛云存储必备知识.pdf</a><br><a href="http://78re52.com1.z0.glb.clouddn.com/tsdocs/%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E5%9F%BA%E7%A1%80%E4%B8%8A%E4%BC%A0%E6%9C%8D%E5%8A%A1.pdf" target="_blank" rel="external">七牛云存储文件上传-基础上传服务.pdf</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/2017-03-26_173401.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Understand the concept,  read the official documents carefully, based on common sense thinking, combined with the reference sample, keep on  deliberate practice.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Application" scheme="http://ipcreator.me/tags/Application/"/>
    
      <category term="Fast Android Networking" scheme="http://ipcreator.me/tags/Fast-Android-Networking/"/>
    
  </entry>
  
  <entry>
    <title>Best Practice of Deep Thinking</title>
    <link href="http://ipcreator.me/2017/03/26/MyView/deep-thinking-change-my-life/"/>
    <id>http://ipcreator.me/2017/03/26/MyView/deep-thinking-change-my-life/</id>
    <published>2017-03-26T00:29:06.000Z</published>
    <updated>2017-04-09T11:18:04.603Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://zhibimo.com/read/xiaolai/zuo-xiang-qi-cheng/images/meditation-posture.png" alt=""></p>
<blockquote>
<p>You’re the master of  your brain, not the other way around.<br>Brain decides your thinking, talking, action…<br>For growing up, Control and  Update your brain is the only way .</p>
</blockquote>
<h1 id="坐享其成"><a href="#坐享其成" class="headerlink" title="坐享其成"></a><a href="http://zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng" target="_blank" rel="external">坐享其成</a></h1><p>也许是最简单的大脑锻炼方式，这也是人类莫名其妙地已经运用了两千五百年以上的大脑锻炼方式。已经有足够多的科学研究证明，它能使你的大脑皮层表面积加大，能使你的灰质变厚，它也能增强人们的免疫系统，它还能让人们摆脱抑郁症……</p>
<p>尽管简单，但也相当神奇。<br>虽然神奇，却又非常简单。</p>
<a id="more"></a>
<h2 id="为什么要用“坐享”这个词？"><a href="#为什么要用“坐享”这个词？" class="headerlink" title="为什么要用“坐享”这个词？"></a>为什么要用“坐享”这个词？</h2><p>“坐享”，是我杜撰的一个词 —— 当然，是一个有理由的杜撰。</p>
<p>所谓知识（或者知识的基石，即，概念）的三个基本要素，分别是：</p>
<blockquote>
<p>“是什么”（what）<br>“为什么”（why）<br>“怎么做/用”（how）</p>
</blockquote>
<p>人类是可以用各种手段积累知识的，这也是人类优于其它动物的一个重要因素。</p>
<p>说实话，人类很神奇。历史上在很多领域里，经常是在完全不知道“是什么”（what）、“为什么”（why） 的情况下，却早已经熟练掌握“怎么做”（how）……</p>
<p>这样的例子很多。最明显的例子是性。除了过往人类在这个领域里长期的愚昧之外，即便是到了今天也还是如此 —— “潮吹”究竟是什么、为什么到现在也没有科学的定论，可早就有大量的人掌握了怎么做 —— 地球上第一个为人所知的、系统地掌握此项技能的，是个日本人，名字叫加藤鹰。</p>
<p>另外一个例子是赌博。人类貌似从一开始就带着好赌的基因，几乎每个人都天然会赌，甚至在不知道概率是什么的情况下（要知道概率论的启蒙要到 17 世纪才出现）就不仅能够熟练地赌博，还能设计出对庄家倾斜的赌博游戏……</p>
<p>嗯，黄、赌、毒。你看，最后一个也是如此，很多人并不知道它是什么，也不知道为什么，反正知道怎么用。其实人类在早期的时候，医也好、药也罢，都是如此的，是什么完全搞错、为什么完全弄不明白，但反正就是直接用……</p>
<p>从这个角度望过去，不管三七二十一，用起来再说，从来就是人类的智慧。你现在知道为什么我主张不要闲着没事儿就学外语，而是一上来就要用了罢？（详见<a href="http://zhibimo.com/read/xiaolai/everyone-can-use-english/" target="_blank" rel="external">《人人都能用英语》</a>）</p>
<p>事实上，深入了解“怎么做”（how） 其实是很难的。别看人类直立行将近 100 万年，在电子工业高度发达之后的相当长一段时间里，科学家们费尽心机也造不出一个能像人一样双腿直立行走的机器人 —— 2015 年的时候，这个难题终于被攻克了，前后也居然花了全球精英差不多五十年的努力……</p>
<p>“坐享”这个词是我刻意造的中文词汇。在英文中，它叫 Meditation，翻译过来是“冥想”；在东方，它叫打坐、坐禅、禅修、内视、静观…… 其实“静坐”倒是个不错的词，可惜在中国它有另外的含义，不敢乱用。于是，只好生生编造了一个词：坐享。</p>
<p>为什么一定要刻意编造一个词呢？因为它现在与过往不同了，现在科学已经可以清楚地解释它的三个方面了：它是什么？为什么？怎么做？所以我们确实有必要把这个今天已经被科学证明为有效的大脑锻炼方式与过往不那么清楚或者干脆错得离谱的解释尽量区分开来。当然，另外一方面是，<a href="http://zhibimo.com/read/xiaolai/reborn-every-7-years/A10.html" target="_blank" rel="external">我们对自己的操作系统有洁癖，只喜欢使用清晰、准确、必要的概念</a>。</p>
<p>这有点像什么呢？当我们知道木头可以被点燃其实并不是所谓的“燃素”（Phlogiston）在起作用，而是我们肉眼根本看不见的空气里的氧引发了燃烧之后，我们需要抛弃过往的、采纳新的解释一样。这也好像那个被大伙出离愤怒地烧死的哥白尼用太阳替换了地球，“将太阳放到了宇宙中心”一样，我们的生活并没有因此发生变化，在我们的感受上来看，太阳依然是早晨从东边升起来，晚上到西边落下去 —— 但事实就是事实，过去我们以为的事实是错的，庆幸的是，我们毕竟还是知道了正确的事实。</p>
<p>也许释迦牟尼是地球上第一个知道如何坐享的人，并由此构建了一个系统的、庞杂的、却也足够完整的解释理论：佛教。如此算来，人类练习坐享，因为坐享获得益处迄今为止至少有两千五百多年了，真是神奇得很……</p>
<h2 id="什么是元认知能力？"><a href="#什么是元认知能力？" class="headerlink" title="什么是元认知能力？"></a>什么是元认知能力？</h2><p>现在从科学角度看来，坐享无非就是通过一种简单合理的方式锻炼自己的“元认知能力”。</p>
<p>这是个非常重要的概念，因为它几乎决定了一个人是否有机会成长。所谓的元认知，指的就是“认知的认知”。也就是说，你能认知到你的认知，虽然有点拗口，但其实也不是那么难以理解。当你在思考的时候，你能意识到自己在思考，进一步还能意识到自己在思考什么，又进一步还能判断自己的思考方式、思考结果是否正确，更进一步还能纠正自己错误的思考方式或者结果，这就是元认知能力。</p>
<p>在<a href="http://zhibimo.com/read/xiaolai/ba-shi-jian-dang-zuo-peng-you/" target="_blank" rel="external">《把时间当作朋友》</a>里，第一章里我就提到元认知能力。拥有元认知能力的我们，思考可以非常复杂 —— 复杂到“我们甚至可以思考我们的思考方式和思考结果是否确实是合理的思考方式和思考结果。”</p>
<p>元认知能力几乎是一切学习与进步的最底层的、最根本的能力。一个人的潜力有多大，几乎完全取决于他的元认知能力有多强。人群中有相当数量的人甚至意识不到自己的思考，至于思考得对不对，过程是否有疏漏，结果合不合理，也完全无意识，更谈不上纠正自己的思考了。很多所谓个性强、脾气大的人，从最底层上来看，其实就是元认知能力困乏而已。因为这样的人其实没有分清楚谁是主人，谁是仆人，他们不明白这个很重要的道理：你的大脑并不是你，你的大脑是属于你的一个器官…… 而不是反过来，你竟然隶属于你的大脑。</p>
<p>弗洛伊德的说法是这样的：本我是马，自我是马车夫。马是驱动力，马车夫给马指引方向。自我要驾驭本我，但马可能不听话，二者就会僵持不下，直到一方屈服。</p>
<p>用今天的说法，这个类比可能应该是：认知能力是马，元认知能力是马车夫……</p>
<p>你看，<a href="http://zhibimo.com/read/xiaolai/reborn-every-7-years/A08.html" target="_blank" rel="external">我们在不断升级我们的概念</a>，以此获得进步。<br>元认知能力的强弱，与一个人大脑皮层的面积和灰质的厚度有着正相关的联系。过去人们误认为脑壳大的人聪明，现在我们知道了，决定一个人聪明与否的并不是脑壳大小，而是大脑皮层的面积。大脑皮层表面有很多沟回，沟回的多少，决定了最终大脑皮层表面积的大小，人和人之间的大脑皮层表面积大小甚至可能相差一倍以上。</p>
<p>可实际上，并不是谁决定谁，而是相辅相成的关系。通过不断有效地学习，我们的大脑获得更多的锻炼，最终的结果是大脑皮层表面积加大，灰质变厚；而反过来，大脑皮层表面积加大，灰质变厚，也会使学习能力有更大的扩展空间……</p>
<p>元认知能力的获得，一方面与知识的习得有关系，因为任何学习过程本质上来看都是“制造更多的沟回”；而另外一方面，我们也可以像锻炼胳膊上的二头肌一样通过一定的方式进行锻炼大脑 —— 坐享就是这种锻炼。</p>
<p>通过放松大脑，长时间只专注于身体的某一部分，坐享可以让一个人逐步通过运用不断加强自己的注意力。注意力，是认知的最重要方式之一。而在不断把被分散的注意力重新集中起来的过程中，练习者可以渐渐感受到、并越来越熟练地应用自己的元认知能力 —— 当他认知到自己的认知并没有按照应该的方式操作的时候，他会运用自己的元认知能力纠正自己的认知及其操作方式。</p>
<p>这种练习看似简单，却又实际意义巨大。不要轻视简单的练习，我们身体的每一个部分，其实都可以通过非常简单的方式加强。不说别的，走路够简单吧？每天多走一小时，对身体的帮助可以说是无限大 —— 即便这么简单的事情，也很少有人愿意做，只不过是因为他们并没有深刻意识到那么做的种种好处，更无法想象不这么做的巨大害处。</p>
<p>每天坐享一刻钟或者一小时，已经是足够的大脑锻炼强度。已经有足够的科学研究证明这样做带来的巨大好处，除了大脑皮层面积增大、灰质变厚之外，它还能加强人体的免疫系统。更为重要的是，当一个人的元认知能力加强的时候，他更容易转变为进取型人格，更难被情绪所左右，相对更容易冷静，更容易清楚地思考…… 无论从哪方面看，都是能够极大<a href="http://zhibimo.com/read/xiaolai/reborn-every-7-years/B06.html" target="_blank" rel="external">提高生活品质</a>的活动。</p>
<h2 id="如何有效提高元认知能力？"><a href="#如何有效提高元认知能力？" class="headerlink" title="如何有效提高元认知能力？"></a><a href="/2017/01/02/MyShare/iGet/lixiaolai-lead-to-freedom-of-wealth/">如何有效提高元认知能力？</a></h2><h3 id="一、坐享"><a href="#一、坐享" class="headerlink" title="一、坐享"></a>一、坐享</h3><p>这是个现今已经被科学解释得很清楚的很简单很朴素的大脑体操，没必要去神化它，秘化它——自然而然地用就是了。</p>
<h3 id="二、兴趣"><a href="#二、兴趣" class="headerlink" title="二、兴趣"></a>二、兴趣</h3><p>全神贯注是另外一种刻意训练元认知能力的有效方法——很违背直觉的小方法<br>通过进入全神贯注状态而使元认知能力彻底放松……<br>教师最好的学习方法，大多数人直至成年，并没有养成哪怕仅仅一个属于自己的真正兴趣。</p>
<p>被动全神贯注，来自于外部的控制。小说、电影、游戏的设计者们是掠夺他人注意力的专家，他们知道如何设计才能让人们兴奋，让人们上瘾，让人们离不开，甚至不惜动用一切心理学研究成果去把控自己的猎物。</p>
<p>主动全神贯注，专注于提升某个特定的技能。在任何一项兴趣中，都有“必须可以练习才能获得进步的技能”，要满足这个要求，那因兴趣而产生的全神贯注，才可能是主动的，才可能是对刻意训练元认知能力有帮助的。</p>
<p>在全神贯注地磨练任何一项技能之时，元认知能力彻底放松，而注意力全部用来去感受每一个感官的刺激，进而调整自己的每一个动作，甚至每个意识与理解，最终达到比前一刻更好的地步，在这个过程中，大脑皮层更多的沟回形成，更多的动作变成“下意识即可完成”的动作……直至结束的那一瞬间，休息完毕且精力充沛的元认知能力再一次被激活，清楚地意识到刚才的一切，幸福感突然而生，又因为元认知能力的存在，那幸福感格外强烈。</p>
<h3 id="三、反思"><a href="#三、反思" class="headerlink" title="三、反思"></a>三、反思</h3><p>每天花上十分钟左右，反思一下自己的思路和思考结果，琢磨一下自己的想法有没有逻辑谬误？琢磨一下自己的想法从何而来？又缘何走了那么个思路？有没有其他可能的思考结果？琢磨一下自己受到了哪些因素的影响？琢磨一下那些影响因素究竟有没有根基，有没有道理？</p>
<p>反思，不仅是一种元认知能力的刻意训练方式，也是调整情绪的根本。</p>
<p>那些无法控制情绪的人，不仅做不成任何有意义的事情，还常常成为定时炸弹一样的东西，早晚毁掉他们触碰到的一切，不管是人还是物。</p>
<p>观察和研究一致表明：控制情绪，和控制时间一样，几乎是徒劳的。冷静常常并不是控制情绪的结果，而是认清情绪来源，并找到解决方案的结果，而认清情绪的来源，就是在调用元认知能力。</p>
<p>我很生气和我知道我现在很生气，这两者之间有着巨大的差异。前者只能在接下来的每分每秒更生气，后者却因为元认知能力被激活而可以做到把注意力转到我为什么很生气，乃至于找到很生气的原因，然后再把注意力放在那个引发情绪的问题上去。能解决就去动手解决，不能解决的话，也好想得开：既然解决不了，生气也没有用……</p>
<p>每一次认清情绪的来源，就是一次元认知能力获得锻炼的重大机会。每个人都一样，最终会发现，反思最多的，肯定是被情绪所左右之后的行为和决定。不过，其实用不着多少次，元认知能力的适时激活就会成为习惯，而所谓的冷静，只不过是这个习惯自然而然的结果。</p>
<p>要有耐心，要有耐心，要有耐心<br>看起来再简单的事，做起来都没那么简单。不过只要耐心地做下去，就一定会做得越来越好。</p>
<p>如果你需要一个自己设计并且足够让你上瘾的锻炼方法，最好能够精确地控制锻炼后的反馈。<br>虽然不一定是每次练完就有的反馈，但是应该找一个合适的频率不断给自己激励，让自己看到成果，进而激发更多的兴趣。<br>这种刻意练习的设计会让你慢慢形成一个正循环，从而能够持续不断地练习下去。</p>
<p>我们锻炼元认知能力的重要一步就是要学会“主动控制注意力”</p>
<p>我们平时说的迁怒，其实本质上就是因为自己不知道为什么生气。想着想着就乱了，乱了之后就不管对象，先发一通火再说。</p>
<p>通过元认知能力的提升，知道自己为何生气，以及如何应对这些情绪。这就像你无法控制时间，但是你能通过控制自己来达成一定的成就。</p>
<p>不要着急，也不要想着如何一次就把每一件事都搞定。</p>
<h3 id="什么才算是好的休息方式？"><a href="#什么才算是好的休息方式？" class="headerlink" title="什么才算是好的休息方式？"></a>什么才算是好的休息方式？</h3><p>1.阅读<br>2.亲近大自然<br>3.独处</p>
<p>人们在独处的时候，更容易将注意力放在自己的感觉、身体以及情绪上。这其实和我们说的，在全神贯注的情况下，元认知能力得到彻底的放松是一样的。</p>
<p>只字不差地阅读是我养成的最重要的习惯之一。<br>自己先做好，孩子多半差不了。<br>保持耐心，先从认真阅读开始，和孩子一起慢慢培养控制注意力的能力。<br>你做好了，孩子自然也不会太差。</p>
<p>如果自己一时想不清楚，那就写下来看。今天想不明白的事情，过几天回过头来看，说不定就会有新的思路和想法。</p>
<p>没有直接的效果，所以感觉没用。这恐怕是大部分人一辈子也没有锻炼出元认知能力的重要原因之一。<br>生活中，我们总是会受到线性思维的影响。简单来说就是种瓜一定要得瓜，种豆一定要得豆，如果没有得到应有的结果，那么这些努力就是白费的。</p>
<p>你在元认知能力上的努力，或许不能直接让你有任何产出，但它可能会在其他方面帮你想明白问题的关键。</p>
<p>可以练习和增加兴趣是相辅相成的。每当你突破了一个玻璃顶，你对于这件事情的兴趣就会加强，并且促使你进一步去可以练习。</p>
<p>充足的休息也是健身的重要环节。锻炼元认知能力其实也是类似的过程。反思就相当于你不断地运用元认知去锻炼，而坐享和兴趣则更像是你在放松恢复的过程。</p>
<p>过去的兴趣之所以在工作之后被磨灭，大部分的原因就在于：缺少刻意练习。</p>
<p>没有经历过可以练习的兴趣，多半经受不住生活的考验。一旦不那么顺利的时候，我们就会轻易放弃这些兴趣。</p>
<p>不论是锻炼还是休息，都需要尽可能百分百投入。</p>
<p>有元认知能力的人，就有机会摆脱当局者的角色。我总觉得大部分人只是缺少一个启发，让他们知道其实自己有能力控制思维，跳出当局者的视角，从更高的层次来审视自己的生活。</p>
<p>之所以说是刻意练习，就是因为它需要调动你的注意力，全神贯注地完成。因此一定不会很轻松，也不会很顺利。</p>
<p>当我们把注意力集中在某一处，并且开始主动不去思考时，我们的大脑会比平常更为活跃，能够产生更多的连接。</p>
<p>有兴趣——刻意练习——做的更好——更有兴趣——继续刻意练习</p>
<p>兴趣和练习其实是相辅相成的。没有兴趣，你可能不会坚持去做枯燥的练习；没有练习，原本的兴趣也会很快枯竭。</p>
<p>关于反思最好的方法其实就是记录。</p>
<p>原来我的这个世界还可以是这样的。</p>
<p>如果说过去你通过体育锻炼，能够感受自己逐渐增强的体能，那么现在你已经能够通过刻意练习，感受到自己大脑升级的过程了。</p>
<h2 id="如何开始坐享？"><a href="#如何开始坐享？" class="headerlink" title="如何开始坐享？"></a>如何开始坐享？</h2><p>太简单了，乃至于直接开始就好。</p>
<h3 id="（〇）"><a href="#（〇）" class="headerlink" title="（〇）"></a>（〇）</h3><p>由于在坐享过程中，注意力足够集中的时候，全身放松的状态与人体在睡觉的状态几乎相同，所以，要注意保暖，注意风向。</p>
<p>可以找个毯子盖上膝盖；<br>不能有风持续吹到耳朵周围……<br>其中第二条尤其重要，三叉神经汇聚于耳部周围，不小心的话，可能会引起面部偏瘫。</p>
<p>至于姿势，其实并不重要，只要舒服就好。不一定非要盘腿…… 其实以下任何姿势都可以：<br><img src="http://zhibimo.com/read/xiaolai/zuo-xiang-qi-cheng/images/meditation-posture.png" alt=""></p>
<p>但脊背坐直倒是挺重要，因为最终，长时间弓着背可能更累。</p>
<h3 id="（一）"><a href="#（一）" class="headerlink" title="（一）"></a>（一）</h3><p>稍微严肃一点的话，就从以下简单的步骤开始：</p>
<p>找个安静的地方<br>设定一个计时器（从五分钟或者十五分钟开始，渐渐延长到四十五分钟到一小时）<br>用你自己感觉舒服的方式坐好（最好脊背挺直）<br>闭上眼睛<br>开始深呼吸<br>将自己所有的注意力全部集中到呼吸上<br>一旦发现注意力转移到其它地方，就要刻意地将注意力集中到呼吸上<br>持续深呼吸……<br>直至计时器将你“唤醒”。</p>
<h3 id="（二）"><a href="#（二）" class="headerlink" title="（二）"></a>（二）</h3><p>坐享几次之后，可以开始尝试在坐享过程中用你的注意力扫描你的整个身体。</p>
<p>从左脚的脚尖开始…… 左脚掌…… 左脚跟…… 左小腿 ……左膝盖 …… 左大腿…… 左臀…… 顺着脊柱一直到后脖跟…… 划到左肩…… 左上臂…… 左肘…… 左小臂…… 左手腕…… 左手心…… 左指尖…… 再回来…… 左手心…… 左手腕…… 左小臂…… 左肘…… 左上臂…… 左肩…… 沿着你的肩一直划到右肩…… 右上臂…… 右肘…… 右小臂…… 右手腕…… 右手心…… 右指尖…… 再回来…… 右手心…… 右手腕…… 右小臂…… 右肘…… 右上臂…… 右肩…… 回到后脖根…… 顺着脊柱一直到右臀…… 右大腿…… 右膝盖…… 右小腿…… 右脚后跟…… 右脚心…… 右脚尖……</p>
<p>在这个过程中，你会感觉到某个地方不舒服。这样的时候，把注意力全部集中到那个不舒服的地方，仔细观察自己的感受，尝试着接受…… 这是个机会，也是个挑战…… 一旦能做到接受那个原本不舒服的感觉，接下来的感觉竟然是解脱……</p>
<h3 id="（三）"><a href="#（三）" class="headerlink" title="（三）"></a>（三）</h3><p>尝试着在任何地方坐享。出租车上、火车上、飞机上、甚至颠簸的船上，或者干脆是在某个其实非常嘈杂的地方……</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总而言之，要集中注意力、并且最终可以做到自如地控制注意力才算是坐享 —— 最终的目标是可以做到在越来越长的时间里自如地注意力集中，并且还能控制集中的注意力。而胡思乱想、放空，甚至睡着了，都算不上是坐享，对增大大脑皮层面积，增厚灰质没有什么具体的帮助。</p>
<p>这真是一个极好的“掌握最少必要知识之后就要马上通过<a href="http://zhibimo.com/read/xiaolai/reborn-every-7-years/A02.html" target="_blank" rel="external">践行</a>进步”的好例子！</p>
<h2 id="音频文件"><a href="#音频文件" class="headerlink" title="音频文件"></a>音频文件</h2><p>压缩包内有前三章的语音版，以及第一次坐享可用的辅导音频。<br>请到云盘上下载打包文件：<br><a href="https://pan.baidu.com/s/1dFiAQjf" target="_blank" rel="external">https://pan.baidu.com/s/1dFiAQjf</a><br>到网上搜索 sound of nature，可以找到很多坐享可用的 mp3 文件。</p>
<h2 id="经验分享"><a href="#经验分享" class="headerlink" title="经验分享"></a>经验分享</h2><p>这又是一本“众创书籍”。是什么，为什么，怎么做，都很简单却又很清楚地讲完了，剩下的就是践行。每个人在践行的过程中，都可能有不同的感受、不同的进步。写下来，分享给身边的人，网上的人，不一定会发生什么样的惊喜（Serendipity）……</p>
<p>提交经验分享，只有一个要求：</p>
<blockquote>
<p>不要使用任何与宗教相关的词汇与概念。</p>
</blockquote>
<p>而更为重要的一点是：</p>
<blockquote>
<p>没必要神化这种简单朴素的大脑运动方式。</p>
</blockquote>
<p>提交经验分享链接：</p>
<p><a href="http://form.mikecrm.com/I579S3" target="_blank" rel="external">http://form.mikecrm.com/I579S3</a></p>
<h2 id="个人实践之路"><a href="#个人实践之路" class="headerlink" title="个人实践之路"></a>个人实践之路</h2><h3 id="有益效果"><a href="#有益效果" class="headerlink" title="有益效果"></a>有益效果</h3><p>1、有助于集中和控制注意力<br>2、有利于大脑的放松<br>3、有助于提升晚上深度睡眠时间</p>
<p><em>03.15</em>：大脑疲惫时，边走边想<br>            10~30分钟，可以快速恢复精力</p>
<p><em>03.26</em>：四个完整周期，深度睡眠1小时<br>            八个完整周期，深度睡眠2小时</p>
<p><em>03.30</em>：断点续传机制<br>            两连击、三连发<br>            共性规律，以头为起点的垂直线上各个Point，为双数</p>
<blockquote>
<p>对称：</p>
<ol>
<li>左手指尖到肩：7</li>
<li>肩到头到颈：<strong>10</strong></li>
<li>从颈到右手再回到颈：24</li>
<li>从颈经丹田到腹部：26</li>
<li>腹部到左胯：27</li>
<li>左胯回到腹部：<strong>40</strong></li>
<li>腹部到右胯：41</li>
<li>右胯再回到腹部：<strong>54</strong></li>
<li>腹部回到颈：<strong>56</strong></li>
<li>颈回到左手指尖：63</li>
</ol>
</blockquote>
<p><em>03.31</em> ：16个完整的周期，成功进入Deep Sleep</p>
<p><em>04.03</em>：传授给家人，用画笔指点，初步练习，熟能生巧</p>
<p><em>04.06</em>：成功经受住negative mentality的kickback</p>
<p><em>04.09</em>:  可以随时随地运用，转移注意力–&gt;调节情绪–&gt;恢复精力</p>
<h3 id="创新实践"><a href="#创新实践" class="headerlink" title="创新实践"></a>创新实践</h3><p>将注意力想象成一个球<br>先从跳动开始，再到滑动<br>跳动/滑动的节奏，先慢后快<br>从左手/右手/左脚/右脚，轮流遍历<br>每遍都应该是同一个总数字，如果不对，重来<br>后面可以从串行到并行，从一个球到两个球，三个球和四个球</p>
<h3 id="家人推广"><a href="#家人推广" class="headerlink" title="家人推广"></a>家人推广</h3><p>从老婆、老妈到老姐<br>榜样就是力量</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng" target="_blank" rel="external">坐享其成</a><br><a href="/2017/01/02/MyShare/iGet/lixiaolai-lead-to-freedom-of-wealth/">通往财富自由之路</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://zhibimo.com/read/xiaolai/zuo-xiang-qi-cheng/images/meditation-posture.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You’re the master of  your brain, not the other way around.&lt;br&gt;Brain decides your thinking, talking, action…&lt;br&gt;For growing up, Control and  Update your brain is the only way .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;坐享其成&quot;&gt;&lt;a href=&quot;#坐享其成&quot; class=&quot;headerlink&quot; title=&quot;坐享其成&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng&quot;&gt;坐享其成&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;也许是最简单的大脑锻炼方式，这也是人类莫名其妙地已经运用了两千五百年以上的大脑锻炼方式。已经有足够多的科学研究证明，它能使你的大脑皮层表面积加大，能使你的灰质变厚，它也能增强人们的免疫系统，它还能让人们摆脱抑郁症……&lt;/p&gt;
&lt;p&gt;尽管简单，但也相当神奇。&lt;br&gt;虽然神奇，却又非常简单。&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
      <category term="Health" scheme="http://ipcreator.me/tags/Health/"/>
    
  </entry>
  
  <entry>
    <title>Learning Resources of Machine Learning and AI</title>
    <link href="http://ipcreator.me/2017/03/26/AI/TensorFlow/learning-resource-of-ai/"/>
    <id>http://ipcreator.me/2017/03/26/AI/TensorFlow/learning-resource-of-ai/</id>
    <published>2017-03-26T00:17:06.000Z</published>
    <updated>2017-03-27T08:56:28.873Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>思维改变生活</p>
</blockquote>
<h2 id="机器学习与人工智能学习资源导引"><a href="#机器学习与人工智能学习资源导引" class="headerlink" title="机器学习与人工智能学习资源导引"></a>机器学习与人工智能学习资源导引</h2><p>作者：刘未鹏<br>C++的罗浮宫博客新地址：<a href="http://mindhacks.cn" target="_blank" rel="external">http://mindhacks.cn</a></p>
<p><img src="http://mindhacks.cn/wp-content/uploads/2016/12/card1.png" alt=""></p>
<a id="more"></a>
<h1 id="机器学习与人工智能学习资源导引-1"><a href="#机器学习与人工智能学习资源导引-1" class="headerlink" title="机器学习与人工智能学习资源导引"></a><a href="http://blog.csdn.net/pongba/article/details/2915005" target="_blank" rel="external">机器学习与人工智能学习资源导引</a></h1><p><a href="https://groups.google.com/group/pongba/" target="_blank" rel="external">TopLanguage</a></p>
<p>我经常在 TopLanguage 讨论组上推荐一些书籍，也经常问里面的牛人们搜罗一些有关的资料，人工智能、机器学习、自然语言处理、知识发现（特别地，数据挖掘）、信息检索 这些无疑是 CS 领域最好玩的分支了（也是互相紧密联系的），这里将最近有关机器学习和人工智能相关的一些学习资源归一个类：</p>
<p>首先是两个非常棒的 Wikipedia 条目，我也算是 wikipedia 的重度用户了，学习一门东西的时候常常发现是始于 wikipedia 中间经过若干次 google ，然后止于某一本或几本著作。</p>
<p>第一个是</p>
<h2 id="“人工智能的历史”（History-of-Artificial-Intelligence）"><a href="#“人工智能的历史”（History-of-Artificial-Intelligence）" class="headerlink" title="“人工智能的历史”（History of Artificial Intelligence）"></a><a href="http://en.wikipedia.org/wiki/History_of_artificial_intelligence" target="_blank" rel="external">“人工智能的历史”（History of Artificial Intelligence）</a></h2><p>我在讨论组上写道：</p>
<p>而今天看到的这篇文章是我在 wikipedia 浏览至今觉得最好的。文章名为《人工智能的历史》，顺着 AI 发展时间线娓娓道来，中间穿插无数牛人故事，且一波三折大气磅礴，可谓”事实比想象更令人惊讶”。人工智能始于哲学思辨，中间经历了一个没有心理学（尤其是认知神经科学的）的帮助的阶段，仅通过牛人对人类思维的外在表现的归纳、内省，以及数学工具进行探索，其间最令人激动的是 Herbert Simon （决策理论之父，诺奖，跨领域牛人）写的一个自动证明机，证明了罗素的数学原理中的二十几个定理，其中有一个定理比原书中的还要优雅，Simon 的程序用的是启发式搜索，因为公理系统中的证明可以简化为从条件到结论的树状搜索（但由于组合爆炸，所以必须使用启发式剪枝）。后来 Simon 又写了 GPS （General Problem Solver），据说能解决一些能良好形式化的问题，如汉诺塔。但说到底 Simon 的研究毕竟只触及了人类思维的一个很小很小的方面 —— Formal Logic，甚至更狭义一点 Deductive Reasoning （即不包含 Inductive Reasoning , Transductive Reasoning (俗称 analogic thinking）。还有诸多比如 Common Sense、Vision、尤其是最为复杂的 Language 、Consciousness 都还谜团未解。还有一个比较有趣的就是有人认为 AI 问题必须要以一个物理的 Body 为支撑，一个能够感受这个世界的物理规则的身体本身就是一个强大的信息来源，基于这个信息来源，人类能够自身与时俱进地总结所谓的 Common-Sense Knowledge （这个就是所谓的 Emboddied  Mind 理论。 ），否则像一些老兄直接手动构建 Common-Sense Knowledge Base ，就很傻很天真了，须知人根据感知系统从自然界获取知识是一个动态的自动更新的系统，而手动构建常识库则无异于古老的 Expert System 的做法。当然，以上只总结了很小一部分我个人觉得比较有趣或新颖的，每个人看到的有趣的地方不一样，比如里面相当详细地介绍了神经网络理论的兴衰。所以我强烈建议你看自己一遍，别忘了里面链接到其他地方的链接。</p>
<p>顺便一说，<a href="http://blog.youxu.info/" target="_blank" rel="external">徐宥</a>同学打算找时间把这个条目翻译出来，这是一个相当长的条目，看不动 E 文的等着看翻译吧:)</p>
<h2 id="第二个则是"><a href="#第二个则是" class="headerlink" title="第二个则是"></a>第二个则是</h2><p>##<a href="http://en.wikipedia.org/wiki/Artificial_intelligence" target="_blank" rel="external">“人工智能”（Artificial Intelligence）</a></p>
<p>当然，还有<a href="http://en.wikipedia.org/wiki/Machine_learning" target="_blank" rel="external">机器学习</a>等等。从这些条目出发能够找到许多非常有用和靠谱的深入参考资料。</p>
<p>然后是一些书籍</p>
<h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><ol>
<li><p>《Programming Collective Intelligence》，近年出的入门好书，培养兴趣是最重要的一环，一上来看大部头很容易被吓走的:P</p>
</li>
<li><p>Peter Norvig 的《AI, Modern Approach 2nd》（无争议的领域经典）。</p>
</li>
<li><p>《The Elements of Statistical Learning》，数学性比较强，可以做参考了。</p>
</li>
<li><p>《Foundations of Statistical Natural Language Processing》，自然语言处理领域公认经典。</p>
</li>
<li><p>《Data Mining, Concepts and Techniques》，华裔科学家写的书，相当深入浅出。</p>
</li>
<li><p>《Managing Gigabytes》，信息检索好书。</p>
</li>
<li><p>《Information Theory：Inference and Learning Algorithms》，参考书吧，比较深。</p>
</li>
</ol>
<p>相关数学基础（参考书，不适合拿来通读）：</p>
<ol>
<li><p>线性代数：这个参考书就不列了，很多。</p>
</li>
<li><p>矩阵数学：《矩阵分析》，Roger Horn。矩阵分析领域无争议的经典。</p>
</li>
<li><p>概率论与统计：《概率论及其应用》，威廉·费勒。也是极牛的书，可数学味道太重，不适合做机器学习的。于是讨论组里的 Du Lei 同学推荐了《All Of Statistics》并说到</p>
</li>
</ol>
<p>机器学习这个方向，统计学也一样非常重要。推荐All of statistics，这是CMU的一本很简洁的教科书，注重概念，简化计算，简化与Machine Learning无关的概念和统计内容，可以说是很好的快速入门材料。</p>
<ol>
<li>最优化方法：《Nonlinear Programming, 2nd》非线性规划的参考书。《Convex Optimization》凸优化的参考书。此外还有一些书可以参考 wikipedia 上的最优化方法条目。要深入理解机器学习方法的技术细节很多时候（如SVM）需要最优化方法作为铺垫。</li>
</ol>
<h2 id="王宁同学推荐了好几本书："><a href="#王宁同学推荐了好几本书：" class="headerlink" title="王宁同学推荐了好几本书："></a>王宁同学推荐了好几本书：</h2><p>《Machine Learning, Tom Michell》, 1997.<br>老书，牛人。现在看来内容并不算深，很多章节有点到为止的感觉，但是很适合新手（当然，不能”新”到连算法和概率都不知道）入门。比如决策树部分就很精彩，并且这几年没有特别大的进展，所以并不过时。另外，这本书算是对97年前数十年机器学习工作的大综述，参考文献列表极有价值。国内有翻译和影印版，不知道绝版否。</p>
<p>《Modern Information Retrieval, Ricardo Baeza-Yates et al》. 1999<br>老书，牛人。貌似第一本完整讲述IR的书。可惜IR这些年进展迅猛，这本书略有些过时了。翻翻做参考还是不错的。另外，Ricardo同学现在是Yahoo Research for Europe and Latin Ameria的头头。</p>
<p>《Pattern Classification (2ed)》, Richard O. Duda, Peter E. Hart, David G. Stork<br>大约也是01年左右的大块头，有影印版，彩色。没读完，但如果想深入学习ML和IR，前三章（介绍，贝叶斯学习，线性分类器）必修。</p>
<p>还有些经典与我只有一面之缘，没有资格评价。另外还有两本小册子，论文集性质的，倒是讲到了了不少前沿和细节，诸如索引如何压缩之类。可惜忘了名字，又被我压在箱底，下次搬家前怕是难见天日了。</p>
<p>（呵呵，想起来一本：《Mining the Web - Discovering Knowledge from Hypertext Data》 ）</p>
<p>说一本名气很大的书：《Data Mining: Practical Machine Learning Tools and Techniques》。Weka 的作者写的。可惜内容一般。理论部分太单薄，而实践部分也很脱离实际。DM的入门书已经不少，这一本应该可以不看了。如果要学习了解 Weka ，看文档就好。第二版已经出了，没读过，不清楚。</p>
<h2 id="信息检索方面"><a href="#信息检索方面" class="headerlink" title="信息检索方面"></a>信息检索方面</h2><p>Du Lei 同学再次推荐：</p>
<p>信息检索方面的书现在建议看Stanford的那本《Introduction to Information Retrieval》，这书刚刚正式出版，内容当然up to date。另外信息检索第一大牛Croft老爷也正在写教科书，应该很快就要面世了。据说是非常pratical的一本书。</p>
<p>对信息检索有兴趣的同学，强烈推荐翟成祥博士在北大的暑期学校课程，这里有全slides和阅读材料：<a href="http://net.pku.edu.cn/~course/cs410/schedule.html" target="_blank" rel="external">http://net.pku.edu.cn/~course/cs410/schedule.html</a></p>
<h2 id="maximzhao-同学推荐了一本机器学习"><a href="#maximzhao-同学推荐了一本机器学习" class="headerlink" title="maximzhao 同学推荐了一本机器学习"></a>maximzhao 同学推荐了一本机器学习</h2><p>加一本书：Bishop, 《Pattern Recognition and Machine Learning》. 没有影印的，但是网上能下到。经典中的经典。Pattern Classification 和这本书是两本必读之书。《Pattern Recognition and Machine Learning》是很新（07年），深入浅出，手不释卷。</p>
<h2 id="最后，关于人工智能方面（特别地，决策与判断）"><a href="#最后，关于人工智能方面（特别地，决策与判断）" class="headerlink" title="最后，关于人工智能方面（特别地，决策与判断）"></a>最后，关于人工智能方面（特别地，决策与判断）</h2><p>再推荐两本有意思的书，</p>
<p>一本是《Simple Heuristics that Makes Us Smart》</p>
<p>另一本是《Bounded Rationality: The Adaptive Toolbox》</p>
<p>不同于计算机学界所采用的统计机器学习方法，这两本书更多地着眼于人类实际上所采用的认知方式，以下是我在讨论组上写的简介：</p>
<p>这两本都是德国ABC研究小组（一个由计算机科学家、认知科学家、神经科学家、经济学家、数学家、统计学家等组成的跨学科研究团体）集体写的，都是引起领域内广泛关注的书，尤其是前一本，後一本则是对 Herbert Simon （决策科学之父，诺奖获得者）提出的人类理性模型的扩充研究），可以说是把什么是真正的人类智能这个问题提上了台面。核心思想是，我们的大脑根本不能做大量的统计计算，使用fancy的数学手法去解释和预测这个世界，而是通过简单而鲁棒的启发法来面对不确定的世界（比如第一本书中提到的两个后来非常著名的启发法：再认启发法（cognition heuristics）和选择最佳（Take the Best）。当然，这两本书并没有排斥统计方法就是了，数据量大的时候统计优势就出来了，而数据量小的时候统计方法就变得非常糟糕；人类简单的启发法则充分利用生态环境中的规律性（regularities），都做到计算复杂性小且鲁棒。</p>
<p>关于第二本书的简介：</p>
<ol>
<li><p>谁是 <a href="http://en.wikipedia.org/wiki/Herbert_Simon" target="_blank" rel="external">Herbert Simon</a></p>
</li>
<li><p>什么是 <a href="http://en.wikipedia.org/wiki/Bounded_Rationality" target="_blank" rel="external">Bounded Rationality</a></p>
</li>
<li><p>这本书讲啥的：</p>
</li>
</ol>
<p>我一直觉得人类的决策与判断是一个非常迷人的问题。这本书简单地说可以看作是《决策与判断》的更全面更理论的版本。系统且理论化地介绍人类决策与判断过程中的各种启发式方法（heuristics）及其利弊 （为什么他们是最优化方法在信息不足情况下的快捷且鲁棒的逼近，以及为什么在一些情况下会带来糟糕的后果等，比如学过机器学习的都知道朴素贝叶斯方法在许多情况下往往并不比贝叶斯网络效果差，而且还速度快；比如多项式插值的维数越高越容易overfit，而基于低阶多项式的分段样条插值却被证明是一个非常鲁棒的方案）。</p>
<p>在此提一个书中提到的例子，非常有意思：两个团队被派去设计一个能够在场上接住抛过来的棒球的机器人。第一组做了详细的数学分析，建立了一个相当复杂的抛物线近似模型（因为还要考虑空气阻力之类的原因，所以并非严格抛物线），用于计算球的落点，以便正确地接到球。显然这个方案耗资巨大，而且实际运算也需要时间，大家都知道生物的神经网络中生物电流传输只有百米每秒之内，所以 computational complexity 对于生物来说是个宝贵资源，所以这个方案虽然可行，但不够好。第二组则采访了真正的运动员，听取他们总结自己到底是如何接球的感受，然后他们做了这样一个机器人：这个机器人在球抛出的一开始一半路程啥也不做，等到比较近了才开始跑动，并在跑动中一直保持眼睛于球之间的视角不变，后者就保证了机器人的跑动路线一定会和球的轨迹有交点；整个过程中这个机器人只做非常粗糙的轨迹估算。体会一下你接球的时候是不是眼睛一直都盯着球，然后根据视线角度来调整跑动方向？实际上人类就是这么干的，这就是 heuristics 的力量。</p>
<p>相对于偏向于心理学以及科普的《决策与判断》来说，这本书的理论性更强，引用文献也很多而经典，而且与人工智能和机器学习都有交叉，里面也有不少数学内容，全书由十几个章节构成，每个章节都是由不同的作者写的，类似于 paper 一样的，很严谨，也没啥废话，跟 《Psychology of Problem Solving》类似。比较适合 geeks 阅读哈。</p>
<p>另外，对理论的技术细节看不下去的也建议看看《决策与判断》这类书（以及像《别做正常的傻瓜》这样的傻瓜科普读本），对自己在生活中做决策有莫大的好处。人类决策与判断中使用了很多的 heuristics ，很不幸的是，其中许多都是在适应几十万年前的社会环境中建立起来的，并不适合于现代社会，所以了解这些思维中的缺点、盲点，对自己成为一个良好的决策者有很大的好处，而且这本身也是一个非常有趣的领域。</p>
<p>（完）</p>
<p>P.S. 大家有什么好的资料请至<a href="https://groups.google.com/group/pongba/browse_thread/thread/66ed97d6b34613c2#" target="_blank" rel="external">讨论组</a>上留言。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.douban.com/doulist/176513/" target="_blank" rel="external">机器学习与人工智能</a><br><a href="https://www.douban.com/doulist/46003/" target="_blank" rel="external">『只读经典』思维改变生活（原“心理学改变生活”）</a><br><a href="https://www.douban.com/doulist/127649/" target="_blank" rel="external">『只读经典』思考的技术与艺术（原“学会思考”）</a><br><a href="https://www.douban.com/doulist/197706/" target="_blank" rel="external">『只读经典』判断与决策</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;思维改变生活&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;机器学习与人工智能学习资源导引&quot;&gt;&lt;a href=&quot;#机器学习与人工智能学习资源导引&quot; class=&quot;headerlink&quot; title=&quot;机器学习与人工智能学习资源导引&quot;&gt;&lt;/a&gt;机器学习与人工智能学习资源导引&lt;/h2&gt;&lt;p&gt;作者：刘未鹏&lt;br&gt;C++的罗浮宫博客新地址：&lt;a href=&quot;http://mindhacks.cn&quot;&gt;http://mindhacks.cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mindhacks.cn/wp-content/uploads/2016/12/card1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="Resource" scheme="http://ipcreator.me/tags/Resource/"/>
    
      <category term="Book" scheme="http://ipcreator.me/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>Resources of Android Coding</title>
    <link href="http://ipcreator.me/2017/03/26/Program/Android/learning-resource-of-android/"/>
    <id>http://ipcreator.me/2017/03/26/Program/Android/learning-resource-of-android/</id>
    <published>2017-03-26T00:04:06.000Z</published>
    <updated>2017-03-27T10:24:38.030Z</updated>
    
    <content type="html"><![CDATA[<p>一、代码阅览类<br>二、技术学习类<br>三、SDK及源码下载更新类<br>四、UI控件类<br>五、工具类</p>
<a id="more"></a>
<h1 id="Coding相关的学习网站推荐"><a href="#Coding相关的学习网站推荐" class="headerlink" title="Coding相关的学习网站推荐"></a><a href="http://blog.csdn.net/yelangjueqi/article/details/52454142" target="_blank" rel="external">Coding相关的学习网站推荐</a></h1><p><a href="http://my.csdn.net/dadaxiaoxiaode" target="_blank" rel="external">作者：ShyBoy天天向上</a></p>
<h2 id="一、代码阅览类"><a href="#一、代码阅览类" class="headerlink" title="一、代码阅览类"></a>一、代码阅览类</h2><p><a href="http://androidxref.com/" target="_blank" rel="external">http://androidxref.com/</a>     Android系统源码极速搜索<br><a href="https://source.codeaurora.org/" target="_blank" rel="external">https://source.codeaurora.org/</a>   qcom开源Android Source<br><a href="http://www.grepcode.com/" target="_blank" rel="external">http://www.grepcode.com/</a>   grep api<br><a href="https://github.com/android" target="_blank" rel="external">https://github.com/android</a><br><a href="http://source.android.com/source/" target="_blank" rel="external">http://source.android.com/source/</a><br><a href="https://developers.google.com/" target="_blank" rel="external">https://developers.google.com/</a><br><a href="http://android.xsoftlab.net/index.html" target="_blank" rel="external">http://android.xsoftlab.net/index.html</a>   Android 镜像<br><a href="https://developers.google.cn/" target="_blank" rel="external">https://developers.google.cn/</a>   Google Developer<br><a href="https://developer.android.google.cn/index.html" target="_blank" rel="external">https://developer.android.google.cn/index.html</a>   Android Developer<br><a href="https://developers.google.cn/china/" target="_blank" rel="external">https://developers.google.cn/china/</a>  Google中国开发者</p>
<p>Code Style<br><a href="https://github.com/google/styleguide" target="_blank" rel="external">https://github.com/google/styleguide</a>   Style guides for Google-originated open-source projects</p>
<p>Google Style Guides</p>
<p>Every major open-source project has its own style guide: a set of conventions (sometimes arbitrary) about how to write code for that project. It is much easier to understand a large codebase when all the code in it is in a consistent style.</p>
<p>“Style” covers a lot of ground, from “use camelCase for variable names” to “never use global variables” to “never use exceptions.” This project holds the style guidelines we use for Google code. If you are modifying a project that originated at Google, you may be pointed to this page to see the style guides that apply to that project.</p>
<p>Our C++ Style Guide, Objective-C Style Guide, Java Style Guide, Python Style Guide, R Style Guide, Shell Style Guide, HTML/CSS Style Guide, JavaScript Style Guide, AngularJS Style Guide, Common Lisp Style Guide, and Vimscript Style Guide are now available. We have also released cpplint, a tool to assist with style guide compliance, and google-c-style.el, an Emacs settings file for Google style.</p>
<p>If your project requires that you create a new XML document format, our XML Document Format Style Guide may be helpful. In addition to actual style rules, it also contains advice on designing your own vs. adapting an existing format, on XML instance document formatting, and on elements vs. attributes.</p>
<p>These style guides are licensed under the CC-By 3.0 License, which encourages you to share these documents. See<a href="https://creativecommons.org/licenses/by/3.0/" target="_blank" rel="external">https://creativecommons.org/licenses/by/3.0/</a> for more details.</p>
<p><a href="https://google.github.io/styleguide/javaguide.html" target="_blank" rel="external">https://google.github.io/styleguide/javaguide.html</a> Google Java Style Guide<br><a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="external">https://google.github.io/styleguide/cppguide.html</a>   Google C++ Style Guide</p>
<p>以下需要梯子<br><a href="https://material.google.com" target="_blank" rel="external">https://material.google.com</a>   GUI StandardMaterial Design Guideline<br><a href="https://design.google.com" target="_blank" rel="external">https://design.google.com</a><br><a href="https://android-review.googlesource.com" target="_blank" rel="external">https://android-review.googlesource.com</a>    Google Review<br><a href="https://android.googlesource.com/platform" target="_blank" rel="external">https://android.googlesource.com/platform</a>  或 <a href="http://android.googlesource.com/platform" target="_blank" rel="external">http://android.googlesource.com/platform</a>  //各种版本的都有<br><a href="https://android.googlesource.com/platform/frameworks/base/" target="_blank" rel="external">https://android.googlesource.com/platform/frameworks/base/</a><br><a href="https://android.googlesource.com/platform/packages" target="_blank" rel="external">https://android.googlesource.com/platform/packages</a></p>
<p><a href="http://blog.csdn.net/deng0zhaotai/article/details/17512515" target="_blank" rel="external">http://blog.csdn.net/deng0zhaotai/article/details/17512515</a>   Windows环境下通过Git得到Android源代码<br>没法翻墙的，参考：<a href="https://mirror.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="external">https://mirror.tuna.tsinghua.edu.cn/help/AOSP/</a><br>参考 Google 教程 <a href="https://source.android.com/source/downloading.html，" target="_blank" rel="external">https://source.android.com/source/downloading.html，</a> 将 <a href="https://android.googlesource.com/" target="_blank" rel="external">https://android.googlesource.com/</a> 全部使用 <a href="https://aosp.tuna.tsinghua.edu.cn/" target="_blank" rel="external">https://aosp.tuna.tsinghua.edu.cn/</a> 代替即可。<br>eg:<br>git clone <a href="https://aosp.tuna.tsinghua.edu.cn/platform/packages/apps/DeskClock/" target="_blank" rel="external">https://aosp.tuna.tsinghua.edu.cn/platform/packages/apps/DeskClock/</a><br>git clone <a href="https://aosp.tuna.tsinghua.edu.cn/platform/frameworks/base" target="_blank" rel="external">https://aosp.tuna.tsinghua.edu.cn/platform/frameworks/base</a><br>然后使用git工具clone(见 Windows环境下通过Git得到Android源代码)即可得到源码。</p>
<h2 id="二、技术学习类"><a href="#二、技术学习类" class="headerlink" title="二、技术学习类"></a>二、技术学习类</h2><p><a href="https://developers.google.cn/" target="_blank" rel="external">https://developers.google.cn/</a>  Google Developers<br><a href="http://www.jianshu.com/p/85cb02292acc" target="_blank" rel="external">http://www.jianshu.com/p/85cb02292acc</a>         10个很棒的学习Android 开发的网站<br><a href="http://www.tutorialspoint.com/android/" target="_blank" rel="external">http://www.tutorialspoint.com/android/</a>             是一个专业的技术教程网站<br><a href="http://www.vogella.com/tutorials/android.html" target="_blank" rel="external">http://www.vogella.com/tutorials/android.html</a>   提供的Android 开发教程也是可圈可点的<br><a href="http://gold.xitu.io/" target="_blank" rel="external">http://gold.xitu.io/</a>      掘金 高质量的技术社区<br><a href="http://so.csdn.net/so/" target="_blank" rel="external">http://so.csdn.net/so/</a>     csdn搜索<br><a href="https://segmentfault.com/" target="_blank" rel="external">https://segmentfault.com/</a>     segmentfault 中国领先的开发者社区<br><a href="http://www.jianshu.com/" target="_blank" rel="external">http://www.jianshu.com/</a>     简书 包罗万象的专题<br><a href="http://ruby-china.org/" target="_blank" rel="external">http://ruby-china.org/</a>       ruby中文社区<br><a href="http://www.javased.com/" target="_blank" rel="external">http://www.javased.com/</a>    查找Android API示例代码的网站<br><a href="http://www.jcodecraeer.com/" target="_blank" rel="external">http://www.jcodecraeer.com/</a>  泡在网上的日子<br><a href="http://www.cnblogs.com/" target="_blank" rel="external">http://www.cnblogs.com/</a>   博客园<br><a href="http://www.codeceo.com/" target="_blank" rel="external">http://www.codeceo.com/</a>  码农网<br><a href="http://www.imooc.com/" target="_blank" rel="external">http://www.imooc.com/</a>   慕课网(IMOOC)<br><a href="http://www.materialdoc.cn/" target="_blank" rel="external">http://www.materialdoc.cn/</a>   Material Design<br><a href="http://duanmo.me/2016/04/17/memory-leak-summary/" target="_blank" rel="external">http://duanmo.me/2016/04/17/memory-leak-summary/</a>  Android 内存泄露总结<br><a href="http://blog.csdn.net/yiyaaixuexi/article/details/6716884" target="_blank" rel="external">http://blog.csdn.net/yiyaaixuexi/article/details/6716884</a>  Android代码调试工具 traceview 和 dmtracedump的波折演绎<br><a href="https://www.openssl.org/" target="_blank" rel="external">https://www.openssl.org/</a>  openssl<br><a href="http://www.androiddevtools.cn/index.html" target="_blank" rel="external">http://www.androiddevtools.cn/index.html</a><br>Ubuntu 命令技巧: <a href="http://wiki.ubuntu.org.cn/index.php?title=UbuntuSkills&amp;variant=zh-cn" target="_blank" rel="external">http://wiki.ubuntu.org.cn/index.php?title=UbuntuSkills&amp;variant=zh-cn</a><br>Ubuntu 桌面指南: <a href="https://help.ubuntu.com//" target="_blank" rel="external">https://help.ubuntu.com//</a></p>
<p>聚合数据-免费数据调用 <a href="https://www.juhe.cn/" target="_blank" rel="external">https://www.juhe.cn/</a><br>有赞- 免费的微商城 <a href="http://youzan.com/" target="_blank" rel="external">http://youzan.com/</a><br>秀米微信图文编辑器 <a href="http://xiumi.us/" target="_blank" rel="external">http://xiumi.us/</a><br>禅道项目管理软件 <a href="http://www.zentao.net/" target="_blank" rel="external">http://www.zentao.net/</a><br>安卓开发工具平台 <a href="http://www.androiddevtools.cn/" target="_blank" rel="external">http://www.androiddevtools.cn/</a><br>友盟_开发者服务平台 <a href="http://www.umeng.com/" target="_blank" rel="external">http://www.umeng.com/</a><br>Bmob移动后端云服务平台 <a href="http://www.bmob.cn/" target="_blank" rel="external">http://www.bmob.cn/</a><br>初页- 优质H5微信海报 手机应用<br>兔展-移动H5页面 <a href="http://www.rabbitpre.com/" target="_blank" rel="external">http://www.rabbitpre.com/</a><br>安卓视频平台 <a href="https://www.vitamio.org/" target="_blank" rel="external">https://www.vitamio.org/</a><br>安卓开源项目分类汇总 <a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">https://github.com/Trinea/android-open-project</a><br>Github的开源项目汇总 <a href="http://www.eoeandroid.com/thread-546248-1-3.html" target="_blank" rel="external">http://www.eoeandroid.com/thread-546248-1-3.html</a><br>Android design中文版 <a href="http://adchs.github.io/index.html" target="_blank" rel="external">http://adchs.github.io/index.html</a><br>Android官方课程中文版 <a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">http://hukai.me/android-training-course-in-chinese/index.html</a><br>图标 <a href="https://www.google.com/design/icons/#ic_search" target="_blank" rel="external">https://www.google.com/design/icons/#ic_search</a><br>Android开发者博客 <a href="http://android-developers.blogspot.jp/" target="_blank" rel="external">http://android-developers.blogspot.jp/</a><br>泡在网上的日子 <a href="http://www.jcodecraeer.com/" target="_blank" rel="external">http://www.jcodecraeer.com/</a><br>AS中文社区 <a href="http://www.android-studio.org/" target="_blank" rel="external">http://www.android-studio.org/</a><br>testin云测 <a href="http://www.testin.cn/portal.action?op=Portal.index" target="_blank" rel="external">http://www.testin.cn/portal.action?op=Portal.index</a></p>
<h2 id="三、SDK及源码下载更新类"><a href="#三、SDK及源码下载更新类" class="headerlink" title="三、SDK及源码下载更新类"></a>三、SDK及源码下载更新类</h2><p><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">http://www.androiddevtools.cn/</a>  Android开发环境及工具，列举了很多<br><a href="http://tools.android-studio.org/index.php/proxy" target="_blank" rel="external">http://tools.android-studio.org/index.php/proxy</a>  Android SDK在线更新镜像服务器资源<br><a href="http://ask.android-studio.org/?/article/34" target="_blank" rel="external">http://ask.android-studio.org/?/article/34</a>           Android SDK在线更新镜像服务器资源<br>A，测试镜像服务器网速：<a href="http://ping.chinaz.com/" target="_blank" rel="external">http://ping.chinaz.com/</a><br>B，或下载工具(<a href="http://www.xdowns.com/soft/6/99/2016/Soft_156717.html" target="_blank" rel="external">http://www.xdowns.com/soft/6/99/2016/Soft_156717.html</a>)<br>      通过cmd命令行测试：http-ping.exe <a href="http://sdk.gdgshanghai.com" target="_blank" rel="external">http://sdk.gdgshanghai.com</a></p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="external">https://mirrors.tuna.tsinghua.edu.cn/</a>  清华大学镜像源<br><a href="http://www.cnblogs.com/bluestorm/p/4419051.html" target="_blank" rel="external">http://www.cnblogs.com/bluestorm/p/4419051.html</a>   同步、更新、下载Android Source &amp; SDK from 国内镜像站<br><a href="http://www.cnblogs.com/bluestorm/p/4419135.html" target="_blank" rel="external">http://www.cnblogs.com/bluestorm/p/4419135.html</a>  Ubuntu 下载 &amp; 编译 Android5.1 源码<br><a href="http://blog.csdn.net/gyming/article/details/8168166/" target="_blank" rel="external">http://blog.csdn.net/gyming/article/details/8168166/</a>   Android应用开发相关下载资源(2016/07/24更新)<br>Android源代码国内下载镜像 (android source mirror: <a href="http://mirror.neu.edu.cn/android/platform/" target="_blank" rel="external">http://mirror.neu.edu.cn/android/platform/</a>)</p>
<h2 id="四、UI控件类"><a href="#四、UI控件类" class="headerlink" title="四、UI控件类"></a>四、UI控件类</h2><p>Android开源项目总结(<a href="http://hunankeda110.iteye.com/blog/2103569)(个性化控件，工具库等，非常丰富" target="_blank" rel="external">http://hunankeda110.iteye.com/blog/2103569)(个性化控件，工具库等，非常丰富</a>)<br>GitHub优秀的开源项目(<a href="http://blog.csdn.net/xiechengfa/article/details/38536643" target="_blank" rel="external">http://blog.csdn.net/xiechengfa/article/details/38536643</a>) (赞); 或hawkon (<a href="http://www.cnblogs.com/hawkon/p/3593709.html" target="_blank" rel="external">http://www.cnblogs.com/hawkon/p/3593709.html</a>)</p>
<h2 id="五、工具类"><a href="#五、工具类" class="headerlink" title="五、工具类"></a>五、工具类</h2><p><a href="http://www.thefilehippo.com/" target="_blank" rel="external">http://www.thefilehippo.com/</a>  需要翻墙，一个不错的下载网站，里面有很多离线安装包<br><a href="http://www.thefilehippo.com/search/label/Browsers" target="_blank" rel="external">http://www.thefilehippo.com/search/label/Browsers</a>   可以找到最新的google浏览器离线安装包<br><a href="https://www.tutorialspoint.com/uml/uml_2_overview.htm" target="_blank" rel="external">https://www.tutorialspoint.com/uml/uml_2_overview.htm</a>  UM L 2.0<br><a href="http://www.uml.org/index.htm" target="_blank" rel="external">http://www.uml.org/index.htm</a>  uml<br><a href="http://www.omg.org/spec/UML/2.0/" target="_blank" rel="external">http://www.omg.org/spec/UML/2.0/</a>  pdf<br><a href="http://www.uml-diagrams.org/" target="_blank" rel="external">http://www.uml-diagrams.org/</a>    uml 图<br><a href="http://tool.lu/hexconvert/" target="_blank" rel="external">http://tool.lu/hexconvert/</a>    进制转换<br><a href="https://git-scm.com/docs" target="_blank" rel="external">https://git-scm.com/docs</a> Git command help<br>ftp://www.kernel.org/pub/software/scm/git/docs/   Git command<br><a href="http://www.eclipse.org/downloads/packages/all" target="_blank" rel="external">http://www.eclipse.org/downloads/packages/all</a> eclipse大全<br><a href="http://www.xitongzhijia.net/" target="_blank" rel="external">http://www.xitongzhijia.net/</a>  系统之家　工具和系统下载<br><a href="http://www.xp510.com/" target="_blank" rel="external">http://www.xp510.com/</a>  XP系统之家，绿色下载网站  不错<br><a href="http://imcn.me/" target="_blank" rel="external">http://imcn.me/</a>　Linux工具<br>PS:<br><a href="http://download.csdn.net/detail/dadaxiaoxiaode/9631931" target="_blank" rel="external">http://download.csdn.net/detail/dadaxiaoxiaode/9631931</a>   google 32bit 离线安装包 20160914发布的<br><a href="http://download.csdn.net/detail/dadaxiaoxiaode/9631926" target="_blank" rel="external">http://download.csdn.net/detail/dadaxiaoxiaode/9631926</a>   google 64bit 离线安装包 20160914发布的</p>
<p><a href="http://www.panduoduo.net/" target="_blank" rel="external">http://www.panduoduo.net/</a><br><a href="http://pan.java1234.com/" target="_blank" rel="external">http://pan.java1234.com/</a><br><a href="http://www.baiduyunwangpan.com/" target="_blank" rel="external">http://www.baiduyunwangpan.com/</a></p>
<p><a href="http://www.sobaidupan.com/" target="_blank" rel="external">http://www.sobaidupan.com/</a> 强大<br><a href="http://soft.sobaidupan.com/" target="_blank" rel="external">http://soft.sobaidupan.com/</a>   百度云搜索器</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、代码阅览类&lt;br&gt;二、技术学习类&lt;br&gt;三、SDK及源码下载更新类&lt;br&gt;四、UI控件类&lt;br&gt;五、工具类&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Resource" scheme="http://ipcreator.me/tags/Resource/"/>
    
  </entry>
  
  <entry>
    <title>Sobaidupan——BaiduYun Searcher</title>
    <link href="http://ipcreator.me/2017/03/26/Program/Tools/Others/baiduyun-search/"/>
    <id>http://ipcreator.me/2017/03/26/Program/Tools/Others/baiduyun-search/</id>
    <published>2017-03-25T23:56:06.000Z</published>
    <updated>2017-03-27T09:52:38.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>神雕侠侣<br>A：搜百度盘+百度云官方客户端<br>B：P2PSearcher+迅雷</p>
</blockquote>
<p><img src="http://www.sobaidupan.com/image/logo.gif" alt=""></p>
<p>网址：<a href="http://www.sobaidupan.com/" target="_blank" rel="external">http://www.sobaidupan.com/</a><br>工具：<a href="http://soft.sobaidupan.com/" target="_blank" rel="external">http://soft.sobaidupan.com/</a></p>
<p>百度云搜索器（Ver 1.2.7.9）<br>百度云搜索器是一款专业强大的百度网盘资源搜索软件，数据庞大，搜索极快，简单易用，绿色小巧，无需安装，是目前互联网同行中百度云搜索最好的软件之一，可以搜索种子、电影、视频、MP3、游戏、系统、教育资源、图片、光盘文件、小说、文档、手机APP等几十种各种各样的资源！<br>支持系统：MS WinXP/Win7/win8/win10(32/64)以上系统.</p>
<a id="more"></a>
<p><img src="http://soft.sobaidupan.com/pic/yun.png" alt=""></p>
<p><a href="http://soft.sobaidupan.com/%E7%99%BE%E5%BA%A6%E4%BA%91%E6%90%9C%E7%B4%A2%E5%99%A8.rar" target="_blank" rel="external">百度云搜索器 下载地址</a></p>
<p>注意：软件运行需要.net 4.0 框架支持，如果你无法运行本软件，请先安装 .net 4.0<br>下载地址一：<a href="https://download.microsoft.com/download/9/5/A/95A9616B-7A37-4AF6-BC36-D6EA96C8DAAE/dotNetFx40_Full_x86_x64.exe" target="_blank" rel="external">https://download.microsoft.com/download/9/5/A/95A9616B-7A37-4AF6-BC36-D6EA96C8DAAE/dotNetFx40_Full_x86_x64.exe</a><br>下载地址二： <a href="http://pan.baidu.com/s/1qXKCILm" target="_blank" rel="external">http://pan.baidu.com/s/1qXKCILm</a></p>
<p><a href="http://download.p2psearchers.com/exe/P2PSearcher.v6.4.8.exe" target="_blank" rel="external">P2PSearcher 下载地址</a></p>
<p><strong>突破P2P网络封杀限制</strong><br>云播资源搜索结果最丰富。智能排序定位精准，立即找到想要的资源。新版可突破服务器封杀限制，最强大的种子搜索器。</p>
<p><strong>多个云播通道自由选择</strong><br>整合多个云播引擎，搜索结果可预览，可直接云播放。排除枪版、葫芦娃。云播放最稳定的种子搜索神器。</p>
<p><strong>绿色纯净单文件</strong><br>纯绿色软件，解压即用，不写注册表，无插件无广告。请收藏官方网站，以免下载第三方打包过的虚假版本造成不必要损失。</p>
<h1 id="Coding相关的学习网站推荐"><a href="#Coding相关的学习网站推荐" class="headerlink" title="Coding相关的学习网站推荐"></a><a href="http://blog.csdn.net/yelangjueqi/article/details/52454142" target="_blank" rel="external">Coding相关的学习网站推荐</a></h1><p><a href="http://my.csdn.net/dadaxiaoxiaode" target="_blank" rel="external">作者：ShyBoy天天向上</a></p>
<h2 id="一-代码阅览类"><a href="#一-代码阅览类" class="headerlink" title="一 代码阅览类"></a>一 代码阅览类</h2><p><a href="http://androidxref.com/" target="_blank" rel="external">http://androidxref.com/</a>     Android系统源码极速搜索<br><a href="https://source.codeaurora.org/" target="_blank" rel="external">https://source.codeaurora.org/</a>   qcom开源Android Source<br><a href="http://www.grepcode.com/" target="_blank" rel="external">http://www.grepcode.com/</a>   grep api<br><a href="https://github.com/android" target="_blank" rel="external">https://github.com/android</a><br><a href="http://source.android.com/source/" target="_blank" rel="external">http://source.android.com/source/</a><br><a href="https://developers.google.com/" target="_blank" rel="external">https://developers.google.com/</a><br><a href="http://android.xsoftlab.net/index.html" target="_blank" rel="external">http://android.xsoftlab.net/index.html</a>   Android 镜像<br><a href="https://developers.google.cn/" target="_blank" rel="external">https://developers.google.cn/</a>   Google Developer<br><a href="https://developer.android.google.cn/index.html" target="_blank" rel="external">https://developer.android.google.cn/index.html</a>   Android Developer<br><a href="https://developers.google.cn/china/" target="_blank" rel="external">https://developers.google.cn/china/</a>  Google中国开发者</p>
<p>Code Style<br><a href="https://github.com/google/styleguide" target="_blank" rel="external">https://github.com/google/styleguide</a>   Style guides for Google-originated open-source projects</p>
<p>Google Style Guides</p>
<p>Every major open-source project has its own style guide: a set of conventions (sometimes arbitrary) about how to write code for that project. It is much easier to understand a large codebase when all the code in it is in a consistent style.</p>
<p>“Style” covers a lot of ground, from “use camelCase for variable names” to “never use global variables” to “never use exceptions.” This project holds the style guidelines we use for Google code. If you are modifying a project that originated at Google, you may be pointed to this page to see the style guides that apply to that project.</p>
<p>Our C++ Style Guide, Objective-C Style Guide, Java Style Guide, Python Style Guide, R Style Guide, Shell Style Guide, HTML/CSS Style Guide, JavaScript Style Guide, AngularJS Style Guide, Common Lisp Style Guide, and Vimscript Style Guide are now available. We have also released cpplint, a tool to assist with style guide compliance, and google-c-style.el, an Emacs settings file for Google style.</p>
<p>If your project requires that you create a new XML document format, our XML Document Format Style Guide may be helpful. In addition to actual style rules, it also contains advice on designing your own vs. adapting an existing format, on XML instance document formatting, and on elements vs. attributes.</p>
<p>These style guides are licensed under the CC-By 3.0 License, which encourages you to share these documents. See<a href="https://creativecommons.org/licenses/by/3.0/" target="_blank" rel="external">https://creativecommons.org/licenses/by/3.0/</a> for more details.</p>
<p><a href="https://google.github.io/styleguide/javaguide.html" target="_blank" rel="external">https://google.github.io/styleguide/javaguide.html</a> Google Java Style Guide<br><a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="external">https://google.github.io/styleguide/cppguide.html</a>   Google C++ Style Guide</p>
<p>以下需要梯子<br><a href="https://material.google.com" target="_blank" rel="external">https://material.google.com</a>   GUI StandardMaterial Design Guideline<br><a href="https://design.google.com" target="_blank" rel="external">https://design.google.com</a><br><a href="https://android-review.googlesource.com" target="_blank" rel="external">https://android-review.googlesource.com</a>    Google Review<br><a href="https://android.googlesource.com/platform" target="_blank" rel="external">https://android.googlesource.com/platform</a>  或 <a href="http://android.googlesource.com/platform" target="_blank" rel="external">http://android.googlesource.com/platform</a>  //各种版本的都有<br><a href="https://android.googlesource.com/platform/frameworks/base/" target="_blank" rel="external">https://android.googlesource.com/platform/frameworks/base/</a><br><a href="https://android.googlesource.com/platform/packages" target="_blank" rel="external">https://android.googlesource.com/platform/packages</a></p>
<p><a href="http://blog.csdn.net/deng0zhaotai/article/details/17512515" target="_blank" rel="external">http://blog.csdn.net/deng0zhaotai/article/details/17512515</a>   Windows环境下通过Git得到Android源代码<br>没法翻墙的，参考：<a href="https://mirror.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="external">https://mirror.tuna.tsinghua.edu.cn/help/AOSP/</a><br>参考 Google 教程 <a href="https://source.android.com/source/downloading.html，" target="_blank" rel="external">https://source.android.com/source/downloading.html，</a> 将 <a href="https://android.googlesource.com/" target="_blank" rel="external">https://android.googlesource.com/</a> 全部使用 <a href="https://aosp.tuna.tsinghua.edu.cn/" target="_blank" rel="external">https://aosp.tuna.tsinghua.edu.cn/</a> 代替即可。<br>eg:<br>git clone <a href="https://aosp.tuna.tsinghua.edu.cn/platform/packages/apps/DeskClock/" target="_blank" rel="external">https://aosp.tuna.tsinghua.edu.cn/platform/packages/apps/DeskClock/</a><br>git clone <a href="https://aosp.tuna.tsinghua.edu.cn/platform/frameworks/base" target="_blank" rel="external">https://aosp.tuna.tsinghua.edu.cn/platform/frameworks/base</a><br>然后使用git工具clone(见 Windows环境下通过Git得到Android源代码)即可得到源码。</p>
<h2 id="二-技术学习类"><a href="#二-技术学习类" class="headerlink" title="二 技术学习类"></a>二 技术学习类</h2><p><a href="https://developers.google.cn/" target="_blank" rel="external">https://developers.google.cn/</a>  Google Developers<br><a href="http://www.jianshu.com/p/85cb02292acc" target="_blank" rel="external">http://www.jianshu.com/p/85cb02292acc</a>         10个很棒的学习Android 开发的网站<br><a href="http://www.tutorialspoint.com/android/" target="_blank" rel="external">http://www.tutorialspoint.com/android/</a>             是一个专业的技术教程网站<br><a href="http://www.vogella.com/tutorials/android.html" target="_blank" rel="external">http://www.vogella.com/tutorials/android.html</a>   提供的Android 开发教程也是可圈可点的<br><a href="http://gold.xitu.io/" target="_blank" rel="external">http://gold.xitu.io/</a>      掘金 高质量的技术社区<br><a href="http://so.csdn.net/so/" target="_blank" rel="external">http://so.csdn.net/so/</a>     csdn搜索<br><a href="https://segmentfault.com/" target="_blank" rel="external">https://segmentfault.com/</a>     segmentfault 中国领先的开发者社区<br><a href="http://www.jianshu.com/" target="_blank" rel="external">http://www.jianshu.com/</a>     简书 包罗万象的专题<br><a href="http://ruby-china.org/" target="_blank" rel="external">http://ruby-china.org/</a>       ruby中文社区<br><a href="http://www.javased.com/" target="_blank" rel="external">http://www.javased.com/</a>    查找Android API示例代码的网站<br><a href="http://www.jcodecraeer.com/" target="_blank" rel="external">http://www.jcodecraeer.com/</a>  泡在网上的日子<br><a href="http://www.cnblogs.com/" target="_blank" rel="external">http://www.cnblogs.com/</a>   博客园<br><a href="http://www.codeceo.com/" target="_blank" rel="external">http://www.codeceo.com/</a>  码农网<br><a href="http://www.imooc.com/" target="_blank" rel="external">http://www.imooc.com/</a>   慕课网(IMOOC)<br><a href="http://www.materialdoc.cn/" target="_blank" rel="external">http://www.materialdoc.cn/</a>   Material Design<br><a href="http://duanmo.me/2016/04/17/memory-leak-summary/" target="_blank" rel="external">http://duanmo.me/2016/04/17/memory-leak-summary/</a>  Android 内存泄露总结<br><a href="http://blog.csdn.net/yiyaaixuexi/article/details/6716884" target="_blank" rel="external">http://blog.csdn.net/yiyaaixuexi/article/details/6716884</a>  Android代码调试工具 traceview 和 dmtracedump的波折演绎<br><a href="https://www.openssl.org/" target="_blank" rel="external">https://www.openssl.org/</a>  openssl<br><a href="http://www.androiddevtools.cn/index.html" target="_blank" rel="external">http://www.androiddevtools.cn/index.html</a><br>Ubuntu 命令技巧: <a href="http://wiki.ubuntu.org.cn/index.php?title=UbuntuSkills&amp;variant=zh-cn" target="_blank" rel="external">http://wiki.ubuntu.org.cn/index.php?title=UbuntuSkills&amp;variant=zh-cn</a><br>Ubuntu 桌面指南: <a href="https://help.ubuntu.com//" target="_blank" rel="external">https://help.ubuntu.com//</a></p>
<p>聚合数据-免费数据调用 <a href="https://www.juhe.cn/" target="_blank" rel="external">https://www.juhe.cn/</a><br>有赞- 免费的微商城 <a href="http://youzan.com/" target="_blank" rel="external">http://youzan.com/</a><br>秀米微信图文编辑器 <a href="http://xiumi.us/" target="_blank" rel="external">http://xiumi.us/</a><br>禅道项目管理软件 <a href="http://www.zentao.net/" target="_blank" rel="external">http://www.zentao.net/</a><br>安卓开发工具平台 <a href="http://www.androiddevtools.cn/" target="_blank" rel="external">http://www.androiddevtools.cn/</a><br>友盟_开发者服务平台 <a href="http://www.umeng.com/" target="_blank" rel="external">http://www.umeng.com/</a><br>Bmob移动后端云服务平台 <a href="http://www.bmob.cn/" target="_blank" rel="external">http://www.bmob.cn/</a><br>初页- 优质H5微信海报 手机应用<br>兔展-移动H5页面 <a href="http://www.rabbitpre.com/" target="_blank" rel="external">http://www.rabbitpre.com/</a><br>安卓视频平台 <a href="https://www.vitamio.org/" target="_blank" rel="external">https://www.vitamio.org/</a><br>安卓开源项目分类汇总 <a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">https://github.com/Trinea/android-open-project</a><br>Github的开源项目汇总 <a href="http://www.eoeandroid.com/thread-546248-1-3.html" target="_blank" rel="external">http://www.eoeandroid.com/thread-546248-1-3.html</a><br>Android design中文版 <a href="http://adchs.github.io/index.html" target="_blank" rel="external">http://adchs.github.io/index.html</a><br>Android官方课程中文版 <a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">http://hukai.me/android-training-course-in-chinese/index.html</a><br>图标 <a href="https://www.google.com/design/icons/#ic_search" target="_blank" rel="external">https://www.google.com/design/icons/#ic_search</a><br>Android开发者博客 <a href="http://android-developers.blogspot.jp/" target="_blank" rel="external">http://android-developers.blogspot.jp/</a><br>泡在网上的日子 <a href="http://www.jcodecraeer.com/" target="_blank" rel="external">http://www.jcodecraeer.com/</a><br>AS中文社区 <a href="http://www.android-studio.org/" target="_blank" rel="external">http://www.android-studio.org/</a><br>testin云测 <a href="http://www.testin.cn/portal.action?op=Portal.index" target="_blank" rel="external">http://www.testin.cn/portal.action?op=Portal.index</a></p>
<h2 id="三-SDK及源码下载更新类"><a href="#三-SDK及源码下载更新类" class="headerlink" title="三 SDK及源码下载更新类"></a>三 SDK及源码下载更新类</h2><p><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">http://www.androiddevtools.cn/</a>  Android开发环境及工具，列举了很多<br><a href="http://tools.android-studio.org/index.php/proxy" target="_blank" rel="external">http://tools.android-studio.org/index.php/proxy</a>  Android SDK在线更新镜像服务器资源<br><a href="http://ask.android-studio.org/?/article/34" target="_blank" rel="external">http://ask.android-studio.org/?/article/34</a>           Android SDK在线更新镜像服务器资源<br>A，测试镜像服务器网速：<a href="http://ping.chinaz.com/" target="_blank" rel="external">http://ping.chinaz.com/</a><br>B，或下载工具(<a href="http://www.xdowns.com/soft/6/99/2016/Soft_156717.html" target="_blank" rel="external">http://www.xdowns.com/soft/6/99/2016/Soft_156717.html</a>)<br>      通过cmd命令行测试：http-ping.exe <a href="http://sdk.gdgshanghai.com" target="_blank" rel="external">http://sdk.gdgshanghai.com</a></p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="external">https://mirrors.tuna.tsinghua.edu.cn/</a>  清华大学镜像源<br><a href="http://www.cnblogs.com/bluestorm/p/4419051.html" target="_blank" rel="external">http://www.cnblogs.com/bluestorm/p/4419051.html</a>   同步、更新、下载Android Source &amp; SDK from 国内镜像站<br><a href="http://www.cnblogs.com/bluestorm/p/4419135.html" target="_blank" rel="external">http://www.cnblogs.com/bluestorm/p/4419135.html</a>  Ubuntu 下载 &amp; 编译 Android5.1 源码<br><a href="http://blog.csdn.net/gyming/article/details/8168166/" target="_blank" rel="external">http://blog.csdn.net/gyming/article/details/8168166/</a>   Android应用开发相关下载资源(2016/07/24更新)<br>Android源代码国内下载镜像 (android source mirror: <a href="http://mirror.neu.edu.cn/android/platform/" target="_blank" rel="external">http://mirror.neu.edu.cn/android/platform/</a>)</p>
<h2 id="四-UI控件类"><a href="#四-UI控件类" class="headerlink" title="四 UI控件类"></a>四 UI控件类</h2><p>Android开源项目总结(<a href="http://hunankeda110.iteye.com/blog/2103569)(个性化控件，工具库等，非常丰富" target="_blank" rel="external">http://hunankeda110.iteye.com/blog/2103569)(个性化控件，工具库等，非常丰富</a>)<br>GitHub优秀的开源项目(<a href="http://blog.csdn.net/xiechengfa/article/details/38536643" target="_blank" rel="external">http://blog.csdn.net/xiechengfa/article/details/38536643</a>) (赞); 或hawkon (<a href="http://www.cnblogs.com/hawkon/p/3593709.html" target="_blank" rel="external">http://www.cnblogs.com/hawkon/p/3593709.html</a>)</p>
<h2 id="五-工具类"><a href="#五-工具类" class="headerlink" title="五 工具类"></a>五 工具类</h2><p><a href="http://www.thefilehippo.com/" target="_blank" rel="external">http://www.thefilehippo.com/</a>  需要翻墙，一个不错的下载网站，里面有很多离线安装包<br><a href="http://www.thefilehippo.com/search/label/Browsers" target="_blank" rel="external">http://www.thefilehippo.com/search/label/Browsers</a>   可以找到最新的google浏览器离线安装包<br><a href="https://www.tutorialspoint.com/uml/uml_2_overview.htm" target="_blank" rel="external">https://www.tutorialspoint.com/uml/uml_2_overview.htm</a>  UM L 2.0<br><a href="http://www.uml.org/index.htm" target="_blank" rel="external">http://www.uml.org/index.htm</a>  uml<br><a href="http://www.omg.org/spec/UML/2.0/" target="_blank" rel="external">http://www.omg.org/spec/UML/2.0/</a>  pdf<br><a href="http://www.uml-diagrams.org/" target="_blank" rel="external">http://www.uml-diagrams.org/</a>    uml 图<br><a href="http://tool.lu/hexconvert/" target="_blank" rel="external">http://tool.lu/hexconvert/</a>    进制转换<br><a href="https://git-scm.com/docs" target="_blank" rel="external">https://git-scm.com/docs</a> Git command help<br>ftp://www.kernel.org/pub/software/scm/git/docs/   Git command<br><a href="http://www.eclipse.org/downloads/packages/all" target="_blank" rel="external">http://www.eclipse.org/downloads/packages/all</a> eclipse大全<br><a href="http://www.xitongzhijia.net/" target="_blank" rel="external">http://www.xitongzhijia.net/</a>  系统之家　工具和系统下载<br><a href="http://www.xp510.com/" target="_blank" rel="external">http://www.xp510.com/</a>  XP系统之家，绿色下载网站  不错<br><a href="http://imcn.me/" target="_blank" rel="external">http://imcn.me/</a>　Linux工具<br>PS:<br><a href="http://download.csdn.net/detail/dadaxiaoxiaode/9631931" target="_blank" rel="external">http://download.csdn.net/detail/dadaxiaoxiaode/9631931</a>   google 32bit 离线安装包 20160914发布的<br><a href="http://download.csdn.net/detail/dadaxiaoxiaode/9631926" target="_blank" rel="external">http://download.csdn.net/detail/dadaxiaoxiaode/9631926</a>   google 64bit 离线安装包 20160914发布的</p>
<p><a href="http://www.panduoduo.net/" target="_blank" rel="external">http://www.panduoduo.net/</a><br><a href="http://pan.java1234.com/" target="_blank" rel="external">http://pan.java1234.com/</a><br><a href="http://www.baiduyunwangpan.com/" target="_blank" rel="external">http://www.baiduyunwangpan.com/</a></p>
<p><a href="http://www.sobaidupan.com/" target="_blank" rel="external">http://www.sobaidupan.com/</a> 强大<br><a href="http://soft.sobaidupan.com/" target="_blank" rel="external">http://soft.sobaidupan.com/</a>   百度云搜索器</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;神雕侠侣&lt;br&gt;A：搜百度盘+百度云官方客户端&lt;br&gt;B：P2PSearcher+迅雷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sobaidupan.com/image/logo.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;网址：&lt;a href=&quot;http://www.sobaidupan.com/&quot;&gt;http://www.sobaidupan.com/&lt;/a&gt;&lt;br&gt;工具：&lt;a href=&quot;http://soft.sobaidupan.com/&quot;&gt;http://soft.sobaidupan.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;百度云搜索器（Ver 1.2.7.9）&lt;br&gt;百度云搜索器是一款专业强大的百度网盘资源搜索软件，数据庞大，搜索极快，简单易用，绿色小巧，无需安装，是目前互联网同行中百度云搜索最好的软件之一，可以搜索种子、电影、视频、MP3、游戏、系统、教育资源、图片、光盘文件、小说、文档、手机APP等几十种各种各样的资源！&lt;br&gt;支持系统：MS WinXP/Win7/win8/win10(32/64)以上系统.&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ipcreator.me/categories/Tools/"/>
    
    
      <category term="BaiduYun" scheme="http://ipcreator.me/tags/BaiduYun/"/>
    
  </entry>
  
  <entry>
    <title>Professional Words of Computer</title>
    <link href="http://ipcreator.me/2017/03/26/English/computer-english-words/"/>
    <id>http://ipcreator.me/2017/03/26/English/computer-english-words/</id>
    <published>2017-03-25T16:00:00.000Z</published>
    <updated>2017-04-11T07:40:07.349Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ong8f1obl.bkt.clouddn.com/375px-ForgettingCurve.svg.png" alt=""></p>
<blockquote>
<p>德国心理学家艾宾浩斯（Ebbinghaus）指出，遗忘是有规律的，即先快后慢。要使学生巩固所学的词汇，就必须及时复习，使要记忆的词汇在头脑中留下深刻的痕迹，不致遗忘…</p>
</blockquote>
<p><img src="http://ong8f1obl.bkt.clouddn.com/the%20formula%20of%20forgetting%20curve%20.jpg" alt=""></p>
<p>考察从记忆开始，1天后大部分内容被遗忘掉，但是一天之后的遗忘率开变得平缓。</p>
<p>20分后，42%被遗忘掉，58%被记住。<br>1小时后，56%被遗忘掉，44%被记住。<br>1天后，74%被遗忘掉，26%被记住。<br>1周后，77%被遗忘掉，23%被记住。<br>1个月后，79%被遗忘掉，21%被记住。</p>
<a id="more"></a>
<h2 id="Mathematics"><a href="#Mathematics" class="headerlink" title="Mathematics"></a>Mathematics</h2><h3 id="divisor"><a href="#divisor" class="headerlink" title="divisor"></a>divisor</h3><p>英 [dɪˈvaɪzə(r)]   美 [dɪˈvaɪzɚ]  </p>
<p>n.  &lt;数&gt;除数; 分水设备; 因子;</p>
<h3 id="arithmetic"><a href="#arithmetic" class="headerlink" title="arithmetic"></a>arithmetic</h3><p>英 [əˈrɪθmətɪk]   美 [əˈrɪθmɪtɪk]<br>     CET4 | CET6 | 考研 | IELTS | TOEFL<br>n.  算术，计算; 算法;<br>变形 复数: arithmetics</p>
<h3 id="formula"><a href="#formula" class="headerlink" title="formula"></a>formula</h3><p>英 [‘fɔːmjʊlə]  美 [‘fɔrmjələ]<br>n. [数] 公式，准则；配方；婴儿食品<br>[ 复数 formulas或formulae ]</p>
<h3 id="curve"><a href="#curve" class="headerlink" title="curve"></a>curve</h3><p>英 [kɜːv]  美 [kɝv]<br>n. 曲线；弯曲；曲线球；曲线图表<br>vt. 弯；使弯曲<br>vi. 成曲形<br>adj. 弯曲的；曲线形的<br>[ 过去式 curved 过去分词 curved 现在分词 curving ]</p>
<h2 id="Data-Type"><a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type</h2><h3 id="mantissa"><a href="#mantissa" class="headerlink" title="mantissa"></a>mantissa</h3><p>英 [mæn’tɪsə]  美 [mæn’tɪsə]<br>n. [数] 尾数；假数；定点部分；小数部分<br>n. (Mantissa)人名；(刚(布))曼蒂萨</p>
<h3 id="exponent"><a href="#exponent" class="headerlink" title="exponent"></a>exponent</h3><p>英 [ɪk’spəʊnənt; ek-]  美 [ɪk’sponənt]<br>n. [数] 指数；典型；说明者，说明物<br>n. 倡导者，鼓吹者，代表者，拥护者<br>adj. 说明的</p>
<h2 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h2><h3 id="suppress"><a href="#suppress" class="headerlink" title="suppress"></a>suppress</h3><p>英 [sə’pres]  美 [sə’prɛs]<br>vt. 抑制；镇压；废止</p>
<h3 id="arbitrary"><a href="#arbitrary" class="headerlink" title="arbitrary"></a>arbitrary</h3><p>英 [‘ɑːbɪt(rə)rɪ]  美 [ˈɑːrbətreri]<br>adj. [数] 任意的；武断的；专制的</p>
<h3 id="delegate"><a href="#delegate" class="headerlink" title="delegate"></a>delegate</h3><p>英 [ˈdɛlɪˌɡeɪt; -ɡɪt; (for v.,) ˈdɛlɪˌɡeɪt] 美 [ˈdɛləgɪt; (for v.,) ˈdɛləˌgeɪt]<br>vt. 委派…为代表<br>n. 代表<br>[ 过去式 delegated 过去分词 delegated 现在分词 delegating ]</p>
<h3 id="inflate"><a href="#inflate" class="headerlink" title="inflate"></a>inflate</h3><p>英 [ɪn’fleɪt]  美 [ɪn’flet]<br>vt. 使充气；使通货膨胀<br>vi. 膨胀；充气<br>[ 过去式 inflated 过去分词 inflated 现在分词 inflating ]</p>
<h3 id="composite"><a href="#composite" class="headerlink" title="composite"></a>composite</h3><p>英 [‘kɒmpəzɪt]  美 [kɑm’pɑzɪt]<br>n. 复合材料；合成物；菊科<br>adj. 复合的；合成的；菊科的<br>vt. 使合成；使混合<br>[ 过去式 composited 过去分词 composited 现在分词 compositing ]</p>
<h3 id="accelerate"><a href="#accelerate" class="headerlink" title="accelerate"></a>accelerate</h3><p>英 [ək’seləreɪt]  美 [əkˈsɛləˌret]<br>vt. 使……加快；使……增速<br>vi. 加速；促进；增加<br>[ 过去式 accelerated 过去分词 accelerated 现在分词 accelerating ]</p>
<h3 id="principle"><a href="#principle" class="headerlink" title="principle"></a>principle</h3><p>英 [‘prɪnsɪp(ə)l]  美 [‘prɪnsəpl]<br>n. 原理，原则；主义，道义；本质，本义；根源，源泉</p>
<h3 id="crawler"><a href="#crawler" class="headerlink" title="crawler"></a>crawler</h3><p>英 [‘krɔːlə]  美 [‘krɔlɚ]<br>n. 爬行者；履带牵引装置</p>
<h3 id="robust"><a href="#robust" class="headerlink" title="robust"></a>robust</h3><p>英 [rə(ʊ)’bʌst]  美 [ro’bʌst]<br>adj. 强健的；健康的；粗野的；粗鲁的<br>[ 比较级 more robust 最高级 most robust ]</p>
<h3 id="malicious"><a href="#malicious" class="headerlink" title="malicious"></a>malicious</h3><p>英 [mə’lɪʃəs]  美 [mə’lɪʃəs]<br>adj. 恶意的；恶毒的；蓄意的；怀恨的</p>
<h3 id="category"><a href="#category" class="headerlink" title="category"></a>category</h3><p>英 [‘kætɪg(ə)rɪ]  美 [‘kætəɡɔri]<br>n. 种类，分类；[数] 范畴<br>[ 复数 categories ]</p>
<h3 id="coordinator"><a href="#coordinator" class="headerlink" title="coordinator"></a>coordinator</h3><p>英 [kəʊ’ɔ:dɪneɪtə]  美 [ko’ɔrdn,etɚ]<br>n. 协调者；[自] 协调器；同等的人或物</p>
<h2 id="constraint"><a href="#constraint" class="headerlink" title="constraint"></a>constraint</h2><p>英 [kən’streɪnt]  美 [kən’strent]<br>n. [数] 约束；局促，态度不自然；强制</p>
<h3 id="parallel"><a href="#parallel" class="headerlink" title="parallel"></a>parallel</h3><p>英 [‘pærəlel]  美 [‘pærəlɛl]<br>n. 平行线；对比<br>vt. 使…与…平行<br>adj. 平行的；类似的，相同的<br>[ 过去式 paralleled或-allelled 过去分词 paralleled或-allelled 现在分词 paralleling或-allelling ]</p>
<h3 id="initialization"><a href="#initialization" class="headerlink" title="initialization"></a>initialization</h3><p>英 [ɪ,nɪʃəlaɪ’zeɪʃən]  美 [ɪ,nɪʃəlɪ’zeʃən]<br>n. [计] 初始化；赋初值</p>
<h3 id="polymorphism"><a href="#polymorphism" class="headerlink" title="polymorphism"></a>polymorphism</h3><p>英 [,pɒlɪ’mɔːfɪz(ə)m]  美 [,pɑlɪ’mɔrfɪzm]<br>n. 多态性；多形性；同质多晶</p>
<h3 id="concurrency"><a href="#concurrency" class="headerlink" title="concurrency"></a>concurrency</h3><p>英  美 [kən’kɚrənsi; kən’kʌrənsi]<br>n. [计] 并发性；同时发生</p>
<h3 id="annotation"><a href="#annotation" class="headerlink" title="annotation"></a>annotation</h3><p>英 [ænə’teɪʃ(ə)n]  美 [ˌænəˈteʃən]<br>n. 注释；注解；释文</p>
<h3 id="correspond"><a href="#correspond" class="headerlink" title="correspond"></a>correspond</h3><p>英 [kɒrɪ’spɒnd]  美 [,kɔrə’spɑnd]<br>vi. 符合，一致；相应；通信</p>
<h3 id="parameter"><a href="#parameter" class="headerlink" title="parameter"></a>parameter</h3><p>英 [pə’ræmɪtə]  美 [pə’ræmɪtɚ]<br>n. 参数；系数；参量</p>
<h3 id="interpolator"><a href="#interpolator" class="headerlink" title="interpolator"></a>interpolator</h3><p>英 [ɪn’tɜ:pəʊleɪtə]  美 [ɪn’tɜ:poʊleɪtə]</p>
<p>n.  撺改者，校对机，分类机;</p>
<h3 id="parcel"><a href="#parcel" class="headerlink" title="parcel"></a>parcel</h3><p>英 [ˈpɑ:sl]   美 [ˈpɑrsl]<br>     CET4 | CET6 | 考研<br>n.  包袱，包裹; （土地的）一块; 一批，一群; （货物的）一宗;<br>vt.  分，区分; 把…划成部分后分配; 给…打成包裹; 把…拼在一起;<br>变形 过去分词: parcelled 复数: parcels 过去式: parcelled 现在分词: parcelling 第三人称单数: parcels</p>
<h3 id="manipulate"><a href="#manipulate" class="headerlink" title="manipulate"></a>manipulate</h3><p>英 [məˈnɪpjuleɪt]   美 [məˈnɪpjəˌlet]<br>     CET6 | 考研 | IELTS | TOEFL | GRE<br>vt.  操作，处理; 巧妙地控制; 操纵; [医] 推拿，调整;<br>变形 过去分词: manipulated 过去式: manipulated 现在分词: manipulating 第三人称单数: manipulates</p>
<h3 id="paradigm"><a href="#paradigm" class="headerlink" title="paradigm"></a>paradigm</h3><p>英 [ˈpærədaɪm]   美 [ˈpærəˌdaɪm, -ˌdɪm]<br>     考研 | GRE<br>n.  范例，样式，模范; 词形变化表;<br>变形 复数: paradigms</p>
<h3 id="instantiation"><a href="#instantiation" class="headerlink" title="instantiation"></a>instantiation</h3><p>英 [ɪnstænʃɪ’eɪʃən]   美 [ɪnstænʃɪ’eɪʃən]<br>n.  实例化，例示;</p>
<h3 id="delegation"><a href="#delegation" class="headerlink" title="delegation"></a>delegation</h3><p>英 [ˌdelɪˈgeɪʃn]   美 [ˌdɛlɪˈɡeʃən]<br>     CET4 | CET6<br>n.  代表（团）; 委派; 授权;<br>变形 复数: delegations</p>
<h3 id="decorator"><a href="#decorator" class="headerlink" title="decorator"></a>decorator</h3><p>英 [ˈdekəreɪtə(r)]   美 [ˈdɛkəˌretɚ]<br>n.  室内装饰师，油漆匠;<br>adj.  适于室内装饰的;<br>变形 复数: decorators</p>
<h3 id="mutator"><a href="#mutator" class="headerlink" title="mutator"></a>mutator</h3><p>英 [‘mju:teɪtə]   美 [‘mjuteɪtə]<br>n.  设置方法; 增变基因;</p>
<h3 id="encapsulate"><a href="#encapsulate" class="headerlink" title="encapsulate"></a>encapsulate</h3><p>英 [ɪnˈkæpsjuleɪt]   美 [ɛnˈkæpsəˌlet]<br>     GRE<br>vt.  封装; 概述;<br>vi.  形成囊状物;<br>变形 过去分词: encapsulated 过去式: encapsulated 现在分词: encapsulating 第三人称单数: encapsulates</p>
<h3 id="interpreter"><a href="#interpreter" class="headerlink" title="interpreter"></a>interpreter</h3><p>英 [ɪnˈtɜ:prɪtə(r)]   美 [ɪnˈtɜrprɪtə(r)]<br>     CET4 | CET6 | IELTS<br>n.  解释者; 口译译员; [军事]判读员; [自]翻译器;<br>变形 复数: interpreters<br>Interpreter<br>口译者;</p>
<h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><p>英 [ɪtə’reɪtə]   美 [ɪtə’reɪtə]<br>[计] 迭代器，迭代程序;</p>
<h3 id="sequence"><a href="#sequence" class="headerlink" title="sequence"></a>sequence</h3><p>英 [ˈsi:kwəns]   美 [ˈsikwəns, -ˌkwɛns]<br>     CET4 | CET6 | 考研 | IELTS | TOEFL<br>n.  [数]数列，序列; 顺序; 连续; 片断插曲;<br>vt.  使按顺序排列，安排顺序; [生化]确定…的顺序，确定…的化学结构序列;<br>变形 过去分词: sequenced 复数: sequences 过去式: sequenced 现在分词: sequencing 第三人称单数: sequences</p>
<h3 id="memento"><a href="#memento" class="headerlink" title="memento"></a>memento</h3><p>英 [məˈmentəʊ]   美 [məˈmentoʊ]<br>     GRE<br>n.  遗物，纪念品，用以回忆的东西;<br>变形 复数: mementoes</p>
<h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><p>英 [dɪˈfɜ:(r)]   美 [dɪˈfɚ]<br>     IELTS | TOEFL | GRE<br>vt.  使推迟; 使延期; 拖延，推迟; [军]使延期入伍;<br>vi.  服从; 延期; 推迟;<br>变形 过去分词: deferred 过去式: deferred 现在分词: deferring 第三人称单数: defers</p>
<h3 id="gist"><a href="#gist" class="headerlink" title="gist"></a>gist</h3><p>英 [dʒɪst]   美 [dʒɪst]<br>     IELTS | GRE<br>n.  要点，主旨; 大要; 要领; 精神;</p>
<h3 id="exponential"><a href="#exponential" class="headerlink" title="exponential"></a>exponential</h3><p>英 [ˌekspəˈnenʃl]<br>美 [ˌɛkspəˈnɛnʃəl]<br>n.<br>指数; 倡导者; 演奏者; 例子;<br>adj.<br>指数的，幂数的; 越来越快的;</p>
<h3 id="suppress-1"><a href="#suppress-1" class="headerlink" title="suppress"></a>suppress</h3><p>英 [səˈpres]   美 [səˈprɛs]<br>     CET6 | 考研 | IELTS | TOEFL<br>vt.  镇压，压制; 止住，忍住; 禁止发表; 阻止…的生长（或发展）;<br>变形 过去分词: suppressed 过去式: suppressed 现在分词: suppressing 第三人称单数: suppresses</p>
<h3 id="groovy"><a href="#groovy" class="headerlink" title="groovy"></a>groovy</h3><p>英 [ˈgru:vi]   美 [ˈɡruvi]  </p>
<p>adj.  绝妙的; 槽的，沟的; 流行的; 最佳状态的;</p>
<h3 id="retrofit"><a href="#retrofit" class="headerlink" title="retrofit"></a>retrofit</h3><p>英 [ˈretrəʊfɪt]   美 [ˈretroʊfɪt]<br>n.  式样翻新，花样翻新;<br>vt.  给机器设备装配（新部件），翻新，改型;<br>变形 过去分词: retrofitted 复数: retrofits 过去式: retrofitted 现在分词: retrofitting 第三人称单数: retrofits</p>
<h3 id="minify"><a href="#minify" class="headerlink" title="minify"></a>minify</h3><p>英 [‘mɪnɪfaɪ]   美 [‘mɪnɪˌfaɪ]<br>v.  缩小;<br>变形 过去分词: minified 过去式: minified 现在分词: minifying 第三人称单数: minifies</p>
<h3 id="camel"><a href="#camel" class="headerlink" title="camel"></a>camel</h3><p>英 [ˈkæml]   美 [ˈkæməl]<br>     CET4 | CET6 | 考研<br>n.  骆驼;<br>变形 复数: camels<br>CAMEL<br>abbr.  customized application for mobile network enhanced logic 移动网增强逻辑的定制应用; customized applications for mobile enhanced logic 移动增强逻辑的定型应用;</p>
<h3 id="unparalleled"><a href="#unparalleled" class="headerlink" title="unparalleled"></a>unparalleled</h3><p>英 [ʌnˈpærəleld]   美 [ʌnˈpærəˌlɛld]<br>     TOEFL<br>adj.  无比的，无双的，空前的; 空前的; 盖世;</p>
<h3 id="versatility"><a href="#versatility" class="headerlink" title="versatility"></a>versatility</h3><p>英 [ˌvɜ:sə’tɪlətɪ]   美 [ˌvɜsə’tɪlətɪ]<br>n.  多才多艺; 多用途; 可转动性; 易变;</p>
<h3 id="integration"><a href="#integration" class="headerlink" title="integration"></a>integration</h3><p>英 [ˌɪntɪˈgreɪʃn]   美 [ˌɪntɪˈɡreʃən]<br>n.  结合; 整合; 一体化; （不同肤色、种族、宗教信仰等的人的）混合;</p>
<h3 id="systematize"><a href="#systematize" class="headerlink" title="systematize"></a>systematize</h3><p>英 [ˈsɪstəmətaɪz]   美 [ˈsɪstəməˌtaɪz]<br>     TOEFL<br>vt.  使系统化，使成体系;<br>变形 过去分词: systematized 过去式: systematized 现在分词: systematizing 第三人称单数: systematizes</p>
<h3 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h3><p>英 [skeɪl]   美 [skel]<br>     CET4 | CET6 | 考研 | IELTS | TOEFL | GRE<br>n.  规模; 比例（尺）; 鱼鳞; 级别;<br>vt.  测量; 攀登; 刮去…的鳞片;<br>vi.  衡量; 攀登; （鳞屑）脱落; 生水垢;<br>变形 过去分词: scaled 复数: scales 过去式: scaled 现在分词: scaling 第三人称单数: scales</p>
<h3 id="retention"><a href="#retention" class="headerlink" title="retention"></a>retention</h3><p>英 [rɪˈtenʃn]   美 [rɪˈtɛnʃən]<br>     考研 | IELTS | GRE<br>n.  保留; 记忆力，保持力; 滞留，扣留; 闭尿;</p>
<h3 id="purge"><a href="#purge" class="headerlink" title="purge"></a>purge</h3><p>英 [pɜ:dʒ]   美 [pɜrdʒ]<br>     IELTS | GRE<br>vt.  清除，（使）净化; （使）通便; 肃清;<br>n.  净化; &lt;医&gt;泻药; 整肃;<br>变形 过去分词: purged 复数: purges 过去式: purged 现在分词: purging 第三人称单数: purges</p>
<h3 id="minify-1"><a href="#minify-1" class="headerlink" title="minify"></a>minify</h3><p>英 [‘mɪnɪfaɪ]   美 [‘mɪnɪˌfaɪ]<br>v.  缩小;<br>变形 过去分词: minified 过去式: minified 现在分词: minifying 第三人称单数: minifies</p>
<h3 id="literal"><a href="#literal" class="headerlink" title="literal"></a>literal</h3><p>英 [ˈlɪtərəl]   美 [ˈlɪtərəl]<br>     CET6 | GRE<br>adj.  照字面的; 原义的; 逐字的; 平实的，避免夸张;<br>n.  [印]错排，文字上的错误;</p>
<h3 id="implicit"><a href="#implicit" class="headerlink" title="implicit"></a>implicit</h3><p>英 [ɪmˈplɪsɪt]   美 [ɪmˈplɪsɪt]<br>     考研 | IELTS | TOEFL | GRE<br>adj.  不言明[含蓄]的; 无疑问的，绝对的; 成为一部份的; 内含的;</p>
<h3 id="explicit"><a href="#explicit" class="headerlink" title="explicit"></a>explicit</h3><p>英 [ɪkˈsplɪsɪt]   美 [ɪkˈsplɪsɪt]<br>     CET6 | 考研 | IELTS | TOEFL | GRE<br>adj.  明确的，清楚的; 直言的; 详述的; 不隐瞒的;</p>
<h3 id="archive"><a href="#archive" class="headerlink" title="archive"></a>archive</h3><p>英 [ˈɑ:kaɪv]   美 [ˈɑrkaɪv]<br>     IELTS | GRE<br>v.  存档;<br>n.  档案文件; 档案室;<br>变形 过去分词: archived 复数: archives 过去式: archived 现在分词: archiving 第三人称单数: archives</p>
<h3 id="daemon"><a href="#daemon" class="headerlink" title="daemon"></a>daemon</h3><p>英 [ˈdi:mən]   美 [‘dimən]<br>n.  （希腊神话中）半人半神的精灵; 守护神; [计]守护进程;<br>Daemon<br>abbr.  Internet中用于邮件收发的后台程序;</p>
<h3 id="synchronize"><a href="#synchronize" class="headerlink" title="synchronize"></a>synchronize</h3><p>英 [ˈsɪŋkrənaɪz]   美 [ˈsɪŋkrəˌnaɪz, ˈsɪn-]<br>     IELTS | TOEFL<br>vt.  使同步; 使同时;<br>vi.  同时发生; 共同行动;<br>变形 过去分词: synchronized 过去式: synchronized 现在分词: synchronizing 第三人称单数: synchronizes</p>
<h3 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt"></a>interrupt</h3><p>英 [ˌɪntəˈrʌpt]   美 [ˌɪntəˈrʌpt]<br>     CET4 | CET6 | 考研 | IELTS | TOEFL | GRE<br>vt.&amp; vi.  打断（别人的话等）; 阻止; 截断;<br>vt.  暂停; 中断; 打扰; 妨碍;<br>vi.  打断;<br>n.  中断; 暂停;<br>变形 过去分词: interrupted 过去式: interrupted 现在分词: interrupting 第三人称单数: interrupts</p>
<h3 id="suspend"><a href="#suspend" class="headerlink" title="suspend"></a>suspend</h3><p>英 [səˈspend]   美 [səˈspɛnd]<br>     CET4 | CET6 | 考研 | IELTS | TOEFL | GRE<br>v.  暂停; 延缓; 挂; 悬;<br>变形 过去分词: suspended 过去式: suspended 现在分词: suspending 第三人称单数: suspends</p>
<h3 id="programming"><a href="#programming" class="headerlink" title="programming"></a>programming</h3><p>英 [ˈprəʊgræmɪŋ]   美 [ˈproʊgræmɪŋ]<br>n.  规划，设计; 编程;<br>v.  训练( programme的现在分词 ); 培养; 预调;</p>
<h3 id="integer"><a href="#integer" class="headerlink" title="integer"></a>integer</h3><p>英 [ˈɪntɪdʒə(r)]   美 [ˈɪntɪdʒɚ]<br>n.  整数;<br>变形 复数: integers</p>
<h3 id="character"><a href="#character" class="headerlink" title="character"></a>character</h3><p>英 [ˈkærəktə(r)]   美 [ˈkærəktɚ]<br>     CET4 | CET6 | 考研 | TOEFL<br>n.  性格; 特点; 字母; 角色;<br>vt.  刻，印; 使具有特征;<br>变形 过去分词: charactered 复数: characters 过去式: charactered 现在分词: charactering 第三人称单数: characters</p>
<h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><p>英 [ˈbu:liən]   美 [ˈbuliən]<br>adj.  布尔数学体系的;</p>
<h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><p>英 [əˈreɪ]   美 [ə’reɪ]<br>     CET6 | 考研 | IELTS | TOEFL | GRE<br>n.  队列，阵列; 数组; 一大批; 衣服;<br>vt.  排列; 部署兵力; 打扮，装饰;<br>变形 过去分词: arrayed 复数: arrays 过去式: arrayed 现在分词: arraying 第三人称单数: arrays</p>
<h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>英 [ˈvektə(r)]   美 [ˈvɛktɚ]<br>     CET6<br>n.  矢量; 航向; [生]带菌者; [天]矢径;<br>vt.  用无线电引导; 为…导航;<br>变形 复数: vectors</p>
<h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h3><p>英 [ɪˈnju:məreɪt]   美 [ɪˈnuməreɪt]<br>     GRE<br>vt.  列举，枚举，数;<br>变形 过去分词: enumerated 过去式: enumerated 现在分词: enumerating 第三人称单数: enumerates</p>
<h3 id="enumeration"><a href="#enumeration" class="headerlink" title="enumeration"></a>enumeration</h3><p>英 [ɪˌnju:mə’reɪʃn]   美 [ɪˌnjumə’reɪʃn]<br>n.  计数，列举; 细目; 详表; 点查;</p>
<h3 id="iterator-1"><a href="#iterator-1" class="headerlink" title="iterator"></a>iterator</h3><p>英 [ɪtə’reɪtə]   美 [ɪtə’reɪtə]<br>[计] 迭代器，迭代程序;</p>
<h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>英 [ˈvɒlətaɪl]   美 [ˈvɑlətl]<br>     IELTS | TOEFL | GRE<br>adj.  易变的，不稳定的; （液体或油）易挥发的; 爆炸性的; 快活的，轻快的;</p>
<h3 id="contrary"><a href="#contrary" class="headerlink" title="contrary"></a>contrary</h3><p>英 [ˈkɒntrəri]   美 [ˈkɑntreri]<br>     CET4 | CET6 | 考研 | TOEFL<br>adj.  相反的; 违反的，反对的; 对立的; 顽固的，任性的;<br>n.  对立或相反的事物; 对立方; [逻]反对命题;<br>adv.  相反地，矛盾地;<br>变形 复数: contraries</p>
<h3 id="opposite"><a href="#opposite" class="headerlink" title="opposite"></a>opposite</h3><p>英 [ˈɒpəzɪt]   美 [ˈɑpəzət]<br>     CET4 | CET6 | 考研 | IELTS | TOEFL<br>adj.  相对的; 对面的; 对立的; [数学]（顶、边等）对的;<br>prep.  （表示位置）在…的对面; [数学]（顶、边等）对的; 与…在一排; （表示方式）与…联合主演;<br>adv.  在对面，对过;<br>n.  对立面，对立物，相反的人[事物];<br>变形 复数: opposites</p>
<h3 id="assertion"><a href="#assertion" class="headerlink" title="assertion"></a>assertion</h3><p>英 [əˈsɜ:ʃn]   美 [əˈsɜrʃn]<br>n.  声称; 使用; 主张; 明确肯定;<br>变形 复数: assertions</p>
<h3 id="granularity-搜索网络"><a href="#granularity-搜索网络" class="headerlink" title="granularity    搜索网络"></a>granularity    搜索网络</h3><p>英 [grænjʊ’lærɪtɪ]   美 [grænjʊ’lærɪtɪ]<br>n.  间隔尺寸，粒度;</p>
<h3 id="instrument"><a href="#instrument" class="headerlink" title="instrument"></a>instrument</h3><p>英 [ˈɪnstrəmənt]   美 [ˈɪnstrəmənt]<br>     CET4 | CET6 | 考研 | IELTS | TOEFL<br>n.  仪器; 手段，工具; 乐器; 法律文件;<br>vt.  用仪器装备; 为演奏谱曲; 向…提交文书;<br>变形 复数: instruments</p>
<h3 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h3><p>英 [ˈeksɪt]   美 [ˈɛɡzɪt, ˈɛksɪt]<br>     CET4 | CET6 | 考研 | TOEFL<br>n.  出口，通道; 退场; 退去，退出; 死亡;<br>vi.  离开; 退出; 退场; 去世;<br>变形 过去分词: exited 复数: exits 过去式: exited 现在分词: exiting 第三人称单数: exits</p>
<h3 id="execute"><a href="#execute" class="headerlink" title="execute"></a>execute</h3><p>英 [ˈeksɪkju:t]   美 [ˈɛksɪˌkjut]<br>     CET4 | CET6 | 考研 | IELTS | TOEFL | GRE<br>vt.  执行; 处死，处决; 履行; 完成;<br>变形 过去分词: executed 过去式: executed 现在分词: executing 第三人称单数: executes</p>
<h3 id="calendar"><a href="#calendar" class="headerlink" title="calendar"></a>calendar</h3><p>英 [ˈkælɪndə(r)]   美 [ˈkæləndɚ]<br>     CET4 | CET6 | 考研 | IELTS<br>n.  日历; 历法; 日程表; （一年之中的）重大事件（或重要日期）一览表;<br>vt.  把…记入日程表中; 把…列入表中; 为（文件等）作分类索引; 将…排入日程表;<br>变形 复数: calendars<br>Calendar<br>[电影]月历;</p>
<h3 id="gregorian"><a href="#gregorian" class="headerlink" title="gregorian"></a>gregorian</h3><p>英<br>n.  格利高里圣歌;<br>adj.  罗马教皇格利高里的;</p>
<p>gregorian calendar<br>英   美<br>[法]公历年;</p>
<h3 id="Newly-Paranoid-Maintainers"><a href="#Newly-Paranoid-Maintainers" class="headerlink" title="Newly Paranoid Maintainers"></a>Newly Paranoid Maintainers</h3><p>Never Perfectly Managed<br>No Proscribed Meaning</p>
<p>NPM<br><img src="https://docs.npmjs.com/images/npm.svg" alt=""></p>
<h3 id="discipline"><a href="#discipline" class="headerlink" title="discipline"></a>discipline</h3><p>英 [ˈdɪsəplɪn]   美 [ˈdɪsəplɪn]<br>     CET4 | CET6 | 考研 | IELTS | TOEFL | GRE<br>vt.  训练; 使有纪律; 处罚; 使有条理;<br>n.  训练; 纪律; 学科; 符合行为准则的行为（或举止）;<br>变形 过去分词: disciplined 复数: disciplines 过去式: disciplined 现在分词: disciplining 第三人称单数: disciplines</p>
<h3 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h3><p>英 [‘fævɪkən]   美 [‘fævɪkən]<br>abbr.  偏爱图标; 网站图标(favorites icon);</p>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>英 [‘grep]   美 [‘grep]<br>[计] 检索目标行命令;</p>
<h3 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h3><p>英 [ˈɪntəvl]   美 [ˈɪntərvl]<br>     CET4 | CET6 | 考研 | IELTS | TOEFL<br>n.  间隔; 幕间休息; （数学）区间;<br>变形 复数: intervals</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://zh.wikipedia.org/wiki/%E8%B5%AB%E5%B0%94%E6%9B%BC%C2%B7%E8%89%BE%E5%AE%BE%E6%B5%A9%E6%96%AF" target="_blank" rel="external">赫尔曼·艾宾浩斯 Hermann Ebbinghaus </a><br><a href="https://zh.wikipedia.org/wiki/%E9%81%97%E5%BF%98%E6%9B%B2%E7%BA%BF" target="_blank" rel="external">遗忘曲线 Forgetting curve</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/375px-ForgettingCurve.svg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;德国心理学家艾宾浩斯（Ebbinghaus）指出，遗忘是有规律的，即先快后慢。要使学生巩固所学的词汇，就必须及时复习，使要记忆的词汇在头脑中留下深刻的痕迹，不致遗忘…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ong8f1obl.bkt.clouddn.com/the%20formula%20of%20forgetting%20curve%20.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;考察从记忆开始，1天后大部分内容被遗忘掉，但是一天之后的遗忘率开变得平缓。&lt;/p&gt;
&lt;p&gt;20分后，42%被遗忘掉，58%被记住。&lt;br&gt;1小时后，56%被遗忘掉，44%被记住。&lt;br&gt;1天后，74%被遗忘掉，26%被记住。&lt;br&gt;1周后，77%被遗忘掉，23%被记住。&lt;br&gt;1个月后，79%被遗忘掉，21%被记住。&lt;/p&gt;
    
    </summary>
    
      <category term="English" scheme="http://ipcreator.me/categories/English/"/>
    
    
      <category term="Word" scheme="http://ipcreator.me/tags/Word/"/>
    
      <category term="Profession" scheme="http://ipcreator.me/tags/Profession/"/>
    
  </entry>
  
  <entry>
    <title>Awesome Android Complete Reference</title>
    <link href="http://ipcreator.me/2017/03/25/Program/Android/awesome-android-complete-reference/"/>
    <id>http://ipcreator.me/2017/03/25/Program/Android/awesome-android-complete-reference/</id>
    <published>2017-03-25T14:00:06.000Z</published>
    <updated>2017-03-27T07:50:25.667Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/amitshekhariitbhu/awesome-android-complete-reference" target="_blank" rel="external">Awesome Android Complete Reference</a></p>
<p>A curated list of Android Complete References at one place. A complete reference for android developers. Here you can find references about everything you use while Android Development.</p>
<a id="more"></a>
<h1 id="Awesome-Android-Complete-Reference"><a href="#Awesome-Android-Complete-Reference" class="headerlink" title="Awesome Android Complete Reference "></a>Awesome Android Complete Reference <a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external"><img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg" alt="Awesome"></a></h1><h3 id="About-Awesome-Android-Complete-Reference"><a href="#About-Awesome-Android-Complete-Reference" class="headerlink" title="About Awesome Android Complete Reference"></a>About Awesome Android Complete Reference</h3><p>A curated list of Android Complete References at one place.<br>A complete reference for android developers. Here you can find references about everything you use while Android Development.</p>
<h3 id="Android-App-Architecture"><a href="#Android-App-Architecture" class="headerlink" title="Android App Architecture"></a>Android App Architecture</h3><ul>
<li><a href="https://github.com/MindorksOpenSource/android-mvp-architecture" target="_blank" rel="external">Android-MVP-Architecture</a> - A complete android project based on MVP architecture.</li>
<li><a href="https://github.com/amitshekhariitbhu/Android-MVP-Sample-Application" target="_blank" rel="external">Android MVP Sample Application</a> - A very basic android sample application on MVP architecture.</li>
<li><a href="https://blog.mindorks.com/essential-guide-for-designing-your-android-app-architecture-mvp-part-1-74efaf1cda40" target="_blank" rel="external">Blog Post on MVP Architecture</a> - Essential Guide For Designing Your Android App Architecture.</li>
</ul>
<h3 id="Third-Party-Libraries"><a href="#Third-Party-Libraries" class="headerlink" title="Third Party Libraries"></a>Third Party Libraries</h3><ul>
<li><a href="https://mindorks.com/open-source-projects" target="_blank" rel="external">Mindorks Open Source Projects</a> - Mindorks Open Source Projects</li>
<li><a href="http://android-arsenal.com/" target="_blank" rel="external">Android Arsenal</a> - Largest Reference for 3rd party libraries.</li>
<li><a href="https://github.com/JStumpp/awesome-android" target="_blank" rel="external">JStumpp Android Awesome</a> - The reference for 3rd party libraries.</li>
<li><a href="https://github.com/snowdream/awesome-android" target="_blank" rel="external">Snowdream Android Awesome</a> - The reference for 3rd party libraries.</li>
<li><a href="https://github.com/amitshekhariitbhu/Fast-Android-Networking" target="_blank" rel="external">Fast Android Networking</a> - Android Networking is a powerful library for doing any type of networking in Android applications.</li>
<li><a href="https://github.com/amitshekhariitbhu/Android-Debug-Database" target="_blank" rel="external">Android Debug Database</a> - Android Debug Database is a powerful library for debugging databases and shared preferences in Android applications.</li>
<li><a href="https://github.com/amitshekhariitbhu/GlideBitmapPool" target="_blank" rel="external">Glide Bitmap Pool</a> - Glide Bitmap Pool is a memory management library for reusing the bitmap memory.</li>
<li><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">Android Awesome UI</a> - The reference for Android 3rd party UI libraries.</li>
<li><a href="http://square.github.io/#android" target="_blank" rel="external">Square Libraries</a> - Android Libraries by Square.</li>
<li><a href="https://code.facebook.com/projects/android" target="_blank" rel="external">Android Libraries By Facebook</a> - Android 3rd Party Libraries By Facebook.</li>
<li><a href="https://android-libs.com/" target="_blank" rel="external">Android Libs</a> - Another reference for 3rd party libraries.</li>
<li><a href="http://alamkanak.github.io/android-libraries-and-resources/" target="_blank" rel="external">Android Libraries</a> - Another reference for 3rd party libraries.</li>
<li><a href="https://android-libraries.zeef.com/jurgen.stumpp" target="_blank" rel="external">Android Libraries</a> - Another reference for 3rd party libraries.</li>
<li><a href="http://p.codekk.com/" target="_blank" rel="external">Android Libraries</a> - Another reference for 3rd party libraries.</li>
<li><a href="https://play.google.com/store/apps/details?id=com.inappsquared.devappsdirect" target="_blank" rel="external">DevAppsDirect - Demo Market</a> - App that demonstrates different libraries.</li>
<li><a href="https://android.libhunt.com/" target="_blank" rel="external">Awesome Android @LibHunt</a> - Your go-to Android Toolbox.</li>
<li><a href="https://github.com/mcxiaoke/awesome-kotlin" target="_blank" rel="external">Android Kotlin Libraries</a> - A reference for 3rd party Kotlin libraries.</li>
<li><a href="http://gradleplease.appspot.com/" target="_blank" rel="external">Gradle Please</a> - Gradle Dependencies for Libraries.</li>
</ul>
<h3 id="Android-UI"><a href="#Android-UI" class="headerlink" title="Android UI"></a>Android UI</h3><ul>
<li><a href="http://androidniceties.tumblr.com/" target="_blank" rel="external">Android UI/UX</a> - The reference for Android Best UI/UX.</li>
<li><a href="https://romannurik.github.io/AndroidAssetStudio/" target="_blank" rel="external">Android Icon Generator</a> - Generator for icons and other assets.</li>
<li><a href="https://medium.com/exploring-android/exploring-the-new-android-constraintlayout-eed37fe8d8f1#.g25l4abme" target="_blank" rel="external">Android New ConstraintLayout</a> - Exploring the new Android ConstraintLayout.</li>
<li><a href="https://materialdesignicons.com/" target="_blank" rel="external">Material Design Icons</a> - Material Design Icons</li>
<li><a href="http://www.materialup.com/" target="_blank" rel="external">Material Up</a> - MaterialUp curates the best of Material Design</li>
<li><a href="http://android-holo-colors.com/" target="_blank" rel="external">Holo Colors</a> - Holo Colors for icons</li>
</ul>
<h3 id="Performance-And-Optimization"><a href="#Performance-And-Optimization" class="headerlink" title="Performance And Optimization"></a>Performance And Optimization</h3><ul>
<li><a href="https://github.com/Juude/awesome-android-performance" target="_blank" rel="external">Awesome Android Performance</a> - The reference for Android Performance.</li>
<li><a href="https://blog.mindorks.com/how-to-use-bitmap-pool-in-android-56c71a55533c" target="_blank" rel="external">Reusing Bitmap Memory</a> - How to use Bitmap Pool in Android ?</li>
<li><a href="https://github.com/amitshekhariitbhu/GlideBitmapPool" target="_blank" rel="external">Glide Bitmap Pool</a> - Glide Bitmap Pool is a memory management library for reusing the bitmap memory.</li>
<li><a href="https://blog.mindorks.com/battery-optimization-for-android-apps-f4ef6170ff70" target="_blank" rel="external">Battery Optimization for Android Apps</a> - Battery Optimization for Android Apps.</li>
<li><a href="https://www.youtube.com/watch?v=McAvq5SkeTk&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=60" target="_blank" rel="external">Memory Churn and Performance</a> - Android Performance Patterns: Memory Churn and Performance.</li>
<li><a href="https://www.youtube.com/watch?v=h7qHsk1nWKI&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=62" target="_blank" rel="external">Performance Cost of Memory Leaks</a> - Android Performance Patterns: Performance Cost of Memory Leaks.</li>
<li><a href="https://www.youtube.com/playlist?list=PLOU2XLYxmsIKEOXh5TwZEv89aofHzNCiu" target="_blank" rel="external">Android Performance Pattern</a> - Android Performance Pattern from Google.</li>
<li><a href="https://www.youtube.com/watch?v=r_LpCi6DQME" target="_blank" rel="external">Android Image Compression</a> - Best Guide For Image Compression.</li>
<li><a href="https://blog.mindorks.com/why-consider-flatbuffer-over-json-2e4aa8d4ed07" target="_blank" rel="external">FlatBuffer Vs JSON</a> - Why consider flatBuffer over JSON.</li>
<li><a href="https://github.com/krschultz/android-proguard-snippets" target="_blank" rel="external">Android Proguard Snippets</a> - Android Proguard Rules for Common 3rd Party Libraries.</li>
<li><a href="https://medium.com/google-developers/smallerapk-part-1-anatomy-of-an-apk-da83c25e7003#.g5f6dfng9" target="_blank" rel="external">APK size reduction</a> - Guide for apk size reduction.</li>
<li><a href="https://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.5q59i049s" target="_blank" rel="external">Android Instant Run</a> - Instant Run: How Does it Work?.</li>
<li><a href="http://www.methodscount.com/" target="_blank" rel="external">Method Count Library</a> - A website to check method count of 3rd party libraries.</li>
<li><a href="http://inloop.github.io/apk-method-count/" target="_blank" rel="external">Method Count APK</a> - A website to check method count of an APK.</li>
<li><a href="https://blog.mindorks.com/simple-and-fast-android-networking-19ed860d1455" target="_blank" rel="external">Using Fast Android Networking</a> - Android Fast And Easy Networking</li>
<li><a href="https://blog.mindorks.com/comparing-android-ndk-and-renderscript-1a718c01f6fe" target="_blank" rel="external">Comparing Android NDK and RenderScript</a> - Comparing Android NDK and RenderScript</li>
<li><a href="https://blog.mindorks.com/android-app-optimization-using-arraymap-and-sparsearray-f2b4e2e3dc47" target="_blank" rel="external">Android App Optimization Using ArrayMap and SparseArray</a> - Android App Optimization Using ArrayMap and SparseArray</li>
<li><a href="https://blog.mindorks.com/android-app-performance-metrics-a1176334186e" target="_blank" rel="external">Android App Performance Metrics</a> - Metrics that you should measure continuously while android application development</li>
</ul>
<h3 id="Best-Practices"><a href="#Best-Practices" class="headerlink" title="Best Practices"></a>Best Practices</h3><ul>
<li><a href="https://blog.mindorks.com/android-development-best-practices-83c94b027fd3" target="_blank" rel="external">Android Development Best Practices</a> - Android Development Best Practices.</li>
<li><a href="https://blog.mindorks.com/awesome-android-open-source-libraries-56a008c776c0" target="_blank" rel="external">Awesome Android Open Source Libraries</a> - Awesome Android Open Source Libraries.</li>
<li><a href="http://guides.codepath.com/android/Must-Have-Libraries#networking" target="_blank" rel="external">Must Have Libraries</a> - Guides for Must Have Libraries.</li>
<li><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">Android Best Practices</a> - Android Best Practices.</li>
<li><a href="https://medium.com/@cesarmcferreira/building-android-apps-30-things-that-experience-made-me-learn-the-hard-way-313680430bf9#.rej785f6d" target="_blank" rel="external">Building Android Apps</a> - Building Android Apps - Better Way.</li>
<li><a href="https://blog.mindorks.com/threadpoolexecutor-in-android-8e9d22330ee3" target="_blank" rel="external">Thread Pool Executor</a> - Using ThreadPoolExecutor in Android.</li>
<li><a href="https://medium.com/google-developers/developing-for-android-introduction-5345b451567c#.uenqgpr7q" target="_blank" rel="external">Developing Android</a> - A series of articles from Googler Chet Hasae and others, answering most commonly asked question: “What are some of the important rules to keep in mind when developing Android applications?”.</li>
<li><a href="https://github.com/google/iosched" target="_blank" rel="external">Google I/O Android App</a> - Google I/O Sources Code ,Best Coding Guidelines for Android Developers</li>
<li><a href="https://github.com/github/gitignore/blob/master/Android.gitignore" target="_blank" rel="external">Android GitIgnore</a> - Android GitIgnore.</li>
<li><a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">Android Architecture</a> - Android Architecture Blueprints.</li>
<li><a href="https://github.com/Trinea/android-open-project/tree/master/English%20Version" target="_blank" rel="external">Android Open Project</a> - Android Open Source Project subtotals.</li>
<li><a href="https://en.wikipedia.org/wiki/List_of_free_and_open-source_Android_applications" target="_blank" rel="external">Open Source Android App Codes</a> - List of Android Application which have open source code.</li>
<li><a href="https://github.com/git-tips/tips" target="_blank" rel="external">Git Tips</a> - Useful git tips required while development.</li>
<li><a href="https://play.google.com/store/apps/details?id=com.hmh.api&amp;hl=en" target="_blank" rel="external">API Demo</a> - Api demo.</li>
<li><a href="https://play.google.com/store/apps/details?id=com.touchboarder.android.api.demos&amp;hl=en" target="_blank" rel="external">Another API Demo</a> - Another Api demo.</li>
<li><a href="https://blog.mindorks.com/use-strictmode-to-find-things-you-did-by-accident-in-android-development-4cf0e7c8d997" target="_blank" rel="external">Using StrictMode in Android</a> - Use StrictMode To Find Things You Did By Accident In Android Development</li>
</ul>
<h3 id="News-And-Articles"><a href="#News-And-Articles" class="headerlink" title="News And Articles"></a>News And Articles</h3><ul>
<li><a href="http://androidweekly.net/" target="_blank" rel="external">Android Weekly</a> - Android Weekly is a free newsletter that helps you to stay cutting-edge with your Android Development.</li>
<li><a href="https://www.androiddevdigest.com/" target="_blank" rel="external">Android Dev Digest</a> - A Handcrafted Weekly AndroidDev Newsletter.</li>
<li><a href="https://blog.mindorks.com/android-development-useful-tools-fd73283e82e3" target="_blank" rel="external">Android Development Useful Tools</a> - Android Development Useful Tools</li>
<li><a href="https://blog.mindorks.com/google-released-the-developer-preview-of-android-things-iot-75cb49b9ce24" target="_blank" rel="external">Android Things</a> - About Android Things</li>
</ul>
<h3 id="Blogs"><a href="#Blogs" class="headerlink" title="Blogs"></a>Blogs</h3><ul>
<li><a href="https://mindorks.com/blogs" target="_blank" rel="external">Mindorks Blog</a> - Mindorks Blog.</li>
<li><a href="https://medium.com/@amitshekhar" target="_blank" rel="external">Android Medium Blog</a> - Android Medium Blog.</li>
<li><a href="https://blog.mindorks.com" target="_blank" rel="external">Android Mindorks Blog</a> - Android Mindorks Blog.</li>
<li><a href="http://android-developers.blogspot.in/" target="_blank" rel="external">Android Developers Blog</a> - Android Developers Blog.</li>
<li><a href="https://android.googleblog.com/" target="_blank" rel="external">Official Android Blog</a> - Official Android Blog.</li>
<li><a href="https://github.com/vbauer/android-blogs" target="_blank" rel="external">Android Blogs</a> - List of blogs about Android.</li>
</ul>
<h3 id="Guides-And-Tutorials"><a href="#Guides-And-Tutorials" class="headerlink" title="Guides And Tutorials"></a>Guides And Tutorials</h3><ul>
<li><a href="http://guides.codepath.com/android" target="_blank" rel="external">CodePath Android</a> - The Complete tutorial for Android Developement with examples.</li>
<li><a href="https://github.com/commonsguy/cw-omnibus" target="_blank" rel="external">Android Examples Codes</a> - The reference for Android Examples Codes.</li>
<li><a href="https://commonsware.com/Android/" target="_blank" rel="external">Android Tutorial Guide</a> - The Busy Coder’s Guide to Android Development.</li>
<li><a href="https://github.com/googlesamples" target="_blank" rel="external">Android Sample Codes</a> - Sample Codes From Google.</li>
<li><a href="https://codelabs.developers.google.com/?cat=Android" target="_blank" rel="external">Google Code Lab</a> - Google code lab.</li>
<li><a href="https://developer.android.com/index.html" target="_blank" rel="external">Android Development</a> - Android Development complete guide from Google.</li>
<li><a href="https://github.com/codepath/android_guides" target="_blank" rel="external">Android Guides</a> - Extensive Open-Source Guides for Android Developers.</li>
<li><a href="https://www.udacity.com/course/developing-android-apps--ud853" target="_blank" rel="external">Udacity Tutorials</a> - Udacity Tutorials.</li>
<li><a href="http://www.vogella.com/tutorials/android.html" target="_blank" rel="external">Vogella Tutorials</a> - Very good tutorials by Lars Vogel.</li>
<li><a href="https://github.com/nisrulz/android-examples" target="_blank" rel="external">Android Examples</a> - Andriod Examples.</li>
<li><a href="https://github.com/amitshekhariitbhu/Fast-Android-Networking/wiki/Using-Fast-Android-Networking-Library-With-RxJava" target="_blank" rel="external">Learn RxJava</a> - Simplest way to learn RxJava by example.</li>
<li><a href="https://github.com/amitshekhariitbhu/RxJava2-Android-Samples" target="_blank" rel="external">RxJava2-Android-Samples</a> - Learning RxJava for Android by example.</li>
<li><a href="https://blog.mindorks.com/understanding-rxjava-subject-publish-replay-behavior-and-async-subject-224d663d452f" target="_blank" rel="external">Learning RxJava Subject by example</a> - Understanding RxJava Subject — Publish, Replay, Behavior and Async Subject.</li>
<li><a href="https://github.com/kaushikgopal/RxJava-Android-Samples" target="_blank" rel="external">RxJava-Android-Samples</a> - Learning RxJava for Android by example.</li>
<li><a href="https://blog.mindorks.com/introduction-to-dagger-2-using-dependency-injection-in-android-part-1-223289c2a01b" target="_blank" rel="external">Introduction to Dagger2 - Part 1</a> - The simplest introduction to dagger2, Dependency Injection in Android Application.</li>
<li><a href="https://blog.mindorks.com/introduction-to-dagger-2-using-dependency-injection-in-android-part-2-b55857911bcd" target="_blank" rel="external">Introduction to Dagger2 - Part 2</a> - The simplest introduction to dagger2, Dependency Injection in Android Application.</li>
<li><a href="https://github.com/amitshekhariitbhu/awesome-android-things" target="_blank" rel="external">Awesome Android Things</a> - A curated list of awesome android things, tutorials, libraries and much more at one place.</li>
<li><a href="https://blog.mindorks.com/android-tensorflow-machine-learning-example-ff0e9b2654cc" target="_blank" rel="external">Android TensorFlow Machine Learning Example</a> - Building TensorFlow for Android.</li>
<li><a href="https://blog.mindorks.com/creating-custom-model-for-android-using-tensorflow-3f963d270bfb" target="_blank" rel="external">Creating Custom Model For Android Using TensorFlow</a> - Building TensorFlow Model for Android.</li>
<li><a href="https://blog.mindorks.com/using-snaphelper-in-recyclerview-fc616b6833e8" target="_blank" rel="external">Using SnapHelper in RecyclerView</a> - Using SnapHelper in RecyclerView.</li>
</ul>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ul>
<li>Updating it on daily basis as much as possible, work in progess.</li>
</ul>
<h3 id="Found-this-project-useful-heart"><a href="#Found-this-project-useful-heart" class="headerlink" title="Found this project useful :heart:"></a>Found this project useful :heart:</h3><ul>
<li>Support by clicking the :star: button on the upper right of this page. :v:</li>
</ul>
<h3 id="Contact-Let’s-become-friend"><a href="#Contact-Let’s-become-friend" class="headerlink" title="Contact - Let’s become friend"></a>Contact - Let’s become friend</h3><ul>
<li><a href="https://twitter.com/amitiitbhu" target="_blank" rel="external">Twitter</a></li>
<li><a href="https://github.com/amitshekhariitbhu" target="_blank" rel="external">Github</a></li>
<li><a href="https://medium.com/@amitshekhar" target="_blank" rel="external">Medium</a></li>
<li><a href="https://www.facebook.com/amit.shekhar.iitbhu" target="_blank" rel="external">Facebook</a></li>
</ul>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p><a href="https://creativecommons.org/publicdomain/zero/1.0/" target="_blank" rel="external"><img src="http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg" alt="CC0"></a></p>
<p>To the extent possible under law, <a href="https://github.com/amitshekhariitbhu" target="_blank" rel="external">Amit Shekhar</a> has waived all copyright and related or neighboring rights to this work.</p>
<h2 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h2><p>Your contributions are always welcome! Just follow the following format: <code>[reference name](link) - Description.</code> If you like it , give a star to this project</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/amitshekhariitbhu/awesome-android-complete-reference&quot;&gt;Awesome Android Complete Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A curated list of Android Complete References at one place. A complete reference for android developers. Here you can find references about everything you use while Android Development.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Awesome Resources" scheme="http://ipcreator.me/tags/Awesome-Resources/"/>
    
  </entry>
  
  <entry>
    <title>Stetho——A Debug Bridge for Android Applications</title>
    <link href="http://ipcreator.me/2017/03/25/Program/Android/stetho-chrome/"/>
    <id>http://ipcreator.me/2017/03/25/Program/Android/stetho-chrome/</id>
    <published>2017-03-25T13:29:06.000Z</published>
    <updated>2017-03-27T10:04:47.015Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://facebook.github.io/stetho/static/logo.png" alt=""><br><a href="https://github.com/facebook/stetho" target="_blank" rel="external">Stetho</a></p>
<p>Stetho is a sophisticated debug bridge for Android applications. When enabled, developers have access to the Chrome Developer Tools feature natively part of the Chrome desktop browser. Developers can also choose to enable the optional dumpapp tool which offers a powerful command-line interface to application internals.</p>
<a id="more"></a>
<h1 id="Stetho"><a href="#Stetho" class="headerlink" title="Stetho "></a>Stetho <a href="https://travis-ci.org/facebook/stetho" target="_blank" rel="external"><img src="https://travis-ci.org/facebook/stetho.svg?branch=master" alt="Build Status"></a></h1><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><h3 id="Chrome-DevTools"><a href="#Chrome-DevTools" class="headerlink" title="Chrome DevTools"></a>Chrome DevTools</h3><p><img src="http://facebook.github.io/stetho/static/images/inspector-discovery.png" alt=""><br>The integration with the Chrome DevTools frontend is implemented using a client/server protocol which the Stetho software provides for your application. Once your application is integrated, simply navigate to chrome://inspect and click “Inspect” to get started!</p>
<h3 id="Database-Inspection"><a href="#Database-Inspection" class="headerlink" title="Database Inspection"></a>Database Inspection</h3><p><img src="http://facebook.github.io/stetho/static/images/inspector-sqlite.png" alt=""><br>SQLite databases can be visualized and interactively explored with full read/write capabilities.</p>
<h3 id="View-Hierarchy"><a href="#View-Hierarchy" class="headerlink" title="View Hierarchy"></a>View Hierarchy</h3><p><img src="http://facebook.github.io/stetho/static/images/inspector-elements.png" alt=""><br>View hierarchy support for ICS (API 15) and up! Lots of goodies such as instances virtually placed in the hierarchy, view highlighting, and the ability to tap on a view to jump to its position in the hierarchy.</p>
<p><a href="https://facebook.github.io/stetho" target="_blank" rel="external">Stetho</a> is a sophisticated debug bridge for Android applications. When enabled,<br>developers have access to the Chrome Developer Tools feature natively part of<br>the Chrome desktop browser. Developers can also choose to enable the optional<br><code>dumpapp</code> tool which offers a powerful command-line interface to application<br>internals.</p>
<p>Once you complete the set-up instructions below, just start your app and point<br>your laptop browser to <code>chrome://inspect</code>.  Click the “Inspect” button to<br>begin.</p>
<h2 id="Set-up"><a href="#Set-up" class="headerlink" title="Set-up"></a>Set-up</h2><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><p>Download <a href="https://github.com/facebook/stetho/releases/latest" target="_blank" rel="external">the latest JARs</a> or grab via Gradle:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.facebook.stetho:stetho:1.4.2'</span></div></pre></td></tr></table></figure></p>
<p>or Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.facebook.stetho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stetho<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Only the main <code>stetho</code> dependency is strictly required; however, you may also wish to use one of the network helpers:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.facebook.stetho:stetho-okhttp3:1.4.2'</span></div></pre></td></tr></table></figure>
<p>or:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.facebook.stetho:stetho-urlconnection:1.4.2'</span></div></pre></td></tr></table></figure></p>
<p>You can also enable a JavaScript console with:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.facebook.stetho:stetho-js-rhino:1.4.2'</span></div></pre></td></tr></table></figure>
<p>For more details on how to customize the JavaScript runtime see <a href="stetho-js-rhino/">stetho-js-rhino</a>.</p>
<h3 id="Putting-it-together"><a href="#Putting-it-together" class="headerlink" title="Putting it together"></a>Putting it together</h3><p>Integrating with Stetho is intended to be seamless and straightforward for<br>most existing Android applications.  There is a simple initialization step<br>which occurs in your <code>Application</code> class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    Stetho.initializeWithDefaults(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This brings up most of the default configuration but does not enable some<br>additional hooks (most notably, network inspection).  See below for specific<br>details on individual subsystems.</p>
<h3 id="Enable-network-inspection"><a href="#Enable-network-inspection" class="headerlink" title="Enable network inspection"></a>Enable network inspection</h3><p>If you are using the popular <a href="https://github.com/square/okhttp" target="_blank" rel="external">OkHttp</a><br>library at the 3.x release, you can use the<br><a href="https://github.com/square/okhttp/wiki/Interceptors" target="_blank" rel="external">Interceptors</a> system to<br>automatically hook into your existing stack.  This is currently the simplest<br>and most straightforward way to enable network inspection:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">    .addNetworkInterceptor(<span class="keyword">new</span> StethoInterceptor())</div><div class="line">    .build()</div></pre></td></tr></table></figure>
<p>Note that okhttp 2.x will work as well, but with slightly different syntax and you must use the <code>stetho-okhttp</code> artifact (not <code>stetho-okhttp3</code>).</p>
<p>As interceptors can modify the request and response, add the Stetho interceptor after all others to get an accurate view of the network traffic.</p>
<p>If you are using <code>HttpURLConnection</code>, you can use <code>StethoURLConnectionManager</code><br>to assist with integration though you should be aware that there are some<br>caveats with this approach.  In particular, you must explicitly add<br><code>Accept-Encoding: gzip</code> to the request headers and manually handle compressed<br>responses in order for Stetho to report compressed payload sizes.</p>
<p>See the <a href="stetho-sample"><code>stetho-sample</code> project</a> for more details.</p>
<h2 id="Going-further"><a href="#Going-further" class="headerlink" title="Going further"></a>Going further</h2><h3 id="Custom-dumpapp-plugins"><a href="#Custom-dumpapp-plugins" class="headerlink" title="Custom dumpapp plugins"></a>Custom dumpapp plugins</h3><p>Custom plugins are the preferred means of extending the <code>dumpapp</code> system and<br>can be added easily during configuration.  Simply replace your configuration<br>step as such:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Stetho.initialize(Stetho.newInitializerBuilder(context)</div><div class="line">    .enableDumpapp(<span class="keyword">new</span> DumperPluginsProvider() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> Iterable&lt;DumperPlugin&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Stetho.DefaultDumperPluginsBuilder(context)</div><div class="line">            .provide(<span class="keyword">new</span> MyDumperPlugin())</div><div class="line">            .finish();</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    .enableWebKitInspector(Stetho.defaultInspectorModulesProvider(context))</div><div class="line">    .build())</div></pre></td></tr></table></figure>
<p>See the <a href="stetho-sample"><code>stetho-sample</code> project</a> for more details.</p>
<h2 id="Improve-Stetho"><a href="#Improve-Stetho" class="headerlink" title="Improve Stetho!"></a>Improve Stetho!</h2><p>See the <a href="CONTRIBUTING.md">CONTRIBUTING.md</a> file for how to help out.</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Stetho is BSD-licensed. We also provide an additional patent grant.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://facebook.github.io/stetho/static/logo.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/facebook/stetho&quot;&gt;Stetho&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stetho is a sophisticated debug bridge for Android applications. When enabled, developers have access to the Chrome Developer Tools feature natively part of the Chrome desktop browser. Developers can also choose to enable the optional dumpapp tool which offers a powerful command-line interface to application internals.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Debug" scheme="http://ipcreator.me/tags/Debug/"/>
    
      <category term="Stetho" scheme="http://ipcreator.me/tags/Stetho/"/>
    
  </entry>
  
  <entry>
    <title>Fast Android Networking</title>
    <link href="http://ipcreator.me/2017/03/25/Program/Android/fast-android-networking/"/>
    <id>http://ipcreator.me/2017/03/25/Program/Android/fast-android-networking/</id>
    <published>2017-03-25T13:29:06.000Z</published>
    <updated>2017-03-27T10:04:47.026Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/amitshekhariitbhu/Fast-Android-Networking/master/assets/androidnetworking.png" alt=""><br><a href="https://github.com/amitshekhariitbhu/Fast-Android-Networking" target="_blank" rel="external">Fast-Android-Networking</a></p>
<p><strong>Difference over other Networking Library</strong></p>
<ol>
<li>In Fast Android Networking Library, OkHttpClient can be customized for every request easily.</li>
<li>As Fast Android Networking Library uses OkHttp and Okio, it is faster.</li>
<li>Single library for all type of networking.</li>
<li>Supports RxJava, RxJava2 -&gt; Check here</li>
<li>Current bandwidth and connection quality can be obtained to decide logic of code.</li>
<li>Executor can be passed to any request to get response in another thread.</li>
<li>Complete analytics of any request can be obtained.</li>
<li>All types of customization is possible.</li>
<li>Immediate Request is really immediate now.</li>
<li>Prefetching of any request can be done so that it gives instant data when required from cache.</li>
<li>Proper cancellation of request.</li>
<li>Do not cancel a request if completed more than a threshold percentage.</li>
<li>Simple interface to make any type of request.</li>
<li>Proper Response Caching, hence reducing bandwidth usage.</li>
</ol>
<a id="more"></a>
<h1 id="Fast-Android-Networking-Library"><a href="#Fast-Android-Networking-Library" class="headerlink" title="Fast Android Networking Library"></a>Fast Android Networking Library</h1><p><a href="https://travis-ci.org/amitshekhariitbhu/Fast-Android-Networking" target="_blank" rel="external"><img src="https://travis-ci.org/amitshekhariitbhu/Fast-Android-Networking.svg?branch=master" alt="Build Status"></a><br><a href="https://mindorks.com/open-source-projects" target="_blank" rel="external"><img src="https://img.shields.io/badge/mindorks-opensource-blue.svg" alt="Mindorks"></a><br><a href="http://android-arsenal.com/details/1/3695" target="_blank" rel="external"><img src="https://img.shields.io/badge/Android%20Arsenal-Android%20Networking-blue.svg?style=flat" alt="Android Arsenal"></a><br><a href="https://android-arsenal.com/api?level=9" target="_blank" rel="external"><img src="https://img.shields.io/badge/API-9%2B-brightgreen.svg?style=flat" alt="API"></a><br><a href="https://bintray.com/amitshekhariitbhu/maven/android-networking/_latestVersion" target="_blank" rel="external"><img src="https://api.bintray.com/packages/amitshekhariitbhu/maven/android-networking/images/download.svg" alt="Download"> </a><br><a href="https://opensource.org/licenses/Apache-2.0" target="_blank" rel="external"><img src="https://badges.frapsoft.com/os/v1/open-source.svg?v=102" alt="Open Source Love"></a><br><a href="https://github.com/amitshekhariitbhu/Fast-Android-Networking/blob/master/LICENSE" target="_blank" rel="external"><img src="https://img.shields.io/badge/license-Apache%202.0-blue.svg" alt="License"></a></p>
<h3 id="About-Fast-Android-Networking-Library"><a href="#About-Fast-Android-Networking-Library" class="headerlink" title="About Fast Android Networking Library"></a>About Fast Android Networking Library</h3><p>Fast Android Networking Library is a powerful library for doing any type of networking in Android applications which is made on top of <a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp Networking Layer</a>.</p>
<p>Fast Android Networking Library takes care of each and everything. So you don’t have to do anything, just make request and listen for the response.</p>
<h3 id="Why-use-Fast-Android-Networking"><a href="#Why-use-Fast-Android-Networking" class="headerlink" title="Why use Fast Android Networking ?"></a>Why use Fast Android Networking ?</h3><ul>
<li>Recent removal of HttpClient in Android Marshmallow(Android M) made other networking library obsolete.</li>
<li>No other single library do each and everything like making request, downloading any type of file, uploading file, loading<br>image from network in ImageView, etc. There are libraries but they are outdated.</li>
<li>No other library provided simple interface for doing all types of things in networking like setting priority, cancelling, etc.</li>
<li>As it uses <a href="https://github.com/square/okio" target="_blank" rel="external">Okio</a> , No more GC overhead in android application.<br><a href="https://github.com/square/okio" target="_blank" rel="external">Okio</a> is made to handle GC overhead while allocating memory.<br><a href="https://github.com/square/okio" target="_blank" rel="external">Okio</a> do some clever things to save CPU and memory.</li>
<li>As it uses <a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp</a> , most important it supports HTTP/2.  </li>
</ul>
<h3 id="RxJava2-Support-check-here"><a href="#RxJava2-Support-check-here" class="headerlink" title="RxJava2 Support, check here."></a>RxJava2 Support, <a href="https://amitshekhariitbhu.github.io/Fast-Android-Networking/rxjava2_support.html" target="_blank" rel="external">check here</a>.</h3><h3 id="RxJava2-Fast-Android-Networking-Dagger2-with-MVP-Architecture-Project-Check-here"><a href="#RxJava2-Fast-Android-Networking-Dagger2-with-MVP-Architecture-Project-Check-here" class="headerlink" title="RxJava2 + Fast Android Networking + Dagger2 with MVP Architecture Project, Check here"></a>RxJava2 + Fast Android Networking + Dagger2 with MVP Architecture Project, <a href="https://github.com/MindorksOpenSource/android-mvp-architecture" target="_blank" rel="external">Check here</a></h3><h3 id="Another-awesome-library-for-debugging-databases-and-shared-preferences-Check-here"><a href="#Another-awesome-library-for-debugging-databases-and-shared-preferences-Check-here" class="headerlink" title="Another awesome library for debugging databases and shared preferences, Check here"></a>Another awesome library for debugging databases and shared preferences, <a href="https://github.com/amitshekhariitbhu/Android-Debug-Database" target="_blank" rel="external">Check here</a></h3><h3 id="Find-this-project-useful-heart"><a href="#Find-this-project-useful-heart" class="headerlink" title="Find this project useful ? :heart:"></a>Find this project useful ? :heart:</h3><ul>
<li>Support it by clicking the :star: button on the upper right of this page. :v:</li>
</ul>
<p>For full details, visit the documentation on our web site :</p>
<p><a href="https://amitshekhariitbhu.github.io/Fast-Android-Networking" target="_blank"><img src="https://raw.githubusercontent.com/amitshekhariitbhu/Fast-Android-Networking/master/assets/get_started.png" width="150" height="42"></a></p>
<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>Fast Android Networking Library can be included in any Android application.</p>
<p>Fast Android Networking Library supports Android 2.3 (Gingerbread) and later.</p>
<h2 id="Using-Fast-Android-Networking-Library-in-your-application"><a href="#Using-Fast-Android-Networking-Library-in-your-application" class="headerlink" title="Using Fast Android Networking Library in your application"></a>Using Fast Android Networking Library in your application</h2><p>Add this in your build.gradle<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.amitshekhar.android:android-networking:1.0.0'</span></div></pre></td></tr></table></figure></p>
<p>Do not forget to add internet permission in manifest if already not present<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>Then initialize it in onCreate() Method of application class :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.initialize(getApplicationContext());</div></pre></td></tr></table></figure></p>
<p>Initializing it with some customization , as it uses <a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp</a> as networking layer, you can pass custom okHttpClient while initializing it.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Adding an Network Interceptor for Debugging purpose :</span></div><div class="line">OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient() .newBuilder()</div><div class="line">                        .addNetworkInterceptor(<span class="keyword">new</span> StethoInterceptor())</div><div class="line">                        .build();</div><div class="line">AndroidNetworking.initialize(getApplicationContext(),okHttpClient);</div></pre></td></tr></table></figure></p>
<p>Using the Fast Android Networking with Jackson Parser<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.amitshekhar.android:jackson-android-networking:1.0.0'</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Then set the JacksonParserFactory like below</span></div><div class="line">AndroidNetworking.setParserFactory(<span class="keyword">new</span> JacksonParserFactory());</div></pre></td></tr></table></figure>
<h3 id="Making-a-GET-Request"><a href="#Making-a-GET-Request" class="headerlink" title="Making a GET Request"></a>Making a GET Request</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.get(<span class="string">"https://fierce-cove-29863.herokuapp.com/getAllUsers/&#123;pageNumber&#125;"</span>)</div><div class="line">                 .addPathParameter(<span class="string">"pageNumber"</span>, <span class="string">"0"</span>)</div><div class="line">                 .addQueryParameter(<span class="string">"limit"</span>, <span class="string">"3"</span>)</div><div class="line">                 .addHeaders(<span class="string">"token"</span>, <span class="string">"1234"</span>)</div><div class="line">                 .setTag(<span class="string">"test"</span>)</div><div class="line">                 .setPriority(Priority.LOW)</div><div class="line">                 .build()</div><div class="line">                 .getAsJSONArray(<span class="keyword">new</span> JSONArrayRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONArray response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<h3 id="Making-a-POST-Request"><a href="#Making-a-POST-Request" class="headerlink" title="Making a POST Request"></a>Making a POST Request</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.post(<span class="string">"https://fierce-cove-29863.herokuapp.com/createAnUser"</span>)</div><div class="line">                 .addBodyParameter(<span class="string">"firstname"</span>, <span class="string">"Amit"</span>)</div><div class="line">                 .addBodyParameter(<span class="string">"lastname"</span>, <span class="string">"Shekhar"</span>)</div><div class="line">                 .setTag(<span class="string">"test"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .build()</div><div class="line">                 .getAsJSONObject(<span class="keyword">new</span> JSONObjectRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<p>You can also post java object, json, file, etc in POST request like this.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">User user = <span class="keyword">new</span> User();</div><div class="line">user.firstname = <span class="string">"Amit"</span>;</div><div class="line">user.lastname = <span class="string">"Shekhar"</span>;</div><div class="line"></div><div class="line">AndroidNetworking.post(<span class="string">"https://fierce-cove-29863.herokuapp.com/createUser"</span>)</div><div class="line">                 .addBodyParameter(user) <span class="comment">// posting java object</span></div><div class="line">                 .setTag(<span class="string">"test"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .build()</div><div class="line">                 .getAsJSONArray(<span class="keyword">new</span> JSONArrayRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONArray response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line"></div><div class="line">JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    jsonObject.put(<span class="string">"firstname"</span>, <span class="string">"Amit"</span>);</div><div class="line">    jsonObject.put(<span class="string">"lastname"</span>, <span class="string">"Shekhar"</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">  e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">AndroidNetworking.post(<span class="string">"https://fierce-cove-29863.herokuapp.com/createUser"</span>)</div><div class="line">                 .addJSONObjectBody(jsonObject) <span class="comment">// posting json</span></div><div class="line">                 .setTag(<span class="string">"test"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .build()</div><div class="line">                 .getAsJSONArray(<span class="keyword">new</span> JSONArrayRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONArray response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">AndroidNetworking.post(<span class="string">"https://fierce-cove-29863.herokuapp.com/postFile"</span>)</div><div class="line">                 .addFileBody(file) <span class="comment">// posting any type of file</span></div><div class="line">                 .setTag(<span class="string">"test"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .build()</div><div class="line">                 .getAsJSONObject(<span class="keyword">new</span> JSONObjectRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="Using-it-with-your-own-JAVA-Object-JSON-Parser"><a href="#Using-it-with-your-own-JAVA-Object-JSON-Parser" class="headerlink" title="Using it with your own JAVA Object - JSON Parser"></a>Using it with your own JAVA Object - JSON Parser</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*--------------Example One -&gt; Getting the userList----------------*/</span></div><div class="line">AndroidNetworking.get(<span class="string">"https://fierce-cove-29863.herokuapp.com/getAllUsers/&#123;pageNumber&#125;"</span>)</div><div class="line">                .addPathParameter(<span class="string">"pageNumber"</span>, <span class="string">"0"</span>)</div><div class="line">                .addQueryParameter(<span class="string">"limit"</span>, <span class="string">"3"</span>)</div><div class="line">                .setTag(<span class="keyword">this</span>)</div><div class="line">                .setPriority(Priority.LOW)</div><div class="line">                .build()</div><div class="line">                .getAsObjectList(User.class, <span class="keyword">new</span> ParsedRequestListener&lt;List&lt;User&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response</span></div><div class="line">                      Log.d(TAG, <span class="string">"userList size : "</span> + users.size());</div><div class="line">                      <span class="keyword">for</span> (User user : users) &#123;</div><div class="line">                        Log.d(TAG, <span class="string">"id : "</span> + user.id);</div><div class="line">                        Log.d(TAG, <span class="string">"firstname : "</span> + user.firstname);</div><div class="line">                        Log.d(TAG, <span class="string">"lastname : "</span> + user.lastname);</div><div class="line">                      &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError anError)</span> </span>&#123;</div><div class="line">                     <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"><span class="comment">/*--------------Example Two -&gt; Getting an user----------------*/</span></div><div class="line">AndroidNetworking.get(<span class="string">"https://fierce-cove-29863.herokuapp.com/getAnUserDetail/&#123;userId&#125;"</span>)</div><div class="line">                .addPathParameter(<span class="string">"userId"</span>, <span class="string">"1"</span>)</div><div class="line">                .setTag(<span class="keyword">this</span>)</div><div class="line">                .setPriority(Priority.LOW)</div><div class="line">                .build()</div><div class="line">                .getAsObject(User.class, <span class="keyword">new</span> ParsedRequestListener&lt;User&gt;() &#123;</div><div class="line">                     <span class="meta">@Override</span></div><div class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">                        <span class="comment">// do anything with response</span></div><div class="line">                        Log.d(TAG, <span class="string">"id : "</span> + user.id);</div><div class="line">                        Log.d(TAG, <span class="string">"firstname : "</span> + user.firstname);</div><div class="line">                        Log.d(TAG, <span class="string">"lastname : "</span> + user.lastname);</div><div class="line">                     &#125;</div><div class="line">                     <span class="meta">@Override</span></div><div class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError anError)</span> </span>&#123;</div><div class="line">                        <span class="comment">// handle error</span></div><div class="line">                     &#125;</div><div class="line">                 &#125;);</div><div class="line"><span class="comment">/*-- Note : YourObject.class, getAsObject and getAsObjectList are important here --*/</span></div></pre></td></tr></table></figure>
<h3 id="Downloading-a-file-from-server"><a href="#Downloading-a-file-from-server" class="headerlink" title="Downloading a file from server"></a>Downloading a file from server</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.download(url,dirPath,fileName)</div><div class="line">                 .setTag(<span class="string">"downloadTest"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .build()</div><div class="line">                 .setDownloadProgressListener(<span class="keyword">new</span> DownloadProgressListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">long</span> bytesDownloaded, <span class="keyword">long</span> totalBytes)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with progress  </span></div><div class="line">                    &#125;</div><div class="line">                 &#125;)</div><div class="line">                 .startDownload(<span class="keyword">new</span> DownloadListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything after completion</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error    </span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<h3 id="Uploading-a-file-to-server"><a href="#Uploading-a-file-to-server" class="headerlink" title="Uploading a file to server"></a>Uploading a file to server</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.upload(url)</div><div class="line">                 .addMultipartFile(<span class="string">"image"</span>,file)    </div><div class="line">                 .addMultipartParameter(<span class="string">"key"</span>,<span class="string">"value"</span>)</div><div class="line">                 .setTag(<span class="string">"uploadTest"</span>)</div><div class="line">                 .setPriority(Priority.HIGH)</div><div class="line">                 .build()</div><div class="line">                 .setUploadProgressListener(<span class="keyword">new</span> UploadProgressListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">long</span> bytesUploaded, <span class="keyword">long</span> totalBytes)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with progress</span></div><div class="line">                    &#125;</div><div class="line">                 &#125;)</div><div class="line">                 .getAsJSONObject(<span class="keyword">new</span> JSONObjectRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response                </span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                 &#125;);</div></pre></td></tr></table></figure>
<h3 id="Getting-Response-and-completion-in-an-another-thread-executor"><a href="#Getting-Response-and-completion-in-an-another-thread-executor" class="headerlink" title="Getting Response and completion in an another thread executor"></a>Getting Response and completion in an another thread executor</h3><p>(Note : Error and Progress will always be returned in main thread of application)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.upload(url)</div><div class="line">                 .addMultipartFile(<span class="string">"image"</span>,file)  </div><div class="line">                 .addMultipartParameter(<span class="string">"key"</span>,<span class="string">"value"</span>)  </div><div class="line">                 .setTag(<span class="string">"uploadTest"</span>)</div><div class="line">                 .setPriority(Priority.HIGH)</div><div class="line">                 .build()</div><div class="line">                 .setExecutor(Executors.newSingleThreadExecutor()) <span class="comment">// setting an executor to get response or completion on that executor thread</span></div><div class="line">                 .setUploadProgressListener(<span class="keyword">new</span> UploadProgressListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">long</span> bytesUploaded, <span class="keyword">long</span> totalBytes)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with progress</span></div><div class="line">                    &#125;</div><div class="line">                 &#125;)</div><div class="line">                 .getAsJSONObject(<span class="keyword">new</span> JSONObjectRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// below code will be executed in the executor provided</span></div><div class="line">                      <span class="comment">// do anything with response                </span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                 &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="Setting-a-Percentage-Threshold-For-Not-Cancelling-the-request-if-it-has-completed-the-given-threshold"><a href="#Setting-a-Percentage-Threshold-For-Not-Cancelling-the-request-if-it-has-completed-the-given-threshold" class="headerlink" title="Setting a Percentage Threshold For Not Cancelling the request if it has completed the given threshold"></a>Setting a Percentage Threshold For Not Cancelling the request if it has completed the given threshold</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.download(url,dirPath,fileName)</div><div class="line">                 .setTag(<span class="string">"downloadTest"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .setPercentageThresholdForCancelling(<span class="number">50</span>) <span class="comment">// even if at the time of cancelling it will not cancel if 50%</span></div><div class="line">                 .build()                                 <span class="comment">// downloading is done.But can be cancalled with forceCancel.</span></div><div class="line">                 .setDownloadProgressListener(<span class="keyword">new</span> DownloadProgressListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">long</span> bytesDownloaded, <span class="keyword">long</span> totalBytes)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with progress  </span></div><div class="line">                    &#125;</div><div class="line">                 &#125;)</div><div class="line">                 .startDownload(<span class="keyword">new</span> DownloadListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything after completion</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error    </span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<h3 id="Cancelling-a-request"><a href="#Cancelling-a-request" class="headerlink" title="Cancelling a request."></a>Cancelling a request.</h3><p>Any request with a given tag can be cancelled. Just do like this.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.cancel(<span class="string">"tag"</span>); <span class="comment">// All the requests with the given tag will be cancelled.</span></div><div class="line">AndroidNetworking.forceCancel(<span class="string">"tag"</span>);  <span class="comment">// All the requests with the given tag will be cancelled , even if any percent threshold is</span></div><div class="line">                                       <span class="comment">// set , it will be cancelled forcefully.</span></div><div class="line">AndroidNetworking.cancelAll(); <span class="comment">// All the requests will be cancelled.  </span></div><div class="line">AndroidNetworking.forceCancelAll(); <span class="comment">// All the requests will be cancelled , even if any percent threshold is</span></div><div class="line">                               <span class="comment">// set , it will be cancelled forcefully.</span></div></pre></td></tr></table></figure></p>
<h3 id="Loading-image-from-network-into-ImageView"><a href="#Loading-image-from-network-into-ImageView" class="headerlink" title="Loading image from network into ImageView"></a>Loading image from network into ImageView</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.androidnetworking.widget.ANImageView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/imageView"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">    <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span> /&gt;</div><div class="line"></div><div class="line">imageView.setDefaultImageResId(R.drawable.default);</div><div class="line">imageView.setErrorImageResId(R.drawable.error);</div><div class="line">imageView.setImageUrl(imageUrl);</div></pre></td></tr></table></figure>
<h3 id="Getting-Bitmap-from-url-with-some-specified-parameters"><a href="#Getting-Bitmap-from-url-with-some-specified-parameters" class="headerlink" title="Getting Bitmap from url with some specified parameters"></a>Getting Bitmap from url with some specified parameters</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.get(imageUrl)</div><div class="line">                 .setTag(<span class="string">"imageRequestTag"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .setBitmapMaxHeight(<span class="number">100</span>)</div><div class="line">                 .setBitmapMaxWidth(<span class="number">100</span>)</div><div class="line">                 .setBitmapConfig(Bitmap.Config.ARGB_8888)</div><div class="line">                 .build()</div><div class="line">                 .getAsBitmap(<span class="keyword">new</span> BitmapRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">                    <span class="comment">// do anything with bitmap</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<h3 id="Error-Code-Handling"><a href="#Error-Code-Handling" class="headerlink" title="Error Code Handling"></a>Error Code Handling</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (error.getErrorCode() != <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// received error from server</span></div><div class="line">        <span class="comment">// error.getErrorCode() - the error code from server</span></div><div class="line">        <span class="comment">// error.getErrorBody() - the error body from server</span></div><div class="line">        <span class="comment">// error.getErrorDetail() - just an error detail</span></div><div class="line">        Log.d(TAG, <span class="string">"onError errorCode : "</span> + error.getErrorCode());</div><div class="line">        Log.d(TAG, <span class="string">"onError errorBody : "</span> + error.getErrorBody());</div><div class="line">        Log.d(TAG, <span class="string">"onError errorDetail : "</span> + error.getErrorDetail());</div><div class="line">        <span class="comment">// get parsed error object (If ApiError is your class)</span></div><div class="line">        ApiError apiError = error.getErrorAsObject(ApiError.class);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// error.getErrorDetail() : connectionError, parseError, requestCancelledError</span></div><div class="line">        Log.d(TAG, <span class="string">"onError errorDetail : "</span> + error.getErrorDetail());</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Remove-Bitmap-from-cache-or-clear-cache"><a href="#Remove-Bitmap-from-cache-or-clear-cache" class="headerlink" title="Remove Bitmap from cache or clear cache"></a>Remove Bitmap from cache or clear cache</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.evictBitmap(key); <span class="comment">// remove a bitmap with key from LruCache</span></div><div class="line">AndroidNetworking.evictAllBitmap(); <span class="comment">// clear LruCache</span></div></pre></td></tr></table></figure>
<h3 id="Prefetch-a-request-so-that-it-can-return-from-cache-when-required-at-instant"><a href="#Prefetch-a-request-so-that-it-can-return-from-cache-when-required-at-instant" class="headerlink" title="Prefetch a request (so that it can return from cache when required at instant)"></a>Prefetch a request (so that it can return from cache when required at instant)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.get(<span class="string">"https://fierce-cove-29863.herokuapp.com/getAllUsers/&#123;pageNumber&#125;"</span>)</div><div class="line">                .addPathParameter(<span class="string">"pageNumber"</span>, <span class="string">"0"</span>)</div><div class="line">                .addQueryParameter(<span class="string">"limit"</span>, <span class="string">"30"</span>)</div><div class="line">                .setTag(<span class="keyword">this</span>)</div><div class="line">                .setPriority(Priority.LOW)</div><div class="line">                .build()</div><div class="line">                .prefetch();</div></pre></td></tr></table></figure>
<h3 id="Customizing-OkHttpClient-for-a-particular-request"><a href="#Customizing-OkHttpClient-for-a-particular-request" class="headerlink" title="Customizing OkHttpClient for a particular request"></a>Customizing OkHttpClient for a particular request</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient().newBuilder()</div><div class="line">                .addInterceptor(<span class="keyword">new</span> GzipRequestInterceptor())</div><div class="line">                .build();</div><div class="line"></div><div class="line">AndroidNetworking.get(<span class="string">"https://fierce-cove-29863.herokuapp.com/getAllUsers/&#123;pageNumber&#125;"</span>)</div><div class="line">                 .addPathParameter(<span class="string">"pageNumber"</span>, <span class="string">"0"</span>)</div><div class="line">                 .addQueryParameter(<span class="string">"limit"</span>, <span class="string">"3"</span>)</div><div class="line">                 .addHeaders(<span class="string">"token"</span>, <span class="string">"1234"</span>)</div><div class="line">                 .setTag(<span class="string">"test"</span>)</div><div class="line">                 .setPriority(Priority.LOW)</div><div class="line">                 .setOkHttpClient(okHttpClient) <span class="comment">// passing a custom okHttpClient</span></div><div class="line">                 .build()</div><div class="line">                 .getAsJSONArray(<span class="keyword">new</span> JSONArrayRequestListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONArray response)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with response</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                    <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<h3 id="Making-a-conditional-request-Building-a-request"><a href="#Making-a-conditional-request-Building-a-request" class="headerlink" title="Making a conditional request (Building a request)"></a>Making a conditional request (Building a request)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">ANRequest.GetRequestBuilder getRequestBuilder = <span class="keyword">new</span> ANRequest.GetRequestBuilder(ApiEndPoint.BASE_URL + ApiEndPoint.CHECK_FOR_HEADER);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(isHeaderRequired)&#123;</div><div class="line"> getRequestBuilder.addHeaders(<span class="string">"token"</span>, <span class="string">"1234"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(executorRequired)&#123;</div><div class="line"> getRequestBuilder.setExecutor(Executors.newSingleThreadExecutor());</div><div class="line">&#125;</div><div class="line"></div><div class="line">ANRequest anRequest = getRequestBuilder.build();       </div><div class="line"></div><div class="line">anRequest.getAsJSONObject(<span class="keyword">new</span> JSONObjectRequestListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject response)</span> </span>&#123;</div><div class="line">      <span class="comment">// do anything with response</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">      <span class="comment">// handle error</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="ConnectionClass-Listener-to-get-current-network-quality-and-bandwidth"><a href="#ConnectionClass-Listener-to-get-current-network-quality-and-bandwidth" class="headerlink" title="ConnectionClass Listener to get current network quality and bandwidth"></a>ConnectionClass Listener to get current network quality and bandwidth</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Adding Listener</span></div><div class="line">AndroidNetworking.setConnectionQualityChangeListener(<span class="keyword">new</span> ConnectionQualityChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(ConnectionQuality currentConnectionQuality, <span class="keyword">int</span> currentBandwidth)</span> </span>&#123;</div><div class="line">              <span class="comment">// do something on change in connectionQuality</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="comment">// Removing Listener   </span></div><div class="line">AndroidNetworking.removeConnectionQualityChangeListener();</div><div class="line"></div><div class="line"><span class="comment">// Getting current ConnectionQuality</span></div><div class="line">ConnectionQuality connectionQuality = AndroidNetworking.getCurrentConnectionQuality();</div><div class="line"><span class="keyword">if</span>(connectionQuality == ConnectionQuality.EXCELLENT) &#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (connectionQuality == ConnectionQuality.POOR) &#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (connectionQuality == ConnectionQuality.UNKNOWN) &#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// Getting current bandwidth</span></div><div class="line"><span class="keyword">int</span> currentBandwidth = AndroidNetworking.getCurrentBandwidth(); <span class="comment">// Note : if (currentBandwidth == 0) : means UNKNOWN</span></div></pre></td></tr></table></figure>
<h3 id="Getting-Analytics-of-a-request-by-setting-AnalyticsListener-on-that"><a href="#Getting-Analytics-of-a-request-by-setting-AnalyticsListener-on-that" class="headerlink" title="Getting Analytics of a request by setting AnalyticsListener on that"></a>Getting Analytics of a request by setting AnalyticsListener on that</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.download(url,dirPath,fileName)</div><div class="line">                 .setTag(<span class="string">"downloadTest"</span>)</div><div class="line">                 .setPriority(Priority.MEDIUM)</div><div class="line">                 .build()</div><div class="line">                 .setAnalyticsListener(<span class="keyword">new</span> AnalyticsListener() &#123;</div><div class="line">                      <span class="meta">@Override</span></div><div class="line">                      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceived</span><span class="params">(<span class="keyword">long</span> timeTakenInMillis, <span class="keyword">long</span> bytesSent, <span class="keyword">long</span> bytesReceived, <span class="keyword">boolean</span> isFromCache)</span> </span>&#123;</div><div class="line">                          Log.d(TAG, <span class="string">" timeTakenInMillis : "</span> + timeTakenInMillis);</div><div class="line">                          Log.d(TAG, <span class="string">" bytesSent : "</span> + bytesSent);</div><div class="line">                          Log.d(TAG, <span class="string">" bytesReceived : "</span> + bytesReceived);</div><div class="line">                          Log.d(TAG, <span class="string">" isFromCache : "</span> + isFromCache);</div><div class="line">                      &#125;</div><div class="line">                  &#125;)</div><div class="line">                 .setDownloadProgressListener(<span class="keyword">new</span> DownloadProgressListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">long</span> bytesDownloaded, <span class="keyword">long</span> totalBytes)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with progress  </span></div><div class="line">                    &#125;</div><div class="line">                 &#125;)</div><div class="line">                 .startDownload(<span class="keyword">new</span> DownloadListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything after completion</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError error)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error    </span></div><div class="line">                    &#125;</div><div class="line">                &#125;);  </div><div class="line">Note : If bytesSent or bytesReceived is -<span class="number">1</span> , it means it is unknown</div></pre></td></tr></table></figure>
<h3 id="Getting-OkHttpResponse-in-Response"><a href="#Getting-OkHttpResponse-in-Response" class="headerlink" title="Getting OkHttpResponse in Response"></a>Getting OkHttpResponse in Response</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.get(<span class="string">"https://fierce-cove-29863.herokuapp.com/getAnUserDetail/&#123;userId&#125;"</span>)</div><div class="line">                .addPathParameter(<span class="string">"userId"</span>, <span class="string">"1"</span>)</div><div class="line">                .setTag(<span class="keyword">this</span>)</div><div class="line">                .setPriority(Priority.LOW)</div><div class="line">                .setUserAgent(<span class="string">"getAnUser"</span>)</div><div class="line">                .build()</div><div class="line">                .getAsOkHttpResponseAndParsed(<span class="keyword">new</span> TypeToken&lt;User&gt;() &#123;</div><div class="line">                &#125;, <span class="keyword">new</span> OkHttpResponseAndParsedRequestListener&lt;User&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Response okHttpResponse, User user)</span> </span>&#123;</div><div class="line">                      <span class="comment">// do anything with okHttpResponse and user</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(ANError anError)</span> </span>&#123;</div><div class="line">                      <span class="comment">// handle error</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<h3 id="Making-Synchronous-Request"><a href="#Making-Synchronous-Request" class="headerlink" title="Making Synchronous Request"></a>Making Synchronous Request</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ANRequest request = AndroidNetworking.get(<span class="string">"https://fierce-cove-29863.herokuapp.com/getAllUsers/&#123;pageNumber&#125;"</span>)</div><div class="line">                        .addPathParameter(<span class="string">"pageNumber"</span>, <span class="string">"0"</span>)</div><div class="line">                        .addQueryParameter(<span class="string">"limit"</span>, <span class="string">"3"</span>)</div><div class="line">                        .build();</div><div class="line">ANResponse&lt;List&lt;User&gt;&gt; response = request.executeForObjectList(User.class);</div><div class="line"><span class="keyword">if</span> (response.isSuccess()) &#123;</div><div class="line">   List&lt;User&gt; users = responseTwo.getResult();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">   <span class="comment">//handle error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="How-caching-works"><a href="#How-caching-works" class="headerlink" title="How caching works ?"></a>How caching works ?</h3><ul>
<li>First of all the server must send cache-control in header so that is starts working.</li>
<li>Response will be cached on the basis of cache-control max-age,max-stale.</li>
<li>If internet is connected and the age is NOT expired it will return from cache.</li>
<li>If internet is connected and the age is expired and if server returns 304(NOT MODIFIED) it will return from cache.</li>
<li>If internet is NOT connected if you are using getResponseOnlyIfCached() - it will return from cache even it date is expired.</li>
<li>If internet is NOT connected , if you are NOT using getResponseOnlyIfCached() - it will NOT return anything.</li>
<li>If you are using getResponseOnlyFromNetwork() , it will only return response after validation from server.</li>
<li>If cache-control is set, it will work according to the max-age,max-stale returned from server.</li>
<li>If internet is NOT connected only way to get cache Response is by using getResponseOnlyIfCached().</li>
</ul>
<h3 id="Enabling-Logging"><a href="#Enabling-Logging" class="headerlink" title="Enabling Logging"></a>Enabling Logging</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">AndroidNetworking.enableLogging(); <span class="comment">// simply enable logging</span></div><div class="line">AndroidNetworking.enableLogging(LEVEL.HEADERS); <span class="comment">// enabling logging with level</span></div></pre></td></tr></table></figure>
<h3 id="Enabling-GZIP-From-Client-to-Server"><a href="#Enabling-GZIP-From-Client-to-Server" class="headerlink" title="Enabling GZIP From Client to Server"></a>Enabling GZIP From Client to Server</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Enabling GZIP for Request (Not needed if your server doesn't support GZIP Compression), anyway responses</span></div><div class="line"><span class="comment">// from server are automatically unGzipped if required. So enable it only if you need your request to be</span></div><div class="line"><span class="comment">// Gzipped before sending to server(Make sure your server support GZIP Compression).</span></div><div class="line">OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient().newBuilder()</div><div class="line">                .addInterceptor(<span class="keyword">new</span> GzipRequestInterceptor())</div><div class="line">                .build();</div><div class="line">AndroidNetworking.initialize(getApplicationContext(),okHttpClient);</div></pre></td></tr></table></figure>
<h3 id="IMPORTANT-NOTE"><a href="#IMPORTANT-NOTE" class="headerlink" title="IMPORTANT NOTE"></a>IMPORTANT NOTE</h3><ul>
<li>Use IMMEDIATE Priority with caution - use is at appropriate place only when<br>1 or 2 (at max 2)IMMEDIATE request is required at instant.Otherwise use HIGH Priority.</li>
<li><p>Known Bug : As present if you are using GZIP Interceptor from client to server, Upload progress<br>is not working perfectly in Multipart.</p>
<p>If you are using Proguard with Gradle build system (which is usually the case), you don’t have to do anything. The appropriate Proguard rules will be automatically applied. If you still need the rules applied in <code>proguard-rules.pro</code>, it is as follows:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-dontwarn okio.**</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Fast-Android-Networking-Library-supports"><a href="#Fast-Android-Networking-Library-supports" class="headerlink" title="Fast Android Networking Library supports"></a>Fast Android Networking Library supports</h3><ul>
<li>Fast Android Networking Library supports all types of HTTP/HTTPS request like GET, POST, DELETE, HEAD, PUT, PATCH</li>
<li>Fast Android Networking Library supports downloading any type of file</li>
<li>Fast Android Networking Library supports uploading any type of file (supports multipart upload)</li>
<li>Fast Android Networking Library supports cancelling a request</li>
<li>Fast Android Networking Library supports setting priority to any request (LOW, MEDIUM, HIGH, IMMEDIATE)</li>
<li>Fast Android Networking Library supports <a href="https://amitshekhariitbhu.github.io/Fast-Android-Networking/rxjava2_support.html" target="_blank" rel="external">RxJava</a></li>
</ul>
<p>As it uses <a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp</a> as a networking layer, it supports:</p>
<ul>
<li>Fast Android Networking Library supports HTTP/2 support allows all requests to the same host to share a socket</li>
<li>Fast Android Networking Library uses connection pooling which reduces request latency (if HTTP/2 isn’t available)</li>
<li>Transparent GZIP shrinks download sizes</li>
<li>Fast Android Networking Library supports response caching which avoids the network completely for repeat requests</li>
</ul>
<h3 id="Difference-over-other-Networking-Library"><a href="#Difference-over-other-Networking-Library" class="headerlink" title="Difference over other Networking Library"></a>Difference over other Networking Library</h3><ul>
<li>In Fast Android Networking Library, OkHttpClient can be customized for every request easily.</li>
<li>As Fast Android Networking Library uses <a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp</a> and <a href="https://github.com/square/okio" target="_blank" rel="external">Okio</a>, it is faster.</li>
<li>Single library for all type of networking.</li>
<li>Supports RxJava, RxJava2 -&gt; <a href="https://amitshekhariitbhu.github.io/Fast-Android-Networking/rxjava2_support.html" target="_blank" rel="external">Check here</a></li>
<li>Current bandwidth and connection quality can be obtained to decide logic of code.</li>
<li>Executor can be passed to any request to get response in another thread.</li>
<li>Complete analytics of any request can be obtained.</li>
<li>All types of customization is possible.</li>
<li>Immediate Request is really immediate now.</li>
<li>Prefetching of any request can be done so that it gives instant data when required from cache.</li>
<li>Proper cancellation of request.</li>
<li>Do not cancel a request if completed more than a threshold percentage.</li>
<li>Simple interface to make any type of request.</li>
<li>Proper Response Caching, hence reducing bandwidth usage.  </li>
</ul>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ul>
<li>Integration with other library</li>
<li>And of course many many features and bug fixes</li>
</ul>
<h3 id="CREDITS"><a href="#CREDITS" class="headerlink" title="CREDITS"></a>CREDITS</h3><ul>
<li><a href="https://square.github.io/" target="_blank" rel="external">Square</a> - As both <a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp</a> and <a href="https://github.com/square/okio" target="_blank" rel="external">Okio</a><br>used by Fast Android Networking is developed by <a href="https://square.github.io/" target="_blank" rel="external">Square</a>.</li>
<li><a href="https://android.googlesource.com/platform/frameworks/volley/" target="_blank" rel="external">Volley</a> - As Fast Android Networking uses ImageLoader that is developed by <a href="https://android.googlesource.com/platform/frameworks/volley/" target="_blank" rel="external">Volley</a>.  </li>
<li><a href="https://github.com/PrashantGupta17" target="_blank" rel="external">Prashant Gupta</a> - For RxJava, RxJava2 Support - <a href="https://github.com/amitshekhariitbhu/Fast-Android-Networking/wiki/Using-Fast-Android-Networking-Library-With-RxJava" target="_blank" rel="external">RxJava Support</a></li>
</ul>
<p>###<a href="https://mindorks.com/open-source-projects" target="_blank" rel="external">Check out Mindorks awesome open source projects here</a></p>
<h3 id="Contact-Let’s-become-friend"><a href="#Contact-Let’s-become-friend" class="headerlink" title="Contact - Let’s become friend"></a>Contact - Let’s become friend</h3><ul>
<li><a href="https://twitter.com/amitiitbhu" target="_blank" rel="external">Twitter</a></li>
<li><a href="https://github.com/amitshekhariitbhu" target="_blank" rel="external">Github</a></li>
<li><a href="https://medium.com/@amitshekhar" target="_blank" rel="external">Medium</a></li>
<li><a href="https://www.facebook.com/amit.shekhar.iitbhu" target="_blank" rel="external">Facebook</a></li>
</ul>
<h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Copyright (C) 2016 Amit Shekhar</div><div class="line">Copyright (C) 2011 Android Open Source Project</div><div class="line"></div><div class="line">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</div><div class="line">you may not use this file except in compliance with the License.</div><div class="line">You may obtain a copy of the License at</div><div class="line"></div><div class="line">    http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"></div><div class="line">Unless required by applicable law or agreed to in writing, software</div><div class="line">distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</div><div class="line">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">See the License for the specific language governing permissions and</div><div class="line">limitations under the License.</div></pre></td></tr></table></figure>
<h3 id="Contributing-to-Fast-Android-Networking"><a href="#Contributing-to-Fast-Android-Networking" class="headerlink" title="Contributing to Fast Android Networking"></a>Contributing to Fast Android Networking</h3><p>Just make pull request. You are in!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/amitshekhariitbhu/Fast-Android-Networking/master/assets/androidnetworking.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/amitshekhariitbhu/Fast-Android-Networking&quot;&gt;Fast-Android-Networking&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difference over other Networking Library&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In Fast Android Networking Library, OkHttpClient can be customized for every request easily.&lt;/li&gt;
&lt;li&gt;As Fast Android Networking Library uses OkHttp and Okio, it is faster.&lt;/li&gt;
&lt;li&gt;Single library for all type of networking.&lt;/li&gt;
&lt;li&gt;Supports RxJava, RxJava2 -&amp;gt; Check here&lt;/li&gt;
&lt;li&gt;Current bandwidth and connection quality can be obtained to decide logic of code.&lt;/li&gt;
&lt;li&gt;Executor can be passed to any request to get response in another thread.&lt;/li&gt;
&lt;li&gt;Complete analytics of any request can be obtained.&lt;/li&gt;
&lt;li&gt;All types of customization is possible.&lt;/li&gt;
&lt;li&gt;Immediate Request is really immediate now.&lt;/li&gt;
&lt;li&gt;Prefetching of any request can be done so that it gives instant data when required from cache.&lt;/li&gt;
&lt;li&gt;Proper cancellation of request.&lt;/li&gt;
&lt;li&gt;Do not cancel a request if completed more than a threshold percentage.&lt;/li&gt;
&lt;li&gt;Simple interface to make any type of request.&lt;/li&gt;
&lt;li&gt;Proper Response Caching, hence reducing bandwidth usage.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Fast Android Networking" scheme="http://ipcreator.me/tags/Fast-Android-Networking/"/>
    
      <category term="OkHttp" scheme="http://ipcreator.me/tags/OkHttp/"/>
    
      <category term="Okio" scheme="http://ipcreator.me/tags/Okio/"/>
    
  </entry>
  
  <entry>
    <title>Report Android  Crash Log</title>
    <link href="http://ipcreator.me/2017/03/25/Program/Android/crash-of-application/"/>
    <id>http://ipcreator.me/2017/03/25/Program/Android/crash-of-application/</id>
    <published>2017-03-25T11:57:06.000Z</published>
    <updated>2017-03-27T07:53:35.131Z</updated>
    
    <content type="html"><![CDATA[<p>文章来源：<a href="http://www.jianshu.com/p/fc0f6e38e2f3" target="_blank" rel="external">简书</a></p>
<p>我们在开发应用的过程中不可避免的会遇到各种Crash，今天分享一下如何姿势正确的处理这些Crash来提高我们的开发效率。</p>
<a id="more"></a>
<p>对于应用的Crash处理分为测试环境和生产环境。</p>
<p>1、测试环境<br>在开发过程中为了方便快速定位崩溃所发生的代码，要求我们能在崩溃的同时将日志打印出来，最好以直观的界面显示。这里推荐大家一个开源项目：CustomActivityOnCrash<br>github地址：<a href="https://github.com/Ereza/CustomActivityOnCrash" target="_blank" rel="external">https://github.com/Ereza/CustomActivityOnCrash</a></p>
<p>2、生产环境<br>当应用发布上线就不能给用户显示这样的界面了所以要用一种用户比较能接受的方式处理。</p>
<p>在Application类中配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * 初始化程序崩溃捕捉处理</div><div class="line">    */</div><div class="line">   protected void initCrashHandler() &#123;</div><div class="line">       if (BuildConfig.isDebug) &#123;</div><div class="line">           CustomActivityOnCrash.install(this);</div><div class="line">       &#125; else &#123;</div><div class="line">           CrashHandler handler = CrashHandler.getInstance();</div><div class="line">           handler.init(getApplicationContext());</div><div class="line">           Thread.setDefaultUncaughtExceptionHandler(handler);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>CrashHandler类文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div></pre></td><td class="code"><pre><div class="line"> public class CrashHandler implements UncaughtExceptionHandler &#123;</div><div class="line">    /** Debug Log tag*/</div><div class="line">    public static final String TAG = &quot;CrashHandler&quot;;</div><div class="line">    /** 是否开启日志输出,在Debug状态下开启,</div><div class="line">     * 在Release状态下关闭以提示程序性能</div><div class="line">     * */</div><div class="line">    public static final boolean DEBUG = false;</div><div class="line">    /** 系统默认的UncaughtException处理类 */</div><div class="line">    private UncaughtExceptionHandler mDefaultHandler;</div><div class="line">    /** CrashHandler实例 */</div><div class="line">    private static CrashHandler INSTANCE;</div><div class="line">    /** 程序的Context对象 */</div><div class="line">    private Context mContext;</div><div class="line">    /** 使用Properties来保存设备的信息和错误堆栈信息*/</div><div class="line">    private Properties mDeviceCrashInfo = new Properties();</div><div class="line">    private static final String VERSION_NAME = &quot;versionName&quot;;</div><div class="line">    private static final String VERSION_CODE = &quot;versionCode&quot;;</div><div class="line">    private static final String STACK_TRACE = &quot;STACK_TRACE&quot;;</div><div class="line">    /** 错误报告文件的扩展名 */</div><div class="line">    private static final String CRASH_REPORTER_EXTENSION = &quot;.cr&quot;;</div><div class="line"></div><div class="line">    /** 保证只有一个CrashHandler实例 */</div><div class="line">    private CrashHandler() &#123;&#125;</div><div class="line"></div><div class="line">    /** 获取CrashHandler实例 ,单例模式*/</div><div class="line">    public static CrashHandler getInstance() &#123;</div><div class="line">        if (INSTANCE == null) &#123;</div><div class="line">            INSTANCE = new CrashHandler();</div><div class="line">        &#125;</div><div class="line">        return INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 初始化,注册Context对象,</div><div class="line">     * 获取系统默认的UncaughtException处理器,</div><div class="line">     * 设置该CrashHandler为程序的默认处理器</div><div class="line">     * @param ctx</div><div class="line">     */</div><div class="line">    public void init(Context ctx) &#123;</div><div class="line">        mContext = ctx;</div><div class="line">        mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();</div><div class="line">        Thread.setDefaultUncaughtExceptionHandler(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 当UncaughtException发生时会转入该函数来处理</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void uncaughtException(Thread thread, Throwable ex) &#123;</div><div class="line">        if (!handleException(ex) &amp;&amp; mDefaultHandler != null) &#123;</div><div class="line">            //如果用户没有处理则让系统默认的异常处理器来处理</div><div class="line">            mDefaultHandler.uncaughtException(thread, ex);</div><div class="line">        &#125; else &#123;</div><div class="line">            //Sleep一会后结束程序</div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(5000);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                Log.e(TAG, &quot;Error : &quot;, e);</div><div class="line">            &#125;</div><div class="line">            android.os.Process.killProcess(android.os.Process.myPid());</div><div class="line">            System.exit(10);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 自定义错误处理,收集错误信息</div><div class="line">     * 发送错误报告等操作均在此完成.</div><div class="line">     * 开发者可以根据自己的情况来自定义异常处理逻辑</div><div class="line">     * @param ex</div><div class="line">     * @return true:如果处理了该异常信息;否则返回false</div><div class="line">     */</div><div class="line">    private boolean handleException(Throwable ex) &#123;</div><div class="line">        if (ex == null) &#123;</div><div class="line">            Log.w(TAG, &quot;handleException --- ex==null&quot;);</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        final String msg = ex.getLocalizedMessage();</div><div class="line">        if(msg == null) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        //使用Toast来显示异常信息</div><div class="line">        new Thread() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                Looper.prepare();</div><div class="line">                Toast toast = Toast.makeText(mContext, &quot;程序出错，即将退出&quot;,</div><div class="line">                        Toast.LENGTH_LONG);</div><div class="line">                toast.setGravity(Gravity.CENTER, 0, 0);</div><div class="line">                toast.show();</div><div class="line">//              MsgPrompt.showMsg(mContext, &quot;程序出错啦&quot;, msg+&quot;\n点确认退出&quot;);</div><div class="line">                Looper.loop();</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">        //收集设备信息</div><div class="line">        collectCrashDeviceInfo(mContext);</div><div class="line">        //保存错误报告文件</div><div class="line">        saveCrashInfoToFile(ex);</div><div class="line">        //发送错误报告到服务器</div><div class="line">        //sendCrashReportsToServer(mContext);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 在程序启动时候, 可以调用该函数来发送以前没有发送的报告</div><div class="line">     */</div><div class="line">    public void sendPreviousReportsToServer() &#123;</div><div class="line">        sendCrashReportsToServer(mContext);</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * 把错误报告发送给服务器,包含新产生的和以前没发送的.</div><div class="line">     * @param ctx</div><div class="line">     */</div><div class="line">    private void sendCrashReportsToServer(Context ctx) &#123;</div><div class="line">        String[] crFiles = getCrashReportFiles(ctx);</div><div class="line">        if (crFiles != null &amp;&amp; crFiles.length &gt; 0) &#123;</div><div class="line">            TreeSet&lt;String&gt; sortedFiles = new TreeSet&lt;String&gt;();</div><div class="line">            sortedFiles.addAll(Arrays.asList(crFiles));</div><div class="line">            for (String fileName : sortedFiles) &#123;</div><div class="line">                File cr = new File(ctx.getFilesDir(), fileName);</div><div class="line">                postReport(cr);</div><div class="line">                cr.delete();// 删除已发送的报告</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    private void postReport(File file) &#123;</div><div class="line">        // TODO 发送错误报告到服务器</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取错误报告文件名</div><div class="line">     * @param ctx</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    private String[] getCrashReportFiles(Context ctx) &#123;</div><div class="line">        File filesDir = ctx.getFilesDir();</div><div class="line">        FilenameFilter filter = new FilenameFilter() &#123;</div><div class="line">            public boolean accept(File dir, String name) &#123;</div><div class="line">                return name.endsWith(CRASH_REPORTER_EXTENSION);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        return filesDir.list(filter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 保存错误信息到文件中</div><div class="line">     * @param ex</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    private String saveCrashInfoToFile(Throwable ex) &#123;</div><div class="line">        Writer info = new StringWriter();</div><div class="line">        PrintWriter printWriter = new PrintWriter(info);</div><div class="line">        ex.printStackTrace(printWriter);</div><div class="line">        Throwable cause = ex.getCause();</div><div class="line">        while (cause != null) &#123;</div><div class="line">            cause.printStackTrace(printWriter);</div><div class="line">            cause = cause.getCause();</div><div class="line">        &#125;</div><div class="line">        String result = info.toString();</div><div class="line">        printWriter.close();</div><div class="line">        mDeviceCrashInfo.put(&quot;EXEPTION&quot;, ex.getLocalizedMessage());</div><div class="line">        mDeviceCrashInfo.put(STACK_TRACE, result);</div><div class="line">        try &#123;</div><div class="line">            //long timestamp = System.currentTimeMillis();</div><div class="line">            Time t = new Time(&quot;GMT+8&quot;);</div><div class="line">            t.setToNow(); // 取得系统时间</div><div class="line">            int date = t.year * 10000 + t.month * 100 + t.monthDay;</div><div class="line">            int time = t.hour * 10000 + t.minute * 100 + t.second;</div><div class="line">            String fileName = &quot;crash-&quot; + date + &quot;-&quot; + time + CRASH_REPORTER_EXTENSION;</div><div class="line">            FileOutputStream trace = mContext.openFileOutput(fileName,</div><div class="line">                    Context.MODE_PRIVATE);</div><div class="line">            mDeviceCrashInfo.store(trace, &quot;&quot;);</div><div class="line">            trace.flush();</div><div class="line">            trace.close();</div><div class="line">            return fileName;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            Log.e(TAG, &quot;an error occured while writing report file...&quot;, e);</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 收集程序崩溃的设备信息</div><div class="line">     *</div><div class="line">     * @param ctx</div><div class="line">     */</div><div class="line">    public void collectCrashDeviceInfo(Context ctx) &#123;</div><div class="line">        try &#123;</div><div class="line">            PackageManager pm = ctx.getPackageManager();</div><div class="line">            PackageInfo pi = pm.getPackageInfo(ctx.getPackageName(),</div><div class="line">                    PackageManager.GET_ACTIVITIES);</div><div class="line">            if (pi != null) &#123;</div><div class="line">                mDeviceCrashInfo.put(VERSION_NAME,</div><div class="line">                        pi.versionName == null ? &quot;not set&quot; : pi.versionName);</div><div class="line">                mDeviceCrashInfo.put(VERSION_CODE, &quot;&quot;+pi.versionCode);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (PackageManager.NameNotFoundException e) &#123;</div><div class="line">            Log.e(TAG, &quot;Error while collect package info&quot;, e);</div><div class="line">        &#125;</div><div class="line">        //使用反射来收集设备信息.在Build类中包含各种设备信息,</div><div class="line">        //例如: 系统版本号,设备生产商 等帮助调试程序的有用信息</div><div class="line">        //具体信息请参考后面的截图</div><div class="line">        Field[] fields = Build.class.getDeclaredFields();</div><div class="line">        for (Field field : fields) &#123;</div><div class="line">            try &#123;</div><div class="line">                field.setAccessible(true);</div><div class="line">                mDeviceCrashInfo.put(field.getName(), &quot;&quot;+field.get(null));</div><div class="line">                if (DEBUG) &#123;</div><div class="line">                    Log.d(TAG, field.getName() + &quot; : &quot; + field.get(null));</div><div class="line">                &#125;</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                Log.e(TAG, &quot;Error while collect crash info&quot;, e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://www.jianshu.com/p/fc0f6e38e2f3" target="_blank" rel="external">Android应用崩溃(Crash)日志报告</a><br><a href="http://www.magicsite.cn/blog/mobile/Android/Android317626.html" target="_blank" rel="external">Android采集应用崩溃日志</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章来源：&lt;a href=&quot;http://www.jianshu.com/p/fc0f6e38e2f3&quot;&gt;简书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们在开发应用的过程中不可避免的会遇到各种Crash，今天分享一下如何姿势正确的处理这些Crash来提高我们的开发效率。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Crash" scheme="http://ipcreator.me/tags/Crash/"/>
    
      <category term="Log" scheme="http://ipcreator.me/tags/Log/"/>
    
  </entry>
  
  <entry>
    <title>Emmagee</title>
    <link href="http://ipcreator.me/2017/03/25/Program/Android/emmagee/"/>
    <id>http://ipcreator.me/2017/03/25/Program/Android/emmagee/</id>
    <published>2017-03-25T10:42:06.000Z</published>
    <updated>2017-03-27T07:55:07.032Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/andrewleo/pictures/master/Emmagee/V2.0/homepage.png" alt=""></p>
<p>Android performance test tool-CPU,memory,network traffic,starting time,battery current and status</p>
<a id="more"></a>
<h2 id="Emmagee-a-practical-handy-performance-test-tool-for-specified-Android-App"><a href="#Emmagee-a-practical-handy-performance-test-tool-for-specified-Android-App" class="headerlink" title="Emmagee - a practical, handy performance test tool for specified Android App"></a>Emmagee - a practical, handy performance test tool for specified Android App</h2><p>Emmagee is a practical, handy performance test tool for specified Android App, which can monitor CPU, memory,<br>network traffic, battery current and status(<a href="https://github.com/NetEase/Emmagee/wiki/Some-devices-are-not-supported" target="_blank" rel="external">Some devices are not supported</a>), new features such as top activity and heap size if rooted(<a href="https://github.com/NetEase/Emmagee/wiki/FAQ" target="_blank" rel="external">Root Toast may continously show</a>), are also supported in the <a href="https://github.com/NetEase/Emmagee/releases" target="_blank" rel="external">latest version</a>. Additionally, it also provides several cool features such as customizing interval of collecting data,<br>rendering real-time process status in a floating window, and much more.</p>
<ul>
<li>Homepage: <a href="https://github.com/NetEase/Emmagee" target="_blank" rel="external">https://github.com/NetEase/Emmagee</a></li>
<li>Wiki: <a href="https://github.com/NetEase/Emmagee/wiki" target="_blank" rel="external">https://github.com/NetEase/Emmagee/wiki</a></li>
<li>Issues: <a href="https://github.com/NetEase/Emmagee/issues" target="_blank" rel="external">https://github.com/NetEase/Emmagee/issues</a></li>
<li>FAQ: <a href="https://github.com/NetEase/Emmagee/wiki/FAQ" target="_blank" rel="external">https://github.com/NetEase/Emmagee/wiki/FAQ</a></li>
<li>Tags: Android, Java</li>
</ul>
<p><img src="https://raw.githubusercontent.com/andrewleo/pictures/master/Emmagee/V2.0/homepage.png" width="180px"><br>&nbsp;<br><img src="https://raw.githubusercontent.com/andrewleo/pictures/master/Emmagee/V2.0/settings.png" width="180px"><br>&nbsp;<br><img src="https://raw.githubusercontent.com/andrewleo/pictures/master/Emmagee/V2.0/mailsettings.png" width="180px"></p>
<h2 id="Why-should-I-use-Emmagee"><a href="#Why-should-I-use-Emmagee" class="headerlink" title="Why should I use Emmagee?"></a>Why should I use Emmagee?</h2><p>Unlike most other performance test tools that only do system-level monitoring, Emmagee provides the ability to monitor any single App. Other advantages that<br>you should not miss:</p>
<ul>
<li>Open source</li>
<li>Easy to use</li>
<li>Process-specific monitoring, including CPU, memory, network traffic, battery current, launching time and status</li>
<li>Floating window that renders real-time process status</li>
<li>CSV format report that can be converted into any other format you want</li>
<li>User-defined collecting interval</li>
<li>Fully support Android 2.2 and above</li>
</ul>
<h2 id="How-to-use-Emmagee"><a href="#How-to-use-Emmagee" class="headerlink" title="How to use Emmagee?"></a>How to use Emmagee?</h2><p>First of all ,you should have Emmagee.apk,download <a href="https://github.com/NetEase/Emmagee/releases" target="_blank" rel="external">here</a> or<br>build the apk file youself <a href="https://github.com/NetEase/Emmagee/wiki/How-to-build-emmage.apk%3F" target="_blank" rel="external">here</a>,then :</p>
<ol>
<li>Start Emmagee App</li>
<li>Configure interval</li>
<li>Select a target process</li>
<li>Click Start button</li>
</ol>
<p>And Enjoy!</p>
<p>If you want to stop the test, just go back to Emmagee and click Stop button.</p>
<h2 id="Android-5-0-and-above"><a href="#Android-5-0-and-above" class="headerlink" title="Android 5.0 and above"></a>Android 5.0 and above</h2><ul>
<li><code>Android 5.0 and above</code>: getRunningTasks() and getRunningAppProcesses() are deprecated and only return your application process, so it is unable to get TopActivity from Android 5.0.</li>
<li><code>Android 7.0</code>: Google has restricted access to /proc, and also can not get pid of target application from TOP command in Android 7.0, I am so sorry to tell that 7.0 can not be supported.</li>
</ul>
<h2 id="Coming-Soon"><a href="#Coming-Soon" class="headerlink" title="Coming Soon"></a>Coming Soon</h2><ul>
<li>We want you to decide!</li>
</ul>
<h2 id="How-to-Contribute"><a href="#How-to-Contribute" class="headerlink" title="How to Contribute?"></a>How to Contribute?</h2><p>You are welcome to contribute to Emmagee, meanwhile you’d better follow the rules below</p>
<ul>
<li>It’s <em>NOT</em> recommended to submit a pull request directly to Emmagee’s <code>master</code> branch. <code>develop</code> branch is more appropriate</li>
<li>Follow common Java coding conventions</li>
<li>Put all Java class files under <em>com.netease</em> package</li>
<li>Add the following <a href="#license">license</a> in each Java class file</li>
</ul>
<h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul>
<li>NetEase, Inc.</li>
<li><a href="https://github.com/yrom" target="_blank" rel="external">yrom</a></li>
<li><a href="https://github.com/LukeOwncloud" target="_blank" rel="external">LukeOwncloud</a></li>
</ul>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>(The Apache License)</p>
<p>Copyright (c) 2012-2015 NetEase, Inc. and other contributors</p>
<p>   Licensed under the Apache License, Version 2.0 (the “License”);<br>   you may not use this file except in compliance with the License.<br>   You may obtain a copy of the License at</p>
<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre><p>   Unless required by applicable law or agreed to in writing, software<br>   distributed under the License is distributed on an “AS IS” BASIS,<br>   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br>   See the License for the specific language governing permissions and<br>   limitations under the License.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/andrewleo/pictures/master/Emmagee/V2.0/homepage.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Android performance test tool-CPU,memory,network traffic,starting time,battery current and status&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Monitor" scheme="http://ipcreator.me/tags/Monitor/"/>
    
  </entry>
  
  <entry>
    <title>Custom Activity On Crash</title>
    <link href="http://ipcreator.me/2017/03/25/Program/Android/custom-activity-on-crash/"/>
    <id>http://ipcreator.me/2017/03/25/Program/Android/custom-activity-on-crash/</id>
    <published>2017-03-25T10:36:06.000Z</published>
    <updated>2017-03-27T07:53:51.033Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Ereza/CustomActivityOnCrash/master/images/frontpage.png" alt=""></p>
<p>Android library that allows launching a custom activity when your app crashes, instead of showing the hated “Unfortunately, X has stopped” dialog.</p>
<a id="more"></a>
<h1 id="Custom-Activity-On-Crash-library"><a href="#Custom-Activity-On-Crash-library" class="headerlink" title="Custom Activity On Crash library"></a>Custom Activity On Crash library</h1><p>This library allows launching a custom activity when the app crashes, instead of showing the hated “Unfortunately, X has stopped” dialog.</p>
<h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h2><h3 id="1-Add-a-dependency"><a href="#1-Add-a-dependency" class="headerlink" title="1. Add a dependency"></a>1. Add a dependency</h3><p>Add the following dependency to your build.gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'cat.ereza:customactivityoncrash:1.5.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>You can also do it manually, by downloading the source code, importing the <code>library</code> folder as an Android Library Module, and adding a dependency on your project to that module.</p>
<h3 id="2-Set-up-your-application"><a href="#2-Set-up-your-application" class="headerlink" title="2. Set up your application"></a>2. Set up your application</h3><p>On your application class, use this snippet:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">    <span class="comment">//Install CustomActivityOnCrash</span></div><div class="line">    CustomActivityOnCrash.install(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="comment">//Now initialize your error handlers as normal</span></div><div class="line">    <span class="comment">//i.e., ACRA.init(this);</span></div><div class="line">    <span class="comment">//or Fabric.with(this, new Crashlytics())</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>WARNING!</strong> If you already have ACRA, Crashlytics or any similar library in your app, it will still work as normal, but the CustomActivityOnCrash initialization <strong>MUST</strong> be done first, or the original reporting tool will stop working.</p>
<h3 id="3-Test-it"><a href="#3-Test-it" class="headerlink" title="3. Test it"></a>3. Test it</h3><p>Make the app crash by using something like this in your code:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Boom!"</span>);</div></pre></td></tr></table></figure></p>
<p>The error activity should show up, instead of the system dialog.</p>
<h3 id="Optional-Customization"><a href="#Optional-Customization" class="headerlink" title="Optional: Customization"></a>Optional: Customization</h3><p><strong>Custom behavior</strong></p>
<p>You can call the following methods at any time to customize how the library works, although usually you will call them before calling <code>install(context)</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.setLaunchErrorActivityWhenInBackground(<span class="keyword">boolean</span>);</div></pre></td></tr></table></figure>
<p>This method defines if the error activity should be launched when the app crashes while on background.<br>By default, this is true. On API&lt;14, it’s always true since there is no way to detect if the app is in foreground.<br>If you set it to <code>false</code>, a crash while in background won’t launch the error activity nor the system dialog, so it will be a silent crash.<br>The default is <code>true</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.setShowErrorDetails(<span class="keyword">boolean</span>);</div></pre></td></tr></table></figure>
<p>This method defines if the error activity must show a button with error details.<br>If you set it to <code>false</code>, the button on the default error activity will disappear, thus disabling the user from seeing the stack trace.<br>The default is <code>true</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.setDefaultErrorActivityDrawable(<span class="keyword">int</span>);</div></pre></td></tr></table></figure>
<p>This method allows changing the default upside-down bug image with an image of your choice.<br>You may pass a resource id for a drawable or a mipmap.<br>The default is <code>R.drawable.customactivityoncrash_error_image</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.setEnableAppRestart(<span class="keyword">boolean</span>);</div></pre></td></tr></table></figure>
<p>This method defines if the error activity must show a “Restart app” button or a “Close app” button.<br>If you set it to <code>false</code>, the button on the default error activity will close the app instead of restarting.<br>Warning! If you set it to <code>true</code>, there is the possibility of it still displaying the “Close app” button,<br>if no restart activity is specified or found!<br>The default is <code>true</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.setEventListener(EventListener);</div></pre></td></tr></table></figure>
<p>This method allows you to specify an event listener in order to get notified when the library shows the error activity, restarts or closes the app.<br>The EventListener you provide can not be an anonymous or non-static inner class, because it needs to be serialized by the library. The library will throw an exception if you try to set an invalid class.<br>If you set it to null, no event listener will be invoked.<br>The default is null.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.setRestartActivityClass(Class&lt;? extends Activity&gt;);</div></pre></td></tr></table></figure>
<p>This method sets the activity that must be launched by the error activity when the user presses the button to restart the app.<br>If you don’t set it (or set it to null), the library will use the first activity on your manifest that has an intent-filter with action<br><code>cat.ereza.customactivityoncrash.RESTART</code>, and if there is none, the default launchable activity on your app.<br>If no launchable activity can be found and you didn’t specify any, the “restart app” button will become a “close app” button,<br>even if <code>setEnableAppRestart</code> is set to <code>true</code>.</p>
<p>As noted, you can also use the following intent-filter to specify the restart activity:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"cat.ereza.customactivityoncrash.RESTART"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.setErrorActivityClass(Class&lt;? extends Activity&gt;);</div></pre></td></tr></table></figure>
<p>This method allows you to set a custom error activity to be launched, instead of the default one.<br>Use it if you need further customization that is not just strings, colors or themes (see below).<br>If you don’t set it (or set it to null), the library will use the first activity on your manifest that has an intent-filter with action<br><code>cat.ereza.customactivityoncrash.ERROR</code>, and if there is none, a default error activity from the library.<br>If you use this, the activity <strong>must</strong> be declared in your <code>AndroidManifest.xml</code>, with <code>process</code> set to <code>:error_activity</code>.</p>
<p>Example:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"cat.ereza.sample.customactivityoncrash.activity.CustomErrorActivity"</span></div><div class="line">    <span class="attr">android:label</span>=<span class="string">"@string/error_title"</span></div><div class="line">    <span class="attr">android:process</span>=<span class="string">":error_activity"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>As noted, you can also use the following intent-filter to specify the error activity:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"cat.ereza.customactivityoncrash.ERROR"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>Customization of the default activity</strong></p>
<p>You can override several resources to customize the default activity:</p>
<p><em>Theme:</em></p>
<p>You can override the default error activity theme by defining a theme in your app with the following id: <code>CustomActivityOnCrashTheme</code></p>
<p><em>Image:</em></p>
<p>By default, an image of a bug is displayed. You can change it to any image by creating a <code>customactivityoncrash_error_image</code> drawable on all density buckets (mdpi, hdpi, xhdpi, xxhdpi and xxxhdpi).<br>You can also use the provided <code>CustomActivityOnCrash.setDefaultErrorActivityDrawable(int)</code> method.</p>
<p><em>Strings:</em></p>
<p>You can provide new strings and translations for the default error activity strings by overriding the following strings:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_error_occurred_explanation"</span>&gt;</span>An unexpected error occurred.\nSorry for the inconvenience.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_unknown_exception"</span>&gt;</span>Unknown exception<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_restart_app"</span>&gt;</span>Restart app<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_close_app"</span>&gt;</span>Close app<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_error_details"</span>&gt;</span>Error details<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_error_details_title"</span>&gt;</span>Error details<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_error_details_close"</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_error_details_copy"</span>&gt;</span>Copy to clipboard<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_error_details_copied"</span>&gt;</span>Copied to clipboard<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"customactivityoncrash_error_activity_error_details_clipboard_label"</span>&gt;</span>Error information<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><em>There is a <code>sample</code> project module with examples of these overrides. If in doubt, check the code in that module.</em></p>
<p><strong>Completely custom error activity</strong></p>
<p>If you choose to create your own completely custom error activity, you can use these methods:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.getStackTraceFromIntent(getIntent());</div></pre></td></tr></table></figure>
<p>Returns the stack trace that caused the error as a string.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.getAllErrorDetailsFromIntent(getIntent());</div></pre></td></tr></table></figure>
<p>Returns several error details including the stack trace that caused the error, as a string. This is used in the default error activity error details dialog.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.getRestartActivityClassFromIntent(getIntent());</div></pre></td></tr></table></figure>
<p>Returns the class of the activity you have to launch to restart the app, or <code>null</code> if not set.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.getEventListenerFromIntent(getIntent());</div></pre></td></tr></table></figure>
<p>Returns the event listener that you must pass to <code>restartApplicationWithIntent(activity, intent, eventListener)</code> or <code>closeApplication(activity, eventListener)</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.restartApplicationWithIntent(activity, intent, eventListener);</div></pre></td></tr></table></figure>
<p>Kills the current process and restarts the app again with an <code>startActivity()</code> to the passed intent.<br>You <strong>MUST</strong> call this to restart the app, or you will end up having several <code>Application</code> class instances and experience multiprocess issues in API&lt;17.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomActivityOnCrash.closeApplication(activity, eventListener);</div></pre></td></tr></table></figure>
<p>Closes the app and kills the current process.<br>You <strong>MUST</strong> call this to close the app, or you will end up having several Application class instances and experience multiprocess issues in API&lt;17.</p>
<p><em>The <code>sample</code> project module includes an example of a custom error activity. If in doubt, check the code in that module.</em></p>
<h2 id="Using-Proguard"><a href="#Using-Proguard" class="headerlink" title="Using Proguard?"></a>Using Proguard?</h2><p>No need to add special rules, the library should work even with obfuscation.</p>
<h2 id="Inner-workings"><a href="#Inner-workings" class="headerlink" title="Inner workings"></a>Inner workings</h2><p>This library relies on the <code>Thread.setDefaultUncaughtExceptionHandler</code> method.<br>When an exception is caught by the library’s <code>UncaughtExceptionHandler</code> it does the following:</p>
<ol>
<li>Captures the stack trace that caused the crash</li>
<li>Launches a new intent to the error activity passing the stacktrace as an extra.</li>
<li>Kills the current process.</li>
</ol>
<p>The inner workings are based on <a href="https://github.com/ACRA/acra" target="_blank" rel="external">ACRA</a>‘s dialog reporting mode with some minor tweaks. Look at the code if you need more detail about how it works.</p>
<h2 id="Incompatibilities"><a href="#Incompatibilities" class="headerlink" title="Incompatibilities"></a>Incompatibilities</h2><ul>
<li>CustomActivityOnCrash will not work in these cases:<ul>
<li>With any custom <code>UncaughtExceptionHandler</code> set after initializing the library, that does not call back to the original handler.</li>
<li>With ACRA enabled and reporting mode set to <code>TOAST</code> or <code>DIALOG</code>.</li>
</ul>
</li>
<li>If you use a custom <code>UncaughtExceptionHandler</code>, it will not be called if you initialize it before the library initialization (so, Crashlytics or ACRA initialization must be done <strong>after</strong> CustomActivityOnCrash initialization).</li>
<li>On some rare cases on devices with API&lt;14, the app may enter a restart loop when a crash occurs. Therefore, using it on API&lt;14 is not recommended.</li>
<li>If your app initialization or error activity crash, there is a possibility of entering an infinite restart loop (this is checked by the library for the most common cases, but could happen in rarer cases).</li>
<li>The library has not been tested with multidex enabled. It uses Class.forName() to load classes, so maybe that could cause some problem in API&lt;21. If you test it with such configuration, please provide feedback!</li>
<li>The library has not been tested with multiprocess apps. If you test it with such configuration, please provide feedback too!</li>
</ul>
<h2 id="Disclaimers"><a href="#Disclaimers" class="headerlink" title="Disclaimers"></a>Disclaimers</h2><ul>
<li>This will not avoid ANRs from happening.</li>
<li>This will not catch native errors.</li>
<li>There is no guarantee that this will work on every device.</li>
<li>This library will not make you toast for breakfast :)</li>
</ul>
<h2 id="Contributing-amp-license"><a href="#Contributing-amp-license" class="headerlink" title="Contributing &amp; license"></a>Contributing &amp; license</h2><p>Any contribution in order to make this library better will be welcome!</p>
<p>The library is licensed under the <a href="https://github.com/Ereza/CustomActivityOnCrash/blob/master/LICENSE" target="_blank" rel="external">Apache License 2.0</a>.</p>
<p>The bug image used in the default error activity is licensed under CC-BY by Riffschievous: <a href="https://www.sketchport.com/drawing/6119265933459456/lady-bug" target="_blank" rel="external">https://www.sketchport.com/drawing/6119265933459456/lady-bug</a><br>If you use the image in your app, don’t forget to mention that!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Ereza/CustomActivityOnCrash/master/images/frontpage.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Android library that allows launching a custom activity when your app crashes, instead of showing the hated “Unfortunately, X has stopped” dialog.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Crash" scheme="http://ipcreator.me/tags/Crash/"/>
    
  </entry>
  
  <entry>
    <title>Patent Search</title>
    <link href="http://ipcreator.me/2017/03/25/MyView/IPR/api-patent-query/"/>
    <id>http://ipcreator.me/2017/03/25/MyView/IPR/api-patent-query/</id>
    <published>2017-03-25T08:53:06.000Z</published>
    <updated>2017-03-27T10:27:41.130Z</updated>
    
    <content type="html"><![CDATA[<p>接口地址：<a href="http://v.juhe.cn/patent/search.php" target="_blank" rel="external">http://v.juhe.cn/patent/search.php</a><br>支持格式：json<br>请求方式：get post<br>请求示例：<a href="http://v.juhe.cn/patent/search.php?q=大蒜&amp;key=您申请的key" target="_blank" rel="external">http://v.juhe.cn/patent/search.php?q=大蒜&amp;key=您申请的key</a><br>接口备注：该接口提供对专利的检索功能，用户输入想要查找的关键词或者符合语法规范的短语即可对专利数据进行检索。<br>调用样例及调试工具：API测试工具</p>
<a id="more"></a>
<h2 id="请求参数说明："><a href="#请求参数说明：" class="headerlink" title="请求参数说明："></a>请求参数说明：</h2><p>名称    类型    必填    说明<br>     key    string    是    您申请的key<br>     ds    string    否    dataScope，数据范围，目前支持cn：中国，all：全球，默认cn<br>     q    string    是    用户输入的查询条件<br>     p    int    否    page页码，默认值1，最大页码为100页；系统将根据用户输入的页码返回该页的数据<br>     ps    int    否    pageSize，每页展现数据的条数，默认10条，单页最大50条；系统将根据用户指定的每页显示条数返回搜索数据<br>     s    string    否    sort，排序字段，默认值relation，有5个有效值：relation(相关度),applicationDate(申请时间)、publicationDate(公开时间)、grantDate(授权时间)、rank(专利评级)；可以在后4项前面加感叹号，感叹号表示降序，如果不加表示升序。<br>     hl    int    否    Highlight，是否高亮结果，默认0,可选值：0(不高亮数据),1(高亮数据)</p>
<h2 id="返回参数说明："><a href="#返回参数说明：" class="headerlink" title="返回参数说明："></a>返回参数说明：</h2><p>名称    类型    说明<br>     took    double    请求耗时<br>     total    int    总条数<br>     nextPage    int    下一页<br>     totalPages    int    总页数<br>     page    int    当前页<br>     patents    list    专利列表<br>     id    string    专利唯一ID<br>     rank    int    专利评级<br>     loc    string    LOC分类号<br>     legalStatus    string    法律状态<br>     type    string    专利类型<br>     title    string    专利名称<br>     summary    string    摘要<br>     applicant    string    申请人<br>     applicationDate    string    申请日<br>     applicationNumber    string    申请号<br>     mainIpc    string    主分类号</p>
<h2 id="JSON返回示例："><a href="#JSON返回示例：" class="headerlink" title="JSON返回示例："></a>JSON返回示例：</h2><p>{<br>  “reason”: “success”,<br>  “result”: {<br>    “took”: 0.312,<br>    “total”: 9722,<br>    “nextPage”: 2,<br>    “totalPages”: 973,<br>    “patents”: [<br>      {<br>        “id”: “CN2016177a4d76a90bef1e925d0009fbc32cb037”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种大蒜多糖的提取纯化方法”,<br>        “summary”: “本发明公开了一种大蒜多糖的提取纯化方法，包括以下步骤：A、鲜蒜捣碎成大蒜泥；B、向大蒜泥中加入水，然后进行蒸煮，得蒸煮混合液；C、将蒸煮混合液进行充分发酵，发酵完成后进行蒸馏，所得蒸馏液用正己烷进行萃取，得萃取液；D、将萃取液进行加热除蛋白，冷却后进行抽滤，得大蒜多糖粗提取液；E、大蒜多糖粗提液经大孔树脂处理；F、经逆流色谱一步纯化大蒜多糖；G、透析及干燥：将适量体积的上述收集液装入截留分子量为3000的透析袋中，对水透析过夜，将透析过的溶液进行冷冻干燥，得大蒜多糖精品。本发明方法简单，操作方便、效率高、价格低，优化了制备高纯度大蒜多糖的提取工艺，为规模分离纯化大蒜多糖精品提供技术支持。”,<br>        “applicant”: “徐州黎明食品有限公司”,<br>        “applicationDate”: “2016-11-14”,<br>        “mainIpc”: “C08B37/00”,<br>        “applicationNumber”: “201611000976”<br>      },<br>      {<br>        “id”: “CN20161994969b5472a8be40ba41fdbfa82ea850”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “大蒜切根机及大蒜分瓣机”,<br>        “summary”: “本发明公开了一种大蒜切根机及大蒜分瓣机，涉及大蒜加工技术领域。该大蒜切根机，包括：安装于机架的转移机构，转移机构具有抓取工位、切割工位以及卸料工位，转移机构包括多个抓手机构；用于驱动转移机构依次在抓取工位、切割工位以及卸料工位之间切换的第一驱动装置；用于驱动抓手机构在张开状态和闭合状态之间切换的第二驱动装置，用于驱动处于抓取工位的抓手机构由张开状态切换至闭合状态，且驱动处于卸料工位的抓手机构由闭合状态切换至张开状态；安装于机架、用于将待切割的大蒜输送至抓取工位的输送装置；安装于机架、动作时用于切割处于切割工位的大蒜根须的切割装置。该大蒜切根机切割大蒜根须的效率高，降低了人工的劳动强度。”,<br>        “applicant”: “杨钦海”,<br>        “applicationDate”: “2016-10-31”,<br>        “mainIpc”: “A23N15/08”,<br>        “applicationNumber”: “201610938590”<br>      },<br>      {<br>        “id”: “CN201612d3f1d528eb8c6e6f8019e0cd1a264b45”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种植物驱蚊液”,<br>        “summary”: “本发明公开了一种植物驱蚊液，由以下质量分数配方成分组成：维生素B6-8份、薄荷素油10-20份、高度白酒15-25份、大蒜汁10-20份、柠檬草纯露5-15份、夏枯草8-12份、甘草提取液5-7份、迷迭香2-4份、水30-50份，本发明使用多种植物提取物质，科学精制而成，户外驱避蚊虫叮咬有效时间达六小时，效果特别明显，对人体没有毒副作用及刺激作用。”,<br>        “applicant”: “张帅”,<br>        “applicationDate”: “2016-10-28”,<br>        “mainIpc”: “A61K8/9794”,<br>        “applicationNumber”: “201610960454”<br>      },<br>      {<br>        “id”: “CN20161c264e446ef63042188f05c3275e6211ce”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种用于治疗肝癌的组合药物及其使用方法”,<br>        “summary”: “本发明公开了一种用于治疗肝癌的组合药物，由癌细胞治疗药物、日常肝保健药物、食疗防治药物组成，所述的癌细胞治疗药物由以下中药材组成：淫羊藿5～7份、栀子10～15份、没药7～13份、西洋参15～27份、半枝莲15～30份、龙葵2～7份、蚤休5～20份、五灵脂18～37份、鳖甲4～7份、漏芦20～40份、山慈菇25～35份、麝香2～4份、川乌3～4份；所述的日常肝保健药物由以下中药材组成：葡萄籽5～10份、黑芝麻20～40份、枸杞25～35份、红枣35～45份、葛根15～25份、黑米100～130份、决明子10～15份、莲子25～40份；所述的食疗防治药物由以下中药材组成：鹅不食草25～40份、大蒜5～10份、黄芪10～20份、败酱草2～5份。本发明具有药效显著、食用方便、符合患者生活等优点。”,<br>        “applicant”: “商洛学院”,<br>        “applicationDate”: “2016-10-26”,<br>        “mainIpc”: “A61K36/898”,<br>        “applicationNumber”: “201610948825”<br>      },<br>      {<br>        “id”: “CN20161182e6255f5a33bc4a23a1ac511b4a236d”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种延长插花花期营养液”,<br>        “summary”: “本发明公开了一种延长插花花期营养液，所述延长插花花期营养液由以下重量份材料制成：食用菌50-100份、柠檬汁10-50份、花生麸30-50份、蚕沙10-30份、甲壳素1-5份、贝壳粉10-25份、海藻30-50份、板蓝根15-20份、绿松针25-35份、麦芽20-50份、大蒜10-20份、牡蛎粉5-10份、沸石粉20-40份、水1000-2000份、乙醇500-1000份、磷酸二氢钾10-20份；本发明中蚕沙中叶绿素可以通过提取被插花通过水中吸收保持叶子鲜绿，沸石粉、贝壳粉、牡蛎粉含有多种微量元素和矿物质元素，通过离子交换吸收能带动其他养分吸收，从而起到插花保鲜效果，延长插花花期。”,<br>        “applicant”: “广西鑫雅皇庭园林工程有限责任公,司”,<br>        “applicationDate”: “2016-10-26”,<br>        “mainIpc”: “C05G3/00”,<br>        “applicationNumber”: “201610949513”<br>      },<br>      {<br>        “id”: “CN2016193fbc0d74ceee8b1fc22bdbe1d10f74cb”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种用于降三高及尿酸的混合果蔬汁的制作方法”,<br>        “summary”: “本发明涉及一种用于降三高及尿酸的混合果蔬汁的制作方法，包括以下步骤：第一步、选材与预处理：大蒜去鳞片，选择无坏斑、黄白色蒜瓣；选择未变质的生姜，去皮；选择新鲜成熟红色山楂，去核；选择亮黄色的成熟柠檬；第二步、榨汁：按大蒜500g、生姜500g、山楂按250g称重，加1875g水榨汁,过滤；第三步、热处理：称取250g柠檬切片去核，与上述大蒜、生姜、山楂汁一起加热，80℃蒸发至50％体积，过滤取上清液；称取500g苹果醋与上清液混合，高火煮沸后改用缓火，保持50℃温度煮至剩下的50％体积，静置冷却；第四步、过滤调味：过滤取上清液，用槐花蜂蜜15-20g调味，制成成品。使用本发明，可以降低三高”和尿酸，增强体质、延长寿命，是现代人的福音；本发明原料国内可满足，而且工艺简便。”,<br>        “applicant”: “浙江建设职业技术学院”,<br>        “applicationDate”: “2016-10-18”,<br>        “mainIpc”: “A23L2/38”,<br>        “applicationNumber”: “201610905624”<br>      },<br>      {<br>        “id”: “CN201611da8f8c0a69b28ba04d0b6601c4737d01”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种甘蔗黑穗病的防治方法”,<br>        “summary”: “本发明主要涉及种植技术领域，公开了一种甘蔗黑穗病的防治方法，包括：种植前、种植时和种植后处理；整个种植过程均进行黑穗病的防治，使黑穗病的发病率降低至4%，农户经济收入提高11.7%；种植前，将土壤深翻，加入发酵甘蔗叶，并经蜂胶溶液浸泡，抗菌杀虫，促进甘蔗发芽，减少病菌增殖，降低发病率；种植时，将大蒜和甘蔗进行套种，避免重茬危害，杀灭病原微生物，减少黑穗病的发生，土壤开沟后喷洒抗菌剂溶液，杀灭土壤中的病原微生物，使甘蔗的发芽率提高7.3%；种植后，逐步调节大棚的温度和湿度，提高抗逆性，减少病虫发生率，发芽后定期喷洒抗病剂溶液，抑制黑穗病的发生，使甘蔗的产量提高12.6%。”,<br>        “applicant”: “张俊良”,<br>        “applicationDate”: “2016-10-17”,<br>        “mainIpc”: “A01G1/00”,<br>        “applicationNumber”: “201610902060”<br>      },<br>      {<br>        “id”: “CN20161e40826b1b685e2f4ffd31656dff1c34f5”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种贮存期长、营养保留率高的香辣菌及其制备方法”,<br>        “summary”: “本发明公开了一种贮存期长、营养保留率高的香辣菌及其制备方法。所述香辣菌配料按重量份组成包括：食用菌100份、油50~300份、盐2~8份、香辛料5~50份、护色剂0~0.3份。所述制备方法包括：选择新鲜健康食用菌，去除底端硬化部分洗净晾干破碎；香辛料去杂质，花生脱种皮；将100~600份水煮沸，加入食用菌、25~35%的盐和护色剂，煮沸1~6min后捞起冷却并沥干；将食用菌与65~85%的油、剩余的盐，及小茴香、丁香、桂皮、八角、草果混合，焖烧10~40min；将剩余油烧至180~210℃，将辣椒、大蒜、小米辣加入，加热0.5~2min制成红油；加入花生与芝麻在180~210℃下炸1~5min，再加入食用菌翻炒均匀。用所述方法加工的香辣菌便于贮存及运输，营养保留率高，提高了食用菌资源的利用率，便于大规模推广应用。”,<br>        “applicant”: “云南云菌科技(集团)有限公司”,<br>        “applicationDate”: “2016-10-17”,<br>        “mainIpc”: “A23L31/00”,<br>        “applicationNumber”: “201610900790”<br>      },<br>      {<br>        “id”: “CN2016131754d1cc00b6f0289ff581e7b9261c4d”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种鸡瘟预防治疗的中药组合物及其制备方法”,<br>        “summary”: “本发明涉及一种鸡瘟预防治疗的中药组合物，包括金银花、鱼腥草、野菊花、白蒿、神曲、大蒜、雄黄、生姜、食醋和小苏打。本发明将各组分按照一定的配比混匀，再与饲料混合，喂食3～5天后，对预防和治疗鸡瘟有很好的效果，经过试验，治愈率达到95%以上，预防效果达到90%以上，降低了鸡瘟大规模爆发时导致的经济损失，最大限度的保护养殖户的利益，是一种较为理想的鸡瘟预防治疗的中药组合物。”,<br>        “applicant”: “扬中牧乐药业有限公司”,<br>        “applicationDate”: “2016-10-12”,<br>        “mainIpc”: “A61K36/9068”,<br>        “applicationNumber”: “201610889390”<br>      },<br>      {<br>        “id”: “CN20161ef0da09b7e19a95e69e57fbc59426bf5d”,<br>        “legalStatus”: “公开”,<br>        “type”: “发明专利”,<br>        “title”: “一种低糖耐储存海鲜XO酱及制备方法”,<br>        “summary”: “本发明涉及食品调味品加工技术领域，具体地说是一种低糖耐储存海鲜XO酱及制备方法，其特征在于该海鲜XO酱由植物油、红葱、大蒜、干瑶柱、鱿鱼丝、海米、干海燕鱼、木糖醇、鲜红辣椒、红辣椒粉、芝麻、食用盐、五香粉、柠檬酸组成，该方法选取干瑶柱、鱿鱼丝、海米、干海燕鱼等纯天然高蛋白的海鲜干品为原料，经挑选、浸泡溶胀、清洗、油炸脱水、调味、加束水剂兼甜味剂木糖醇、酸味剂兼酸化剂柠檬酸、热灌装制得成品，具有配方科学、口味鲜香多样、口感软绵、产品开封后保存时间长等优点。”,<br>        “applicant”: “陈嘉润”,<br>        “applicationDate”: “2016-10-10”,<br>        “mainIpc”: “A23L27/60”,<br>        “applicationNumber”: “201610883205”<br>      }<br>    ],<br>    “page”: 1<br>  },<br>  “error_code”: 0<br>}</p>
<h2 id="服务级错误码参照-error-code-："><a href="#服务级错误码参照-error-code-：" class="headerlink" title="服务级错误码参照(error_code)："></a>服务级错误码参照(error_code)：</h2><pre><code>错误码    说明
226300    网络繁忙,请稍后重试
226301    数据源返回相关错误信息,看接口具体返回
226302    参数错误
</code></pre><p>系统级错误码参照：<br>     错误码    说明    旧版本（resultcode）<br>     10001    错误的请求KEY    101<br>     10002    该KEY无请求权限    102<br>     10003    KEY过期    103<br>     10004    错误的OPENID    104<br>     10005    应用未审核超时，请提交认证    105<br>     10007    未知的请求源    107<br>     10008    被禁止的IP    108<br>     10009    被禁止的KEY    109<br>     10011    当前IP请求超过限制    111<br>     10012    请求超过次数限制    112<br>     10013    测试KEY超过请求限制    113<br>     10014    系统内部异常(调用充值类业务时，请务必联系客服或通过订单查询接口检测订单，避免造成损失)    114<br>     10020    接口维护    120<br>     10021    接口停用    121<br>错误码格式说明（示例：200201）：<br>     2    002    01<br>     服务级错误（1为系统级错误）    服务模块代码(即数据ID)    具体错误代码</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接口地址：&lt;a href=&quot;http://v.juhe.cn/patent/search.php&quot;&gt;http://v.juhe.cn/patent/search.php&lt;/a&gt;&lt;br&gt;支持格式：json&lt;br&gt;请求方式：get post&lt;br&gt;请求示例：&lt;a href=&quot;http://v.juhe.cn/patent/search.php?q=大蒜&amp;amp;key=您申请的key&quot;&gt;http://v.juhe.cn/patent/search.php?q=大蒜&amp;amp;key=您申请的key&lt;/a&gt;&lt;br&gt;接口备注：该接口提供对专利的检索功能，用户输入想要查找的关键词或者符合语法规范的短语即可对专利数据进行检索。&lt;br&gt;调用样例及调试工具：API测试工具&lt;/p&gt;
    
    </summary>
    
      <category term="Patent" scheme="http://ipcreator.me/categories/Patent/"/>
    
    
      <category term="Patent" scheme="http://ipcreator.me/tags/Patent/"/>
    
  </entry>
  
  <entry>
    <title>Malicious Behaviour Detecting System Triggered by Combined Event in Android</title>
    <link href="http://ipcreator.me/2017/03/25/MyView/IPR/patent-of-virus-detect-base-on-android-ui/"/>
    <id>http://ipcreator.me/2017/03/25/MyView/IPR/patent-of-virus-detect-base-on-android-ui/</id>
    <published>2017-03-25T02:52:06.000Z</published>
    <updated>2017-03-27T10:28:01.891Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.innojoy.com/searchresult/download.html?patentName=%E5%9F%BA%E4%BA%8E%E7%BB%84%E5%90%88%E4%BA%8B%E4%BB%B6%E8%A1%8C%E4%B8%BA%E8%A7%A6%E5%8F%91%E7%9A%84Android%E6%81%B6%E6%84%8F%E8%A1%8C%E4%B8%BA%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95[ZH]&amp;db=fmzl&amp;pd=2016.06.08&amp;dn=CN201610130822.0&amp;pp=BOOKS@FM@2016@20160608@201610130822.0&amp;lls=%E5%AE%9E%E5%AE%A1#" target="_blank" rel="external">专利全文</a></p>
<p><img src="http://books.daweisoft.com/abstphoto/FM/20160608/201610130822.0/201610130822.gif" alt=""></p>
<p>本发明公开了一种基于组合事件行为触发的Android恶意行为检测系统及其检测方法。多层行为监控模块捕获应用程序运行时的<strong>行为日志</strong>；行为分析模块通过<strong>函数调用关系和函数参数特征</strong>识别应用程序中的恶意行为，同时，行为分析模块会生成应用行为分析报告；<strong>DroidRunner行为触发模型</strong>根据对界面调度方式和已知恶意行为触发条件的分析设计了多组合均衡遍历算法和特殊事件触发库，完成对应用程序中恶意行为的动态检测。本发明其可覆盖应用程序运行期间绝大部分的函数调用，对应用程序中的敏感行为触发效果显著。达到高效、稳定触发应用程序中可能存在的恶意行为的效果。</p>
<a id="more"></a>
<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>申请(专利)号    CN201610130822.0    申请日    2016.03.09<br>公开(公告)号    CN105653946A    公开(公告)日    2016.06.08<br>最终专利权人    哈尔滨工程大学<br>地址    150001 黑龙江省哈尔滨市南岗区南通大街145号哈尔滨工程大学科技处知识产权办公室<br>主分类号    G06F21/55(2013.01)I    国省代码    黑龙江;23<br>申请(专利权)人    哈尔滨工程大学<br>发明(设计)人    张国印;曲家兴;王玲;何志昌;高伟</p>
<h2 id="权利要求书"><a href="#权利要求书" class="headerlink" title="权利要求书"></a>权利要求书</h2><ol>
<li>基于组合事件行为触发的Android恶意行为检测系统，其特征在于：包括多层行为监 测模块、行为分析模块和DroidRunner行为触发模型；<br>多层行为监控模块通过修改Android源码、植入网络监控工具实现对Java调用、本地调 用和网络连接的监控，捕获应用程序运行时的行为日志；<br>行为分析模块通过函数调用关系和函数参数特征识别应用程序中的恶意行为，同时，行 为分析模块会生成应用行为分析报告，用户通过应用行为分析报告识别检测结果中误报或漏 报的恶意行为，并修正或扩展恶意行为特征库；<br>DroidRunner行为触发模型根据对界面调度方式和已知恶意行为触发条件的分析设计了多 组合均衡遍历算法和特殊事件触发库，完成对应用程序中恶意行为的动态检测。</li>
</ol>
<p>1 based on combined event is triggered amlroid malicious behaviour detecting system wherein the: Comprises a layer of the monitoring module the analyzing module and chemical oidrunner the triggering module; Several layers of the monitoring module through modifying amlroid source code is embedded into the network monitoring tool to realize the va the native transferring and network connection the monitoring and trapping application program during operation of the behaviour log; Behaviour analysis module through the function transferring relation and function parameter characteristic recognition application program in the invention prevents malicious behaviour at the same time to analyze module will produce applied behavioural analysis report of user through applied behavioural analysis report recognition and detection result of false alarm and missing report of the malicious behaviour and correction or extension malicious behaviour feature database; Droidrunner the triggering module according to the interface scheduling method and known malicious behaviour triggering condition of analyzing design of several groups of traversing with balance calculation method and special event triggers database to complete the application program in malicious behaviour dynamic detecting.</p>
<ol>
<li><p>根据权利要求1所述的基于组合事件行为触发的Android恶意行为检测系统，其特征 在于：所述的DroidRunner行为触发模型包括预处理组件、主控组件、界面分析组件、界面 控制组件、特殊事件触发组件和特殊事件触发库组件；<br>预处理组件，分析APK并获取其基本信息，为其它组件的运行提供基础数据；<br>界面分析组件，获取当前Activity中显示的所有可操作控件的属性，并生成控件序列，为 界面控制组件提供基础数据；<br>界面控制组件，模拟用户对应用的操作，操作根据多组合均衡遍历算法调度生成；<br>特殊事件触发组件，基于对由注册广播接受器和检测运行环境类事件触发执行应用程序 恶意行为的分析，设计了命令行实现、脚本实现和预装实现方式三种方式来实现这些事件的 自动化触发；<br>特殊事件触发库组件，存储当前已发现恶意应用恶意行为的触发事件及实现方法；<br>主控组件，负责通过ADB与设备之间进行通讯与控制，并在界面分析组件、界面控制组 件、特殊事件触发组件的支撑下，实现对应用的自动化操作。</p>
</li>
<li><p>According to claim 1 said base used for combining event is triggered amlroid malicious behaviour detecting system wherein the: Said chemical processing oidrunner is model includes pretreatment subassembly the main control module interface analysis component interface control component special event triggering module and special event triggering base component; Pretreatment subassembly apk analysis and obtain the basic information as other components the movement of it provides foundation data for the; Interface analysis component obtaining the current activity to display all can be operated control property and generating control sequence the boundary control assembly it provides foundation data for the; Interface control module of simulated user to the application of the operation of the operation according to the combination balance traversing algorithm dispatching generating; Specific event triggering component on the basis of registered broadcasting receiver and detection operation environment kind of event triggering executing application program malicious behaviour analysis is designed in order to realize script realization method and device realizing method = method to realize operation of some event the automatic triggering; Specific event triggering module database storing current that has been found malicious application malicious behaviour of the trigger event and method for realizing; Main control module is responsible for through adb and the equipment is performed between communication and control interface and the analysis component interface control component special event triggering component of the supporting to realize the application of the automatic operation.</p>
</li>
<li><p>一种基于权利要求1所述的基于组合事件行为触发的Android恶意行为检测系统的检 测方法，其特征在于，包括以下步骤，<br>步骤一：多层行为监控模块通过修改Android源码、植入网络监控工具实现对Java调用、 本地调用和网络连接的监控，捕获应用程序运行时的行为日志；<br>步骤二：行为分析模块通过函数调用关系和函数参数特征识别应用程序中的恶意行为， 同时，行为分析模块会生成应用行为分析报告；<br>步骤三：根据应用行为分析和DroidRunner行为触发模型完成对恶意行为的动态检测。</p>
</li>
</ol>
<p>3 according to claim 1 said base used for combining event is triggered amlroid malicious behaviour of the detection system detection method wherein it comprises w of the following steps step one: Several layers of the monitoring module through modifying android source code is embedded into the network monitoring tool to realize the va the native transferring and network connection the monitoring and trapping application program during operation of the behaviour log; Step two: Behaviour analysis module through the function transferring relation and function parameter characteristic recognition application program in the invention prevents malicious behaviour at the same time to analyze module will produce applied behavioural analysis report; Step s: According to applied behavioural analysis and chemical oidrunner to as trigger mode to finish the malicious behaviour dynamic detecting.</p>
<ol>
<li>根据权利要求3所述的基于组合事件行为触发的Android恶意行为检测方法，其特征 在于：所述的根据应用行为分析和DroidRunner行为触发模型完成对恶意行为的动态检测的 方法为：<br>步骤一：通过预处理组件完成APK的分析并取其基本信息；利用apktool工具反编译APK 获取Androidmanifest.xml文件，通过分析Androidmanifest.xml文件获取APK的基本信息， 包括APK的包名称、MainActivity名称、4种组件信息、申请的权限；<br>步骤二：通过分析组件获取当前Activity中显示的所有可操作控件的绝对坐标、控件类型、 控件可操作指令属性，生成控件的操作序列，为界面控制组件提供基础数据；<br>步骤三：利用步骤二获得的数据信息模拟用户对应用的操作，操作根据多组合均衡遍历 算法调度生成；<br>步骤四：根据预处理组件获取的待检测应用的权限及组件信息，从特殊事件触发库中抽 取符合条件的特殊事件列表，在主控组件的控制下在APP运行期间随机触发这些特殊事件；<br>步骤五：通过ADB与设备之间进行通讯与控制，并在界面分析组件、界面控制组件、特 殊事件触发组件的支撑下，完成自动检测。</li>
</ol>
<p>4 according to claim 1 said base used for combining event is triggered amlroid malicious behaviour method for detecting the feature lies in that: Said according to applied behavioural analysis and chemical oidrunner for is model finishes the malicious behaviour dynamic detecting method is as follows: Step one: Through pre-treatment apk components to finish analysis and obtain the basic information; Using apktool tool obtaining the compiling apk chemical oidmanifest an xml file through analyzing chemical oidmanifest an xml file obtaining apk the basic information comprises apk the name of main activity name 4 assembly information request the authorization; Step two: By analyzing module obtains current activity is displayed in the operable to control the absolute coordinate control type control can be operation instruction attribute create control operation sequence the boundary control assembly it provides foundation data for the; Step by step two of obtaining the data information of simulated user to the application of the operation of the operation according to the combination balance traversing algorithm dispatching generating; Step four: According to the processing component for obtaining to be detected application property and component information from the special event trigger to extract the warehouse accords with condition of the special event list is in the main control module under control of the app operating period of random contact and transporting some special condition happens; Step five: Through adb and the equipment is performed between communication and control interface and the analysis component interface control component special event triggering module the support is finished automatically detecting.</p>
<ol>
<li>根据权利要求4所述的基于组合事件行为触发的Android恶意行为检测方法，其特征 在于：所述的根据多组合均衡遍历算法调度生成生成操作的过程为：<br>(1)将Android应用界面间跳转关系转化为一个有向赋权图：<br>G=(L,W,E)L={li|i=1,2,3…,n}W={w(l)|∀l∈L}E={eij=|i,j=1,2,3…,n}]]&gt;<br>G表示界面跳转关系的有向图；<br>L表示应用所有界面的集合，集合中每个节点表示一个界面；<br>W表示界面权值的集合，权值表示需要调度到该界面执行操作的需求程度，该值越大表 示调度到该界面进行操作的需求越迫切；<br>E表示界面间跳转的边的集合，存储的是导致界面跳转的操作；<br>(2)如果即发现一个新的界面节点Li，将界面分析组件获取的当前界面的所有 操作置于Li.unKnownList表中，计算界面权值Li.weight，转到下一步；如果Li∈L，转到下 一步；<br>Li.weight=0,len(Li.unKnowList)=0,len(Li.notJumpList)=0n,n=len(Li.unKnowList)&gt;0nΣxk,n=len(Li.notJumpList)&gt;0,len(Li.unKnowList)=0]]&gt;<br>其中xk表示Li.notJumpList列表中k个操作被执行的次数，每一个界面节点均维持了3个 列表：unKnowList、notJumpList和jumpList；unKnowList列表用于存储不确定是否会导致界 面跳转的控件操作，在进入一个新的界面时，所有的控件操作均存储在这个列表中； notJumpList列表用于存储不会导致界面跳转的操作，初始值为空；jumpList列表用于存储会 发生界面跳转的操作，初始值为空；<br>(3)如果len(Li.unKnownList)≠0，在Li.notJumpList列表中，在Li.unKnownList列表中 随机选择执行一个操作xk，xk.count自加1，计算界面权值Li.weight；如果界面没有发生变 化，则将操作xk从Li.unKnownList列表移动到Li.notJumpList列表中，跳到步骤(3)；如果 界面发生跳转，新的界面为Lj，则将操作xk从Li.unKnownList列表移动到Li.notJumpList列 表中，并建立界面Li过操作xk跳转到界面Lj的指向关系，跳到步骤(2)；如果 len(Li.unKnownList)＝0，跳到步骤四(4)；<br>(4)如果len(Li.notJumpList)≥3，根据执行次数少优先和不同类型优先随机在 Li.notJumpLtis中选择3个操作组合Commands并执行；如果len(Li.notJumpList)&lt;3，执行所 有操作；被执行操作count属性自加1，计算界面权值Li.weight，完成后跳转到步骤(5)； 如果len(Li.notJumpList)＝0，跳转到步骤(5)；<br>(5)Lk＝max(W(L))，如果i＝k，跳到步骤(4)；如果i≠k，跳到步骤(6)；<br>(6)根据广度优先算法在图中搜索当前界面Li到界面Lk的路径S，如果S存在，按照跳 转操作执行，操作的count属性自加1，跳转到步骤(3)。如果S不存在，执行返回操作， 跳到步骤(6)。</li>
</ol>
<h2 id="说明书"><a href="#说明书" class="headerlink" title="说明书"></a>说明书</h2><h3 id="技术领域"><a href="#技术领域" class="headerlink" title="技术领域"></a>技术领域</h3><p>本发明属于AMBDS恶意行为检测领域，尤其涉及基于组合事件行为触发的Android恶 意行为检测系统及其检测方法。</p>
<h3 id="背景技术"><a href="#背景技术" class="headerlink" title="背景技术"></a>背景技术</h3><p>伴随着Android平台的迅猛发展，Android平台的安全形势也愈加严峻。针对Android平 台的恶意软件数量近几年呈爆发式增长。Android平台开放源码，导致恶意应用开发者更容易 找出平台的安全缺陷开发恶意软件。当前，虽然Android平台已存在多类杀毒软件，但是出 于设备性能和用户体验考虑，其功能受到很大限制，对未知病毒的检测基本无能为力。这些 恶意软件主要的传播途径是第三方应用市场及网络下载。因此，在传播环节采用对应用程序 进行安全性审核的方式可实现对恶意应用程序的拦截，有效地遏制恶意软件的传播，更好的 保护Android平台移动设备的安全。同时，在该环节开发的检测工具不用受到设备性能和用 户体验的限制。</p>
<p>Android平台自诞生至今只有短短七年的时间，国内外对Android平台恶意应用程序检测 方向的研究均处于起步阶段，对于下载或上传的应用程序是否具有恶意行为还缺乏有效的检 测手段。虽然，当前Android平台恶意应用检测方法已经取得了一些研究成果。但是，这些 成果存在行为触发方式过于单一、行为监控不全面、检测结果简单等问题。研究如何更全面 的提取应用程序运行期间的行为信息对于该领域具有重要的意义。AMBDS系统中的 DroidRunner行为触发模型设计了多组合均衡遍历算法、特殊事件触发库来提升对应用程序内 部路径和敏感行为的覆盖率，达到更高效的触发应用程序恶意行为的效果。</p>
<h2 id="发明内容"><a href="#发明内容" class="headerlink" title="发明内容"></a>发明内容</h2><p>本发明的目的是提供一种改进了DroidRunner行为触发模型的，基于组合事件行为触发的 Android恶意行为检测系统。本发明的目的包括提供一种效率高、准确率高的，基于组合事 件行为触发的Android恶意行为检测方法。</p>
<p>基于组合事件行为触发的Android恶意行为检测系统，包括多层行为监测模块、行为分 析模块和DroidRunner行为触发模型；</p>
<p>多层行为监控模块通过修改Android源码、植入网络监控工具实现对Java调用、本地调 用和网络连接的监控，捕获应用程序运行时的行为日志；</p>
<p>行为分析模块通过函数调用关系和函数参数特征识别应用程序中的恶意行为，同时，行 为分析模块会生成应用行为分析报告，用户通过应用行为分析报告识别检测结果中误报或漏 报的恶意行为，并修正或扩展恶意行为特征库；</p>
<p>DroidRunner行为触发模型根据对界面调度方式和已知恶意行为触发条件的分析设计了多 组合均衡遍历算法和特殊事件触发库，完成对应用程序中恶意行为的动态检测。</p>
<p>本发明基于组合事件行为触发的Android恶意行为检测系统，还可以包括：<br>1、DroidRunner行为触发模型包括预处理组件、主控组件、界面分析组件、界面控制组 件、特殊事件触发组件和特殊事件触发库组件；</p>
<p>预处理组件，分析APK并获取其基本信息，为其它组件的运行提供基础数据；</p>
<p>界面分析组件，获取当前Activity中显示的所有可操作控件的属性，并生成控件序列，为 界面控制组件提供基础数据；</p>
<p>界面控制组件，模拟用户对应用的操作，操作根据多组合均衡遍历算法调度生成；</p>
<p>特殊事件触发组件，基于对由注册广播接受器和检测运行环境类事件触发执行应用程序 恶意行为的分析，设计了命令行实现、脚本实现和预装实现方式三种方式来实现这些事件的 自动化触发；</p>
<p>特殊事件触发库组件，存储当前已发现恶意应用恶意行为的触发事件及实现方法；</p>
<p>主控组件，负责通过ADB与设备之间进行通讯与控制，并在界面分析组件、界面控制组 件、特殊事件触发组件的支撑下，实现对应用的自动化操作。</p>
<p>基于组合事件行为触发的Android恶意行为检测方法，包括以下步骤，</p>
<p>步骤一：多层行为监控模块通过修改Android源码、植入网络监控工具实现对Java调用、 本地调用和网络连接的监控，捕获应用程序运行时的行为日志；</p>
<p>步骤二：行为分析模块通过函数调用关系和函数参数特征识别应用程序中的恶意行为， 同时，行为分析模块会生成应用行为分析报告；</p>
<p>步骤三：根据应用行为分析和DroidRunner行为触发模型完成对恶意行为的动态检测。</p>
<p>本发明基于组合事件行为触发的Android恶意行为检测方法，还可以包括：<br>1、根据应用行为分析和DroidRunner行为触发模型完成对恶意行为的动态检测的方法为：</p>
<p>步骤一：通过预处理组件完成APK的分析并取其基本信息；利用apktool工具反编译APK 获取Androidmanifest.xml文件，通过分析Androidmanifest.xml文件获取APK的基本信息， 包括APK的包名称、MainActivity名称、4种组件信息、申请的权限；</p>
<p>步骤二：通过分析组件获取当前Activity中显示的所有可操作控件的绝对坐标、控件类型、 控件可操作指令属性，生成控件的操作序列，为界面控制组件提供基础数据；</p>
<p>步骤三：利用步骤二获得的数据信息模拟用户对应用的操作，操作根据多组合均衡遍历 算法调度生成；</p>
<p>步骤四：根据预处理组件获取的待检测应用的权限及组件信息，从特殊事件触发库中抽 取符合条件的特殊事件列表，在主控组件的控制下在APP运行期间随机触发这些特殊事件；</p>
<p>步骤五：通过ADB与设备之间进行通讯与控制，并在界面分析组件、界面控制组件、特 殊事件触发组件的支撑下，完成自动检测。</p>
<p>2、根据多组合均衡遍历算法调度生成生成操作的过程为：</p>
<p>(1)将Android应用界面间跳转关系转化为一个有向赋权图：</p>
<p>G=(L,W,E)L={li|i=1,2,3…,n}W={w(l)|∀l∈L}E={eij=<li,lj>i,j=1,2,3…,n}]]&gt;</li,lj></p>
<p>G表示界面跳转关系的有向图；</p>
<p>L表示应用所有界面的集合，集合中每个节点表示一个界面；</p>
<p>W表示界面权值的集合，权值表示需要调度到该界面执行操作的需求程度，该值越大表 示调度到该界面进行操作的需求越迫切；<br>E表示界面间跳转的边的集合，存储的是导致界面跳转的操作；</p>
<p>(2)如果即发现一个新的界面节点Li，将界面分析组件获取的当前界面的所有操作置于Li.unKnownList表中，计算界面权值Li.weight，转到下一步；如果Li∈L，转到下一步；</p>
<p>Li.weight=0,len(Li.unKnowList)=0,len(Li.notJumpList)=0n,n=len(Li.unKnowList)&gt;0nΣxk,n=len(Li.notJumpList)&gt;0,len(Li.unKnowList)=0]]&gt;</p>
<p>其中xk表示Li.notJumpList列表中k个操作被执行的次数，每一个界面节点均维持了3个 列表：unKnowList、notJumpList和jumpList；unKnowList列表用于存储不确定是否会导致界 面跳转的控件操作，在进入一个新的界面时，所有的控件操作均存储在这个列表中； notJumpList列表用于存储不会导致界面跳转的操作，初始值为空；jumpList列表用于存储会 发生界面跳转的操作，初始值为空；</p>
<p>(3)如果len(Li.unKnownList)≠0，在Li.notJumpList列表中，在Li.unKnownList列表中 随机选择执行一个操作xk，xk.count自加1，计算界面权值Li.weight；如果界面没有发生变 化，则将操作xk从Li.unKnownList列表移动到Li.notJumpList列表中，跳到步骤(3)；如果 界面发生跳转，新的界面为Lj，则将操作xk从Li.unKnownList列表移动到Li.notJumpList列 表中，并建立界面Li过操作xk跳转到界面Lj的指向关系，跳到步骤(2)；如果 len(Li.unKnownList)＝0，跳到步骤四(4)；</p>
<p>(4)如果len(Li.notJumpList)≥3，根据执行次数少优先和不同类型优先随机在 Li.notJumpIt中选择3个操作组合Commands并执行；如果len(Li.notJumpList)&lt;3，执行所 有操作；被执行操作count属性自加1，计算界面权值Li.weight，完成后跳转到步骤(5)； 如果len(Li.notJumpList)＝0，跳转到步骤(5)；</p>
<p>(5)Lk＝max(W(L))，如果i＝k，跳到步骤(4)；如果i≠k，跳到步骤(6)；</p>
<p>(6)根据广度优先算法在图中搜索当前界面Li到界面Lk的路径S，如果S存在，按照跳 转操作执行，操作的count属性自加1，跳转到步骤(3)。如果S不存在，执行返回操作， 跳到步骤(6)。</p>
<p>有益效果：</p>
<p>本发明主要是对DroidRunner行为触发模型进行了改进，体现在下面两点：</p>
<p>改进一：设计了多组合均衡遍历算法。该遍历算法根据应用程序内用户界面的跳转构建 了界面跳转的图形描述，在遍历执行界面操作过程中，根据控件类型及操作执行的次数随机 生成不同的组合操作。同时，利用界面间调度算法均衡各个界面的操作平均执行次数。以此 提升应用运行期间对后台逻辑代码覆盖率，达到在动态检测期间提升触发应用恶意行为概率 的目的。</p>
<p>改进二：设计了特殊事件触发库。通过对恶意行为触发条件的分析可知部分恶意行为并 非由用户对应用的操作触发，而是由系统广播事件等其它非用户操作的事件触发。本发明利 用已知恶意应用恶意行为的触发条件搭建了一个特殊事件触发库，通过在应用运行期间触发 这些事件，进一步提升触发应用恶意行为的概率。<br>本发明通过与Monkey和Monkeyrunner触发方式对比实验显示DroidRunner提升了运行 期间对应用程序内部方法层面的覆盖率，可更高效的触发应用程序的恶意行为。通过自编辑 恶意样本和网络恶意样本检测结果显示AMBDS系统可更高效、准确的识别应用程序的恶意 行为。</p>
<h3 id="附图说明"><a href="#附图说明" class="headerlink" title="附图说明"></a>附图说明</h3><p>图1为AMBDS恶意行为检测系统；</p>
<p>图2为DroidRunner模型示意图；</p>
<p>图3为Android应用界面间跳转关系图；</p>
<p>图4为AMBDS系统检测结果；</p>
<p>图5为多种触发方式效果对比图。</p>
<h3 id="具体实施方式"><a href="#具体实施方式" class="headerlink" title="具体实施方式"></a>具体实施方式</h3><p>下面将结合附图对本发明做进一步详细说明。</p>
<p>在本发明中所涉及的基于组合事件行为触发的Android恶意行为检测模型主要功能为： 通过多层行为监控模块的行为监控，完成对程序行为特征的获取。根据获取的程序行为特征 信息，进行行为特征的分析并完成对恶意行为的判定，同时根据需求产生不同详细程度的行 为分析报告。根据对程序行为特征的分析，同时结合DroidRunner行为触发模型完成对应用 程序中恶意行为的动态检测，如图1所示。</p>
<p>下面以DroidRunner行为触发模型对应用程序敏感行为的检测为例，介绍此模型触发应 用程序恶意行为的过程，描述如下：</p>
<p>步骤一：通过预处理组件完成APK的分析并取其基本信息。利用apktool工具反编译APK 获取Androidmanifest.xml文件，通过分析Androidmanifest.xml文件获取APK的基本信息， 包括APK的包名称、MainActivity名称、4种组件信息、申请的权限等。这些信息为其它组 件的运行提供基础数据。<br>步骤二：通过分析组件获取当前Activity中显示的所有可操作控件的绝对坐标、控件类 型、控件可操作指令等属性，生成控件的操作序列，为界面控制组件提供基础数据。</p>
<p>步骤三：利用步骤二获得的数据信息模拟用户对应用的操作，这些操作根据多组合均衡 遍历算法调度生成。</p>
<p>多组合均衡遍历算法实现了对应用的模拟操作，为便于分析应用程序内部的界面间的调 度关系，本发明将Android应用界面间跳转关系转化为一个有向赋权图，其逻辑表示如下所 示：</p>
<p>G=(L,W,E)L={li|i=1,2,3…,n}W={w(l)|∀l∈L}E={eij=<li,lj>i,j=1,2,3…,n}]]&gt;</li,lj></p>
<p>G表示界面跳转关系的有向图。</p>
<p>L表示应用所有界面的集合，集合中每个节点表示一个界面。</p>
<p>W表示界面权值的集合，权值表示需要调度到该界面执行操作的需求程度，该值越大说 明调度到该界面进行操作的需求越迫切。</p>
<p>E表示界面间跳转的边的集合，存储的是导致界面跳转的操作。</p>
<p>界面节点的权值确定了界面间调度优先级，本发明利用界面节点中操作控件执行情况确 定界面节点的权值。每一个界面节点均维持了3个列表：unKnowList、notJumpList和jumpList。 unKnowList列表用于存储不确定是否会导致界面跳转的控件操作，在进入一个新的界面时， 所有的控件操作均存储在这个列表中。notJumpList列表用于存储不会导致界面跳转的操作， 初始值为空。jumpList列表用于存储会发生界面跳转的操作，初始值为空。三个列表中所有 的操作共有四个属性：count、index、command和class，分别表示：</p>
<p>1)count初始值为0，表示该操作被执行的次数。</p>
<p>2)index属性用于标示这个操作。</p>
<p>3)command表示具体的操作命令。<br>class表示控件的类型。</p>
<p>每个界面Li都有一个权重Li.weight，在计算界面权值时以当前识别出的控件情况来计算， 因此不同的操作可能导致界面内的控件发生变化。界面节点的权值计算公式如下：</p>
<p>Li.weight=0,len(Li.unKnowList)=0,len(Li.notJumpList)=0n,n=len(Li.unKnowList)&gt;0nΣxk,n=len(Li.notJumpList)&gt;0,len(Li.unKnowList)=0]]&gt;</p>
<p>其中xk表示Li.notJumpList列表中k个操作被执行的次数。权值越大表示调度到这个界 面节点执行的优先级越高。根据界面权重与1的比较结果，有以下三种情况：</p>
<p>1)界面权重大于1，说明这个界面还有多个操作没有被调度执行。</p>
<p>2)界面权重小于1，说明该界面中所有的操作都被执行过。</p>
<p>3)界面权值等于1，说明界面是存在一个操作没有被执行或者这个界面中所有的操作都 被执行了1次。</p>
<p>多组合均衡遍历算法的具体描述如下：</p>
<p>1)如果即发现一个新的界面节点Li，将界面分析组件获取的当前界面的所有操作置于Li.unKnownList表中，根据公式计算界面权值Li.weight，转到(2)。如果Li∈L，转到(2)。</p>
<p>2)如果len(Li.unKnownList)≠0，在Li.notJumpList列表中，在Li.unKnownList列表中随 机选择执行一个操作xk，xk.count自加1，根据公式计算界面权值Li.weight。如果界面没有 发生变化，则将操作xk从Li.unKnownList列表移动到Li.notJumpList列表中，跳到(2)。如 果界面发生跳转，新的界面为Lj，则将操作xk从Li.unKnownList列表移动到Li.notJumpList列 表中，并建立界面Li过操作xk跳转到界面Lj的指向关系，跳到步骤(1)。如果 len(Li.unKnownList)＝0，跳到(3)。</p>
<p>3)如果len(Li.notJumpList)≥3，根据执行次数少优先和不同类型优先随机在 Li.notJumpIt中选择3个操作组合Commands并执行；如果len(Li.notJumpList&lt;3)，执行所 有操作。被执行操作count属性自加1，根据公式计算界面权值Li.weight，完成后跳转到(4)。 如果len(Li.notJumpList)＝0，跳转到(4)。</p>
<p>4)Lk＝max(W(L))，如果i＝k，跳到(3)；如果i≠k，跳到(5)。<br>5)根据广度优先算法在图中搜索当前界面Li到界面Lk的路径S，如果S存在，按照跳转 操作执行，操作的count属性自加1，跳转到(2)。如果S不存在，执行返回操作，跳到(5)。</p>
<p>每个应用程序运行时间预定义是10分钟，当时间到达后自动结束上述遍历算法。预定义 时间可根据任务量和程序的大小进行调节。多组合均衡遍历算法的执行流程需要注意一种特 殊情况：在遍历执行的过程中，可能执行某个操作后会导致应用程序正常退出或异常崩溃退 出，如果出现这种异常，需要对这个操作进行标记，在遍历过程中减少这个操作运行的次数。 然后自动重新启动该应用，并继续执行遍历算法，如果在检测期间出现2次应用异常崩溃， 直接停止遍历算法。</p>
<p>步骤四：根据预处理组件获取的待检测应用的权限及组件信息，从特殊事件触发库中抽 取符合条件的特殊事件列表，之后在主控组件的控制下在APP运行期间随机触发这些特殊事 件。</p>
<p>多组合均衡遍历算法无法模拟接收到短信、锁屏等特殊事件，因此，本发明设计了特殊 事件触发库进一步提升对应用程序内部处理逻辑的覆盖率，达到触发应用程序恶意为的目的。 特殊事件触发库采用特殊事件-权限映射表存储当前已发现恶意应用恶意行为的触发事件及 实现方法。在特殊事件-权限映射表中，特殊事件与权限之间是1对1或1对多的关系，即某 一个特殊事件发生可能需要多种权限的组合。特殊事件-权限映射表的具体描述如下表所示。</p>
<p>特殊事件的提取流程分为以下2步：</p>
<p>步骤1：提取应用申请的权限信息，根据提取的权限从特殊事件-权限映射表中抽取对应 的特殊事件；</p>
<p>步骤2：根据提取的特殊事件在特殊事件-权限映射表中查找需要的权限，如果需要的权 限均被应用申请，这表明这个特殊事件满足触发条件，需要在应用运行时执行这个特殊事件。 不满足则舍弃这个特殊事件。</p>
<p>步骤五：通过ADB与设备之间进行通讯与控制，并在界面分析组件、界面控制组件、特 殊事件触发组件的支撑下，实现对应用的安装、启动、运行、卸载等自动化操作，提升触发 检测应用恶意行为的概率，完成自动检测。</p>
<p>近年来，Android平台的恶意应用程序呈爆发式增长，国内外研究组织针对Android平台 恶意应用检测展开了许多研究。第三方应用市场和网络论坛是恶意应用程序的主要传播途径， 通过在这些渠道中检测上传应用程序是否含有恶意行为，可阻断恶意应用程序利用这些途径 传播，遏制恶意应用程序的扩散。但是，目前没有有效的方法可准确识别上传应用是否具有 恶意行为。通过对当前恶意应用检测领域的分析，本发明提出了可更高效、准确识别应用程 序恶意行为的AMBDS检测系统，该系统解决方案的工作可以划分为以下三个步骤：</p>
<p>步骤1：多层行为监控模块通过修改Android源码、植入网络监控工具实现对Java调用、 本地调用和网络连接的监控，从多个层面捕获应用程序运行时的行为日志。</p>
<p>步骤2：行为分析模块通过函数调用关系和函数参数特征识别应用程序中的恶意行为。 同时，行为分析模块会生成应用行为分析报告，以此帮助用户识别检测结果中误报或漏报的 恶意行为，并修正或扩展恶意行为特征库，进一步提升检测结果的准确性。<br>步骤3：检测系统中的DroidRunner行为触发模型根据对界面调度方式和已知恶意行为触 发条件的分析设计了多组合均衡遍历算法和特殊事件触发库，提升了对应用程序内路径和敏 感函数调用的覆盖率，可更高效的触发恶意行为。</p>
<p>本发明重点在于DroidRunner行为触发模型的实施。该模型由6个组件组成：预处理、 主控、界面分析、界面控制、特殊事件触发和特殊事件触发库。其示意图如附图2所示。</p>
<p>预处理组件实施时，主要是分析APK并获取其基本信息，为其它组件的运行提供基础数 据。界面分析组件实施时，主要是获取当前Activity中显示的所有可操作控件的属性，并生 成控件序列，为界面控制组件提供基础数据。</p>
<p>界面控制组件实施时，主要是模拟用户对应用的操作，这些操作根据多组合均衡遍历算 法调度生成。该算法的核心思想是均衡的对应用中所有的可操作的控件进行遍历操作，在遍 历过程中，根据控件的类型进行不同的组合来模拟人对应用的操作，通过对用户界面内不同 控件的操作可能导致界面间的跳转，附图3展示了一个应用内界面间跳转关系的抽象图。</p>
<p>特殊事件触发实施时，主要是基于对由注册广播接受器和检测运行环境类事件触发执行 应用程序恶意行为的分析，设计了命令行实现、脚本实现和预装实现方式三种方式来实现这 些事件的自动化触发。</p>
<p>方式一：命令行实现方式。在Android系统中提供了功能强大的调试工具Android调试 桥和Dalvik虚拟机调试监控服务(DalvikDebugMonitorService，DDMS)。这些工具可以模 拟对Android虚拟机进行锁屏操作、启动指定服务、向虚拟机发送短信，打电话等特殊事件。</p>
<p>方式二：脚本实现方式。通过录制模拟用户某些特定操作的脚本来实现特殊事件库中的 某些特殊事件。这类脚本包括录制变更联网操作的脚本，录制登陆支付宝、微信等应用的脚 本，录制发短信的脚本等。</p>
<p>方式三：预装实现方式。在测试的Android虚拟机中根据应用的基本信息设置初始环境， 触发应用的恶意行为。这些预设信息可能是一些敏感的短信、通话记录等信息，预装一些社 交类应用、安全类应用、支付类应用等，并对这些应用进行基本操作产生一些使用记录等。</p>
<p>特殊事件触发库实施时，会存储当前已发现恶意应用恶意行为的触发事件及实现方法。 根据应用程序申请的权限信息分析出应用程序对那些特殊事件敏感，同时根据应用程序的组 件构成等内容可分析出应用程序某些功能。基于这些分析提取出特殊事件触发库中的对应特 殊事件，提高检测的精度。</p>
<p>主控组件实施时，主要是负责通过ADB与设备之间进行通讯与控制，并在界面分析组件、 界面控制组件、特殊事件触发组件的支撑下，实现对应用的安装、启动、运行、卸载等自动 化操作。</p>
<p>本发明的测试环境为利用Python脚本语言和Java语言实现了AMBDS恶意行为检测系统， 开发环境是Ubuntu12.0464位操作系统。本发明从行为监控部分的虚拟机性能、行为触发部分 的触发效果及整体检测效果三个方面进行测试。</p>
<p>1)AMBDS检测效果分析</p>
<p>本项测试的目标是检测AMBDS的实际检测效果。通过网络论坛、QQ群和博客等途径收集 到了可用的恶意应用样本35个，同时，在其他同学的帮助下开发了5个恶意样本，共计40 个恶意应用样本。将上述40个恶意样本均利用AMBDS模型进行检测分析，设置每个样本的测 试时间为15分钟。为更好的分析本文提出的系统的检测效果，本文将自编辑样本和网络样本 分开统计，同时检测结果也分为直接识别出的检测结果和根据对行为分析报告分析修正后的 检测结果。40个恶意样本经AMBDS恶意行为检测系统检测后的检测结果统计数据如附图4所 示。</p>
<p>结果分析：自编辑样本的恶意行为检出率高与网络样本的恶意行为检出率，原因可能是 自编辑的恶意样本中对恶意行为隐藏和掩饰的能力较差，同时这类样本是模仿分析过了恶意 样本进行编写，因此恶意行为特征库中存在这类变种样本的特征，从侧面也能表明AMBDS系 统对未知恶意应用具有好的检测效果。AMBDS系统对网络样本的直接检出率较低，其原因是 恶意行为特征库中的恶意行为特征规模相对较小。但是，通过对行为检测报高的分析，恶意 行为检出率有了明显提升。这表明AMBDS系统对恶意应用程序的分析可帮助分析人员发现未 知恶意应用的恶意行为。同时，根据新发现的恶意行为可归纳总结其行为特征扩充恶意行为 特征库，提升对应用程序恶意行为的直接检出率，以此形成良性循环。</p>
<p>2)DroidRunner触发效果分析</p>
<p>本项测试的目标是验证DroidRunner对应用程序实际的触发效果，本次测试设计了A、B 两组测试样本。A组由4个开源应用程序，通过添加了部分敏感API函数调用扩展应用程序 的功能。A组的测试样本分别使用Monkeyrunner和DroidRunner对其进行处罚并对并统计应 用程序执行期间的控件覆盖率、控件的点击次数差额、函数覆盖率、敏感API覆盖率和恶意 行为触发率。B组由20个病毒样本组成，分别使用Monkey、Monkeyrunner和DroidRunner 三种触发方式实现对样本的自动控制，并统计函数覆盖率、恶意行为触发率和敏感函数触发 次数。附图5展示了B组测试中三种触发方式在函数覆盖率、恶意行为触发率参数的统计值。</p>
<p>结果分析：通过对以上两组测试的统计数据分析，DroidRunner基本能覆盖应用程序中所 有的识别出可操作控件，相比传统的行为触发方法，其可覆盖应用程序运行期间绝大部分的 函数调用，对应用程序中的敏感行为触发效果显著。DroidRunner可高效覆盖应用程序大部分 程序路径的能力，达到高效、稳定触发应用程序中可能存在的恶意行为的效果。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.innojoy.com/patent/patent.html?docno=CN201610130822.0&amp;trsdb=fmzl" target="_blank" rel="external">基于组合事件行为触发的Android恶意行为检测系统及其检测方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.innojoy.com/searchresult/download.html?patentName=%E5%9F%BA%E4%BA%8E%E7%BB%84%E5%90%88%E4%BA%8B%E4%BB%B6%E8%A1%8C%E4%B8%BA%E8%A7%A6%E5%8F%91%E7%9A%84Android%E6%81%B6%E6%84%8F%E8%A1%8C%E4%B8%BA%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95[ZH]&amp;amp;db=fmzl&amp;amp;pd=2016.06.08&amp;amp;dn=CN201610130822.0&amp;amp;pp=BOOKS@FM@2016@20160608@201610130822.0&amp;amp;lls=%E5%AE%9E%E5%AE%A1#&quot;&gt;专利全文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://books.daweisoft.com/abstphoto/FM/20160608/201610130822.0/201610130822.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本发明公开了一种基于组合事件行为触发的Android恶意行为检测系统及其检测方法。多层行为监控模块捕获应用程序运行时的&lt;strong&gt;行为日志&lt;/strong&gt;；行为分析模块通过&lt;strong&gt;函数调用关系和函数参数特征&lt;/strong&gt;识别应用程序中的恶意行为，同时，行为分析模块会生成应用行为分析报告；&lt;strong&gt;DroidRunner行为触发模型&lt;/strong&gt;根据对界面调度方式和已知恶意行为触发条件的分析设计了多组合均衡遍历算法和特殊事件触发库，完成对应用程序中恶意行为的动态检测。本发明其可覆盖应用程序运行期间绝大部分的函数调用，对应用程序中的敏感行为触发效果显著。达到高效、稳定触发应用程序中可能存在的恶意行为的效果。&lt;/p&gt;
    
    </summary>
    
      <category term="Patent" scheme="http://ipcreator.me/categories/Patent/"/>
    
    
      <category term="Android" scheme="http://ipcreator.me/tags/Android/"/>
    
      <category term="DroidRunner" scheme="http://ipcreator.me/tags/DroidRunner/"/>
    
  </entry>
  
  <entry>
    <title>Best Practices of Android Performance</title>
    <link href="http://ipcreator.me/2017/03/24/Program/Android/optimization-of-android/"/>
    <id>http://ipcreator.me/2017/03/24/Program/Android/optimization-of-android/</id>
    <published>2017-03-24T14:55:06.000Z</published>
    <updated>2017-03-27T08:02:58.214Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20161124140922633" alt=""><br><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">作者：郭霖</a></p>
<p><a href="http://blog.csdn.net/guolin_blog/article/details/42238627" target="_blank" rel="external">Android最佳性能实践(一)——合理管理内存</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/42238633" target="_blank" rel="external">Android最佳性能实践(二)——分析内存的使用情况</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/42318689" target="_blank" rel="external">Android最佳性能实践(三)——高性能编码优化</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/43376527" target="_blank" rel="external">Android最佳性能实践(四)——布局优化技巧</a><br><a href="https://zhuanlan.zhihu.com/p/20416881?columnSlug=zmywly8866" target="_blank" rel="external">值得推荐的Android应用性能检测工具列表</a></p>
<a id="more"></a>
<h2 id="Android最佳性能实践-一-——合理管理内存"><a href="#Android最佳性能实践-一-——合理管理内存" class="headerlink" title="Android最佳性能实践(一)——合理管理内存"></a>Android最佳性能实践(一)——合理管理内存</h2><p>有不少朋友都问过我，怎样才能写出高性能的应用程序，如何避免程序出现OOM，或者当程序内存占用过高的时候该怎么样去排查。确实，一个优秀的应用程序，不仅仅要功能完成得好，性能问题也应该处理得恰到好处。为此，我也是阅读了不少Android官方给出的高性能编程建议，那么从本篇文章开始，我就准备开始写一个全新系列的博文，来把这些建议进行整理和分析，帮助大家能够写出更加出色的应用程序。</p>
<p>注意本系列文章的内容基本源于Android Doc，如果想要阅读更加详细的关于性能方面的资料，可以直接去阅读Android官方文档。</p>
<p>内存(RAM)对于任何一个软件开发环境都是种非常珍贵的资源，而对于移动操作系统来讲的话，则会显得更加珍贵，因为手机的硬件条件相对于PC毕竟是比较落后的。尽管Android系统的虚拟机拥有自动回收垃圾的机制，但这并不代表我们就可以忽视应该在什么时候分配和释放内存。</p>
<p>为了使垃圾回收器可以正常释放程序所占用的内存，在编写代码的时候就一定要注意尽量避免出现内存泄漏的情况（通常都是由于全局成员变量持有对象引用所导致的），并且在适当的时候去释放对象引用。对于大多数的应用程序而言，后面其它的事情就可以都交给垃圾回收器去完成了，如果一个对象的引用不再被其它对象所持有，那么系统就会将这个对象所分配的内存进行回收。</p>
<p>我们在开发软件的时候应当自始至终都把内存的问题充分考虑进去，这样的话才能开发出更加高性能的软件。而内存问题也并不是无规律可行的，Android系统给我们提出了很多内存优化的建议技巧，只要按照这些技巧来编写程序，就可以让我们的程序在内存性能发面表现得相当不错，下面我们就来一一学习一下这些技巧。</p>
<h3 id="节制地使用Service"><a href="#节制地使用Service" class="headerlink" title="节制地使用Service"></a>节制地使用Service</h3><p>如果应用程序当中需要使用Service来执行后台任务的话，请一定要注意只有当任务正在执行的时候才应该让Service运行起来。另外，当任务执行完之后去停止Service的时候，要小心Service停止失败导致内存泄漏的情况。</p>
<p>当我们启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，这样就会导致这个进程变得非常消耗内存。并且，系统可以在LRU cache当中缓存的进程数量也会减少，导致切换应用程序的时候耗费更多性能。严重的话，甚至有可能会导致崩溃，因为系统在内存非常吃紧的时候可能已无法维护所有正在运行的Service所依赖的进程了。</p>
<p>为了能够控制Service的生命周期，Android官方推荐的最佳解决方案就是使用IntentService，这种Service的最大特点就是当后台任务执行结束后会自动停止，从而极大程度上避免了Service内存泄漏的可能性。关于IntentService更加详细的用法讲解，可以参考《第一行代码——Android》的9.5.2节。</p>
<p>让一个Service在后台一直保持运行，即使它并不执行任何工作，这是编写Android程序时最糟糕的做法之一。所以Android官方极度建议开发人员们不要过于贪婪，让Service在后台一直运行，这不仅可能会导致手机和程序的性能非常低下，而且被用户发现了之后也有可能直接导致我们的软件被卸载（我个人就会这么做）。</p>
<h3 id="当界面不可见时释放内存"><a href="#当界面不可见时释放内存" class="headerlink" title="当界面不可见时释放内存"></a>当界面不可见时释放内存</h3><p>当用户打开了另外一个程序，我们的程序界面已经不再可见的时候，我们应当将所有和界面相关的资源进行释放。在这种场景下释放资源可以让系统缓存后台进程的能力显著增加，因此也会让用户体验变得更好。</p>
<p>那么我们如何才能知道程序界面是不是已经不可见了呢？其实很简单，只需要在Activity中重写onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发了之后就说明用户已经离开了我们的程序，那么此时就可以进行资源释放操作了，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Override  </div><div class="line">public void onTrimMemory(int level) &#123;  </div><div class="line">    super.onTrimMemory(level);  </div><div class="line">    switch (level) &#123;  </div><div class="line">    case TRIM_MEMORY_UI_HIDDEN:  </div><div class="line">        // 进行资源释放操作  </div><div class="line">        break;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意onTrimMemory()方法中的TRIM_MEMORY_UI_HIDDEN回调只有当我们程序中的所有UI组件全部不可见的时候才会触发，这和onStop()方法还是有很大区别的，因为onStop()方法只是当一个Activity完全不可见的时候就会调用，比如说用户打开了我们程序中的另一个Activity。因此，我们可以在onStop()方法中去释放一些Activity相关的资源，比如说取消网络连接或者注销广播接收器等，但是像UI相关的资源应该一直要等到onTrimMemory(TRIM_MEMORY_UI_HIDDEN)这个回调之后才去释放，这样可以保证如果用户只是从我们程序的一个Activity回到了另外一个Activity，界面相关的资源都不需要重新加载，从而提升响应速度。</p>
<h3 id="当内存紧张时释放内存"><a href="#当内存紧张时释放内存" class="headerlink" title="当内存紧张时释放内存"></a>当内存紧张时释放内存</h3><p>除了刚才讲的TRIM_MEMORY_UI_HIDDEN这个回调，onTrimMemory()方法还有很多种其它类型的回调，可以在手机内存降低的时候及时通知我们。我们应该根据回调中传入的级别来去决定如何释放应用程序的资源：<br>TRIM_MEMORY_RUNNING_MODERATE    表示应用程序正常运行，并且不会被杀掉。但是目前手机的内存已经有点低了，系统可能会开始根据LRU缓存规则来去杀死进程了。<br>TRIM_MEMORY_RUNNING_LOW    表示应用程序正常运行，并且不会被杀掉。但是目前手机的内存已经非常低了，我们应该去释放掉一些不必要的资源以提升系统的性能，同时这也会直接影响到我们应用程序的性能。<br>TRIM_MEMORY_RUNNING_CRITICAL    表示应用程序仍然正常运行，但是系统已经根据LRU缓存规则杀掉了大部分缓存的进程了。这个时候我们应当尽可能地去释放任何不必要的资源，不然的话系统可能会继续杀掉所有缓存中的进程，并且开始杀掉一些本来应当保持运行的进程，比如说后台运行的服务。<br>以上是当我们的应用程序正在运行时的回调，那么如果我们的程序目前是被缓存的，则会收到以下几种类型的回调：<br>TRIM_MEMORY_BACKGROUND    表示手机目前内存已经很低了，系统准备开始根据LRU缓存来清理进程。这个时候我们的程序在LRU缓存列表的最近位置，是不太可能被清理掉的，但这时去释放掉一些比较容易恢复的资源能够让手机的内存变得比较充足，从而让我们的程序更长时间地保留在缓存当中，这样当用户返回我们的程序时会感觉非常顺畅，而不是经历了一次重新启动的过程。<br>TRIM_MEMORY_MODERATE    表示手机目前内存已经很低了，并且我们的程序处于LRU缓存列表的中间位置，如果手机内存还得不到进一步释放的话，那么我们的程序就有被系统杀掉的风险了。<br>TRIM_MEMORY_COMPLETE    表示手机目前内存已经很低了，并且我们的程序处于LRU缓存列表的最边缘位置，系统会最优先考虑杀掉我们的应用程序，在这个时候应当尽可能地把一切可以释放的东西都进行释放。</p>
<h3 id="避免在Bitmap上浪费内存"><a href="#避免在Bitmap上浪费内存" class="headerlink" title="避免在Bitmap上浪费内存"></a>避免在Bitmap上浪费内存</h3><p>当我们读取一个Bitmap图片的时候，有一点一定要注意，就是千万不要去加载不需要的分辨率。在一个很小的ImageView上显示一张高分辨率的图片不会带来任何视觉上的好处，但却会占用我们相当多宝贵的内存。需要仅记的一点是，将一张图片解析成一个Bitmap对象时所占用的内存并不是这个图片在硬盘中的大小，可能一张图片只有100k你觉得它并不大，但是读取到内存当中是按照像素点来算的，比如这张图片是1500<em>1000像素，使用的ARGB_8888颜色类型，那么每个像素点就会占用4个字节，总内存就是1500</em>1000*4字节，也就是5.7M，这个数据看起来就比较恐怖了。</p>
<p>至于如何去压缩图片，以及更多在图片方面节省内存的技术，大家可以去参考我之前写的一篇博客 Android高效加载大图、多图解决方案，有效避免程序OOM 。</p>
<h3 id="使用优化过的数据集合"><a href="#使用优化过的数据集合" class="headerlink" title="使用优化过的数据集合"></a>使用优化过的数据集合</h3><p>Android API当中提供了一些优化过后的数据集合工具类，如SparseArray，SparseBooleanArray，以及LongSparseArray等，使用这些API可以让我们的程序更加高效。传统Java API中提供的HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。</p>
<h3 id="知晓内存的开支情况"><a href="#知晓内存的开支情况" class="headerlink" title="知晓内存的开支情况"></a>知晓内存的开支情况</h3><p>我们还应当清楚我们所使用语言的内存开支和消耗情况，并且在整个软件的设计和开发当中都应该将这些信息考虑在内。可能有一些看起来无关痛痒的写法，结果却会导致很大一部分的内存开支，例如：<br>使用枚举通常会比使用静态常量要消耗两倍以上的内存，在Android开发当中我们应当尽可能地不使用枚举。<br>任何一个Java类，包括内部类、匿名类，都要占用大概500字节的内存空间。<br>任何一个类的实例要消耗12-16字节的内存开支，因此频繁创建实例也是会一定程序上影响内存的。<br>在使用HashMap时，即使你只设置了一个基本数据类型的键，比如说int，但是也会按照对象的大小来分配内存，大概是32字节，而不是4字节。因此最好的办法就是像上面所说的一样，使用优化过的数据集合。</p>
<h3 id="谨慎使用抽象编程"><a href="#谨慎使用抽象编程" class="headerlink" title="谨慎使用抽象编程"></a>谨慎使用抽象编程</h3><p>许多程序员都喜欢各种使用抽象来编程，认为这是一种很好的编程习惯。当然，这一点不可否认，因为的抽象的编程方法更加面向对象，而且在代码的维护和可扩展性方面都会有所提高。但是，在Android上使用抽象会带来额外的内存开支，因为抽象的编程方法需要编写额外的代码，虽然这些代码根本执行不到，但是却也要映射到内存当中，不仅占用了更多的内存，在执行效率方面也会有所降低。当然这里我并不是提倡大家完全不使用抽象编程，而是谨慎使用抽象编程，不要认为这是一种很酷的编程方式而去肆意使用它，只在你认为有必要的情况下才去使用。</p>
<h3 id="尽量避免使用依赖注入框架"><a href="#尽量避免使用依赖注入框架" class="headerlink" title="尽量避免使用依赖注入框架"></a>尽量避免使用依赖注入框架</h3><p>现在有很多人都喜欢在Android工程当中使用依赖注入框架，比如说像Guice或者RoboGuice等，因为它们可以简化一些复杂的编码操作，比如可以将下面的一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">class AndroidWay extends Activity &#123;   </div><div class="line">    TextView name;   </div><div class="line">    ImageView thumbnail;   </div><div class="line">    LocationManager loc;   </div><div class="line">    Drawable icon;   </div><div class="line">    String myName;   </div><div class="line"></div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;   </div><div class="line">        super.onCreate(savedInstanceState);   </div><div class="line">        setContentView(R.layout.main);  </div><div class="line">        name      = (TextView) findViewById(R.id.name);   </div><div class="line">        thumbnail = (ImageView) findViewById(R.id.thumbnail);   </div><div class="line">        loc       = (LocationManager) getSystemService(Activity.LOCATION_SERVICE);   </div><div class="line">        icon      = getResources().getDrawable(R.drawable.icon);   </div><div class="line">        myName    = getString(R.string.app_name);   </div><div class="line">        name.setText( &quot;Hello, &quot; + myName );   </div><div class="line">    &#125;   </div><div class="line">&#125;   </div><div class="line">简化成这样的一种写法：</div><div class="line">[java] view plain copy 在CODE上查看代码片派生到我的代码片</div><div class="line">@ContentView(R.layout.main)  </div><div class="line">class RoboWay extends RoboActivity &#123;   </div><div class="line">    @InjectView(R.id.name)             TextView name;   </div><div class="line">    @InjectView(R.id.thumbnail)        ImageView thumbnail;   </div><div class="line">    @InjectResource(R.drawable.icon)   Drawable icon;   </div><div class="line">    @InjectResource(R.string.app_name) String myName;   </div><div class="line">    @Inject                            LocationManager loc;   </div><div class="line"></div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;   </div><div class="line">        super.onCreate(savedInstanceState);   </div><div class="line">        name.setText( &quot;Hello, &quot; + myName );   </div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看上去确实十分诱人，我们甚至可以将findViewById()这一类的繁琐操作全部省去了。但是这些框架为了要搜寻代码中的注解，通常都需要经历较长的初始化过程，并且还可能将一些你用不到的对象也一并加载到内存当中。这些用不到的对象会一直占用着内存空间，可能要过很久之后才会得到释放，相较之下，也许多敲几行看似繁琐的代码才是更好的选择。</p>
<h3 id="使用ProGuard简化代码"><a href="#使用ProGuard简化代码" class="headerlink" title="使用ProGuard简化代码"></a>使用ProGuard简化代码</h3><p>ProGuard相信大家都不会陌生，很多人都会使用这个工具来混淆代码，但是除了混淆之外，它还具有压缩和优化代码的功能。ProGuard会对我们的代码进行检索，删除一些无用的代码，并且会对类、字段、方法等进行重命名，重命名之后的类、字段和方法名都会比原来简短很多，这样的话也就对内存的占用变得更少了。</p>
<h3 id="使用多个进程"><a href="#使用多个进程" class="headerlink" title="使用多个进程"></a>使用多个进程</h3><p>这个技巧其实并不是非常建议使用，但它确实是一种可以帮助我们节省和管理内存的高级技巧。如果你要使用它的话一定要谨慎使用，因为绝大多数的应用程序都不应该在多个进程当中运行的，一旦使用不当，它甚至会增加额外的内存而不是帮我们节省内存。这个技巧比较适用于那些需要在后台去完成一项独立的任务，和前台的功能是可以完全区分开的场景。</p>
<p>这里举一个比较适合去使用多进程技巧的场景，比如说我们正在做一个音乐播放器软件，其中播放音乐的功能应该是一个独立的功能，它不需要和UI方面有任何关系，即使软件已经关闭了也应该可以正常播放音乐。如果此时我们只使用一个进程，那么即使用户关闭了软件，已经完全由Service来控制音乐播放了，系统仍然会将许多UI方面的内存进行保留。在这种场景下就非常适合使用两个进程，一个用于UI展示，另一个则用于在后台持续地播放音乐。</p>
<p>想要实现多进程的功能也非常简单，只需要在AndroidManifest文件的应用程序组件中声明一个android:process属性就可以了，比如说我们希望播放音乐的Service可以运行在一个单独的进程当中，就可以这样写：</p>
<pre><code>&lt;service android:name=&quot;.PlaybackService&quot;  
         android:process=&quot;:background&quot; /&gt;
</code></pre><p>这里指定的进程名是background，你也可以将它改成任意你喜欢的名字。需要注意的是，进程名的前面都应该加上一个冒号，表示该进程是一个当前应用程序的私有进程。</p>
<p>遵循以上的所有编程建议，我们就可以让应用程序内存的使用变得更加合理化。但这只是第一步而已，为了要让程序拥有最佳性能，我们要学习的东西还有很多，下篇文章当中将会介绍如何分析内存的使用情况，感兴趣的朋友请继续阅读 Android最佳性能实践(二)——分析内存的使用情况 。</p>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://blog.csdn.net/guolin_blog/article/details/42238627" target="_blank" rel="external">Android最佳性能实践(一)——合理管理内存</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/42238633" target="_blank" rel="external">Android最佳性能实践(二)——分析内存的使用情况</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/42318689" target="_blank" rel="external">Android最佳性能实践(三)——高性能编码优化</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/43376527" target="_blank" rel="external">Android最佳性能实践(四)——布局优化技巧</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20161124140922633&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog&quot;&gt;作者：郭霖&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/42238627&quot;&gt;Android最佳性能实践(一)——合理管理内存&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/42238633&quot;&gt;Android最佳性能实践(二)——分析内存的使用情况&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/42318689&quot;&gt;Android最佳性能实践(三)——高性能编码优化&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/43376527&quot;&gt;Android最佳性能实践(四)——布局优化技巧&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/20416881?columnSlug=zmywly8866&quot;&gt;值得推荐的Android应用性能检测工具列表&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Best Practice" scheme="http://ipcreator.me/tags/Best-Practice/"/>
    
      <category term="Performance" scheme="http://ipcreator.me/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>Smart MusicPlayer</title>
    <link href="http://ipcreator.me/2017/03/24/Program/Android/MyApp/my-favor-music-player/"/>
    <id>http://ipcreator.me/2017/03/24/Program/Android/MyApp/my-favor-music-player/</id>
    <published>2017-03-24T13:48:06.000Z</published>
    <updated>2017-03-27T09:00:16.912Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_1490356818.png" alt=""></p>
<p>做自己喜欢又擅长的，同时解决生活中的实际痛点，简单极致、有用有趣，It’s my life.</p>
 <a id="more"></a>
<h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h2><p>功能要求：一个窗口，一个列表，喜欢的歌曲，支持循环播放/进度拖动/歌词同步显示/动画/异步网络歌曲、图片及歌词下载；<br>应用场景：徒步、登山、坐享时使用。</p>
<h2 id="设计及实现"><a href="#设计及实现" class="headerlink" title="设计及实现"></a>设计及实现</h2><h3 id="1-0版本"><a href="#1-0版本" class="headerlink" title="1.0版本"></a>1.0版本</h3><p><img src="http://om8nmvpn9.bkt.clouddn.com/music.png" alt=""></p>
<h3 id="2-0版本"><a href="#2-0版本" class="headerlink" title="2.0版本"></a>2.0版本</h3><blockquote>
<p>歌名应景：平和、坚持、创新</p>
</blockquote>
<h4 id="smooth"><a href="#smooth" class="headerlink" title="smooth"></a>smooth</h4><p><img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_1490356818.png" alt=""></p>
<h4 id="baby-one-more-time"><a href="#baby-one-more-time" class="headerlink" title="baby one more time"></a>baby one more time</h4><p><img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_1490356849.png" alt=""></p>
<h4 id="i-want-in-that-way"><a href="#i-want-in-that-way" class="headerlink" title="i want in that way"></a>i want in that way</h4><p><img src="http://om8nmvpn9.bkt.clouddn.com/Screenshot_1490356830.png" alt=""></p>
<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>扫描媒体库时，模拟器上文件少未出现异常，但由于真机文件较多，导致主线程阻塞，新增线程执行歌曲扫描。</p>
<h3 id="运行时权限"><a href="#运行时权限" class="headerlink" title="运行时权限"></a>运行时权限</h3><p>采用获取并判断IMEI号是否为空或者全0来判断是否为模拟器环境，需要获取到READ_PHONE_STATE权限，运行时动态申请。</p>
<h3 id="异步下载"><a href="#异步下载" class="headerlink" title="异步下载"></a>异步下载</h3><p>通过服务实现，下载完成后，发广播通知，并通过附加参数传递文件路径。</p>
<h3 id="歌词解析"><a href="#歌词解析" class="headerlink" title="歌词解析"></a>歌词解析</h3><p>歌词文件格式不统一，需要多做兼容性测试，譬如一行有多个时间标签，再如标签中存在异常字符等。<br>另外，解析出来的歌词节点列表，需要基于时间点排序，<br>mediaplayer的进度值单位为毫秒，解析歌词时间时，尽量保持单位一致。</p>
<h3 id="实时更新UI"><a href="#实时更新UI" class="headerlink" title="实时更新UI"></a>实时更新UI</h3><p>方法一：<br>Handle的post方法，在post的Runable的run方法中，使用postDelay方法再次post该Runable对象，在Runable中更新UI，达到实时更新UI的目的<br>方法二：<br>多开一个线程，线程写一个持续循环，每次进入循环内即post一次Runable，然后休眠1000ms，亦可做到实时更新UI</p>
<p>注意：因为用到了多线程，有可能在执行onDestroy方法之后，Runable的run方法还有可能在继续执行，因此要在onDestroy方法释放资源后置空，在run方法中要判空。</p>
<h3 id="歌曲切换"><a href="#歌曲切换" class="headerlink" title="歌曲切换"></a>歌曲切换</h3><p>setDataSource()之前需要调用reSet()方法，才可以重新设置歌曲</p>
<h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><p>歌词文件编码不一致导致，内部需要统一处理</p>
<h3 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h3><p>界面动画不要太多，以免给用户造成眼花缭乱的不好体验</p>
<h3 id="SeekBar"><a href="#SeekBar" class="headerlink" title="SeekBar"></a>SeekBar</h3><p>联动效果，进度/时间/歌词等要同步变动</p>
<h3 id="控制逻辑"><a href="#控制逻辑" class="headerlink" title="控制逻辑"></a>控制逻辑</h3><p>响应点击播放/暂停/停止按钮时，要同步控制动画及各关联控件。</p>
<h3 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h3><p>根据seekbar当前进度来计算提示时间的横坐标偏移量时，((double)curPos/(double)maxPos) * width</p>
<h2 id="mediaplayer状态机"><a href="#mediaplayer状态机" class="headerlink" title="mediaplayer状态机"></a>mediaplayer状态机</h2><h3 id="状态1：Idel-空闲-状态"><a href="#状态1：Idel-空闲-状态" class="headerlink" title="状态1：Idel(空闲)状态"></a>状态1：Idel(空闲)状态</h3><p>当 mediaplayer创建或者执行reset()方法后处于这个状态。</p>
<h3 id="状态2：Initialized-已初始化-状态"><a href="#状态2：Initialized-已初始化-状态" class="headerlink" title="状态2：Initialized(已初始化)状态"></a>状态2：Initialized(已初始化)状态</h3><p>当调用mediaplayer的setDataResource()方法给mediaplayer设置播放的数据源后，mediaplayer会处于该状态。</p>
<h3 id="状态3：Prepared-准备就续-状态"><a href="#状态3：Prepared-准备就续-状态" class="headerlink" title="状态3：Prepared(准备就续)状态"></a>状态3：Prepared(准备就续)状态</h3><p>设置完数据源后，调用mediaplayer的prepare()方法，让mediaplayer准备播放。值得一提的是，这里除了prepare()方法，还有prepareAsnyc()方法，此方法是异步方法，一般用于网络视频的缓冲。当缓冲完毕后，就会触发准备完毕的事件。我们要做的就是监听该事件(OnPreparedListener)，当缓冲完成时，执行相应的操作。在此状态上，我们可以调用seekTo()方法定位视频，此方法不改变mediaplayer的状态；亦可调用stop()放弃视频播放，使mediaplayer处于Stopped状态。一般我们会在此状态上调用start()方法开始播放视频。</p>
<h3 id="状态4：Started-开始-状态"><a href="#状态4：Started-开始-状态" class="headerlink" title="状态4：Started(开始)状态"></a>状态4：Started(开始)状态</h3><p>当处于Prepared状态、Paused状态和PlayebackCompeleted状态时，调用Started()方法即可进入该状态。在该状态中，mediaplayer开始播放视频，可以通过seekTo()方法和start()方法改变视频播放的进度，当Looping为真且播放完毕后，它会重新开始播放（即循环播放）；否则播放完毕后，会触发事件并调用OnCompletionaListener.OnCompletion()方法，进行特定操作，并进入PlaybackCompleted状态。在此状态中，亦可调用pause()方法或者stop()方法让视频暂停或停止，此时mediaplayer分别处于Stopped和Paused状态。</p>
<h3 id="状态5：Stopped-停止-状态"><a href="#状态5：Stopped-停止-状态" class="headerlink" title="状态5：Stopped(停止)状态"></a>状态5：Stopped(停止)状态</h3><p>当 mediaplayer处于Prepared、Started、Paused、PlaybackCompleted状态时，调用stop()方法即可进入本状态。应特别注意的是，在本状态中，若想重新开始播放，不能直接调用start()方法，必须调用prepare()方法或prepareAsync()方法重新让mediaplayer处于Prepared状态方可调用start()方法播放视频。</p>
<h3 id="状态6：Paused-暂停-状态"><a href="#状态6：Paused-暂停-状态" class="headerlink" title="状态6：Paused(暂停)状态"></a>状态6：Paused(暂停)状态</h3><p>当mediaplayer处于Started状态是，调用pause()方法即可进入本状态。在本状态里，可直接调用start()方法使，mediaplayer回到Started状态，亦可调用stop()方法停止视频播放，让播放器处于停止态。</p>
<h3 id="状态7：PlaybackCompleted-播放完成-状态"><a href="#状态7：PlaybackCompleted-播放完成-状态" class="headerlink" title="状态7：PlaybackCompleted(播放完成)状态"></a>状态7：PlaybackCompleted(播放完成)状态</h3><p>当mediaplayer播放完成且Looping为假时即可进入本状态。在本状态可调用start()方法使mediaplayer回到Started状态（注意此时是从头开始播放）；亦可调用stop()方法使mediaplayer处于停止态，结束播放。</p>
<h3 id="状态8：Error-错误-状态"><a href="#状态8：Error-错误-状态" class="headerlink" title="状态8：Error(错误)状态"></a>状态8：Error(错误)状态</h3><p>当mediaplayer出现错误时处于此状态。<br>调用release()方法即可释放此mediaplayer对象。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.runoob.com/w3cnote/android-tutorial-mediaplayer.html" target="_blank" rel="external">MediaPlayer播放音频与视频</a><br><a href="http://blog.csdn.net/huaxun66/article/details/53333747" target="_blank" rel="external">Android MediaPlayer和VideoView的使用</a><br><a href="http://blog.sina.com.cn/s/blog_53ad73d70101c6om.html" target="_blank" rel="external">Android Supported Media Formats（Android支持的媒体格式）</a><br><a href="http://blog.csdn.net/vicken520/article/details/8567640" target="_blank" rel="external">彻底解决android读取中文txt，lrc的乱码（自动判断文档类型并转码)</a><br><a href="http://www.cnblogs.com/wsine/p/5177372.html" target="_blank" rel="external">Android实现简单音乐播放器(MediaPlayer)</a><br><a href="http://blog.csdn.net/wwj_748/article/details/9256251" target="_blank" rel="external">Android应用–简、美音乐播放器原型放送</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://om8nmvpn9.bkt.clouddn.com/Screenshot_1490356818.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;做自己喜欢又擅长的，同时解决生活中的实际痛点，简单极致、有用有趣，It’s my life.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Application" scheme="http://ipcreator.me/tags/Application/"/>
    
      <category term="Music Player" scheme="http://ipcreator.me/tags/Music-Player/"/>
    
  </entry>
  
  <entry>
    <title>Anatomy of Android Property Animation</title>
    <link href="http://ipcreator.me/2017/03/24/Program/Android/animation-of-android/"/>
    <id>http://ipcreator.me/2017/03/24/Program/Android/animation-of-android/</id>
    <published>2017-03-24T00:46:06.000Z</published>
    <updated>2017-03-27T07:49:47.427Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20150504225554203" alt=""><br><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">作者：郭霖</a></p>
<p>Android系统在一开始的时候就给我们提供了两种实现动画效果的方式，逐帧动画(frame-by-frame animation)和补间动画(tweened animation)。逐帧动画的工作原理很简单，其实就是将一个完整的动画拆分成一张张单独的图片，然后再将它们连贯起来进行播放，类似于动画片的工作原理。补间动画则是可以对View进行一系列的动画操作，包括淡入淡出、缩放、平移、旋转四种。</p>
<p>然而自Android 3.0版本开始，系统给我们提供了一种全新的动画模式，属性动画(property animation)，它的功能非常强大，弥补了之前补间动画的一些缺陷，几乎是可以完全替代掉补间动画了。这篇文章的主题就是对Android属性动画进行一次完全解析。</p>
   <a id="more"></a>
<h2 id="为什么要引入属性动画？"><a href="#为什么要引入属性动画？" class="headerlink" title="为什么要引入属性动画？"></a>为什么要引入属性动画？</h2><p>   Android之前的补间动画机制其实还算是比较健全的，在android.view.animation包下面有好多的类可以供我们操作，来完成一系列的动画效果，比如说对View进行移动、缩放、旋转和淡入淡出，并且我们还可以借助AnimationSet来将这些动画效果组合起来使用，除此之外还可以通过配置Interpolator来控制动画的播放速度等等等等。那么这里大家可能要产生疑问了，既然之前的动画机制已经这么健全了，为什么还要引入属性动画呢？</p>
<p>   其实上面所谓的健全都是相对的，如果你的需求中只需要对View进行移动、缩放、旋转和淡入淡出操作，那么补间动画确实已经足够健全了。但是很显然，这些功能是不足以覆盖所有的场景的，一旦我们的需求超出了移动、缩放、旋转和淡入淡出这四种对View的操作，那么补间动画就不能再帮我们忙了，也就是说它在功能和可扩展方面都有相当大的局限性，那么下面我们就来看看补间动画所不能胜任的场景。</p>
<p>   注意上面我在介绍补间动画的时候都有使用“对View进行操作”这样的描述，没错，<strong>补间动画是只能够作用在View上的。</strong> 也就是说，我们可以对一个Button、TextView、甚至是LinearLayout、或者其它任何继承自View的组件进行动画操作，但是如果我们想要对一个非View的对象进行动画操作，抱歉，补间动画就帮不上忙了。可能有的朋友会感到不能理解，我怎么会需要对一个非View的对象进行动画操作呢？这里我举一个简单的例子，比如说我们有一个自定义的View，在这个View当中有一个Point对象用于管理坐标，然后在onDraw()方法当中就是根据这个Point对象的坐标值来进行绘制的。也就是说，如果我们可以对Point对象进行动画操作，那么整个自定义View的动画效果就有了。显然，补间动画是不具备这个功能的，这是它的第一个缺陷。</p>
<p>   然后补间动画还有一个缺陷，就是它只能够实现移动、缩放、旋转和淡入淡出这四种动画操作，那如果我们希望可以对View的背景色进行动态地改变呢？很遗憾，我们只能靠自己去实现了。说白了，之前的补间动画机制就是使用硬编码的方式来完成的，功能限定死就是这些，基本上没有任何扩展性可言。</p>
<p>   最后，<strong>补间动画还有一个致命的缺陷，就是它只是改变了View的显示效果而已，而不会真正去改变View的属性。</strong> 什么意思呢？比如说，现在屏幕的左上角有一个按钮，然后我们通过补间动画将它移动到了屏幕的右下角，现在你可以去尝试点击一下这个按钮，点击事件是绝对不会触发的，因为实际上这个按钮还是停留在屏幕的左上角，只不过补间动画将这个按钮绘制到了屏幕的右下角而已。</p>
<p>   也正是因为这些原因，Android开发团队决定在3.0版本当中引入属性动画这个功能，那么属性动画是不是就把上述的问题全部解决掉了？下面我们就来一起看一看。</p>
<p>   新引入的属性动画机制已经不再是针对于View来设计的了，也不限定于只能实现移动、缩放、旋转和淡入淡出这几种动画操作，同时也不再只是一种视觉上的动画效果了。它实际上是<strong>一种不断地对值进行操作的机制，并将值赋值到指定对象的指定属性上，可以是任意对象的任意属性。</strong> 所以我们仍然可以将一个View进行移动或者缩放，但同时也可以对自定义View中的Point对象进行动画操作了。我们只需要告诉系统动画的运行时长，需要执行哪种类型的动画，以及动画的初始值和结束值，剩下的工作就可以全部交给系统去完成了。</p>
<p>   既然<strong>属性动画的实现机制是通过对目标对象进行赋值并修改其属性来实现的</strong>，那么之前所说的按钮显示的问题也就不复存在了，如果我们通过属性动画来移动一个按钮，那么这个按钮就是真正的移动了，而不再是仅仅在另外一个位置绘制了而已。</p>
<p>   好了，介绍了这么多，相信大家已经对属性动画有了一个最基本的认识了，下面我们就来开始学习一下属性动画的用法。</p>
<h2 id="ValueAnimator"><a href="#ValueAnimator" class="headerlink" title="ValueAnimator"></a>ValueAnimator</h2><p>ValueAnimator是整个属性动画机制当中最核心的一个类，前面我们已经提到了，属性动画的运行机制是通过不断地对值进行操作来实现的，而初始值和结束值之间的动画过渡就是由ValueAnimator这个类来负责计算的。它的内部使用一种时间循环的机制来计算值与值之间的动画过渡，我们只需要将初始值和结束值提供给ValueAnimator，并且告诉它动画所需运行的时长，那么ValueAnimator就会自动帮我们完成从初始值平滑地过渡到结束值这样的效果。除此之外，ValueAnimator还负责管理动画的播放次数、播放模式、以及对动画设置监听器等，确实是一个非常重要的类。</p>
<p>但是ValueAnimator的用法却一点都不复杂，我们先从最简单的功能看起吧，比如说想要将一个值从0平滑过渡到1，时长300毫秒，就可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ValueAnimator anim = ValueAnimator.ofFloat(0f, 1f);  </div><div class="line">anim.setDuration(300);  </div><div class="line">anim.start();</div></pre></td></tr></table></figure>
<p>怎么样？很简单吧，调用ValueAnimator的ofFloat()方法就可以构建出一个ValueAnimator的实例，ofFloat()方法当中允许传入多个float类型的参数，这里传入0和1就表示将值从0平滑过渡到1，然后调用ValueAnimator的setDuration()方法来设置动画运行的时长，最后调用start()方法启动动画。</p>
<p>用法就是这么简单，现在如果你运行一下上面的代码，动画就会执行了。可是这只是一个将值从0过渡到1的动画，又看不到任何界面效果，我们怎样才能知道这个动画是不是已经真正运行了呢？这就需要借助监听器来实现了，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ValueAnimator anim = ValueAnimator.ofFloat(0f, 1f);  </div><div class="line">anim.setDuration(300);  </div><div class="line">anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;  </div><div class="line">    @Override  </div><div class="line">    public void onAnimationUpdate(ValueAnimator animation) &#123;  </div><div class="line">        float currentValue = (float) animation.getAnimatedValue();  </div><div class="line">        Log.d(&quot;TAG&quot;, &quot;cuurent value is &quot; + currentValue);  </div><div class="line">    &#125;  </div><div class="line">&#125;);  </div><div class="line">anim.start();</div></pre></td></tr></table></figure>
<p>可以看到，这里我们通过addUpdateListener()方法来添加一个动画的监听器，在动画执行的过程中会不断地进行回调，我们只需要在回调方法当中将当前的值取出并打印出来，就可以知道动画有没有真正运行了。运行上述代码，控制台打印如下所示：<br><img src="http://img.blog.csdn.net/20150403174704189?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VvbGluX2Jsb2c=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>从打印日志的值我们就可以看出，ValueAnimator确实已经在正常工作了，值在300毫秒的时间内从0平滑过渡到了1，而这个计算工作就是由ValueAnimator帮助我们完成的。另外ofFloat()方法当中是可以传入任意多个参数的，因此我们还可以构建出更加复杂的动画逻辑，比如说将一个值在5秒内从0过渡到5，再过渡到3，再过渡到10，就可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ValueAnimator anim = ValueAnimator.ofFloat(0f, 5f, 3f, 10f);  </div><div class="line">anim.setDuration(5000);  </div><div class="line">anim.start();</div></pre></td></tr></table></figure>
<p>当然也许你并不需要小数位数的动画过渡，可能你只是希望将一个整数值从0平滑地过渡到100，那么也很简单，只需要调用ValueAnimator的ofInt()方法就可以了，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ValueAnimator anim = ValueAnimator.ofInt(0, 100);</div></pre></td></tr></table></figure>
<p>ValueAnimator当中最常用的应该就是ofFloat()和ofInt()这两个方法了，另外还有一个ofObject()方法，我会在下篇文章进行讲解。</p>
<p>那么除此之外，我们还可以调用setStartDelay()方法来设置动画延迟播放的时间，调用setRepeatCount()和setRepeatMode()方法来设置动画循环播放的次数以及循环播放的模式，循环模式包括RESTART和REVERSE两种，分别表示重新播放和倒序播放的意思。这些方法都很简单，我就不再进行详细讲解了。</p>
<h2 id="ObjectAnimator"><a href="#ObjectAnimator" class="headerlink" title="ObjectAnimator"></a>ObjectAnimator</h2><p>相比于ValueAnimator，ObjectAnimator可能才是我们最常接触到的类，因为ValueAnimator只不过是对值进行了一个平滑的动画过渡，但我们实际使用到这种功能的场景好像并不多。而ObjectAnimator则就不同了，它是可以直接对任意对象的任意属性进行动画操作的，比如说View的alpha属性。</p>
<p>不过虽说ObjectAnimator会更加常用一些，但是它其实是继承自ValueAnimator的，底层的动画实现机制也是基于ValueAnimator来完成的，因此ValueAnimator仍然是整个属性动画当中最核心的一个类。那么既然是继承关系，说明ValueAnimator中可以使用的方法在ObjectAnimator中也是可以正常使用的，它们的用法也非常类似，这里如果我们想要将一个TextView在5秒中内从常规变换成全透明，再从全透明变换成常规，就可以这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator animator = ObjectAnimator.ofFloat(textview, &quot;alpha&quot;, 1f, 0f, 1f);  </div><div class="line">animator.setDuration(5000);  </div><div class="line">animator.start();</div></pre></td></tr></table></figure></p>
<p>可以看到，我们还是调用了ofFloat()方法来去创建一个ObjectAnimator的实例，只不过ofFloat()方法当中接收的参数有点变化了。这里第一个参数要求传入一个object对象，我们想要对哪个对象进行动画操作就传入什么，这里我传入了一个textview。第二个参数是想要对该对象的哪个属性进行动画操作，由于我们想要改变TextView的不透明度，因此这里传入”alpha”。后面的参数就是不固定长度了，想要完成什么样的动画就传入什么值，这里传入的值就表示将TextView从常规变换成全透明，再从全透明变换成常规。之后调用setDuration()方法来设置动画的时长，然后调用start()方法启动动画，效果如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20150406161443130" alt=""></p>
<p>学会了这一个用法之后，其它的用法我们就可以举一反三了，那比如说我们想要将TextView进行一次360度的旋转，就可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator animator = ObjectAnimator.ofFloat(textview, &quot;rotation&quot;, 0f, 360f);  </div><div class="line">animator.setDuration(5000);  </div><div class="line">animator.start();</div></pre></td></tr></table></figure>
<p>可以看到，这里我们将第二个参数改成了”rotation”，然后将动画的初始值和结束值分别设置成0和360，现在运行一下代码，效果如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20150406161421215" alt=""></p>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://blog.csdn.net/guolin_blog/article/details/43536355" target="_blank" rel="external">Android属性动画完全解析(上)，初识属性动画的基本用法</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/43816093" target="_blank" rel="external"> Android属性动画完全解析(中)，ValueAnimator和ObjectAnimator的高级用法</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/44171115" target="_blank" rel="external"> Android属性动画完全解析(下)，Interpolator和ViewPropertyAnimator的用法</a>   </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150504225554203&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog&quot;&gt;作者：郭霖&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android系统在一开始的时候就给我们提供了两种实现动画效果的方式，逐帧动画(frame-by-frame animation)和补间动画(tweened animation)。逐帧动画的工作原理很简单，其实就是将一个完整的动画拆分成一张张单独的图片，然后再将它们连贯起来进行播放，类似于动画片的工作原理。补间动画则是可以对View进行一系列的动画操作，包括淡入淡出、缩放、平移、旋转四种。&lt;/p&gt;
&lt;p&gt;然而自Android 3.0版本开始，系统给我们提供了一种全新的动画模式，属性动画(property animation)，它的功能非常强大，弥补了之前补间动画的一些缺陷，几乎是可以完全替代掉补间动画了。这篇文章的主题就是对Android属性动画进行一次完全解析。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ipcreator.me/categories/Android/"/>
    
    
      <category term="Animation" scheme="http://ipcreator.me/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>Choices of AI Chips</title>
    <link href="http://ipcreator.me/2017/03/23/AI/TensorFlow/ai-chips/"/>
    <id>http://ipcreator.me/2017/03/23/AI/TensorFlow/ai-chips/</id>
    <published>2017-03-23T14:16:06.000Z</published>
    <updated>2017-03-27T10:18:11.069Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://pic4.zhimg.com/v2-ec3385bfcbfabb2bb7d97366e13f6b7f_b.jpg" alt=""></p>
<p>OneSpin Solutions总裁兼首席执行官Raik Brinkmann说， “在人工智能芯片中，你有三个问题需要解决。首先，你需要处理大量的数据。其次，构建用于并行处理的互连。第三是功率，这是你移动数据量的直接结果。所以你亟须从冯诺依曼架构转变到数据流架构。但它究竟是什么样子？”</p>
 <a id="more"></a>
<p> <a href="https://zhuanlan.zhihu.com/p/25728988" target="_blank" rel="external">来源：原文作者Ed Sperling，由半导体行业观察翻译，谢谢。</a></p>
<p>编者按：随着AI市场的升温，我们对于如何构建AI系统也存在困惑。从目前情况看，AI不是一件单一的事，因此没有单一的系统在任何地方都能完美地工作。但AI系统有一些通用要求，如何因应这些需求寻找一个解决方案就成为行业关注的热点。</p>
<p>根据行业的参考标准，AI将是下一件大事，或将在下一件大事中发挥重要作用。这也就解释了过去18个月里人工智能领域活动的疯狂。大公司支付数十亿美元收购创业公司，甚至投入更多的资金用于研发。此外，各国政府正在向大学和研究机构投入数十亿美元。全球竞赛正在进行，目的是创建的最佳的架构和系统来处理AI工作所必需的海量数据。</p>
<p>市场预测也相应上升。 根据Tractica研究所的数据，到2025年，AI年收入预计将达到368亿美元。Tractica表示，迄今为止已经确定了AI的<strong>27种不同的细分行业以及191个使用案例。</strong></p>
<p><img src="http://pic1.zhimg.com/v2-e251f8fa16d4f48d6f25d5441a051b54_b.jpg" alt=""><br>图1 AI收入增长预测。 来源：Tractica</p>
<p>但随着我们深入挖掘，很快就可以明显地看到，并不存在一个的最好的方式来解决AI问题。甚至对于AI是什么，或需要分析的数据类型，我们尚没有一致的定义。</p>
<p>OneSpin Solutions总裁兼首席执行官Raik Brinkmann说， “在人工智能芯片中，你有三个问题需要解决。首先，你需要处理大量的数据。其次，构建用于并行处理的互连。第三是功率，这是你移动数据量的直接结果。所以你亟须从冯诺依曼架构转变到数据流架构。但它究竟是什么样子？”</p>
<p>目前的答案很少，这就是为什么AI市场的第一颗芯片包括现成的CPU，GPU，FPGA和DSP的各种组合。虽然新设计正在由诸如英特尔、谷歌、英伟达、高通，以及IBM等公司开发，但目前还不清楚哪家的方法会胜出。似乎至少需要一个CPU来控制这些系统，但是当流数据并行化时，就会需要各种类型的协处理器。</p>
<p>AI的许多数据处理涉及矩阵乘法和加法。大量并行工作的GPU提供了一种廉价的方法，但缺点是更高的功率。具有内置DSP模块和本地存储器的FPGA更节能，但它们通常更昂贵。这也是软件和硬件真正需要共同开发的领域，但许多软件远远落后于硬件。</p>
<p>Mentor Graphics董事长兼首席执行官Wally Rhines表示：“目前，研究和教育机构有大量的活动。有一场新的处理器开发竞赛。也有标准的GPU用于深度学习，同时还有很多人在从事CPU的工作。目标是使神经网络的行为更像人脑，这将刺激一次全新的设计浪潮。”</p>
<p>当视觉处理开始涉及到AI时，便受到了极大的关注，主要是因为特斯拉在预计推出自动驾驶汽车的15年前就已经提出了自动驾驶概念。这为视觉处理技术，以及为处理由图像传感器、雷达和激光雷达收集的数据所需的芯片和整体系统架构开辟了巨大的市场。但许多经济学家和咨询公司正寻求超越这个市场，探讨AI将如何影响整体生产力。Accenture最近的报道预测，AI将使一些国家的GDP翻番（见下图2）。虽然这将导致就业机会大幅减少，但整体收入的提高不容忽视。</p>
<p><img src="http://pic3.zhimg.com/v2-c7291519f23b431a8a08feaa6ef2dd92_b.jpg" alt=""><br>Fig. 2: AI’s projected impact.图2：AI的预期影响</p>
<p>Synopsys董事长兼联合首席执行官Aart de Geus指出了电子学的三个浪潮——计算和网络、移动、数字智能。在后一种类型中，焦点从技术本身转移到它可以为人们做什么。</p>
<p>“You’ll see processors with neural networking IP for facial recognition and vision processing in automobiles,” said de Geus. “Machine learning is the other side of this. There is a massive push for more capabilities, and the state of the art is doing this faster. This will drive development to 7nm and 5nm and beyond.”</p>
<p>de Geus说：“你将看到具有面部识别和汽车视觉处理的神经网络IP。机器学习是其另一面。它对于更多的能力会产生一种巨大的推动，目前的技术水平可以快速完成这些。这将推动芯片发展到7nm、5nm，甚至更高的水平。”</p>
<h2 id="目前的方法"><a href="#目前的方法" class="headerlink" title="目前的方法"></a>目前的方法</h2><p>自动驾驶中的视觉处理在AI当前研究中占主导地位，但该技术在无人机和机器人中的作用也越来越大。</p>
<p>Achronix公司总裁兼首席执行官Robert Blake说：“对于图像处理的AI应用，计算复杂度很高。对于无线技术，数学很好理解。对于图像处理，数学就像西部拓荒，工作负载复杂多变。大概花费5~10年时间才能解决市场问题，但是它对于可编程逻辑肯定会有很大的作用，因为我们需要能够以高度并行的方式完成的变精度数学。”</p>
<p>FPGA非常适合矩阵乘法。最重要的是，它的可编程性增加了一些必要的灵活性和面向未来的设计，因为在这一点上，不清楚所谓的智能将存在于一个设计的哪部分。用于做决策的数据一些将在本地处理，一些将在数据中心中处理。但在每个实现中，其百分比可能会改变。</p>
<p>这对AI芯片和软件设计有很大的影响。虽然AI的大局并没有太大的变化（大部分所谓的AI更接近于机器学习，而非真正的AI），但是对于如何构建这些系统的理解却发生了重大的变化。</p>
<p>Arteris营销副总裁Kurt Shuler说：“对于自动驾驶汽车，人们正在做的就是把现有的东西放在一起。为了使一个真正高效的嵌入式系统能够学习，它需要一个高效的硬件系统。我们采用了几种不同的方法。如果你关注视觉处理，你要做的是试图弄清楚器件看到的是什么，以及你如何推断。这包括来自视觉传感器、激光雷达和雷达的数据，然后应用专门的算法。这里的很多事情都是试图模仿大脑中的事情，方法是利用深度卷积神经网络。”</p>
<p>它与真正的AI的不同之处是，现有技术水平能够检测和避开物体，而真正的AI能够拥有推理能力，例如如何通过一群人正在横穿的街道，或判断玩皮球的小孩子是否会跑到街道上。对于前者，判断是基于各种传感器的输入，而传感器的输入是基于海量数据处理和预编程的行为。对于后者，机器能够作出价值判断，例如判断转弯避开孩子可能会造成的很多结果，并做出最佳选择。</p>
<p>Shuler说：“传感器融合是20世纪90年代出现的一种理念。你要把它变成机器可以处理的通用的数据格式。如果你在军队里，你担心有人向你开枪。对于自动驾驶汽车而言，这就像面前有人推婴儿车。所有这些系统都需要非常高的带宽，并且都必须在其中内置安全措施。最重要的是，你必须保护数据，因为安全正在成为越来越大的问题。因此，你需要的是计算效率和编程效率。”</p>
<p>这是今天的许多设计中所缺少的，因为太多的开发是由现成的零件搭建的。</p>
<p>Cadence高级架构师以及深度学习小组总监Samer Hijazi说：“如果你优化网络、优化问题、最小化位数，并使用为卷积神经网络定制的硬件，那么你可以实现功率降低2~3倍的改进。效率来自软件算法和硬件IP。”</p>
<p>谷歌正尝试改变这个公式。谷歌开发了Tensor处理单元（TPU），这是专门为机器学习而创建的ASIC。为了加快AI的发展，谷歌在2015年开源了TensorFlow软件。</p>
<p><img src="http://pic3.zhimg.com/v2-7f58696a7e6465999db6e745c45ecb06_b.jpg" alt=""><br>图3：谷歌TPU开发板 来源：谷歌</p>
<p>其他公司拥有自己的平台。但这些都不是最终产品。这是进化的过程，没有人能确定未来十年AI将如何发展。部分是因为AI技术的使用案例正在逐渐被发现。在某个领域里有效的AI技术（如视觉处理）不一定适用于另一个领域（例如确定某种气味是危险的还是安全的，抑或是二者的组合）。</p>
<p>NetSpeed Systems营销和业务开发副总裁Anush Mohandass说：“我们在黑暗中摸索，我们知道如何做机器学习和人工智能，但却不知道它们真正的工作方式。目前的方法是使用大量拥有不同计算能力和不同种类的计算引擎——用于神经网络应用的CPU、DSP，你需要确定它是有效的。但这只是第一代AI。重点是计算能力和异构性。”</p>
<p>然而，随着问题的解决变得更有针对性，这有望改变。就像早期版本的物联网器件一样，没有人知道各类市场如何演变，因此系统公司投入了一切，并使用现有的芯片技术将产品推向市场。在智能手表的案例中，结果是电池充电后只能续航几个小时。随着针对这些特定应用的新芯片的开发，功耗和性能会实现平衡，方法是更有针对性的功能、本地处理与云处理之间更智能的分布、以及对于设计中的瓶颈的更深入的理解这三者的结合。</p>
<p>ARM模型技术总监Bill Neifert说：“我们的挑战是找到未知的瓶颈和限制。但根据于工作负载，处理器与软件的交互方式不同，软件本质上是并行应用程序。因此，如果你正在考虑工作负载，如金融建模或天气图，它们强调基础系统的方式是不同的。你只能通过深入探索来理解。”</p>
<p>Neifert指出，软件方面需要解决的问题需要从更高层次的抽象来看，因为这使得它们更容易约束和修复。这是拼图的一个关键部分。随着AI进军更多市场，所有这些技术都需要发展，以达到一般技术行业，特别是半导体行业的同等效率。</p>
<p>Mohandass说：“现在我们发现，如果他们只处理好一种类型的计算，那么架构就会很困难。但异构性的缺点是，将整体分而治之的方法变得土崩瓦解。因此，该解决方案通常涉及到超量供应或供应不足。”</p>
<h2 id="新方法"><a href="#新方法" class="headerlink" title="新方法"></a>新方法</h2><p>随着AI的应用案例超越了自动驾驶汽车领域，其应用将会扩展。</p>
<p>这就是为什么英特尔去年八月收购了Nervana。Nervana开发了2.5D深度学习芯片，该芯片利用高性能处理器内核，将数据通过中介层移动到高带宽内存。 Nervana声称的目标是，与基于GPU的解决方案相比，该芯片训练深度学习模型的时间将缩短100倍。</p>
<p><img src="http://pic4.zhimg.com/v2-8d75d3ad6c3915ef0d7b6caee3f18fc3_b.jpg" alt=""><br>图4：Nervana的AI芯片 来源：Nervana</p>
<p>eSilicon营销副总裁Mike Gianfagna说：“这些看起来很像高性能计算芯片，本质上是使用硅中介层的2.5D芯片。你将需要大量的吞吐量和超高带宽内存。我们已经看到一些公司在关注它，但尚不足几十家。它还为时尚早，实现机器学习和自适应算法，以及如何将这些与传感器和信息流整合，是非常复杂的。例如自动驾驶汽车，它从多个不同的来源串流数据并添加自适应算法，以避免碰撞。”</p>
<p>Gianfagna表示，实现这些器件有两个挑战。其一是可靠性和认证。其二是安全。</p>
<p>对于AI，可靠性需要在系统级考虑，其中包括硬件和软件。ARM在12月收购Allinea提供了一个参照。另一个参照来自斯坦福大学，研究人员试图量化来自软件的裁剪计算的影响。他们发现，大规模切割或修剪不会对最终产品产生显着影响。加州大学伯克利分校已经开发了一个类似的方法，基于的计算接近100%的准确率。</p>
<p>正在研究节能深度学习的斯坦福大学博士研究生韩松说“与精粒修剪相比，粗粒修剪不会降低精度。”他表示，斯坦福开发的稀疏矩阵要求计算减少10倍，内存占用减少8倍，比DRAM的能耗减少120倍。它应用于斯坦福所谓的高效语音识别引擎，压缩导致了推理过程的加快。（Cadence最近的嵌入式神经网络峰会上提出了这些发现。）</p>
<p>量子计算为AI系统增加了另一个选择。 Leti首席执行官Marie Semeria表示，量子计算是她的团队未来的方向之一，特别是AI应用。IBM Research的科学与解决方案团队副总裁Dario Gil解释说，使用经典计算，如果四张卡片三蓝一红，那么有四分之一的机会猜中那张红色的卡片。使用量子计算机和量子比特的叠加和纠缠，通过扭转纠缠，系统每次都会给出正确答案。</p>
<p><img src="http://pic2.zhimg.com/v2-538919a988822fceb991654f5833a00d_b.jpg" alt=""><br>图5：量子处理器 来源：IBM</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>AI不是一件事，因此没有单一的系统在任何地方都能完美地工作。但AI系统有一些通用要求，如下图所示。</p>
<p><img src="http://pic4.zhimg.com/v2-ec3385bfcbfabb2bb7d97366e13f6b7f_b.jpg" alt=""><br>图6：AI的基础 来源：OneSpin</p>
<p>AI在许多市场都有应用，所有这些都需要广泛的改进、昂贵的工具，以及支持它们的生态系统。经过多年来依靠萎缩器件来提高功率、性能和成本，如今整个市场部门都在重新思考如何进入新市场。这对于架构师来说是一个巨大的胜利，这为设计团队增加了巨大的创造性选择，也将刺激从工具和IP供应商一直到包装和流程开发的巨大发展。这就像为技术行业按下了重启按钮，可以证明，这对于未来整个生态系统的业务都是有益的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://pic4.zhimg.com/v2-ec3385bfcbfabb2bb7d97366e13f6b7f_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;OneSpin Solutions总裁兼首席执行官Raik Brinkmann说， “在人工智能芯片中，你有三个问题需要解决。首先，你需要处理大量的数据。其次，构建用于并行处理的互连。第三是功率，这是你移动数据量的直接结果。所以你亟须从冯诺依曼架构转变到数据流架构。但它究竟是什么样子？”&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://ipcreator.me/categories/AI/"/>
    
    
      <category term="Chip" scheme="http://ipcreator.me/tags/Chip/"/>
    
  </entry>
  
  <entry>
    <title>How to Design and Make IC Chips</title>
    <link href="http://ipcreator.me/2017/03/23/Program/Tools/Computer/ic-chip/"/>
    <id>http://ipcreator.me/2017/03/23/Program/Tools/Computer/ic-chip/</id>
    <published>2017-03-23T13:18:06.000Z</published>
    <updated>2017-03-27T09:50:04.697Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/21358006" target="_blank" rel="external">原文</a></p>
<p><img src="https://pic1.zhimg.com/27ba49ff657a9422bd9e591051032a38_r.png" alt=""></p>
<p>芯片制造的过程就如同用乐高盖房子一样，先有晶圆作为地基，再层层往上叠，然而，没有设计图，拥有再强制造能力都没有用，因此，建筑师的角色相当重要。</p>
 <a id="more"></a>
<h2 id="复杂繁琐的芯片设计流程"><a href="#复杂繁琐的芯片设计流程" class="headerlink" title="复杂繁琐的芯片设计流程"></a>复杂繁琐的芯片设计流程</h2><p> 芯片制造的过程就如同用乐高盖房子一样，先有晶圆作为地基，再层层往上叠的芯片制造流程后，就可产出必要的 IC 芯片（这些会在后面介绍）。然而，没有设计图，拥有再强制造能力都没有用，因此，建筑师的角色相当重要。但是 IC 设计中的建筑师究竟是谁呢？本文接下来要针对 IC 设计做介绍。</p>
<p>　　在 IC 生产流程中，IC 多由专业 IC 设计公司进行规划、设计，像是联发科、高通、Intel 等知名大厂，都自行设计各自的 IC 芯片，提供不同规格、效能的芯片给下游厂商选择。因为 IC 是由各厂自行设计，所以 IC 设计十分仰赖工程师的技术，工程师的素质影响着一间企业的价值。然而，工程师们在设计一颗 IC 芯片时，究竟有那些步骤？设计流程可以简单分成如下。</p>
<p><img src="https://pic1.zhimg.com/27ba49ff657a9422bd9e591051032a38_b.png" alt=""></p>
<h3 id="设计第一步，订定目标"><a href="#设计第一步，订定目标" class="headerlink" title="设计第一步，订定目标"></a>设计第一步，订定目标</h3><p>　　在 IC 设计中，最重要的步骤就是规格制定。这个步骤就像是在设计建筑前，先决定要几间房间、浴室，有什么建筑法规需要遵守，在确定好所有的功能之后在进行设计，这样才不用再花额外的时间进行后续修改。IC 设计也需要经过类似的步骤，才能确保设计出来的芯片不会有任何差错。</p>
<p>　　规格制定的第一步便是确定 IC 的目的、效能为何，对大方向做设定。接着是察看有哪些协定要符合，像无线网卡的芯片就需要符合 IEEE 802.11 等规範，不然，这芯片将无法和市面上的产品相容，使它无法和其他设备连线。最后则是确立这颗 IC 的实作方法，将不同功能分配成不同的单元，并确立不同单元间连结的方法，如此便完成规格的制定。</p>
<p>　　设计完规格后，接着就是设计芯片的细节了。这个步骤就像初步记下建筑的规画，将整体轮廓描绘出来，方便后续制图。在 IC 芯片中，便是使用硬体描述语言（HDL）将电路描写出来。常使用的 HDL 有 Verilog、VHDL 等，藉由程式码便可轻易地将一颗 IC 地功能表达出来。接着就是检查程式功能的正确性并持续修改，直到它满足期望的功能为止。</p>
<p><img src="https://pic4.zhimg.com/a01ea918e628674f3e103afe75ec2ed7_b.png" alt=""><br>▲ 32 bits 加法器的 Verilog 范例。</p>
<h3 id="有了电脑，事情都变得容易"><a href="#有了电脑，事情都变得容易" class="headerlink" title="有了电脑，事情都变得容易"></a>有了电脑，事情都变得容易</h3><p>　　有了完整规画后，接下来便是画出平面的设计蓝图。在 IC 设计中，逻辑合成这个步骤便是将确定无误的 HDL code，放入电子设计自动化工具（EDA tool），让电脑将 HDL code 转换成逻辑电路，产生如下的电路图。之后，反覆的确定此逻辑闸设计图是否符合规格并修改，直到功能正确为止。</p>
<p><img src="https://pic3.zhimg.com/e5cabcc8032e4c2298b12ece7abb4fae_b.png" alt=""><br>▲ 控制单元合成后的结果。</p>
<p>最后，将合成完的程式码再放入另一套 EDA tool，进行电路布局与绕线（Place And Route）。在经过不断的检测后，便会形成如下的电路图。图中可以看到蓝、红、绿、黄等不同颜色，每种不同的颜色就代表着一张光罩。至于光罩究竟要如何运用呢？</p>
<p><img src="https://pic2.zhimg.com/b5c5fe2189411e61f1b57859a1ac1e65_b.png" alt=""><br>▲ 常用的演算芯片- FFT 芯片，完成电路布局与绕线的结果。</p>
<h3 id="层层光罩，叠起一颗芯片"><a href="#层层光罩，叠起一颗芯片" class="headerlink" title="层层光罩，叠起一颗芯片"></a>层层光罩，叠起一颗芯片</h3><p>　　首先，目前已经知道一颗 IC 会产生多张的光罩，这些光罩有上下层的分别，每层有各自的任务。下图为简单的光罩例子，以积体电路中最基本的元件 CMOS 为範例，CMOS 全名为互补式金属氧化物半导体（Complementary metal–oxide–semiconductor），也就是将 NMOS 和 PMOS 两者做结合，形成 CMOS。至于什么是金属氧化物半导体（MOS）？这种在芯片中广泛使用的元件比较难说明，一般读者也较难弄清，在这裡就不多加细究。</p>
<p>　　下图中，左边就是经过电路布局与绕线后形成的电路图，在前面已经知道每种颜色便代表一张光罩。右边则是将每张光罩摊开的样子。制作是，便由底层开始，依循上一篇 IC 芯片的制造中所提的方法，逐层制作，最后便会产生期望的芯片了。<br><img src="https://pic1.zhimg.com/963c07992a294b306e7715a9b1f33c7c_b.png" alt=""></p>
<p>至此，对于 IC 设计应该有初步的了解，整体看来就很清楚 IC 设计是一门非常复杂的专业，也多亏了电脑辅助软体的成熟，让 IC 设计得以加速。IC 设计厂十分依赖工程师的智慧，这裡所述的每个步骤都有其专门的知识，皆可独立成多门专业的课程，像是撰写硬体描述语言就不单纯的只需要熟悉程式语言，还需要了解逻辑电路是如何运作、如何将所需的演算法转换成程式、合成软体是如何将程式转换成逻辑闸等问题。</p>
<p>其中主要半导体设计公司有英特尔、高通、博通、英伟达、美满、赛灵思、Altera、联发科、海思、展讯、中兴微电子、华大、大唐、智芯、敦泰、士兰、中星、格科等。</p>
<h2 id="什么是晶圆？"><a href="#什么是晶圆？" class="headerlink" title="什么是晶圆？"></a>什么是晶圆？</h2><p>在半导体的新闻中，总是会提到以尺寸标示的晶圆厂，如 8 寸或是 12 寸晶圆厂，然而，所谓的晶圆到底是什么东西？其中 8 寸指的是什么部分？要产出大尺寸的晶圆制造又有什么难度呢？以下将逐步介绍半导体最重要的基础——「晶圆」到底是什么。</p>
<p>　晶圆（wafer），是制造各式电脑芯片的基础。我们可以将芯片制造比拟成用乐高积木盖房子，藉由一层又一层的堆叠，完成自己期望的造型（也就是各式芯片）。然而，如果没有良好的地基，盖出来的房子就会歪来歪去，不合自己所意，为了做出完美的房子，便需要一个平稳的基板。对芯片制造来说，这个基板就是接下来将描述的晶圆。</p>
<p><img src="https://pic3.zhimg.com/bd417f2883d69e7d776cf3dbc58fe3aa_b.png" alt=""><br>（Souse：Flickr/Jonathan Stewart CC BY 2.0）</p>
<p>首先，先回想一下小时候在玩乐高积木时，积木的表面都会有一个一个小小圆型的凸出物，藉由这个构造，我们可将两块积木稳固的叠在一起，且不需使用胶水。芯片制造，也是以类似这样的方式，将后续添加的原子和基板固定在一起。因此，我们需要寻找表面整齐的基板，以满足后续制造所需的条件。</p>
<p>在固体材料中，有一种特殊的晶体结构──单晶（Monocrystalline）。它具有原子一个接着一个紧密排列在一起的特性，可以形成一个平整的原子表层。因此，采用单晶做成晶圆，便可以满足以上的需求。然而，该如何产生这样的材料呢，主要有二个步骤，分别为纯化以及拉晶，之后便能完成这样的材料。</p>
<h3 id="如何制造单晶的晶圆"><a href="#如何制造单晶的晶圆" class="headerlink" title="如何制造单晶的晶圆"></a>如何制造单晶的晶圆</h3><p>　　纯化分成两个阶段，第一步是冶金级纯化，此一过程主要是加入碳，以氧化还原的方式，将氧化硅转换成 98% 以上纯度的硅。大部份的金属提炼，像是铁或铜等金属，皆是采用这样的方式获得足够纯度的金属。但是，98% 对于芯片制造来说依旧不够，仍需要进一步提升。因此，将再进一步采用西门子制程（Siemens process）作纯化，如此，将获得半导体制程所需的高纯度多晶硅。</p>
<p><img src="https://pic1.zhimg.com/8cf7088140710b82b8674dc0f76fd47c_b.png" alt=""><br>▲ 硅柱制造流程（Source： Wikipedia）</p>
<p>接着，就是拉晶的步骤。首先，将前面所获得的高纯度多晶硅融化，形成液态的硅。之后，以单晶的硅种（seed）和液体表面接触，一边旋转一边缓慢的向上拉起。至于为何需要单晶的硅种，是因为硅原子排列就和人排队一样，会需要排头让后来的人该如何正确的排列，硅种便是重要的排头，让后来的原子知道该如何排队。最后，待离开液面的硅原子凝固后，排列整齐的单晶硅柱便完成了。</p>
<p><img src="https://pic1.zhimg.com/66788186923f1b6cc3adb60846e8fba8_b.png" alt=""><br>▲ 单晶硅柱（Souse：Wikipedia）</p>
<p>然而，8寸、12寸又代表什么东西呢？他指的是我们产生的晶柱，长得像铅笔笔桿的部分，表面经过处理并切成薄圆片后的直径。至于制造大尺寸晶圆又有什么难度呢？如前面所说，晶柱的制作过程就像是在做棉花糖一样，一边旋转一边成型。有制作过棉花糖的话，应该都知道要做出大而且扎实的棉花糖是相当困难的，而拉晶的过程也是一样，旋转拉起的速度以及温度的控制都会影响到晶柱的品质。也因此，尺寸愈大时，拉晶对速度与温度的要求就更高，因此要做出高品质 12 寸晶圆的难度就比 8 寸晶圆还来得高。</p>
<p>　　只是，一整条的硅柱并无法做成芯片制造的基板，为了产生一片一片的硅晶圆，接着需要以钻石刀将硅晶柱横向切成圆片，圆片再经由抛光便可形成芯片制造所需的硅晶圆。经过这么多步骤，芯片基板的制造便大功告成，下一步便是堆叠房子的步骤，也就是芯片制造。至于该如何制作芯片呢？</p>
<h2 id="层层堆叠打造的芯片"><a href="#层层堆叠打造的芯片" class="headerlink" title="层层堆叠打造的芯片"></a>层层堆叠打造的芯片</h2><p>在介绍过硅晶圆是什么东西后，同时，也知道制造 IC 芯片就像是用乐高积木盖房子一样，藉由一层又一层的堆叠，创造自己所期望的造型。然而，盖房子有相当多的步骤，IC 制造也是一样，制造 IC 究竟有哪些步骤？本文将将就 IC 芯片制造的流程做介绍。</p>
<p>　　在开始前，我们要先认识 IC 芯片是什么。IC，全名积体电路（Integrated Circuit），由它的命名可知它是将设计好的电路，以堆叠的方式组合起来。藉由这个方法，我们可以减少连接电路时所需耗费的面积。下图为 IC 电路的 3D 图，从图中可以看出它的结构就像房子的樑和柱，一层一层堆叠，这也就是为何会将 IC 制造比拟成盖房子。</p>
<p><img src="https://pic1.zhimg.com/acfe24afe2fe1dd8053a6dbae27c2554_b.png" alt=""><br>▲ IC 芯片的 3D 剖面图。（Source：Wikipedia）</p>
<p>从上图中 IC 芯片的 3D 剖面图来看，底部深蓝色的部分就是上一篇介绍的晶圆，从这张图可以更明确的知道，晶圆基板在芯片中扮演的角色是何等重要。至于红色以及土黄色的部分，则是于 IC 制作时要完成的地方。</p>
<p>首先，在这裡可以将红色的部分比拟成高楼中的一楼大厅。一楼大厅，是一栋房子的门户，出入都由这裡，在掌握交通下通常会有较多的机能性。因此，和其他楼层相比，在兴建时会比较复杂，需要较多的步骤。在 IC 电路中，这个大厅就是逻辑闸层，它是整颗 IC 中最重要的部分，藉由将多种逻辑闸组合在一起，完成功能齐全的 IC 芯片。</p>
<p>黄色的部分，则像是一般的楼层。和一楼相比，不会有太复杂的构造，而且每层楼在兴建时也不会有太多变化。这一层的目的，是将红色部分的逻辑闸相连在一起。之所以需要这么多层，是因为有太多线路要连结在一起，在单层无法容纳所有的线路下，就要多叠几层来达成这个目标了。在这之中，不同层的线路会上下相连以满足接线的需求。</p>
<h2 id="分层施工，逐层架构"><a href="#分层施工，逐层架构" class="headerlink" title="分层施工，逐层架构"></a>分层施工，逐层架构</h2><p>知道 IC 的构造后，接下来要介绍该如何制作。试想一下，如果要以油漆喷罐做精细作图时，我们需先割出图形的遮盖板，盖在纸上。接着再将油漆均匀地喷在纸上，待油漆乾后，再将遮板拿开。不断的重复这个步骤后，便可完成整齐且复杂的图形。制造 IC 就是以类似的方式，藉由遮盖的方式一层一层的堆叠起来。</p>
<p><img src="https://pic1.zhimg.com/615e6e2a676756a3c997d907ec999d28_b.png" alt=""></p>
<p>制作 IC 时，可以简单分成以上 4 种步骤。虽然实际制造时，制造的步骤会有差异，使用的材料也有所不同，但是大体上皆采用类似的原理。这个流程和油漆作画有些许不同，IC 制造是先涂料再加做遮盖，油漆作画则是先遮盖再作画。以下将介绍各流程。</p>
<p>　　金属溅镀：将欲使用的金属材料均匀洒在晶圆片上，形成一薄膜。</p>
<p>涂布光阻：先将光阻材料放在晶圆片上，透过光罩（光罩原理留待下次说明），将光束打在不要的部分上，破坏光阻材料结构。接着，再以化学药剂将被破坏的材料洗去。</p>
<p>蚀刻技术：将没有受光阻保护的硅晶圆，以离子束蚀刻。</p>
<p>光阻去除：使用去光阻液皆剩下的光阻溶解掉，如此便完成一次流程。</p>
<p>　　最后便会在一整片晶圆上完成很多 IC 芯片，接下来只要将完成的方形 IC 芯片剪下，便可送到封装厂做封装，至于封装厂是什么东西？就要待之后再做说明啰。</p>
<p><img src="https://pic4.zhimg.com/07e51099abd218a8cbad352c8df49ef3_b.png" alt=""><br>▲ 各种尺寸晶圆的比较。（Source：Wikipedia）</p>
<p>其中，主要晶圆代工厂有格罗方德、三星电子、Tower Jazz、Dongbu、美格纳、IBM、富士通、英特尔、海力士、台积电、联电、中芯国际、力晶、华虹、德茂、武汉新芯、华微、华立、力芯</p>
<h2 id="纳米制程是什么？"><a href="#纳米制程是什么？" class="headerlink" title="纳米制程是什么？"></a>纳米制程是什么？</h2><p>三星以及台积电在先进半导体制程打得相当火热，彼此都想要在晶圆代工中抢得先机以争取订单，几乎成了 14 纳米与 16 纳米之争，然而 14 纳米与 16 纳米这两个数字的究竟意义为何，指的又是哪个部位？而在缩小制程后又将来带来什么好处与难题？以下我们将就纳米制程做简单的说明。</p>
<p>纳米到底有多细微？</p>
<p>　在开始之前，要先了解纳米究竟是什么意思。在数学上，纳米是 0.000000001 公尺，但这是个相当差的例子，毕竟我们只看得到小数点后有很多个零，却没有实际的感觉。如果以指甲厚度做比较的话，或许会比较明显。</p>
<p>　　用尺规实际测量的话可以得知指甲的厚度约为 0.0001 公尺（0.1 毫米），也就是说试着把一片指甲的侧面切成 10 万条线，每条线就约等同于 1 纳米，由此可略为想像得到 1 纳米是何等的微小了。</p>
<p>　　知道纳米有多小之后，还要理解缩小制程的用意，缩小电晶体的最主要目的，就是可以在更小的芯片中塞入更多的电晶体，让芯片不会因技术提升而变得更大；其次，可以增加处理器的运算效率；再者，减少体积也可以降低耗电量；最后，芯片体积缩小后，更容易塞入行动装置中，满足未来轻薄化的需求。</p>
<p>　　再回来探究纳米制程是什么，以 14 纳米为例，其制程是指在芯片中，线最小可以做到 14 纳米的尺寸，下图为传统电晶体的长相，以此作为例子。缩小电晶体的最主要目的就是为了要减少耗电量，然而要缩小哪个部分才能达到这个目的？左下图中的 L 就是我们期望缩小的部分。藉由缩小闸极长度，电流可以用更短的路径从 Drain 端到 Source 端（有兴趣的话可以利用 Google 以 MOSFET 搜寻，会有更详细的解释）。　</p>
<p><img src="https://pic4.zhimg.com/7def8b14a4086e89040df9e277ee8dd7_b.png" alt=""><br>（Source：<a href="http://www.slideshare.net）" target="_blank" rel="external">http://www.slideshare.net）</a></p>
<p>此外，电脑是以 0 和 1 作运算，要如何以电晶体满足这个目的呢？做法就是判断电晶体是否有电流流通。当在 Gate 端（绿色的方块）做电压供给，电流就会从 Drain 端到 Source 端，如果没有供给电压，电流就不会流动，这样就可以表示 1 和 0。（至于为什么要用 0 和 1 作判断，有兴趣的话可以去查布林代数，我们是使用这个方法作成电脑的）</p>
<h3 id="尺寸缩小有其物理限制"><a href="#尺寸缩小有其物理限制" class="headerlink" title="尺寸缩小有其物理限制"></a>尺寸缩小有其物理限制</h3><p>不过，制程并不能无限制的缩小，当我们将电晶体缩小到 20 纳米左右时，就会遇到量子物理中的问题，让电晶体有漏电的现象，抵销缩小 L 时获得的效益。作为改善方式，就是导入 FinFET（Tri-Gate）这个概念，如右上图。在 Intel 以前所做的解释中，可以知道藉由导入这个技术，能减少因物理现象所导致的漏电现象。<br><img src="https://pic1.zhimg.com/d27dbbf0e08af1bac6888e76219dc3cc_b.png" alt=""><br>（Source：<a href="http://www.slideshare.net）" target="_blank" rel="external">http://www.slideshare.net）</a></p>
<p>更重要的是，藉由这个方法可以增加 Gate 端和下层的接触面积。在传统的做法中（左上图），接触面只有一个平面，但是采用 FinFET（Tri-Gate）这个技术后，接触面将变成立体，可以轻易的增加接触面积，这样就可以在保持一样的接触面积下让 Source-Drain 端变得更小，对缩小尺寸有相当大的帮助。</p>
<p>　　最后，则是为什么会有人说各大厂进入 10 纳米制程将面临相当严峻的挑战，主因是 1 颗原子的大小大约为 0.1 纳米，在 10 纳米的情况下，一条线只有不到 100 颗原子，在制作上相当困难，而且只要有一个原子的缺陷，像是在制作过程中有原子掉出或是有杂质，就会产生不知名的现象，影响产品的良率。</p>
<p>　　如果无法想像这个难度，可以做个小实验。在桌上用 100 个小珠子排成一个 10×10 的正方形，并且剪裁一张纸盖在珠子上，接着用小刷子把旁边的的珠子刷掉，最后使他形成一个 10×5 的长方形。这样就可以知道各大厂所面临到的困境，以及达成这个目标究竟是多么艰巨。</p>
<p>　　随着三星以及台积电在近期将完成 14 纳米、16 纳米 FinFET 的量产，两者都想争夺 Apple 下一代的 iPhone 芯片代工，我们将看到相当精彩的商业竞争，同时也将获得更加省电、轻薄的手机，要感谢摩尔定律所带来的好处呢。</p>
<h2 id="告诉你什么是封装"><a href="#告诉你什么是封装" class="headerlink" title="告诉你什么是封装"></a>告诉你什么是封装</h2><p>经过漫长的流程，从设计到制造，终于获得一颗 IC 芯片了。然而一颗芯片相当小且薄，如果不在外施加保护，会被轻易的刮伤损坏。此外，因为芯片的尺寸微小，如果不用一个较大尺寸的外壳，将不易以人工安置在电路板上。因此，本文接下来要针对封装加以描述介绍。</p>
<p>目前常见的封装有两种，一种是电动玩具内常见的，黑色长得像蜈蚣的 DIP 封装，另一为购买盒装 CPU 时常见的 BGA 封装。至于其他的封装法，还有早期 CPU 使用的 PGA（Pin Grid Array；Pin Grid Array）或是 DIP 的改良版 QFP（塑料方形扁平封装）等。因为有太多种封装法，以下将对 DIP 以及 BGA 封装做介绍。</p>
<h3 id="传统封装，历久不衰"><a href="#传统封装，历久不衰" class="headerlink" title="传统封装，历久不衰"></a>传统封装，历久不衰</h3><p>首先要介绍的是双排直立式封装（Dual Inline Package；DIP），从下图可以看到采用此封装的 IC 芯片在双排接脚下，看起来会像条黑色蜈蚣，让人印象深刻，此封装法为最早采用的 IC 封装技术，具有成本低廉的优势，适合小型且不需接太多线的芯片。但是，因为大多采用的是塑料，散热效果较差，无法满足现行高速芯片的要求。因此，使用此封装的，大多是历久不衰的芯片，如下图中的 OP741，或是对运作速度没那么要求且芯片较小、接孔较少的 IC 芯片。</p>
<p><img src="https://pic3.zhimg.com/7270e07ec8255a2b7f06bee6b725e4b2_b.png" alt=""><br>▲ 左图的 IC 芯片为 OP741，是常见的电压放大器。右图为它的剖面图，这个封装是以金线将芯片接到金属接脚（Leadframe）。（Source ：左图 Wikipedia、右图 Wikipedia）</p>
<p>至于球格阵列（Ball Grid Array，BGA）封装，和 DIP 相比封装体积较小，可轻易的放入体积较小的装置中。此外，因为接脚位在芯片下方，和 DIP 相比，可容纳更多的金属接脚</p>
<p>　　相当适合需要较多接点的芯片。然而，采用这种封装法成本较高且连接的方法较复杂，因此大多用在高单价的产品上。　　</p>
<p><img src="https://pic2.zhimg.com/bbd08e9e2daa1a1dd136a03397cfea59_b.png" alt=""><br>▲ 左图为采用 BGA 封装的芯片。右图为使用覆晶封装的 BGA 示意图。（Source： 左图 Wikipedia）</p>
<h2 id="行动装置兴起，新技术跃上舞台"><a href="#行动装置兴起，新技术跃上舞台" class="headerlink" title="行动装置兴起，新技术跃上舞台"></a>行动装置兴起，新技术跃上舞台</h2><p>然而，使用以上这些封装法，会耗费掉相当大的体积。像现在的行动装置、穿戴装置等，需要相当多种元件，如果各个元件都独立封装，组合起来将耗费非常大的空间，因此目前有两种方法，可满足缩小体积的要求，分别为 SoC（System On Chip）以及 SiP（System In Packet）。</p>
<p>在智慧型手机刚兴起时，在各大财经杂誌上皆可发现 SoC 这个名词，然而 SoC 究竟是什么东西？简单来说，就是将原本不同功能的 IC，整合在一颗芯片中。藉由这个方法，不单可以缩小体积，还可以缩小不同 IC 间的距离，提升芯片的计算速度。至于制作方法，便是在 IC 设计阶段时，将各个不同的 IC 放在一起，再透过先前介绍的设计流程，制作成一张光罩。</p>
<p>　　然而，SoC 并非只有优点，要设计一颗 SoC 需要相当多的技术配合。IC 芯片各自封装时，各有封装外部保护，且 IC 与 IC 间的距离较远，比较不会发生交互干扰的情形。但是，当将所有 IC 都包装在一起时，就是噩梦的开始。IC 设计厂要从原先的单纯设计 IC，变成了解并整合各个功能的 IC，增加工程师的工作量。此外，也会遇到很多的状况，像是通讯芯片的高频讯号可能会影响其他功能的 IC 等情形。</p>
<p>　　此外，SoC 还需要获得其他厂商的 IP（intellectual property）授权，才能将别人设计好的元件放到 SoC 中。因为制作 SoC 需要获得整颗 IC 的设计细节，才能做成完整的光罩，这同时也增加了 SoC 的设计成本。或许会有人质疑何不自己设计一颗就好了呢？因为设计各种 IC 需要大量和该 IC 相关的知识，只有像 Apple 这样多金的企业，才有预算能从各知名企业挖角顶尖工程师，以设计一颗全新的 IC，透过合作授权还是比自行研发划算多了。</p>
<h3 id="折衷方案，SiP-现身"><a href="#折衷方案，SiP-现身" class="headerlink" title="折衷方案，SiP 现身"></a>折衷方案，SiP 现身</h3><p>作为替代方案，SiP 跃上整合芯片的舞台。和 SoC 不同，它是购买各家的 IC，在最后一次封装这些 IC，如此便少了 IP 授权这一步，大幅减少设计成本。此外，因为它们是各自独立的 IC，彼此的干扰程度大幅下降。</p>
<p><img src="https://pic3.zhimg.com/2eabc40282b00d9a81abb20ea595e5a2_b.png" alt=""><br>▲ Apple Watch 采用 SiP 技术将整个电脑架构封装成一颗芯片，不单满足期望的效能还缩小体积，让手錶有更多的空间放电池。（Source：Apple 官网）</p>
<p>采用 SiP 技术的产品，最着名的非 Apple Watch 莫属。因为 Watch 的内部空间太小，它无法采用传统的技术，SoC 的设计成本又太高，SiP 成了首要之选。藉由 SiP 技术，不单可缩小体积，还可拉近各个 IC 间的距离，成为可行的折衷方案。下图便是 Apple Watch 芯片的结构图，可以看到相当多的 IC 包含在其中。</p>
<p><img src="https://pic2.zhimg.com/ad55e82cbc4cb94639281b3cd2c6f79d_b.png" alt=""><br>▲ Apple Watch 中采用 SiP 封装的 S1 芯片内部配置图。（Source：chipworks）</p>
<p>完成封装后，便要进入测试的阶段，在这个阶段便要确认封装完的 IC 是否有正常的运作，正确无误之后便可出货给组装厂，做成我们所见的电子产品。其中主要的半导体封装与测试企业有安靠、星科金朋、J-devices、Unisem、Nepes、日月光、力成、南茂、颀邦、京元电子、福懋、菱生精密、矽品、长电、优特</p>
<p>至此，半导体产业便完成了整个生产的任务。</p>
<p>来源：TechNews</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21358006&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/27ba49ff657a9422bd9e591051032a38_r.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;芯片制造的过程就如同用乐高盖房子一样，先有晶圆作为地基，再层层往上叠，然而，没有设计图，拥有再强制造能力都没有用，因此，建筑师的角色相当重要。&lt;/p&gt;
    
    </summary>
    
      <category term="Program" scheme="http://ipcreator.me/categories/Program/"/>
    
    
      <category term="Basic Concept" scheme="http://ipcreator.me/tags/Basic-Concept/"/>
    
      <category term="IC" scheme="http://ipcreator.me/tags/IC/"/>
    
  </entry>
  
  <entry>
    <title>Java Design Pattern</title>
    <link href="http://ipcreator.me/2017/03/23/Program/Java/design-pattern/"/>
    <id>http://ipcreator.me/2017/03/23/Program/Java/design-pattern/</id>
    <published>2017-03-23T11:35:06.000Z</published>
    <updated>2017-03-28T01:20:44.645Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">作者：郭霖</a></p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1489338402459&amp;di=f354d44523b4c5d751414e4970189a88&amp;imgtype=0&amp;src=http%3A%2F%2Fsishuok.com%2Fforum%2Fupload%2F2012%2F8%2F21%2Fd9c285859566d753d86f1a44bc9f9a05__2.JPG" alt=""></p>
<p>单例：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br>组合：将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>
<p>策略：它定义了算法家庭，分别封装起来。让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。</p>
<p>模板方法： 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
<p>适配器：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
 <a id="more"></a>
<p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=4232751296,330377077&amp;fm=23&amp;gp=0.jpg" alt=""></p>
<p>在sLogUtil还没被初始化的时候才会进入到第3行，然后加上同步锁。等sLogUtil一但初始化完成了，就再也走不到第3行了，这样执行getInstance方法也不会再受到同步锁的影响，效率上会有一定的提升。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public static LogUtil getInstance() &#123;  </div><div class="line">    if (sLogUtil == null) &#123;  </div><div class="line">        synchronized (LogUtil.class) &#123;  </div><div class="line">            if (sLogUtil == null) &#123;  </div><div class="line">                sLogUtil = new LogUtil();  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    return sLogUtil;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>A. 无论synchronized关键字加在方法上还是对象上，如果它作用的对象是非静态的，则它取得的锁是对象；如果synchronized作用的对象是一个静态方法或一个类，则它取得的锁是对类，该类所有的对象同一把锁。<br>B. 每个对象只有一个锁（lock）与之相关联，谁拿到这个锁谁就可以运行它所控制的那段代码。<br>C. 实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。</p>
<p>在AllStatistics的构造函数中将小说类书籍和科技类书籍作为子分类添加到了statistics列表当中，然后使用同样的方法在getBrowseCount和getSalesCount方法中统计出所有书籍的浏览量和销售量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public interface Statistics &#123;  </div><div class="line"></div><div class="line">    int getBrowseCount();  </div><div class="line"></div><div class="line">    int getSalesCount();  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class AllStatistics implements Statistics &#123;  </div><div class="line"></div><div class="line">    private List&lt;Statistics&gt; statistics = new ArrayList&lt;Statistics&gt;();  </div><div class="line"></div><div class="line">    public AllStatistics() &#123;  </div><div class="line">        statistics.add(new NovelStatistics());  </div><div class="line">        statistics.add(new TechnicalStatistics());  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public int getBrowseCount() &#123;  </div><div class="line">        int browseCount = 0;  </div><div class="line">        for (Statistics s : statistics) &#123;  </div><div class="line">            browseCount += s.getBrowseCount();  </div><div class="line">        &#125;  </div><div class="line">        return browseCount;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public int getSalesCount() &#123;  </div><div class="line">        int saleCount = 0;  </div><div class="line">        for (Statistics s : statistics) &#123;  </div><div class="line">            saleCount += s.getBrowseCount();  </div><div class="line">        &#125;  </div><div class="line">        return saleCount;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">public interface Strategy &#123;  </div><div class="line"></div><div class="line">    String getSQL(String[] usernames);  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class Strategy1 implements Strategy &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public String getSQL(String[] usernames) &#123;  </div><div class="line">        StringBuilder sql = new StringBuilder(&quot;select * from user_info where &quot;);  </div><div class="line">        for (String user : usernames) &#123;  </div><div class="line">            sql.append(&quot;username = &apos;&quot;);  </div><div class="line">            sql.append(user);  </div><div class="line">            sql.append(&quot;&apos; or &quot;);  </div><div class="line">        &#125;  </div><div class="line">        sql.delete(sql.length() - &quot; or &quot;.length(), sql.length());  </div><div class="line">        return sql.toString();  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line"></div><div class="line">public class Strategy2 implements Strategy &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public String getSQL(String[] usernames) &#123;  </div><div class="line">        StringBuilder sql = new StringBuilder(&quot;select * from user_info where &quot;);  </div><div class="line">        boolean needOr = false;  </div><div class="line">        for (String user : usernames) &#123;  </div><div class="line">            if (needOr) &#123;  </div><div class="line">                sql.append(&quot; or &quot;);  </div><div class="line">            &#125;  </div><div class="line">            sql.append(&quot;username = &apos;&quot;);  </div><div class="line">            sql.append(user);  </div><div class="line">            sql.append(&quot;&apos;&quot;);  </div><div class="line">            needOr = true;  </div><div class="line">        &#125;  </div><div class="line">        return sql.toString();  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class QueryUtil &#123;  </div><div class="line"></div><div class="line">    public void findUserInfo(String[] usernames, Strategy strategy) throws Exception &#123;  </div><div class="line">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);  </div><div class="line">        Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;,  </div><div class="line">                &quot;123456&quot;);  </div><div class="line">        Statement stat = conn.createStatement();  </div><div class="line">        String sql = strategy.getSQL(usernames);  </div><div class="line">        System.out.println(sql);  </div><div class="line">        ResultSet resultSet = stat.executeQuery(sql);  </div><div class="line">        while (resultSet.next()) &#123;  </div><div class="line">            // 处理从数据库读出来的数据  </div><div class="line">        &#125;  </div><div class="line">        // 后面应将读到的数据组装成对象返回，这里略去。  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class Test &#123;  </div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;  </div><div class="line">        QueryUtil query = new QueryUtil();  </div><div class="line">        query.findUserInfo(new String[] &#123; &quot;Tom&quot;, &quot;Jim&quot;, &quot;Anna&quot; &#125;, new Strategy1());  </div><div class="line">        query.findUserInfo(new String[] &#123; &quot;Jac&quot;, &quot;Joe&quot;, &quot;Rose&quot; &#125;, new Strategy2());  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">public abstract class Formatter &#123;  </div><div class="line"></div><div class="line">    public String formatBook(Book book, int format) &#123;  </div><div class="line">        beforeFormat();  </div><div class="line">        String result = formating(book);  </div><div class="line">        afterFormat();  </div><div class="line">        return result;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    protected void beforeFormat() &#123;  </div><div class="line">        System.out.println(&quot;format begins&quot;);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    protected abstract String formating(Book book);  </div><div class="line"></div><div class="line">    protected void afterFormat() &#123;  </div><div class="line">        System.out.println(&quot;format finished&quot;);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class XMLFormatter extends Formatter &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    protected String formating(Book book) &#123;  </div><div class="line">        String result = &quot;&quot;;  </div><div class="line">        result += &quot;&lt;book_name&gt;&quot; + book.getBookName() + &quot;&lt;/book_name&gt;\n&quot;;  </div><div class="line">        result += &quot;&lt;pages&gt;&quot; + book.getPages() + &quot;&lt;/pages&gt;\n&quot;;  </div><div class="line">        result += &quot;&lt;price&gt;&quot; + book.getPrice() + &quot;&lt;/price&gt;\n&quot;;  </div><div class="line">        result += &quot;&lt;author&gt;&quot; + book.getAuthor() + &quot;&lt;/author&gt;\n&quot;;  </div><div class="line">        result += &quot;&lt;isbn&gt;&quot; + book.getIsbn() + &quot;&lt;/isbn&gt;\n&quot;;  </div><div class="line">        return result;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class JSONFormatter extends Formatter &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    protected String formating(Book book) &#123;  </div><div class="line">        String result = &quot;&quot;;  </div><div class="line">        result += &quot;&#123;\n&quot;;  </div><div class="line">        result += &quot;\&quot;book_name\&quot; : \&quot;&quot; + book.getBookName() + &quot;\&quot;,\n&quot;;  </div><div class="line">        result += &quot;\&quot;pages\&quot; : \&quot;&quot; + book.getPages() + &quot;\&quot;,\n&quot;;  </div><div class="line">        result += &quot;\&quot;price\&quot; : \&quot;&quot; + book.getPrice() + &quot;\&quot;,\n&quot;;  </div><div class="line">        result += &quot;\&quot;author\&quot; : \&quot;&quot; + book.getAuthor() + &quot;\&quot;,\n&quot;;  </div><div class="line">        result += &quot;\&quot;isbn\&quot; : \&quot;&quot; + book.getIsbn() + &quot;\&quot;,\n&quot;;  </div><div class="line">        result += &quot;&#125;&quot;;  </div><div class="line">        return result;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class YAMLFormatter extends Formatter &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    protected String formating(Book book) &#123;  </div><div class="line">        String result = &quot;&quot;;  </div><div class="line">        result += &quot;book_name: &quot; + book.getBookName() + &quot;\n&quot;;  </div><div class="line">        result += &quot;pages: &quot; + book.getPages() + &quot;\n&quot;;  </div><div class="line">        result += &quot;price: &quot; + book.getPrice() + &quot;\n&quot;;  </div><div class="line">        result += &quot;author: &quot; + book.getAuthor() + &quot;\n&quot;;  </div><div class="line">        result += &quot;isbn: &quot; + book.getIsbn() + &quot;\n&quot;;  </div><div class="line">        return result;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class Test &#123;  </div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;  </div><div class="line">        Book book = new Book();  </div><div class="line">        book.setBookName(&quot;Thinking in Java&quot;);  </div><div class="line">        book.setPages(880);  </div><div class="line">        book.setPrice(68);  </div><div class="line">        book.setAuthor(&quot;Bruce Eckel&quot;);  </div><div class="line">        book.setIsbn(&quot;9787111213826&quot;);  </div><div class="line">        XMLFormatter xmlFormatter = new XMLFormatter();  </div><div class="line">        String result = xmlFormatter.formatBook(book);  </div><div class="line">        System.out.println(result);  </div><div class="line"></div><div class="line">        JSONFormatter jsonFormatter = new JSONFormatter();  </div><div class="line">        result = jsonFormatter.formatBook(book);  </div><div class="line">        System.out.println(result);  </div><div class="line"></div><div class="line">        YAMLFormatter yamlFormatter = new YAMLFormatter();  </div><div class="line">String result = yamlFormatter.formatBook(book);  </div><div class="line">System.out.println(result);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">public interface PlayerCount &#123;  </div><div class="line"></div><div class="line">    String getServerName();  </div><div class="line"></div><div class="line">    int getPlayerCount();  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class ServerOne implements PlayerCount &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public String getServerName() &#123;  </div><div class="line">        return &quot;一服&quot;;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public int getPlayerCount() &#123;  </div><div class="line">        return Utility.getOnlinePlayerCount(1);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class ServerTwo implements PlayerCount &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public String getServerName() &#123;  </div><div class="line">        return &quot;二服&quot;;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public int getPlayerCount() &#123;  </div><div class="line">        return Utility.getOnlinePlayerCount(2);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class ServerThree implements PlayerCount &#123;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public String getServerName() &#123;  </div><div class="line">        return &quot;三服&quot;;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public int getPlayerCount() &#123;  </div><div class="line">        return Utility.getOnlinePlayerCount(3);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public class XMLBuilder &#123;  </div><div class="line"></div><div class="line">    public static String buildXML(PlayerCount player) &#123;  </div><div class="line">        StringBuilder builder = new StringBuilder();  </div><div class="line">        builder.append(&quot;&lt;root&gt;&quot;);  </div><div class="line">        builder.append(&quot;&lt;server&gt;&quot;).append(player.getServerName()).append(&quot;&lt;/server&gt;&quot;);  </div><div class="line">        builder.append(&quot;&lt;player_count&quot;).append(player.getPlayerCount()).append(&quot;&lt;/player_count&gt;&quot;);  </div><div class="line">        builder.append(&quot;&lt;/root&gt;&quot;);  </div><div class="line">        return builder.toString();  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">XMLBuilder.buildXML(new ServerOne());  </div><div class="line">XMLBuilder.buildXML(new ServerTwo());</div><div class="line">XMLBuilder.buildXML(new ServerThree());</div></pre></td></tr></table></figure>
<p>查询在线玩家数量的功能早就有了，使用的是ServerFirst这个类。当时写Utility.getOnlinePlayerCount()这个方法主要是为了针对新开的二服和三服，就没把一服的查询功能再重复做一遍。<br>Utility和ServerFirst这两个类都已经被打到Jar包里了，没法修改啊</p>
<p>XMLBuilder中使用PlayerCount这个接口来拼装XML，而ServerFirst并没有实现PlayerCount这个接口，这个时候就需要一个适配器类来为XMLBuilder和ServerFirst之间搭起一座桥梁，毫无疑问，ServerOne就将充当适配器类的角色。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class ServerOne implements PlayerCount &#123;  </div><div class="line"></div><div class="line">    private ServerFirst mServerFirst;  </div><div class="line"></div><div class="line">    public ServerOne() &#123;  </div><div class="line">        mServerFirst = new ServerFirst();  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public String getServerName() &#123;  </div><div class="line">        return &quot;一服&quot;;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public int getPlayerCount() &#123;  </div><div class="line">        return mServerFirst.getOnlinePlayerCount();  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>需要值得注意的一点是，适配器模式不并是那种会让架构变得更合理的模式，更多的时候它只是充当救火队员的角色，帮助解决由于前期架构设计不合理导致的接口不匹配的问题。</p>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://blog.csdn.net/guolin_blog/article/details/8860649" target="_blank" rel="external">Java设计模式透析之 —— 单例(Singleton)</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/9153753" target="_blank" rel="external">Java设计模式透析之 —— 组合(Composite)</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/8986285" target="_blank" rel="external">Java设计模式透析之 —— 策略(Strategy)</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/8744002" target="_blank" rel="external">Java设计模式透析之 —— 模板(Template)</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/9400141" target="_blank" rel="external">Java设计模式透析之 —— 适配器(Adapter)</a><br> <a href="http://blog.csdn.net/luoweifu/article/details/46613015" target="_blank" rel="external"> Java中Synchronized的用法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog&quot;&gt;作者：郭霖&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1489338402459&amp;amp;di=f354d44523b4c5d751414e4970189a88&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fsishuok.com%2Fforum%2Fupload%2F2012%2F8%2F21%2Fd9c285859566d753d86f1a44bc9f9a05__2.JPG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;单例：保证一个类仅有一个实例，并提供一个访问它的全局访问点。&lt;br&gt;组合：将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。&lt;/p&gt;
&lt;p&gt;策略：它定义了算法家庭，分别封装起来。让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。&lt;/p&gt;
&lt;p&gt;模板方法： 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。&lt;/p&gt;
&lt;p&gt;适配器：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ipcreator.me/categories/Java/"/>
    
    
      <category term="Design Pattern" scheme="http://ipcreator.me/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Some Good Learning Habits from Liu Weipeng</title>
    <link href="http://ipcreator.me/2017/03/22/MyView/Share/learning-habits/"/>
    <id>http://ipcreator.me/2017/03/22/MyView/Share/learning-habits/</id>
    <published>2017-03-22T05:42:06.000Z</published>
    <updated>2017-03-27T10:08:25.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一直以来伴随我的一些学习习惯"><a href="#一直以来伴随我的一些学习习惯" class="headerlink" title="一直以来伴随我的一些学习习惯"></a>一直以来伴随我的一些学习习惯</h2><p>原文作者：<a href="http://mindhacks.cn/" target="_blank" rel="external">刘未鹏</a><br><a href="http://mindhacks.cn/2008/07/08/learning-habits-part1/" target="_blank" rel="external">一直以来伴随我的一些学习习惯(一)：学习与思考</a><br><a href="http://mindhacks.cn/2008/07/20/learning-habits-part2/" target="_blank" rel="external">一直以来伴随我的一些学习习惯(二)：时间管理</a><br><a href="http://mindhacks.cn/2008/09/17/learning-habits-part3/" target="_blank" rel="external">一直以来伴随我的一些学习习惯(三)：阅读方法</a><br><a href="http://mindhacks.cn/2008/12/05/learning-habits-part4/" target="_blank" rel="external">一直以来伴随我的一些学习习惯(四)：知识结构</a></p>
   <a id="more"></a>
<h2 id="一-：学习与思考"><a href="#一-：学习与思考" class="headerlink" title="(一)：学习与思考"></a>(一)：学习与思考</h2><ol>
<li><p>Google&amp;Wiki（遇到问题做的第一件事情，也是学习某个东西做功课（homework）最先用到的东西。</p>
</li>
<li><p>看书挑剔，只看经典。如何选择经典，可以到网上做做功课，看看评价，综合分析一下。</p>
</li>
<li><p>做读书笔记。一是将自己阅读的时候的思考（包括闪念）总结下来，二是将书中的好例子摘抄下来。（这个习惯是一年前才养成的，发现受益极大。）有了google note，笔记可以加上tag，非常便于回顾，加深理解。我觉得，人与人学习的差距不在资质上，而在花在思考的时间和思考的深度上（后两者常常也是相关的）。</p>
</li>
<li><p>提到思考，我有一个小习惯。利用走路和吃饭的时候思考，还有睡觉前必然要弄一个问题放在脑子里面，在思考中迷糊入睡。发现这样一来往往在不知不觉中多出来大量的思考时间。</p>
<p>4a. 将思考成为习惯还有一个很大的好处——避免焦虑。卡耐基用一整本书讲了一个有效的做法来避免焦虑——底线思考。然而实际上还有另一个有效的做法，就是投入地做另一件事情。不去想”喜马拉雅山上的猴子”的方法并不是使劲的告诉自己不去想”喜马拉雅山上的猴子”，因为那样等于就是脑袋里想了那只猴子，正确的做法是真的不去想那猴子，而是想别的。用别的东西充满工作记忆，其他的神经活动自然会被抑制（神经科学基本事实）。所以，感到焦虑的时候不妨思考吧，甚至完全可以去理性分析和思考导致焦虑的问题本身，将其拆解，分析来源，在不知不觉中，大脑的工作重心就从情绪模块转向了推理模块了，而且这思考也可能顺带更有效地解决了导致焦虑的问题呢:)</p>
</li>
<li><p>重要的事情优先（详见史蒂芬·柯维的《高效能人士的七个习惯》或《要事优先》）。尽量避免琐事骚扰，不重要的事情能不做就不做。有时候，紧急的事情往往只是当事人觉得必须马上做完才显得紧急或者干脆就是紧他人之急，最糟糕的就是纯属性格上原因觉得每件事情都得第一时间完成，很多看上去紧急的事情实际上并不是真的”不能再拖了”，有的干脆就并不需要或值得去做。有很多事情都是可以先放一放甚至完全let go的，否则的话就整天被所谓”紧急”的事情牵着鼻子走了。</p>
</li>
<li><p>重要的事情营造比较大的时间块来完成。比如一本好书，或者一个重要的知识点，最好不要切得太琐碎了看，否则看了后面忘了前面。不利于知识的组织&amp;联系。</p>
</li>
<li><p>多看心理学与思维的书，因为它们是跨学科的。知识分两种，一是我们通常所谓的知识，即领域知识。二是关于我们的大脑吸收知识的机制的知识，后者不妨称为元知识。虽说这也是领域知识，但跟其它的领域知识不同的是，它指导着我们学习其它所有的领域知识。</p>
</li>
<li><p>学习一项知识，必须问自己三个重要问题：1. 它的本质是什么。2. 它的第一原则是什么。3. 它的知识结构是怎样的。</p>
<blockquote>
<ol>
<li>获得的多少并不取决于读了多少，而取决于思考了多少、多深。</li>
</ol>
</blockquote>
</li>
<li><p>善于利用小块时间，也就是《奇特的一生》中所说的“时间下脚料”，如何利用前面有几个方法。同时，也善于创造整块时间（如通过要事优先）。</p>
</li>
<li><p>关于习惯的养成，必须要说明的：经常看到有些人评论说，说说容易，做起来哪有那么容易啊（另一个无关习惯的“说起来容易做起来难”则是因为纸上谈兵不可能算计到所有现实中的因素，但那是另一个问题）。对此我要说的是，做起来当然不容易，所谓江山易改，本性难移。人的性格和认识事物的框架是长期积累养成的，并且人们非常珍视自己的信念（英语里面表达不相信某个东西叫做“I don’t buy it”）。从进化心理学上这是有依据的，一个经过时间检验的信念往往是更靠谱的。只不过可惜的是靠谱不代表最佳，一个信念能让你活下来并不代表能让你活得最好（详见《Mene Genes》，更多的例子参见《How we know what isn’t so》）。我们评判一个信念的标准是satisficing原则（即足够，能行就好，这个术语不是我提的，是大牛Herbert Simon提的），并不是optimizing原则。话说回来，为什么说起来容易做起来难，是因为“说”只是理性上承认正确，并没有考虑到我们每个人大脑中居住的那个非理性自我。这个自我以强大的情绪力量为动机，以习惯为己任，每时每刻都驱使着我们的行为。因为它掌握了“情绪”这个武器，所以我们只能时时拿它当大爷。不记得是哪位哲学家说的了，理性是感性的奴隶。那么，是不是就是说无法克服既有习惯了？以我的经验（以及观察到的别人的经验），还是可以的。第一条就是认识到习惯的改变绝不是一天两天的事情，承认它的难度。第二条就是如果你真想改掉习惯，就需要在过程中常常注意观察自己的行为，否则习惯会以一种你根本觉察不到的方式左右你的行为让你功亏一篑。有一个认知技巧也许可以缓解更改习惯过程中的不适：即把居住在内心的那个非理性自我当成你自己的孩子（你要去培养他），或者你的对手（你要去打败他）也行。总之不能当成自己，因为每个人都不想改变自己。这里转一个认知技巧的例子：李笑来老师在《把时间当作朋友》（顺便也推荐这本开放电子书）中提到他一个朋友用另一个认知技巧来克服背单词的枯燥的：</p>
<p>因为，一共要搞定20,000个单词，而因此可能获得的奖学金是每年40,000美元左右——并且连续四年没有失业可能（后来的事实是，他直到五年之后才获得了博士学位）。当时的美元兑换人民币的汇率差不多是8:1，所以，大约应该相当于320,000元人民币。而如果一年的税后收入是320,000元人民币的话，那么税前就要赚取差不多400,000元人民币。那么，每个单词应该大约值20元人民币——这还只不过是这算了一年的收入而已。</p>
<p>所以，他终于明白背单词是非常快乐的。他每天都强迫自己背下200个单词。而到了晚上验收效果的时候，每在确定记住了的单词前面画上一个勾的时候，他就要想象一下刚刚数过一张20元人民币的钞票。每天睡觉的时候总感觉心满意足，因为今天又赚了4000块！</p>
<p>注意，这跟自我欺骗不同。一来，我们的情绪系统只能这般对付（《Synaptic Self》中提到，大脑中的新皮层（neocortex，所谓“理性”居住的地方，尤其是前额叶）在进化历史上是较为新近的年代才进化出来的，跟底层较原始的模块（如主管情绪的杏仁核）之间的神经网络沟通并不是合作无间，这就解释了为什么有些事情我们明明知道是对的，但就是不能说服自己，情绪还是在那里不依不挠的驱使你去做另一样事情）。二来，我们知道在干什么，所以不能算欺骗:P 总之，对于习惯的更改，除了最重要的一日三省，加上一些认知技巧（其实每个人都是自己的心理学家，你可以自己看看能不能想出什么法子）。其实是没有什么速效银弹的。但是，知难而不退嘛，值得做的事情几乎总是如此:)</p>
</li>
</ol>
<h2 id="二-：时间管理"><a href="#二-：时间管理" class="headerlink" title="(二)：时间管理"></a>(二)：时间管理</h2><ol>
<li>学习和思考的过程中常问自己的几个问题：</li>
</ol>
<p>你的问题到底是什么？（提醒自己思考不要偏离问题。）<br>OK，到现在为止，我到底有了什么收获呢？（提醒自己时不时去总结，整理学习的东西）。<br>设想自己正在将东西讲给别人听（有声思考；能否讲出来是判断是否真正理解的最佳办法）。<br>3.1 设想需要讲给一个不懂的人听。（迫使自己去挖掘知识背后最本质、往往也是最简单的解释）。<br>时常反省和注意自己的思维过程。尤其是当遇到无法理解或解决的问题之后，最需要将原先的思维过程回顾一遍，看看到底哪个环节被阻塞住了妨碍了理解。问题到底出在哪里。并分析以后需要加强哪方面的思维习惯，才能够不在同样或类似的时候被绊住。对此，将思维的大致脉络写下来是一个很好的习惯。<br>养成反驳自己的想法的习惯：在有一个想法的时候，习惯性地去反驳它，问自己“这个难道就一定成立吗？”、“有没有反例或例外？”、“果真如此吗？”之类的问题。（参见Critical Thinking）<br>人的思维天生就是极易流于表面来理解事物的（参见《Psychology of Problem Solving》第11章）。觉得自己理解了一个问题了么？条件反射性地问自己：你真的理解了吗？你真的理解了问题的本质了？问题的本质到底是什么？目前我的理解是什么？我对这个理解感到满意吗？这样的理解到底有什么建设性呢？等等。</p>
<ol>
<li>重视知识的本质：对于程序员来说这一点尤其重要，程序员行业的知识芜杂海量，而且总是在增长变化。很多人感叹跟不上新技术。应对这个问题的办法只能是：</li>
</ol>
<blockquote>
<p>抓住不变量。大量的新技术其实只是一层皮，背后的支撑技术其实都是十来年不变的东西。底层知识永远都不过时。算法数据结构永远都不过时。基本的程序设计理论永远都不过时。良好的编码习惯永远都不过时。分析问题和解决问题的能力永远都不过时。强大的学习能力和旺盛的求知欲永远都不过时。你大脑的思维方式永远都不过时。</p>
</blockquote>
<ol>
<li><p>重视积累的强大力量，万事提前准备：计划订长一点，自然就可以多获得准备的时间。设想你若干年后会在做什么事情，需要哪些技能，现在就开始准备。一个5年计划便可以让你获得从现在开始的5年准备时间。5年中每天腾出半个到一个小时专心于某一件事情，认准一个方向，每次走一点，其实不要说5年，两年就会发现会起到宏大的效应。长期订阅我的Blog的朋友们也一定注意到我基本上不写东西，一般一个月写上2篇就算多的了。但总结一段时间的学习和思考的习惯却一直都没有停止（博客文章对我来说是学习和思考的副产品，我并不为写文章而写文章），所以5年下来竟也写了不少东西。所以这就是一个简单的例子。你大致还可以从我的Blog看出来我一段时间关注的东西，一般来说，一段比较长的时间（少则半年至一年——譬如对心理学与思维的关注；多则几年——譬如对编程技术的关注），在这段时间内，我的业余时间会被一个主题所充斥。反之，如果不知道目的是什么，就不知道往哪个方向上使劲，就容易产生无用功。</p>
</li>
<li><p>抬起头来：人的思维是非常容易只见树木不见森林的（否则这个成语从哪来的呢？）。时不时抬起头来审视一下自己正在做的事情，问一问它（对现在或未来）有什么价值，是不是你真正希望做的。你学到的东西到底是什么？它们重要吗？你需要在这个时候学习这些吗？（见第2条）。你的时间就是你的资源，你投入这些资源来掌握知识，所以到底用来掌握哪些知识是一个很重要的问题。仅仅遵循兴趣是不够的，人会对很多次要的东西产生兴趣，并一头钻进去浪费好多时间。所以判断一个东西值不值得学习是很重要的。</p>
</li>
</ol>
<p>杂项</p>
<ol>
<li><p>退订RSS：RSS Reader是个时间黑洞。就算mark all as read，在有大量feed的情况下，也会无形中消耗掉大量的时间。我们一旦订阅了某个RSS之后就会倾向于不肯退订它，心想也许某天有个重要的信息会从那里得到。这其实是源于人不肯”关上一扇门（即便门内的收益概率极小）”的心理（参见《Predictably Irrational》）；而实际上，关上一扇门，有时能够增大收益期望。仔细观察一下reader里面的feeds，有哪些是真正有价值的，把那些没价值的或者价值很小乃至于不值得每天被它骚扰的，全都退订掉。不要舍不得，那些一个星期都没出现让你眼睛一亮的内容的feed，很大的可能是永远也不会出现。就算可能，也别担心你会漏掉什么宝贵信息，真正宝贵的信息，在其他来源你也会接触到的。一开始我的Greader里面每天都有大量的新内容，每天都是1000+，但一段时间之后发现除了信息焦虑，实际上有价值的内容不多，现在，我很高兴地发现自己摆脱了这种状况，我持续不断地退订feeds，留下的内容越来越少，也越来越精，带来的阅读焦虑也越来越少。（顺便推荐一个东西，aideRSS，初步使用，感觉对订阅reddit这样的每天更新大量内容的feed很有用）。</p>
</li>
<li><p>有时间吗？总结总结最近得到的新知识吧。一般来说，我在一段时间内学习的一些东西总是会在这段时间内一直在脑子里打转，一有时间空隙（譬如走路，吃饭）它们就会自己蹦出来，促使我去进一步思考和总结。永远不要认为对一个知识的把握足够深刻，“理解”的感觉很多时候只是假象。学会反问自己对知识到底把握了多少，是很有价值的。（如何反问，前面的总结中有提到）。</p>
</li>
<li><p>有时间吗？看本书吧。（传统的）阅读和思考永远优于所谓的在互联网上汲取新知识，后者往往浅表、不系统、乃至根本没价值。</p>
</li>
<li><p>制定简要的阅读计划：选出最近认为对你最有价值的书，先总览一下，决定阅读的顺序（哪些章节可以优先阅读）。然后每天看一点。并利用走路、吃饭、乘车或其他不适合带着书和笔的时间来总结看过的内容，建立知识结构，抽取知识本质，与以往的大脑中的知识建立联系。（参见《奇特的一生》）</p>
</li>
</ol>
<h2 id="三-：阅读方法"><a href="#三-：阅读方法" class="headerlink" title="(三)：阅读方法"></a>(三)：阅读方法</h2><p>这篇主要写一些学习（尤其是阅读）的基本方法。</p>
<ol>
<li><p>趁着对一件事情有热情的时候，一股脑儿把万事开头那个最难的阶段熬过去。万事开头难，因为从不了解到了解基本的一些事实，是一个新知识暴涨的阶段，这个时候的困难是最大的。有人熬不过去，觉得困难太大就放弃了。不过，狂热的兴趣可以抵消对困难的感觉，所以趁着对一件事情有热情的时候，开一个好头是很重要的。（当然，这并不是说持之以恒就不重要了）。当然，也许这个是因人而异的，对我来说我会在对一件事情有浓厚兴趣的时候非常专注地学习，把很多 groundworks 做掉。后面就会顺利一些了。</p>
</li>
<li><p>根据主题来查阅资料，而不是根据资料来查阅主题。以前读书的时候是一本一本的读，眼里看到的是一本一本的书，现在则是一章、甚至一节一节的读，眼中看到的不是一本一本的书，而是一堆一堆的章节，一个一个的知识主题，按照主题来阅读，你会发现读的时候不再是老老实实地一本书看完看另一本，而是非常频繁地从一本书跳到另一本书，从一处资料跳到另一处资料，从而来获得多个不同的人对同一个主题是如何讲解的。比如最近我发现在看蒙特卡罗算法时就查了十来处资料，其中有三四篇 paper 和六七本书；这是因为即便是经典的书，你也不能指望它对其中每一个主题的介绍都是尽善尽美的，有些书对某个主题（知识点）的介绍比较到位，有些书则对另一些知识点介绍得比较到位。而有时候一篇紧凑的 paper 比一本书上讲得还要好。我硬盘里面的书按主题分类，每个主题下面都有一堆书，当我需要学习某个主题的知识时（譬如贝叶斯学习或者神经网络），我会把里面涉及这个主题的书都翻开来，索引到相关章节，然后挑讲得好的看。那么，如何判断一个资料是好资料还是坏资料呢？</p>
</li>
<li><p>好资料，坏资料。好资料的特点：从问题出发；重点介绍方法背后的理念（ rationale ），注重直观解释，而不是方法的技术细节；按照方法被发明的时间流程来介绍（先是遇到了什么什么问题，然后怎样分析，推理，最后发现目前所使用的方法）。坏资料的特点是好资料的反面：上来就讲方法细节，仿佛某方法是从天上掉下来的，他们往往这样写“我们定义… 我们称… 我们进行以下几个步骤… ”。根本不讲为什么要用这个方法，人们最初是因为面对什么问题才想到这个方法的，其间又是怎样才想出了这么个方法的，方法背后的直观思想又是什么。实际上一个方法如果将其最终最简洁的形式直接表达出来往往丢失掉了绝大多数信息，这个丢掉的信息就是问题解决背后的思维过程。至于为什么大多数书做不到这一点，我在这里试着分析过。</p>
</li>
<li><p>学习一个东西之前，首先在大脑中积累充分的“疑惑感”。即弄清面临的问题到底是什么，在浏览方法本身之前，最好先使劲问问自己能想到什么方法。一个公认的事实是，你对问题的疑惑越大，在之前做的自己的思考越多，当看到解答之后印象就越深刻。记得大学里面的课本总是瀑布式地把整个知识结构一览无余地放在面前，读的过程倒是挺爽，连连点头，读完了很快又忘掉了，为什么？因为没有带着疑问去学习。</p>
</li>
<li><p>有选择地阅读。很多人觉得我读书速度很快，其实我只是有选择地阅读。这里的选择体现在两个地方，一是选择一本书中感兴趣的章节优先阅读。二是对一本书中技术性较弱或信息密度较低的部分快速地略读。一般来说，除了技术性非常强的书之外，大多数书的信息密度很低，有很多废话。一般来说在阅读的时候应该这样来切分内容：1. 问题是什么？2. 方案是什么？3. 例子是什么？如果是需要解释一个现象的（譬如《黑天鹅》），那么1. 现象是什么？2. 解释是什么？3. 支撑这个解释的理由是什么？4. 例子是什么？一般来说，这一二三四用不了多少字就可以写完了（如果假设只举一到两个精到的例子的话），这样的无废话著作的典型是《合作的进化》；那为什么有些书，明明核心观点就那点东西（顶多加上几个精要的例子罢了）却写得长得要命呢？因为人的思维都有一个“联想”的特点，写着写着就容易旁逸斜出，而且作者自己也往往觉得引申出去挺牛逼，有时候很多与主题无关的废话就掺和进来了；那么，阅读的时候就应该有选择性地滤掉这些不相干的废话；此外还有一种可能性就是大量冗余的例子。一般来说组织得比较好的书会有详细且一目了然的目录和索引，根据目录首先就可以滤掉一部分（比如某个子章节的内容你以前是看过的），然后有时候作者还会举很多冗余的例子，如果你已经觉得印象够深刻了这些例子完全可以不看（一些书就非常厚道地对每个观点只辅以一两个最最经典的例子，譬如《与众不同的心理学——如何正视心理学》，这样的书我最是喜欢）。</p>
</li>
<li><p>为什么看不懂？如果看不懂一个知识，一般有如下几个可能的原因：</p>
</li>
<li><p>你看得不够使劲。对此古人总结过——书读百遍其义自现。虽然这个规律不是任何时候都成立的，但是从认知科学的角度看是完全可以解释的，我们在阅读的时候，注意力往往会有选择性地关注其中的某一些“点”，而忽略了另一些“点”，于是一遍看下来可能因为某一些忽略导致无法理解整体。或者干脆看的时候就没注意其中一些细节但重要的东西。此外，大脑理解一个东西需要一定的处理时间，人脑的处理速度很慢，神经冲动每秒传输速度不过百米，所以不能指望看到哪懂到哪。最后，我们可能因为思维定势的原因会从某个特定的角度去看一句话而忽略了从不同角度去理解的可能性。对于这类情况，仔仔细细地再多读两遍，多试着去理解两遍，往往会“哦！原来这样。”地恍然大悟。</p>
</li>
<li>其中涉及到了你不懂的概念。这是技术性的不理解。这种情况就需要 Cross Reference 。如果一句话中用到了你不懂的概念，那就去查，现在很多书都是电子书，直接搜索一下，或者，对于纸书，看一下书后面的索引就行了。奇怪的是很多人看不懂也不分析一下为什么不懂，就直接放弃了。正如解决问题一样，问题卡住解决不了，第一时间要做的就是分析到底为什么解决不了，而不是直接求救。3. 作者讲述的顺序不对，你接着往下看，也许看到后面就明白了前面的了。</li>
</ol>
<p>杂项</p>
<ol>
<li><p>如何在阅读之前就能获得对一本书质量的大致评估。在深入阅读之前能够迅速评估一本书的质量可以节省很多时间。基本上有几个线索：1. 看作者。牛作者写的书一般都不错。2. 看目录和简介。一份好的目录和简介能够透露这本书质量的相当一部分信息。目录结构是否清晰，是否直白（而不是装神弄鬼），都是衡量的线索。3. 看 Amazon 上的评价，这里要注意的是，除了看整体打分之外，更要看打分最低的人是怎么说的，因为小众意见往往有可能来自那些真正懂行的人（除了来踢馆的），如果在打分最低的意见里面看不到真正有价值的反驳意见的话就相当肯定书是不错的了。4. 看样章。Amazon 上一般都可以随机浏览一些章节的，表达是否清晰，论证是否严谨，内容是否深刻，基本是几页纸就能看出来的。</p>
</li>
<li><p>如何搜寻到好书。几个线索：1. 同作者的著作。2. Amazon 相关推荐和主题相关的书列（类似豆瓣的豆列）。3. 一本好的著作（或一份好的资料——不管是书还是网页）在参考资料里面重点提到的其他著作。4. 有时对于一个主题，可以搜索到好心人总结的参考资源导引，那是最好不过的。</p>
</li>
</ol>
<h2 id="四-：知识结构"><a href="#四-：知识结构" class="headerlink" title="(四)：知识结构"></a>(四)：知识结构</h2><p>自从建立了 TopLanguage 以来，发现在上面待的时间越来越多，与高手讨论问题是个粘性十足的事情，一方面，分享自己的认识是整理不成熟的想法的极好途径，另一方面，互相之间视角不同，所以往往自己忽视的地方会被别人发现。在讨论中不断精化既有的知识体系。以下这段基本上摘抄自（略有整理和添加）在 TopLanguage 上的发言：</p>
<h3 id="抓住不变量"><a href="#抓住不变量" class="headerlink" title="抓住不变量"></a>抓住不变量</h3><p>我喜欢把知识分为essential的和non-essential的。对于前者采取提前深入掌握牢靠的办法，对于后者采取待用到的时刻RTM (Read the manual)方法（用本）。</p>
<p>如何区分essential和non-essential的知识想必绝大多数时候大家心里都有数，我举几个例子：</p>
<blockquote>
<p>对程序员来说，硬件体系结构是essential的，操作系统的一些重要的实现机制是essential的，主流编程范式（OO、FP）是为了满足什么需求出现的（出现是为了解决什么问题），是怎么解决的，自身又引入了哪些新的问题，从而适用哪些场景）。这些我认为都是essential的。我想补充一点的是，并不是说硬件体系结构就要了解到逻辑门、晶体管层面才行（其实要了解到这个层面代价也很小，一两本好书就行了），也并不是说就要通读《Computer Architecture: Quantitative Approach》才行。而是关键要了解那些重要的思想（很长时间不变的东西），而不是很细的技术细节（易变的东西）。《Computer Systems: A Programmer’s Perspective》就是为此目的，针对程序员的需求总结出那些essential knowledge的好书。</p>
</blockquote>
<p>再来说一下为什么需要预先牢靠掌握这些essential的知识：</p>
<p>根据Joel Spolsky同学的说法（原文），</p>
<blockquote>
<p>编程语言技术是对底层设备的封装，然而封装总是会出现漏洞的，于是程序员被迫下到“下水道”当中去解决问题，一旦往下走，漂亮的OO、N层抽象就不复存在了，这时候不具备坚硬的底层知识就会无法解决问题。简而言之就是这些底层知识会无可避免的需要用到，既然肯定会被用到那还是预先掌握的好，否则一来用到的时候再查是来不及的，因为essential的知识也往往正是那些需要较长时间消化掌握的东西，不像Ruby的mixin或closure这种翻一下manual就能掌握的东西。（英语也是这样的essential knowledge——上次在PyCN上看到一个招Python开发人员的帖子将英语列为必备技能，却并不将自然语言处理列为必备技能，正是因为英语不是可以临阵磨枪的东西，而且作为知识的主要载体，任何时候都少不了它，如果不具备英语能力，这个就会成为个人知识结构的短板或瓶颈，而且由于需要长时间才能获得这项能力，所以这个瓶颈将持续很长时间存在。我们曾经在 TopLanguage 上讨论过如何花最少的时间掌握英语）</p>
</blockquote>
<p>另一方面，在问题解决当中，如果不具备必要的知识，是根本无从思考的，再好的分析能力也并不是每个问题都能分析出该用哪些知识然后再去查手册的，很多时候是在工具和问题之间比较，联想，试探性的拼凑来解决问题；这就使得一个好的既有知识基变得至关重要。（实际上以上这个是一个较大的话题，希望有一天我能够把它详细展开说清:)）</p>
<blockquote>
<p>如果你不知道某个工具的存在，遇到问题的时候是很难想到需要使用这么样一个工具的，essential knowldge就是使用最为广泛的工具，编程当中遇到某些问题之后，如果缺乏底层知识，你甚至都不知道需要去补充哪些底层知识才能解决这个问题。</p>
</blockquote>
<p>你必须首先熟悉你的工具，才能有效地使用它（须知工具的强是无敌的，但这一切得以“了解你的工具”为前提，甚至得以“了解目前可能有哪些工具适合你的问题”为前提）。一门语言，你必须了解它的适用场景，不适用场景（比如继承能解决你的问题不代表继承就是解决你的问题的最适合的方案，须知问题是一个复杂系统，解决方案总是常常引入新的问题）。你必须了解它支持的主要编程范式，此外你还必须了解它的traps和pitfalls（缺陷和陷阱，如果不知道陷阱的存在，掉进去也不知道怎么掉的。）这些都是essential knowledge，如果不事先掌握，指望用的时候查manual，是很浪费时间的，而且正如第2点所说，正因为你不知道这些知识（如适用场景），从而用sub-optimal的方式使用了一门语言自己可能还不知道（最小白的例子是，如果你不知道语言支持foreach，那么可能每次都要写一个冗长的循环，较常见的例子是不知道有很方便的库设施可以解决手头的问题所以傻乎乎的自己写了一堆代码），</p>
<p>因为人的评价标准常常是：只要解决了最醒目的问题并且引入的新问题尚能忍受，就行。注意，熟悉并非指熟悉所有细节，而是那些重要的，或者无法在需要用到的时候按需查找的知识。比如上面提到的：<strong>适用场景不适用场景，编程范式，主要语言特性，缺陷和陷阱。</strong></p>
<p>当然，以上作为程序员的essential knowledge列表并不完备，关键是自己在学习新知识的时候带着第三只眼来敏锐地判断这个知识是否是不变量，或不易变的量，是否完全可以在用的时候查手册即可，还是需要提前掌握（一些判断方法在上文也有所提及）。并且学会在纷繁的知识中抽象出那些重要的，本质的，不变的东西。我在之前的part里面也提到我在学习新知识的时候常常问自己三个问题：该知识的（体系或层次）结构是什么、本质是什么、第一原则是什么。</p>
<p>另外还有一些我认为是essential knowledge的例子：</p>
<blockquote>
<p>分析问题解决问题的思维方法（这个东西很难读一两本书就掌握，需要很长时间的锻炼和反思）、判断与决策的方法（生活中需要进行判断与决策的地方远远多于我们的想象），波普尔曾经说过：All Life is Problem-Solving。而判断与决策又是其中最常见的一类Problem Solving。尽管生活中面临重大决策的时候并不多，但另一方面我们时时刻刻都在进行最重大的决策：如：决定自己的日常时间到底投入到什么地方去。如：你能想象有人宁可天天花时间剪报纸上的优惠券，却对于房价的1%的优惠无动于衷吗？（《别做正常的傻瓜》、《Predictably Irrational》）如：你知道为什么当手头股票的股价不可抑止地滑向深渊时我们却一边揪着头发一边愣是不肯撤出吗？（是的，我们适应远古时代的心理机制根本不适应金融市场。）糟糕的判断与决策令我们的生活变得糟糕，这还不是最关键的，最关键的是我们从来不会去质疑自己的判断，而是总是能“找到”其他为自己辩护的理由（《错不在我（Mistakes were made, but not by me）》）又，现在是一个信息泛滥的时代，于是另一个问题也出现：如何在海洋中有效筛选好的信息，以及避免被不好的信息左右我们的大脑（Critical Thinking）关于以上提到的几点我在豆瓣上有一个专门的豆列（“学会思考”），希望有一天我能够积累出足够多的认识对这个主题展开一些详细介绍。</p>
</blockquote>
<p>最后分享一个学习小Tip：</p>
<p>学习一个小领域的时候，时时把“<strong>最终能够写出一篇漂亮的Survey</strong>”放在大脑中提醒自己，就能有助于在阅读和实践的时候有意无意地整理知识的结构、本质和重点，经过整理之后的知识理解更深刻，更不容易忘记，更容易被提取。</p>
<p>杨军在 TopLanguage 上也曾分享了三篇非常棒的学习心得的文章，字字珠玑：</p>
<p>[1] <a href="https://groups.google.com/group/pongba/browse_frm/thread/9a459b6efe94985a/" target="_blank" rel="external">有些事情做起来比想象中容易</a><br>[2] <a href="https://groups.google.com/group/pongba/browse_frm/thread/20a08b6201d88a98/" target="_blank" rel="external">有关读书方法的一点想法</a><br>[3] <a href="https://groups.google.com/group/pongba/browse_frm/thread/6f6140744ab95c72/" target="_blank" rel="external">一件事情如果你没有说清楚，十有八九不能做好</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一直以来伴随我的一些学习习惯&quot;&gt;&lt;a href=&quot;#一直以来伴随我的一些学习习惯&quot; class=&quot;headerlink&quot; title=&quot;一直以来伴随我的一些学习习惯&quot;&gt;&lt;/a&gt;一直以来伴随我的一些学习习惯&lt;/h2&gt;&lt;p&gt;原文作者：&lt;a href=&quot;http://mindhacks.cn/&quot;&gt;刘未鹏&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://mindhacks.cn/2008/07/08/learning-habits-part1/&quot;&gt;一直以来伴随我的一些学习习惯(一)：学习与思考&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://mindhacks.cn/2008/07/20/learning-habits-part2/&quot;&gt;一直以来伴随我的一些学习习惯(二)：时间管理&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://mindhacks.cn/2008/09/17/learning-habits-part3/&quot;&gt;一直以来伴随我的一些学习习惯(三)：阅读方法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://mindhacks.cn/2008/12/05/learning-habits-part4/&quot;&gt;一直以来伴随我的一些学习习惯(四)：知识结构&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Personal" scheme="http://ipcreator.me/categories/Personal/"/>
    
    
      <category term="Share" scheme="http://ipcreator.me/tags/Share/"/>
    
      <category term="Habit" scheme="http://ipcreator.me/tags/Habit/"/>
    
      <category term="Liu Weipeng" scheme="http://ipcreator.me/tags/Liu-Weipeng/"/>
    
  </entry>
  
</feed>
