{"title":"IPCreator","description":"For life, growing up is the only password.","language":"zn-CN","link":"http://ipcreator.me","pubDate":"Mon, 27 Feb 2017 03:25:06 GMT","lastBuildDate":"Mon, 27 Feb 2017 05:15:57 GMT","generator":"hexo-generator-json-feed","webMaster":"For life","items":[{"title":"多媒体技术基础之---重新认识声音","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-sound/","description":"wjlkoorey 声音一个最基本的常识就是“它是一种能量”，初中物理课上我们也学过声音的三要素分别是音色、音调和响度。 音色：简单理解，就是一种声音的固有特征。比如，电子琴和小提琴发出的声音是有明显区别的，笛子和古筝也有各自的声音特征。有些声音模仿秀的选手可以通过训练，达到模仿不同人或者不同乐器的效果。 音调：也就是我们所说的频率，单位是赫兹Hz，频率越高听起来越刺耳、越尖锐，频率越低听起来越低沉、越浑厚。医学研究表明，人的听觉系统能察觉的最低频率为20Hz，最高为20000Hz，超出这个范围人类一般就听不到了。其实现实生活中根本就不存在完全能听到20Hz~20kHz这样的人，并且随着年龄的增长、体质的变化，人能听到的声音只会是这个区间的一个子集。","pubDate":"Mon, 27 Feb 2017 03:25:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-sound/","category":"技术"},{"title":"多媒体技术基础之---视频","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-video/","description":"wjlkoorey 我们都知道，视频本质上源于电影。2014年冯导的《私人订制》里葛大爷对“全球最俗大导”说了那么一番话，印象比较深刻：“经过考证，电影是大众娱乐，起源于走马灯。本身就是一俗艺术，和雅压根儿就不沾边。”而当代科学史研究者们大都依据文学家范成大（1126—1193）的诗文记载，认为南宋时才有走马灯。走马灯的两个主要特点分别是：一、利用热气流作动力；二、以涡轮装置带动灯上画面转动。","pubDate":"Mon, 27 Feb 2017 03:19:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-video/","category":"技术"},{"title":"多媒体技术基础之---图像","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-picture/","description":"wjlkoorey 2012年11月13日，83岁的柯达公司退休工程师布赖斯·拜尔(Bryce Bayer)离开了这个世界，永远离开了我们，离开了爱戴他的人们，而他在数字图像领域的杰出成就不应该就这样被淹没在历史的洪流里，所以，谨以2014年第一篇博文献给伟大的布赖斯·拜尔先生。","pubDate":"Mon, 27 Feb 2017 03:04:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-picture/","category":"技术"},{"title":"多媒体技术基础之---色彩空间","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-color/","description":"wjlkoorey 上一篇博文里，我们已经了解到图像是如何数字化的，但是关于数字图像的存储和显示问题还没提到，但在了解数字图像的存储和显示之前，我们先得弄明白数字图像里一个让很多人迷糊的概念：色彩空间。有的技术文献里也将其表述为颜色模型、颜色空间等，说的都是同一个东西。 关于色彩空间，我们最熟悉的就是RGB了，即数字图像的每个像素点用3字节表示，每个字节分别表示该像素点红、绿和蓝色的分量，根据视觉三原色理论，那么这个像素点的最终颜色也就确定了下来。刚开始的时候，确实使用3个字节（38位）来分别表示一个像素里面的Red,Green和Blue的发光强度数值，后来又增加了一字节用于表示透明度，也就是在Photoshop里经常看到的Alpha值。前三个字节只表示红绿蓝三基色的值，最后一个字节表示前面三种基色叠加结果的透明度的值。在这个前提下，假如我们有一副1440900分辨率的一张图片，按照RGB的方式，每个像素点用4字节表示，则这幅图片将占：14409004= 5184000Byte=5MB左右的存储空间；如果是3320*1876分辨率的一张照片则高达24MB。当然，这个体积对目前的存储系统来说已经不是什么大问题了，但对我们目前的网络带宽还是提出了非常严峻的挑战。再进一步，如果我们要制作视频，按照电影理论：每秒钟至少24帧图像连续播放，人的视觉才不会感觉停留和卡顿。依然以1440×900解析率的片源为例，每秒钟的数据量则高达120MB字节！！！每秒啊，这是什么概念，如果是90分钟的总播放时长，你能想象要占多少存储空间？耗费多少网络带宽么？关于视频先搁置起来，以后再细说。 那如何在尽量不降低图片质量的情况下，如何才能最大限度的减小文件数据呢？当然，大家肯定想到应该是各种图像压缩算法该登场了。确实没错，但经过前人的实践证明，在采用RGB颜色模型记录数字图像时，无论采用何种算法，整体压缩比非常的不理想，因为原始数据确实太大了。这时候，英国著名科学家Iain Ainsworth经过大量科学研究得出了一条结论：The human visual system (HVS) is less sensitive to colour than to luminance (brightness)。也就是说 人类视觉系统对亮度的感觉比对颜色更加敏感。利用这一特性，将图像的亮度信息和颜色信息分离，并使用不同长度的bit位进行存储，这样可以在对主观感觉影响很小的前提下，更加有效的存储图像数据 因此，另一种颜色空间模型—YUV及其它的各种裂变体就如雨后春笋般遍地而生了。估计当年很多人和我一样，在学计算机多媒体信息处理这门课时，看到这个概念和后面的各种变种，那真是一个头，两个大。不过今天，我力争用最少的语言，最直白的逻辑来向大家阐述清楚这个概念。 说到YUV色彩空间，从它衍生出的其他几种颜色空间经常会让人产生混淆，最常见的就是YUV经常和YCbCr混用，还有YPbPr的出现让本来就已经很“混乱”的家族又变成了一锅浆糊。下面我们就来一一了解谈谈这几种东东。 YUV首先我们简单了解一下YUV的由来。在早期从黑白电视机向彩色电视机(都是模拟信号的年代)过度的那段时间里，工程师们为了继续沿用黑白电视机的基础技术和架构，根据前面说过人的视觉对图像的亮度比图像的色彩更敏感的特性，发明了YUV颜色空间。因为当年的黑白电视机里都已经具备处理图像信号亮度的器件，所以，彩色电视机的工程师们就只增加了两个色差信号U(蓝色色差)和V(红色色差)，就形成了我们所说的YUV颜色空间。所以说，YUV的真正意义在于：在模拟电视系统里，实现了亮度信号Y和色差信号U、V的分离，主要用于优化彩色视频信号的传输，后向兼容老式黑白电视系统，同时与原始的RGB相比，YUV只需占用极少的频宽，而RGB要求三个独立的视频信号同时传输。既然YUV是派生于RGB，那它们之间就肯定有换算公式。请客官们少安毋躁。 YCbCr 当从模拟图像发展到数字图像年代的时候，伟大的科学家们又在YUV颜色空间的基础上提出了YCbCr颜色空间。也就是说，YCbCr颜色空间主要用于彩色数字图像信息的编码、压缩和传输用的。例如，MPEG和JPEG两大组织的各种图像、视频压缩算法都是基于YCbCr颜色空间来提出的，例如H.264,mpeg其实都是在YCbCr颜色空间里运算的。 YPbPr 也是用在模拟的彩色信号处理领域，可以认为YPbPr是YCbCr的模拟版本。那么什么时候会见到YPbPr呢？那就是当你的显示设备的视频输入接口或者输出设备的视频输出接口还有下面这样一组时，你就会见到YPbPr了： 为了显示图像，你还得配备一根这样的视频连接线： 其中绿线传输Y信号，蓝线传输Pb信号，红线传输Pr信号。 最后，我们用来总结一下上述几种颜色空间的应用场合和它们之间的转换关系： 上图中，直接在网络上传送模拟信号的年代已经过去了，这里将其画出来的主要目的是告诉大家它们曾经存在过。 因此，综上所述，目前在计算机行业的数字图形图像处理领域，当我们提到YUV时，其实就隐含的指示了我们所说的是YCbCr，把模拟信号年代那些东东赶紧统统扫出脑袋吧(当然除非你目前还在搞模拟视频的相关研究和开发就恕小生无理了)。","pubDate":"Mon, 27 Feb 2017 02:58:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-color/","category":"技术"},{"title":"Linux系统中“动态库”和“静态库”那点事儿","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-linux-library/","description":"wjlkoorey 更多参考：深入理解C语言的函数调用过程 今天我们主要来说说Linux系统下基于动态库(.so)和静态(.a)的程序那些猫腻。在这之前，我们需要了解一下源代码到可执行程序之间到底发生了什么神奇而美妙的事情。 在Linux操作系统中，普遍使用ELF格式作为可执行程序或者程序生成过程中的中间格式。ELF（Executable and Linking Format，可执行连接格式） 是UNIX系统实验室（USL）作为应用程序二进制接口（Application BinaryInterface，ABI）而开发和发布的。工具接口标准委员会（TIS）选择了正在发展中的ELF标准作为工作在32位Intel体系上不同操作系统之间可移植的二进制文件格式。本文不对ELF文件格式及其组成做太多解释，以免冲淡本文的主题，大家只要知道这么个概念就行。以后再详解Linux中的ELF格式。源代码到可执行程序的转换时需要经历如下图所示的过程：","pubDate":"Mon, 27 Feb 2017 02:24:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-linux-library/","category":"技术"},{"title":"Linux网络编程","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-network-programming/","description":"Linux的整个网络协议栈都构建与Linux Kernel中，整个栈也是严格按照分层的思想来设计的，整个栈共分为五层，分别是 ： 1． 系统调用接口层，实质是一个面向用户空间应用程序的接口调用库，向用户空间应用程序提供使用网络服务的接口。2． 协议无关的接口层，就是SOCKET层，这一层的目的是屏蔽底层的不同协议（更准确的来说主要是TCP与UDP，当然还包括RAW IP， SCTP等），以便与系统调用层之间的接口可以简单，统一。简单的说，不管我们应用层使用什么协议，都要通过系统调用接口来建立一个SOCKET，这个SOCKET其实是一个巨大的sock结构，它和下面一层的网络协议层联系起来，屏蔽了不同的网络协议的不同，只把数据部分呈献给应用层（通过系统调用接口来呈献）。3． 网络协议实现层，毫无疑问，这是整个协议栈的核心。这一层主要实现各种网络协议，最主要的当然是IP，ICMP，ARP，RARP，TCP，UDP等。这一层包含了很多设计的技巧与算法，相当的不错。4． 与具体设备无关的驱动接口层，这一层的目的主要是为了统一不同的接口卡的驱动程序与网络协议层的接口，它将各种不同的驱动程序的功能统一抽象为几个特殊的动作，如open，close，init等，这一层可以屏蔽底层不同的驱动程序。5． 驱动程序层，这一层的目的就很简单了，就是建立与硬件的接口层。可以看到，Linux网络协议栈是一个严格分层的结构，其中的每一层都执行相对独立的功能，结构非常清晰。其中的两个“无关”层的设计非常棒，通过这两个“无关”层，其协议栈可以非常轻松的进行扩展。在我们自己的软件设计中，可以吸收这种设计方法。 Linux 网络栈剖析Linux网络编程：原始套接字的魔力【上】Linux网络编程：原始套接字的魔力【下】 Linux网络编程：原始套接字的魔力【续】揭开网络编程常见API的面纱【上】 揭开网络编程常见API的面纱【下】Linux网络编程：基于UDP的程序开发回顾篇 Linux网络编程：基于TCP的程序开发回顾篇 Linux环境下网络编程杂谈 linux 内核网络，数据接收流程图 linux 内核网络,数据发送流程图 (十六)洞悉linux下的Netfilter&amp;iptables：开发自己的hook函数【实战】(下)(十五)洞悉linux下的Netfilter&amp;iptables：开发自己的hook函数【实战】(上)(十四)洞悉linux下的Netfilter&amp;iptables：开发一个match模块【实战】(十三)洞悉linux下的Netfilter&amp;iptables：为防火墙增添功能模块【实战】(十二)洞悉linux下的Netfilter&amp;iptables：iptables命令行工具源码解析【下】(十一)洞悉linux下的Netfilter&amp;iptables：iptables命令行工具源码解析【上】(十)洞悉linux下的Netfilter&amp;iptables：网络地址转换原理之SNAT(九)洞悉linux下的Netfilter&amp;iptables：网络地址转换原理之DNAT(八)洞悉linux下的Netfilter&amp;iptables：状态防火墙(七)洞悉linux下的Netfilter&amp;iptables：如何理解连接跟踪机制？【下】(六)洞悉linux下的Netfilter&amp;iptables：如何理解连接跟踪机制？【中】(五)洞悉linux下的Netfilter&amp;iptables：如何理解连接跟踪机制？【上】(四)洞悉linux下的Netfilter&amp;iptables：包过滤子系统iptable_filter(三)洞悉linux下的Netfilter&amp;iptables：内核中的rule，match和target(二)洞悉linux下的Netfilter&amp;iptables：内核中的ip_tables小觑(一)洞悉linux下的Netfilter&amp;iptables：什么是Netfilter？Linux Netfilter实现机制和扩展技术","pubDate":"Mon, 27 Feb 2017 02:11:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-network-programming/","category":"技术"},{"title":"从头构建自己的Linux系统","link":"http://ipcreator.me/2017/02/27/Program/Concepts/start-up-of-linux/","description":"wjlkoorey 在博文“Linux系统启动过程分析”中我们了解了linux系统的启动流程，今天我们就来手动一步一步从头来构建一个最小的linux系统，然后用模拟器将其加载起来。常见的模拟器有Qemu、Bochs、VMWare、VPC、Virtual Box和Xen等，以及特殊的模拟UML(User-Mode-Linux)，这里我们选择用VMWare。","pubDate":"Mon, 27 Feb 2017 02:03:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/start-up-of-linux/","category":"技术"},{"title":"小议Linux系统下的文件系统","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-file-system/","description":"wjlkoorey 更多参考： 戏说文件系统之ext2【上】 戏说文件系统之ext2【下】 戏说文件系统之ext2【续】戏说文件系统之ext3【上】 Linux的老江湖们对这个概念当然不会陌生，然而刚接触Linux的新手们就会被文件系统这个概念弄得晕头转向，恰好我当年正好属于后者。 从windows下转到Linux的童鞋听到最多的应该是fat32和ntfs(在windows 2000之后所出现的一种新型的日志文件系统)，那个年代经常听到说“我要把C盘格式化成ntfs格式，D盘格式化成fat32格式”。一到Linux下，很多入门Linux的书籍中当牵扯到文件系统这个术语时，二话不说，不管三七二十一就给出了下面这个图，然后逐一解释一下每个目录是拿来干啥的、里面会放什么类型的文件就完事儿了，弄得初学者经常“丈二和尚摸不着头脑”。难道这就是Linux下的文件系统。而且新手一直被“灌输”一个思想：Linux下一切都是文件，不再像Windows那样用扩展名来为文件分类等等。这就让那些喜欢刨根问底的fresh-fish很是不爽，他们本着对学术的严谨、技术的狂热的态度，一心想弄明白：到底什么才是文件系统。本文的目的就是和大家分享一下我当初是如何学习Linux的文件系统的，也算是一个“老”油条的一些心得吧。","pubDate":"Mon, 27 Feb 2017 01:14:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-file-system/","category":"技术"},{"title":"显示卡的“心脏” GPU工作原理介绍","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-GPU/","description":"designapp 图形处理器(英语：Graphics Processing Unit，缩写：gpu)，又称显示核心、视觉处理器、显示芯片，是一种专门在个人电脑、工作站、游戏机和一些移动设备(如平板电脑、智能手机等)上图像运算工作的微处理器。 用途是将计算机系统所需要的显示信息进行转换驱动，并向显示器提供行扫描信号，控制显示器的正确显示，是连接显示器和个人电脑主板的重要元件，也是“人机对话”的重要设备之一。显卡作为电脑主机里的一个重要组成部分，承担输出显示图形的任务，对于从事专业图形设计的人来说显卡非常重要。 gpu由于历史原因，是为了视频游戏而产生的(至今其主要驱动力还是不断增长的视频游戏市场)，在三维游戏中常常出现的一类操作是对海量数据进行相同的操作，如：对每一个顶点进行同样的坐标变换，对每一个顶点按照同样的光照模型计算颜色值。 gpu的众核架构非常适合把同样的指令流并行发送到众核上，采用不同的输入数据执行。在 2003-2004年左右，图形学之外的领域专家开始注意到gpu与众不同的计算能力，开始尝试把gpu用于通用计算(即GPgpu)。之后NVIDIA发布了CUDA，amd和等公司也发布了OpenCL，gpu开始在通用计算领域得到广泛应用，包括：数值分析，海量数据处理(排序，Map- Reduce等)，金融分析等等。 简而言之，当程序员为cpu编写程序时，他们倾向于利用复杂的逻辑结构优化算法从而减少计算任务的运行时间，即Latency。当程序员为gpu编写程序时，则利用其处理海量数据的优势，通过提高总的数据吞吐量(Throughput)来掩盖 Lantency。 目前，cpu和gpu的区别正在逐渐缩小，因为gpu也在处理不规则任务和线程间通信方面有了长足的进步。另外，功耗问题对于gpu比cpu更严重。 gpu是显示卡的“心脏”，也就相当于cpu在电脑中的作用，它决定了该显卡的档次和大部分性能，同时也是2D显示卡和3D显示卡的区别依据。 2D显示芯片在处理3D图像和特效时主要依赖cpu的处理能力，称为“软加速”。3D显示芯片是将三维图像和特效处理功能集中在显示芯片内，也即所谓的“硬件加速”功能。显示芯片通常是显示卡上最大的芯片(也是引脚最多的)。gpu使显卡减少了对cpu的依赖，并进行部分原本cpu的工作，尤其是在3D图形处理时。gpu所采用的核心技术有硬体T&amp;L、立方环境材质贴图和顶点混合、纹理压缩和凹凸映射贴图、双重纹理四像素256位渲染引擎等，而硬体T&amp;L技术可以说是gpu的标志。 gpu工作原理-工作原理简单的说gpu就是能够从硬件上支持T&amp;L(Transform and LighTIng，多边形转换与光源处理)的显示芯片，因为T&amp;L是3D渲染中的一个重要部分，其作用是计算多边形的3D位置和处理动态光线效果，也可以称为“几何处理”。一个好的T&amp;L单元，可以提供细致的3D物体和高级的光线特效;只不过大多数PC中，T&amp;L的大部分运算是交由cpu处理的(这就也就是所谓的软件T&amp;L)，由于cpu的任务繁多，除了T&amp;L之外，还要做内存管理、输入响应等非3D图形处理工作，因此在实际运算的时候性能会大打折扣，常常出现显卡等待cpu数据的情况，其运算速度远跟不上今天复杂三维游戏的要求。即使cpu的工作频率超过 1GHz或更高，对它的帮助也不大，由于这是PC本身设计造成的问题，与cpu的速度无太大关系。 gpu图形处理，可以大致分成 5 个步骤，如下图箭头的部分。分别为 vertex shader、primiTIve processing、rasterisaTIon、fragment shader、tesTIng and blending。 第一步，vertex shader。是将三维空间中数个(x，y，z)顶点放进 gpu 中。在这一步骤中，电脑会在内部模拟出一个三维空间，并将这些顶点放置在这一空间内部。接着，投影在同一平面上，也是我们将看到的画面。同时，存下各点距离投影面的垂直距离，以便做后续的处理。 这个过程就像是本地球观看星星一般。地球的天空，就像是一个投影面，所有的星星，不管远近皆投影在同一面上。本地球的我们，抬起头来观看星星，分不出星星的远近，只能分辨出亮度。gpu 所投影出的结果，和这个情况类似。 从地球所看到的星空，星星就像是投影到一球面上，除非使用特别的仪器，不然分不出星星和地球的距离 第二步，primitive processing。是将相关的点链接在一起，以形成图形。在一开始输入数个顶点进入 gpu 时，程序会特别注记哪些点是需要组合在一起，以形成一线或面。就像是看星座的时候一样，将相关连的星星连起来，形成特定的图案。 第三步，rasterisation。因为电脑的屏幕是由一个又一个的像素组成，因此，需要将一条连续的直线，使用绘图的演算法，以方格绘出该直线。图形也是以此方式，先标出边线，再用方格填满整个平面。 第四步，fragment shader。将格点化后的图形着上颜色。所需着上的颜色也是于输入时便被注记。在游玩游戏时，这一步相当耗费 gpu 的计算资源，因为光影的效果、物体表面材质皆是在这一步进行，这些计算决定着游戏画面的精细程度。因此在游玩游戏时，调高游戏画面品质大幅增加这一步的计算负担，降低游戏品质。 将一个三角形，用方格呈现近似原始图案，并着上颜色。一块又一块的方格，就是显示器上的像素 最后一步，testing and blending。便是将第一步所获得的投影垂直距离取出，和第四步的结果一同做最后处理。在去除被会被其他较近距离的物体挡住的物体后，让剩下的图形放进 gpu 的输出内存。之后，结果便会被送到电脑屏幕显示。 gpu工作原理-主要供应商gpu有非常多的厂商都生产，和cpu一样，生产的厂商比较多，但大家熟悉的却只有INA，以至于大家以为gpu只有三大厂商。 英特尔英特尔的gpu基本为集成显卡芯片，用于英特尔的主板和英特尔的cpu。可能你想不到，要是只按市场占有率计算，英特尔随着他主板及cpu发售的集成gpu占据了整个gpu市场的60%以上。 他的gpu主要有：唯一一款独立显卡芯片Intel 740(i740)。Extreme Graphics系列、GMA系列(集成于芯片组中)。现在的HD Graphics系列[1] 、Iris? Graphics系列[2] 、Iris? Pro Graphics[2] 系列等(集成于cpu中)。 NVIDIANVIDIA是现在最大的独立显卡芯片生产销售商。他的gpu包括大家熟悉的Geforce系列 ，包括GTX、GTS、GT等。专业工作站的Quadro系列 ，超级计算的Tesla系列 ，多显示器商用的NVS系列 ，移动设备的Tegra系列 。 以前也销售集成在主板上的集成显卡芯片，这些随着主板芯片组一起发售，但是由于amd收购ATI后自身主板芯片组gpu能力提高，NVIDIA芯片组如日中天的景象已经消失了。曾经为游戏机Xbox、PS3供应gpu。 amd(ATI)amd是世界上第二大的独立显卡芯片生产销售商，他的前身就是ATI，2006年amd以54亿美元收购ATI。他的gpu主要是大家熟悉的Radeon系列，包括以前的X、HD系列，近几年的R9、R7、R5、R3，现在的RX系列等。专业工作站的FireGL系列，超级计算的FireStream系列，多显示器商用的FireMV系列，现在前三者已合并为FirePro系列 。 早期ATI还生产过Wonder系列、Mach系列、Rage系列芯片。除了独立显卡之外amd还拥有集成显卡芯片，集成于芯片组、APU中。由于amd收购ATI后，其主板市场迅速扩大，已经夺取了NVIDIA在amd处理器主板芯片组的半壁江山。就现在的发售量和发售盈利方面，amd的gpu市场占有率方面仍然略输于NVIDIA。amd也是游戏机Xbox 360、Wii、Wii U、PS4、Xbox One的gpu供应商。 3dfx是一家于1994年成立的生产3D gpu及显卡的公司。曾经生产了Voodoo系列显卡，并且研发了SLI技术。由于经营不善等问题于2002年被NVIDIA收购。 MatroxMatrox当年和NVIDIA，ATI一起争夺独立显卡芯片市场份额的一家公司，在曾经的一个时期Matrox的显卡和NVIDIA，ATI曾经在性能上比肩过。但由于后来其开发能力日渐衰退，在GF5时期，也就是ATI的9000系列时期，Matrox由于性能上整整落后了GF5900和Raden9800一个世代而逐渐被淘汰，淡出了民用独立显卡市场。但时下Matrox仍然在工程用专业显卡方面有自己的地位。 这些显卡用于工程主图和多头输出仍然很强力。与NVIDIA和amd的专业显卡不同，NVIDIA，ATI的专业显卡涉足的是3D领域，而Matrox得专业显卡涉足的是2D领域，也就是CAD。但由于OpenCL、CUDA的日渐普及，DX10以上显卡将在所有支持CUDA的程序上表现出惊人的性能，也就是说当CUDA在各种运用软件普及的那天，Matrox也必将退出2D专业卡的市场。 SiS和VIA矽统和威盛时下是对孪生兄弟，但他们曾经也是分开的两家公司，并且都生产自己主板的集成显卡芯片。但这可怜的两兄弟已经逐步在淡出主板市场了，也就必定将淡出gpu市场。","pubDate":"Mon, 27 Feb 2017 00:58:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-GPU/","category":"技术"},{"title":"硬盘的存储原理和内部架构","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-hard-disk/","description":"wjlkoorey 本来想写个文件系统的专题，结果发现对硬盘的内部架构和存储原理还是比较模糊，因为不了解“一点”硬盘的存储原理对文件系统的认识老是感觉镜花水月，不踏实。经过搜集整理资料就由了本文的问世。借用Bean_lee兄一句话：成果和荣耀归于前辈。","pubDate":"Mon, 27 Feb 2017 00:58:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-hard-disk/","category":"技术"},{"title":"CPU的内部架构和工作原理","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-cpu/","description":"wjlkoorey 更多参考 处理器体系结构（了解CPU的基本运行原理）——《深入理解计算机系统》CPU的实模式与保护模式（简介） 一直以来，总以为CPU内部真是如当年学习《计算机组成原理》时书上所介绍的那样，是各种逻辑门器件的组合。当看到纳米技术时就想，真的可以把那些器件做的那么小么？直到看了Intel CPU制作流程及AMD芯片的制作流程的介绍不禁感慨，原来科技是如此的发达。 本文我们以Intel为例对CPU的工作原理做简单介绍，仅仅是简单介绍，那么AMD，ARM，MIPS甚至PowerPC你应该会触类旁通才对。","pubDate":"Mon, 27 Feb 2017 00:06:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-cpu/","category":"技术"},{"title":"Android硬件加速原理与实现简介","link":"http://ipcreator.me/2017/02/26/Program/Android/the-essence-of-hardware-accelarate-in-android/","description":"子健 在手机客户端尤其是Android应用的开发过程中，我们经常会接触到“硬件加速”这个词。由于操作系统对底层软硬件封装非常完善，上层软件开发者往往对硬件加速的底层原理了解很少，也不清楚了解底层原理的意义，因此常会有一些误解，如硬件加速是不是通过特殊算法实现页面渲染加速，或是通过硬件提高CPU/GPU运算速率实现渲染加速。 本文尝试从底层硬件原理，一直到上层代码实现，对硬件加速技术进行简单介绍，其中上层实现基于Android 6.0。","pubDate":"Sun, 26 Feb 2017 14:57:06 GMT","guid":"http://ipcreator.me/2017/02/26/Program/Android/the-essence-of-hardware-accelarate-in-android/","category":"技术"},{"title":"聊聊clean code","link":"http://ipcreator.me/2017/02/26/Program/Concepts/the-ways-of-keep-code-clean/","description":"王烨clean code，顾名思义就是整洁的代码，或者说清晰、漂亮的代码，相信大多数工程师都希望自己能写出这样的代码。 也许这是个千人千面的话题，每个工程师都有自己的理解。比如我，从一个天天被骂代码写得烂的人，逐渐学习成长，到现在也能写的出“人模人样”的代码来了。这期间算是积累了一点经验心得，想和大家分享，抛砖引玉。 本文主要针对面向对象编程的clean code来阐述，面向过程代码的思路会比较不同，不在本文的讨论范畴。","pubDate":"Sun, 26 Feb 2017 14:57:06 GMT","guid":"http://ipcreator.me/2017/02/26/Program/Concepts/the-ways-of-keep-code-clean/","category":"技术"},{"title":"实例详解机器学习如何解决问题","link":"http://ipcreator.me/2017/02/26/BusinessAI/example-of-machine-learning-in-meituan/","description":"huawolf 前言随着大数据时代的到来，机器学习成为解决问题的一种重要且关键的工具。不管是工业界还是学术界，机器学习都是一个炙手可热的方向，但是学术界和工业界对机器学习的研究各有侧重，学术界侧重于对机器学习理论的研究，工业界侧重于如何用机器学习来解决实际问题。我们结合美团在机器学习上的实践，进行一个实战（InAction）系列的介绍（带“机器学习InAction系列”标签的文章），介绍机器学习在解决工业界问题的实战中所需的基本技术、经验和技巧。本文主要结合实际问题，概要地介绍机器学习解决实际问题的整个流程，包括对问题建模、准备训练数据、抽取特征、训练模型和优化模型等关键环节；另外几篇则会对这些关键环节进行更深入地介绍。 下文分为1）机器学习的概述，2）对问题建模，3）准备训练数据，4）抽取特征，5）训练模型，6）优化模型，7）总结 共7个章节进行介绍。","pubDate":"Sun, 26 Feb 2017 14:34:06 GMT","guid":"http://ipcreator.me/2017/02/26/BusinessAI/example-of-machine-learning-in-meituan/","category":"AI"},{"title":"机器学习中的数据清洗与特征处理综述","link":"http://ipcreator.me/2017/02/26/BusinessAI/data-clean-and-remark-feature-in-meituan/","description":"caohao 背景随着美团交易规模的逐步增大，积累下来的业务数据和交易数据越来越多，这些数据是美团做为一个团购平台最宝贵的财富。通过对这些数据的分析和挖掘，不仅能给美团业务发展方向提供决策支持，也为业务的迭代指明了方向。目前在美团的团购系统中大量地应用到了机器学习和数据挖掘技术，例如个性化推荐、筛选排序、搜索排序、用户建模等等，为公司创造了巨大的价值。 本文主要介绍在美团的推荐与个性化团队实践中的数据清洗与特征挖掘方法。主要内容已经在内部公开课”机器学习InAction系列”讲过，本博客的内容主要是讲座内容的提炼和总结。","pubDate":"Sun, 26 Feb 2017 14:24:06 GMT","guid":"http://ipcreator.me/2017/02/26/BusinessAI/data-clean-and-remark-feature-in-meituan/","category":"AI"},{"title":"深入FFM原理与实践","link":"http://ipcreator.me/2017/02/26/BusinessAI/ffm-learning-in-meituan/","description":"del2z, 大龙 前言FM和FFM模型是最近几年提出的模型，凭借其在数据量比较大并且特征稀疏的情况下，仍然能够得到优秀的性能和效果的特性，屡次在各大公司举办的CTR预估比赛中获得不错的战绩。美团点评技术团队在搭建DSP的过程中，探索并使用了FM和FFM模型进行CTR和CVR预估，并且取得了不错的效果。本文旨在把我们对FM和FFM原理的探索和应用的经验介绍给有兴趣的读者。 在计算广告领域，点击率CTR（click-through rate）和转化率CVR（conversion rate）是衡量广告流量的两个关键指标。准确的估计CTR、CVR对于提高流量的价值，增加广告收入有重要的指导作用。预估CTR/CVR，业界常用的方法有人工特征工程 + LR(Logistic Regression)、GBDT(Gradient Boosting Decision Tree) + LR[1][2][3]、FM（Factorization Machine）[2][7]和FFM（Field-aware Factorization Machine）[9]模型。在这些模型中，FM和FFM近年来表现突出，分别在由Criteo和Avazu举办的CTR预测竞赛中夺得冠军[4][5]。 考虑到FFM模型在CTR预估比赛中的不俗战绩，美团点评技术团队在搭建DSP（Demand Side Platform）[6]平台时，在站内CTR/CVR的预估上使用了该模型，取得了不错的效果。本文是基于对FFM模型的深度调研和使用经验，从原理、实现和应用几个方面对FFM进行探讨，希望能够从原理上解释FFM模型在点击率预估上取得优秀效果的原因。因为FFM是在FM的基础上改进得来的，所以我们首先引入FM模型，本文章节组织方式如下： 首先介绍FM的原理。其次介绍FFM对FM的改进。然后介绍FFM的实现细节。最后介绍模型在DSP场景的应用。","pubDate":"Sun, 26 Feb 2017 14:20:06 GMT","guid":"http://ipcreator.me/2017/02/26/BusinessAI/ffm-learning-in-meituan/","category":"AI"},{"title":"Online Learning算法理论与实践","link":"http://ipcreator.me/2017/02/26/BusinessAI/online-learning-in-meituan/","description":"孔东营 背景Online Learning是工业界比较常用的机器学习算法，在很多场景下都能有很好的效果。本文主要介绍Online Learning的基本原理和两种常用的Online Learning算法：FTRL（Follow The Regularized Leader）[1]和BPR（Bayesian Probit Regression）[2]，以及Online Learning在美团移动端推荐重排序的应用。 什么是Online Learning准确地说，Online Learning并不是一种模型，而是一种模型的训练方法，Online Learning能够根据线上反馈数据，实时快速地进行模型调整，使得模型及时反映线上的变化，提高线上预测的准确率。Online Learning的流程包括：将模型的预测结果展现给用户，然后收集用户的反馈数据，再用来训练模型，形成闭环的系统。如上图所示：","pubDate":"Sun, 26 Feb 2017 14:13:06 GMT","guid":"http://ipcreator.me/2017/02/26/BusinessAI/online-learning-in-meituan/","category":"AI"},{"title":"外卖排序系统特征生产框架","link":"http://ipcreator.me/2017/02/26/BusinessAI/framework-of-get-features-in-meituan/","description":"海文 背景外卖的排序策略是由机器学习模型驱动的，模型迭代效率制约着策略优化效果。如上图所示，在排序系统里，特征是最为基础的部分：有了特征之后，我们离线训练出模型，然后将特征和模型一起推送给线上排序服务使用。特征生产Pipeline对于策略迭代的效率起着至关重要的作用。经过实践中的积累和提炼，我们整理出一套通用的特征生产框架，大大节省开发量，提高策略迭代效率。 外卖排序系统使用GBDT（Gradient Boosting Decision Tree）树模型，比较复杂。受限于计算能力，除了上下文特征（如时间、地域、终端类型、距离等）之外，目前使用的主要是一些宽泛的统计特征，比如商家销量、商家单均价、用户的品类偏好等。这些特征的生产流程包括：离线的统计、离线到在线的同步、在线的加载等。 图2 特征生产流程","pubDate":"Sun, 26 Feb 2017 14:04:06 GMT","guid":"http://ipcreator.me/2017/02/26/BusinessAI/framework-of-get-features-in-meituan/","category":"AI"},{"title":"深度学习在美团点评的应用","link":"http://ipcreator.me/2017/02/26/BusinessAI/deep-learning-in-meituan/","description":"文竹 李彪 晓明 前言近年来，深度学习在语音、图像、自然语言处理等领域取得非常突出的成果，成了最引人注目的技术热点之一。美团点评这两年在深度学习方面也进行了一些探索，其中在自然语言处理领域，我们将深度学习技术应用于文本分析、语义匹配、搜索引擎的排序模型等；在计算机视觉领域，我们将其应用于文字识别、目标检测、图像分类、图像质量排序等。下面我们就以语义匹配、图像质量排序及文字识别这三个应用场景为例，来详细介绍美团点评在深度学习技术及应用方面的经验和方法论。","pubDate":"Sun, 26 Feb 2017 13:56:06 GMT","guid":"http://ipcreator.me/2017/02/26/BusinessAI/deep-learning-in-meituan/","category":"AI"},{"title":"美团Android DEX自动拆包及动态加载简介","link":"http://ipcreator.me/2017/02/26/Program/Android/dynamic-load-android-dex-from-meituan/","description":"美团Android DEX自动拆包及动态加载简介jianshuai xiaoyang ·2015-06-15 10:00 概述 作为一个android开发者，在开发应用时，随着业务规模发展到一定程度，不断地加入新功能、添加新的类库，代码在急剧的膨胀，相应的apk包的大小也急剧增加， 那么终有一天，你会不幸遇到这个错误： 生成的apk在android 2.3或之前的机器上无法安装，提示INSTALL_FAILED_DEXOPT方法数量过多，编译时出错，提示： Conversion to Dalvik format failed:Unable to execute dex: method ID not in [0, 0xffff]: 65536 而问题产生的具体原因如下： 无法安装（Android 2.3 INSTALL_FAILED_DEXOPT）问题，是由dexopt的LinearAlloc限制引起的，在Android版本不同分别经历了4M/5M/8M/16M限制，目前主流4.2.x系统上可能都已到16M， 在Gingerbread或者以下系统LinearAllocHdr分配空间只有5M大小的， 高于Gingerbread的系统提升到了8M。Dalvik linearAlloc是一个固定大小的缓冲区。在应用的安装过程中，系统会运行一个名为dexopt的程序为该应用在当前机型中运行做准备。dexopt使用LinearAlloc来存储应用的方法信息。Android 2.2和2.3的缓冲区只有5MB，Android 4.x提高到了8MB或16MB。当方法数量过多导致超出缓冲区大小时，会造成dexopt崩溃。 超过最大方法数限制的问题，是由于DEX文件格式限制，一个DEX文件中method个数采用使用原生类型short来索引文件中的方法，也就是4个字节共计最多表达65536个method，field/class的个数也均有此限制。对于DEX文件，则是将工程所需全部class文件合并且压缩到一个DEX文件期间，也就是Android打包的DEX过程中， 单个DEX文件可被引用的方法总数（自己开发的代码以及所引用的Android框架、类库的代码）被限制为65536；","pubDate":"Sun, 26 Feb 2017 13:31:05 GMT","guid":"http://ipcreator.me/2017/02/26/Program/Android/dynamic-load-android-dex-from-meituan/","category":"个人"},{"title":"MySQL索引原理及慢查询优化","link":"http://ipcreator.me/2017/02/26/Program/Concepts/the-essence-of-mysql-index/","description":"MySQL索引原理及慢查询优化 NeverMore ·2014-06-30 18:35 MySQL凭借着出色的性能、低廉的成本、丰富的资源，已经成为绝大多数互联网公司的首选关系型数据库。虽然性能出色，但所谓“好马配好鞍”，如何能够更好的使用它，已经成为开发工程师的必修课，我们经常会从职位描述上看到诸如“精通MySQL”、“SQL语句优化”、“了解数据库原理”等要求。我们知道一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，所以查询语句的优化显然是重中之重。 本人从13年7月份起，一直在美团核心业务系统部做慢查询的优化工作，共计十余个系统，累计解决和积累了上百个慢查询案例。随着业务的复杂性提升，遇到的问题千奇百怪，五花八门，匪夷所思。本文旨在以开发工程师的角度来解释数据库索引的原理和如何优化慢查询。","pubDate":"Sun, 26 Feb 2017 13:27:05 GMT","guid":"http://ipcreator.me/2017/02/26/Program/Concepts/the-essence-of-mysql-index/","category":"个人"},{"title":"Android Support Library的前世今生","link":"http://ipcreator.me/2017/02/26/Program/Android/history-of-v4-and-v7/","description":"原文作者：都有米 在之前的开发经历中经常需要导入一些如v4、v7、v13等Android官方的支持包，遇到这些情况时都是网上搜索一下，按照前人给的示例添加依赖。这么稀里糊涂的使用后代码正常运行了，但心中不免会有一些疑问，如，Android官方为什么要提供支持包，都提供哪些支持包，这些支持包又提供了什么特性，开发者又应该如何选择使用这些支持包？ 为了解开这些疑问，周末在家仔细阅读了官方的开发者指导文档的相关内容。这篇文章就是读后整理的读书笔记。","pubDate":"Sun, 26 Feb 2017 10:16:06 GMT","guid":"http://ipcreator.me/2017/02/26/Program/Android/history-of-v4-and-v7/","category":"技术"},{"title":"Android经典原理文章","link":"http://ipcreator.me/2017/02/26/Program/Android/awesome-articles-of-android/","description":"Android安全攻防战，反编译与混淆技术完全解析（上） Android安全攻防战，反编译与混淆技术完全解析（下）","pubDate":"Sun, 26 Feb 2017 01:04:05 GMT","guid":"http://ipcreator.me/2017/02/26/Program/Android/awesome-articles-of-android/","category":"个人"},{"title":"Android热更新方案Robust","link":"http://ipcreator.me/2017/02/26/Program/Android/hot-update-of-android/","description":"原文作者：吴坤 张梦 定旭 晓阳 美团•大众点评是中国最大的O2O交易平台，目前已拥有近6亿用户，合作各类商户达432万，订单峰值突破1150万单。美团App是平台主要的入口之一，O2O交易场景的复杂性决定了App稳定性要达到近乎苛刻的要求。用户到店消费买优惠券时死活下不了单，定外卖一个明显可用的红包怎么点也选不中，上了一个新活动用户一点就Crash……过去发生过的这些画面太美不敢想象。客户端相对Web版最大的短板就是有发版的概念，对线上事故很难有即时生效的解决方式，每次发版都如临深渊如履薄冰，毕竟就算再完善的开发测试流程也无法保证不会将Bug带到线上。 从去年开始，Android平台出现了一些优秀的热更新方案，主要可以分为两类：一类是基于multidex的热更新框架，包括Nuwa、Tinker等；另一类就是native hook方案，如阿里开源的Andfix和Dexposed。这样客户端也有了实时修复线上问题的可能。但经过调研之后，我们发现上述方案或多或少都有一些问题，基于native hook的方案：需要针对dalvik虚拟机和art虚拟机做适配，需要考虑指令集的兼容问题，需要native代码支持，兼容性上会有一定的影响；基于Multidex的方案，需要反射更改DexElements，改变Dex的加载顺序，这使得patch需要在下次启动时才能生效，实时性就受到了影响，同时这种方案在android N [speed-profile]编译模式下可能会有问题，可以参考Android N混合编译与对热补丁影响解析。考虑到美团Android用户机型分布的碎片化，很难有一个方案能覆盖所有机型。 去年底的Android Dev Summit上，Google高调发布了Android Studio 2.0，其中最重要的新特性Instant Run，实现了对代码修改的实时生效（热插拔）。我们在了解Instant Run原理之后，实现了一个兼容性更强的热更新方案，这就是产品化的hotpatch框架－－Robust。","pubDate":"Sun, 26 Feb 2017 01:04:05 GMT","guid":"http://ipcreator.me/2017/02/26/Program/Android/hot-update-of-android/","category":"个人"},{"title":"GestureDetector","link":"http://ipcreator.me/2017/02/25/Program/Android/GestureDetector/","description":"GestureDetector public class GestureDetectorextends Object java.lang.Object ↳ android.view.GestureDetector Detects various gestures and events using the supplied MotionEvents. The GestureDetector.OnGestureListener callback will notify users when a particular motion event has occurred. This class should only be used with MotionEvents reported via touch (don’t use for trackball events). To use this class: Create an instance of the GestureDetector for your View In the onTouchEvent(MotionEvent) method ensure you call onTouchEvent(MotionEvent). The methods defined in your callback will be executed when the events occur. If listening for onContextClick(MotionEvent) you must call onGenericMotionEvent(MotionEvent) in onGenericMotionEvent(MotionEvent). 参考文章：Android - GestureDetector 实现界面左右滑动效果的优化Android GestureDetector简单手势检测（左右滑动、上下滑动）","pubDate":"Sat, 25 Feb 2017 08:11:06 GMT","guid":"http://ipcreator.me/2017/02/25/Program/Android/GestureDetector/","category":"个人"}]}