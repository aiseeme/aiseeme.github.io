{"title":"IPCreator","description":"For life, growing up is the only password.","language":"zn-CN","link":"http://ipcreator.me","pubDate":"Sun, 31 Dec 2017 15:59:06 GMT","lastBuildDate":"Tue, 07 Mar 2017 14:50:09 GMT","generator":"hexo-generator-json-feed","webMaster":"For life","items":[{"title":"Thanks to...","link":"http://ipcreator.me/2017/12/31/MyView/Diary/special-thanks/","description":"Standing on Shoulders of Giants 站在巨人的肩上，才有可能在有限的时间里取得最大的成绩… 发现趋势，追随趋势，顺势而安、乘势而起、造势而雄，不做旁观者，要成弄潮儿如果进入了痛苦的高原期，请记住：付出与收获成正比，成功之路本身就不轻松，与戴皇冠必承其重，此时，你需要坚信自己的判断和选择，坚持、坚持再坚持，基于量变到质变的法则，一般都会“踏破铁鞋无觅处，得来全不费工夫”，届时，”待到山花烂漫时，君在丛中笑”。","pubDate":"Sun, 31 Dec 2017 15:59:06 GMT","guid":"http://ipcreator.me/2017/12/31/MyView/Diary/special-thanks/","category":"技术"},{"title":"Dev Bugs","link":"http://ipcreator.me/2017/12/31/MyView/Diary/Tech/android-trouble-resolver/","description":"什么是智者？就是一个坑不跌两回呗 The wiser man doesn’t fall into the same pit twice. 基础不牢、地动山摇 Without a solid foundation, the earth will shake.","pubDate":"Sun, 31 Dec 2017 14:59:06 GMT","guid":"http://ipcreator.me/2017/12/31/MyView/Diary/Tech/android-trouble-resolver/","category":"技术"},{"title":"Java tips","link":"http://ipcreator.me/2017/12/31/MyView/Diary/Tech/java-trouble-solver/","description":"咖啡需要慢慢品，Java也如此…","pubDate":"Sun, 31 Dec 2017 13:59:06 GMT","guid":"http://ipcreator.me/2017/12/31/MyView/Diary/Tech/java-trouble-solver/","category":"技术"},{"title":"Linux 十大常用命令","link":"http://ipcreator.me/2017/03/05/Program/Android/linux-tips/","description":"mkdir、rmdir、cd、ls、cat、less、cp、mv、rm 、chmod cd .. 返回上级目录（若当前目录为“/“，则执行完后还在“/“；”..”为上级目录的意思）；cd ../.. 返回上两级目录；","pubDate":"Sun, 05 Mar 2017 08:42:06 GMT","guid":"http://ipcreator.me/2017/03/05/Program/Android/linux-tips/","category":"技术"},{"title":"Android Debug Bridge tips","link":"http://ipcreator.me/2017/03/05/Program/Android/adb-tips/","description":"图形化界面太低效，还存在DDMS连接不稳定的隐患，尽量通过命令行方式高效解决","pubDate":"Sun, 05 Mar 2017 07:25:06 GMT","guid":"http://ipcreator.me/2017/03/05/Program/Android/adb-tips/","category":"技术"},{"title":"APK Signature Scheme v2","link":"http://ipcreator.me/2017/03/04/Program/Android/android_signature_v1_and_v2/","description":"Android 7.0 introduces APK Signature Scheme v2, a new app-signing scheme that offers faster app install times and more protection against unauthorized alterations to APK files. By default, Android Studio 2.2 and the Android Plugin for Gradle 2.2 sign your app using both APK Signature Scheme v2 and the traditional signing scheme, which uses JAR signing.","pubDate":"Sat, 04 Mar 2017 05:30:06 GMT","guid":"http://ipcreator.me/2017/03/04/Program/Android/android_signature_v1_and_v2/","category":"技术"},{"title":"RollPlayer","link":"http://ipcreator.me/2017/03/03/MyView/Diary/Tech/my-favor-music-player/","description":"做自己喜欢又擅长的，同时解决生活中的实际痛点，简单极致、有用有趣，It’s my life.","pubDate":"Fri, 03 Mar 2017 01:42:06 GMT","guid":"http://ipcreator.me/2017/03/03/MyView/Diary/Tech/my-favor-music-player/","category":"技术"},{"title":"如何正确地写出单例模式","link":"http://ipcreator.me/2017/03/03/Program/Concepts/how-to-write-singe-instance/","description":"Jark’s Blog 单例模式算是设计模式中最容易理解，也是最容易手写代码的模式了吧。但是其中的坑却不少，所以也常作为面试题来考。本文主要对几种单例写法的整理，并分析其优缺点。很多都是一些老生常谈的问题，但如果你不知道如何创建一个线程安全的单例，不知道什么是双检锁，那这篇文章可能会帮助到你。","pubDate":"Fri, 03 Mar 2017 00:31:06 GMT","guid":"http://ipcreator.me/2017/03/03/Program/Concepts/how-to-write-singe-instance/","category":"技术"},{"title":"AndroidStudio技巧","link":"http://ipcreator.me/2017/03/03/Program/Resources/tips-of-androidstudio/","description":"提高效率的 Android Studio 技巧汇总 工欲善其事必先利其器，磨刀不误砍柴工","pubDate":"Fri, 03 Mar 2017 00:31:06 GMT","guid":"http://ipcreator.me/2017/03/03/Program/Resources/tips-of-androidstudio/","category":"技术"},{"title":"开源软件及国内发展现状","link":"http://ipcreator.me/2017/03/02/Program/Concepts/history-of-open-source/","description":"作者：魏永明（飞漫软件CEO）。本文经章文嵩、陈渝审阅。","pubDate":"Thu, 02 Mar 2017 01:33:06 GMT","guid":"http://ipcreator.me/2017/03/02/Program/Concepts/history-of-open-source/","category":"技术"},{"title":"Android模拟器影响系统音量的解决方法","link":"http://ipcreator.me/2017/03/01/MyView/Diary/Tech/android-emulator-system-sound/","description":"用常识思维解决问题，既简单又快捷…有时候离解决方案只有一步之遥。","pubDate":"Wed, 01 Mar 2017 13:06:06 GMT","guid":"http://ipcreator.me/2017/03/01/MyView/Diary/Tech/android-emulator-system-sound/","category":"技术"},{"title":"Android安全攻防战，反编译与混淆技术完全解析","link":"http://ipcreator.me/2017/02/27/Program/Android/awesome-articles-of-android/","description":"Android安全攻防战，反编译与混淆技术完全解析（上） Android安全攻防战，反编译与混淆技术完全解析（下） 之前一直有犹豫过要不要写这篇文章，毕竟去反编译人家的程序并不是什么值得骄傲的事情。不过单纯从技术角度上来讲，掌握反编译功能确实是一项非常有用的技能，可能平常不太会用得到，但是一旦真的需要用到的了，而你却不会的话，那就非常头疼了。另外既然别人可以反编译程序，我们当然有理由应该对程序进行一定程度的保护，因此代码混淆也是我们必须要掌握的一项技术。那么最近的两篇文章我们就围绕反编译和混淆这两个主题来进行一次完全解析。","pubDate":"Mon, 27 Feb 2017 05:57:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Android/awesome-articles-of-android/","category":"技术"},{"title":"多媒体技术基础之---重新认识声音","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-sound/","description":"wjlkoorey 声音一个最基本的常识就是“它是一种能量”，初中物理课上我们也学过声音的三要素分别是音色、音调和响度。 音色：简单理解，就是一种声音的固有特征。比如，电子琴和小提琴发出的声音是有明显区别的，笛子和古筝也有各自的声音特征。有些声音模仿秀的选手可以通过训练，达到模仿不同人或者不同乐器的效果。 音调：也就是我们所说的频率，单位是赫兹Hz，频率越高听起来越刺耳、越尖锐，频率越低听起来越低沉、越浑厚。医学研究表明，人的听觉系统能察觉的最低频率为20Hz，最高为20000Hz，超出这个范围人类一般就听不到了。其实现实生活中根本就不存在完全能听到20Hz~20kHz这样的人，并且随着年龄的增长、体质的变化，人能听到的声音只会是这个区间的一个子集。","pubDate":"Mon, 27 Feb 2017 03:25:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-sound/","category":"技术"},{"title":"多媒体技术基础之---视频","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-video/","description":"wjlkoorey 我们都知道，视频本质上源于电影。2014年冯导的《私人订制》里葛大爷对“全球最俗大导”说了那么一番话，印象比较深刻：“经过考证，电影是大众娱乐，起源于走马灯。本身就是一俗艺术，和雅压根儿就不沾边。”而当代科学史研究者们大都依据文学家范成大（1126—1193）的诗文记载，认为南宋时才有走马灯。走马灯的两个主要特点分别是：一、利用热气流作动力；二、以涡轮装置带动灯上画面转动。","pubDate":"Mon, 27 Feb 2017 03:19:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-video/","category":"技术"},{"title":"多媒体技术基础之---图像","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-picture/","description":"wjlkoorey 2012年11月13日，83岁的柯达公司退休工程师布赖斯·拜尔(Bryce Bayer)离开了这个世界，永远离开了我们，离开了爱戴他的人们，而他在数字图像领域的杰出成就不应该就这样被淹没在历史的洪流里，所以，谨以2014年第一篇博文献给伟大的布赖斯·拜尔先生。","pubDate":"Mon, 27 Feb 2017 03:04:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-picture/","category":"技术"},{"title":"多媒体技术基础之---色彩空间","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-color/","description":"wjlkoorey 上一篇博文里，我们已经了解到图像是如何数字化的，但是关于数字图像的存储和显示问题还没提到，但在了解数字图像的存储和显示之前，我们先得弄明白数字图像里一个让很多人迷糊的概念：色彩空间。有的技术文献里也将其表述为颜色模型、颜色空间等，说的都是同一个东西。","pubDate":"Mon, 27 Feb 2017 02:58:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-essence-of-color/","category":"技术"},{"title":"Linux系统中“动态库”和“静态库”那点事儿","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-linux-library/","description":"wjlkoorey 更多参考：深入理解C语言的函数调用过程 今天我们主要来说说Linux系统下基于动态库(.so)和静态(.a)的程序那些猫腻。在这之前，我们需要了解一下源代码到可执行程序之间到底发生了什么神奇而美妙的事情。 在Linux操作系统中，普遍使用ELF格式作为可执行程序或者程序生成过程中的中间格式。ELF（Executable and Linking Format，可执行连接格式） 是UNIX系统实验室（USL）作为应用程序二进制接口（Application BinaryInterface，ABI）而开发和发布的。工具接口标准委员会（TIS）选择了正在发展中的ELF标准作为工作在32位Intel体系上不同操作系统之间可移植的二进制文件格式。本文不对ELF文件格式及其组成做太多解释，以免冲淡本文的主题，大家只要知道这么个概念就行。以后再详解Linux中的ELF格式。源代码到可执行程序的转换时需要经历如下图所示的过程：","pubDate":"Mon, 27 Feb 2017 02:24:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-linux-library/","category":"技术"},{"title":"Linux网络编程","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-network-programming/","description":"Linux的整个网络协议栈都构建与Linux Kernel中，整个栈也是严格按照分层的思想来设计的，整个栈共分为五层，分别是 ： 1． 系统调用接口层，实质是一个面向用户空间应用程序的接口调用库，向用户空间应用程序提供使用网络服务的接口。2． 协议无关的接口层，就是SOCKET层，这一层的目的是屏蔽底层的不同协议（更准确的来说主要是TCP与UDP，当然还包括RAW IP， SCTP等），以便与系统调用层之间的接口可以简单，统一。简单的说，不管我们应用层使用什么协议，都要通过系统调用接口来建立一个SOCKET，这个SOCKET其实是一个巨大的sock结构，它和下面一层的网络协议层联系起来，屏蔽了不同的网络协议的不同，只把数据部分呈献给应用层（通过系统调用接口来呈献）。3． 网络协议实现层，毫无疑问，这是整个协议栈的核心。这一层主要实现各种网络协议，最主要的当然是IP，ICMP，ARP，RARP，TCP，UDP等。这一层包含了很多设计的技巧与算法，相当的不错。4． 与具体设备无关的驱动接口层，这一层的目的主要是为了统一不同的接口卡的驱动程序与网络协议层的接口，它将各种不同的驱动程序的功能统一抽象为几个特殊的动作，如open，close，init等，这一层可以屏蔽底层不同的驱动程序。5． 驱动程序层，这一层的目的就很简单了，就是建立与硬件的接口层。可以看到，Linux网络协议栈是一个严格分层的结构，其中的每一层都执行相对独立的功能，结构非常清晰。其中的两个“无关”层的设计非常棒，通过这两个“无关”层，其协议栈可以非常轻松的进行扩展。在我们自己的软件设计中，可以吸收这种设计方法。","pubDate":"Mon, 27 Feb 2017 02:11:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-network-programming/","category":"技术"},{"title":"从头构建自己的Linux系统","link":"http://ipcreator.me/2017/02/27/Program/Concepts/start-up-of-linux/","description":"wjlkoorey 在博文“Linux系统启动过程分析”中我们了解了linux系统的启动流程，今天我们就来手动一步一步从头来构建一个最小的linux系统，然后用模拟器将其加载起来。常见的模拟器有Qemu、Bochs、VMWare、VPC、Virtual Box和Xen等，以及特殊的模拟UML(User-Mode-Linux)，这里我们选择用VMWare。","pubDate":"Mon, 27 Feb 2017 02:03:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/start-up-of-linux/","category":"技术"},{"title":"小议Linux系统下的文件系统","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-file-system/","description":"wjlkoorey Linux的老江湖们对这个概念当然不会陌生，然而刚接触Linux的新手们就会被文件系统这个概念弄得晕头转向，恰好我当年正好属于后者。 从windows下转到Linux的童鞋听到最多的应该是fat32和ntfs(在windows 2000之后所出现的一种新型的日志文件系统)，那个年代经常听到说“我要把C盘格式化成ntfs格式，D盘格式化成fat32格式”。一到Linux下，很多入门Linux的书籍中当牵扯到文件系统这个术语时，二话不说，不管三七二十一就给出了下面这个图，然后逐一解释一下每个目录是拿来干啥的、里面会放什么类型的文件就完事儿了，弄得初学者经常“丈二和尚摸不着头脑”。难道这就是Linux下的文件系统。而且新手一直被“灌输”一个思想：Linux下一切都是文件，不再像Windows那样用扩展名来为文件分类等等。这就让那些喜欢刨根问底的fresh-fish很是不爽，他们本着对学术的严谨、技术的狂热的态度，一心想弄明白：到底什么才是文件系统。本文的目的就是和大家分享一下我当初是如何学习Linux的文件系统的，也算是一个“老”油条的一些心得吧。","pubDate":"Mon, 27 Feb 2017 01:14:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-file-system/","category":"技术"},{"title":"显示卡的“心脏” GPU工作原理介绍","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-GPU/","description":"designapp 图形处理器(英语：Graphics Processing Unit，缩写：gpu)，又称显示核心、视觉处理器、显示芯片，是一种专门在个人电脑、工作站、游戏机和一些移动设备(如平板电脑、智能手机等)上图像运算工作的微处理器。 用途是将计算机系统所需要的显示信息进行转换驱动，并向显示器提供行扫描信号，控制显示器的正确显示，是连接显示器和个人电脑主板的重要元件，也是“人机对话”的重要设备之一。显卡作为电脑主机里的一个重要组成部分，承担输出显示图形的任务，对于从事专业图形设计的人来说显卡非常重要。","pubDate":"Mon, 27 Feb 2017 00:58:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-GPU/","category":"技术"},{"title":"硬盘的存储原理和内部架构","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-hard-disk/","description":"wjlkoorey 本来想写个文件系统的专题，结果发现对硬盘的内部架构和存储原理还是比较模糊，因为不了解“一点”硬盘的存储原理对文件系统的认识老是感觉镜花水月，不踏实。经过搜集整理资料就由了本文的问世。借用Bean_lee兄一句话：成果和荣耀归于前辈。","pubDate":"Mon, 27 Feb 2017 00:58:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-hard-disk/","category":"技术"},{"title":"CPU的内部架构和工作原理","link":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-cpu/","description":"wjlkoorey 更多参考 处理器体系结构（了解CPU的基本运行原理）——《深入理解计算机系统》CPU的实模式与保护模式（简介） 一直以来，总以为CPU内部真是如当年学习《计算机组成原理》时书上所介绍的那样，是各种逻辑门器件的组合。当看到纳米技术时就想，真的可以把那些器件做的那么小么？直到看了Intel CPU制作流程及AMD芯片的制作流程的介绍不禁感慨，原来科技是如此的发达。 本文我们以Intel为例对CPU的工作原理做简单介绍，仅仅是简单介绍，那么AMD，ARM，MIPS甚至PowerPC你应该会触类旁通才对。","pubDate":"Mon, 27 Feb 2017 00:06:06 GMT","guid":"http://ipcreator.me/2017/02/27/Program/Concepts/the-anatomy-of-cpu/","category":"技术"},{"title":"聊聊clean code","link":"http://ipcreator.me/2017/02/26/Program/Concepts/the-ways-of-keep-code-clean/","description":"王烨clean code，顾名思义就是整洁的代码，或者说清晰、漂亮的代码，相信大多数工程师都希望自己能写出这样的代码。 也许这是个千人千面的话题，每个工程师都有自己的理解。比如我，从一个天天被骂代码写得烂的人，逐渐学习成长，到现在也能写的出“人模人样”的代码来了。这期间算是积累了一点经验心得，想和大家分享，抛砖引玉。 本文主要针对面向对象编程的clean code来阐述，面向过程代码的思路会比较不同，不在本文的讨论范畴。","pubDate":"Sun, 26 Feb 2017 14:57:06 GMT","guid":"http://ipcreator.me/2017/02/26/Program/Concepts/the-ways-of-keep-code-clean/","category":"技术"},{"title":"Android硬件加速原理与实现简介","link":"http://ipcreator.me/2017/02/26/Program/Android/the-essence-of-hardware-accelarate-in-android/","description":"子健 在手机客户端尤其是Android应用的开发过程中，我们经常会接触到“硬件加速”这个词。由于操作系统对底层软硬件封装非常完善，上层软件开发者往往对硬件加速的底层原理了解很少，也不清楚了解底层原理的意义，因此常会有一些误解，如硬件加速是不是通过特殊算法实现页面渲染加速，或是通过硬件提高CPU/GPU运算速率实现渲染加速。 本文尝试从底层硬件原理，一直到上层代码实现，对硬件加速技术进行简单介绍，其中上层实现基于Android 6.0。","pubDate":"Sun, 26 Feb 2017 14:57:06 GMT","guid":"http://ipcreator.me/2017/02/26/Program/Android/the-essence-of-hardware-accelarate-in-android/","category":"技术"}]}